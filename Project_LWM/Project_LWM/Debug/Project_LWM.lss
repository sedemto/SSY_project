
Project_LWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000212  00800200  0000656c  00006600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000656c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000018ce  00800412  00800412  00006812  2**0
                  ALLOC
  3 .noinit       00000001  00801ce0  00801ce0  00006812  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00006812  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006870  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000a28  00000000  00000000  000068b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f52d  00000000  00000000  000072d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004684  00000000  00000000  00016805  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006743  00000000  00000000  0001ae89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000025e4  00000000  00000000  000215cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000035d6  00000000  00000000  00023bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000bf24  00000000  00000000  00027186  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009e8  00000000  00000000  000330aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c5 c1       	rjmp	.+906    	; 0x38c <__ctors_end>
       2:	00 00       	nop
       4:	f3 c1       	rjmp	.+998    	; 0x3ec <__bad_interrupt>
       6:	00 00       	nop
       8:	f1 c1       	rjmp	.+994    	; 0x3ec <__bad_interrupt>
       a:	00 00       	nop
       c:	ef c1       	rjmp	.+990    	; 0x3ec <__bad_interrupt>
       e:	00 00       	nop
      10:	ed c1       	rjmp	.+986    	; 0x3ec <__bad_interrupt>
      12:	00 00       	nop
      14:	eb c1       	rjmp	.+982    	; 0x3ec <__bad_interrupt>
      16:	00 00       	nop
      18:	e9 c1       	rjmp	.+978    	; 0x3ec <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e7 c1       	rjmp	.+974    	; 0x3ec <__bad_interrupt>
      1e:	00 00       	nop
      20:	e5 c1       	rjmp	.+970    	; 0x3ec <__bad_interrupt>
      22:	00 00       	nop
      24:	e3 c1       	rjmp	.+966    	; 0x3ec <__bad_interrupt>
      26:	00 00       	nop
      28:	e1 c1       	rjmp	.+962    	; 0x3ec <__bad_interrupt>
      2a:	00 00       	nop
      2c:	df c1       	rjmp	.+958    	; 0x3ec <__bad_interrupt>
      2e:	00 00       	nop
      30:	dd c1       	rjmp	.+954    	; 0x3ec <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 26 21 	jmp	0x424c	; 0x424c <__vector_13>
      38:	d9 c1       	rjmp	.+946    	; 0x3ec <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d7 c1       	rjmp	.+942    	; 0x3ec <__bad_interrupt>
      3e:	00 00       	nop
      40:	d5 c1       	rjmp	.+938    	; 0x3ec <__bad_interrupt>
      42:	00 00       	nop
      44:	d3 c1       	rjmp	.+934    	; 0x3ec <__bad_interrupt>
      46:	00 00       	nop
      48:	d1 c1       	rjmp	.+930    	; 0x3ec <__bad_interrupt>
      4a:	00 00       	nop
      4c:	cf c1       	rjmp	.+926    	; 0x3ec <__bad_interrupt>
      4e:	00 00       	nop
      50:	cd c1       	rjmp	.+922    	; 0x3ec <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__vector_21>
      58:	c9 c1       	rjmp	.+914    	; 0x3ec <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c7 c1       	rjmp	.+910    	; 0x3ec <__bad_interrupt>
      5e:	00 00       	nop
      60:	c5 c1       	rjmp	.+906    	; 0x3ec <__bad_interrupt>
      62:	00 00       	nop
      64:	c3 c1       	rjmp	.+902    	; 0x3ec <__bad_interrupt>
      66:	00 00       	nop
      68:	c1 c1       	rjmp	.+898    	; 0x3ec <__bad_interrupt>
      6a:	00 00       	nop
      6c:	bf c1       	rjmp	.+894    	; 0x3ec <__bad_interrupt>
      6e:	00 00       	nop
      70:	bd c1       	rjmp	.+890    	; 0x3ec <__bad_interrupt>
      72:	00 00       	nop
      74:	bb c1       	rjmp	.+886    	; 0x3ec <__bad_interrupt>
      76:	00 00       	nop
      78:	b9 c1       	rjmp	.+882    	; 0x3ec <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b7 c1       	rjmp	.+878    	; 0x3ec <__bad_interrupt>
      7e:	00 00       	nop
      80:	b5 c1       	rjmp	.+874    	; 0x3ec <__bad_interrupt>
      82:	00 00       	nop
      84:	b3 c1       	rjmp	.+870    	; 0x3ec <__bad_interrupt>
      86:	00 00       	nop
      88:	b1 c1       	rjmp	.+866    	; 0x3ec <__bad_interrupt>
      8a:	00 00       	nop
      8c:	af c1       	rjmp	.+862    	; 0x3ec <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 9e 21 	jmp	0x433c	; 0x433c <__vector_36>
      94:	0c 94 82 21 	jmp	0x4304	; 0x4304 <__vector_37>
      98:	a9 c1       	rjmp	.+850    	; 0x3ec <__bad_interrupt>
      9a:	00 00       	nop
      9c:	a7 c1       	rjmp	.+846    	; 0x3ec <__bad_interrupt>
      9e:	00 00       	nop
      a0:	a5 c1       	rjmp	.+842    	; 0x3ec <__bad_interrupt>
      a2:	00 00       	nop
      a4:	a3 c1       	rjmp	.+838    	; 0x3ec <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 15 21 	jmp	0x422a	; 0x422a <__vector_42>
      ac:	9f c1       	rjmp	.+830    	; 0x3ec <__bad_interrupt>
      ae:	00 00       	nop
      b0:	9d c1       	rjmp	.+826    	; 0x3ec <__bad_interrupt>
      b2:	00 00       	nop
      b4:	9b c1       	rjmp	.+822    	; 0x3ec <__bad_interrupt>
      b6:	00 00       	nop
      b8:	99 c1       	rjmp	.+818    	; 0x3ec <__bad_interrupt>
      ba:	00 00       	nop
      bc:	97 c1       	rjmp	.+814    	; 0x3ec <__bad_interrupt>
      be:	00 00       	nop
      c0:	95 c1       	rjmp	.+810    	; 0x3ec <__bad_interrupt>
      c2:	00 00       	nop
      c4:	93 c1       	rjmp	.+806    	; 0x3ec <__bad_interrupt>
      c6:	00 00       	nop
      c8:	91 c1       	rjmp	.+802    	; 0x3ec <__bad_interrupt>
      ca:	00 00       	nop
      cc:	8f c1       	rjmp	.+798    	; 0x3ec <__bad_interrupt>
      ce:	00 00       	nop
      d0:	8d c1       	rjmp	.+794    	; 0x3ec <__bad_interrupt>
      d2:	00 00       	nop
      d4:	8b c1       	rjmp	.+790    	; 0x3ec <__bad_interrupt>
      d6:	00 00       	nop
      d8:	89 c1       	rjmp	.+786    	; 0x3ec <__bad_interrupt>
      da:	00 00       	nop
      dc:	87 c1       	rjmp	.+782    	; 0x3ec <__bad_interrupt>
      de:	00 00       	nop
      e0:	85 c1       	rjmp	.+778    	; 0x3ec <__bad_interrupt>
      e2:	00 00       	nop
      e4:	83 c1       	rjmp	.+774    	; 0x3ec <__bad_interrupt>
      e6:	00 00       	nop
      e8:	81 c1       	rjmp	.+770    	; 0x3ec <__bad_interrupt>
      ea:	00 00       	nop
      ec:	7f c1       	rjmp	.+766    	; 0x3ec <__bad_interrupt>
      ee:	00 00       	nop
      f0:	7d c1       	rjmp	.+762    	; 0x3ec <__bad_interrupt>
      f2:	00 00       	nop
      f4:	7b c1       	rjmp	.+758    	; 0x3ec <__bad_interrupt>
      f6:	00 00       	nop
      f8:	79 c1       	rjmp	.+754    	; 0x3ec <__bad_interrupt>
      fa:	00 00       	nop
      fc:	77 c1       	rjmp	.+750    	; 0x3ec <__bad_interrupt>
      fe:	00 00       	nop
     100:	75 c1       	rjmp	.+746    	; 0x3ec <__bad_interrupt>
     102:	00 00       	nop
     104:	73 c1       	rjmp	.+742    	; 0x3ec <__bad_interrupt>
     106:	00 00       	nop
     108:	71 c1       	rjmp	.+738    	; 0x3ec <__bad_interrupt>
     10a:	00 00       	nop
     10c:	6f c1       	rjmp	.+734    	; 0x3ec <__bad_interrupt>
     10e:	00 00       	nop
     110:	6d c1       	rjmp	.+730    	; 0x3ec <__bad_interrupt>
     112:	00 00       	nop
     114:	6b c1       	rjmp	.+726    	; 0x3ec <__bad_interrupt>
     116:	00 00       	nop
     118:	69 c1       	rjmp	.+722    	; 0x3ec <__bad_interrupt>
     11a:	00 00       	nop
     11c:	67 c1       	rjmp	.+718    	; 0x3ec <__bad_interrupt>
     11e:	00 00       	nop
     120:	65 c1       	rjmp	.+714    	; 0x3ec <__bad_interrupt>
     122:	00 00       	nop
     124:	63 c1       	rjmp	.+710    	; 0x3ec <__bad_interrupt>
     126:	00 00       	nop
     128:	61 c1       	rjmp	.+706    	; 0x3ec <__bad_interrupt>
     12a:	00 00       	nop
     12c:	5f c1       	rjmp	.+702    	; 0x3ec <__bad_interrupt>
     12e:	00 00       	nop
     130:	5d c1       	rjmp	.+698    	; 0x3ec <__bad_interrupt>
     132:	00 00       	nop
     134:	69 0c       	add	r6, r9
     136:	6c 0c       	add	r6, r12
     138:	7b 0c       	add	r7, r11
     13a:	76 0c       	add	r7, r6
     13c:	80 0c       	add	r8, r0
     13e:	85 0c       	add	r8, r5
     140:	8a 0c       	add	r8, r10
     142:	98 0c       	add	r9, r8
     144:	ac 0c       	add	r10, r12
     146:	bb 0c       	add	r11, r11
     148:	be 0c       	add	r11, r14
     14a:	c2 0c       	add	r12, r2
     14c:	d5 0c       	add	r13, r5
     14e:	c6 0c       	add	r12, r6
     150:	c9 0c       	add	r12, r9
     152:	cf 0c       	add	r12, r15

00000154 <__trampolines_end>:
     154:	6e 61       	ori	r22, 0x1E	; 30
     156:	6e 00       	.word	0x006e	; ????

00000158 <__c.2332>:
     158:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     168:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     178:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     188:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     198:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     208:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     218:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     228:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     238:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     248:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000256 <__c.3650>:
     256:	44 48 43 50 20 49 50 0d 0a 00                       DHCP IP...

00000260 <__c.3648>:
     260:	53 54 41 54 49 43 20 49 50 0d 0a 00                 STATIC IP...

0000026c <__c.3645>:
     26c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     27c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     28c:	3d 3d 3d 3d 3d 3d 3d 0d 0a 00                       =======...

00000296 <__c.3643>:
     296:	20 57 49 5a 6e 65 74 20 63 68 69 70 3a 20 20 25      WIZnet chip:  %
     2a6:	73 20 0d 0a 00                                      s ...

000002ab <__c.3641>:
     2ab:	0d 0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ..==============
     2bb:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     2cb:	3d 3d 3d 3d 3d 3d 3d 3d 3d 0d 0a 00                 =========...

000002d7 <__c.3619>:
     2d7:	2d 2d 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64     --MQTT Connected
     2e7:	20 45 52 52 4f 52 3a 20 25 6c 64 0d 0a 00            ERROR: %ld...

000002f5 <__c.3623>:
     2f5:	53 75 62 73 63 72 69 62 65 64 20 28 25 73 29 20     Subscribed (%s) 
     305:	25 64 0d 0a 00                                      %d...

0000030a <__c.3617>:
     30a:	2b 2b 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64     ++MQTT Connected
     31a:	20 53 55 43 43 45 53 53 3a 20 25 6c 64 0d 0a 00      SUCCESS: %ld...

0000032a <__c.3614>:
     32a:	3e 3e 54 72 79 69 6e 67 20 63 6f 6e 6e 65 63 74     >>Trying connect
     33a:	20 74 6f 20 4d 51 54 54 20 62 72 6f 6b 65 72 3a      to MQTT broker:
     34a:	20 25 64 2e 25 64 2e 25 64 2e 25 64 20 2e 2e 0d      %d.%d.%d.%d ...
     35a:	0a 00                                               ..

0000035c <__c.3604>:
     35c:	3e 3e 20 46 72 65 65 20 52 41 4d 20 69 73 3a 20     >> Free RAM is: 
     36c:	25 64 20 62 79 74 65 73 0d 0a 00                    %d bytes...

00000377 <__c.3499>:
     377:	3c 3c 4d 51 54 54 20 53 75 62 3a 20 5b 25 73 5d     <<MQTT Sub: [%s]
     387:	20 25 73 00 00                                       %s..

0000038c <__ctors_end>:
     38c:	11 24       	eor	r1, r1
     38e:	1f be       	out	0x3f, r1	; 63
     390:	cf ef       	ldi	r28, 0xFF	; 255
     392:	d1 e8       	ldi	r29, 0x81	; 129
     394:	de bf       	out	0x3e, r29	; 62
     396:	cd bf       	out	0x3d, r28	; 61
     398:	00 e0       	ldi	r16, 0x00	; 0
     39a:	0c bf       	out	0x3c, r16	; 60

0000039c <get_mcusr>:
			(int16_t) ip_query[2],\
			(int16_t) ip_query[3],\
			id_query,\
			seq_query,\
			len_query);
}
     39c:	84 b7       	in	r24, 0x34	; 52
     39e:	80 93 e0 1c 	sts	0x1CE0, r24	; 0x801ce0 <__bss_end>
     3a2:	14 be       	out	0x34, r1	; 52
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	a8 95       	wdr
     3aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3ae:	88 61       	ori	r24, 0x18	; 24
     3b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3b4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3b8:	0f be       	out	0x3f, r0	; 63

000003ba <__do_copy_data>:
     3ba:	14 e0       	ldi	r17, 0x04	; 4
     3bc:	a0 e0       	ldi	r26, 0x00	; 0
     3be:	b2 e0       	ldi	r27, 0x02	; 2
     3c0:	ec e6       	ldi	r30, 0x6C	; 108
     3c2:	f5 e6       	ldi	r31, 0x65	; 101
     3c4:	00 e0       	ldi	r16, 0x00	; 0
     3c6:	0b bf       	out	0x3b, r16	; 59
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <__do_copy_data+0x14>
     3ca:	07 90       	elpm	r0, Z+
     3cc:	0d 92       	st	X+, r0
     3ce:	a2 31       	cpi	r26, 0x12	; 18
     3d0:	b1 07       	cpc	r27, r17
     3d2:	d9 f7       	brne	.-10     	; 0x3ca <__do_copy_data+0x10>

000003d4 <__do_clear_bss>:
     3d4:	2c e1       	ldi	r18, 0x1C	; 28
     3d6:	a2 e1       	ldi	r26, 0x12	; 18
     3d8:	b4 e0       	ldi	r27, 0x04	; 4
     3da:	01 c0       	rjmp	.+2      	; 0x3de <.do_clear_bss_start>

000003dc <.do_clear_bss_loop>:
     3dc:	1d 92       	st	X+, r1

000003de <.do_clear_bss_start>:
     3de:	a0 3e       	cpi	r26, 0xE0	; 224
     3e0:	b2 07       	cpc	r27, r18
     3e2:	e1 f7       	brne	.-8      	; 0x3dc <.do_clear_bss_loop>
     3e4:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <main>
     3e8:	0c 94 b4 32 	jmp	0x6568	; 0x6568 <_exit>

000003ec <__bad_interrupt>:
     3ec:	09 ce       	rjmp	.-1006   	; 0x0 <__vectors>

000003ee <close>:
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
}
     3ee:	bf 92       	push	r11
     3f0:	cf 92       	push	r12
     3f2:	df 92       	push	r13
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	89 30       	cpi	r24, 0x09	; 9
     402:	08 f0       	brcs	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	59 c0       	rjmp	.+178    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     406:	b8 2e       	mov	r11, r24
     408:	08 2f       	mov	r16, r24
     40a:	10 e0       	ldi	r17, 0x00	; 0
     40c:	e8 01       	movw	r28, r16
     40e:	cc 0f       	add	r28, r28
     410:	dd 1f       	adc	r29, r29
     412:	cc 0f       	add	r28, r28
     414:	dd 1f       	adc	r29, r29
     416:	21 96       	adiw	r28, 0x01	; 1
     418:	cc 0f       	add	r28, r28
     41a:	dd 1f       	adc	r29, r29
     41c:	cc 0f       	add	r28, r28
     41e:	dd 1f       	adc	r29, r29
     420:	cc 0f       	add	r28, r28
     422:	dd 1f       	adc	r29, r29
     424:	6e 01       	movw	r12, r28
     426:	d3 94       	inc	r13
     428:	0d 2c       	mov	r0, r13
     42a:	00 0c       	add	r0, r0
     42c:	ee 08       	sbc	r14, r14
     42e:	ff 08       	sbc	r15, r15
     430:	40 e1       	ldi	r20, 0x10	; 16
     432:	c7 01       	movw	r24, r14
     434:	b6 01       	movw	r22, r12
     436:	c8 d4       	rcall	.+2448   	; 0xdc8 <WIZCHIP_WRITE>
     438:	c7 01       	movw	r24, r14
     43a:	b6 01       	movw	r22, r12
     43c:	5e d4       	rcall	.+2236   	; 0xcfa <WIZCHIP_READ>
     43e:	81 11       	cpse	r24, r1
     440:	fb cf       	rjmp	.-10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     442:	be 01       	movw	r22, r28
     444:	7e 5f       	subi	r23, 0xFE	; 254
     446:	07 2e       	mov	r0, r23
     448:	00 0c       	add	r0, r0
     44a:	88 0b       	sbc	r24, r24
     44c:	99 0b       	sbc	r25, r25
     44e:	4f e1       	ldi	r20, 0x1F	; 31
     450:	bb d4       	rcall	.+2422   	; 0xdc8 <WIZCHIP_WRITE>
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	02 c0       	rjmp	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	ba 94       	dec	r11
     45e:	e2 f7       	brpl	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     460:	80 95       	com	r24
     462:	90 95       	com	r25
     464:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <sock_io_mode>
     468:	30 91 2d 04 	lds	r19, 0x042D	; 0x80042d <sock_io_mode+0x1>
     46c:	28 23       	and	r18, r24
     46e:	39 23       	and	r19, r25
     470:	30 93 2d 04 	sts	0x042D, r19	; 0x80042d <sock_io_mode+0x1>
     474:	20 93 2c 04 	sts	0x042C, r18	; 0x80042c <sock_io_mode>
     478:	20 91 2a 04 	lds	r18, 0x042A	; 0x80042a <sock_is_sending>
     47c:	30 91 2b 04 	lds	r19, 0x042B	; 0x80042b <sock_is_sending+0x1>
     480:	82 23       	and	r24, r18
     482:	93 23       	and	r25, r19
     484:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <sock_is_sending+0x1>
     488:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <sock_is_sending>
     48c:	f8 01       	movw	r30, r16
     48e:	ee 0f       	add	r30, r30
     490:	ff 1f       	adc	r31, r31
     492:	e6 5e       	subi	r30, 0xE6	; 230
     494:	fb 4f       	sbci	r31, 0xFB	; 251
     496:	11 82       	std	Z+1, r1	; 0x01
     498:	10 82       	st	Z, r1
     49a:	f8 01       	movw	r30, r16
     49c:	ee 5e       	subi	r30, 0xEE	; 238
     49e:	fb 4f       	sbci	r31, 0xFB	; 251
     4a0:	10 82       	st	Z, r1
     4a2:	be 01       	movw	r22, r28
     4a4:	7d 5f       	subi	r23, 0xFD	; 253
     4a6:	07 2e       	mov	r0, r23
     4a8:	00 0c       	add	r0, r0
     4aa:	88 0b       	sbc	r24, r24
     4ac:	99 0b       	sbc	r25, r25
     4ae:	25 d4       	rcall	.+2122   	; 0xcfa <WIZCHIP_READ>
     4b0:	81 11       	cpse	r24, r1
     4b2:	f7 cf       	rjmp	.-18     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	01 c0       	rjmp	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	bf 90       	pop	r11
     4cc:	08 95       	ret

000004ce <socket>:
     4ce:	4f 92       	push	r4
     4d0:	5f 92       	push	r5
     4d2:	6f 92       	push	r6
     4d4:	7f 92       	push	r7
     4d6:	af 92       	push	r10
     4d8:	bf 92       	push	r11
     4da:	cf 92       	push	r12
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <socket+0x1e>
     4ec:	1f 92       	push	r1
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	f8 2e       	mov	r15, r24
     4f4:	56 2e       	mov	r5, r22
     4f6:	3a 01       	movw	r6, r20
     4f8:	e2 2e       	mov	r14, r18
     4fa:	28 e0       	ldi	r18, 0x08	; 8
     4fc:	28 17       	cp	r18, r24
     4fe:	08 f4       	brcc	.+2      	; 0x502 <socket+0x34>
     500:	c5 c0       	rjmp	.+394    	; 0x68c <socket+0x1be>
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	68 17       	cp	r22, r24
     506:	39 f0       	breq	.+14     	; 0x516 <socket+0x48>
     508:	68 17       	cp	r22, r24
     50a:	08 f4       	brcc	.+2      	; 0x50e <socket+0x40>
     50c:	c1 c0       	rjmp	.+386    	; 0x690 <socket+0x1c2>
     50e:	24 e0       	ldi	r18, 0x04	; 4
     510:	26 17       	cp	r18, r22
     512:	a8 f4       	brcc	.+42     	; 0x53e <socket+0x70>
     514:	bd c0       	rjmp	.+378    	; 0x690 <socket+0x1c2>
     516:	24 e0       	ldi	r18, 0x04	; 4
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	ae 01       	movw	r20, r28
     51c:	4f 5f       	subi	r20, 0xFF	; 255
     51e:	5f 4f       	sbci	r21, 0xFF	; 255
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	7f e0       	ldi	r23, 0x0F	; 15
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	c1 d4       	rcall	.+2434   	; 0xeac <WIZCHIP_READ_BUF>
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	ab 81       	ldd	r26, Y+3	; 0x03
     530:	bc 81       	ldd	r27, Y+4	; 0x04
     532:	89 2b       	or	r24, r25
     534:	8a 2b       	or	r24, r26
     536:	8b 2b       	or	r24, r27
     538:	11 f4       	brne	.+4      	; 0x53e <socket+0x70>
     53a:	8d ef       	ldi	r24, 0xFD	; 253
     53c:	b2 c0       	rjmp	.+356    	; 0x6a2 <socket+0x1d4>
     53e:	e2 fc       	sbrc	r14, 2
     540:	a9 c0       	rjmp	.+338    	; 0x694 <socket+0x1c6>
     542:	ee 20       	and	r14, r14
     544:	a9 f0       	breq	.+42     	; 0x570 <socket+0xa2>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	58 16       	cp	r5, r24
     54a:	21 f0       	breq	.+8      	; 0x554 <socket+0x86>
     54c:	22 e0       	ldi	r18, 0x02	; 2
     54e:	52 16       	cp	r5, r18
     550:	29 f0       	breq	.+10     	; 0x55c <socket+0x8e>
     552:	0e c0       	rjmp	.+28     	; 0x570 <socket+0xa2>
     554:	8e 2d       	mov	r24, r14
     556:	81 72       	andi	r24, 0x21	; 33
     558:	59 f4       	brne	.+22     	; 0x570 <socket+0xa2>
     55a:	9e c0       	rjmp	.+316    	; 0x698 <socket+0x1ca>
     55c:	e5 fe       	sbrs	r14, 5
     55e:	03 c0       	rjmp	.+6      	; 0x566 <socket+0x98>
     560:	ee 20       	and	r14, r14
     562:	0c f0       	brlt	.+2      	; 0x566 <socket+0x98>
     564:	9b c0       	rjmp	.+310    	; 0x69c <socket+0x1ce>
     566:	e4 fe       	sbrs	r14, 4
     568:	03 c0       	rjmp	.+6      	; 0x570 <socket+0xa2>
     56a:	ee 20       	and	r14, r14
     56c:	0c f0       	brlt	.+2      	; 0x570 <socket+0xa2>
     56e:	98 c0       	rjmp	.+304    	; 0x6a0 <socket+0x1d2>
     570:	8f 2d       	mov	r24, r15
     572:	3d df       	rcall	.-390    	; 0x3ee <close>
     574:	cf 2c       	mov	r12, r15
     576:	d1 2c       	mov	r13, r1
     578:	86 01       	movw	r16, r12
     57a:	00 0f       	add	r16, r16
     57c:	11 1f       	adc	r17, r17
     57e:	00 0f       	add	r16, r16
     580:	11 1f       	adc	r17, r17
     582:	0f 5f       	subi	r16, 0xFF	; 255
     584:	1f 4f       	sbci	r17, 0xFF	; 255
     586:	00 0f       	add	r16, r16
     588:	11 1f       	adc	r17, r17
     58a:	00 0f       	add	r16, r16
     58c:	11 1f       	adc	r17, r17
     58e:	00 0f       	add	r16, r16
     590:	11 1f       	adc	r17, r17
     592:	4e 2d       	mov	r20, r14
     594:	40 7f       	andi	r20, 0xF0	; 240
     596:	45 29       	or	r20, r5
     598:	b8 01       	movw	r22, r16
     59a:	01 2e       	mov	r0, r17
     59c:	00 0c       	add	r0, r0
     59e:	88 0b       	sbc	r24, r24
     5a0:	99 0b       	sbc	r25, r25
     5a2:	12 d4       	rcall	.+2084   	; 0xdc8 <WIZCHIP_WRITE>
     5a4:	61 14       	cp	r6, r1
     5a6:	71 04       	cpc	r7, r1
     5a8:	91 f4       	brne	.+36     	; 0x5ce <socket+0x100>
     5aa:	60 90 04 02 	lds	r6, 0x0204	; 0x800204 <sock_any_port>
     5ae:	70 90 05 02 	lds	r7, 0x0205	; 0x800205 <sock_any_port+0x1>
     5b2:	c3 01       	movw	r24, r6
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sock_any_port+0x1>
     5ba:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sock_any_port>
     5be:	40 96       	adiw	r24, 0x10	; 16
     5c0:	31 f4       	brne	.+12     	; 0x5ce <socket+0x100>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 ec       	ldi	r25, 0xC0	; 192
     5c6:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sock_any_port+0x1>
     5ca:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sock_any_port>
     5ce:	b8 01       	movw	r22, r16
     5d0:	7c 5f       	subi	r23, 0xFC	; 252
     5d2:	07 2e       	mov	r0, r23
     5d4:	00 0c       	add	r0, r0
     5d6:	88 0b       	sbc	r24, r24
     5d8:	99 0b       	sbc	r25, r25
     5da:	47 2d       	mov	r20, r7
     5dc:	f5 d3       	rcall	.+2026   	; 0xdc8 <WIZCHIP_WRITE>
     5de:	b8 01       	movw	r22, r16
     5e0:	7b 5f       	subi	r23, 0xFB	; 251
     5e2:	07 2e       	mov	r0, r23
     5e4:	00 0c       	add	r0, r0
     5e6:	88 0b       	sbc	r24, r24
     5e8:	99 0b       	sbc	r25, r25
     5ea:	46 2d       	mov	r20, r6
     5ec:	ed d3       	rcall	.+2010   	; 0xdc8 <WIZCHIP_WRITE>
     5ee:	28 01       	movw	r4, r16
     5f0:	53 94       	inc	r5
     5f2:	05 2c       	mov	r0, r5
     5f4:	00 0c       	add	r0, r0
     5f6:	66 08       	sbc	r6, r6
     5f8:	77 08       	sbc	r7, r7
     5fa:	41 e0       	ldi	r20, 0x01	; 1
     5fc:	c3 01       	movw	r24, r6
     5fe:	b2 01       	movw	r22, r4
     600:	e3 d3       	rcall	.+1990   	; 0xdc8 <WIZCHIP_WRITE>
     602:	c3 01       	movw	r24, r6
     604:	b2 01       	movw	r22, r4
     606:	79 d3       	rcall	.+1778   	; 0xcfa <WIZCHIP_READ>
     608:	81 11       	cpse	r24, r1
     60a:	fb cf       	rjmp	.-10     	; 0x602 <socket+0x134>
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0f 2c       	mov	r0, r15
     612:	02 c0       	rjmp	.+4      	; 0x618 <socket+0x14a>
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	0a 94       	dec	r0
     61a:	e2 f7       	brpl	.-8      	; 0x614 <socket+0x146>
     61c:	80 95       	com	r24
     61e:	90 95       	com	r25
     620:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <sock_io_mode>
     624:	30 91 2d 04 	lds	r19, 0x042D	; 0x80042d <sock_io_mode+0x1>
     628:	28 23       	and	r18, r24
     62a:	39 23       	and	r19, r25
     62c:	e0 fa       	bst	r14, 0
     62e:	aa 24       	eor	r10, r10
     630:	a0 f8       	bld	r10, 0
     632:	b1 2c       	mov	r11, r1
     634:	0f 2c       	mov	r0, r15
     636:	02 c0       	rjmp	.+4      	; 0x63c <socket+0x16e>
     638:	aa 0c       	add	r10, r10
     63a:	bb 1c       	adc	r11, r11
     63c:	0a 94       	dec	r0
     63e:	e2 f7       	brpl	.-8      	; 0x638 <socket+0x16a>
     640:	a2 2a       	or	r10, r18
     642:	b3 2a       	or	r11, r19
     644:	b0 92 2d 04 	sts	0x042D, r11	; 0x80042d <sock_io_mode+0x1>
     648:	a0 92 2c 04 	sts	0x042C, r10	; 0x80042c <sock_io_mode>
     64c:	20 91 2a 04 	lds	r18, 0x042A	; 0x80042a <sock_is_sending>
     650:	30 91 2b 04 	lds	r19, 0x042B	; 0x80042b <sock_is_sending+0x1>
     654:	82 23       	and	r24, r18
     656:	93 23       	and	r25, r19
     658:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <sock_is_sending+0x1>
     65c:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <sock_is_sending>
     660:	f6 01       	movw	r30, r12
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	e6 5e       	subi	r30, 0xE6	; 230
     668:	fb 4f       	sbci	r31, 0xFB	; 251
     66a:	11 82       	std	Z+1, r1	; 0x01
     66c:	10 82       	st	Z, r1
     66e:	f6 01       	movw	r30, r12
     670:	ee 5e       	subi	r30, 0xEE	; 238
     672:	fb 4f       	sbci	r31, 0xFB	; 251
     674:	10 82       	st	Z, r1
     676:	b8 01       	movw	r22, r16
     678:	7d 5f       	subi	r23, 0xFD	; 253
     67a:	07 2e       	mov	r0, r23
     67c:	00 0c       	add	r0, r0
     67e:	88 0b       	sbc	r24, r24
     680:	99 0b       	sbc	r25, r25
     682:	3b d3       	rcall	.+1654   	; 0xcfa <WIZCHIP_READ>
     684:	88 23       	and	r24, r24
     686:	b9 f3       	breq	.-18     	; 0x676 <socket+0x1a8>
     688:	8f 2d       	mov	r24, r15
     68a:	0b c0       	rjmp	.+22     	; 0x6a2 <socket+0x1d4>
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	09 c0       	rjmp	.+18     	; 0x6a2 <socket+0x1d4>
     690:	8b ef       	ldi	r24, 0xFB	; 251
     692:	07 c0       	rjmp	.+14     	; 0x6a2 <socket+0x1d4>
     694:	8a ef       	ldi	r24, 0xFA	; 250
     696:	05 c0       	rjmp	.+10     	; 0x6a2 <socket+0x1d4>
     698:	8a ef       	ldi	r24, 0xFA	; 250
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <socket+0x1d4>
     69c:	8a ef       	ldi	r24, 0xFA	; 250
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <socket+0x1d4>
     6a0:	8a ef       	ldi	r24, 0xFA	; 250
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	ff 90       	pop	r15
     6b4:	ef 90       	pop	r14
     6b6:	df 90       	pop	r13
     6b8:	cf 90       	pop	r12
     6ba:	bf 90       	pop	r11
     6bc:	af 90       	pop	r10
     6be:	7f 90       	pop	r7
     6c0:	6f 90       	pop	r6
     6c2:	5f 90       	pop	r5
     6c4:	4f 90       	pop	r4
     6c6:	08 95       	ret

000006c8 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
     6c8:	8f 92       	push	r8
     6ca:	9f 92       	push	r9
     6cc:	af 92       	push	r10
     6ce:	bf 92       	push	r11
     6d0:	cf 92       	push	r12
     6d2:	df 92       	push	r13
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
   CHECK_SOCKNUM();
     6de:	89 30       	cpi	r24, 0x09	; 9
     6e0:	08 f0       	brcs	.+2      	; 0x6e4 <connect+0x1c>
     6e2:	ac c0       	rjmp	.+344    	; 0x83c <connect+0x174>
     6e4:	6a 01       	movw	r12, r20
     6e6:	7b 01       	movw	r14, r22
     6e8:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     6ea:	c8 2f       	mov	r28, r24
     6ec:	d0 e0       	ldi	r29, 0x00	; 0
     6ee:	cc 0f       	add	r28, r28
     6f0:	dd 1f       	adc	r29, r29
     6f2:	cc 0f       	add	r28, r28
     6f4:	dd 1f       	adc	r29, r29
     6f6:	21 96       	adiw	r28, 0x01	; 1
     6f8:	cc 0f       	add	r28, r28
     6fa:	dd 1f       	adc	r29, r29
     6fc:	cc 0f       	add	r28, r28
     6fe:	dd 1f       	adc	r29, r29
     700:	cc 0f       	add	r28, r28
     702:	dd 1f       	adc	r29, r29
     704:	be 01       	movw	r22, r28
     706:	0d 2e       	mov	r0, r29
     708:	00 0c       	add	r0, r0
     70a:	88 0b       	sbc	r24, r24
     70c:	99 0b       	sbc	r25, r25
     70e:	f5 d2       	rcall	.+1514   	; 0xcfa <WIZCHIP_READ>
     710:	8f 70       	andi	r24, 0x0F	; 15
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	09 f0       	breq	.+2      	; 0x718 <connect+0x50>
     716:	94 c0       	rjmp	.+296    	; 0x840 <connect+0x178>
   CHECK_SOCKINIT();
     718:	4e 01       	movw	r8, r28
     71a:	8d ef       	ldi	r24, 0xFD	; 253
     71c:	98 1a       	sub	r9, r24
     71e:	09 2c       	mov	r0, r9
     720:	00 0c       	add	r0, r0
     722:	aa 08       	sbc	r10, r10
     724:	bb 08       	sbc	r11, r11
     726:	c5 01       	movw	r24, r10
     728:	b4 01       	movw	r22, r8
     72a:	e7 d2       	rcall	.+1486   	; 0xcfa <WIZCHIP_READ>
     72c:	83 31       	cpi	r24, 0x13	; 19
     72e:	09 f0       	breq	.+2      	; 0x732 <connect+0x6a>
     730:	89 c0       	rjmp	.+274    	; 0x844 <connect+0x17c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
     732:	f7 01       	movw	r30, r14
     734:	40 81       	ld	r20, Z
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
     73c:	76 2f       	mov	r23, r22
     73e:	65 2f       	mov	r22, r21
     740:	54 2f       	mov	r21, r20
     742:	44 27       	eor	r20, r20
     744:	81 81       	ldd	r24, Z+1	; 0x01
     746:	48 0f       	add	r20, r24
     748:	51 1d       	adc	r21, r1
     74a:	61 1d       	adc	r22, r1
     74c:	71 1d       	adc	r23, r1
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
     74e:	76 2f       	mov	r23, r22
     750:	65 2f       	mov	r22, r21
     752:	54 2f       	mov	r21, r20
     754:	44 27       	eor	r20, r20
     756:	82 81       	ldd	r24, Z+2	; 0x02
     758:	48 0f       	add	r20, r24
     75a:	51 1d       	adc	r21, r1
     75c:	61 1d       	adc	r22, r1
     75e:	71 1d       	adc	r23, r1
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
     760:	76 2f       	mov	r23, r22
     762:	65 2f       	mov	r22, r21
     764:	54 2f       	mov	r21, r20
     766:	44 27       	eor	r20, r20
     768:	83 81       	ldd	r24, Z+3	; 0x03
     76a:	48 0f       	add	r20, r24
     76c:	51 1d       	adc	r21, r1
     76e:	61 1d       	adc	r22, r1
     770:	71 1d       	adc	r23, r1
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
     772:	41 50       	subi	r20, 0x01	; 1
     774:	51 09       	sbc	r21, r1
     776:	61 09       	sbc	r22, r1
     778:	71 09       	sbc	r23, r1
     77a:	4e 3f       	cpi	r20, 0xFE	; 254
     77c:	5f 4f       	sbci	r21, 0xFF	; 255
     77e:	6f 4f       	sbci	r22, 0xFF	; 255
     780:	7f 4f       	sbci	r23, 0xFF	; 255
     782:	08 f0       	brcs	.+2      	; 0x786 <connect+0xbe>
     784:	61 c0       	rjmp	.+194    	; 0x848 <connect+0x180>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
     786:	c1 14       	cp	r12, r1
     788:	d1 04       	cpc	r13, r1
     78a:	09 f4       	brne	.+2      	; 0x78e <connect+0xc6>
     78c:	5f c0       	rjmp	.+190    	; 0x84c <connect+0x184>
	setSn_DIPR(sn,addr);
     78e:	be 01       	movw	r22, r28
     790:	74 5f       	subi	r23, 0xF4	; 244
     792:	07 2e       	mov	r0, r23
     794:	00 0c       	add	r0, r0
     796:	88 0b       	sbc	r24, r24
     798:	99 0b       	sbc	r25, r25
     79a:	24 e0       	ldi	r18, 0x04	; 4
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	a7 01       	movw	r20, r14
     7a0:	07 d4       	rcall	.+2062   	; 0xfb0 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
     7a2:	be 01       	movw	r22, r28
     7a4:	70 5f       	subi	r23, 0xF0	; 240
     7a6:	07 2e       	mov	r0, r23
     7a8:	00 0c       	add	r0, r0
     7aa:	88 0b       	sbc	r24, r24
     7ac:	99 0b       	sbc	r25, r25
     7ae:	4d 2d       	mov	r20, r13
     7b0:	0b d3       	rcall	.+1558   	; 0xdc8 <WIZCHIP_WRITE>
     7b2:	be 01       	movw	r22, r28
     7b4:	7f 5e       	subi	r23, 0xEF	; 239
     7b6:	07 2e       	mov	r0, r23
     7b8:	00 0c       	add	r0, r0
     7ba:	88 0b       	sbc	r24, r24
     7bc:	99 0b       	sbc	r25, r25
     7be:	4c 2d       	mov	r20, r12
     7c0:	03 d3       	rcall	.+1542   	; 0xdc8 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
     7c2:	6e 01       	movw	r12, r28
     7c4:	d3 94       	inc	r13
     7c6:	0d 2c       	mov	r0, r13
     7c8:	00 0c       	add	r0, r0
     7ca:	ee 08       	sbc	r14, r14
     7cc:	ff 08       	sbc	r15, r15
     7ce:	44 e0       	ldi	r20, 0x04	; 4
     7d0:	c7 01       	movw	r24, r14
     7d2:	b6 01       	movw	r22, r12
   while(getSn_CR(sn));
     7d4:	f9 d2       	rcall	.+1522   	; 0xdc8 <WIZCHIP_WRITE>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b6 01       	movw	r22, r12
     7da:	8f d2       	rcall	.+1310   	; 0xcfa <WIZCHIP_READ>
     7dc:	81 11       	cpse	r24, r1
     7de:	fb cf       	rjmp	.-10     	; 0x7d6 <connect+0x10e>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	02 c0       	rjmp	.+4      	; 0x7ea <connect+0x122>
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	1a 95       	dec	r17
     7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <connect+0x11e>
     7ee:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <sock_io_mode>
     7f2:	30 91 2d 04 	lds	r19, 0x042D	; 0x80042d <sock_io_mode+0x1>
     7f6:	82 23       	and	r24, r18
     7f8:	93 23       	and	r25, r19
     7fa:	89 2b       	or	r24, r25
     7fc:	c1 f0       	breq	.+48     	; 0x82e <connect+0x166>
     7fe:	28 c0       	rjmp	.+80     	; 0x850 <connect+0x188>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
     800:	6e 01       	movw	r12, r28
     802:	ee ef       	ldi	r30, 0xFE	; 254
     804:	de 1a       	sub	r13, r30
     806:	0d 2c       	mov	r0, r13
     808:	00 0c       	add	r0, r0
     80a:	ee 08       	sbc	r14, r14
     80c:	ff 08       	sbc	r15, r15
     80e:	c7 01       	movw	r24, r14
     810:	b6 01       	movw	r22, r12
     812:	73 d2       	rcall	.+1254   	; 0xcfa <WIZCHIP_READ>
     814:	83 ff       	sbrs	r24, 3
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
     816:	06 c0       	rjmp	.+12     	; 0x824 <connect+0x15c>
     818:	48 e0       	ldi	r20, 0x08	; 8
     81a:	c7 01       	movw	r24, r14
     81c:	b6 01       	movw	r22, r12
            return SOCKERR_TIMEOUT;
     81e:	d4 d2       	rcall	.+1448   	; 0xdc8 <WIZCHIP_WRITE>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
     820:	83 ef       	ldi	r24, 0xF3	; 243
     822:	19 c0       	rjmp	.+50     	; 0x856 <connect+0x18e>
     824:	c5 01       	movw	r24, r10
     826:	b4 01       	movw	r22, r8
     828:	68 d2       	rcall	.+1232   	; 0xcfa <WIZCHIP_READ>
     82a:	88 23       	and	r24, r24
	setSn_DIPR(sn,addr);
	setSn_DPORT(sn,port);
	setSn_CR(sn,Sn_CR_CONNECT);
   while(getSn_CR(sn));
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
     82c:	99 f0       	breq	.+38     	; 0x854 <connect+0x18c>
     82e:	c5 01       	movw	r24, r10
     830:	b4 01       	movw	r22, r8
     832:	63 d2       	rcall	.+1222   	; 0xcfa <WIZCHIP_READ>
     834:	87 31       	cpi	r24, 0x17	; 23
     836:	21 f7       	brne	.-56     	; 0x800 <connect+0x138>
		{
			return SOCKERR_SOCKCLOSED;
		}
	}
   
   return SOCK_OK;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	0d c0       	rjmp	.+26     	; 0x856 <connect+0x18e>
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
   CHECK_SOCKNUM();
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	0b c0       	rjmp	.+22     	; 0x856 <connect+0x18e>
   CHECK_SOCKMODE(Sn_MR_TCP);
     840:	8b ef       	ldi	r24, 0xFB	; 251
     842:	09 c0       	rjmp	.+18     	; 0x856 <connect+0x18e>
   CHECK_SOCKINIT();
     844:	8d ef       	ldi	r24, 0xFD	; 253
     846:	07 c0       	rjmp	.+14     	; 0x856 <connect+0x18e>
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
     848:	84 ef       	ldi	r24, 0xF4	; 244
     84a:	05 c0       	rjmp	.+10     	; 0x856 <connect+0x18e>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
     84c:	85 ef       	ldi	r24, 0xF5	; 245
     84e:	03 c0       	rjmp	.+6      	; 0x856 <connect+0x18e>
	setSn_DIPR(sn,addr);
	setSn_DPORT(sn,port);
	setSn_CR(sn,Sn_CR_CONNECT);
   while(getSn_CR(sn));
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	01 c0       	rjmp	.+2      	; 0x856 <connect+0x18e>
            return SOCKERR_TIMEOUT;
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
		{
			return SOCKERR_SOCKCLOSED;
     854:	8c ef       	ldi	r24, 0xFC	; 252
		}
	}
   
   return SOCK_OK;
}
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	cf 90       	pop	r12
     864:	bf 90       	pop	r11
     866:	af 90       	pop	r10
     868:	9f 90       	pop	r9
     86a:	8f 90       	pop	r8
     86c:	08 95       	ret

0000086e <disconnect>:

int8_t disconnect(uint8_t sn)
{
     86e:	cf 92       	push	r12
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
   CHECK_SOCKNUM();
     87c:	89 30       	cpi	r24, 0x09	; 9
     87e:	08 f0       	brcs	.+2      	; 0x882 <disconnect+0x14>
     880:	5d c0       	rjmp	.+186    	; 0x93c <disconnect+0xce>
     882:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     884:	c8 2f       	mov	r28, r24
     886:	d0 e0       	ldi	r29, 0x00	; 0
     888:	cc 0f       	add	r28, r28
     88a:	dd 1f       	adc	r29, r29
     88c:	cc 0f       	add	r28, r28
     88e:	dd 1f       	adc	r29, r29
     890:	21 96       	adiw	r28, 0x01	; 1
     892:	cc 0f       	add	r28, r28
     894:	dd 1f       	adc	r29, r29
     896:	cc 0f       	add	r28, r28
     898:	dd 1f       	adc	r29, r29
     89a:	cc 0f       	add	r28, r28
     89c:	dd 1f       	adc	r29, r29
     89e:	be 01       	movw	r22, r28
     8a0:	0d 2e       	mov	r0, r29
     8a2:	00 0c       	add	r0, r0
     8a4:	88 0b       	sbc	r24, r24
     8a6:	99 0b       	sbc	r25, r25
     8a8:	28 d2       	rcall	.+1104   	; 0xcfa <WIZCHIP_READ>
     8aa:	8f 70       	andi	r24, 0x0F	; 15
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <disconnect+0x44>
     8b0:	47 c0       	rjmp	.+142    	; 0x940 <disconnect+0xd2>
	setSn_CR(sn,Sn_CR_DISCON);
     8b2:	6e 01       	movw	r12, r28
     8b4:	d3 94       	inc	r13
     8b6:	0d 2c       	mov	r0, r13
     8b8:	00 0c       	add	r0, r0
     8ba:	ee 08       	sbc	r14, r14
     8bc:	ff 08       	sbc	r15, r15
     8be:	48 e0       	ldi	r20, 0x08	; 8
     8c0:	c7 01       	movw	r24, r14
     8c2:	b6 01       	movw	r22, r12
     8c4:	81 d2       	rcall	.+1282   	; 0xdc8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
     8c6:	c7 01       	movw	r24, r14
     8c8:	b6 01       	movw	r22, r12
     8ca:	17 d2       	rcall	.+1070   	; 0xcfa <WIZCHIP_READ>
     8cc:	81 11       	cpse	r24, r1
     8ce:	fb cf       	rjmp	.-10     	; 0x8c6 <disconnect+0x58>
	sock_is_sending &= ~(1<<sn);
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	01 2e       	mov	r0, r17
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <disconnect+0x6e>
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	0a 94       	dec	r0
     8de:	e2 f7       	brpl	.-8      	; 0x8d8 <disconnect+0x6a>
     8e0:	9c 01       	movw	r18, r24
     8e2:	20 95       	com	r18
     8e4:	30 95       	com	r19
     8e6:	40 91 2a 04 	lds	r20, 0x042A	; 0x80042a <sock_is_sending>
     8ea:	50 91 2b 04 	lds	r21, 0x042B	; 0x80042b <sock_is_sending+0x1>
     8ee:	24 23       	and	r18, r20
     8f0:	35 23       	and	r19, r21
     8f2:	30 93 2b 04 	sts	0x042B, r19	; 0x80042b <sock_is_sending+0x1>
     8f6:	20 93 2a 04 	sts	0x042A, r18	; 0x80042a <sock_is_sending>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     8fa:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <sock_io_mode>
     8fe:	30 91 2d 04 	lds	r19, 0x042D	; 0x80042d <sock_io_mode+0x1>
     902:	82 23       	and	r24, r18
     904:	93 23       	and	r25, r19
     906:	89 2b       	or	r24, r25
     908:	71 f0       	breq	.+28     	; 0x926 <disconnect+0xb8>
     90a:	1c c0       	rjmp	.+56     	; 0x944 <disconnect+0xd6>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
     90c:	be 01       	movw	r22, r28
     90e:	7e 5f       	subi	r23, 0xFE	; 254
     910:	07 2e       	mov	r0, r23
     912:	00 0c       	add	r0, r0
     914:	88 0b       	sbc	r24, r24
     916:	99 0b       	sbc	r25, r25
     918:	f0 d1       	rcall	.+992    	; 0xcfa <WIZCHIP_READ>
     91a:	83 ff       	sbrs	r24, 3
	   {
	      close(sn);
     91c:	04 c0       	rjmp	.+8      	; 0x926 <disconnect+0xb8>
     91e:	81 2f       	mov	r24, r17
     920:	66 dd       	rcall	.-1332   	; 0x3ee <close>
	      return SOCKERR_TIMEOUT;
     922:	83 ef       	ldi	r24, 0xF3	; 243
     924:	10 c0       	rjmp	.+32     	; 0x946 <disconnect+0xd8>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
	while(getSn_SR(sn) != SOCK_CLOSED)
     926:	be 01       	movw	r22, r28
     928:	7d 5f       	subi	r23, 0xFD	; 253
     92a:	07 2e       	mov	r0, r23
     92c:	00 0c       	add	r0, r0
     92e:	88 0b       	sbc	r24, r24
     930:	99 0b       	sbc	r25, r25
     932:	e3 d1       	rcall	.+966    	; 0xcfa <WIZCHIP_READ>
     934:	81 11       	cpse	r24, r1
     936:	ea cf       	rjmp	.-44     	; 0x90c <disconnect+0x9e>
	   {
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	05 c0       	rjmp	.+10     	; 0x946 <disconnect+0xd8>
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
     93c:	8f ef       	ldi	r24, 0xFF	; 255
     93e:	03 c0       	rjmp	.+6      	; 0x946 <disconnect+0xd8>
   CHECK_SOCKMODE(Sn_MR_TCP);
     940:	8b ef       	ldi	r24, 0xFB	; 251
     942:	01 c0       	rjmp	.+2      	; 0x946 <disconnect+0xd8>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     944:	80 e0       	ldi	r24, 0x00	; 0
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	df 90       	pop	r13
     952:	cf 90       	pop	r12
     954:	08 95       	ret

00000956 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
     956:	2f 92       	push	r2
     958:	3f 92       	push	r3
     95a:	4f 92       	push	r4
     95c:	5f 92       	push	r5
     95e:	6f 92       	push	r6
     960:	7f 92       	push	r7
     962:	8f 92       	push	r8
     964:	9f 92       	push	r9
     966:	af 92       	push	r10
     968:	bf 92       	push	r11
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	00 d0       	rcall	.+0      	; 0x97c <send+0x26>
     97c:	00 d0       	rcall	.+0      	; 0x97e <send+0x28>
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     982:	89 30       	cpi	r24, 0x09	; 9
     984:	08 f0       	brcs	.+2      	; 0x988 <send+0x32>
     986:	c7 c0       	rjmp	.+398    	; 0xb16 <send+0x1c0>
     988:	5e 83       	std	Y+6, r21	; 0x06
     98a:	4d 83       	std	Y+5, r20	; 0x05
     98c:	1b 01       	movw	r2, r22
     98e:	f8 2e       	mov	r15, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     990:	c8 2e       	mov	r12, r24
     992:	d1 2c       	mov	r13, r1
     994:	cc 0c       	add	r12, r12
     996:	dd 1c       	adc	r13, r13
     998:	cc 0c       	add	r12, r12
     99a:	dd 1c       	adc	r13, r13
     99c:	2f ef       	ldi	r18, 0xFF	; 255
     99e:	c2 1a       	sub	r12, r18
     9a0:	d2 0a       	sbc	r13, r18
     9a2:	cc 0c       	add	r12, r12
     9a4:	dd 1c       	adc	r13, r13
     9a6:	cc 0c       	add	r12, r12
     9a8:	dd 1c       	adc	r13, r13
     9aa:	cc 0c       	add	r12, r12
     9ac:	dd 1c       	adc	r13, r13
     9ae:	b6 01       	movw	r22, r12
     9b0:	0d 2c       	mov	r0, r13
     9b2:	00 0c       	add	r0, r0
     9b4:	88 0b       	sbc	r24, r24
     9b6:	99 0b       	sbc	r25, r25
     9b8:	a0 d1       	rcall	.+832    	; 0xcfa <WIZCHIP_READ>
     9ba:	8f 70       	andi	r24, 0x0F	; 15
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	09 f0       	breq	.+2      	; 0x9c2 <send+0x6c>
     9c0:	ae c0       	rjmp	.+348    	; 0xb1e <send+0x1c8>
   CHECK_SOCKDATA();
     9c2:	4d 81       	ldd	r20, Y+5	; 0x05
     9c4:	5e 81       	ldd	r21, Y+6	; 0x06
     9c6:	45 2b       	or	r20, r21
     9c8:	09 f4       	brne	.+2      	; 0x9cc <send+0x76>
     9ca:	ae c0       	rjmp	.+348    	; 0xb28 <send+0x1d2>
   tmp = getSn_SR(sn);
     9cc:	26 01       	movw	r4, r12
     9ce:	5d ef       	ldi	r21, 0xFD	; 253
     9d0:	55 1a       	sub	r5, r21
     9d2:	05 2c       	mov	r0, r5
     9d4:	00 0c       	add	r0, r0
     9d6:	66 08       	sbc	r6, r6
     9d8:	77 08       	sbc	r7, r7
     9da:	c3 01       	movw	r24, r6
     9dc:	b2 01       	movw	r22, r4
     9de:	8d d1       	rcall	.+794    	; 0xcfa <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     9e0:	87 31       	cpi	r24, 0x17	; 23
     9e2:	19 f0       	breq	.+6      	; 0x9ea <send+0x94>
     9e4:	8c 31       	cpi	r24, 0x1C	; 28
     9e6:	09 f0       	breq	.+2      	; 0x9ea <send+0x94>
     9e8:	a4 c0       	rjmp	.+328    	; 0xb32 <send+0x1dc>
   if( sock_is_sending & (1<<sn) )
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	4c 01       	movw	r8, r24
     9f0:	0f 2c       	mov	r0, r15
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <send+0xa2>
     9f4:	88 0c       	add	r8, r8
     9f6:	99 1c       	adc	r9, r9
     9f8:	0a 94       	dec	r0
     9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <send+0x9e>
     9fc:	54 01       	movw	r10, r8
     9fe:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <sock_is_sending>
     a02:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <sock_is_sending+0x1>
     a06:	88 21       	and	r24, r8
     a08:	99 21       	and	r25, r9
     a0a:	89 2b       	or	r24, r25
     a0c:	61 f1       	breq	.+88     	; 0xa66 <send+0x110>
   {
      tmp = getSn_IR(sn);
     a0e:	c6 01       	movw	r24, r12
     a10:	9e 5f       	subi	r25, 0xFE	; 254
     a12:	9c 01       	movw	r18, r24
     a14:	99 0f       	add	r25, r25
     a16:	44 0b       	sbc	r20, r20
     a18:	55 0b       	sbc	r21, r21
     a1a:	29 83       	std	Y+1, r18	; 0x01
     a1c:	3a 83       	std	Y+2, r19	; 0x02
     a1e:	4b 83       	std	Y+3, r20	; 0x03
     a20:	5c 83       	std	Y+4, r21	; 0x04
     a22:	ca 01       	movw	r24, r20
     a24:	b9 01       	movw	r22, r18
     a26:	69 d1       	rcall	.+722    	; 0xcfa <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
     a28:	84 ff       	sbrs	r24, 4
     a2a:	14 c0       	rjmp	.+40     	; 0xa54 <send+0xfe>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
     a2c:	40 e1       	ldi	r20, 0x10	; 16
     a2e:	69 81       	ldd	r22, Y+1	; 0x01
     a30:	7a 81       	ldd	r23, Y+2	; 0x02
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	c8 d1       	rcall	.+912    	; 0xdc8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
     a38:	20 91 2a 04 	lds	r18, 0x042A	; 0x80042a <sock_is_sending>
     a3c:	30 91 2b 04 	lds	r19, 0x042B	; 0x80042b <sock_is_sending+0x1>
     a40:	c4 01       	movw	r24, r8
     a42:	80 95       	com	r24
     a44:	90 95       	com	r25
     a46:	82 23       	and	r24, r18
     a48:	93 23       	and	r25, r19
     a4a:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <sock_is_sending+0x1>
     a4e:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <sock_is_sending>
      }
      else if(tmp & Sn_IR_TIMEOUT)
     a52:	09 c0       	rjmp	.+18     	; 0xa66 <send+0x110>
     a54:	83 ff       	sbrs	r24, 3
      {
         close(sn);
     a56:	72 c0       	rjmp	.+228    	; 0xb3c <send+0x1e6>
     a58:	8f 2d       	mov	r24, r15
     a5a:	c9 dc       	rcall	.-1646   	; 0x3ee <close>
         return SOCKERR_TIMEOUT;
     a5c:	63 ef       	ldi	r22, 0xF3	; 243
     a5e:	7f ef       	ldi	r23, 0xFF	; 255
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	9f ef       	ldi	r25, 0xFF	; 255
     a64:	72 c0       	rjmp	.+228    	; 0xb4a <send+0x1f4>
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
     a66:	b6 01       	movw	r22, r12
     a68:	71 5e       	subi	r23, 0xE1	; 225
     a6a:	07 2e       	mov	r0, r23
     a6c:	00 0c       	add	r0, r0
     a6e:	88 0b       	sbc	r24, r24
     a70:	99 0b       	sbc	r25, r25
     a72:	43 d1       	rcall	.+646    	; 0xcfa <WIZCHIP_READ>
     a74:	08 2f       	mov	r16, r24
     a76:	10 e0       	ldi	r17, 0x00	; 0
     a78:	10 2f       	mov	r17, r16
     a7a:	00 27       	eor	r16, r16
     a7c:	11 0f       	add	r17, r17
     a7e:	11 0f       	add	r17, r17
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
     a80:	4d 81       	ldd	r20, Y+5	; 0x05
     a82:	5e 81       	ldd	r21, Y+6	; 0x06
     a84:	04 17       	cp	r16, r20
     a86:	15 07       	cpc	r17, r21
     a88:	08 f0       	brcs	.+2      	; 0xa8c <send+0x136>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
     a8a:	8a 01       	movw	r16, r20
     a8c:	8f 2d       	mov	r24, r15
     a8e:	17 d3       	rcall	.+1582   	; 0x10be <getSn_TX_FSR>
     a90:	9a 83       	std	Y+2, r25	; 0x02
      tmp = getSn_SR(sn);
     a92:	89 83       	std	Y+1, r24	; 0x01
     a94:	c3 01       	movw	r24, r6
     a96:	b2 01       	movw	r22, r4
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
     a98:	30 d1       	rcall	.+608    	; 0xcfa <WIZCHIP_READ>
     a9a:	87 31       	cpi	r24, 0x17	; 23
     a9c:	49 f0       	breq	.+18     	; 0xab0 <send+0x15a>
     a9e:	8c 31       	cpi	r24, 0x1C	; 28
      {
         close(sn);
     aa0:	39 f0       	breq	.+14     	; 0xab0 <send+0x15a>
     aa2:	8f 2d       	mov	r24, r15
     aa4:	a4 dc       	rcall	.-1720   	; 0x3ee <close>
         return SOCKERR_SOCKSTATUS;
     aa6:	69 ef       	ldi	r22, 0xF9	; 249
     aa8:	7f ef       	ldi	r23, 0xFF	; 255
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	9f ef       	ldi	r25, 0xFF	; 255
     aae:	4d c0       	rjmp	.+154    	; 0xb4a <send+0x1f4>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     ab0:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <sock_io_mode>
     ab4:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <sock_io_mode+0x1>
     ab8:	8a 21       	and	r24, r10
     aba:	9b 21       	and	r25, r11
     abc:	89 2b       	or	r24, r25
     abe:	31 f0       	breq	.+12     	; 0xacc <send+0x176>
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	9a 81       	ldd	r25, Y+2	; 0x02
     ac4:	80 17       	cp	r24, r16
     ac6:	91 07       	cpc	r25, r17
     ac8:	08 f4       	brcc	.+2      	; 0xacc <send+0x176>
      if(len <= freesize) break;
     aca:	3c c0       	rjmp	.+120    	; 0xb44 <send+0x1ee>
     acc:	29 81       	ldd	r18, Y+1	; 0x01
     ace:	3a 81       	ldd	r19, Y+2	; 0x02
     ad0:	20 17       	cp	r18, r16
     ad2:	31 07       	cpc	r19, r17
   }
   wiz_send_data(sn, buf, len);
     ad4:	d8 f2       	brcs	.-74     	; 0xa8c <send+0x136>
     ad6:	a8 01       	movw	r20, r16
     ad8:	b1 01       	movw	r22, r2
     ada:	8f 2d       	mov	r24, r15

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
     adc:	a0 d3       	rcall	.+1856   	; 0x121e <wiz_send_data>
     ade:	d3 94       	inc	r13
     ae0:	0d 2c       	mov	r0, r13
     ae2:	00 0c       	add	r0, r0
     ae4:	ee 08       	sbc	r14, r14
     ae6:	ff 08       	sbc	r15, r15
     ae8:	40 e2       	ldi	r20, 0x20	; 32
     aea:	c7 01       	movw	r24, r14
     aec:	b6 01       	movw	r22, r12
   /* wait to process the command... */
   while(getSn_CR(sn));
     aee:	6c d1       	rcall	.+728    	; 0xdc8 <WIZCHIP_WRITE>
     af0:	c7 01       	movw	r24, r14
     af2:	b6 01       	movw	r22, r12
     af4:	02 d1       	rcall	.+516    	; 0xcfa <WIZCHIP_READ>
     af6:	81 11       	cpse	r24, r1
     af8:	fb cf       	rjmp	.-10     	; 0xaf0 <send+0x19a>
   sock_is_sending |= (1 << sn);
     afa:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <sock_is_sending>
     afe:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <sock_is_sending+0x1>
     b02:	88 2a       	or	r8, r24
     b04:	99 2a       	or	r9, r25
     b06:	90 92 2b 04 	sts	0x042B, r9	; 0x80042b <sock_is_sending+0x1>
     b0a:	80 92 2a 04 	sts	0x042A, r8	; 0x80042a <sock_is_sending>
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     b0e:	b8 01       	movw	r22, r16
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	1a c0       	rjmp	.+52     	; 0xb4a <send+0x1f4>
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     b16:	6f ef       	ldi	r22, 0xFF	; 255
     b18:	7f ef       	ldi	r23, 0xFF	; 255
     b1a:	cb 01       	movw	r24, r22
     b1c:	16 c0       	rjmp	.+44     	; 0xb4a <send+0x1f4>
   CHECK_SOCKMODE(Sn_MR_TCP);
     b1e:	6b ef       	ldi	r22, 0xFB	; 251
     b20:	7f ef       	ldi	r23, 0xFF	; 255
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	9f ef       	ldi	r25, 0xFF	; 255
     b26:	11 c0       	rjmp	.+34     	; 0xb4a <send+0x1f4>
   CHECK_SOCKDATA();
     b28:	62 ef       	ldi	r22, 0xF2	; 242
     b2a:	7f ef       	ldi	r23, 0xFF	; 255
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	9f ef       	ldi	r25, 0xFF	; 255
     b30:	0c c0       	rjmp	.+24     	; 0xb4a <send+0x1f4>
   tmp = getSn_SR(sn);
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     b32:	69 ef       	ldi	r22, 0xF9	; 249
     b34:	7f ef       	ldi	r23, 0xFF	; 255
     b36:	8f ef       	ldi	r24, 0xFF	; 255
     b38:	9f ef       	ldi	r25, 0xFF	; 255
     b3a:	07 c0       	rjmp	.+14     	; 0xb4a <send+0x1f4>
      else if(tmp & Sn_IR_TIMEOUT)
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	03 c0       	rjmp	.+6      	; 0xb4a <send+0x1f4>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	cb 01       	movw	r24, r22
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     b4a:	26 96       	adiw	r28, 0x06	; 6
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	cf 90       	pop	r12
     b66:	bf 90       	pop	r11
     b68:	af 90       	pop	r10
     b6a:	9f 90       	pop	r9
     b6c:	8f 90       	pop	r8
     b6e:	7f 90       	pop	r7
     b70:	6f 90       	pop	r6
     b72:	5f 90       	pop	r5
     b74:	4f 90       	pop	r4
     b76:	3f 90       	pop	r3
     b78:	2f 90       	pop	r2
     b7a:	08 95       	ret

00000b7c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
     b7c:	7f 92       	push	r7
     b7e:	8f 92       	push	r8
     b80:	9f 92       	push	r9
     b82:	af 92       	push	r10
     b84:	bf 92       	push	r11
     b86:	cf 92       	push	r12
     b88:	df 92       	push	r13
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
     b96:	89 30       	cpi	r24, 0x09	; 9
     b98:	08 f0       	brcs	.+2      	; 0xb9c <recv+0x20>
     b9a:	90 c0       	rjmp	.+288    	; 0xcbc <recv+0x140>
     b9c:	ea 01       	movw	r28, r20
     b9e:	4b 01       	movw	r8, r22
     ba0:	78 2e       	mov	r7, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     ba2:	c8 2e       	mov	r12, r24
     ba4:	d1 2c       	mov	r13, r1
     ba6:	86 01       	movw	r16, r12
     ba8:	00 0f       	add	r16, r16
     baa:	11 1f       	adc	r17, r17
     bac:	00 0f       	add	r16, r16
     bae:	11 1f       	adc	r17, r17
     bb0:	0f 5f       	subi	r16, 0xFF	; 255
     bb2:	1f 4f       	sbci	r17, 0xFF	; 255
     bb4:	00 0f       	add	r16, r16
     bb6:	11 1f       	adc	r17, r17
     bb8:	00 0f       	add	r16, r16
     bba:	11 1f       	adc	r17, r17
     bbc:	00 0f       	add	r16, r16
     bbe:	11 1f       	adc	r17, r17
     bc0:	b8 01       	movw	r22, r16
     bc2:	01 2e       	mov	r0, r17
     bc4:	00 0c       	add	r0, r0
     bc6:	88 0b       	sbc	r24, r24
     bc8:	99 0b       	sbc	r25, r25
     bca:	97 d0       	rcall	.+302    	; 0xcfa <WIZCHIP_READ>
     bcc:	8f 70       	andi	r24, 0x0F	; 15
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <recv+0x58>
     bd2:	78 c0       	rjmp	.+240    	; 0xcc4 <recv+0x148>
   CHECK_SOCKDATA();
     bd4:	20 97       	sbiw	r28, 0x00	; 0
     bd6:	09 f4       	brne	.+2      	; 0xbda <recv+0x5e>
     bd8:	7a c0       	rjmp	.+244    	; 0xcce <recv+0x152>
   
   recvsize = getSn_RxMAX(sn);
     bda:	b8 01       	movw	r22, r16
     bdc:	72 5e       	subi	r23, 0xE2	; 226
     bde:	07 2e       	mov	r0, r23
     be0:	00 0c       	add	r0, r0
     be2:	88 0b       	sbc	r24, r24
     be4:	99 0b       	sbc	r25, r25
     be6:	89 d0       	rcall	.+274    	; 0xcfa <WIZCHIP_READ>
     be8:	a8 2e       	mov	r10, r24
     bea:	b1 2c       	mov	r11, r1
     bec:	ba 2c       	mov	r11, r10
     bee:	aa 24       	eor	r10, r10
     bf0:	bb 0c       	add	r11, r11
     bf2:	bb 0c       	add	r11, r11
   if(recvsize < len) len = recvsize;
     bf4:	ac 16       	cp	r10, r28
     bf6:	bd 06       	cpc	r11, r29
     bf8:	08 f0       	brcs	.+2      	; 0xbfc <recv+0x80>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
     bfa:	5e 01       	movw	r10, r28
     bfc:	87 2d       	mov	r24, r7
     bfe:	b7 d2       	rcall	.+1390   	; 0x116e <getSn_RX_RSR>
     c00:	ec 01       	movw	r28, r24
         tmp = getSn_SR(sn);
     c02:	b8 01       	movw	r22, r16
     c04:	7d 5f       	subi	r23, 0xFD	; 253
     c06:	07 2e       	mov	r0, r23
     c08:	00 0c       	add	r0, r0
     c0a:	88 0b       	sbc	r24, r24
     c0c:	99 0b       	sbc	r25, r25
     c0e:	75 d0       	rcall	.+234    	; 0xcfa <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
     c10:	87 31       	cpi	r24, 0x17	; 23
     c12:	21 f1       	breq	.+72     	; 0xc5c <recv+0xe0>
         {
            if(tmp == SOCK_CLOSE_WAIT)
     c14:	8c 31       	cpi	r24, 0x1C	; 28
            {
               if(recvsize != 0) break;
     c16:	d9 f4       	brne	.+54     	; 0xc4e <recv+0xd2>
     c18:	20 97       	sbiw	r28, 0x00	; 0
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
     c1a:	a9 f5       	brne	.+106    	; 0xc86 <recv+0x10a>
     c1c:	87 2d       	mov	r24, r7
     c1e:	4f d2       	rcall	.+1182   	; 0x10be <getSn_TX_FSR>
     c20:	7c 01       	movw	r14, r24
     c22:	b8 01       	movw	r22, r16
     c24:	71 5e       	subi	r23, 0xE1	; 225
     c26:	07 2e       	mov	r0, r23
     c28:	00 0c       	add	r0, r0
     c2a:	88 0b       	sbc	r24, r24
     c2c:	99 0b       	sbc	r25, r25
     c2e:	65 d0       	rcall	.+202    	; 0xcfa <WIZCHIP_READ>
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	98 2f       	mov	r25, r24
     c34:	88 27       	eor	r24, r24
     c36:	99 0f       	add	r25, r25
     c38:	99 0f       	add	r25, r25
     c3a:	e8 16       	cp	r14, r24
     c3c:	f9 06       	cpc	r15, r25
               {
                  close(sn);
     c3e:	71 f4       	brne	.+28     	; 0xc5c <recv+0xe0>
     c40:	87 2d       	mov	r24, r7
                  return SOCKERR_SOCKSTATUS;
     c42:	d5 db       	rcall	.-2134   	; 0x3ee <close>
     c44:	69 ef       	ldi	r22, 0xF9	; 249
     c46:	7f ef       	ldi	r23, 0xFF	; 255
     c48:	8f ef       	ldi	r24, 0xFF	; 255
     c4a:	9f ef       	ldi	r25, 0xFF	; 255
               }
            }
            else
            {
               close(sn);
     c4c:	48 c0       	rjmp	.+144    	; 0xcde <recv+0x162>
     c4e:	87 2d       	mov	r24, r7
     c50:	ce db       	rcall	.-2148   	; 0x3ee <close>
               return SOCKERR_SOCKSTATUS;
     c52:	69 ef       	ldi	r22, 0xF9	; 249
     c54:	7f ef       	ldi	r23, 0xFF	; 255
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	9f ef       	ldi	r25, 0xFF	; 255
     c5a:	41 c0       	rjmp	.+130    	; 0xcde <recv+0x162>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0c 2c       	mov	r0, r12
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <recv+0xec>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <recv+0xe8>
     c6c:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <sock_io_mode>
     c70:	30 91 2d 04 	lds	r19, 0x042D	; 0x80042d <sock_io_mode+0x1>
     c74:	82 23       	and	r24, r18
     c76:	93 23       	and	r25, r19
     c78:	89 2b       	or	r24, r25
     c7a:	11 f0       	breq	.+4      	; 0xc80 <recv+0x104>
     c7c:	20 97       	sbiw	r28, 0x00	; 0
     c7e:	61 f1       	breq	.+88     	; 0xcd8 <recv+0x15c>
         if(recvsize != 0) break;
     c80:	20 97       	sbiw	r28, 0x00	; 0
     c82:	09 f4       	brne	.+2      	; 0xc86 <recv+0x10a>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
     c84:	bb cf       	rjmp	.-138    	; 0xbfc <recv+0x80>
     c86:	ca 15       	cp	r28, r10
     c88:	db 05       	cpc	r29, r11
     c8a:	08 f0       	brcs	.+2      	; 0xc8e <recv+0x112>
   wiz_recv_data(sn, buf, len);
     c8c:	e5 01       	movw	r28, r10
     c8e:	ae 01       	movw	r20, r28
     c90:	b4 01       	movw	r22, r8
     c92:	87 2d       	mov	r24, r7
     c94:	4b d3       	rcall	.+1686   	; 0x132c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
     c96:	68 01       	movw	r12, r16
     c98:	d3 94       	inc	r13
     c9a:	0d 2c       	mov	r0, r13
     c9c:	00 0c       	add	r0, r0
     c9e:	ee 08       	sbc	r14, r14
     ca0:	ff 08       	sbc	r15, r15
     ca2:	40 e4       	ldi	r20, 0x40	; 64
     ca4:	c7 01       	movw	r24, r14
     ca6:	b6 01       	movw	r22, r12
   while(getSn_CR(sn));
     ca8:	8f d0       	rcall	.+286    	; 0xdc8 <WIZCHIP_WRITE>
     caa:	c7 01       	movw	r24, r14
     cac:	b6 01       	movw	r22, r12
     cae:	25 d0       	rcall	.+74     	; 0xcfa <WIZCHIP_READ>
     cb0:	81 11       	cpse	r24, r1
     cb2:	fb cf       	rjmp	.-10     	; 0xcaa <recv+0x12e>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     cb4:	be 01       	movw	r22, r28
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	11 c0       	rjmp	.+34     	; 0xcde <recv+0x162>
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
     cbc:	6f ef       	ldi	r22, 0xFF	; 255
     cbe:	7f ef       	ldi	r23, 0xFF	; 255
     cc0:	cb 01       	movw	r24, r22
     cc2:	0d c0       	rjmp	.+26     	; 0xcde <recv+0x162>
   CHECK_SOCKMODE(Sn_MR_TCP);
     cc4:	6b ef       	ldi	r22, 0xFB	; 251
     cc6:	7f ef       	ldi	r23, 0xFF	; 255
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	9f ef       	ldi	r25, 0xFF	; 255
     ccc:	08 c0       	rjmp	.+16     	; 0xcde <recv+0x162>
   CHECK_SOCKDATA();
     cce:	62 ef       	ldi	r22, 0xF2	; 242
     cd0:	7f ef       	ldi	r23, 0xFF	; 255
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	9f ef       	ldi	r25, 0xFF	; 255
     cd6:	03 c0       	rjmp	.+6      	; 0xcde <recv+0x162>
            {
               close(sn);
               return SOCKERR_SOCKSTATUS;
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	cb 01       	movw	r24, r22
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	df 90       	pop	r13
     cec:	cf 90       	pop	r12
     cee:	bf 90       	pop	r11
     cf0:	af 90       	pop	r10
     cf2:	9f 90       	pop	r9
     cf4:	8f 90       	pop	r8
     cf6:	7f 90       	pop	r7
     cf8:	08 95       	ret

00000cfa <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
     cfa:	df 92       	push	r13
     cfc:	ef 92       	push	r14
     cfe:	ff 92       	push	r15
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	00 d0       	rcall	.+0      	; 0xd0a <WIZCHIP_READ+0x10>
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	f6 2e       	mov	r15, r22
     d10:	e7 2e       	mov	r14, r23
     d12:	d8 2e       	mov	r13, r24
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
     d14:	06 e0       	ldi	r16, 0x06	; 6
     d16:	12 e0       	ldi	r17, 0x02	; 2
     d18:	d8 01       	movw	r26, r16
     d1a:	18 96       	adiw	r26, 0x08	; 8
     d1c:	ed 91       	ld	r30, X+
     d1e:	fc 91       	ld	r31, X
     d20:	19 97       	sbiw	r26, 0x09	; 9
     d22:	19 95       	eicall
   WIZCHIP.CS._select();
     d24:	d8 01       	movw	r26, r16
     d26:	1c 96       	adiw	r26, 0x0c	; 12
     d28:	ed 91       	ld	r30, X+
     d2a:	fc 91       	ld	r31, X
     d2c:	1d 97       	sbiw	r26, 0x0d	; 13
     d2e:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
     d30:	f8 01       	movw	r30, r16
     d32:	84 89       	ldd	r24, Z+20	; 0x14
     d34:	95 89       	ldd	r25, Z+21	; 0x15
     d36:	89 2b       	or	r24, r25
     d38:	31 f0       	breq	.+12     	; 0xd46 <WIZCHIP_READ+0x4c>
     d3a:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
     d3e:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
     d42:	30 97       	sbiw	r30, 0x00	; 0
     d44:	c1 f4       	brne	.+48     	; 0xd76 <WIZCHIP_READ+0x7c>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     d46:	06 e0       	ldi	r16, 0x06	; 6
     d48:	12 e0       	ldi	r17, 0x02	; 2
     d4a:	d8 01       	movw	r26, r16
     d4c:	52 96       	adiw	r26, 0x12	; 18
     d4e:	ed 91       	ld	r30, X+
     d50:	fc 91       	ld	r31, X
     d52:	53 97       	sbiw	r26, 0x13	; 19
     d54:	8d 2d       	mov	r24, r13
     d56:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     d58:	d8 01       	movw	r26, r16
     d5a:	52 96       	adiw	r26, 0x12	; 18
     d5c:	ed 91       	ld	r30, X+
     d5e:	fc 91       	ld	r31, X
     d60:	53 97       	sbiw	r26, 0x13	; 19
     d62:	8e 2d       	mov	r24, r14
     d64:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     d66:	d8 01       	movw	r26, r16
     d68:	52 96       	adiw	r26, 0x12	; 18
     d6a:	ed 91       	ld	r30, X+
     d6c:	fc 91       	ld	r31, X
     d6e:	53 97       	sbiw	r26, 0x13	; 19
     d70:	8f 2d       	mov	r24, r15
     d72:	19 95       	eicall
     d74:	08 c0       	rjmp	.+16     	; 0xd86 <WIZCHIP_READ+0x8c>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
     d76:	d9 82       	std	Y+1, r13	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
     d78:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
     d7a:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
     d7c:	63 e0       	ldi	r22, 0x03	; 3
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	ce 01       	movw	r24, r28
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	19 95       	eicall
   }
   ret = WIZCHIP.IF.SPI._read_byte();
     d86:	06 e0       	ldi	r16, 0x06	; 6
     d88:	12 e0       	ldi	r17, 0x02	; 2
     d8a:	d8 01       	movw	r26, r16
     d8c:	50 96       	adiw	r26, 0x10	; 16
     d8e:	ed 91       	ld	r30, X+
     d90:	fc 91       	ld	r31, X
     d92:	51 97       	sbiw	r26, 0x11	; 17
     d94:	19 95       	eicall
     d96:	f8 2e       	mov	r15, r24

   WIZCHIP.CS._deselect();
     d98:	d8 01       	movw	r26, r16
     d9a:	1e 96       	adiw	r26, 0x0e	; 14
     d9c:	ed 91       	ld	r30, X+
     d9e:	fc 91       	ld	r31, X
     da0:	1f 97       	sbiw	r26, 0x0f	; 15
     da2:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
     da4:	d8 01       	movw	r26, r16
     da6:	1a 96       	adiw	r26, 0x0a	; 10
     da8:	ed 91       	ld	r30, X+
     daa:	fc 91       	ld	r31, X
     dac:	1b 97       	sbiw	r26, 0x0b	; 11
     dae:	19 95       	eicall
   return ret;
}
     db0:	8f 2d       	mov	r24, r15
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	df 90       	pop	r13
     dc6:	08 95       	ret

00000dc8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
     dc8:	4f 92       	push	r4
     dca:	5f 92       	push	r5
     dcc:	6f 92       	push	r6
     dce:	7f 92       	push	r7
     dd0:	bf 92       	push	r11
     dd2:	cf 92       	push	r12
     dd4:	df 92       	push	r13
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	00 d0       	rcall	.+0      	; 0xde4 <WIZCHIP_WRITE+0x1c>
     de4:	1f 92       	push	r1
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	6b 01       	movw	r12, r22
     dec:	7c 01       	movw	r14, r24
     dee:	b4 2e       	mov	r11, r20
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
     df0:	06 e0       	ldi	r16, 0x06	; 6
     df2:	12 e0       	ldi	r17, 0x02	; 2
     df4:	d8 01       	movw	r26, r16
     df6:	18 96       	adiw	r26, 0x08	; 8
     df8:	ed 91       	ld	r30, X+
     dfa:	fc 91       	ld	r31, X
     dfc:	19 97       	sbiw	r26, 0x09	; 9
     dfe:	19 95       	eicall
   WIZCHIP.CS._select();
     e00:	d8 01       	movw	r26, r16
     e02:	1c 96       	adiw	r26, 0x0c	; 12
     e04:	ed 91       	ld	r30, X+
     e06:	fc 91       	ld	r31, X
     e08:	1d 97       	sbiw	r26, 0x0d	; 13
     e0a:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
     e0c:	26 01       	movw	r4, r12
     e0e:	37 01       	movw	r6, r14
     e10:	68 94       	set
     e12:	42 f8       	bld	r4, 2

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
     e14:	d8 01       	movw	r26, r16
     e16:	56 96       	adiw	r26, 0x16	; 22
     e18:	ed 91       	ld	r30, X+
     e1a:	fc 91       	ld	r31, X
     e1c:	57 97       	sbiw	r26, 0x17	; 23
     e1e:	30 97       	sbiw	r30, 0x00	; 0
     e20:	e1 f4       	brne	.+56     	; 0xe5a <WIZCHIP_WRITE+0x92>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     e22:	52 96       	adiw	r26, 0x12	; 18
     e24:	ed 91       	ld	r30, X+
     e26:	fc 91       	ld	r31, X
     e28:	53 97       	sbiw	r26, 0x13	; 19
     e2a:	8e 2d       	mov	r24, r14
     e2c:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     e2e:	d8 01       	movw	r26, r16
     e30:	52 96       	adiw	r26, 0x12	; 18
     e32:	ed 91       	ld	r30, X+
     e34:	fc 91       	ld	r31, X
     e36:	53 97       	sbiw	r26, 0x13	; 19
     e38:	8d 2d       	mov	r24, r13
     e3a:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     e3c:	d8 01       	movw	r26, r16
     e3e:	52 96       	adiw	r26, 0x12	; 18
     e40:	ed 91       	ld	r30, X+
     e42:	fc 91       	ld	r31, X
     e44:	53 97       	sbiw	r26, 0x13	; 19
     e46:	84 2d       	mov	r24, r4
     e48:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte(wb);
     e4a:	d8 01       	movw	r26, r16
     e4c:	52 96       	adiw	r26, 0x12	; 18
     e4e:	ed 91       	ld	r30, X+
     e50:	fc 91       	ld	r31, X
     e52:	53 97       	sbiw	r26, 0x13	; 19
     e54:	8b 2d       	mov	r24, r11
     e56:	19 95       	eicall
     e58:	09 c0       	rjmp	.+18     	; 0xe6c <WIZCHIP_WRITE+0xa4>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
     e5a:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
     e5c:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
     e5e:	4b 82       	std	Y+3, r4	; 0x03
		spi_data[3] = wb;
     e60:	bc 82       	std	Y+4, r11	; 0x04
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
     e62:	64 e0       	ldi	r22, 0x04	; 4
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	ce 01       	movw	r24, r28
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
     e6c:	06 e0       	ldi	r16, 0x06	; 6
     e6e:	12 e0       	ldi	r17, 0x02	; 2
     e70:	d8 01       	movw	r26, r16
     e72:	1e 96       	adiw	r26, 0x0e	; 14
     e74:	ed 91       	ld	r30, X+
     e76:	fc 91       	ld	r31, X
     e78:	1f 97       	sbiw	r26, 0x0f	; 15
     e7a:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
     e7c:	d8 01       	movw	r26, r16
     e7e:	1a 96       	adiw	r26, 0x0a	; 10
     e80:	ed 91       	ld	r30, X+
     e82:	fc 91       	ld	r31, X
     e84:	1b 97       	sbiw	r26, 0x0b	; 11
     e86:	19 95       	eicall
}
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	bf 90       	pop	r11
     ea2:	7f 90       	pop	r7
     ea4:	6f 90       	pop	r6
     ea6:	5f 90       	pop	r5
     ea8:	4f 90       	pop	r4
     eaa:	08 95       	ret

00000eac <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
     eac:	9f 92       	push	r9
     eae:	af 92       	push	r10
     eb0:	bf 92       	push	r11
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <WIZCHIP_READ_BUF+0x18>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	f6 2e       	mov	r15, r22
     eca:	e7 2e       	mov	r14, r23
     ecc:	98 2e       	mov	r9, r24
     ece:	5a 01       	movw	r10, r20
     ed0:	69 01       	movw	r12, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
     ed2:	06 e0       	ldi	r16, 0x06	; 6
     ed4:	12 e0       	ldi	r17, 0x02	; 2
     ed6:	d8 01       	movw	r26, r16
     ed8:	18 96       	adiw	r26, 0x08	; 8
     eda:	ed 91       	ld	r30, X+
     edc:	fc 91       	ld	r31, X
     ede:	19 97       	sbiw	r26, 0x09	; 9
     ee0:	19 95       	eicall
   WIZCHIP.CS._select();
     ee2:	d8 01       	movw	r26, r16
     ee4:	1c 96       	adiw	r26, 0x0c	; 12
     ee6:	ed 91       	ld	r30, X+
     ee8:	fc 91       	ld	r31, X
     eea:	1d 97       	sbiw	r26, 0x0d	; 13
     eec:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
     eee:	f8 01       	movw	r30, r16
     ef0:	84 89       	ldd	r24, Z+20	; 0x14
     ef2:	95 89       	ldd	r25, Z+21	; 0x15
     ef4:	89 2b       	or	r24, r25
     ef6:	31 f0       	breq	.+12     	; 0xf04 <WIZCHIP_READ_BUF+0x58>
     ef8:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
     efc:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
     f00:	30 97       	sbiw	r30, 0x00	; 0
     f02:	51 f5       	brne	.+84     	; 0xf58 <WIZCHIP_READ_BUF+0xac>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     f04:	06 e0       	ldi	r16, 0x06	; 6
     f06:	12 e0       	ldi	r17, 0x02	; 2
     f08:	d8 01       	movw	r26, r16
     f0a:	52 96       	adiw	r26, 0x12	; 18
     f0c:	ed 91       	ld	r30, X+
     f0e:	fc 91       	ld	r31, X
     f10:	53 97       	sbiw	r26, 0x13	; 19
     f12:	89 2d       	mov	r24, r9
     f14:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     f16:	d8 01       	movw	r26, r16
     f18:	52 96       	adiw	r26, 0x12	; 18
     f1a:	ed 91       	ld	r30, X+
     f1c:	fc 91       	ld	r31, X
     f1e:	53 97       	sbiw	r26, 0x13	; 19
     f20:	8e 2d       	mov	r24, r14
     f22:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     f24:	d8 01       	movw	r26, r16
     f26:	52 96       	adiw	r26, 0x12	; 18
     f28:	ed 91       	ld	r30, X+
     f2a:	fc 91       	ld	r31, X
     f2c:	53 97       	sbiw	r26, 0x13	; 19
     f2e:	8f 2d       	mov	r24, r15
     f30:	19 95       	eicall
		for(i = 0; i < len; i++)
     f32:	00 e0       	ldi	r16, 0x00	; 0
     f34:	10 e0       	ldi	r17, 0x00	; 0
     f36:	0c c0       	rjmp	.+24     	; 0xf50 <WIZCHIP_READ_BUF+0xa4>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
     f38:	75 01       	movw	r14, r10
     f3a:	e0 0e       	add	r14, r16
     f3c:	f1 1e       	adc	r15, r17
     f3e:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <WIZCHIP+0x10>
     f42:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <WIZCHIP+0x11>
     f46:	19 95       	eicall
     f48:	f7 01       	movw	r30, r14
     f4a:	80 83       	st	Z, r24
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
     f4c:	0f 5f       	subi	r16, 0xFF	; 255
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	0c 15       	cp	r16, r12
     f52:	1d 05       	cpc	r17, r13
     f54:	88 f3       	brcs	.-30     	; 0xf38 <WIZCHIP_READ_BUF+0x8c>
     f56:	0f c0       	rjmp	.+30     	; 0xf76 <WIZCHIP_READ_BUF+0xca>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
     f58:	99 82       	std	Y+1, r9	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
     f5a:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
     f5c:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
     f5e:	63 e0       	ldi	r22, 0x03	; 3
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	ce 01       	movw	r24, r28
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	19 95       	eicall
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
     f68:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <WIZCHIP+0x14>
     f6c:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <WIZCHIP+0x15>
     f70:	b6 01       	movw	r22, r12
     f72:	c5 01       	movw	r24, r10
     f74:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
     f76:	06 e0       	ldi	r16, 0x06	; 6
     f78:	12 e0       	ldi	r17, 0x02	; 2
     f7a:	d8 01       	movw	r26, r16
     f7c:	1e 96       	adiw	r26, 0x0e	; 14
     f7e:	ed 91       	ld	r30, X+
     f80:	fc 91       	ld	r31, X
     f82:	1f 97       	sbiw	r26, 0x0f	; 15
     f84:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
     f86:	d8 01       	movw	r26, r16
     f88:	1a 96       	adiw	r26, 0x0a	; 10
     f8a:	ed 91       	ld	r30, X+
     f8c:	fc 91       	ld	r31, X
     f8e:	1b 97       	sbiw	r26, 0x0b	; 11
     f90:	19 95       	eicall
}
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	ff 90       	pop	r15
     fa2:	ef 90       	pop	r14
     fa4:	df 90       	pop	r13
     fa6:	cf 90       	pop	r12
     fa8:	bf 90       	pop	r11
     faa:	af 90       	pop	r10
     fac:	9f 90       	pop	r9
     fae:	08 95       	ret

00000fb0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
     fb0:	4f 92       	push	r4
     fb2:	5f 92       	push	r5
     fb4:	6f 92       	push	r6
     fb6:	7f 92       	push	r7
     fb8:	8f 92       	push	r8
     fba:	9f 92       	push	r9
     fbc:	af 92       	push	r10
     fbe:	bf 92       	push	r11
     fc0:	cf 92       	push	r12
     fc2:	df 92       	push	r13
     fc4:	ef 92       	push	r14
     fc6:	ff 92       	push	r15
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <WIZCHIP_WRITE_BUF+0x22>
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	6b 01       	movw	r12, r22
     fd8:	7c 01       	movw	r14, r24
     fda:	4a 01       	movw	r8, r20
     fdc:	59 01       	movw	r10, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
     fde:	06 e0       	ldi	r16, 0x06	; 6
     fe0:	12 e0       	ldi	r17, 0x02	; 2
     fe2:	d8 01       	movw	r26, r16
     fe4:	18 96       	adiw	r26, 0x08	; 8
     fe6:	ed 91       	ld	r30, X+
     fe8:	fc 91       	ld	r31, X
     fea:	19 97       	sbiw	r26, 0x09	; 9
     fec:	19 95       	eicall
   WIZCHIP.CS._select();
     fee:	d8 01       	movw	r26, r16
     ff0:	1c 96       	adiw	r26, 0x0c	; 12
     ff2:	ed 91       	ld	r30, X+
     ff4:	fc 91       	ld	r31, X
     ff6:	1d 97       	sbiw	r26, 0x0d	; 13
     ff8:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
     ffa:	26 01       	movw	r4, r12
     ffc:	37 01       	movw	r6, r14
     ffe:	68 94       	set
    1000:	42 f8       	bld	r4, 2

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    1002:	d8 01       	movw	r26, r16
    1004:	56 96       	adiw	r26, 0x16	; 22
    1006:	ed 91       	ld	r30, X+
    1008:	fc 91       	ld	r31, X
    100a:	57 97       	sbiw	r26, 0x17	; 23
    100c:	30 97       	sbiw	r30, 0x00	; 0
    100e:	31 f5       	brne	.+76     	; 0x105c <WIZCHIP_WRITE_BUF+0xac>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1010:	52 96       	adiw	r26, 0x12	; 18
    1012:	ed 91       	ld	r30, X+
    1014:	fc 91       	ld	r31, X
    1016:	53 97       	sbiw	r26, 0x13	; 19
    1018:	8e 2d       	mov	r24, r14
    101a:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    101c:	d8 01       	movw	r26, r16
    101e:	52 96       	adiw	r26, 0x12	; 18
    1020:	ed 91       	ld	r30, X+
    1022:	fc 91       	ld	r31, X
    1024:	53 97       	sbiw	r26, 0x13	; 19
    1026:	8d 2d       	mov	r24, r13
    1028:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    102a:	d8 01       	movw	r26, r16
    102c:	52 96       	adiw	r26, 0x12	; 18
    102e:	ed 91       	ld	r30, X+
    1030:	fc 91       	ld	r31, X
    1032:	53 97       	sbiw	r26, 0x13	; 19
    1034:	84 2d       	mov	r24, r4
    1036:	19 95       	eicall
		for(i = 0; i < len; i++)
    1038:	00 e0       	ldi	r16, 0x00	; 0
    103a:	10 e0       	ldi	r17, 0x00	; 0
    103c:	0b c0       	rjmp	.+22     	; 0x1054 <WIZCHIP_WRITE_BUF+0xa4>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    103e:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <WIZCHIP+0x12>
    1042:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <WIZCHIP+0x13>
    1046:	d4 01       	movw	r26, r8
    1048:	a0 0f       	add	r26, r16
    104a:	b1 1f       	adc	r27, r17
    104c:	8c 91       	ld	r24, X
    104e:	19 95       	eicall
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    1050:	0f 5f       	subi	r16, 0xFF	; 255
    1052:	1f 4f       	sbci	r17, 0xFF	; 255
    1054:	0a 15       	cp	r16, r10
    1056:	1b 05       	cpc	r17, r11
    1058:	90 f3       	brcs	.-28     	; 0x103e <WIZCHIP_WRITE_BUF+0x8e>
    105a:	0f c0       	rjmp	.+30     	; 0x107a <WIZCHIP_WRITE_BUF+0xca>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    105c:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    105e:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    1060:	4b 82       	std	Y+3, r4	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    1062:	63 e0       	ldi	r22, 0x03	; 3
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	ce 01       	movw	r24, r28
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	19 95       	eicall
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    106c:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    1070:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    1074:	b5 01       	movw	r22, r10
    1076:	c4 01       	movw	r24, r8
    1078:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    107a:	06 e0       	ldi	r16, 0x06	; 6
    107c:	12 e0       	ldi	r17, 0x02	; 2
    107e:	d8 01       	movw	r26, r16
    1080:	1e 96       	adiw	r26, 0x0e	; 14
    1082:	ed 91       	ld	r30, X+
    1084:	fc 91       	ld	r31, X
    1086:	1f 97       	sbiw	r26, 0x0f	; 15
    1088:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    108a:	d8 01       	movw	r26, r16
    108c:	1a 96       	adiw	r26, 0x0a	; 10
    108e:	ed 91       	ld	r30, X+
    1090:	fc 91       	ld	r31, X
    1092:	1b 97       	sbiw	r26, 0x0b	; 11
    1094:	19 95       	eicall
}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	af 90       	pop	r10
    10b0:	9f 90       	pop	r9
    10b2:	8f 90       	pop	r8
    10b4:	7f 90       	pop	r7
    10b6:	6f 90       	pop	r6
    10b8:	5f 90       	pop	r5
    10ba:	4f 90       	pop	r4
    10bc:	08 95       	ret

000010be <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
    10be:	7f 92       	push	r7
    10c0:	8f 92       	push	r8
    10c2:	9f 92       	push	r9
    10c4:	af 92       	push	r10
    10c6:	bf 92       	push	r11
    10c8:	cf 92       	push	r12
    10ca:	df 92       	push	r13
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	78 2e       	mov	r7, r24
   uint16_t val=0,val1=0;
    10da:	00 e0       	ldi	r16, 0x00	; 0
    10dc:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    10de:	c7 2c       	mov	r12, r7
    10e0:	d1 2c       	mov	r13, r1
    10e2:	cc 0c       	add	r12, r12
    10e4:	dd 1c       	adc	r13, r13
    10e6:	cc 0c       	add	r12, r12
    10e8:	dd 1c       	adc	r13, r13
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	c8 1a       	sub	r12, r24
    10ee:	d8 0a       	sbc	r13, r24
    10f0:	cc 0c       	add	r12, r12
    10f2:	dd 1c       	adc	r13, r13
    10f4:	cc 0c       	add	r12, r12
    10f6:	dd 1c       	adc	r13, r13
    10f8:	cc 0c       	add	r12, r12
    10fa:	dd 1c       	adc	r13, r13
    10fc:	46 01       	movw	r8, r12
    10fe:	80 ee       	ldi	r24, 0xE0	; 224
    1100:	98 1a       	sub	r9, r24
    1102:	09 2c       	mov	r0, r9
    1104:	00 0c       	add	r0, r0
    1106:	aa 08       	sbc	r10, r10
    1108:	bb 08       	sbc	r11, r11
    110a:	c5 01       	movw	r24, r10
    110c:	b4 01       	movw	r22, r8
    110e:	f5 dd       	rcall	.-1046   	; 0xcfa <WIZCHIP_READ>
    1110:	c8 2f       	mov	r28, r24
    1112:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    1114:	dc 2f       	mov	r29, r28
    1116:	cc 27       	eor	r28, r28
    1118:	8f ed       	ldi	r24, 0xDF	; 223
    111a:	d8 1a       	sub	r13, r24
    111c:	0d 2c       	mov	r0, r13
    111e:	00 0c       	add	r0, r0
    1120:	ee 08       	sbc	r14, r14
    1122:	ff 08       	sbc	r15, r15
    1124:	c7 01       	movw	r24, r14
    1126:	b6 01       	movw	r22, r12
    1128:	e8 dd       	rcall	.-1072   	; 0xcfa <WIZCHIP_READ>
    112a:	c8 0f       	add	r28, r24
    112c:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    112e:	20 97       	sbiw	r28, 0x00	; 0
    1130:	61 f0       	breq	.+24     	; 0x114a <getSn_TX_FSR+0x8c>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    1132:	c5 01       	movw	r24, r10
    1134:	b4 01       	movw	r22, r8
    1136:	e1 dd       	rcall	.-1086   	; 0xcfa <WIZCHIP_READ>
    1138:	08 2f       	mov	r16, r24
    113a:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    113c:	10 2f       	mov	r17, r16
    113e:	00 27       	eor	r16, r16
    1140:	c7 01       	movw	r24, r14
    1142:	b6 01       	movw	r22, r12
    1144:	da dd       	rcall	.-1100   	; 0xcfa <WIZCHIP_READ>
    1146:	08 0f       	add	r16, r24
    1148:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    114a:	0c 17       	cp	r16, r28
    114c:	1d 07       	cpc	r17, r29
    114e:	39 f6       	brne	.-114    	; 0x10de <getSn_TX_FSR+0x20>
   return val;
}
    1150:	c8 01       	movw	r24, r16
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	df 90       	pop	r13
    1160:	cf 90       	pop	r12
    1162:	bf 90       	pop	r11
    1164:	af 90       	pop	r10
    1166:	9f 90       	pop	r9
    1168:	8f 90       	pop	r8
    116a:	7f 90       	pop	r7
    116c:	08 95       	ret

0000116e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    116e:	7f 92       	push	r7
    1170:	8f 92       	push	r8
    1172:	9f 92       	push	r9
    1174:	af 92       	push	r10
    1176:	bf 92       	push	r11
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	78 2e       	mov	r7, r24
   uint16_t val=0,val1=0;
    118a:	00 e0       	ldi	r16, 0x00	; 0
    118c:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    118e:	c7 2c       	mov	r12, r7
    1190:	d1 2c       	mov	r13, r1
    1192:	cc 0c       	add	r12, r12
    1194:	dd 1c       	adc	r13, r13
    1196:	cc 0c       	add	r12, r12
    1198:	dd 1c       	adc	r13, r13
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	c8 1a       	sub	r12, r24
    119e:	d8 0a       	sbc	r13, r24
    11a0:	cc 0c       	add	r12, r12
    11a2:	dd 1c       	adc	r13, r13
    11a4:	cc 0c       	add	r12, r12
    11a6:	dd 1c       	adc	r13, r13
    11a8:	cc 0c       	add	r12, r12
    11aa:	dd 1c       	adc	r13, r13
    11ac:	46 01       	movw	r8, r12
    11ae:	8a ed       	ldi	r24, 0xDA	; 218
    11b0:	98 1a       	sub	r9, r24
    11b2:	09 2c       	mov	r0, r9
    11b4:	00 0c       	add	r0, r0
    11b6:	aa 08       	sbc	r10, r10
    11b8:	bb 08       	sbc	r11, r11
    11ba:	c5 01       	movw	r24, r10
    11bc:	b4 01       	movw	r22, r8
    11be:	9d dd       	rcall	.-1222   	; 0xcfa <WIZCHIP_READ>
    11c0:	c8 2f       	mov	r28, r24
    11c2:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    11c4:	dc 2f       	mov	r29, r28
    11c6:	cc 27       	eor	r28, r28
    11c8:	89 ed       	ldi	r24, 0xD9	; 217
    11ca:	d8 1a       	sub	r13, r24
    11cc:	0d 2c       	mov	r0, r13
    11ce:	00 0c       	add	r0, r0
    11d0:	ee 08       	sbc	r14, r14
    11d2:	ff 08       	sbc	r15, r15
    11d4:	c7 01       	movw	r24, r14
    11d6:	b6 01       	movw	r22, r12
    11d8:	90 dd       	rcall	.-1248   	; 0xcfa <WIZCHIP_READ>
    11da:	c8 0f       	add	r28, r24
    11dc:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    11de:	20 97       	sbiw	r28, 0x00	; 0
    11e0:	61 f0       	breq	.+24     	; 0x11fa <getSn_RX_RSR+0x8c>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    11e2:	c5 01       	movw	r24, r10
    11e4:	b4 01       	movw	r22, r8
    11e6:	89 dd       	rcall	.-1262   	; 0xcfa <WIZCHIP_READ>
    11e8:	08 2f       	mov	r16, r24
    11ea:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    11ec:	10 2f       	mov	r17, r16
    11ee:	00 27       	eor	r16, r16
    11f0:	c7 01       	movw	r24, r14
    11f2:	b6 01       	movw	r22, r12
    11f4:	82 dd       	rcall	.-1276   	; 0xcfa <WIZCHIP_READ>
    11f6:	08 0f       	add	r16, r24
    11f8:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    11fa:	0c 17       	cp	r16, r28
    11fc:	1d 07       	cpc	r17, r29
    11fe:	39 f6       	brne	.-114    	; 0x118e <getSn_RX_RSR+0x20>
   return val;
}
    1200:	c8 01       	movw	r24, r16
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	df 90       	pop	r13
    1210:	cf 90       	pop	r12
    1212:	bf 90       	pop	r11
    1214:	af 90       	pop	r10
    1216:	9f 90       	pop	r9
    1218:	8f 90       	pop	r8
    121a:	7f 90       	pop	r7
    121c:	08 95       	ret

0000121e <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    121e:	2f 92       	push	r2
    1220:	3f 92       	push	r3
    1222:	4f 92       	push	r4
    1224:	5f 92       	push	r5
    1226:	6f 92       	push	r6
    1228:	7f 92       	push	r7
    122a:	8f 92       	push	r8
    122c:	9f 92       	push	r9
    122e:	af 92       	push	r10
    1230:	bf 92       	push	r11
    1232:	cf 92       	push	r12
    1234:	df 92       	push	r13
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	00 d0       	rcall	.+0      	; 0x1244 <wiz_send_data+0x26>
    1244:	1f 92       	push	r1
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
    124a:	41 15       	cp	r20, r1
    124c:	51 05       	cpc	r21, r1
    124e:	09 f4       	brne	.+2      	; 0x1252 <wiz_send_data+0x34>
    1250:	56 c0       	rjmp	.+172    	; 0x12fe <wiz_send_data+0xe0>
    1252:	3a 01       	movw	r6, r20
    1254:	7a 83       	std	Y+2, r23	; 0x02
    1256:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_TX_WR(sn);
    1258:	28 2e       	mov	r2, r24
    125a:	31 2c       	mov	r3, r1
    125c:	22 0c       	add	r2, r2
    125e:	33 1c       	adc	r3, r3
    1260:	22 0c       	add	r2, r2
    1262:	33 1c       	adc	r3, r3
    1264:	61 01       	movw	r12, r2
    1266:	2f ef       	ldi	r18, 0xFF	; 255
    1268:	c2 1a       	sub	r12, r18
    126a:	d2 0a       	sbc	r13, r18
    126c:	cc 0c       	add	r12, r12
    126e:	dd 1c       	adc	r13, r13
    1270:	cc 0c       	add	r12, r12
    1272:	dd 1c       	adc	r13, r13
    1274:	cc 0c       	add	r12, r12
    1276:	dd 1c       	adc	r13, r13
    1278:	46 01       	movw	r8, r12
    127a:	3c ed       	ldi	r19, 0xDC	; 220
    127c:	93 1a       	sub	r9, r19
    127e:	09 2c       	mov	r0, r9
    1280:	00 0c       	add	r0, r0
    1282:	aa 08       	sbc	r10, r10
    1284:	bb 08       	sbc	r11, r11
    1286:	c5 01       	movw	r24, r10
    1288:	b4 01       	movw	r22, r8
    128a:	37 dd       	rcall	.-1426   	; 0xcfa <WIZCHIP_READ>
    128c:	08 2f       	mov	r16, r24
    128e:	10 e0       	ldi	r17, 0x00	; 0
    1290:	10 2f       	mov	r17, r16
    1292:	00 27       	eor	r16, r16
    1294:	8b ed       	ldi	r24, 0xDB	; 219
    1296:	d8 1a       	sub	r13, r24
    1298:	0d 2c       	mov	r0, r13
    129a:	00 0c       	add	r0, r0
    129c:	ee 08       	sbc	r14, r14
    129e:	ff 08       	sbc	r15, r15
    12a0:	c7 01       	movw	r24, r14
    12a2:	b6 01       	movw	r22, r12
    12a4:	2a dd       	rcall	.-1452   	; 0xcfa <WIZCHIP_READ>
    12a6:	08 0f       	add	r16, r24
    12a8:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
    12aa:	c8 01       	movw	r24, r16
    12ac:	a0 e0       	ldi	r26, 0x00	; 0
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	44 27       	eor	r20, r20
    12b2:	58 2f       	mov	r21, r24
    12b4:	69 2f       	mov	r22, r25
    12b6:	7a 2f       	mov	r23, r26
    12b8:	c1 01       	movw	r24, r2
    12ba:	02 96       	adiw	r24, 0x02	; 2
    12bc:	1c 01       	movw	r2, r24
    12be:	22 0c       	add	r2, r2
    12c0:	33 1c       	adc	r3, r3
    12c2:	22 0c       	add	r2, r2
    12c4:	33 1c       	adc	r3, r3
    12c6:	22 0c       	add	r2, r2
    12c8:	33 1c       	adc	r3, r3
    12ca:	c1 01       	movw	r24, r2
    12cc:	33 0c       	add	r3, r3
    12ce:	aa 0b       	sbc	r26, r26
    12d0:	bb 0b       	sbc	r27, r27
    12d2:	1a 01       	movw	r2, r20
    12d4:	2b 01       	movw	r4, r22
    12d6:	28 0e       	add	r2, r24
    12d8:	39 1e       	adc	r3, r25
    12da:	4a 1e       	adc	r4, r26
    12dc:	5b 1e       	adc	r5, r27
    12de:	c2 01       	movw	r24, r4
    12e0:	b1 01       	movw	r22, r2
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    12e2:	93 01       	movw	r18, r6
    12e4:	49 81       	ldd	r20, Y+1	; 0x01
    12e6:	5a 81       	ldd	r21, Y+2	; 0x02
    12e8:	63 de       	rcall	.-826    	; 0xfb0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
    12ea:	06 0d       	add	r16, r6
    12ec:	17 1d       	adc	r17, r7
   setSn_TX_WR(sn,ptr);
    12ee:	41 2f       	mov	r20, r17
    12f0:	c5 01       	movw	r24, r10
    12f2:	b4 01       	movw	r22, r8
    12f4:	69 dd       	rcall	.-1326   	; 0xdc8 <WIZCHIP_WRITE>
    12f6:	40 2f       	mov	r20, r16
    12f8:	c7 01       	movw	r24, r14
    12fa:	b6 01       	movw	r22, r12
    12fc:	65 dd       	rcall	.-1334   	; 0xdc8 <WIZCHIP_WRITE>
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	ff 90       	pop	r15
    1310:	ef 90       	pop	r14
    1312:	df 90       	pop	r13
    1314:	cf 90       	pop	r12
    1316:	bf 90       	pop	r11
    1318:	af 90       	pop	r10
    131a:	9f 90       	pop	r9
    131c:	8f 90       	pop	r8
    131e:	7f 90       	pop	r7
    1320:	6f 90       	pop	r6
    1322:	5f 90       	pop	r5
    1324:	4f 90       	pop	r4
    1326:	3f 90       	pop	r3
    1328:	2f 90       	pop	r2
    132a:	08 95       	ret

0000132c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    132c:	2f 92       	push	r2
    132e:	3f 92       	push	r3
    1330:	4f 92       	push	r4
    1332:	5f 92       	push	r5
    1334:	6f 92       	push	r6
    1336:	7f 92       	push	r7
    1338:	8f 92       	push	r8
    133a:	9f 92       	push	r9
    133c:	af 92       	push	r10
    133e:	bf 92       	push	r11
    1340:	cf 92       	push	r12
    1342:	df 92       	push	r13
    1344:	ef 92       	push	r14
    1346:	ff 92       	push	r15
    1348:	0f 93       	push	r16
    134a:	1f 93       	push	r17
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	00 d0       	rcall	.+0      	; 0x1352 <wiz_recv_data+0x26>
    1352:	1f 92       	push	r1
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
    1358:	41 15       	cp	r20, r1
    135a:	51 05       	cpc	r21, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <wiz_recv_data+0x34>
    135e:	56 c0       	rjmp	.+172    	; 0x140c <wiz_recv_data+0xe0>
    1360:	3a 01       	movw	r6, r20
    1362:	7a 83       	std	Y+2, r23	; 0x02
    1364:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_RX_RD(sn);
    1366:	28 2e       	mov	r2, r24
    1368:	31 2c       	mov	r3, r1
    136a:	22 0c       	add	r2, r2
    136c:	33 1c       	adc	r3, r3
    136e:	22 0c       	add	r2, r2
    1370:	33 1c       	adc	r3, r3
    1372:	61 01       	movw	r12, r2
    1374:	2f ef       	ldi	r18, 0xFF	; 255
    1376:	c2 1a       	sub	r12, r18
    1378:	d2 0a       	sbc	r13, r18
    137a:	cc 0c       	add	r12, r12
    137c:	dd 1c       	adc	r13, r13
    137e:	cc 0c       	add	r12, r12
    1380:	dd 1c       	adc	r13, r13
    1382:	cc 0c       	add	r12, r12
    1384:	dd 1c       	adc	r13, r13
    1386:	46 01       	movw	r8, r12
    1388:	38 ed       	ldi	r19, 0xD8	; 216
    138a:	93 1a       	sub	r9, r19
    138c:	09 2c       	mov	r0, r9
    138e:	00 0c       	add	r0, r0
    1390:	aa 08       	sbc	r10, r10
    1392:	bb 08       	sbc	r11, r11
    1394:	c5 01       	movw	r24, r10
    1396:	b4 01       	movw	r22, r8
    1398:	b0 dc       	rcall	.-1696   	; 0xcfa <WIZCHIP_READ>
    139a:	08 2f       	mov	r16, r24
    139c:	10 e0       	ldi	r17, 0x00	; 0
    139e:	10 2f       	mov	r17, r16
    13a0:	00 27       	eor	r16, r16
    13a2:	87 ed       	ldi	r24, 0xD7	; 215
    13a4:	d8 1a       	sub	r13, r24
    13a6:	0d 2c       	mov	r0, r13
    13a8:	00 0c       	add	r0, r0
    13aa:	ee 08       	sbc	r14, r14
    13ac:	ff 08       	sbc	r15, r15
    13ae:	c7 01       	movw	r24, r14
    13b0:	b6 01       	movw	r22, r12
    13b2:	a3 dc       	rcall	.-1722   	; 0xcfa <WIZCHIP_READ>
    13b4:	08 0f       	add	r16, r24
    13b6:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
    13b8:	c8 01       	movw	r24, r16
    13ba:	a0 e0       	ldi	r26, 0x00	; 0
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	44 27       	eor	r20, r20
    13c0:	58 2f       	mov	r21, r24
    13c2:	69 2f       	mov	r22, r25
    13c4:	7a 2f       	mov	r23, r26
    13c6:	c1 01       	movw	r24, r2
    13c8:	03 96       	adiw	r24, 0x03	; 3
    13ca:	1c 01       	movw	r2, r24
    13cc:	22 0c       	add	r2, r2
    13ce:	33 1c       	adc	r3, r3
    13d0:	22 0c       	add	r2, r2
    13d2:	33 1c       	adc	r3, r3
    13d4:	22 0c       	add	r2, r2
    13d6:	33 1c       	adc	r3, r3
    13d8:	c1 01       	movw	r24, r2
    13da:	33 0c       	add	r3, r3
    13dc:	aa 0b       	sbc	r26, r26
    13de:	bb 0b       	sbc	r27, r27
    13e0:	1a 01       	movw	r2, r20
    13e2:	2b 01       	movw	r4, r22
    13e4:	28 0e       	add	r2, r24
    13e6:	39 1e       	adc	r3, r25
    13e8:	4a 1e       	adc	r4, r26
    13ea:	5b 1e       	adc	r5, r27
    13ec:	c2 01       	movw	r24, r4
    13ee:	b1 01       	movw	r22, r2
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    13f0:	93 01       	movw	r18, r6
    13f2:	49 81       	ldd	r20, Y+1	; 0x01
    13f4:	5a 81       	ldd	r21, Y+2	; 0x02
    13f6:	5a dd       	rcall	.-1356   	; 0xeac <WIZCHIP_READ_BUF>
   ptr += len;
    13f8:	06 0d       	add	r16, r6
    13fa:	17 1d       	adc	r17, r7
   
   setSn_RX_RD(sn,ptr);
    13fc:	41 2f       	mov	r20, r17
    13fe:	c5 01       	movw	r24, r10
    1400:	b4 01       	movw	r22, r8
    1402:	e2 dc       	rcall	.-1596   	; 0xdc8 <WIZCHIP_WRITE>
    1404:	40 2f       	mov	r20, r16
    1406:	c7 01       	movw	r24, r14
    1408:	b6 01       	movw	r22, r12
    140a:	de dc       	rcall	.-1604   	; 0xdc8 <WIZCHIP_WRITE>
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	df 90       	pop	r13
    1422:	cf 90       	pop	r12
    1424:	bf 90       	pop	r11
    1426:	af 90       	pop	r10
    1428:	9f 90       	pop	r9
    142a:	8f 90       	pop	r8
    142c:	7f 90       	pop	r7
    142e:	6f 90       	pop	r6
    1430:	5f 90       	pop	r5
    1432:	4f 90       	pop	r4
    1434:	3f 90       	pop	r3
    1436:	2f 90       	pop	r2
    1438:	08 95       	ret

0000143a <wizchip_cris_enter>:
void wizphy_getphystat(wiz_PhyConf* phyconf)
{
   uint8_t tmp = getPHYCFGR();
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}
    143a:	08 95       	ret

0000143c <wizchip_cris_exit>:
    143c:	08 95       	ret

0000143e <wizchip_cs_select>:
    143e:	08 95       	ret

00001440 <wizchip_cs_deselect>:
    1440:	08 95       	ret

00001442 <wizchip_bus_readdata>:
    1442:	fb 01       	movw	r30, r22
    1444:	80 81       	ld	r24, Z
    1446:	08 95       	ret

00001448 <wizchip_bus_writedata>:
    1448:	fb 01       	movw	r30, r22
    144a:	40 83       	st	Z, r20
    144c:	08 95       	ret

0000144e <wizchip_spi_readbyte>:
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	08 95       	ret

00001452 <wizchip_spi_writebyte>:
    1452:	08 95       	ret

00001454 <wizchip_spi_readburst>:
    1454:	08 95       	ret

00001456 <wizchip_spi_writeburst>:
    1456:	08 95       	ret

00001458 <reg_wizchip_cs_cbfunc>:
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	19 f0       	breq	.+6      	; 0x1462 <reg_wizchip_cs_cbfunc+0xa>
    145c:	61 15       	cp	r22, r1
    145e:	71 05       	cpc	r23, r1
    1460:	59 f4       	brne	.+22     	; 0x1478 <reg_wizchip_cs_cbfunc+0x20>
    1462:	e6 e0       	ldi	r30, 0x06	; 6
    1464:	f2 e0       	ldi	r31, 0x02	; 2
    1466:	8f e1       	ldi	r24, 0x1F	; 31
    1468:	9a e0       	ldi	r25, 0x0A	; 10
    146a:	95 87       	std	Z+13, r25	; 0x0d
    146c:	84 87       	std	Z+12, r24	; 0x0c
    146e:	80 e2       	ldi	r24, 0x20	; 32
    1470:	9a e0       	ldi	r25, 0x0A	; 10
    1472:	97 87       	std	Z+15, r25	; 0x0f
    1474:	86 87       	std	Z+14, r24	; 0x0e
    1476:	08 95       	ret
    1478:	e6 e0       	ldi	r30, 0x06	; 6
    147a:	f2 e0       	ldi	r31, 0x02	; 2
    147c:	95 87       	std	Z+13, r25	; 0x0d
    147e:	84 87       	std	Z+12, r24	; 0x0c
    1480:	77 87       	std	Z+15, r23	; 0x0f
    1482:	66 87       	std	Z+14, r22	; 0x0e
    1484:	08 95       	ret

00001486 <reg_wizchip_spi_cbfunc>:
    1486:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <WIZCHIP>
    148a:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <WIZCHIP+0x1>
    148e:	31 ff       	sbrs	r19, 1
    1490:	fa cf       	rjmp	.-12     	; 0x1486 <reg_wizchip_spi_cbfunc>
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	19 f0       	breq	.+6      	; 0x149c <reg_wizchip_spi_cbfunc+0x16>
    1496:	61 15       	cp	r22, r1
    1498:	71 05       	cpc	r23, r1
    149a:	59 f4       	brne	.+22     	; 0x14b2 <reg_wizchip_spi_cbfunc+0x2c>
    149c:	e6 e0       	ldi	r30, 0x06	; 6
    149e:	f2 e0       	ldi	r31, 0x02	; 2
    14a0:	87 e2       	ldi	r24, 0x27	; 39
    14a2:	9a e0       	ldi	r25, 0x0A	; 10
    14a4:	91 8b       	std	Z+17, r25	; 0x11
    14a6:	80 8b       	std	Z+16, r24	; 0x10
    14a8:	89 e2       	ldi	r24, 0x29	; 41
    14aa:	9a e0       	ldi	r25, 0x0A	; 10
    14ac:	93 8b       	std	Z+19, r25	; 0x13
    14ae:	82 8b       	std	Z+18, r24	; 0x12
    14b0:	08 95       	ret
    14b2:	e6 e0       	ldi	r30, 0x06	; 6
    14b4:	f2 e0       	ldi	r31, 0x02	; 2
    14b6:	91 8b       	std	Z+17, r25	; 0x11
    14b8:	80 8b       	std	Z+16, r24	; 0x10
    14ba:	73 8b       	std	Z+19, r23	; 0x13
    14bc:	62 8b       	std	Z+18, r22	; 0x12
    14be:	08 95       	ret

000014c0 <reg_wizchip_spiburst_cbfunc>:
    14c0:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <WIZCHIP>
    14c4:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <WIZCHIP+0x1>
    14c8:	31 ff       	sbrs	r19, 1
    14ca:	fa cf       	rjmp	.-12     	; 0x14c0 <reg_wizchip_spiburst_cbfunc>
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	19 f0       	breq	.+6      	; 0x14d6 <reg_wizchip_spiburst_cbfunc+0x16>
    14d0:	61 15       	cp	r22, r1
    14d2:	71 05       	cpc	r23, r1
    14d4:	59 f4       	brne	.+22     	; 0x14ec <reg_wizchip_spiburst_cbfunc+0x2c>
    14d6:	e6 e0       	ldi	r30, 0x06	; 6
    14d8:	f2 e0       	ldi	r31, 0x02	; 2
    14da:	8a e2       	ldi	r24, 0x2A	; 42
    14dc:	9a e0       	ldi	r25, 0x0A	; 10
    14de:	95 8b       	std	Z+21, r25	; 0x15
    14e0:	84 8b       	std	Z+20, r24	; 0x14
    14e2:	8b e2       	ldi	r24, 0x2B	; 43
    14e4:	9a e0       	ldi	r25, 0x0A	; 10
    14e6:	97 8b       	std	Z+23, r25	; 0x17
    14e8:	86 8b       	std	Z+22, r24	; 0x16
    14ea:	08 95       	ret
    14ec:	e6 e0       	ldi	r30, 0x06	; 6
    14ee:	f2 e0       	ldi	r31, 0x02	; 2
    14f0:	95 8b       	std	Z+21, r25	; 0x15
    14f2:	84 8b       	std	Z+20, r24	; 0x14
    14f4:	77 8b       	std	Z+23, r23	; 0x17
    14f6:	66 8b       	std	Z+22, r22	; 0x16
    14f8:	08 95       	ret

000014fa <wizchip_sw_reset>:
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	62 97       	sbiw	r28, 0x12	; 18
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	26 e0       	ldi	r18, 0x06	; 6
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	ae 01       	movw	r20, r28
    1514:	43 5f       	subi	r20, 0xF3	; 243
    1516:	5f 4f       	sbci	r21, 0xFF	; 255
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	79 e0       	ldi	r23, 0x09	; 9
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	c5 dc       	rcall	.-1654   	; 0xeac <WIZCHIP_READ_BUF>
    1522:	24 e0       	ldi	r18, 0x04	; 4
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	ae 01       	movw	r20, r28
    1528:	4f 5f       	subi	r20, 0xFF	; 255
    152a:	5f 4f       	sbci	r21, 0xFF	; 255
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	71 e0       	ldi	r23, 0x01	; 1
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	bb dc       	rcall	.-1674   	; 0xeac <WIZCHIP_READ_BUF>
    1536:	24 e0       	ldi	r18, 0x04	; 4
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	ae 01       	movw	r20, r28
    153c:	4b 5f       	subi	r20, 0xFB	; 251
    153e:	5f 4f       	sbci	r21, 0xFF	; 255
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	75 e0       	ldi	r23, 0x05	; 5
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	b1 dc       	rcall	.-1694   	; 0xeac <WIZCHIP_READ_BUF>
    154a:	24 e0       	ldi	r18, 0x04	; 4
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	ae 01       	movw	r20, r28
    1550:	47 5f       	subi	r20, 0xF7	; 247
    1552:	5f 4f       	sbci	r21, 0xFF	; 255
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	7f e0       	ldi	r23, 0x0F	; 15
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a7 dc       	rcall	.-1714   	; 0xeac <WIZCHIP_READ_BUF>
    155e:	40 e8       	ldi	r20, 0x80	; 128
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	cb 01       	movw	r24, r22
    1566:	30 dc       	rcall	.-1952   	; 0xdc8 <WIZCHIP_WRITE>
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	cb 01       	movw	r24, r22
    156e:	c5 db       	rcall	.-2166   	; 0xcfa <WIZCHIP_READ>
    1570:	26 e0       	ldi	r18, 0x06	; 6
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	ae 01       	movw	r20, r28
    1576:	43 5f       	subi	r20, 0xF3	; 243
    1578:	5f 4f       	sbci	r21, 0xFF	; 255
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	79 e0       	ldi	r23, 0x09	; 9
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	16 dd       	rcall	.-1492   	; 0xfb0 <WIZCHIP_WRITE_BUF>
    1584:	24 e0       	ldi	r18, 0x04	; 4
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	ae 01       	movw	r20, r28
    158a:	4f 5f       	subi	r20, 0xFF	; 255
    158c:	5f 4f       	sbci	r21, 0xFF	; 255
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	71 e0       	ldi	r23, 0x01	; 1
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0c dd       	rcall	.-1512   	; 0xfb0 <WIZCHIP_WRITE_BUF>
    1598:	24 e0       	ldi	r18, 0x04	; 4
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	ae 01       	movw	r20, r28
    159e:	4b 5f       	subi	r20, 0xFB	; 251
    15a0:	5f 4f       	sbci	r21, 0xFF	; 255
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	75 e0       	ldi	r23, 0x05	; 5
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 dd       	rcall	.-1532   	; 0xfb0 <WIZCHIP_WRITE_BUF>
    15ac:	24 e0       	ldi	r18, 0x04	; 4
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	ae 01       	movw	r20, r28
    15b2:	47 5f       	subi	r20, 0xF7	; 247
    15b4:	5f 4f       	sbci	r21, 0xFF	; 255
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	7f e0       	ldi	r23, 0x0F	; 15
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	f8 dc       	rcall	.-1552   	; 0xfb0 <WIZCHIP_WRITE_BUF>
    15c0:	62 96       	adiw	r28, 0x12	; 18
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	08 95       	ret

000015d2 <wizchip_init>:
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	ec 01       	movw	r28, r24
    15de:	8b 01       	movw	r16, r22
    15e0:	8c df       	rcall	.-232    	; 0x14fa <wizchip_sw_reset>
    15e2:	20 97       	sbiw	r28, 0x00	; 0
    15e4:	69 f4       	brne	.+26     	; 0x1600 <wizchip_init+0x2e>
    15e6:	30 c0       	rjmp	.+96     	; 0x1648 <wizchip_init+0x76>
    15e8:	fe 01       	movw	r30, r28
    15ea:	e8 0f       	add	r30, r24
    15ec:	f1 1d       	adc	r31, r1
    15ee:	87 fd       	sbrc	r24, 7
    15f0:	fa 95       	dec	r31
    15f2:	20 81       	ld	r18, Z
    15f4:	92 0f       	add	r25, r18
    15f6:	91 31       	cpi	r25, 0x11	; 17
    15f8:	0c f0       	brlt	.+2      	; 0x15fc <wizchip_init+0x2a>
    15fa:	5b c0       	rjmp	.+182    	; 0x16b2 <wizchip_init+0xe0>
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <wizchip_init+0x32>
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	88 30       	cpi	r24, 0x08	; 8
    1606:	84 f3       	brlt	.-32     	; 0x15e8 <wizchip_init+0x16>
    1608:	f1 2c       	mov	r15, r1
    160a:	1b c0       	rjmp	.+54     	; 0x1642 <wizchip_init+0x70>
    160c:	6f 2d       	mov	r22, r15
    160e:	0f 2c       	mov	r0, r15
    1610:	00 0c       	add	r0, r0
    1612:	77 0b       	sbc	r23, r23
    1614:	fe 01       	movw	r30, r28
    1616:	e6 0f       	add	r30, r22
    1618:	f7 1f       	adc	r31, r23
    161a:	66 0f       	add	r22, r22
    161c:	77 1f       	adc	r23, r23
    161e:	66 0f       	add	r22, r22
    1620:	77 1f       	adc	r23, r23
    1622:	6f 5f       	subi	r22, 0xFF	; 255
    1624:	7f 4f       	sbci	r23, 0xFF	; 255
    1626:	66 0f       	add	r22, r22
    1628:	77 1f       	adc	r23, r23
    162a:	66 0f       	add	r22, r22
    162c:	77 1f       	adc	r23, r23
    162e:	66 0f       	add	r22, r22
    1630:	77 1f       	adc	r23, r23
    1632:	71 5e       	subi	r23, 0xE1	; 225
    1634:	07 2e       	mov	r0, r23
    1636:	00 0c       	add	r0, r0
    1638:	88 0b       	sbc	r24, r24
    163a:	99 0b       	sbc	r25, r25
    163c:	40 81       	ld	r20, Z
    163e:	c4 db       	rcall	.-2168   	; 0xdc8 <WIZCHIP_WRITE>
    1640:	f3 94       	inc	r15
    1642:	87 e0       	ldi	r24, 0x07	; 7
    1644:	8f 15       	cp	r24, r15
    1646:	14 f7       	brge	.-60     	; 0x160c <wizchip_init+0x3a>
    1648:	01 15       	cp	r16, r1
    164a:	11 05       	cpc	r17, r1
    164c:	69 f4       	brne	.+26     	; 0x1668 <wizchip_init+0x96>
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	33 c0       	rjmp	.+102    	; 0x16b8 <wizchip_init+0xe6>
    1652:	f8 01       	movw	r30, r16
    1654:	e8 0f       	add	r30, r24
    1656:	f1 1d       	adc	r31, r1
    1658:	87 fd       	sbrc	r24, 7
    165a:	fa 95       	dec	r31
    165c:	20 81       	ld	r18, Z
    165e:	92 0f       	add	r25, r18
    1660:	91 31       	cpi	r25, 0x11	; 17
    1662:	4c f5       	brge	.+82     	; 0x16b6 <wizchip_init+0xe4>
    1664:	8f 5f       	subi	r24, 0xFF	; 255
    1666:	02 c0       	rjmp	.+4      	; 0x166c <wizchip_init+0x9a>
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	88 30       	cpi	r24, 0x08	; 8
    166e:	8c f3       	brlt	.-30     	; 0x1652 <wizchip_init+0x80>
    1670:	c0 e0       	ldi	r28, 0x00	; 0
    1672:	1b c0       	rjmp	.+54     	; 0x16aa <wizchip_init+0xd8>
    1674:	6c 2f       	mov	r22, r28
    1676:	0c 2e       	mov	r0, r28
    1678:	00 0c       	add	r0, r0
    167a:	77 0b       	sbc	r23, r23
    167c:	f8 01       	movw	r30, r16
    167e:	e6 0f       	add	r30, r22
    1680:	f7 1f       	adc	r31, r23
    1682:	66 0f       	add	r22, r22
    1684:	77 1f       	adc	r23, r23
    1686:	66 0f       	add	r22, r22
    1688:	77 1f       	adc	r23, r23
    168a:	6f 5f       	subi	r22, 0xFF	; 255
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	66 0f       	add	r22, r22
    1690:	77 1f       	adc	r23, r23
    1692:	66 0f       	add	r22, r22
    1694:	77 1f       	adc	r23, r23
    1696:	66 0f       	add	r22, r22
    1698:	77 1f       	adc	r23, r23
    169a:	72 5e       	subi	r23, 0xE2	; 226
    169c:	07 2e       	mov	r0, r23
    169e:	00 0c       	add	r0, r0
    16a0:	88 0b       	sbc	r24, r24
    16a2:	99 0b       	sbc	r25, r25
    16a4:	40 81       	ld	r20, Z
    16a6:	90 db       	rcall	.-2272   	; 0xdc8 <WIZCHIP_WRITE>
    16a8:	cf 5f       	subi	r28, 0xFF	; 255
    16aa:	c8 30       	cpi	r28, 0x08	; 8
    16ac:	1c f3       	brlt	.-58     	; 0x1674 <wizchip_init+0xa2>
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	03 c0       	rjmp	.+6      	; 0x16b8 <wizchip_init+0xe6>
    16b2:	8f ef       	ldi	r24, 0xFF	; 255
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <wizchip_init+0xe6>
    16b6:	8f ef       	ldi	r24, 0xFF	; 255
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	ff 90       	pop	r15
    16c2:	08 95       	ret

000016c4 <wizchip_clrinterrupt>:
    16c4:	cf 93       	push	r28
    16c6:	c9 2f       	mov	r28, r25
    16c8:	48 2f       	mov	r20, r24
    16ca:	40 7f       	andi	r20, 0xF0	; 240
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	75 e1       	ldi	r23, 0x15	; 21
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	79 db       	rcall	.-2318   	; 0xdc8 <WIZCHIP_WRITE>
    16d6:	4c 2f       	mov	r20, r28
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	77 e1       	ldi	r23, 0x17	; 23
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	73 db       	rcall	.-2330   	; 0xdc8 <WIZCHIP_WRITE>
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <wizchip_getinterrupt>:
    16e6:	cf 93       	push	r28
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	75 e1       	ldi	r23, 0x15	; 21
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	04 db       	rcall	.-2552   	; 0xcfa <WIZCHIP_READ>
    16f2:	c8 2f       	mov	r28, r24
    16f4:	c0 7f       	andi	r28, 0xF0	; 240
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	77 e1       	ldi	r23, 0x17	; 23
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	fd da       	rcall	.-2566   	; 0xcfa <WIZCHIP_READ>
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	98 2f       	mov	r25, r24
    1704:	88 27       	eor	r24, r24
    1706:	8c 0f       	add	r24, r28
    1708:	91 1d       	adc	r25, r1
    170a:	cf 91       	pop	r28
    170c:	08 95       	ret

0000170e <wizchip_setinterruptmask>:
    170e:	cf 93       	push	r28
    1710:	c9 2f       	mov	r28, r25
    1712:	48 2f       	mov	r20, r24
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	76 e1       	ldi	r23, 0x16	; 22
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	55 db       	rcall	.-2390   	; 0xdc8 <WIZCHIP_WRITE>
    171e:	4c 2f       	mov	r20, r28
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	78 e1       	ldi	r23, 0x18	; 24
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	4f db       	rcall	.-2402   	; 0xdc8 <WIZCHIP_WRITE>
    172a:	cf 91       	pop	r28
    172c:	08 95       	ret

0000172e <wizchip_getinterruptmask>:
    172e:	cf 93       	push	r28
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	76 e1       	ldi	r23, 0x16	; 22
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	e0 da       	rcall	.-2624   	; 0xcfa <WIZCHIP_READ>
    173a:	c8 2f       	mov	r28, r24
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	78 e1       	ldi	r23, 0x18	; 24
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	da da       	rcall	.-2636   	; 0xcfa <WIZCHIP_READ>
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	98 2f       	mov	r25, r24
    174a:	88 27       	eor	r24, r24
    174c:	8c 0f       	add	r24, r28
    174e:	91 1d       	adc	r25, r1
    1750:	cf 91       	pop	r28
    1752:	08 95       	ret

00001754 <wizphy_getphylink>:
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	7e e2       	ldi	r23, 0x2E	; 46
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	ce da       	rcall	.-2660   	; 0xcfa <WIZCHIP_READ>
    175e:	80 fd       	sbrc	r24, 0
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <wizphy_getphylink+0x12>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	08 95       	ret
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	08 95       	ret

0000176a <wizphy_getphypmode>:
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	7e e2       	ldi	r23, 0x2E	; 46
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	c3 da       	rcall	.-2682   	; 0xcfa <WIZCHIP_READ>
    1774:	88 73       	andi	r24, 0x38	; 56
    1776:	80 33       	cpi	r24, 0x30	; 48
    1778:	11 f4       	brne	.+4      	; 0x177e <wizphy_getphypmode+0x14>
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	08 95       	ret
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	08 95       	ret

00001782 <wizphy_reset>:
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	7e e2       	ldi	r23, 0x2E	; 46
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	b7 da       	rcall	.-2706   	; 0xcfa <WIZCHIP_READ>
    178c:	48 2f       	mov	r20, r24
    178e:	4f 77       	andi	r20, 0x7F	; 127
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	7e e2       	ldi	r23, 0x2E	; 46
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	17 db       	rcall	.-2514   	; 0xdc8 <WIZCHIP_WRITE>
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	7e e2       	ldi	r23, 0x2E	; 46
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	ab da       	rcall	.-2730   	; 0xcfa <WIZCHIP_READ>
    17a4:	48 2f       	mov	r20, r24
    17a6:	40 68       	ori	r20, 0x80	; 128
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	7e e2       	ldi	r23, 0x2E	; 46
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0b cb       	rjmp	.-2538   	; 0xdc8 <WIZCHIP_WRITE>
    17b2:	08 95       	ret

000017b4 <wizphy_setphyconf>:
    17b4:	fc 01       	movw	r30, r24
    17b6:	80 81       	ld	r24, Z
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	11 f4       	brne	.+4      	; 0x17c0 <wizphy_setphyconf+0xc>
    17bc:	40 e4       	ldi	r20, 0x40	; 64
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <wizphy_setphyconf+0xe>
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	81 81       	ldd	r24, Z+1	; 0x01
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	11 f4       	brne	.+4      	; 0x17cc <wizphy_setphyconf+0x18>
    17c8:	48 63       	ori	r20, 0x38	; 56
    17ca:	0e c0       	rjmp	.+28     	; 0x17e8 <wizphy_setphyconf+0x34>
    17cc:	83 81       	ldd	r24, Z+3	; 0x03
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	39 f4       	brne	.+14     	; 0x17e0 <wizphy_setphyconf+0x2c>
    17d2:	82 81       	ldd	r24, Z+2	; 0x02
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	11 f4       	brne	.+4      	; 0x17dc <wizphy_setphyconf+0x28>
    17d8:	48 61       	ori	r20, 0x18	; 24
    17da:	06 c0       	rjmp	.+12     	; 0x17e8 <wizphy_setphyconf+0x34>
    17dc:	48 60       	ori	r20, 0x08	; 8
    17de:	04 c0       	rjmp	.+8      	; 0x17e8 <wizphy_setphyconf+0x34>
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <wizphy_setphyconf+0x34>
    17e6:	40 61       	ori	r20, 0x10	; 16
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	7e e2       	ldi	r23, 0x2E	; 46
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	eb da       	rcall	.-2602   	; 0xdc8 <WIZCHIP_WRITE>
    17f2:	c7 cf       	rjmp	.-114    	; 0x1782 <wizphy_reset>
    17f4:	08 95       	ret

000017f6 <wizphy_getphyconf>:
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	ec 01       	movw	r28, r24
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	7e e2       	ldi	r23, 0x2E	; 46
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	7a da       	rcall	.-2828   	; 0xcfa <WIZCHIP_READ>
    1806:	86 fb       	bst	r24, 6
    1808:	99 27       	eor	r25, r25
    180a:	90 f9       	bld	r25, 0
    180c:	98 83       	st	Y, r25
    180e:	88 73       	andi	r24, 0x38	; 56
    1810:	80 32       	cpi	r24, 0x20	; 32
    1812:	11 f0       	breq	.+4      	; 0x1818 <wizphy_getphyconf+0x22>
    1814:	88 33       	cpi	r24, 0x38	; 56
    1816:	19 f4       	brne	.+6      	; 0x181e <wizphy_getphyconf+0x28>
    1818:	91 e0       	ldi	r25, 0x01	; 1
    181a:	99 83       	std	Y+1, r25	; 0x01
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <wizphy_getphyconf+0x2a>
    181e:	19 82       	std	Y+1, r1	; 0x01
    1820:	88 31       	cpi	r24, 0x18	; 24
    1822:	21 f0       	breq	.+8      	; 0x182c <wizphy_getphyconf+0x36>
    1824:	80 32       	cpi	r24, 0x20	; 32
    1826:	11 f0       	breq	.+4      	; 0x182c <wizphy_getphyconf+0x36>
    1828:	80 31       	cpi	r24, 0x10	; 16
    182a:	19 f4       	brne	.+6      	; 0x1832 <wizphy_getphyconf+0x3c>
    182c:	91 e0       	ldi	r25, 0x01	; 1
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	01 c0       	rjmp	.+2      	; 0x1834 <wizphy_getphyconf+0x3e>
    1832:	1a 82       	std	Y+2, r1	; 0x02
    1834:	88 31       	cpi	r24, 0x18	; 24
    1836:	21 f0       	breq	.+8      	; 0x1840 <wizphy_getphyconf+0x4a>
    1838:	80 32       	cpi	r24, 0x20	; 32
    183a:	11 f0       	breq	.+4      	; 0x1840 <wizphy_getphyconf+0x4a>
    183c:	88 30       	cpi	r24, 0x08	; 8
    183e:	19 f4       	brne	.+6      	; 0x1846 <wizphy_getphyconf+0x50>
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	8b 83       	std	Y+3, r24	; 0x03
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <wizphy_getphyconf+0x52>
    1846:	1b 82       	std	Y+3, r1	; 0x03
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	08 95       	ret

0000184e <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
    184e:	cf 93       	push	r28
    1850:	c8 2f       	mov	r28, r24
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	7e e2       	ldi	r23, 0x2E	; 46
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	4f da       	rcall	.-2914   	; 0xcfa <WIZCHIP_READ>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    185c:	86 ff       	sbrs	r24, 6
    185e:	1d c0       	rjmp	.+58     	; 0x189a <wizphy_setphypmode+0x4c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
    1860:	87 7c       	andi	r24, 0xC7	; 199
   if( pmode == PHY_POWER_DOWN)
    1862:	c1 30       	cpi	r28, 0x01	; 1
    1864:	19 f4       	brne	.+6      	; 0x186c <wizphy_setphypmode+0x1e>
      tmp |= PHYCFGR_OPMDC_PDOWN;
    1866:	48 2f       	mov	r20, r24
    1868:	40 63       	ori	r20, 0x30	; 48
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <wizphy_setphypmode+0x22>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
    186c:	48 2f       	mov	r20, r24
    186e:	48 63       	ori	r20, 0x38	; 56
   setPHYCFGR(tmp);
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	7e e2       	ldi	r23, 0x2E	; 46
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
   wizphy_reset();
    1878:	a7 da       	rcall	.-2738   	; 0xdc8 <WIZCHIP_WRITE>
    187a:	83 df       	rcall	.-250    	; 0x1782 <wizphy_reset>
   tmp = getPHYCFGR();
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	7e e2       	ldi	r23, 0x2E	; 46
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	3a da       	rcall	.-2956   	; 0xcfa <WIZCHIP_READ>
   if( pmode == PHY_POWER_DOWN)
    1886:	c1 30       	cpi	r28, 0x01	; 1
    1888:	21 f4       	brne	.+8      	; 0x1892 <wizphy_setphypmode+0x44>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    188a:	80 73       	andi	r24, 0x30	; 48
    188c:	41 f4       	brne	.+16     	; 0x189e <wizphy_setphypmode+0x50>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
   }
   return -1;
    188e:	8f ef       	ldi	r24, 0xFF	; 255
    1890:	09 c0       	rjmp	.+18     	; 0x18a4 <wizphy_setphypmode+0x56>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    1892:	88 73       	andi	r24, 0x38	; 56
    1894:	31 f4       	brne	.+12     	; 0x18a2 <wizphy_setphypmode+0x54>
   }
   return -1;
    1896:	8f ef       	ldi	r24, 0xFF	; 255
    1898:	05 c0       	rjmp	.+10     	; 0x18a4 <wizphy_setphypmode+0x56>

int8_t wizphy_setphypmode(uint8_t pmode)
{
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    189a:	8f ef       	ldi	r24, 0xFF	; 255
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <wizphy_setphypmode+0x56>
   setPHYCFGR(tmp);
   wizphy_reset();
   tmp = getPHYCFGR();
   if( pmode == PHY_POWER_DOWN)
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <wizphy_setphypmode+0x56>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    18a2:	80 e0       	ldi	r24, 0x00	; 0
   }
   return -1;
}
    18a4:	cf 91       	pop	r28
    18a6:	08 95       	ret

000018a8 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
    18b0:	00 e0       	ldi	r16, 0x00	; 0
    18b2:	10 e0       	ldi	r17, 0x00	; 0
    18b4:	98 01       	movw	r18, r16
   switch(cwtype)
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	80 31       	cpi	r24, 0x10	; 16
    18ba:	91 05       	cpc	r25, r1
    18bc:	40 f4       	brcc	.+16     	; 0x18ce <ctlwizchip+0x26>
    18be:	eb 01       	movw	r28, r22
    18c0:	fc 01       	movw	r30, r24
    18c2:	88 27       	eor	r24, r24
    18c4:	e6 56       	subi	r30, 0x66	; 102
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ca:	0c 94 50 30 	jmp	0x60a0	; 0x60a0 <__tablejump2__>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
    18ce:	8f ef       	ldi	r24, 0xFF	; 255
    18d0:	71 c0       	rjmp	.+226    	; 0x19b4 <ctlwizchip+0x10c>
#endif
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
    18d2:	13 de       	rcall	.-986    	; 0x14fa <wizchip_sw_reset>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    18d4:	80 e0       	ldi	r24, 0x00	; 0
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
         break;
    18d6:	6e c0       	rjmp	.+220    	; 0x19b4 <ctlwizchip+0x10c>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
    18d8:	cd 2b       	or	r28, r29
    18da:	21 f0       	breq	.+8      	; 0x18e4 <ctlwizchip+0x3c>
         {
            ptmp[0] = (uint8_t*)arg;
    18dc:	8b 01       	movw	r16, r22
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
    18de:	9b 01       	movw	r18, r22
    18e0:	28 5f       	subi	r18, 0xF8	; 248
    18e2:	3f 4f       	sbci	r19, 0xFF	; 255
         }
         return wizchip_init(ptmp[0], ptmp[1]);
    18e4:	b9 01       	movw	r22, r18
    18e6:	c8 01       	movw	r24, r16
    18e8:	74 de       	rcall	.-792    	; 0x15d2 <wizchip_init>
    18ea:	64 c0       	rjmp	.+200    	; 0x19b4 <ctlwizchip+0x10c>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
    18ec:	88 81       	ld	r24, Y
    18ee:	99 81       	ldd	r25, Y+1	; 0x01
    18f0:	e9 de       	rcall	.-558    	; 0x16c4 <wizchip_clrinterrupt>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    18f2:	80 e0       	ldi	r24, 0x00	; 0
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
         }
         return wizchip_init(ptmp[0], ptmp[1]);
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
         break;
    18f4:	5f c0       	rjmp	.+190    	; 0x19b4 <ctlwizchip+0x10c>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
    18f6:	f7 de       	rcall	.-530    	; 0x16e6 <wizchip_getinterrupt>
    18f8:	99 83       	std	Y+1, r25	; 0x01
    18fa:	88 83       	st	Y, r24
    18fc:	80 e0       	ldi	r24, 0x00	; 0
         break;
    18fe:	5a c0       	rjmp	.+180    	; 0x19b4 <ctlwizchip+0x10c>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
    1900:	88 81       	ld	r24, Y
    1902:	99 81       	ldd	r25, Y+1	; 0x01
    1904:	04 df       	rcall	.-504    	; 0x170e <wizchip_setinterruptmask>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    1906:	80 e0       	ldi	r24, 0x00	; 0
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
         break;
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
         break;         
    1908:	55 c0       	rjmp	.+170    	; 0x19b4 <ctlwizchip+0x10c>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
    190a:	11 df       	rcall	.-478    	; 0x172e <wizchip_getinterruptmask>
    190c:	99 83       	std	Y+1, r25	; 0x01
    190e:	88 83       	st	Y, r24
    1910:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    1912:	50 c0       	rjmp	.+160    	; 0x19b4 <ctlwizchip+0x10c>
         break;
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
    1914:	49 81       	ldd	r20, Y+1	; 0x01
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	73 e1       	ldi	r23, 0x13	; 19
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	54 da       	rcall	.-2904   	; 0xdc8 <WIZCHIP_WRITE>
    1920:	48 81       	ld	r20, Y
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	74 e1       	ldi	r23, 0x14	; 20
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	4e da       	rcall	.-2916   	; 0xdc8 <WIZCHIP_WRITE>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    192c:	80 e0       	ldi	r24, 0x00	; 0
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
         break;
    192e:	42 c0       	rjmp	.+132    	; 0x19b4 <ctlwizchip+0x10c>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	73 e1       	ldi	r23, 0x13	; 19
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	e0 d9       	rcall	.-3136   	; 0xcfa <WIZCHIP_READ>
    193a:	08 2f       	mov	r16, r24
    193c:	10 e0       	ldi	r17, 0x00	; 0
    193e:	10 2f       	mov	r17, r16
    1940:	00 27       	eor	r16, r16
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	74 e1       	ldi	r23, 0x14	; 20
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	d7 d9       	rcall	.-3154   	; 0xcfa <WIZCHIP_READ>
    194c:	08 0f       	add	r16, r24
    194e:	11 1d       	adc	r17, r1
    1950:	19 83       	std	Y+1, r17	; 0x01
    1952:	08 83       	st	Y, r16
    1954:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    1956:	2e c0       	rjmp	.+92     	; 0x19b4 <ctlwizchip+0x10c>
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
         break;
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
    1958:	e6 e0       	ldi	r30, 0x06	; 6
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
    195a:	f2 e0       	ldi	r31, 0x02	; 2
    195c:	82 81       	ldd	r24, Z+2	; 0x02
    195e:	88 83       	st	Y, r24
    1960:	83 81       	ldd	r24, Z+3	; 0x03
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
    1962:	89 83       	std	Y+1, r24	; 0x01
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
    1964:	84 81       	ldd	r24, Z+4	; 0x04
    1966:	8a 83       	std	Y+2, r24	; 0x02
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
    1968:	85 81       	ldd	r24, Z+5	; 0x05
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
    196a:	8b 83       	std	Y+3, r24	; 0x03
    196c:	86 81       	ldd	r24, Z+6	; 0x06
         ((uint8_t*)arg)[5] = 0;
    196e:	8c 83       	std	Y+4, r24	; 0x04
         break;
    1970:	1d 82       	std	Y+5, r1	; 0x05
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	1f c0       	rjmp	.+62     	; 0x19b4 <ctlwizchip+0x10c>
         break;
    1976:	05 df       	rcall	.-502    	; 0x1782 <wizphy_reset>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	1c c0       	rjmp	.+56     	; 0x19b4 <ctlwizchip+0x10c>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    197c:	cb 01       	movw	r24, r22
      case CW_RESET_PHY:
         wizphy_reset();
         break;
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
         break;
    197e:	1a df       	rcall	.-460    	; 0x17b4 <wizphy_setphyconf>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	18 c0       	rjmp	.+48     	; 0x19b4 <ctlwizchip+0x10c>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    1984:	cb 01       	movw	r24, r22
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
         break;
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
         break;
    1986:	37 df       	rcall	.-402    	; 0x17f6 <wizphy_getphyconf>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <ctlwizchip+0x10c>
    198c:	88 81       	ld	r24, Y
    198e:	5f df       	rcall	.-322    	; 0x184e <wizphy_setphypmode>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
    1990:	11 c0       	rjmp	.+34     	; 0x19b4 <ctlwizchip+0x10c>
    1992:	eb de       	rcall	.-554    	; 0x176a <wizphy_getphypmode>
         if((int8_t)tmp == -1) return -1;
    1994:	8f 3f       	cpi	r24, 0xFF	; 255
    1996:	59 f0       	breq	.+22     	; 0x19ae <ctlwizchip+0x106>
         *(uint8_t*)arg = tmp;
    1998:	88 83       	st	Y, r24
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    199a:	80 e0       	ldi	r24, 0x00	; 0
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
    199c:	0b c0       	rjmp	.+22     	; 0x19b4 <ctlwizchip+0x10c>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
    199e:	da de       	rcall	.-588    	; 0x1754 <wizphy_getphylink>
    19a0:	8f 3f       	cpi	r24, 0xFF	; 255
         if((int8_t)tmp == -1) return -1;
    19a2:	39 f0       	breq	.+14     	; 0x19b2 <ctlwizchip+0x10a>
    19a4:	88 83       	st	Y, r24
         *(uint8_t*)arg = tmp;
    19a6:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    19a8:	05 c0       	rjmp	.+10     	; 0x19b4 <ctlwizchip+0x10c>
         break;
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
    19aa:	80 e0       	ldi	r24, 0x00	; 0
   #endif      
      default:
         return -1;
   }
   return 0;
    19ac:	03 c0       	rjmp	.+6      	; 0x19b4 <ctlwizchip+0x10c>
    19ae:	8f ef       	ldi	r24, 0xFF	; 255
         return wizphy_setphypmode(*(uint8_t*)arg);
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
         if((int8_t)tmp == -1) return -1;
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <ctlwizchip+0x10c>
    19b2:	8f ef       	ldi	r24, 0xFF	; 255
         *(uint8_t*)arg = tmp;
         break;
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
         if((int8_t)tmp == -1) return -1;
    19b4:	df 91       	pop	r29
   #endif      
      default:
         return -1;
   }
   return 0;
}
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	08 95       	ret

000019be <wizchip_setnetinfo>:
    19be:	cf 93       	push	r28
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    19c0:	df 93       	push	r29
    19c2:	ec 01       	movw	r28, r24
   setSHAR(pnetinfo->mac);
    19c4:	26 e0       	ldi	r18, 0x06	; 6
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	ac 01       	movw	r20, r24
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	79 e0       	ldi	r23, 0x09	; 9
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	ee da       	rcall	.-2596   	; 0xfb0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
    19d4:	ae 01       	movw	r20, r28
    19d6:	42 5f       	subi	r20, 0xF2	; 242
    19d8:	5f 4f       	sbci	r21, 0xFF	; 255
    19da:	24 e0       	ldi	r18, 0x04	; 4
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	71 e0       	ldi	r23, 0x01	; 1
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	e4 da       	rcall	.-2616   	; 0xfb0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
    19e8:	ae 01       	movw	r20, r28
    19ea:	46 5f       	subi	r20, 0xF6	; 246
    19ec:	5f 4f       	sbci	r21, 0xFF	; 255
    19ee:	24 e0       	ldi	r18, 0x04	; 4
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	75 e0       	ldi	r23, 0x05	; 5
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	da da       	rcall	.-2636   	; 0xfb0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
    19fc:	ae 01       	movw	r20, r28
    19fe:	4a 5f       	subi	r20, 0xFA	; 250
    1a00:	5f 4f       	sbci	r21, 0xFF	; 255
    1a02:	24 e0       	ldi	r18, 0x04	; 4
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	60 e0       	ldi	r22, 0x00	; 0
    1a08:	7f e0       	ldi	r23, 0x0F	; 15
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	d0 da       	rcall	.-2656   	; 0xfb0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
    1a10:	8a 89       	ldd	r24, Y+18	; 0x12
    1a12:	ef e2       	ldi	r30, 0x2F	; 47
    1a14:	f4 e0       	ldi	r31, 0x04	; 4
    1a16:	80 83       	st	Z, r24
   _DNS_[1] = pnetinfo->dns[1];
    1a18:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1a:	81 83       	std	Z+1, r24	; 0x01
   _DNS_[2] = pnetinfo->dns[2];
    1a1c:	8c 89       	ldd	r24, Y+20	; 0x14
    1a1e:	82 83       	std	Z+2, r24	; 0x02
   _DNS_[3] = pnetinfo->dns[3];
    1a20:	8d 89       	ldd	r24, Y+21	; 0x15
    1a22:	83 83       	std	Z+3, r24	; 0x03
   _DHCP_   = pnetinfo->dhcp;
    1a24:	8e 89       	ldd	r24, Y+22	; 0x16
    1a26:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <_DHCP_>
}
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	08 95       	ret

00001a30 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	ec 01       	movw	r28, r24
   getSHAR(pnetinfo->mac);
    1a36:	26 e0       	ldi	r18, 0x06	; 6
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	ac 01       	movw	r20, r24
    1a3c:	60 e0       	ldi	r22, 0x00	; 0
    1a3e:	79 e0       	ldi	r23, 0x09	; 9
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	33 da       	rcall	.-2970   	; 0xeac <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
    1a46:	ae 01       	movw	r20, r28
    1a48:	42 5f       	subi	r20, 0xF2	; 242
    1a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4c:	24 e0       	ldi	r18, 0x04	; 4
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	71 e0       	ldi	r23, 0x01	; 1
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	29 da       	rcall	.-2990   	; 0xeac <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
    1a5a:	ae 01       	movw	r20, r28
    1a5c:	46 5f       	subi	r20, 0xF6	; 246
    1a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a60:	24 e0       	ldi	r18, 0x04	; 4
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	75 e0       	ldi	r23, 0x05	; 5
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	1f da       	rcall	.-3010   	; 0xeac <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
    1a6e:	ae 01       	movw	r20, r28
    1a70:	4a 5f       	subi	r20, 0xFA	; 250
    1a72:	5f 4f       	sbci	r21, 0xFF	; 255
    1a74:	24 e0       	ldi	r18, 0x04	; 4
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	7f e0       	ldi	r23, 0x0F	; 15
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	15 da       	rcall	.-3030   	; 0xeac <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
    1a82:	ef e2       	ldi	r30, 0x2F	; 47
    1a84:	f4 e0       	ldi	r31, 0x04	; 4
    1a86:	80 81       	ld	r24, Z
    1a88:	8a 8b       	std	Y+18, r24	; 0x12
   pnetinfo->dns[1]= _DNS_[1];
    1a8a:	81 81       	ldd	r24, Z+1	; 0x01
    1a8c:	8b 8b       	std	Y+19, r24	; 0x13
   pnetinfo->dns[2]= _DNS_[2];
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	8c 8b       	std	Y+20, r24	; 0x14
   pnetinfo->dns[3]= _DNS_[3];
    1a92:	83 81       	ldd	r24, Z+3	; 0x03
    1a94:	8d 8b       	std	Y+21, r24	; 0x15
   pnetinfo->dhcp  = _DHCP_;
    1a96:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <_DHCP_>
    1a9a:	8e 8b       	std	Y+22, r24	; 0x16
}
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	08 95       	ret

00001aa2 <NewMessageData>:
//#include <terminal_io.h>

   
void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessgage)
{
  md->topicName = aTopicName;
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	73 83       	std	Z+3, r23	; 0x03
    1aa6:	62 83       	std	Z+2, r22	; 0x02
  md->message = aMessgage;
    1aa8:	51 83       	std	Z+1, r21	; 0x01
    1aaa:	40 83       	st	Z, r20
    1aac:	08 95       	ret

00001aae <getNextPacketId>:
}

int32_t getNextPacketId(Client *c) 
{
    1aae:	fc 01       	movw	r30, r24
  return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    1ab0:	80 81       	ld	r24, Z
    1ab2:	91 81       	ldd	r25, Z+1	; 0x01
    1ab4:	a2 81       	ldd	r26, Z+2	; 0x02
    1ab6:	b3 81       	ldd	r27, Z+3	; 0x03
    1ab8:	8f 3f       	cpi	r24, 0xFF	; 255
    1aba:	2f ef       	ldi	r18, 0xFF	; 255
    1abc:	92 07       	cpc	r25, r18
    1abe:	a1 05       	cpc	r26, r1
    1ac0:	b1 05       	cpc	r27, r1
    1ac2:	39 f0       	breq	.+14     	; 0x1ad2 <getNextPacketId+0x24>
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	6f 5f       	subi	r22, 0xFF	; 255
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255
    1acc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	04 c0       	rjmp	.+8      	; 0x1ada <getNextPacketId+0x2c>
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	60 83       	st	Z, r22
    1adc:	71 83       	std	Z+1, r23	; 0x01
    1ade:	82 83       	std	Z+2, r24	; 0x02
    1ae0:	93 83       	std	Z+3, r25	; 0x03
}
    1ae2:	08 95       	ret

00001ae4 <sendPacket>:

int32_t sendPacket(Client* c, int32_t length, Timer* timer)
{
    1ae4:	2f 92       	push	r2
    1ae6:	3f 92       	push	r3
    1ae8:	4f 92       	push	r4
    1aea:	5f 92       	push	r5
    1aec:	6f 92       	push	r6
    1aee:	7f 92       	push	r7
    1af0:	8f 92       	push	r8
    1af2:	9f 92       	push	r9
    1af4:	af 92       	push	r10
    1af6:	bf 92       	push	r11
    1af8:	cf 92       	push	r12
    1afa:	df 92       	push	r13
    1afc:	ef 92       	push	r14
    1afe:	ff 92       	push	r15
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	ec 01       	movw	r28, r24
    1b0a:	2a 01       	movw	r4, r20
    1b0c:	3b 01       	movw	r6, r22
    1b0e:	19 01       	movw	r2, r18
  int32_t rc = FAILURE, sent = 0;
    1b10:	81 2c       	mov	r8, r1
    1b12:	91 2c       	mov	r9, r1
    1b14:	54 01       	movw	r10, r8
    
  while (sent < length && !expired(timer))
    1b16:	1a c0       	rjmp	.+52     	; 0x1b4c <sendPacket+0x68>
  {
    rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, left_ms(timer));
    1b18:	ef a5       	ldd	r30, Y+47	; 0x2f
    1b1a:	f8 a9       	ldd	r31, Y+48	; 0x30
    1b1c:	c6 80       	ldd	r12, Z+6	; 0x06
    1b1e:	d7 80       	ldd	r13, Z+7	; 0x07
    1b20:	c1 01       	movw	r24, r2
    1b22:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <left_ms>
    1b26:	7b 01       	movw	r14, r22
    1b28:	8c 01       	movw	r16, r24
    1b2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b2c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b2e:	bc 01       	movw	r22, r24
    1b30:	68 0d       	add	r22, r8
    1b32:	79 1d       	adc	r23, r9
    1b34:	a3 01       	movw	r20, r6
    1b36:	92 01       	movw	r18, r4
    1b38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b3c:	f6 01       	movw	r30, r12
    1b3e:	19 95       	eicall

    if (rc < 0)  // there was an error writing the data
    1b40:	99 23       	and	r25, r25
    1b42:	74 f0       	brlt	.+28     	; 0x1b60 <sendPacket+0x7c>
      break;

    sent += rc;
    1b44:	86 0e       	add	r8, r22
    1b46:	97 1e       	adc	r9, r23
    1b48:	a8 1e       	adc	r10, r24
    1b4a:	b9 1e       	adc	r11, r25

int32_t sendPacket(Client* c, int32_t length, Timer* timer)
{
  int32_t rc = FAILURE, sent = 0;
    
  while (sent < length && !expired(timer))
    1b4c:	84 14       	cp	r8, r4
    1b4e:	95 04       	cpc	r9, r5
    1b50:	a6 04       	cpc	r10, r6
    1b52:	b7 04       	cpc	r11, r7
    1b54:	2c f4       	brge	.+10     	; 0x1b60 <sendPacket+0x7c>
    1b56:	c1 01       	movw	r24, r2
    1b58:	0e 94 0b 1c 	call	0x3816	; 0x3816 <expired>
    1b5c:	88 23       	and	r24, r24
    1b5e:	e1 f2       	breq	.-72     	; 0x1b18 <sendPacket+0x34>
      break;

    sent += rc;
  }
  
  if (sent == length)
    1b60:	84 14       	cp	r8, r4
    1b62:	95 04       	cpc	r9, r5
    1b64:	a6 04       	cpc	r10, r6
    1b66:	b7 04       	cpc	r11, r7
    1b68:	61 f4       	brne	.+24     	; 0x1b82 <sendPacket+0x9e>
  {
    countdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have SUCCESSSfully sent the packet
    1b6a:	48 89       	ldd	r20, Y+16	; 0x10
    1b6c:	59 89       	ldd	r21, Y+17	; 0x11
    1b6e:	6a 89       	ldd	r22, Y+18	; 0x12
    1b70:	7b 89       	ldd	r23, Y+19	; 0x13
    1b72:	ce 01       	movw	r24, r28
    1b74:	c1 96       	adiw	r24, 0x31	; 49
    1b76:	0e 94 49 1c 	call	0x3892	; 0x3892 <countdown>
    rc = SUCCESSS;
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	cb 01       	movw	r24, r22
    1b80:	03 c0       	rjmp	.+6      	; 0x1b88 <sendPacket+0xa4>
  }
  else
    rc = FAILURE;
    1b82:	6f ef       	ldi	r22, 0xFF	; 255
    1b84:	7f ef       	ldi	r23, 0xFF	; 255
    1b86:	cb 01       	movw	r24, r22

  return rc;
}
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
    1b90:	ff 90       	pop	r15
    1b92:	ef 90       	pop	r14
    1b94:	df 90       	pop	r13
    1b96:	cf 90       	pop	r12
    1b98:	bf 90       	pop	r11
    1b9a:	af 90       	pop	r10
    1b9c:	9f 90       	pop	r9
    1b9e:	8f 90       	pop	r8
    1ba0:	7f 90       	pop	r7
    1ba2:	6f 90       	pop	r6
    1ba4:	5f 90       	pop	r5
    1ba6:	4f 90       	pop	r4
    1ba8:	3f 90       	pop	r3
    1baa:	2f 90       	pop	r2
    1bac:	08 95       	ret

00001bae <MQTTClient>:


void MQTTClient(Client* c, Network* network, uint32_t command_timeout_ms, uint8_t* buf, size_t buf_size, uint8_t* readbuf, size_t readbuf_size)
{
    1bae:	4f 92       	push	r4
    1bb0:	5f 92       	push	r5
    1bb2:	6f 92       	push	r6
    1bb4:	7f 92       	push	r7
    1bb6:	af 92       	push	r10
    1bb8:	bf 92       	push	r11
    1bba:	cf 92       	push	r12
    1bbc:	df 92       	push	r13
    1bbe:	ef 92       	push	r14
    1bc0:	ff 92       	push	r15
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	dc 01       	movw	r26, r24
  c->ipstack = network;
    1bc8:	d0 96       	adiw	r26, 0x30	; 48
    1bca:	7c 93       	st	X, r23
    1bcc:	6e 93       	st	-X, r22
    1bce:	9f 97       	sbiw	r26, 0x2f	; 47
    
  for (int32_t i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    1bd0:	41 2c       	mov	r4, r1
    1bd2:	51 2c       	mov	r5, r1
    1bd4:	32 01       	movw	r6, r4
    1bd6:	0e c0       	rjmp	.+28     	; 0x1bf4 <MQTTClient+0x46>
    c->messageHandlers[i].topicFilter = 0;
    1bd8:	f2 01       	movw	r30, r4
    1bda:	ee 0f       	add	r30, r30
    1bdc:	ff 1f       	adc	r31, r31
    1bde:	ee 0f       	add	r30, r30
    1be0:	ff 1f       	adc	r31, r31
    1be2:	ea 0f       	add	r30, r26
    1be4:	fb 1f       	adc	r31, r27
    1be6:	12 8e       	std	Z+26, r1	; 0x1a
    1be8:	11 8e       	std	Z+25, r1	; 0x19

void MQTTClient(Client* c, Network* network, uint32_t command_timeout_ms, uint8_t* buf, size_t buf_size, uint8_t* readbuf, size_t readbuf_size)
{
  c->ipstack = network;
    
  for (int32_t i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    1bea:	8f ef       	ldi	r24, 0xFF	; 255
    1bec:	48 1a       	sub	r4, r24
    1bee:	58 0a       	sbc	r5, r24
    1bf0:	68 0a       	sbc	r6, r24
    1bf2:	78 0a       	sbc	r7, r24
    1bf4:	85 e0       	ldi	r24, 0x05	; 5
    1bf6:	48 16       	cp	r4, r24
    1bf8:	51 04       	cpc	r5, r1
    1bfa:	61 04       	cpc	r6, r1
    1bfc:	71 04       	cpc	r7, r1
    1bfe:	64 f3       	brlt	.-40     	; 0x1bd8 <MQTTClient+0x2a>
    c->messageHandlers[i].topicFilter = 0;
  
  c->command_timeout_ms = command_timeout_ms;
    1c00:	14 96       	adiw	r26, 0x04	; 4
    1c02:	2d 93       	st	X+, r18
    1c04:	3d 93       	st	X+, r19
    1c06:	4d 93       	st	X+, r20
    1c08:	5c 93       	st	X, r21
    1c0a:	17 97       	sbiw	r26, 0x07	; 7
  c->buf = buf;
    1c0c:	1d 96       	adiw	r26, 0x0d	; 13
    1c0e:	1c 93       	st	X, r17
    1c10:	0e 93       	st	-X, r16
    1c12:	1c 97       	sbiw	r26, 0x0c	; 12
  c->buf_size = buf_size;
    1c14:	19 96       	adiw	r26, 0x09	; 9
    1c16:	fc 92       	st	X, r15
    1c18:	ee 92       	st	-X, r14
    1c1a:	18 97       	sbiw	r26, 0x08	; 8
  c->readbuf = readbuf;
    1c1c:	1f 96       	adiw	r26, 0x0f	; 15
    1c1e:	dc 92       	st	X, r13
    1c20:	ce 92       	st	-X, r12
    1c22:	1e 97       	sbiw	r26, 0x0e	; 14
  c->readbuf_size = readbuf_size;
    1c24:	1b 96       	adiw	r26, 0x0b	; 11
    1c26:	bc 92       	st	X, r11
    1c28:	ae 92       	st	-X, r10
    1c2a:	1a 97       	sbiw	r26, 0x0a	; 10
  c->isconnected = 0;
    1c2c:	55 96       	adiw	r26, 0x15	; 21
    1c2e:	1d 92       	st	X+, r1
    1c30:	1d 92       	st	X+, r1
    1c32:	1d 92       	st	X+, r1
    1c34:	1c 92       	st	X, r1
    1c36:	58 97       	sbiw	r26, 0x18	; 24
  c->ping_outstanding = 0;
    1c38:	54 96       	adiw	r26, 0x14	; 20
    1c3a:	1c 92       	st	X, r1
    1c3c:	54 97       	sbiw	r26, 0x14	; 20
  c->defaultMessageHandler = NULL;
    1c3e:	9e 96       	adiw	r26, 0x2e	; 46
    1c40:	1c 92       	st	X, r1
    1c42:	1e 92       	st	-X, r1
    1c44:	9d 97       	sbiw	r26, 0x2d	; 45

  InitTimer(&c->ping_timer);
    1c46:	cd 01       	movw	r24, r26
    1c48:	c1 96       	adiw	r24, 0x31	; 49
    1c4a:	0e 94 92 1c 	call	0x3924	; 0x3924 <InitTimer>
}
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	ff 90       	pop	r15
    1c54:	ef 90       	pop	r14
    1c56:	df 90       	pop	r13
    1c58:	cf 90       	pop	r12
    1c5a:	bf 90       	pop	r11
    1c5c:	af 90       	pop	r10
    1c5e:	7f 90       	pop	r7
    1c60:	6f 90       	pop	r6
    1c62:	5f 90       	pop	r5
    1c64:	4f 90       	pop	r4
    1c66:	08 95       	ret

00001c68 <decodePacket>:


int32_t decodePacket(Client* c, int32_t* value, int32_t timeout)
{
    1c68:	2f 92       	push	r2
    1c6a:	3f 92       	push	r3
    1c6c:	4f 92       	push	r4
    1c6e:	5f 92       	push	r5
    1c70:	6f 92       	push	r6
    1c72:	7f 92       	push	r7
    1c74:	8f 92       	push	r8
    1c76:	9f 92       	push	r9
    1c78:	af 92       	push	r10
    1c7a:	bf 92       	push	r11
    1c7c:	cf 92       	push	r12
    1c7e:	df 92       	push	r13
    1c80:	ef 92       	push	r14
    1c82:	ff 92       	push	r15
    1c84:	0f 93       	push	r16
    1c86:	1f 93       	push	r17
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <decodePacket+0x26>
    1c8e:	1f 92       	push	r1
    1c90:	1f 92       	push	r1
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	1c 01       	movw	r2, r24
    1c98:	6b 01       	movw	r12, r22
    1c9a:	2a 83       	std	Y+2, r18	; 0x02
    1c9c:	3b 83       	std	Y+3, r19	; 0x03
    1c9e:	4c 83       	std	Y+4, r20	; 0x04
    1ca0:	5d 83       	std	Y+5, r21	; 0x05
  uint8_t i;
  int32_t multiplier = 1;
  int32_t len = 0;
  const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;

  *value = 0;
    1ca2:	db 01       	movw	r26, r22
    1ca4:	1d 92       	st	X+, r1
    1ca6:	1d 92       	st	X+, r1
    1ca8:	1d 92       	st	X+, r1
    1caa:	1c 92       	st	X, r1
    1cac:	13 97       	sbiw	r26, 0x03	; 3

int32_t decodePacket(Client* c, int32_t* value, int32_t timeout)
{
  uint8_t i;
  int32_t multiplier = 1;
  int32_t len = 0;
    1cae:	41 2c       	mov	r4, r1
    1cb0:	51 2c       	mov	r5, r1
    1cb2:	32 01       	movw	r6, r4


int32_t decodePacket(Client* c, int32_t* value, int32_t timeout)
{
  uint8_t i;
  int32_t multiplier = 1;
    1cb4:	81 2c       	mov	r8, r1
    1cb6:	91 2c       	mov	r9, r1
    1cb8:	54 01       	movw	r10, r8
    1cba:	83 94       	inc	r8
  *value = 0;
  do
  {
    int32_t rc = MQTTPACKET_READ_ERROR;

    if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    1cbc:	bf ef       	ldi	r27, 0xFF	; 255
    1cbe:	4b 1a       	sub	r4, r27
    1cc0:	5b 0a       	sbc	r5, r27
    1cc2:	6b 0a       	sbc	r6, r27
    1cc4:	7b 0a       	sbc	r7, r27
    1cc6:	e5 e0       	ldi	r30, 0x05	; 5
    1cc8:	4e 16       	cp	r4, r30
    1cca:	51 04       	cpc	r5, r1
    1ccc:	61 04       	cpc	r6, r1
    1cce:	71 04       	cpc	r7, r1
    1cd0:	0c f0       	brlt	.+2      	; 0x1cd4 <decodePacket+0x6c>
    1cd2:	51 c0       	rjmp	.+162    	; 0x1d76 <decodePacket+0x10e>
    {
      rc = MQTTPACKET_READ_ERROR; /* bad data */
        goto exit;
    }

    rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
    1cd4:	d1 01       	movw	r26, r2
    1cd6:	9f 96       	adiw	r26, 0x2f	; 47
    1cd8:	8d 91       	ld	r24, X+
    1cda:	9c 91       	ld	r25, X
    1cdc:	d0 97       	sbiw	r26, 0x30	; 48
    1cde:	dc 01       	movw	r26, r24
    1ce0:	14 96       	adiw	r26, 0x04	; 4
    1ce2:	ed 91       	ld	r30, X+
    1ce4:	fc 91       	ld	r31, X
    1ce6:	15 97       	sbiw	r26, 0x05	; 5
    1ce8:	ea 80       	ldd	r14, Y+2	; 0x02
    1cea:	fb 80       	ldd	r15, Y+3	; 0x03
    1cec:	0c 81       	ldd	r16, Y+4	; 0x04
    1cee:	1d 81       	ldd	r17, Y+5	; 0x05
    1cf0:	21 e0       	ldi	r18, 0x01	; 1
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	be 01       	movw	r22, r28
    1cfa:	6f 5f       	subi	r22, 0xFF	; 255
    1cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfe:	19 95       	eicall
     
    if (rc != 1)
    1d00:	61 30       	cpi	r22, 0x01	; 1
    1d02:	71 05       	cpc	r23, r1
    1d04:	81 05       	cpc	r24, r1
    1d06:	91 05       	cpc	r25, r1
    1d08:	b1 f5       	brne	.+108    	; 0x1d76 <decodePacket+0x10e>
      goto exit;
 
    *value += (i & 127) * multiplier;
    1d0a:	f9 80       	ldd	r15, Y+1	; 0x01
    1d0c:	af 2d       	mov	r26, r15
    1d0e:	af 77       	andi	r26, 0x7F	; 127
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	a5 01       	movw	r20, r10
    1d14:	94 01       	movw	r18, r8
    1d16:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__muluhisi3>
    1d1a:	f6 01       	movw	r30, r12
    1d1c:	00 81       	ld	r16, Z
    1d1e:	11 81       	ldd	r17, Z+1	; 0x01
    1d20:	22 81       	ldd	r18, Z+2	; 0x02
    1d22:	33 81       	ldd	r19, Z+3	; 0x03
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	80 0f       	add	r24, r16
    1d2a:	91 1f       	adc	r25, r17
    1d2c:	a2 1f       	adc	r26, r18
    1d2e:	b3 1f       	adc	r27, r19
    1d30:	80 83       	st	Z, r24
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	a2 83       	std	Z+2, r26	; 0x02
    1d36:	b3 83       	std	Z+3, r27	; 0x03
    multiplier *= 128;
    1d38:	88 0c       	add	r8, r8
    1d3a:	99 1c       	adc	r9, r9
    1d3c:	aa 1c       	adc	r10, r10
    1d3e:	bb 1c       	adc	r11, r11
    1d40:	88 0c       	add	r8, r8
    1d42:	99 1c       	adc	r9, r9
    1d44:	aa 1c       	adc	r10, r10
    1d46:	bb 1c       	adc	r11, r11
    1d48:	88 0c       	add	r8, r8
    1d4a:	99 1c       	adc	r9, r9
    1d4c:	aa 1c       	adc	r10, r10
    1d4e:	bb 1c       	adc	r11, r11
    1d50:	88 0c       	add	r8, r8
    1d52:	99 1c       	adc	r9, r9
    1d54:	aa 1c       	adc	r10, r10
    1d56:	bb 1c       	adc	r11, r11
    1d58:	88 0c       	add	r8, r8
    1d5a:	99 1c       	adc	r9, r9
    1d5c:	aa 1c       	adc	r10, r10
    1d5e:	bb 1c       	adc	r11, r11
    1d60:	88 0c       	add	r8, r8
    1d62:	99 1c       	adc	r9, r9
    1d64:	aa 1c       	adc	r10, r10
    1d66:	bb 1c       	adc	r11, r11
    1d68:	88 0c       	add	r8, r8
    1d6a:	99 1c       	adc	r9, r9
    1d6c:	aa 1c       	adc	r10, r10
    1d6e:	bb 1c       	adc	r11, r11
  } while ((i & 128) != 0);
    1d70:	ff 20       	and	r15, r15
    1d72:	0c f4       	brge	.+2      	; 0x1d76 <decodePacket+0x10e>
    1d74:	a3 cf       	rjmp	.-186    	; 0x1cbc <decodePacket+0x54>
exit:
    return len;
}
    1d76:	c3 01       	movw	r24, r6
    1d78:	b2 01       	movw	r22, r4
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	bf 90       	pop	r11
    1d96:	af 90       	pop	r10
    1d98:	9f 90       	pop	r9
    1d9a:	8f 90       	pop	r8
    1d9c:	7f 90       	pop	r7
    1d9e:	6f 90       	pop	r6
    1da0:	5f 90       	pop	r5
    1da2:	4f 90       	pop	r4
    1da4:	3f 90       	pop	r3
    1da6:	2f 90       	pop	r2
    1da8:	08 95       	ret

00001daa <readPacket>:

int32_t readPacket(Client* c, Timer* timer) 
{
    1daa:	4f 92       	push	r4
    1dac:	5f 92       	push	r5
    1dae:	6f 92       	push	r6
    1db0:	7f 92       	push	r7
    1db2:	8f 92       	push	r8
    1db4:	9f 92       	push	r9
    1db6:	af 92       	push	r10
    1db8:	bf 92       	push	r11
    1dba:	cf 92       	push	r12
    1dbc:	df 92       	push	r13
    1dbe:	ef 92       	push	r14
    1dc0:	ff 92       	push	r15
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <readPacket+0x22>
    1dcc:	1f 92       	push	r1
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
    1dd2:	6c 01       	movw	r12, r24
    1dd4:	5b 01       	movw	r10, r22
  int32_t rc = FAILURE;
  MQTTHeader header = {0};
  int32_t len = 0;
  int32_t rem_len = 0;
    1dd6:	19 82       	std	Y+1, r1	; 0x01
    1dd8:	1a 82       	std	Y+2, r1	; 0x02
    1dda:	1b 82       	std	Y+3, r1	; 0x03
    1ddc:	1c 82       	std	Y+4, r1	; 0x04

  /* 1. read the header byte.  This has the packet type in it */
  if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, left_ms(timer)) != 1)
    1dde:	dc 01       	movw	r26, r24
    1de0:	9f 96       	adiw	r26, 0x2f	; 47
    1de2:	ed 91       	ld	r30, X+
    1de4:	fc 91       	ld	r31, X
    1de6:	d0 97       	sbiw	r26, 0x30	; 48
    1de8:	84 80       	ldd	r8, Z+4	; 0x04
    1dea:	95 80       	ldd	r9, Z+5	; 0x05
    1dec:	cb 01       	movw	r24, r22
    1dee:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <left_ms>
    1df2:	7b 01       	movw	r14, r22
    1df4:	8c 01       	movw	r16, r24
    1df6:	f6 01       	movw	r30, r12
    1df8:	66 85       	ldd	r22, Z+14	; 0x0e
    1dfa:	77 85       	ldd	r23, Z+15	; 0x0f
    1dfc:	21 e0       	ldi	r18, 0x01	; 1
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	50 e0       	ldi	r21, 0x00	; 0
    1e04:	87 a5       	ldd	r24, Z+47	; 0x2f
    1e06:	90 a9       	ldd	r25, Z+48	; 0x30
    1e08:	f4 01       	movw	r30, r8
    1e0a:	19 95       	eicall
    1e0c:	61 30       	cpi	r22, 0x01	; 1
    1e0e:	71 05       	cpc	r23, r1
    1e10:	81 05       	cpc	r24, r1
    1e12:	91 05       	cpc	r25, r1
    1e14:	09 f0       	breq	.+2      	; 0x1e18 <readPacket+0x6e>
    1e16:	54 c0       	rjmp	.+168    	; 0x1ec0 <readPacket+0x116>
    goto exit;

  len = 1;
  /* 2. read the remaining length.  This is variable in itself */
  decodePacket(c, &rem_len, left_ms(timer));
    1e18:	c5 01       	movw	r24, r10
    1e1a:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <left_ms>
    1e1e:	9b 01       	movw	r18, r22
    1e20:	ac 01       	movw	r20, r24
    1e22:	be 01       	movw	r22, r28
    1e24:	6f 5f       	subi	r22, 0xFF	; 255
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255
    1e28:	c6 01       	movw	r24, r12
    1e2a:	1e df       	rcall	.-452    	; 0x1c68 <decodePacket>
  len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
    1e2c:	d6 01       	movw	r26, r12
    1e2e:	1e 96       	adiw	r26, 0x0e	; 14
    1e30:	8d 91       	ld	r24, X+
    1e32:	9c 91       	ld	r25, X
    1e34:	1f 97       	sbiw	r26, 0x0f	; 15
    1e36:	49 81       	ldd	r20, Y+1	; 0x01
    1e38:	5a 81       	ldd	r21, Y+2	; 0x02
    1e3a:	6b 81       	ldd	r22, Y+3	; 0x03
    1e3c:	7c 81       	ldd	r23, Y+4	; 0x04
    1e3e:	01 96       	adiw	r24, 0x01	; 1
    1e40:	fa d7       	rcall	.+4084   	; 0x2e36 <MQTTPacket_encode>
    1e42:	2b 01       	movw	r4, r22
    1e44:	3c 01       	movw	r6, r24
    1e46:	bf ef       	ldi	r27, 0xFF	; 255
    1e48:	4b 1a       	sub	r4, r27
    1e4a:	5b 0a       	sbc	r5, r27
    1e4c:	6b 0a       	sbc	r6, r27
    1e4e:	7b 0a       	sbc	r7, r27

  /* 3. read the rest of the buffer using a callback to supply the rest of the data */
  if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, left_ms(timer)) != rem_len))
    1e50:	49 81       	ldd	r20, Y+1	; 0x01
    1e52:	5a 81       	ldd	r21, Y+2	; 0x02
    1e54:	6b 81       	ldd	r22, Y+3	; 0x03
    1e56:	7c 81       	ldd	r23, Y+4	; 0x04
    1e58:	14 16       	cp	r1, r20
    1e5a:	15 06       	cpc	r1, r21
    1e5c:	16 06       	cpc	r1, r22
    1e5e:	17 06       	cpc	r1, r23
    1e60:	1c f5       	brge	.+70     	; 0x1ea8 <readPacket+0xfe>
    1e62:	d6 01       	movw	r26, r12
    1e64:	9f 96       	adiw	r26, 0x2f	; 47
    1e66:	ed 91       	ld	r30, X+
    1e68:	fc 91       	ld	r31, X
    1e6a:	d0 97       	sbiw	r26, 0x30	; 48
    1e6c:	84 80       	ldd	r8, Z+4	; 0x04
    1e6e:	95 80       	ldd	r9, Z+5	; 0x05
    1e70:	c5 01       	movw	r24, r10
    1e72:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <left_ms>
    1e76:	7b 01       	movw	r14, r22
    1e78:	8c 01       	movw	r16, r24
    1e7a:	f6 01       	movw	r30, r12
    1e7c:	86 85       	ldd	r24, Z+14	; 0x0e
    1e7e:	97 85       	ldd	r25, Z+15	; 0x0f
    1e80:	29 81       	ldd	r18, Y+1	; 0x01
    1e82:	3a 81       	ldd	r19, Y+2	; 0x02
    1e84:	4b 81       	ldd	r20, Y+3	; 0x03
    1e86:	5c 81       	ldd	r21, Y+4	; 0x04
    1e88:	bc 01       	movw	r22, r24
    1e8a:	64 0d       	add	r22, r4
    1e8c:	75 1d       	adc	r23, r5
    1e8e:	87 a5       	ldd	r24, Z+47	; 0x2f
    1e90:	90 a9       	ldd	r25, Z+48	; 0x30
    1e92:	f4 01       	movw	r30, r8
    1e94:	19 95       	eicall
    1e96:	09 81       	ldd	r16, Y+1	; 0x01
    1e98:	1a 81       	ldd	r17, Y+2	; 0x02
    1e9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9e:	60 17       	cp	r22, r16
    1ea0:	71 07       	cpc	r23, r17
    1ea2:	82 07       	cpc	r24, r18
    1ea4:	93 07       	cpc	r25, r19
    1ea6:	81 f4       	brne	.+32     	; 0x1ec8 <readPacket+0x11e>
    goto exit;

  header.byte = c->readbuf[0];
    1ea8:	d6 01       	movw	r26, r12
    1eaa:	1e 96       	adiw	r26, 0x0e	; 14
    1eac:	ed 91       	ld	r30, X+
    1eae:	fc 91       	ld	r31, X
    1eb0:	1f 97       	sbiw	r26, 0x0f	; 15
    1eb2:	60 81       	ld	r22, Z
  rc = header.bits.type;
    1eb4:	62 95       	swap	r22
    1eb6:	6f 70       	andi	r22, 0x0F	; 15
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	07 c0       	rjmp	.+14     	; 0x1ece <readPacket+0x124>
    return len;
}

int32_t readPacket(Client* c, Timer* timer) 
{
  int32_t rc = FAILURE;
    1ec0:	6f ef       	ldi	r22, 0xFF	; 255
    1ec2:	7f ef       	ldi	r23, 0xFF	; 255
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	03 c0       	rjmp	.+6      	; 0x1ece <readPacket+0x124>
    1ec8:	6f ef       	ldi	r22, 0xFF	; 255
    1eca:	7f ef       	ldi	r23, 0xFF	; 255
    1ecc:	cb 01       	movw	r24, r22

  header.byte = c->readbuf[0];
  rc = header.bits.type;
exit:
  return rc;
}
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	1f 91       	pop	r17
    1edc:	0f 91       	pop	r16
    1ede:	ff 90       	pop	r15
    1ee0:	ef 90       	pop	r14
    1ee2:	df 90       	pop	r13
    1ee4:	cf 90       	pop	r12
    1ee6:	bf 90       	pop	r11
    1ee8:	af 90       	pop	r10
    1eea:	9f 90       	pop	r9
    1eec:	8f 90       	pop	r8
    1eee:	7f 90       	pop	r7
    1ef0:	6f 90       	pop	r6
    1ef2:	5f 90       	pop	r5
    1ef4:	4f 90       	pop	r4
    1ef6:	08 95       	ret

00001ef8 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	ec 01       	movw	r28, r24
  char* curf = topicFilter;
  char* curn = topicName->lenstring.data;
    1efe:	db 01       	movw	r26, r22
    1f00:	16 96       	adiw	r26, 0x06	; 6
    1f02:	ed 91       	ld	r30, X+
    1f04:	fc 91       	ld	r31, X
    1f06:	17 97       	sbiw	r26, 0x07	; 7
  char* curn_end = curn + topicName->lenstring.len;
    1f08:	12 96       	adiw	r26, 0x02	; 2
    1f0a:	4d 91       	ld	r20, X+
    1f0c:	5d 91       	ld	r21, X+
    1f0e:	6d 91       	ld	r22, X+
    1f10:	7c 91       	ld	r23, X
    1f12:	15 97       	sbiw	r26, 0x05	; 5
    1f14:	4e 0f       	add	r20, r30
    1f16:	5f 1f       	adc	r21, r31
    
  while (*curf && curn < curn_end)
    1f18:	20 c0       	rjmp	.+64     	; 0x1f5a <isTopicMatched+0x62>
  {
    if (*curn == '/' && *curf != '/')
    1f1a:	80 81       	ld	r24, Z
    1f1c:	8f 32       	cpi	r24, 0x2F	; 47
    1f1e:	11 f4       	brne	.+4      	; 0x1f24 <isTopicMatched+0x2c>
    1f20:	9f 32       	cpi	r25, 0x2F	; 47
    1f22:	09 f5       	brne	.+66     	; 0x1f66 <isTopicMatched+0x6e>
      break;
  
    if (*curf != '+' && *curf != '#' && *curf != *curn)
    1f24:	9b 32       	cpi	r25, 0x2B	; 43
    1f26:	21 f0       	breq	.+8      	; 0x1f30 <isTopicMatched+0x38>
    1f28:	93 32       	cpi	r25, 0x23	; 35
    1f2a:	11 f0       	breq	.+4      	; 0x1f30 <isTopicMatched+0x38>
    1f2c:	98 13       	cpse	r25, r24
    1f2e:	1b c0       	rjmp	.+54     	; 0x1f66 <isTopicMatched+0x6e>
      break;
  
    if (*curf == '+')
    1f30:	9b 32       	cpi	r25, 0x2B	; 43
    1f32:	69 f4       	brne	.+26     	; 0x1f4e <isTopicMatched+0x56>
    {   // skip until we meet the next separator, or end of string
      char* nextpos = curn + 1;
    1f34:	df 01       	movw	r26, r30
    1f36:	11 96       	adiw	r26, 0x01	; 1
  
      while (nextpos < curn_end && *nextpos != '/')
    1f38:	03 c0       	rjmp	.+6      	; 0x1f40 <isTopicMatched+0x48>
        nextpos = ++curn + 1;
    1f3a:	31 96       	adiw	r30, 0x01	; 1
    1f3c:	df 01       	movw	r26, r30
    1f3e:	11 96       	adiw	r26, 0x01	; 1
  
    if (*curf == '+')
    {   // skip until we meet the next separator, or end of string
      char* nextpos = curn + 1;
  
      while (nextpos < curn_end && *nextpos != '/')
    1f40:	a4 17       	cp	r26, r20
    1f42:	b5 07       	cpc	r27, r21
    1f44:	40 f4       	brcc	.+16     	; 0x1f56 <isTopicMatched+0x5e>
    1f46:	9c 91       	ld	r25, X
    1f48:	9f 32       	cpi	r25, 0x2F	; 47
    1f4a:	b9 f7       	brne	.-18     	; 0x1f3a <isTopicMatched+0x42>
    1f4c:	04 c0       	rjmp	.+8      	; 0x1f56 <isTopicMatched+0x5e>
        nextpos = ++curn + 1;
    }
    else if (*curf == '#')
    1f4e:	93 32       	cpi	r25, 0x23	; 35
    1f50:	11 f4       	brne	.+4      	; 0x1f56 <isTopicMatched+0x5e>
      curn = curn_end - 1;    // skip until end of string
    1f52:	fa 01       	movw	r30, r20
    1f54:	31 97       	sbiw	r30, 0x01	; 1
  
    curf++;
    1f56:	21 96       	adiw	r28, 0x01	; 1
    curn++;
    1f58:	31 96       	adiw	r30, 0x01	; 1
{
  char* curf = topicFilter;
  char* curn = topicName->lenstring.data;
  char* curn_end = curn + topicName->lenstring.len;
    
  while (*curf && curn < curn_end)
    1f5a:	98 81       	ld	r25, Y
    1f5c:	99 23       	and	r25, r25
    1f5e:	19 f0       	breq	.+6      	; 0x1f66 <isTopicMatched+0x6e>
    1f60:	e4 17       	cp	r30, r20
    1f62:	f5 07       	cpc	r31, r21
    1f64:	d0 f2       	brcs	.-76     	; 0x1f1a <isTopicMatched+0x22>
  
    curf++;
    curn++;
  }
    
  return (curn == curn_end) && (*curf == '\0');
    1f66:	e4 17       	cp	r30, r20
    1f68:	f5 07       	cpc	r31, r21
    1f6a:	21 f4       	brne	.+8      	; 0x1f74 <isTopicMatched+0x7c>
    1f6c:	99 23       	and	r25, r25
    1f6e:	21 f0       	breq	.+8      	; 0x1f78 <isTopicMatched+0x80>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	03 c0       	rjmp	.+6      	; 0x1f7a <isTopicMatched+0x82>
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	01 c0       	rjmp	.+2      	; 0x1f7a <isTopicMatched+0x82>
    1f78:	81 e0       	ldi	r24, 0x01	; 1
}
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	08 95       	ret

00001f80 <deliverMessage>:

int32_t deliverMessage(Client* c, MQTTString* topicName, MQTTMessage* message)
{
    1f80:	4f 92       	push	r4
    1f82:	5f 92       	push	r5
    1f84:	6f 92       	push	r6
    1f86:	7f 92       	push	r7
    1f88:	8f 92       	push	r8
    1f8a:	9f 92       	push	r9
    1f8c:	af 92       	push	r10
    1f8e:	bf 92       	push	r11
    1f90:	cf 92       	push	r12
    1f92:	df 92       	push	r13
    1f94:	ef 92       	push	r14
    1f96:	ff 92       	push	r15
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <deliverMessage+0x22>
    1fa2:	1f 92       	push	r1
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	8c 01       	movw	r16, r24
    1faa:	7b 01       	movw	r14, r22
    1fac:	6a 01       	movw	r12, r20
  int32_t rc = FAILURE;

  // we have to find the right message handler - indexed by topic
  for (int32_t i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    1fae:	41 2c       	mov	r4, r1
    1fb0:	51 2c       	mov	r5, r1
    1fb2:	32 01       	movw	r6, r4
  return (curn == curn_end) && (*curf == '\0');
}

int32_t deliverMessage(Client* c, MQTTString* topicName, MQTTMessage* message)
{
  int32_t rc = FAILURE;
    1fb4:	88 24       	eor	r8, r8
    1fb6:	8a 94       	dec	r8
    1fb8:	98 2c       	mov	r9, r8
    1fba:	54 01       	movw	r10, r8

  // we have to find the right message handler - indexed by topic
  for (int32_t i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    1fbc:	45 c0       	rjmp	.+138    	; 0x2048 <__EEPROM_REGION_LENGTH__+0x48>
  {
    if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
    1fbe:	f2 01       	movw	r30, r4
    1fc0:	ee 0f       	add	r30, r30
    1fc2:	ff 1f       	adc	r31, r31
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	e0 0f       	add	r30, r16
    1fca:	f1 1f       	adc	r31, r17
    1fcc:	61 8d       	ldd	r22, Z+25	; 0x19
    1fce:	72 8d       	ldd	r23, Z+26	; 0x1a
    1fd0:	61 15       	cp	r22, r1
    1fd2:	71 05       	cpc	r23, r1
    1fd4:	a1 f1       	breq	.+104    	; 0x203e <__EEPROM_REGION_LENGTH__+0x3e>
    1fd6:	c7 01       	movw	r24, r14
    1fd8:	0e 94 69 19 	call	0x32d2	; 0x32d2 <MQTTPacket_equals>
    1fdc:	67 2b       	or	r22, r23
    1fde:	68 2b       	or	r22, r24
    1fe0:	69 2b       	or	r22, r25
    1fe2:	69 f4       	brne	.+26     	; 0x1ffe <deliverMessage+0x7e>
        isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
    1fe4:	f2 01       	movw	r30, r4
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	e0 0f       	add	r30, r16
    1ff0:	f1 1f       	adc	r31, r17
    1ff2:	b7 01       	movw	r22, r14
    1ff4:	81 8d       	ldd	r24, Z+25	; 0x19
    1ff6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ff8:	7f df       	rcall	.-258    	; 0x1ef8 <isTopicMatched>
  int32_t rc = FAILURE;

  // we have to find the right message handler - indexed by topic
  for (int32_t i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
  {
    if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
    1ffa:	88 23       	and	r24, r24
    1ffc:	01 f1       	breq	.+64     	; 0x203e <__EEPROM_REGION_LENGTH__+0x3e>
        isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
    {
      if (c->messageHandlers[i].fp != NULL)
    1ffe:	f2 01       	movw	r30, r4
    2000:	ee 0f       	add	r30, r30
    2002:	ff 1f       	adc	r31, r31
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	e0 0f       	add	r30, r16
    200a:	f1 1f       	adc	r31, r17
    200c:	83 8d       	ldd	r24, Z+27	; 0x1b
    200e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2010:	89 2b       	or	r24, r25
    2012:	a9 f0       	breq	.+42     	; 0x203e <__EEPROM_REGION_LENGTH__+0x3e>
      {
        MessageData md;
        NewMessageData(&md, topicName, message);
    2014:	a6 01       	movw	r20, r12
    2016:	b7 01       	movw	r22, r14
    2018:	ce 01       	movw	r24, r28
    201a:	01 96       	adiw	r24, 0x01	; 1
    201c:	42 dd       	rcall	.-1404   	; 0x1aa2 <NewMessageData>
        c->messageHandlers[i].fp(&md);
    201e:	f2 01       	movw	r30, r4
    2020:	ee 0f       	add	r30, r30
    2022:	ff 1f       	adc	r31, r31
    2024:	ee 0f       	add	r30, r30
    2026:	ff 1f       	adc	r31, r31
    2028:	e0 0f       	add	r30, r16
    202a:	f1 1f       	adc	r31, r17
    202c:	03 8c       	ldd	r0, Z+27	; 0x1b
    202e:	f4 8d       	ldd	r31, Z+28	; 0x1c
    2030:	e0 2d       	mov	r30, r0
    2032:	ce 01       	movw	r24, r28
    2034:	01 96       	adiw	r24, 0x01	; 1
    2036:	19 95       	eicall
        rc = SUCCESSS;
    2038:	81 2c       	mov	r8, r1
    203a:	91 2c       	mov	r9, r1
    203c:	54 01       	movw	r10, r8
int32_t deliverMessage(Client* c, MQTTString* topicName, MQTTMessage* message)
{
  int32_t rc = FAILURE;

  // we have to find the right message handler - indexed by topic
  for (int32_t i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    203e:	8f ef       	ldi	r24, 0xFF	; 255
    2040:	48 1a       	sub	r4, r24
    2042:	58 0a       	sbc	r5, r24
    2044:	68 0a       	sbc	r6, r24
    2046:	78 0a       	sbc	r7, r24
    2048:	a5 e0       	ldi	r26, 0x05	; 5
    204a:	4a 16       	cp	r4, r26
    204c:	51 04       	cpc	r5, r1
    204e:	61 04       	cpc	r6, r1
    2050:	71 04       	cpc	r7, r1
    2052:	0c f4       	brge	.+2      	; 0x2056 <__EEPROM_REGION_LENGTH__+0x56>
    2054:	b4 cf       	rjmp	.-152    	; 0x1fbe <deliverMessage+0x3e>
        rc = SUCCESSS;
      }
    }
  }
    
  if (rc == FAILURE && c->defaultMessageHandler != NULL) 
    2056:	bf ef       	ldi	r27, 0xFF	; 255
    2058:	8b 16       	cp	r8, r27
    205a:	9b 06       	cpc	r9, r27
    205c:	ab 06       	cpc	r10, r27
    205e:	bb 06       	cpc	r11, r27
    2060:	a9 f4       	brne	.+42     	; 0x208c <__EEPROM_REGION_LENGTH__+0x8c>
    2062:	f8 01       	movw	r30, r16
    2064:	85 a5       	ldd	r24, Z+45	; 0x2d
    2066:	96 a5       	ldd	r25, Z+46	; 0x2e
    2068:	89 2b       	or	r24, r25
    206a:	81 f0       	breq	.+32     	; 0x208c <__EEPROM_REGION_LENGTH__+0x8c>
  {
    MessageData md;
    NewMessageData(&md, topicName, message);
    206c:	a6 01       	movw	r20, r12
    206e:	b7 01       	movw	r22, r14
    2070:	ce 01       	movw	r24, r28
    2072:	01 96       	adiw	r24, 0x01	; 1
    2074:	16 dd       	rcall	.-1492   	; 0x1aa2 <NewMessageData>
    c->defaultMessageHandler(&md);
    2076:	d8 01       	movw	r26, r16
    2078:	9d 96       	adiw	r26, 0x2d	; 45
    207a:	ed 91       	ld	r30, X+
    207c:	fc 91       	ld	r31, X
    207e:	9e 97       	sbiw	r26, 0x2e	; 46
    2080:	ce 01       	movw	r24, r28
    2082:	01 96       	adiw	r24, 0x01	; 1
    2084:	19 95       	eicall
    rc = SUCCESSS;
    2086:	81 2c       	mov	r8, r1
    2088:	91 2c       	mov	r9, r1
    208a:	54 01       	movw	r10, r8
  }   
    
  return rc;
}
    208c:	c5 01       	movw	r24, r10
    208e:	b4 01       	movw	r22, r8
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	1f 91       	pop	r17
    209e:	0f 91       	pop	r16
    20a0:	ff 90       	pop	r15
    20a2:	ef 90       	pop	r14
    20a4:	df 90       	pop	r13
    20a6:	cf 90       	pop	r12
    20a8:	bf 90       	pop	r11
    20aa:	af 90       	pop	r10
    20ac:	9f 90       	pop	r9
    20ae:	8f 90       	pop	r8
    20b0:	7f 90       	pop	r7
    20b2:	6f 90       	pop	r6
    20b4:	5f 90       	pop	r5
    20b6:	4f 90       	pop	r4
    20b8:	08 95       	ret

000020ba <keepalive>:

int32_t keepalive(Client* c)
{
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	28 97       	sbiw	r28, 0x08	; 8
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
  int32_t rc = FAILURE;
  
  if (c->keepAliveInterval == 0)
    20d2:	fc 01       	movw	r30, r24
    20d4:	40 89       	ldd	r20, Z+16	; 0x10
    20d6:	51 89       	ldd	r21, Z+17	; 0x11
    20d8:	62 89       	ldd	r22, Z+18	; 0x12
    20da:	73 89       	ldd	r23, Z+19	; 0x13
    20dc:	45 2b       	or	r20, r21
    20de:	46 2b       	or	r20, r22
    20e0:	47 2b       	or	r20, r23
    20e2:	b9 f1       	breq	.+110    	; 0x2152 <keepalive+0x98>
    20e4:	8c 01       	movw	r16, r24
  {
    rc = SUCCESSS;
    goto exit;
  }

  if (expired(&c->ping_timer))
    20e6:	c1 96       	adiw	r24, 0x31	; 49
    20e8:	0e 94 0b 1c 	call	0x3816	; 0x3816 <expired>
    20ec:	88 23       	and	r24, r24
    20ee:	a9 f1       	breq	.+106    	; 0x215a <keepalive+0xa0>
  {
    if (!c->ping_outstanding)
    20f0:	f8 01       	movw	r30, r16
    20f2:	84 89       	ldd	r24, Z+20	; 0x14
    20f4:	81 11       	cpse	r24, r1
    20f6:	35 c0       	rjmp	.+106    	; 0x2162 <keepalive+0xa8>
    {
      Timer timer;
      InitTimer(&timer);
    20f8:	ce 01       	movw	r24, r28
    20fa:	01 96       	adiw	r24, 0x01	; 1
    20fc:	0e 94 92 1c 	call	0x3924	; 0x3924 <InitTimer>
      countdown_ms(&timer, 1000);
    2100:	48 ee       	ldi	r20, 0xE8	; 232
    2102:	53 e0       	ldi	r21, 0x03	; 3
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	ce 01       	movw	r24, r28
    210a:	01 96       	adiw	r24, 0x01	; 1
    210c:	0e 94 2c 1c 	call	0x3858	; 0x3858 <countdown_ms>
      int32_t len = MQTTSerialize_pingreq(c->buf, c->buf_size);
    2110:	f8 01       	movw	r30, r16
    2112:	40 85       	ldd	r20, Z+8	; 0x08
    2114:	51 85       	ldd	r21, Z+9	; 0x09
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	70 e0       	ldi	r23, 0x00	; 0
    211a:	84 85       	ldd	r24, Z+12	; 0x0c
    211c:	95 85       	ldd	r25, Z+13	; 0x0d
    211e:	7f d5       	rcall	.+2814   	; 0x2c1e <MQTTSerialize_pingreq>
      
      if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
    2120:	16 16       	cp	r1, r22
    2122:	17 06       	cpc	r1, r23
    2124:	18 06       	cpc	r1, r24
    2126:	19 06       	cpc	r1, r25
    2128:	84 f4       	brge	.+32     	; 0x214a <keepalive+0x90>
    212a:	9e 01       	movw	r18, r28
    212c:	2f 5f       	subi	r18, 0xFF	; 255
    212e:	3f 4f       	sbci	r19, 0xFF	; 255
    2130:	ab 01       	movw	r20, r22
    2132:	bc 01       	movw	r22, r24
    2134:	c8 01       	movw	r24, r16
    2136:	d6 dc       	rcall	.-1620   	; 0x1ae4 <sendPacket>
    2138:	61 15       	cp	r22, r1
    213a:	71 05       	cpc	r23, r1
    213c:	81 05       	cpc	r24, r1
    213e:	91 05       	cpc	r25, r1
    2140:	99 f4       	brne	.+38     	; 0x2168 <keepalive+0xae>
        c->ping_outstanding = 1;
    2142:	21 e0       	ldi	r18, 0x01	; 1
    2144:	f8 01       	movw	r30, r16
    2146:	24 8b       	std	Z+20, r18	; 0x14
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <keepalive+0xae>
  return rc;
}

int32_t keepalive(Client* c)
{
  int32_t rc = FAILURE;
    214a:	6f ef       	ldi	r22, 0xFF	; 255
    214c:	7f ef       	ldi	r23, 0xFF	; 255
    214e:	cb 01       	movw	r24, r22
    2150:	0b c0       	rjmp	.+22     	; 0x2168 <keepalive+0xae>
  
  if (c->keepAliveInterval == 0)
  {
    rc = SUCCESSS;
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	cb 01       	movw	r24, r22
    2158:	07 c0       	rjmp	.+14     	; 0x2168 <keepalive+0xae>
  return rc;
}

int32_t keepalive(Client* c)
{
  int32_t rc = FAILURE;
    215a:	6f ef       	ldi	r22, 0xFF	; 255
    215c:	7f ef       	ldi	r23, 0xFF	; 255
    215e:	cb 01       	movw	r24, r22
    2160:	03 c0       	rjmp	.+6      	; 0x2168 <keepalive+0xae>
    2162:	6f ef       	ldi	r22, 0xFF	; 255
    2164:	7f ef       	ldi	r23, 0xFF	; 255
    2166:	cb 01       	movw	r24, r22
    }
  }

exit:
  return rc;
}
    2168:	28 96       	adiw	r28, 0x08	; 8
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	1f 91       	pop	r17
    217a:	0f 91       	pop	r16
    217c:	08 95       	ret

0000217e <cycle>:

int32_t cycle(Client* c, Timer* timer)
{
    217e:	2f 92       	push	r2
    2180:	3f 92       	push	r3
    2182:	4f 92       	push	r4
    2184:	5f 92       	push	r5
    2186:	6f 92       	push	r6
    2188:	7f 92       	push	r7
    218a:	8f 92       	push	r8
    218c:	9f 92       	push	r9
    218e:	af 92       	push	r10
    2190:	bf 92       	push	r11
    2192:	cf 92       	push	r12
    2194:	df 92       	push	r13
    2196:	ef 92       	push	r14
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	62 97       	sbiw	r28, 0x12	; 18
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	4c 01       	movw	r8, r24
    21b4:	1b 01       	movw	r2, r22
  // read the socket, see what work is due
  uint16_t packet_type = readPacket(c, timer);
    21b6:	f9 dd       	rcall	.-1038   	; 0x1daa <readPacket>
    21b8:	2b 01       	movw	r4, r22
    21ba:	3c 01       	movw	r6, r24
    
  int32_t len = 0, rc = SUCCESSS;

  switch (packet_type)
    21bc:	65 30       	cpi	r22, 0x05	; 5
    21be:	71 05       	cpc	r23, r1
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <cycle+0x46>
    21c2:	7f c0       	rjmp	.+254    	; 0x22c2 <cycle+0x144>
    21c4:	6d 30       	cpi	r22, 0x0D	; 13
    21c6:	71 05       	cpc	r23, r1
    21c8:	09 f4       	brne	.+2      	; 0x21cc <cycle+0x4e>
    21ca:	c3 c0       	rjmp	.+390    	; 0x2352 <cycle+0x1d4>
    21cc:	63 30       	cpi	r22, 0x03	; 3
    21ce:	71 05       	cpc	r23, r1
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <cycle+0x56>
    21d2:	c5 c0       	rjmp	.+394    	; 0x235e <cycle+0x1e0>
      {
        MQTTString topicName;
        MQTTMessage msg;
      
        if (MQTTDeserialize_publish((uint8_t*)&msg.dup, (uint8_t*)&msg.qos, (uint8_t*)&msg.retained, (uint16_t*)&msg.id, &topicName,
               (uint8_t**)&msg.payload, (int32_t*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
    21d4:	f4 01       	movw	r30, r8
    21d6:	82 85       	ldd	r24, Z+10	; 0x0a
    21d8:	93 85       	ldd	r25, Z+11	; 0x0b
    case PUBLISH:
      {
        MQTTString topicName;
        MQTTMessage msg;
      
        if (MQTTDeserialize_publish((uint8_t*)&msg.dup, (uint8_t*)&msg.qos, (uint8_t*)&msg.retained, (uint16_t*)&msg.id, &topicName,
    21da:	a6 84       	ldd	r10, Z+14	; 0x0e
    21dc:	b7 84       	ldd	r11, Z+15	; 0x0f
    21de:	1f 92       	push	r1
    21e0:	1f 92       	push	r1
    21e2:	9f 93       	push	r25
    21e4:	8f 93       	push	r24
    21e6:	ce 01       	movw	r24, r28
    21e8:	08 96       	adiw	r24, 0x08	; 8
    21ea:	6c 01       	movw	r12, r24
    21ec:	fe 01       	movw	r30, r28
    21ee:	36 96       	adiw	r30, 0x06	; 6
    21f0:	7f 01       	movw	r14, r30
    21f2:	8e 01       	movw	r16, r28
    21f4:	06 5f       	subi	r16, 0xF6	; 246
    21f6:	1f 4f       	sbci	r17, 0xFF	; 255
    21f8:	9e 01       	movw	r18, r28
    21fa:	2c 5f       	subi	r18, 0xFC	; 252
    21fc:	3f 4f       	sbci	r19, 0xFF	; 255
    21fe:	ae 01       	movw	r20, r28
    2200:	4e 5f       	subi	r20, 0xFE	; 254
    2202:	5f 4f       	sbci	r21, 0xFF	; 255
    2204:	be 01       	movw	r22, r28
    2206:	6f 5f       	subi	r22, 0xFF	; 255
    2208:	7f 4f       	sbci	r23, 0xFF	; 255
    220a:	05 97       	sbiw	r24, 0x05	; 5
    220c:	0b d5       	rcall	.+2582   	; 0x2c24 <MQTTDeserialize_publish>
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	61 30       	cpi	r22, 0x01	; 1
    2218:	71 05       	cpc	r23, r1
    221a:	81 05       	cpc	r24, r1
    221c:	91 05       	cpc	r25, r1
    221e:	09 f0       	breq	.+2      	; 0x2222 <cycle+0xa4>
    2220:	48 c0       	rjmp	.+144    	; 0x22b2 <cycle+0x134>
               (uint8_t**)&msg.payload, (int32_t*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
          goto exit;
          
        deliverMessage(c, &topicName, &msg);
    2222:	ae 01       	movw	r20, r28
    2224:	4f 5f       	subi	r20, 0xFF	; 255
    2226:	5f 4f       	sbci	r21, 0xFF	; 255
    2228:	b8 01       	movw	r22, r16
    222a:	c4 01       	movw	r24, r8
    222c:	a9 de       	rcall	.-686    	; 0x1f80 <deliverMessage>
      
        if (msg.qos != QOS0)
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	88 23       	and	r24, r24
    2232:	09 f4       	brne	.+2      	; 0x2236 <cycle+0xb8>
    2234:	42 c0       	rjmp	.+132    	; 0x22ba <cycle+0x13c>
        {
          if (msg.qos == QOS1)
    2236:	81 30       	cpi	r24, 0x01	; 1
    2238:	81 f4       	brne	.+32     	; 0x225a <cycle+0xdc>
            len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
    223a:	ec 80       	ldd	r14, Y+4	; 0x04
    223c:	fd 80       	ldd	r15, Y+5	; 0x05
    223e:	f4 01       	movw	r30, r8
    2240:	40 85       	ldd	r20, Z+8	; 0x08
    2242:	51 85       	ldd	r21, Z+9	; 0x09
    2244:	60 e0       	ldi	r22, 0x00	; 0
    2246:	70 e0       	ldi	r23, 0x00	; 0
    2248:	00 e0       	ldi	r16, 0x00	; 0
    224a:	24 e0       	ldi	r18, 0x04	; 4
    224c:	84 85       	ldd	r24, Z+12	; 0x0c
    224e:	95 85       	ldd	r25, Z+13	; 0x0d
    2250:	0e 94 ab 19 	call	0x3356	; 0x3356 <MQTTSerialize_ack>
    2254:	ab 01       	movw	r20, r22
    2256:	bc 01       	movw	r22, r24
    2258:	15 c0       	rjmp	.+42     	; 0x2284 <cycle+0x106>
          else if (msg.qos == QOS2)
    225a:	82 30       	cpi	r24, 0x02	; 2
    225c:	81 f4       	brne	.+32     	; 0x227e <cycle+0x100>
            len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
    225e:	ec 80       	ldd	r14, Y+4	; 0x04
    2260:	fd 80       	ldd	r15, Y+5	; 0x05
    2262:	f4 01       	movw	r30, r8
    2264:	40 85       	ldd	r20, Z+8	; 0x08
    2266:	51 85       	ldd	r21, Z+9	; 0x09
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	70 e0       	ldi	r23, 0x00	; 0
    226c:	00 e0       	ldi	r16, 0x00	; 0
    226e:	25 e0       	ldi	r18, 0x05	; 5
    2270:	84 85       	ldd	r24, Z+12	; 0x0c
    2272:	95 85       	ldd	r25, Z+13	; 0x0d
    2274:	0e 94 ab 19 	call	0x3356	; 0x3356 <MQTTSerialize_ack>
    2278:	ab 01       	movw	r20, r22
    227a:	bc 01       	movw	r22, r24
    227c:	03 c0       	rjmp	.+6      	; 0x2284 <cycle+0x106>
int32_t cycle(Client* c, Timer* timer)
{
  // read the socket, see what work is due
  uint16_t packet_type = readPacket(c, timer);
    
  int32_t len = 0, rc = SUCCESSS;
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	50 e0       	ldi	r21, 0x00	; 0
    2282:	ba 01       	movw	r22, r20
          if (msg.qos == QOS1)
            len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
          else if (msg.qos == QOS2)
            len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
  
          if (len <= 0)
    2284:	14 16       	cp	r1, r20
    2286:	15 06       	cpc	r1, r21
    2288:	16 06       	cpc	r1, r22
    228a:	17 06       	cpc	r1, r23
            rc = FAILURE;
          else
            rc = sendPacket(c, len, timer);
    228c:	34 f4       	brge	.+12     	; 0x229a <cycle+0x11c>
    228e:	91 01       	movw	r18, r2
    2290:	c4 01       	movw	r24, r8
    2292:	28 dc       	rcall	.-1968   	; 0x1ae4 <sendPacket>
    2294:	6b 01       	movw	r12, r22
    2296:	7c 01       	movw	r14, r24
    2298:	04 c0       	rjmp	.+8      	; 0x22a2 <cycle+0x124>
            len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
          else if (msg.qos == QOS2)
            len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
  
          if (len <= 0)
            rc = FAILURE;
    229a:	cc 24       	eor	r12, r12
    229c:	ca 94       	dec	r12
    229e:	dc 2c       	mov	r13, r12
    22a0:	76 01       	movw	r14, r12
          else
            rc = sendPacket(c, len, timer);
  
          if (rc == FAILURE)
    22a2:	ff ef       	ldi	r31, 0xFF	; 255
    22a4:	cf 16       	cp	r12, r31
    22a6:	df 06       	cpc	r13, r31
    22a8:	ef 06       	cpc	r14, r31
    22aa:	ff 06       	cpc	r15, r31
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <cycle+0x132>
    22ae:	5a c0       	rjmp	.+180    	; 0x2364 <cycle+0x1e6>
    22b0:	5b c0       	rjmp	.+182    	; 0x2368 <cycle+0x1ea>
int32_t cycle(Client* c, Timer* timer)
{
  // read the socket, see what work is due
  uint16_t packet_type = readPacket(c, timer);
    
  int32_t len = 0, rc = SUCCESSS;
    22b2:	c1 2c       	mov	r12, r1
    22b4:	d1 2c       	mov	r13, r1
    22b6:	76 01       	movw	r14, r12
    22b8:	57 c0       	rjmp	.+174    	; 0x2368 <cycle+0x1ea>
    22ba:	c1 2c       	mov	r12, r1
    22bc:	d1 2c       	mov	r13, r1
    22be:	76 01       	movw	r14, r12
    22c0:	51 c0       	rjmp	.+162    	; 0x2364 <cycle+0x1e6>
    case PUBREC:
      {
        uint16_t mypacketid;
        uint8_t dup, type;

        if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    22c2:	f4 01       	movw	r30, r8
    22c4:	e2 84       	ldd	r14, Z+10	; 0x0a
    22c6:	f3 84       	ldd	r15, Z+11	; 0x0b
    22c8:	00 e0       	ldi	r16, 0x00	; 0
    22ca:	10 e0       	ldi	r17, 0x00	; 0
    22cc:	26 85       	ldd	r18, Z+14	; 0x0e
    22ce:	37 85       	ldd	r19, Z+15	; 0x0f
    22d0:	ae 01       	movw	r20, r28
    22d2:	4f 5f       	subi	r20, 0xFF	; 255
    22d4:	5f 4f       	sbci	r21, 0xFF	; 255
    22d6:	be 01       	movw	r22, r28
    22d8:	6e 5e       	subi	r22, 0xEE	; 238
    22da:	7f 4f       	sbci	r23, 0xFF	; 255
    22dc:	ce 01       	movw	r24, r28
    22de:	0a 96       	adiw	r24, 0x0a	; 10
    22e0:	3e d5       	rcall	.+2684   	; 0x2d5e <MQTTDeserialize_ack>
    22e2:	61 30       	cpi	r22, 0x01	; 1
    22e4:	71 05       	cpc	r23, r1
    22e6:	81 05       	cpc	r24, r1
    22e8:	91 05       	cpc	r25, r1
    22ea:	f1 f4       	brne	.+60     	; 0x2328 <cycle+0x1aa>
          rc = FAILURE;
        else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
    22ec:	e9 80       	ldd	r14, Y+1	; 0x01
    22ee:	fa 80       	ldd	r15, Y+2	; 0x02
    22f0:	f4 01       	movw	r30, r8
    22f2:	40 85       	ldd	r20, Z+8	; 0x08
    22f4:	51 85       	ldd	r21, Z+9	; 0x09
    22f6:	60 e0       	ldi	r22, 0x00	; 0
    22f8:	70 e0       	ldi	r23, 0x00	; 0
    22fa:	00 e0       	ldi	r16, 0x00	; 0
    22fc:	26 e0       	ldi	r18, 0x06	; 6
    22fe:	84 85       	ldd	r24, Z+12	; 0x0c
    2300:	95 85       	ldd	r25, Z+13	; 0x0d
    2302:	0e 94 ab 19 	call	0x3356	; 0x3356 <MQTTSerialize_ack>
    2306:	16 16       	cp	r1, r22
    2308:	17 06       	cpc	r1, r23
    230a:	18 06       	cpc	r1, r24
    230c:	19 06       	cpc	r1, r25
          rc = FAILURE;
        else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
    230e:	8c f4       	brge	.+34     	; 0x2332 <cycle+0x1b4>
    2310:	91 01       	movw	r18, r2
    2312:	ab 01       	movw	r20, r22
    2314:	bc 01       	movw	r22, r24
    2316:	c4 01       	movw	r24, r8
    2318:	e5 db       	rcall	.-2102   	; 0x1ae4 <sendPacket>
    231a:	6b 01       	movw	r12, r22
    231c:	7c 01       	movw	r14, r24
    231e:	67 2b       	or	r22, r23
    2320:	68 2b       	or	r22, r24
    2322:	69 2b       	or	r22, r25
    2324:	59 f4       	brne	.+22     	; 0x233c <cycle+0x1be>
    2326:	0e c0       	rjmp	.+28     	; 0x2344 <cycle+0x1c6>
      {
        uint16_t mypacketid;
        uint8_t dup, type;

        if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
          rc = FAILURE;
    2328:	cc 24       	eor	r12, r12
    232a:	ca 94       	dec	r12
    232c:	dc 2c       	mov	r13, r12
    232e:	76 01       	movw	r14, r12
    2330:	09 c0       	rjmp	.+18     	; 0x2344 <cycle+0x1c6>
        else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
          rc = FAILURE;
    2332:	cc 24       	eor	r12, r12
    2334:	ca 94       	dec	r12
    2336:	dc 2c       	mov	r13, r12
    2338:	76 01       	movw	r14, r12
    233a:	04 c0       	rjmp	.+8      	; 0x2344 <cycle+0x1c6>
        else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
          rc = FAILURE; // there was a problem
    233c:	cc 24       	eor	r12, r12
    233e:	ca 94       	dec	r12
    2340:	dc 2c       	mov	r13, r12
    2342:	76 01       	movw	r14, r12
        
        if (rc == FAILURE)
    2344:	ff ef       	ldi	r31, 0xFF	; 255
    2346:	cf 16       	cp	r12, r31
    2348:	df 06       	cpc	r13, r31
    234a:	ef 06       	cpc	r14, r31
    234c:	ff 06       	cpc	r15, r31
    234e:	51 f4       	brne	.+20     	; 0x2364 <cycle+0x1e6>
    2350:	0b c0       	rjmp	.+22     	; 0x2368 <cycle+0x1ea>
        break;
      }
    case PUBCOMP:
      break;
    case PINGRESP:
      c->ping_outstanding = 0;
    2352:	f4 01       	movw	r30, r8
    2354:	14 8a       	std	Z+20, r1	; 0x14
int32_t cycle(Client* c, Timer* timer)
{
  // read the socket, see what work is due
  uint16_t packet_type = readPacket(c, timer);
    
  int32_t len = 0, rc = SUCCESSS;
    2356:	c1 2c       	mov	r12, r1
    2358:	d1 2c       	mov	r13, r1
      }
    case PUBCOMP:
      break;
    case PINGRESP:
      c->ping_outstanding = 0;
      break;
    235a:	76 01       	movw	r14, r12
int32_t cycle(Client* c, Timer* timer)
{
  // read the socket, see what work is due
  uint16_t packet_type = readPacket(c, timer);
    
  int32_t len = 0, rc = SUCCESSS;
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <cycle+0x1e6>
    235e:	c1 2c       	mov	r12, r1
    2360:	d1 2c       	mov	r13, r1
      break;
    case PINGRESP:
      c->ping_outstanding = 0;
      break;
  }
  keepalive(c);
    2362:	76 01       	movw	r14, r12
    2364:	c4 01       	movw	r24, r8
    2366:	a9 de       	rcall	.-686    	; 0x20ba <keepalive>
exit:
  if (rc == SUCCESSS)
    2368:	c1 14       	cp	r12, r1
    236a:	d1 04       	cpc	r13, r1
    236c:	e1 04       	cpc	r14, r1
    236e:	f1 04       	cpc	r15, r1
    2370:	21 f4       	brne	.+8      	; 0x237a <cycle+0x1fc>
    2372:	73 01       	movw	r14, r6
    2374:	62 01       	movw	r12, r4
    2376:	ee 24       	eor	r14, r14
    2378:	ff 24       	eor	r15, r15
    rc = packet_type;
  
  return rc;
}
    237a:	c7 01       	movw	r24, r14
    237c:	b6 01       	movw	r22, r12
    237e:	62 96       	adiw	r28, 0x12	; 18
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	1f 91       	pop	r17
    2390:	0f 91       	pop	r16
    2392:	ff 90       	pop	r15
    2394:	ef 90       	pop	r14
    2396:	df 90       	pop	r13
    2398:	cf 90       	pop	r12
    239a:	bf 90       	pop	r11
    239c:	af 90       	pop	r10
    239e:	9f 90       	pop	r9
    23a0:	8f 90       	pop	r8
    23a2:	7f 90       	pop	r7
    23a4:	6f 90       	pop	r6
    23a6:	5f 90       	pop	r5
    23a8:	4f 90       	pop	r4
    23aa:	3f 90       	pop	r3
    23ac:	2f 90       	pop	r2
    23ae:	08 95       	ret

000023b0 <MQTTYield>:

int32_t MQTTYield(Client* c, int32_t timeout_ms)
{
    23b0:	cf 92       	push	r12
    23b2:	df 92       	push	r13
    23b4:	ef 92       	push	r14
    23b6:	ff 92       	push	r15
    23b8:	0f 93       	push	r16
    23ba:	1f 93       	push	r17
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	28 97       	sbiw	r28, 0x08	; 8
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	8c 01       	movw	r16, r24
    23d2:	6a 01       	movw	r12, r20
    23d4:	7b 01       	movw	r14, r22
  int32_t rc = SUCCESSS;
  Timer timer;

  InitTimer(&timer);    
    23d6:	ce 01       	movw	r24, r28
    23d8:	01 96       	adiw	r24, 0x01	; 1
    23da:	0e 94 92 1c 	call	0x3924	; 0x3924 <InitTimer>
  countdown_ms(&timer, timeout_ms);
    23de:	b7 01       	movw	r22, r14
    23e0:	a6 01       	movw	r20, r12
    23e2:	ce 01       	movw	r24, r28
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	0e 94 2c 1c 	call	0x3858	; 0x3858 <countdown_ms>
    
  while (!expired(&timer))
    23ea:	0a c0       	rjmp	.+20     	; 0x2400 <MQTTYield+0x50>
  {
    if (cycle(c, &timer) == FAILURE)
    23ec:	be 01       	movw	r22, r28
    23ee:	6f 5f       	subi	r22, 0xFF	; 255
    23f0:	7f 4f       	sbci	r23, 0xFF	; 255
    23f2:	c8 01       	movw	r24, r16
    23f4:	c4 de       	rcall	.-632    	; 0x217e <cycle>
    23f6:	6f 3f       	cpi	r22, 0xFF	; 255
    23f8:	7f 4f       	sbci	r23, 0xFF	; 255
    23fa:	8f 4f       	sbci	r24, 0xFF	; 255
    23fc:	9f 4f       	sbci	r25, 0xFF	; 255
    23fe:	51 f0       	breq	.+20     	; 0x2414 <MQTTYield+0x64>
  Timer timer;

  InitTimer(&timer);    
  countdown_ms(&timer, timeout_ms);
    
  while (!expired(&timer))
    2400:	ce 01       	movw	r24, r28
    2402:	01 96       	adiw	r24, 0x01	; 1
    2404:	0e 94 0b 1c 	call	0x3816	; 0x3816 <expired>
    2408:	88 23       	and	r24, r24
    240a:	81 f3       	breq	.-32     	; 0x23ec <MQTTYield+0x3c>
  return rc;
}

int32_t MQTTYield(Client* c, int32_t timeout_ms)
{
  int32_t rc = SUCCESSS;
    240c:	60 e0       	ldi	r22, 0x00	; 0
    240e:	70 e0       	ldi	r23, 0x00	; 0
    2410:	cb 01       	movw	r24, r22
    2412:	03 c0       	rjmp	.+6      	; 0x241a <MQTTYield+0x6a>
    
  while (!expired(&timer))
  {
    if (cycle(c, &timer) == FAILURE)
    {
      rc = FAILURE;
    2414:	6f ef       	ldi	r22, 0xFF	; 255
    2416:	7f ef       	ldi	r23, 0xFF	; 255
    2418:	cb 01       	movw	r24, r22
      break;
    }
  }
  
  return rc;
}
    241a:	28 96       	adiw	r28, 0x08	; 8
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	ff 90       	pop	r15
    2430:	ef 90       	pop	r14
    2432:	df 90       	pop	r13
    2434:	cf 90       	pop	r12
    2436:	08 95       	ret

00002438 <waitfor>:

// only used in single-threaded mode where one command at a time is in process
int32_t waitfor(Client* c, int32_t packet_type, Timer* timer)
{
    2438:	8f 92       	push	r8
    243a:	9f 92       	push	r9
    243c:	af 92       	push	r10
    243e:	bf 92       	push	r11
    2440:	cf 92       	push	r12
    2442:	df 92       	push	r13
    2444:	ef 92       	push	r14
    2446:	ff 92       	push	r15
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	8c 01       	movw	r16, r24
    2452:	4a 01       	movw	r8, r20
    2454:	5b 01       	movw	r10, r22
    2456:	e9 01       	movw	r28, r18
  int32_t rc = FAILURE;
    2458:	cc 24       	eor	r12, r12
    245a:	ca 94       	dec	r12
    245c:	dc 2c       	mov	r13, r12
    245e:	76 01       	movw	r14, r12
    
  do
  {
    if (expired(timer)) 
    2460:	ce 01       	movw	r24, r28
    2462:	0e 94 0b 1c 	call	0x3816	; 0x3816 <expired>
    2466:	81 11       	cpse	r24, r1
    2468:	0a c0       	rjmp	.+20     	; 0x247e <waitfor+0x46>
      break; // we timed out
  }
  while ((rc = cycle(c, timer)) != packet_type);  
    246a:	be 01       	movw	r22, r28
    246c:	c8 01       	movw	r24, r16
    246e:	87 de       	rcall	.-754    	; 0x217e <cycle>
    2470:	6b 01       	movw	r12, r22
    2472:	7c 01       	movw	r14, r24
    2474:	68 15       	cp	r22, r8
    2476:	79 05       	cpc	r23, r9
    2478:	8a 05       	cpc	r24, r10
    247a:	9b 05       	cpc	r25, r11
    247c:	89 f7       	brne	.-30     	; 0x2460 <waitfor+0x28>
    
  return rc;
}
    247e:	c7 01       	movw	r24, r14
    2480:	b6 01       	movw	r22, r12
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	1f 91       	pop	r17
    2488:	0f 91       	pop	r16
    248a:	ff 90       	pop	r15
    248c:	ef 90       	pop	r14
    248e:	df 90       	pop	r13
    2490:	cf 90       	pop	r12
    2492:	bf 90       	pop	r11
    2494:	af 90       	pop	r10
    2496:	9f 90       	pop	r9
    2498:	8f 90       	pop	r8
    249a:	08 95       	ret

0000249c <MQTTConnect>:

int32_t MQTTConnect(Client* c, MQTTPacket_connectData* options)
{
    249c:	ef 92       	push	r14
    249e:	ff 92       	push	r15
    24a0:	0f 93       	push	r16
    24a2:	1f 93       	push	r17
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	c5 54       	subi	r28, 0x45	; 69
    24ae:	d1 09       	sbc	r29, r1
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	7c 01       	movw	r14, r24
    24bc:	8b 01       	movw	r16, r22
  Timer connect_timer;
  int32_t rc = FAILURE;
  MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
    24be:	8b e3       	ldi	r24, 0x3B	; 59
    24c0:	ec e4       	ldi	r30, 0x4C	; 76
    24c2:	f2 e0       	ldi	r31, 0x02	; 2
    24c4:	de 01       	movw	r26, r28
    24c6:	19 96       	adiw	r26, 0x09	; 9
    24c8:	01 90       	ld	r0, Z+
    24ca:	0d 92       	st	X+, r0
    24cc:	8a 95       	dec	r24
    24ce:	e1 f7       	brne	.-8      	; 0x24c8 <MQTTConnect+0x2c>
  int32_t len = 0;
    
  InitTimer(&connect_timer);
    24d0:	ce 01       	movw	r24, r28
    24d2:	01 96       	adiw	r24, 0x01	; 1
    24d4:	0e 94 92 1c 	call	0x3924	; 0x3924 <InitTimer>
  countdown_ms(&connect_timer, c->command_timeout_ms);
    24d8:	f7 01       	movw	r30, r14
    24da:	44 81       	ldd	r20, Z+4	; 0x04
    24dc:	55 81       	ldd	r21, Z+5	; 0x05
    24de:	66 81       	ldd	r22, Z+6	; 0x06
    24e0:	77 81       	ldd	r23, Z+7	; 0x07
    24e2:	ce 01       	movw	r24, r28
    24e4:	01 96       	adiw	r24, 0x01	; 1
    24e6:	0e 94 2c 1c 	call	0x3858	; 0x3858 <countdown_ms>

  if (c->isconnected) // don't send connect packet again if we are already connected
    24ea:	f7 01       	movw	r30, r14
    24ec:	85 89       	ldd	r24, Z+21	; 0x15
    24ee:	96 89       	ldd	r25, Z+22	; 0x16
    24f0:	a7 89       	ldd	r26, Z+23	; 0x17
    24f2:	b0 8d       	ldd	r27, Z+24	; 0x18
    24f4:	89 2b       	or	r24, r25
    24f6:	8a 2b       	or	r24, r26
    24f8:	8b 2b       	or	r24, r27
    24fa:	09 f0       	breq	.+2      	; 0x24fe <MQTTConnect+0x62>
    24fc:	63 c0       	rjmp	.+198    	; 0x25c4 <MQTTConnect+0x128>
    goto exit;

  if (options == 0)
    24fe:	01 15       	cp	r16, r1
    2500:	11 05       	cpc	r17, r1
    2502:	19 f4       	brne	.+6      	; 0x250a <MQTTConnect+0x6e>
    options = &default_options; // set default options if none were supplied
    2504:	8e 01       	movw	r16, r28
    2506:	07 5f       	subi	r16, 0xF7	; 247
    2508:	1f 4f       	sbci	r17, 0xFF	; 255
    
  c->keepAliveInterval = options->keepAliveInterval;
    250a:	f8 01       	movw	r30, r16
    250c:	47 85       	ldd	r20, Z+15	; 0x0f
    250e:	50 89       	ldd	r21, Z+16	; 0x10
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	70 e0       	ldi	r23, 0x00	; 0
    2514:	f7 01       	movw	r30, r14
    2516:	40 8b       	std	Z+16, r20	; 0x10
    2518:	51 8b       	std	Z+17, r21	; 0x11
    251a:	62 8b       	std	Z+18, r22	; 0x12
    251c:	73 8b       	std	Z+19, r23	; 0x13
  countdown(&c->ping_timer, c->keepAliveInterval);
    251e:	c7 01       	movw	r24, r14
    2520:	c1 96       	adiw	r24, 0x31	; 49
    2522:	0e 94 49 1c 	call	0x3892	; 0x3892 <countdown>
  
  if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
    2526:	f7 01       	movw	r30, r14
    2528:	40 85       	ldd	r20, Z+8	; 0x08
    252a:	51 85       	ldd	r21, Z+9	; 0x09
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	70 e0       	ldi	r23, 0x00	; 0
    2530:	98 01       	movw	r18, r16
    2532:	84 85       	ldd	r24, Z+12	; 0x0c
    2534:	95 85       	ldd	r25, Z+13	; 0x0d
    2536:	0c d2       	rcall	.+1048   	; 0x2950 <MQTTSerialize_connect>
    2538:	ab 01       	movw	r20, r22
    253a:	bc 01       	movw	r22, r24
    253c:	14 16       	cp	r1, r20
    253e:	15 06       	cpc	r1, r21
    2540:	16 06       	cpc	r1, r22
    2542:	17 06       	cpc	r1, r23
    2544:	0c f0       	brlt	.+2      	; 0x2548 <MQTTConnect+0xac>
    2546:	42 c0       	rjmp	.+132    	; 0x25cc <MQTTConnect+0x130>
    goto exit;

  if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
    2548:	9e 01       	movw	r18, r28
    254a:	2f 5f       	subi	r18, 0xFF	; 255
    254c:	3f 4f       	sbci	r19, 0xFF	; 255
    254e:	c7 01       	movw	r24, r14
    2550:	c9 da       	rcall	.-2670   	; 0x1ae4 <sendPacket>
    2552:	61 15       	cp	r22, r1
    2554:	71 05       	cpc	r23, r1
    2556:	81 05       	cpc	r24, r1
    2558:	91 05       	cpc	r25, r1
    255a:	09 f0       	breq	.+2      	; 0x255e <MQTTConnect+0xc2>
    255c:	3e c0       	rjmp	.+124    	; 0x25da <MQTTConnect+0x13e>
    goto exit; // there was a problem
    
  // this will be a blocking call, wait for the connack
  if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
    255e:	9e 01       	movw	r18, r28
    2560:	2f 5f       	subi	r18, 0xFF	; 255
    2562:	3f 4f       	sbci	r19, 0xFF	; 255
    2564:	42 e0       	ldi	r20, 0x02	; 2
    2566:	50 e0       	ldi	r21, 0x00	; 0
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	c7 01       	movw	r24, r14
    256e:	64 df       	rcall	.-312    	; 0x2438 <waitfor>
    2570:	62 30       	cpi	r22, 0x02	; 2
    2572:	71 05       	cpc	r23, r1
    2574:	81 05       	cpc	r24, r1
    2576:	91 05       	cpc	r25, r1
    2578:	69 f5       	brne	.+90     	; 0x25d4 <MQTTConnect+0x138>
  {
    uint8_t connack_rc = 255;
    257a:	8f ef       	ldi	r24, 0xFF	; 255
    257c:	26 96       	adiw	r28, 0x06	; 6
    257e:	8f af       	std	Y+63, r24	; 0x3f
    2580:	26 97       	sbiw	r28, 0x06	; 6
    int8_t sessionPresent = 0;
    2582:	25 96       	adiw	r28, 0x05	; 5
    2584:	1f ae       	std	Y+63, r1	; 0x3f
    2586:	25 97       	sbiw	r28, 0x05	; 5

    if (MQTTDeserialize_connack((uint8_t*)&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
    2588:	f7 01       	movw	r30, r14
    258a:	02 85       	ldd	r16, Z+10	; 0x0a
    258c:	13 85       	ldd	r17, Z+11	; 0x0b
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	46 85       	ldd	r20, Z+14	; 0x0e
    2594:	57 85       	ldd	r21, Z+15	; 0x0f
    2596:	be 01       	movw	r22, r28
    2598:	6b 5b       	subi	r22, 0xBB	; 187
    259a:	7f 4f       	sbci	r23, 0xFF	; 255
    259c:	ce 01       	movw	r24, r28
    259e:	8c 5b       	subi	r24, 0xBC	; 188
    25a0:	9f 4f       	sbci	r25, 0xFF	; 255
    25a2:	c4 d2       	rcall	.+1416   	; 0x2b2c <MQTTDeserialize_connack>
    25a4:	61 30       	cpi	r22, 0x01	; 1
    25a6:	71 05       	cpc	r23, r1
    25a8:	81 05       	cpc	r24, r1
    25aa:	91 05       	cpc	r25, r1
    25ac:	39 f4       	brne	.+14     	; 0x25bc <MQTTConnect+0x120>
      rc = connack_rc;
    25ae:	26 96       	adiw	r28, 0x06	; 6
    25b0:	6f ad       	ldd	r22, Y+63	; 0x3f
    25b2:	26 97       	sbiw	r28, 0x06	; 6
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <MQTTConnect+0x13e>
    else
      rc = FAILURE;
    25bc:	6f ef       	ldi	r22, 0xFF	; 255
    25be:	7f ef       	ldi	r23, 0xFF	; 255
    25c0:	cb 01       	movw	r24, r22
    25c2:	0b c0       	rjmp	.+22     	; 0x25da <MQTTConnect+0x13e>
}

int32_t MQTTConnect(Client* c, MQTTPacket_connectData* options)
{
  Timer connect_timer;
  int32_t rc = FAILURE;
    25c4:	6f ef       	ldi	r22, 0xFF	; 255
    25c6:	7f ef       	ldi	r23, 0xFF	; 255
    25c8:	cb 01       	movw	r24, r22
    25ca:	07 c0       	rjmp	.+14     	; 0x25da <MQTTConnect+0x13e>
    25cc:	6f ef       	ldi	r22, 0xFF	; 255
    25ce:	7f ef       	ldi	r23, 0xFF	; 255
    25d0:	cb 01       	movw	r24, r22
    25d2:	03 c0       	rjmp	.+6      	; 0x25da <MQTTConnect+0x13e>
      rc = connack_rc;
    else
      rc = FAILURE;
  }
  else
    rc = FAILURE;
    25d4:	6f ef       	ldi	r22, 0xFF	; 255
    25d6:	7f ef       	ldi	r23, 0xFF	; 255
    25d8:	cb 01       	movw	r24, r22
    
exit:
  if (rc == SUCCESSS)
    25da:	61 15       	cp	r22, r1
    25dc:	71 05       	cpc	r23, r1
    25de:	81 05       	cpc	r24, r1
    25e0:	91 05       	cpc	r25, r1
    25e2:	49 f4       	brne	.+18     	; 0x25f6 <MQTTConnect+0x15a>
    c->isconnected = 1;
    25e4:	01 e0       	ldi	r16, 0x01	; 1
    25e6:	10 e0       	ldi	r17, 0x00	; 0
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	f7 01       	movw	r30, r14
    25ee:	05 8b       	std	Z+21, r16	; 0x15
    25f0:	16 8b       	std	Z+22, r17	; 0x16
    25f2:	27 8b       	std	Z+23, r18	; 0x17
    25f4:	30 8f       	std	Z+24, r19	; 0x18

  return rc;
}
    25f6:	cb 5b       	subi	r28, 0xBB	; 187
    25f8:	df 4f       	sbci	r29, 0xFF	; 255
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	df 91       	pop	r29
    2606:	cf 91       	pop	r28
    2608:	1f 91       	pop	r17
    260a:	0f 91       	pop	r16
    260c:	ff 90       	pop	r15
    260e:	ef 90       	pop	r14
    2610:	08 95       	ret

00002612 <MQTTSubscribe>:


int32_t MQTTSubscribe(Client* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{ 
    2612:	2f 92       	push	r2
    2614:	3f 92       	push	r3
    2616:	4f 92       	push	r4
    2618:	5f 92       	push	r5
    261a:	6f 92       	push	r6
    261c:	7f 92       	push	r7
    261e:	8f 92       	push	r8
    2620:	9f 92       	push	r9
    2622:	af 92       	push	r10
    2624:	bf 92       	push	r11
    2626:	cf 92       	push	r12
    2628:	df 92       	push	r13
    262a:	ef 92       	push	r14
    262c:	ff 92       	push	r15
    262e:	0f 93       	push	r16
    2630:	1f 93       	push	r17
    2632:	cf 93       	push	r28
    2634:	df 93       	push	r29
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	6f 97       	sbiw	r28, 0x1f	; 31
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	3c 01       	movw	r6, r24
    2648:	7d 8f       	std	Y+29, r23	; 0x1d
    264a:	6c 8f       	std	Y+28, r22	; 0x1c
    264c:	4b 8f       	std	Y+27, r20	; 0x1b
    264e:	3f 8f       	std	Y+31, r19	; 0x1f
    2650:	2e 8f       	std	Y+30, r18	; 0x1e
  int32_t rc = FAILURE;  
  Timer timer;
  int32_t len = 0;
  MQTTString topic = MQTTString_initializer;
    2652:	1b 86       	std	Y+11, r1	; 0x0b
    2654:	1c 86       	std	Y+12, r1	; 0x0c
    2656:	1d 86       	std	Y+13, r1	; 0x0d
    2658:	1e 86       	std	Y+14, r1	; 0x0e
    265a:	18 8a       	std	Y+16, r1	; 0x10
    265c:	1f 86       	std	Y+15, r1	; 0x0f
  topic.cstring = (char *)topicFilter;
    265e:	7a 87       	std	Y+10, r23	; 0x0a
    2660:	69 87       	std	Y+9, r22	; 0x09
    
  InitTimer(&timer);
    2662:	ce 01       	movw	r24, r28
    2664:	01 96       	adiw	r24, 0x01	; 1
    2666:	0e 94 92 1c 	call	0x3924	; 0x3924 <InitTimer>
  countdown_ms(&timer, c->command_timeout_ms);
    266a:	f3 01       	movw	r30, r6
    266c:	44 81       	ldd	r20, Z+4	; 0x04
    266e:	55 81       	ldd	r21, Z+5	; 0x05
    2670:	66 81       	ldd	r22, Z+6	; 0x06
    2672:	77 81       	ldd	r23, Z+7	; 0x07
    2674:	ce 01       	movw	r24, r28
    2676:	01 96       	adiw	r24, 0x01	; 1
    2678:	0e 94 2c 1c 	call	0x3858	; 0x3858 <countdown_ms>

  if (!c->isconnected)
    267c:	f3 01       	movw	r30, r6
    267e:	85 89       	ldd	r24, Z+21	; 0x15
    2680:	96 89       	ldd	r25, Z+22	; 0x16
    2682:	a7 89       	ldd	r26, Z+23	; 0x17
    2684:	b0 8d       	ldd	r27, Z+24	; 0x18
    2686:	89 2b       	or	r24, r25
    2688:	8a 2b       	or	r24, r26
    268a:	8b 2b       	or	r24, r27
    268c:	09 f4       	brne	.+2      	; 0x2690 <MQTTSubscribe+0x7e>
    268e:	98 c0       	rjmp	.+304    	; 0x27c0 <MQTTSubscribe+0x1ae>
    goto exit;
    
  len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int32_t*)&qos);
    2690:	c3 01       	movw	r24, r6
    2692:	0d da       	rcall	.-3046   	; 0x1aae <getNextPacketId>
    2694:	8b 01       	movw	r16, r22
    2696:	9c 01       	movw	r18, r24
    2698:	f3 01       	movw	r30, r6
    269a:	40 85       	ldd	r20, Z+8	; 0x08
    269c:	51 85       	ldd	r21, Z+9	; 0x09
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	70 e0       	ldi	r23, 0x00	; 0
    26a2:	ce 01       	movw	r24, r28
    26a4:	4b 96       	adiw	r24, 0x1b	; 27
    26a6:	4c 01       	movw	r8, r24
    26a8:	fe 01       	movw	r30, r28
    26aa:	39 96       	adiw	r30, 0x09	; 9
    26ac:	5f 01       	movw	r10, r30
    26ae:	c1 2c       	mov	r12, r1
    26b0:	d1 2c       	mov	r13, r1
    26b2:	76 01       	movw	r14, r12
    26b4:	c3 94       	inc	r12
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	f3 01       	movw	r30, r6
    26ba:	84 85       	ldd	r24, Z+12	; 0x0c
    26bc:	95 85       	ldd	r25, Z+13	; 0x0d
    26be:	e9 d6       	rcall	.+3538   	; 0x3492 <MQTTSerialize_subscribe>
    26c0:	ab 01       	movw	r20, r22
    26c2:	bc 01       	movw	r22, r24
  
  if (len <= 0)
    26c4:	14 16       	cp	r1, r20
    26c6:	15 06       	cpc	r1, r21
    26c8:	16 06       	cpc	r1, r22
    26ca:	17 06       	cpc	r1, r23
    26cc:	0c f0       	brlt	.+2      	; 0x26d0 <MQTTSubscribe+0xbe>
    26ce:	7d c0       	rjmp	.+250    	; 0x27ca <MQTTSubscribe+0x1b8>
    goto exit;

  if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
    26d0:	9e 01       	movw	r18, r28
    26d2:	2f 5f       	subi	r18, 0xFF	; 255
    26d4:	3f 4f       	sbci	r19, 0xFF	; 255
    26d6:	c3 01       	movw	r24, r6
    26d8:	05 da       	rcall	.-3062   	; 0x1ae4 <sendPacket>
    26da:	1b 01       	movw	r2, r22
    26dc:	2c 01       	movw	r4, r24
    26de:	67 2b       	or	r22, r23
    26e0:	68 2b       	or	r22, r24
    26e2:	69 2b       	or	r22, r25
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <MQTTSubscribe+0xd6>
    26e6:	7a c0       	rjmp	.+244    	; 0x27dc <MQTTSubscribe+0x1ca>
    goto exit;             // there was a problem
    
  if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
    26e8:	9e 01       	movw	r18, r28
    26ea:	2f 5f       	subi	r18, 0xFF	; 255
    26ec:	3f 4f       	sbci	r19, 0xFF	; 255
    26ee:	49 e0       	ldi	r20, 0x09	; 9
    26f0:	50 e0       	ldi	r21, 0x00	; 0
    26f2:	60 e0       	ldi	r22, 0x00	; 0
    26f4:	70 e0       	ldi	r23, 0x00	; 0
    26f6:	c3 01       	movw	r24, r6
    26f8:	9f de       	rcall	.-706    	; 0x2438 <waitfor>
    26fa:	69 30       	cpi	r22, 0x09	; 9
    26fc:	71 05       	cpc	r23, r1
    26fe:	81 05       	cpc	r24, r1
    2700:	91 05       	cpc	r25, r1
    2702:	09 f0       	breq	.+2      	; 0x2706 <MQTTSubscribe+0xf4>
    2704:	67 c0       	rjmp	.+206    	; 0x27d4 <MQTTSubscribe+0x1c2>
  {
    int32_t count = 0, grantedQoS = -1;
    2706:	1d 8a       	std	Y+21, r1	; 0x15
    2708:	1e 8a       	std	Y+22, r1	; 0x16
    270a:	1f 8a       	std	Y+23, r1	; 0x17
    270c:	18 8e       	std	Y+24, r1	; 0x18
    270e:	8f ef       	ldi	r24, 0xFF	; 255
    2710:	9f ef       	ldi	r25, 0xFF	; 255
    2712:	dc 01       	movw	r26, r24
    2714:	89 8b       	std	Y+17, r24	; 0x11
    2716:	9a 8b       	std	Y+18, r25	; 0x12
    2718:	ab 8b       	std	Y+19, r26	; 0x13
    271a:	bc 8b       	std	Y+20, r27	; 0x14
    uint16_t mypacketid;
    
    if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
    271c:	f3 01       	movw	r30, r6
    271e:	a2 84       	ldd	r10, Z+10	; 0x0a
    2720:	b3 84       	ldd	r11, Z+11	; 0x0b
    2722:	c1 2c       	mov	r12, r1
    2724:	d1 2c       	mov	r13, r1
    2726:	e6 84       	ldd	r14, Z+14	; 0x0e
    2728:	f7 84       	ldd	r15, Z+15	; 0x0f
    272a:	8e 01       	movw	r16, r28
    272c:	0f 5e       	subi	r16, 0xEF	; 239
    272e:	1f 4f       	sbci	r17, 0xFF	; 255
    2730:	9e 01       	movw	r18, r28
    2732:	2b 5e       	subi	r18, 0xEB	; 235
    2734:	3f 4f       	sbci	r19, 0xFF	; 255
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	50 e0       	ldi	r21, 0x00	; 0
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	ce 01       	movw	r24, r28
    2740:	49 96       	adiw	r24, 0x19	; 25
    2742:	45 d7       	rcall	.+3722   	; 0x35ce <MQTTDeserialize_suback>
    2744:	61 30       	cpi	r22, 0x01	; 1
    2746:	71 05       	cpc	r23, r1
    2748:	81 05       	cpc	r24, r1
    274a:	91 05       	cpc	r25, r1
    274c:	29 f4       	brne	.+10     	; 0x2758 <MQTTSubscribe+0x146>
      rc = grantedQoS; // 0, 1, 2 or 0x80 
    274e:	49 89       	ldd	r20, Y+17	; 0x11
    2750:	5a 89       	ldd	r21, Y+18	; 0x12
    2752:	6b 89       	ldd	r22, Y+19	; 0x13
    2754:	7c 89       	ldd	r23, Y+20	; 0x14
    2756:	02 c0       	rjmp	.+4      	; 0x275c <MQTTSubscribe+0x14a>
  len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int32_t*)&qos);
  
  if (len <= 0)
    goto exit;

  if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
    2758:	b2 01       	movw	r22, r4
    275a:	a1 01       	movw	r20, r2
    uint16_t mypacketid;
    
    if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
      rc = grantedQoS; // 0, 1, 2 or 0x80 

    if (rc != 0x80)
    275c:	40 38       	cpi	r20, 0x80	; 128
    275e:	51 05       	cpc	r21, r1
    2760:	61 05       	cpc	r22, r1
    2762:	71 05       	cpc	r23, r1
    2764:	11 f5       	brne	.+68     	; 0x27aa <MQTTSubscribe+0x198>
    2766:	29 c0       	rjmp	.+82     	; 0x27ba <MQTTSubscribe+0x1a8>
    {
      for (int32_t i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
      {
        if (c->messageHandlers[i].topicFilter == 0)
    2768:	fc 01       	movw	r30, r24
    276a:	ee 0f       	add	r30, r30
    276c:	ff 1f       	adc	r31, r31
    276e:	ee 0f       	add	r30, r30
    2770:	ff 1f       	adc	r31, r31
    2772:	e6 0d       	add	r30, r6
    2774:	f7 1d       	adc	r31, r7
    2776:	21 8d       	ldd	r18, Z+25	; 0x19
    2778:	32 8d       	ldd	r19, Z+26	; 0x1a
    277a:	23 2b       	or	r18, r19
    277c:	91 f4       	brne	.+36     	; 0x27a2 <MQTTSubscribe+0x190>
        {
          c->messageHandlers[i].topicFilter = topicFilter;
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	f3 01       	movw	r30, r6
    2788:	e8 0f       	add	r30, r24
    278a:	f9 1f       	adc	r31, r25
    278c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    278e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2790:	92 8f       	std	Z+26, r25	; 0x1a
    2792:	81 8f       	std	Z+25, r24	; 0x19
          c->messageHandlers[i].fp = messageHandler;
    2794:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2796:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2798:	94 8f       	std	Z+28, r25	; 0x1c
    279a:	83 8f       	std	Z+27, r24	; 0x1b
          rc = 0;
    279c:	b2 01       	movw	r22, r4
    279e:	a1 01       	movw	r20, r2
          break;
    27a0:	0c c0       	rjmp	.+24     	; 0x27ba <MQTTSubscribe+0x1a8>
    if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
      rc = grantedQoS; // 0, 1, 2 or 0x80 

    if (rc != 0x80)
    {
      for (int32_t i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    27a2:	01 96       	adiw	r24, 0x01	; 1
    27a4:	a1 1d       	adc	r26, r1
    27a6:	b1 1d       	adc	r27, r1
    27a8:	03 c0       	rjmp	.+6      	; 0x27b0 <MQTTSubscribe+0x19e>
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	dc 01       	movw	r26, r24
    27b0:	85 30       	cpi	r24, 0x05	; 5
    27b2:	91 05       	cpc	r25, r1
    27b4:	a1 05       	cpc	r26, r1
    27b6:	b1 05       	cpc	r27, r1
    27b8:	bc f2       	brlt	.-82     	; 0x2768 <MQTTSubscribe+0x156>
    27ba:	1a 01       	movw	r2, r20
    27bc:	2b 01       	movw	r4, r22
    27be:	0e c0       	rjmp	.+28     	; 0x27dc <MQTTSubscribe+0x1ca>
}


int32_t MQTTSubscribe(Client* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{ 
  int32_t rc = FAILURE;  
    27c0:	22 24       	eor	r2, r2
    27c2:	2a 94       	dec	r2
    27c4:	32 2c       	mov	r3, r2
    27c6:	21 01       	movw	r4, r2
    27c8:	09 c0       	rjmp	.+18     	; 0x27dc <MQTTSubscribe+0x1ca>
    27ca:	22 24       	eor	r2, r2
    27cc:	2a 94       	dec	r2
    27ce:	32 2c       	mov	r3, r2
    27d0:	21 01       	movw	r4, r2
    27d2:	04 c0       	rjmp	.+8      	; 0x27dc <MQTTSubscribe+0x1ca>
        }
      }
    }
  }
  else 
    rc = FAILURE;
    27d4:	22 24       	eor	r2, r2
    27d6:	2a 94       	dec	r2
    27d8:	32 2c       	mov	r3, r2
    27da:	21 01       	movw	r4, r2
        
exit:
  return rc;
}
    27dc:	c2 01       	movw	r24, r4
    27de:	b1 01       	movw	r22, r2
    27e0:	6f 96       	adiw	r28, 0x1f	; 31
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	ff 90       	pop	r15
    27f6:	ef 90       	pop	r14
    27f8:	df 90       	pop	r13
    27fa:	cf 90       	pop	r12
    27fc:	bf 90       	pop	r11
    27fe:	af 90       	pop	r10
    2800:	9f 90       	pop	r9
    2802:	8f 90       	pop	r8
    2804:	7f 90       	pop	r7
    2806:	6f 90       	pop	r6
    2808:	5f 90       	pop	r5
    280a:	4f 90       	pop	r4
    280c:	3f 90       	pop	r3
    280e:	2f 90       	pop	r2
    2810:	08 95       	ret

00002812 <MQTTSerialize_connectLength>:
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_disconnect(uint8_t* buf, int32_t buflen)
{
  return MQTTSerialize_zero(buf, buflen, DISCONNECT);
}
    2812:	8f 92       	push	r8
    2814:	9f 92       	push	r9
    2816:	af 92       	push	r10
    2818:	bf 92       	push	r11
    281a:	cf 92       	push	r12
    281c:	df 92       	push	r13
    281e:	ef 92       	push	r14
    2820:	ff 92       	push	r15
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	ec 01       	movw	r28, r24
    2828:	8e 81       	ldd	r24, Y+6	; 0x06
    282a:	83 30       	cpi	r24, 0x03	; 3
    282c:	31 f0       	breq	.+12     	; 0x283a <MQTTSerialize_connectLength+0x28>
    282e:	84 30       	cpi	r24, 0x04	; 4
    2830:	61 f0       	breq	.+24     	; 0x284a <MQTTSerialize_connectLength+0x38>
    2832:	c1 2c       	mov	r12, r1
    2834:	d1 2c       	mov	r13, r1
    2836:	76 01       	movw	r14, r12
    2838:	0f c0       	rjmp	.+30     	; 0x2858 <MQTTSerialize_connectLength+0x46>
    283a:	0f 2e       	mov	r0, r31
    283c:	fc e0       	ldi	r31, 0x0C	; 12
    283e:	cf 2e       	mov	r12, r31
    2840:	d1 2c       	mov	r13, r1
    2842:	e1 2c       	mov	r14, r1
    2844:	f1 2c       	mov	r15, r1
    2846:	f0 2d       	mov	r31, r0
    2848:	07 c0       	rjmp	.+14     	; 0x2858 <MQTTSerialize_connectLength+0x46>
    284a:	0f 2e       	mov	r0, r31
    284c:	fa e0       	ldi	r31, 0x0A	; 10
    284e:	cf 2e       	mov	r12, r31
    2850:	d1 2c       	mov	r13, r1
    2852:	e1 2c       	mov	r14, r1
    2854:	f1 2c       	mov	r15, r1
    2856:	f0 2d       	mov	r31, r0
    2858:	2f 81       	ldd	r18, Y+7	; 0x07
    285a:	38 85       	ldd	r19, Y+8	; 0x08
    285c:	49 85       	ldd	r20, Y+9	; 0x09
    285e:	5a 85       	ldd	r21, Y+10	; 0x0a
    2860:	6b 85       	ldd	r22, Y+11	; 0x0b
    2862:	7c 85       	ldd	r23, Y+12	; 0x0c
    2864:	8d 85       	ldd	r24, Y+13	; 0x0d
    2866:	9e 85       	ldd	r25, Y+14	; 0x0e
    2868:	06 d5       	rcall	.+2572   	; 0x3276 <MQTTstrlen>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	02 96       	adiw	r24, 0x02	; 2
    2870:	a1 1d       	adc	r26, r1
    2872:	b1 1d       	adc	r27, r1
    2874:	c8 0e       	add	r12, r24
    2876:	d9 1e       	adc	r13, r25
    2878:	ea 1e       	adc	r14, r26
    287a:	fb 1e       	adc	r15, r27
    287c:	8a 89       	ldd	r24, Y+18	; 0x12
    287e:	88 23       	and	r24, r24
    2880:	31 f1       	breq	.+76     	; 0x28ce <MQTTSerialize_connectLength+0xbc>
    2882:	29 8d       	ldd	r18, Y+25	; 0x19
    2884:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2886:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2888:	5c 8d       	ldd	r21, Y+28	; 0x1c
    288a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    288c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    288e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2890:	98 a1       	ldd	r25, Y+32	; 0x20
    2892:	f1 d4       	rcall	.+2530   	; 0x3276 <MQTTstrlen>
    2894:	4b 01       	movw	r8, r22
    2896:	5c 01       	movw	r10, r24
    2898:	22 e0       	ldi	r18, 0x02	; 2
    289a:	82 0e       	add	r8, r18
    289c:	91 1c       	adc	r9, r1
    289e:	a1 1c       	adc	r10, r1
    28a0:	b1 1c       	adc	r11, r1
    28a2:	29 a1       	ldd	r18, Y+33	; 0x21
    28a4:	3a a1       	ldd	r19, Y+34	; 0x22
    28a6:	4b a1       	ldd	r20, Y+35	; 0x23
    28a8:	5c a1       	ldd	r21, Y+36	; 0x24
    28aa:	6d a1       	ldd	r22, Y+37	; 0x25
    28ac:	7e a1       	ldd	r23, Y+38	; 0x26
    28ae:	8f a1       	ldd	r24, Y+39	; 0x27
    28b0:	98 a5       	ldd	r25, Y+40	; 0x28
    28b2:	e1 d4       	rcall	.+2498   	; 0x3276 <MQTTstrlen>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	88 0d       	add	r24, r8
    28ba:	99 1d       	adc	r25, r9
    28bc:	aa 1d       	adc	r26, r10
    28be:	bb 1d       	adc	r27, r11
    28c0:	02 96       	adiw	r24, 0x02	; 2
    28c2:	a1 1d       	adc	r26, r1
    28c4:	b1 1d       	adc	r27, r1
    28c6:	c8 0e       	add	r12, r24
    28c8:	d9 1e       	adc	r13, r25
    28ca:	ea 1e       	adc	r14, r26
    28cc:	fb 1e       	adc	r15, r27
    28ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    28d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    28d2:	89 2b       	or	r24, r25
    28d4:	21 f4       	brne	.+8      	; 0x28de <MQTTSerialize_connectLength+0xcc>
    28d6:	89 a9       	ldd	r24, Y+49	; 0x31
    28d8:	9a a9       	ldd	r25, Y+50	; 0x32
    28da:	89 2b       	or	r24, r25
    28dc:	91 f0       	breq	.+36     	; 0x2902 <MQTTSerialize_connectLength+0xf0>
    28de:	2b a5       	ldd	r18, Y+43	; 0x2b
    28e0:	3c a5       	ldd	r19, Y+44	; 0x2c
    28e2:	4d a5       	ldd	r20, Y+45	; 0x2d
    28e4:	5e a5       	ldd	r21, Y+46	; 0x2e
    28e6:	6f a5       	ldd	r22, Y+47	; 0x2f
    28e8:	78 a9       	ldd	r23, Y+48	; 0x30
    28ea:	89 a9       	ldd	r24, Y+49	; 0x31
    28ec:	9a a9       	ldd	r25, Y+50	; 0x32
    28ee:	c3 d4       	rcall	.+2438   	; 0x3276 <MQTTstrlen>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	02 96       	adiw	r24, 0x02	; 2
    28f6:	a1 1d       	adc	r26, r1
    28f8:	b1 1d       	adc	r27, r1
    28fa:	c8 0e       	add	r12, r24
    28fc:	d9 1e       	adc	r13, r25
    28fe:	ea 1e       	adc	r14, r26
    2900:	fb 1e       	adc	r15, r27
    2902:	8b a9       	ldd	r24, Y+51	; 0x33
    2904:	9c a9       	ldd	r25, Y+52	; 0x34
    2906:	89 2b       	or	r24, r25
    2908:	21 f4       	brne	.+8      	; 0x2912 <MQTTSerialize_connectLength+0x100>
    290a:	89 ad       	ldd	r24, Y+57	; 0x39
    290c:	9a ad       	ldd	r25, Y+58	; 0x3a
    290e:	89 2b       	or	r24, r25
    2910:	91 f0       	breq	.+36     	; 0x2936 <MQTTSerialize_connectLength+0x124>
    2912:	2b a9       	ldd	r18, Y+51	; 0x33
    2914:	3c a9       	ldd	r19, Y+52	; 0x34
    2916:	4d a9       	ldd	r20, Y+53	; 0x35
    2918:	5e a9       	ldd	r21, Y+54	; 0x36
    291a:	6f a9       	ldd	r22, Y+55	; 0x37
    291c:	78 ad       	ldd	r23, Y+56	; 0x38
    291e:	89 ad       	ldd	r24, Y+57	; 0x39
    2920:	9a ad       	ldd	r25, Y+58	; 0x3a
    2922:	a9 d4       	rcall	.+2386   	; 0x3276 <MQTTstrlen>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	02 96       	adiw	r24, 0x02	; 2
    292a:	a1 1d       	adc	r26, r1
    292c:	b1 1d       	adc	r27, r1
    292e:	c8 0e       	add	r12, r24
    2930:	d9 1e       	adc	r13, r25
    2932:	ea 1e       	adc	r14, r26
    2934:	fb 1e       	adc	r15, r27
    2936:	c7 01       	movw	r24, r14
    2938:	b6 01       	movw	r22, r12
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	ff 90       	pop	r15
    2940:	ef 90       	pop	r14
    2942:	df 90       	pop	r13
    2944:	cf 90       	pop	r12
    2946:	bf 90       	pop	r11
    2948:	af 90       	pop	r10
    294a:	9f 90       	pop	r9
    294c:	8f 90       	pop	r8
    294e:	08 95       	ret

00002950 <MQTTSerialize_connect>:
    2950:	4f 92       	push	r4
    2952:	5f 92       	push	r5
    2954:	6f 92       	push	r6
    2956:	7f 92       	push	r7
    2958:	af 92       	push	r10
    295a:	bf 92       	push	r11
    295c:	df 92       	push	r13
    295e:	ef 92       	push	r14
    2960:	ff 92       	push	r15
    2962:	0f 93       	push	r16
    2964:	1f 93       	push	r17
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	00 d0       	rcall	.+0      	; 0x296c <MQTTSerialize_connect+0x1c>
    296c:	00 d0       	rcall	.+0      	; 0x296e <MQTTSerialize_connect+0x1e>
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
    2972:	5c 01       	movw	r10, r24
    2974:	2a 01       	movw	r4, r20
    2976:	3b 01       	movw	r6, r22
    2978:	79 01       	movw	r14, r18
    297a:	9a 83       	std	Y+2, r25	; 0x02
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	c9 01       	movw	r24, r18
    2980:	48 df       	rcall	.-368    	; 0x2812 <MQTTSerialize_connectLength>
    2982:	6b 83       	std	Y+3, r22	; 0x03
    2984:	7c 83       	std	Y+4, r23	; 0x04
    2986:	8d 83       	std	Y+5, r24	; 0x05
    2988:	9e 83       	std	Y+6, r25	; 0x06
    298a:	33 d3       	rcall	.+1638   	; 0x2ff2 <MQTTPacket_len>
    298c:	46 16       	cp	r4, r22
    298e:	57 06       	cpc	r5, r23
    2990:	68 06       	cpc	r6, r24
    2992:	79 06       	cpc	r7, r25
    2994:	0c f4       	brge	.+2      	; 0x2998 <MQTTSerialize_connect+0x48>
    2996:	b2 c0       	rjmp	.+356    	; 0x2afc <MQTTSerialize_connect+0x1ac>
    2998:	60 e1       	ldi	r22, 0x10	; 16
    299a:	ce 01       	movw	r24, r28
    299c:	01 96       	adiw	r24, 0x01	; 1
    299e:	7a d3       	rcall	.+1780   	; 0x3094 <writeChar>
    29a0:	4b 81       	ldd	r20, Y+3	; 0x03
    29a2:	5c 81       	ldd	r21, Y+4	; 0x04
    29a4:	6d 81       	ldd	r22, Y+5	; 0x05
    29a6:	7e 81       	ldd	r23, Y+6	; 0x06
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	9a 81       	ldd	r25, Y+2	; 0x02
    29ac:	44 d2       	rcall	.+1160   	; 0x2e36 <MQTTPacket_encode>
    29ae:	29 81       	ldd	r18, Y+1	; 0x01
    29b0:	3a 81       	ldd	r19, Y+2	; 0x02
    29b2:	62 0f       	add	r22, r18
    29b4:	73 1f       	adc	r23, r19
    29b6:	7a 83       	std	Y+2, r23	; 0x02
    29b8:	69 83       	std	Y+1, r22	; 0x01
    29ba:	f7 01       	movw	r30, r14
    29bc:	86 81       	ldd	r24, Z+6	; 0x06
    29be:	84 30       	cpi	r24, 0x04	; 4
    29c0:	51 f4       	brne	.+20     	; 0x29d6 <MQTTSerialize_connect+0x86>
    29c2:	6c e0       	ldi	r22, 0x0C	; 12
    29c4:	73 e0       	ldi	r23, 0x03	; 3
    29c6:	ce 01       	movw	r24, r28
    29c8:	01 96       	adiw	r24, 0x01	; 1
    29ca:	9c d3       	rcall	.+1848   	; 0x3104 <writeCString>
    29cc:	64 e0       	ldi	r22, 0x04	; 4
    29ce:	ce 01       	movw	r24, r28
    29d0:	01 96       	adiw	r24, 0x01	; 1
    29d2:	60 d3       	rcall	.+1728   	; 0x3094 <writeChar>
    29d4:	09 c0       	rjmp	.+18     	; 0x29e8 <MQTTSerialize_connect+0x98>
    29d6:	61 e1       	ldi	r22, 0x11	; 17
    29d8:	73 e0       	ldi	r23, 0x03	; 3
    29da:	ce 01       	movw	r24, r28
    29dc:	01 96       	adiw	r24, 0x01	; 1
    29de:	92 d3       	rcall	.+1828   	; 0x3104 <writeCString>
    29e0:	63 e0       	ldi	r22, 0x03	; 3
    29e2:	ce 01       	movw	r24, r28
    29e4:	01 96       	adiw	r24, 0x01	; 1
    29e6:	56 d3       	rcall	.+1708   	; 0x3094 <writeChar>
    29e8:	d1 2c       	mov	r13, r1
    29ea:	f7 01       	movw	r30, r14
    29ec:	81 89       	ldd	r24, Z+17	; 0x11
    29ee:	80 fb       	bst	r24, 0
    29f0:	d1 f8       	bld	r13, 1
    29f2:	92 89       	ldd	r25, Z+18	; 0x12
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	91 11       	cpse	r25, r1
    29f8:	01 c0       	rjmp	.+2      	; 0x29fc <MQTTSerialize_connect+0xac>
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	80 fb       	bst	r24, 0
    29fe:	d2 f8       	bld	r13, 2
    2a00:	d2 fe       	sbrs	r13, 2
    2a02:	0d c0       	rjmp	.+26     	; 0x2a1e <MQTTSerialize_connect+0xce>
    2a04:	f7 01       	movw	r30, r14
    2a06:	82 a5       	ldd	r24, Z+42	; 0x2a
    2a08:	83 70       	andi	r24, 0x03	; 3
    2a0a:	88 0f       	add	r24, r24
    2a0c:	88 0f       	add	r24, r24
    2a0e:	88 0f       	add	r24, r24
    2a10:	9d 2d       	mov	r25, r13
    2a12:	97 7e       	andi	r25, 0xE7	; 231
    2a14:	d9 2e       	mov	r13, r25
    2a16:	d8 2a       	or	r13, r24
    2a18:	81 a5       	ldd	r24, Z+41	; 0x29
    2a1a:	80 fb       	bst	r24, 0
    2a1c:	d5 f8       	bld	r13, 5
    2a1e:	f7 01       	movw	r30, r14
    2a20:	83 a5       	ldd	r24, Z+43	; 0x2b
    2a22:	94 a5       	ldd	r25, Z+44	; 0x2c
    2a24:	89 2b       	or	r24, r25
    2a26:	21 f4       	brne	.+8      	; 0x2a30 <MQTTSerialize_connect+0xe0>
    2a28:	81 a9       	ldd	r24, Z+49	; 0x31
    2a2a:	92 a9       	ldd	r25, Z+50	; 0x32
    2a2c:	89 2b       	or	r24, r25
    2a2e:	11 f0       	breq	.+4      	; 0x2a34 <MQTTSerialize_connect+0xe4>
    2a30:	68 94       	set
    2a32:	d7 f8       	bld	r13, 7
    2a34:	f7 01       	movw	r30, r14
    2a36:	83 a9       	ldd	r24, Z+51	; 0x33
    2a38:	94 a9       	ldd	r25, Z+52	; 0x34
    2a3a:	89 2b       	or	r24, r25
    2a3c:	21 f4       	brne	.+8      	; 0x2a46 <MQTTSerialize_connect+0xf6>
    2a3e:	81 ad       	ldd	r24, Z+57	; 0x39
    2a40:	92 ad       	ldd	r25, Z+58	; 0x3a
    2a42:	89 2b       	or	r24, r25
    2a44:	11 f0       	breq	.+4      	; 0x2a4a <MQTTSerialize_connect+0xfa>
    2a46:	68 94       	set
    2a48:	d6 f8       	bld	r13, 6
    2a4a:	6d 2d       	mov	r22, r13
    2a4c:	ce 01       	movw	r24, r28
    2a4e:	01 96       	adiw	r24, 0x01	; 1
    2a50:	21 d3       	rcall	.+1602   	; 0x3094 <writeChar>
    2a52:	f7 01       	movw	r30, r14
    2a54:	47 85       	ldd	r20, Z+15	; 0x0f
    2a56:	50 89       	ldd	r21, Z+16	; 0x10
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	70 e0       	ldi	r23, 0x00	; 0
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	01 96       	adiw	r24, 0x01	; 1
    2a60:	23 d3       	rcall	.+1606   	; 0x30a8 <writeInt>
    2a62:	f7 01       	movw	r30, r14
    2a64:	07 81       	ldd	r16, Z+7	; 0x07
    2a66:	10 85       	ldd	r17, Z+8	; 0x08
    2a68:	21 85       	ldd	r18, Z+9	; 0x09
    2a6a:	32 85       	ldd	r19, Z+10	; 0x0a
    2a6c:	43 85       	ldd	r20, Z+11	; 0x0b
    2a6e:	54 85       	ldd	r21, Z+12	; 0x0c
    2a70:	65 85       	ldd	r22, Z+13	; 0x0d
    2a72:	76 85       	ldd	r23, Z+14	; 0x0e
    2a74:	ce 01       	movw	r24, r28
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	6d d3       	rcall	.+1754   	; 0x3154 <writeMQTTString>
    2a7a:	f7 01       	movw	r30, r14
    2a7c:	82 89       	ldd	r24, Z+18	; 0x12
    2a7e:	88 23       	and	r24, r24
    2a80:	b9 f0       	breq	.+46     	; 0x2ab0 <MQTTSerialize_connect+0x160>
    2a82:	01 8d       	ldd	r16, Z+25	; 0x19
    2a84:	12 8d       	ldd	r17, Z+26	; 0x1a
    2a86:	23 8d       	ldd	r18, Z+27	; 0x1b
    2a88:	34 8d       	ldd	r19, Z+28	; 0x1c
    2a8a:	45 8d       	ldd	r20, Z+29	; 0x1d
    2a8c:	56 8d       	ldd	r21, Z+30	; 0x1e
    2a8e:	67 8d       	ldd	r22, Z+31	; 0x1f
    2a90:	70 a1       	ldd	r23, Z+32	; 0x20
    2a92:	ce 01       	movw	r24, r28
    2a94:	01 96       	adiw	r24, 0x01	; 1
    2a96:	5e d3       	rcall	.+1724   	; 0x3154 <writeMQTTString>
    2a98:	f7 01       	movw	r30, r14
    2a9a:	01 a1       	ldd	r16, Z+33	; 0x21
    2a9c:	12 a1       	ldd	r17, Z+34	; 0x22
    2a9e:	23 a1       	ldd	r18, Z+35	; 0x23
    2aa0:	34 a1       	ldd	r19, Z+36	; 0x24
    2aa2:	45 a1       	ldd	r20, Z+37	; 0x25
    2aa4:	56 a1       	ldd	r21, Z+38	; 0x26
    2aa6:	67 a1       	ldd	r22, Z+39	; 0x27
    2aa8:	70 a5       	ldd	r23, Z+40	; 0x28
    2aaa:	ce 01       	movw	r24, r28
    2aac:	01 96       	adiw	r24, 0x01	; 1
    2aae:	52 d3       	rcall	.+1700   	; 0x3154 <writeMQTTString>
    2ab0:	7d 2c       	mov	r7, r13
    2ab2:	dd 20       	and	r13, r13
    2ab4:	64 f4       	brge	.+24     	; 0x2ace <MQTTSerialize_connect+0x17e>
    2ab6:	f7 01       	movw	r30, r14
    2ab8:	03 a5       	ldd	r16, Z+43	; 0x2b
    2aba:	14 a5       	ldd	r17, Z+44	; 0x2c
    2abc:	25 a5       	ldd	r18, Z+45	; 0x2d
    2abe:	36 a5       	ldd	r19, Z+46	; 0x2e
    2ac0:	47 a5       	ldd	r20, Z+47	; 0x2f
    2ac2:	50 a9       	ldd	r21, Z+48	; 0x30
    2ac4:	61 a9       	ldd	r22, Z+49	; 0x31
    2ac6:	72 a9       	ldd	r23, Z+50	; 0x32
    2ac8:	ce 01       	movw	r24, r28
    2aca:	01 96       	adiw	r24, 0x01	; 1
    2acc:	43 d3       	rcall	.+1670   	; 0x3154 <writeMQTTString>
    2ace:	76 fe       	sbrs	r7, 6
    2ad0:	0c c0       	rjmp	.+24     	; 0x2aea <MQTTSerialize_connect+0x19a>
    2ad2:	f7 01       	movw	r30, r14
    2ad4:	03 a9       	ldd	r16, Z+51	; 0x33
    2ad6:	14 a9       	ldd	r17, Z+52	; 0x34
    2ad8:	25 a9       	ldd	r18, Z+53	; 0x35
    2ada:	36 a9       	ldd	r19, Z+54	; 0x36
    2adc:	47 a9       	ldd	r20, Z+55	; 0x37
    2ade:	50 ad       	ldd	r21, Z+56	; 0x38
    2ae0:	61 ad       	ldd	r22, Z+57	; 0x39
    2ae2:	72 ad       	ldd	r23, Z+58	; 0x3a
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	01 96       	adiw	r24, 0x01	; 1
    2ae8:	35 d3       	rcall	.+1642   	; 0x3154 <writeMQTTString>
    2aea:	69 81       	ldd	r22, Y+1	; 0x01
    2aec:	7a 81       	ldd	r23, Y+2	; 0x02
    2aee:	6a 19       	sub	r22, r10
    2af0:	7b 09       	sbc	r23, r11
    2af2:	07 2e       	mov	r0, r23
    2af4:	00 0c       	add	r0, r0
    2af6:	88 0b       	sbc	r24, r24
    2af8:	99 0b       	sbc	r25, r25
    2afa:	04 c0       	rjmp	.+8      	; 0x2b04 <MQTTSerialize_connect+0x1b4>
    2afc:	6e ef       	ldi	r22, 0xFE	; 254
    2afe:	7f ef       	ldi	r23, 0xFF	; 255
    2b00:	8f ef       	ldi	r24, 0xFF	; 255
    2b02:	9f ef       	ldi	r25, 0xFF	; 255
    2b04:	26 96       	adiw	r28, 0x06	; 6
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	df 91       	pop	r29
    2b12:	cf 91       	pop	r28
    2b14:	1f 91       	pop	r17
    2b16:	0f 91       	pop	r16
    2b18:	ff 90       	pop	r15
    2b1a:	ef 90       	pop	r14
    2b1c:	df 90       	pop	r13
    2b1e:	bf 90       	pop	r11
    2b20:	af 90       	pop	r10
    2b22:	7f 90       	pop	r7
    2b24:	6f 90       	pop	r6
    2b26:	5f 90       	pop	r5
    2b28:	4f 90       	pop	r4
    2b2a:	08 95       	ret

00002b2c <MQTTDeserialize_connack>:
    2b2c:	ef 92       	push	r14
    2b2e:	ff 92       	push	r15
    2b30:	0f 93       	push	r16
    2b32:	1f 93       	push	r17
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	00 d0       	rcall	.+0      	; 0x2b3a <MQTTDeserialize_connack+0xe>
    2b3a:	00 d0       	rcall	.+0      	; 0x2b3c <MQTTDeserialize_connack+0x10>
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
    2b40:	7c 01       	movw	r14, r24
    2b42:	8b 01       	movw	r16, r22
    2b44:	5a 83       	std	Y+2, r21	; 0x02
    2b46:	49 83       	std	Y+1, r20	; 0x01
    2b48:	ce 01       	movw	r24, r28
    2b4a:	01 96       	adiw	r24, 0x01	; 1
    2b4c:	9b d2       	rcall	.+1334   	; 0x3084 <readChar>
    2b4e:	80 7f       	andi	r24, 0xF0	; 240
    2b50:	80 32       	cpi	r24, 0x20	; 32
    2b52:	19 f5       	brne	.+70     	; 0x2b9a <MQTTDeserialize_connack+0x6e>
    2b54:	be 01       	movw	r22, r28
    2b56:	6d 5f       	subi	r22, 0xFD	; 253
    2b58:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5e:	77 d2       	rcall	.+1262   	; 0x304e <MQTTPacket_decodeBuf>
    2b60:	29 81       	ldd	r18, Y+1	; 0x01
    2b62:	3a 81       	ldd	r19, Y+2	; 0x02
    2b64:	26 0f       	add	r18, r22
    2b66:	37 1f       	adc	r19, r23
    2b68:	3a 83       	std	Y+2, r19	; 0x02
    2b6a:	29 83       	std	Y+1, r18	; 0x01
    2b6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b6e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b70:	22 30       	cpi	r18, 0x02	; 2
    2b72:	31 05       	cpc	r19, r1
    2b74:	ac f0       	brlt	.+42     	; 0x2ba0 <MQTTDeserialize_connack+0x74>
    2b76:	ce 01       	movw	r24, r28
    2b78:	01 96       	adiw	r24, 0x01	; 1
    2b7a:	84 d2       	rcall	.+1288   	; 0x3084 <readChar>
    2b7c:	87 fb       	bst	r24, 7
    2b7e:	88 27       	eor	r24, r24
    2b80:	80 f9       	bld	r24, 0
    2b82:	f7 01       	movw	r30, r14
    2b84:	80 83       	st	Z, r24
    2b86:	ce 01       	movw	r24, r28
    2b88:	01 96       	adiw	r24, 0x01	; 1
    2b8a:	7c d2       	rcall	.+1272   	; 0x3084 <readChar>
    2b8c:	f8 01       	movw	r30, r16
    2b8e:	80 83       	st	Z, r24
    2b90:	61 e0       	ldi	r22, 0x01	; 1
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	03 c0       	rjmp	.+6      	; 0x2ba0 <MQTTDeserialize_connack+0x74>
    2b9a:	60 e0       	ldi	r22, 0x00	; 0
    2b9c:	70 e0       	ldi	r23, 0x00	; 0
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	26 96       	adiw	r28, 0x06	; 6
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	cd bf       	out	0x3d, r28	; 61
    2bac:	df 91       	pop	r29
    2bae:	cf 91       	pop	r28
    2bb0:	1f 91       	pop	r17
    2bb2:	0f 91       	pop	r16
    2bb4:	ff 90       	pop	r15
    2bb6:	ef 90       	pop	r14
    2bb8:	08 95       	ret

00002bba <MQTTSerialize_zero>:
    2bba:	0f 93       	push	r16
    2bbc:	1f 93       	push	r17
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	1f 92       	push	r1
    2bc4:	1f 92       	push	r1
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	9a 83       	std	Y+2, r25	; 0x02
    2bcc:	89 83       	std	Y+1, r24	; 0x01
    2bce:	42 30       	cpi	r20, 0x02	; 2
    2bd0:	51 05       	cpc	r21, r1
    2bd2:	61 05       	cpc	r22, r1
    2bd4:	71 05       	cpc	r23, r1
    2bd6:	c4 f0       	brlt	.+48     	; 0x2c08 <MQTTSerialize_zero+0x4e>
    2bd8:	8c 01       	movw	r16, r24
    2bda:	62 2f       	mov	r22, r18
    2bdc:	62 95       	swap	r22
    2bde:	60 7f       	andi	r22, 0xF0	; 240
    2be0:	ce 01       	movw	r24, r28
    2be2:	01 96       	adiw	r24, 0x01	; 1
    2be4:	57 d2       	rcall	.+1198   	; 0x3094 <writeChar>
    2be6:	40 e0       	ldi	r20, 0x00	; 0
    2be8:	50 e0       	ldi	r21, 0x00	; 0
    2bea:	ba 01       	movw	r22, r20
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf0:	22 d1       	rcall	.+580    	; 0x2e36 <MQTTPacket_encode>
    2bf2:	29 81       	ldd	r18, Y+1	; 0x01
    2bf4:	3a 81       	ldd	r19, Y+2	; 0x02
    2bf6:	62 0f       	add	r22, r18
    2bf8:	73 1f       	adc	r23, r19
    2bfa:	60 1b       	sub	r22, r16
    2bfc:	71 0b       	sbc	r23, r17
    2bfe:	07 2e       	mov	r0, r23
    2c00:	00 0c       	add	r0, r0
    2c02:	88 0b       	sbc	r24, r24
    2c04:	99 0b       	sbc	r25, r25
    2c06:	04 c0       	rjmp	.+8      	; 0x2c10 <MQTTSerialize_zero+0x56>
    2c08:	6e ef       	ldi	r22, 0xFE	; 254
    2c0a:	7f ef       	ldi	r23, 0xFF	; 255
    2c0c:	8f ef       	ldi	r24, 0xFF	; 255
    2c0e:	9f ef       	ldi	r25, 0xFF	; 255
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	1f 91       	pop	r17
    2c1a:	0f 91       	pop	r16
    2c1c:	08 95       	ret

00002c1e <MQTTSerialize_pingreq>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_pingreq(uint8_t* buf, int32_t buflen)
{
  return MQTTSerialize_zero(buf, buflen, PINGREQ);
    2c1e:	2c e0       	ldi	r18, 0x0C	; 12
    2c20:	cc cf       	rjmp	.-104    	; 0x2bba <MQTTSerialize_zero>
}
    2c22:	08 95       	ret

00002c24 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int32_t MQTTDeserialize_publish(uint8_t* dup, uint8_t* qos, uint8_t* retained, uint16_t* packetid, MQTTString* topicName,
		uint8_t** payload, int32_t* payloadlen, uint8_t* buf, int32_t buflen)
{
    2c24:	2f 92       	push	r2
    2c26:	3f 92       	push	r3
    2c28:	4f 92       	push	r4
    2c2a:	5f 92       	push	r5
    2c2c:	6f 92       	push	r6
    2c2e:	7f 92       	push	r7
    2c30:	8f 92       	push	r8
    2c32:	9f 92       	push	r9
    2c34:	af 92       	push	r10
    2c36:	bf 92       	push	r11
    2c38:	cf 92       	push	r12
    2c3a:	df 92       	push	r13
    2c3c:	ef 92       	push	r14
    2c3e:	ff 92       	push	r15
    2c40:	0f 93       	push	r16
    2c42:	1f 93       	push	r17
    2c44:	cf 93       	push	r28
    2c46:	df 93       	push	r29
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	28 97       	sbiw	r28, 0x08	; 8
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	3c 01       	movw	r6, r24
    2c5a:	1b 01       	movw	r2, r22
    2c5c:	2a 01       	movw	r4, r20
    2c5e:	38 87       	std	Y+8, r19	; 0x08
    2c60:	2f 83       	std	Y+7, r18	; 0x07
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    2c62:	ba 82       	std	Y+2, r11	; 0x02
    2c64:	a9 82       	std	Y+1, r10	; 0x01
  uint8_t* enddata = NULL;
  int32_t rc = 0;
  int32_t mylen = 0;
    2c66:	1b 82       	std	Y+3, r1	; 0x03
    2c68:	1c 82       	std	Y+4, r1	; 0x04
    2c6a:	1d 82       	std	Y+5, r1	; 0x05
    2c6c:	1e 82       	std	Y+6, r1	; 0x06

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
    2c6e:	ce 01       	movw	r24, r28
    2c70:	01 96       	adiw	r24, 0x01	; 1
    2c72:	08 d2       	rcall	.+1040   	; 0x3084 <readChar>

  if (header.bits.type != PUBLISH)
    2c74:	98 2f       	mov	r25, r24
    2c76:	90 7f       	andi	r25, 0xF0	; 240
    2c78:	90 33       	cpi	r25, 0x30	; 48
    2c7a:	09 f0       	breq	.+2      	; 0x2c7e <MQTTDeserialize_publish+0x5a>
    2c7c:	52 c0       	rjmp	.+164    	; 0x2d22 <MQTTDeserialize_publish+0xfe>
    goto exit;
	
  *dup = header.bits.dup;
    2c7e:	83 fb       	bst	r24, 3
    2c80:	99 27       	eor	r25, r25
    2c82:	90 f9       	bld	r25, 0
    2c84:	f3 01       	movw	r30, r6
    2c86:	90 83       	st	Z, r25
  *qos = header.bits.qos;
    2c88:	98 2f       	mov	r25, r24
    2c8a:	96 95       	lsr	r25
    2c8c:	93 70       	andi	r25, 0x03	; 3
    2c8e:	f1 01       	movw	r30, r2
    2c90:	90 83       	st	Z, r25
  *retained = header.bits.retain;
    2c92:	81 70       	andi	r24, 0x01	; 1
    2c94:	f2 01       	movw	r30, r4
    2c96:	80 83       	st	Z, r24

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    2c98:	be 01       	movw	r22, r28
    2c9a:	6d 5f       	subi	r22, 0xFD	; 253
    2c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	d5 d1       	rcall	.+938    	; 0x304e <MQTTPacket_decodeBuf>
    2ca4:	4b 01       	movw	r8, r22
    2ca6:	5c 01       	movw	r10, r24
    2ca8:	69 80       	ldd	r6, Y+1	; 0x01
    2caa:	7a 80       	ldd	r7, Y+2	; 0x02
    2cac:	66 0e       	add	r6, r22
    2cae:	77 1e       	adc	r7, r23
    2cb0:	7a 82       	std	Y+2, r7	; 0x02
    2cb2:	69 82       	std	Y+1, r6	; 0x01
  enddata = curdata + mylen;
    2cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb8:	68 0e       	add	r6, r24
    2cba:	79 1e       	adc	r7, r25

  /* do we have enough data to read the protocol version byte? */
  if (!readMQTTLenString(topicName, &curdata, enddata) || enddata - curdata < 0)
    2cbc:	a3 01       	movw	r20, r6
    2cbe:	be 01       	movw	r22, r28
    2cc0:	6f 5f       	subi	r22, 0xFF	; 255
    2cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc4:	c8 01       	movw	r24, r16
    2cc6:	99 d2       	rcall	.+1330   	; 0x31fa <readMQTTLenString>
    2cc8:	67 2b       	or	r22, r23
    2cca:	68 2b       	or	r22, r24
    2ccc:	69 2b       	or	r22, r25
    2cce:	61 f1       	breq	.+88     	; 0x2d28 <MQTTDeserialize_publish+0x104>
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd4:	93 01       	movw	r18, r6
    2cd6:	28 1b       	sub	r18, r24
    2cd8:	39 0b       	sbc	r19, r25
    2cda:	c9 01       	movw	r24, r18
    2cdc:	99 23       	and	r25, r25
    2cde:	24 f1       	brlt	.+72     	; 0x2d28 <MQTTDeserialize_publish+0x104>
    goto exit;

  if (*qos > 0)
    2ce0:	f1 01       	movw	r30, r2
    2ce2:	80 81       	ld	r24, Z
    2ce4:	88 23       	and	r24, r24
    *packetid = readInt(&curdata);
    2ce6:	39 f0       	breq	.+14     	; 0x2cf6 <MQTTDeserialize_publish+0xd2>
    2ce8:	ce 01       	movw	r24, r28
    2cea:	01 96       	adiw	r24, 0x01	; 1
    2cec:	b8 d1       	rcall	.+880    	; 0x305e <readInt>
    2cee:	ef 81       	ldd	r30, Y+7	; 0x07
    2cf0:	f8 85       	ldd	r31, Y+8	; 0x08
    2cf2:	71 83       	std	Z+1, r23	; 0x01
    2cf4:	60 83       	st	Z, r22

  *payloadlen = enddata - curdata;
    2cf6:	29 81       	ldd	r18, Y+1	; 0x01
    2cf8:	3a 81       	ldd	r19, Y+2	; 0x02
    2cfa:	c3 01       	movw	r24, r6
    2cfc:	82 1b       	sub	r24, r18
    2cfe:	93 0b       	sbc	r25, r19
    2d00:	09 2e       	mov	r0, r25
    2d02:	00 0c       	add	r0, r0
    2d04:	aa 0b       	sbc	r26, r26
    2d06:	bb 0b       	sbc	r27, r27
    2d08:	f6 01       	movw	r30, r12
    2d0a:	80 83       	st	Z, r24
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	a2 83       	std	Z+2, r26	; 0x02
    2d10:	b3 83       	std	Z+3, r27	; 0x03
  *payload = curdata;
    2d12:	f7 01       	movw	r30, r14
    2d14:	31 83       	std	Z+1, r19	; 0x01
    2d16:	20 83       	st	Z, r18
  rc = 1;
    2d18:	81 2c       	mov	r8, r1
    2d1a:	91 2c       	mov	r9, r1
    2d1c:	54 01       	movw	r10, r8
    2d1e:	83 94       	inc	r8
    2d20:	03 c0       	rjmp	.+6      	; 0x2d28 <MQTTDeserialize_publish+0x104>
		uint8_t** payload, int32_t* payloadlen, uint8_t* buf, int32_t buflen)
{
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
  uint8_t* enddata = NULL;
  int32_t rc = 0;
    2d22:	81 2c       	mov	r8, r1
    2d24:	91 2c       	mov	r9, r1
    2d26:	54 01       	movw	r10, r8
  *payload = curdata;
  rc = 1;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    2d28:	c5 01       	movw	r24, r10
    2d2a:	b4 01       	movw	r22, r8
    2d2c:	28 96       	adiw	r28, 0x08	; 8
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	cd bf       	out	0x3d, r28	; 61
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	1f 91       	pop	r17
    2d3e:	0f 91       	pop	r16
    2d40:	ff 90       	pop	r15
    2d42:	ef 90       	pop	r14
    2d44:	df 90       	pop	r13
    2d46:	cf 90       	pop	r12
    2d48:	bf 90       	pop	r11
    2d4a:	af 90       	pop	r10
    2d4c:	9f 90       	pop	r9
    2d4e:	8f 90       	pop	r8
    2d50:	7f 90       	pop	r7
    2d52:	6f 90       	pop	r6
    2d54:	5f 90       	pop	r5
    2d56:	4f 90       	pop	r4
    2d58:	3f 90       	pop	r3
    2d5a:	2f 90       	pop	r2
    2d5c:	08 95       	ret

00002d5e <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_ack(uint8_t* packettype, uint8_t* dup, uint16_t* packetid, uint8_t* buf, int32_t buflen)
{
    2d5e:	cf 92       	push	r12
    2d60:	df 92       	push	r13
    2d62:	ef 92       	push	r14
    2d64:	ff 92       	push	r15
    2d66:	0f 93       	push	r16
    2d68:	1f 93       	push	r17
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <MQTTDeserialize_ack+0x12>
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <MQTTDeserialize_ack+0x14>
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	7c 01       	movw	r14, r24
    2d78:	6b 01       	movw	r12, r22
    2d7a:	8a 01       	movw	r16, r20
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    2d7c:	3a 83       	std	Y+2, r19	; 0x02
    2d7e:	29 83       	std	Y+1, r18	; 0x01
  uint8_t* enddata = NULL;
  int32_t rc = 0;
  int32_t mylen;

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
    2d80:	ce 01       	movw	r24, r28
    2d82:	01 96       	adiw	r24, 0x01	; 1
    2d84:	7f d1       	rcall	.+766    	; 0x3084 <readChar>
  *dup = header.bits.dup;
    2d86:	83 fb       	bst	r24, 3
    2d88:	99 27       	eor	r25, r25
    2d8a:	90 f9       	bld	r25, 0
    2d8c:	f6 01       	movw	r30, r12
    2d8e:	90 83       	st	Z, r25
  *packettype = header.bits.type;
    2d90:	82 95       	swap	r24
    2d92:	8f 70       	andi	r24, 0x0F	; 15
    2d94:	f7 01       	movw	r30, r14
    2d96:	80 83       	st	Z, r24

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    2d98:	be 01       	movw	r22, r28
    2d9a:	6d 5f       	subi	r22, 0xFD	; 253
    2d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	9a 81       	ldd	r25, Y+2	; 0x02
    2da2:	55 d1       	rcall	.+682    	; 0x304e <MQTTPacket_decodeBuf>
    2da4:	29 81       	ldd	r18, Y+1	; 0x01
    2da6:	3a 81       	ldd	r19, Y+2	; 0x02
    2da8:	26 0f       	add	r18, r22
    2daa:	37 1f       	adc	r19, r23
    2dac:	3a 83       	std	Y+2, r19	; 0x02
    2dae:	29 83       	std	Y+1, r18	; 0x01
  enddata = curdata + mylen;

  if (enddata - curdata < 2)
    2db0:	2b 81       	ldd	r18, Y+3	; 0x03
    2db2:	3c 81       	ldd	r19, Y+4	; 0x04
    2db4:	22 30       	cpi	r18, 0x02	; 2
    2db6:	31 05       	cpc	r19, r1
    2db8:	54 f0       	brlt	.+20     	; 0x2dce <MQTTDeserialize_ack+0x70>
    goto exit;
	
  *packetid = readInt(&curdata);
    2dba:	ce 01       	movw	r24, r28
    2dbc:	01 96       	adiw	r24, 0x01	; 1
    2dbe:	4f d1       	rcall	.+670    	; 0x305e <readInt>
    2dc0:	f8 01       	movw	r30, r16
    2dc2:	71 83       	std	Z+1, r23	; 0x01
    2dc4:	60 83       	st	Z, r22

  rc = 1;
    2dc6:	61 e0       	ldi	r22, 0x01	; 1
    2dc8:	70 e0       	ldi	r23, 0x00	; 0
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    2dce:	26 96       	adiw	r28, 0x06	; 6
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	df 91       	pop	r29
    2ddc:	cf 91       	pop	r28
    2dde:	1f 91       	pop	r17
    2de0:	0f 91       	pop	r16
    2de2:	ff 90       	pop	r15
    2de4:	ef 90       	pop	r14
    2de6:	df 90       	pop	r13
    2de8:	cf 90       	pop	r12
    2dea:	08 95       	ret

00002dec <bufchar>:

int32_t getLenStringLen(char* ptr)
{
  int32_t len = 256*((uint8_t)(*ptr)) + (uint8_t)(*(ptr+1));
  return len;
}
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	ec 01       	movw	r28, r24
    2df6:	00 e0       	ldi	r16, 0x00	; 0
    2df8:	10 e0       	ldi	r17, 0x00	; 0
    2dfa:	98 01       	movw	r18, r16
    2dfc:	10 c0       	rjmp	.+32     	; 0x2e1e <bufchar+0x32>
    2dfe:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <bufptr>
    2e02:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <bufptr+0x1>
    2e06:	df 01       	movw	r26, r30
    2e08:	11 96       	adiw	r26, 0x01	; 1
    2e0a:	b0 93 34 04 	sts	0x0434, r27	; 0x800434 <bufptr+0x1>
    2e0e:	a0 93 33 04 	sts	0x0433, r26	; 0x800433 <bufptr>
    2e12:	90 81       	ld	r25, Z
    2e14:	98 83       	st	Y, r25
    2e16:	0f 5f       	subi	r16, 0xFF	; 255
    2e18:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1a:	2f 4f       	sbci	r18, 0xFF	; 255
    2e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1e:	04 17       	cp	r16, r20
    2e20:	15 07       	cpc	r17, r21
    2e22:	26 07       	cpc	r18, r22
    2e24:	37 07       	cpc	r19, r23
    2e26:	5c f3       	brlt	.-42     	; 0x2dfe <bufchar+0x12>
    2e28:	cb 01       	movw	r24, r22
    2e2a:	ba 01       	movw	r22, r20
    2e2c:	df 91       	pop	r29
    2e2e:	cf 91       	pop	r28
    2e30:	1f 91       	pop	r17
    2e32:	0f 91       	pop	r16
    2e34:	08 95       	ret

00002e36 <MQTTPacket_encode>:
    2e36:	8f 92       	push	r8
    2e38:	9f 92       	push	r9
    2e3a:	af 92       	push	r10
    2e3c:	bf 92       	push	r11
    2e3e:	cf 92       	push	r12
    2e40:	df 92       	push	r13
    2e42:	ef 92       	push	r14
    2e44:	ff 92       	push	r15
    2e46:	0f 93       	push	r16
    2e48:	1f 93       	push	r17
    2e4a:	c1 2c       	mov	r12, r1
    2e4c:	d1 2c       	mov	r13, r1
    2e4e:	76 01       	movw	r14, r12
    2e50:	02 c0       	rjmp	.+4      	; 0x2e56 <MQTTPacket_encode+0x20>
    2e52:	75 01       	movw	r14, r10
    2e54:	64 01       	movw	r12, r8
    2e56:	8a 01       	movw	r16, r20
    2e58:	9b 01       	movw	r18, r22
    2e5a:	0f 77       	andi	r16, 0x7F	; 127
    2e5c:	11 27       	eor	r17, r17
    2e5e:	22 27       	eor	r18, r18
    2e60:	30 78       	andi	r19, 0x80	; 128
    2e62:	33 23       	and	r19, r19
    2e64:	64 f4       	brge	.+24     	; 0x2e7e <MQTTPacket_encode+0x48>
    2e66:	01 50       	subi	r16, 0x01	; 1
    2e68:	11 09       	sbc	r17, r1
    2e6a:	21 09       	sbc	r18, r1
    2e6c:	31 09       	sbc	r19, r1
    2e6e:	00 68       	ori	r16, 0x80	; 128
    2e70:	1f 6f       	ori	r17, 0xFF	; 255
    2e72:	2f 6f       	ori	r18, 0xFF	; 255
    2e74:	3f 6f       	ori	r19, 0xFF	; 255
    2e76:	0f 5f       	subi	r16, 0xFF	; 255
    2e78:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7a:	2f 4f       	sbci	r18, 0xFF	; 255
    2e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e7e:	4a 01       	movw	r8, r20
    2e80:	5b 01       	movw	r10, r22
    2e82:	77 23       	and	r23, r23
    2e84:	2c f4       	brge	.+10     	; 0x2e90 <MQTTPacket_encode+0x5a>
    2e86:	2f e7       	ldi	r18, 0x7F	; 127
    2e88:	82 0e       	add	r8, r18
    2e8a:	91 1c       	adc	r9, r1
    2e8c:	a1 1c       	adc	r10, r1
    2e8e:	b1 1c       	adc	r11, r1
    2e90:	b5 01       	movw	r22, r10
    2e92:	a4 01       	movw	r20, r8
    2e94:	68 94       	set
    2e96:	16 f8       	bld	r1, 6
    2e98:	75 95       	asr	r23
    2e9a:	67 95       	ror	r22
    2e9c:	57 95       	ror	r21
    2e9e:	47 95       	ror	r20
    2ea0:	16 94       	lsr	r1
    2ea2:	d1 f7       	brne	.-12     	; 0x2e98 <MQTTPacket_encode+0x62>
    2ea4:	14 16       	cp	r1, r20
    2ea6:	15 06       	cpc	r1, r21
    2ea8:	16 06       	cpc	r1, r22
    2eaa:	17 06       	cpc	r1, r23
    2eac:	0c f4       	brge	.+2      	; 0x2eb0 <MQTTPacket_encode+0x7a>
    2eae:	00 68       	ori	r16, 0x80	; 128
    2eb0:	46 01       	movw	r8, r12
    2eb2:	57 01       	movw	r10, r14
    2eb4:	2f ef       	ldi	r18, 0xFF	; 255
    2eb6:	82 1a       	sub	r8, r18
    2eb8:	92 0a       	sbc	r9, r18
    2eba:	a2 0a       	sbc	r10, r18
    2ebc:	b2 0a       	sbc	r11, r18
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	ec 0d       	add	r30, r12
    2ec2:	fd 1d       	adc	r31, r13
    2ec4:	00 83       	st	Z, r16
    2ec6:	14 16       	cp	r1, r20
    2ec8:	15 06       	cpc	r1, r21
    2eca:	16 06       	cpc	r1, r22
    2ecc:	17 06       	cpc	r1, r23
    2ece:	0c f2       	brlt	.-126    	; 0x2e52 <MQTTPacket_encode+0x1c>
    2ed0:	c5 01       	movw	r24, r10
    2ed2:	b4 01       	movw	r22, r8
    2ed4:	1f 91       	pop	r17
    2ed6:	0f 91       	pop	r16
    2ed8:	ff 90       	pop	r15
    2eda:	ef 90       	pop	r14
    2edc:	df 90       	pop	r13
    2ede:	cf 90       	pop	r12
    2ee0:	bf 90       	pop	r11
    2ee2:	af 90       	pop	r10
    2ee4:	9f 90       	pop	r9
    2ee6:	8f 90       	pop	r8
    2ee8:	08 95       	ret

00002eea <MQTTPacket_decode>:
    2eea:	4f 92       	push	r4
    2eec:	5f 92       	push	r5
    2eee:	6f 92       	push	r6
    2ef0:	7f 92       	push	r7
    2ef2:	9f 92       	push	r9
    2ef4:	af 92       	push	r10
    2ef6:	bf 92       	push	r11
    2ef8:	cf 92       	push	r12
    2efa:	df 92       	push	r13
    2efc:	ef 92       	push	r14
    2efe:	ff 92       	push	r15
    2f00:	0f 93       	push	r16
    2f02:	1f 93       	push	r17
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	1f 92       	push	r1
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	5c 01       	movw	r10, r24
    2f10:	8b 01       	movw	r16, r22
    2f12:	db 01       	movw	r26, r22
    2f14:	1d 92       	st	X+, r1
    2f16:	1d 92       	st	X+, r1
    2f18:	1d 92       	st	X+, r1
    2f1a:	1c 92       	st	X, r1
    2f1c:	13 97       	sbiw	r26, 0x03	; 3
    2f1e:	41 2c       	mov	r4, r1
    2f20:	51 2c       	mov	r5, r1
    2f22:	32 01       	movw	r6, r4
    2f24:	c1 2c       	mov	r12, r1
    2f26:	d1 2c       	mov	r13, r1
    2f28:	76 01       	movw	r14, r12
    2f2a:	c3 94       	inc	r12
    2f2c:	bf ef       	ldi	r27, 0xFF	; 255
    2f2e:	4b 1a       	sub	r4, r27
    2f30:	5b 0a       	sbc	r5, r27
    2f32:	6b 0a       	sbc	r6, r27
    2f34:	7b 0a       	sbc	r7, r27
    2f36:	e5 e0       	ldi	r30, 0x05	; 5
    2f38:	4e 16       	cp	r4, r30
    2f3a:	51 04       	cpc	r5, r1
    2f3c:	61 04       	cpc	r6, r1
    2f3e:	71 04       	cpc	r7, r1
    2f40:	0c f0       	brlt	.+2      	; 0x2f44 <MQTTPacket_decode+0x5a>
    2f42:	44 c0       	rjmp	.+136    	; 0x2fcc <MQTTPacket_decode+0xe2>
    2f44:	41 e0       	ldi	r20, 0x01	; 1
    2f46:	50 e0       	ldi	r21, 0x00	; 0
    2f48:	60 e0       	ldi	r22, 0x00	; 0
    2f4a:	70 e0       	ldi	r23, 0x00	; 0
    2f4c:	ce 01       	movw	r24, r28
    2f4e:	01 96       	adiw	r24, 0x01	; 1
    2f50:	f5 01       	movw	r30, r10
    2f52:	19 95       	eicall
    2f54:	61 30       	cpi	r22, 0x01	; 1
    2f56:	71 05       	cpc	r23, r1
    2f58:	81 05       	cpc	r24, r1
    2f5a:	91 05       	cpc	r25, r1
    2f5c:	b9 f5       	brne	.+110    	; 0x2fcc <MQTTPacket_decode+0xe2>
    2f5e:	99 80       	ldd	r9, Y+1	; 0x01
    2f60:	a9 2d       	mov	r26, r9
    2f62:	af 77       	andi	r26, 0x7F	; 127
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	a7 01       	movw	r20, r14
    2f68:	96 01       	movw	r18, r12
    2f6a:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__muluhisi3>
    2f6e:	d8 01       	movw	r26, r16
    2f70:	2d 91       	ld	r18, X+
    2f72:	3d 91       	ld	r19, X+
    2f74:	4d 91       	ld	r20, X+
    2f76:	5c 91       	ld	r21, X
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	82 0f       	add	r24, r18
    2f7e:	93 1f       	adc	r25, r19
    2f80:	a4 1f       	adc	r26, r20
    2f82:	b5 1f       	adc	r27, r21
    2f84:	f8 01       	movw	r30, r16
    2f86:	80 83       	st	Z, r24
    2f88:	91 83       	std	Z+1, r25	; 0x01
    2f8a:	a2 83       	std	Z+2, r26	; 0x02
    2f8c:	b3 83       	std	Z+3, r27	; 0x03
    2f8e:	cc 0c       	add	r12, r12
    2f90:	dd 1c       	adc	r13, r13
    2f92:	ee 1c       	adc	r14, r14
    2f94:	ff 1c       	adc	r15, r15
    2f96:	cc 0c       	add	r12, r12
    2f98:	dd 1c       	adc	r13, r13
    2f9a:	ee 1c       	adc	r14, r14
    2f9c:	ff 1c       	adc	r15, r15
    2f9e:	cc 0c       	add	r12, r12
    2fa0:	dd 1c       	adc	r13, r13
    2fa2:	ee 1c       	adc	r14, r14
    2fa4:	ff 1c       	adc	r15, r15
    2fa6:	cc 0c       	add	r12, r12
    2fa8:	dd 1c       	adc	r13, r13
    2faa:	ee 1c       	adc	r14, r14
    2fac:	ff 1c       	adc	r15, r15
    2fae:	cc 0c       	add	r12, r12
    2fb0:	dd 1c       	adc	r13, r13
    2fb2:	ee 1c       	adc	r14, r14
    2fb4:	ff 1c       	adc	r15, r15
    2fb6:	cc 0c       	add	r12, r12
    2fb8:	dd 1c       	adc	r13, r13
    2fba:	ee 1c       	adc	r14, r14
    2fbc:	ff 1c       	adc	r15, r15
    2fbe:	cc 0c       	add	r12, r12
    2fc0:	dd 1c       	adc	r13, r13
    2fc2:	ee 1c       	adc	r14, r14
    2fc4:	ff 1c       	adc	r15, r15
    2fc6:	99 20       	and	r9, r9
    2fc8:	0c f4       	brge	.+2      	; 0x2fcc <MQTTPacket_decode+0xe2>
    2fca:	b0 cf       	rjmp	.-160    	; 0x2f2c <MQTTPacket_decode+0x42>
    2fcc:	c3 01       	movw	r24, r6
    2fce:	b2 01       	movw	r22, r4
    2fd0:	0f 90       	pop	r0
    2fd2:	df 91       	pop	r29
    2fd4:	cf 91       	pop	r28
    2fd6:	1f 91       	pop	r17
    2fd8:	0f 91       	pop	r16
    2fda:	ff 90       	pop	r15
    2fdc:	ef 90       	pop	r14
    2fde:	df 90       	pop	r13
    2fe0:	cf 90       	pop	r12
    2fe2:	bf 90       	pop	r11
    2fe4:	af 90       	pop	r10
    2fe6:	9f 90       	pop	r9
    2fe8:	7f 90       	pop	r7
    2fea:	6f 90       	pop	r6
    2fec:	5f 90       	pop	r5
    2fee:	4f 90       	pop	r4
    2ff0:	08 95       	ret

00002ff2 <MQTTPacket_len>:
    2ff2:	0f 93       	push	r16
    2ff4:	1f 93       	push	r17
    2ff6:	8b 01       	movw	r16, r22
    2ff8:	9c 01       	movw	r18, r24
    2ffa:	0f 5f       	subi	r16, 0xFF	; 255
    2ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ffe:	2f 4f       	sbci	r18, 0xFF	; 255
    3000:	3f 4f       	sbci	r19, 0xFF	; 255
    3002:	00 38       	cpi	r16, 0x80	; 128
    3004:	11 05       	cpc	r17, r1
    3006:	21 05       	cpc	r18, r1
    3008:	31 05       	cpc	r19, r1
    300a:	2c f4       	brge	.+10     	; 0x3016 <MQTTPacket_len+0x24>
    300c:	6e 5f       	subi	r22, 0xFE	; 254
    300e:	7f 4f       	sbci	r23, 0xFF	; 255
    3010:	8f 4f       	sbci	r24, 0xFF	; 255
    3012:	9f 4f       	sbci	r25, 0xFF	; 255
    3014:	19 c0       	rjmp	.+50     	; 0x3048 <MQTTPacket_len+0x56>
    3016:	01 15       	cp	r16, r1
    3018:	40 e4       	ldi	r20, 0x40	; 64
    301a:	14 07       	cpc	r17, r20
    301c:	21 05       	cpc	r18, r1
    301e:	31 05       	cpc	r19, r1
    3020:	2c f4       	brge	.+10     	; 0x302c <MQTTPacket_len+0x3a>
    3022:	6d 5f       	subi	r22, 0xFD	; 253
    3024:	7f 4f       	sbci	r23, 0xFF	; 255
    3026:	8f 4f       	sbci	r24, 0xFF	; 255
    3028:	9f 4f       	sbci	r25, 0xFF	; 255
    302a:	0e c0       	rjmp	.+28     	; 0x3048 <MQTTPacket_len+0x56>
    302c:	0f 3f       	cpi	r16, 0xFF	; 255
    302e:	1f 4f       	sbci	r17, 0xFF	; 255
    3030:	2f 41       	sbci	r18, 0x1F	; 31
    3032:	31 05       	cpc	r19, r1
    3034:	2c f4       	brge	.+10     	; 0x3040 <MQTTPacket_len+0x4e>
    3036:	6c 5f       	subi	r22, 0xFC	; 252
    3038:	7f 4f       	sbci	r23, 0xFF	; 255
    303a:	8f 4f       	sbci	r24, 0xFF	; 255
    303c:	9f 4f       	sbci	r25, 0xFF	; 255
    303e:	04 c0       	rjmp	.+8      	; 0x3048 <MQTTPacket_len+0x56>
    3040:	6b 5f       	subi	r22, 0xFB	; 251
    3042:	7f 4f       	sbci	r23, 0xFF	; 255
    3044:	8f 4f       	sbci	r24, 0xFF	; 255
    3046:	9f 4f       	sbci	r25, 0xFF	; 255
    3048:	1f 91       	pop	r17
    304a:	0f 91       	pop	r16
    304c:	08 95       	ret

0000304e <MQTTPacket_decodeBuf>:
    304e:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <bufptr+0x1>
    3052:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <bufptr>
    3056:	86 ef       	ldi	r24, 0xF6	; 246
    3058:	96 e1       	ldi	r25, 0x16	; 22
    305a:	47 cf       	rjmp	.-370    	; 0x2eea <MQTTPacket_decode>
    305c:	08 95       	ret

0000305e <readInt>:
    305e:	dc 01       	movw	r26, r24
    3060:	ed 91       	ld	r30, X+
    3062:	fc 91       	ld	r31, X
    3064:	11 97       	sbiw	r26, 0x01	; 1
    3066:	60 81       	ld	r22, Z
    3068:	70 e0       	ldi	r23, 0x00	; 0
    306a:	76 2f       	mov	r23, r22
    306c:	66 27       	eor	r22, r22
    306e:	81 81       	ldd	r24, Z+1	; 0x01
    3070:	68 0f       	add	r22, r24
    3072:	71 1d       	adc	r23, r1
    3074:	07 2e       	mov	r0, r23
    3076:	00 0c       	add	r0, r0
    3078:	88 0b       	sbc	r24, r24
    307a:	99 0b       	sbc	r25, r25
    307c:	32 96       	adiw	r30, 0x02	; 2
    307e:	ed 93       	st	X+, r30
    3080:	fc 93       	st	X, r31
    3082:	08 95       	ret

00003084 <readChar>:
    3084:	dc 01       	movw	r26, r24
    3086:	ed 91       	ld	r30, X+
    3088:	fc 91       	ld	r31, X
    308a:	11 97       	sbiw	r26, 0x01	; 1
    308c:	81 91       	ld	r24, Z+
    308e:	ed 93       	st	X+, r30
    3090:	fc 93       	st	X, r31
    3092:	08 95       	ret

00003094 <writeChar>:
    3094:	fc 01       	movw	r30, r24
    3096:	a0 81       	ld	r26, Z
    3098:	b1 81       	ldd	r27, Z+1	; 0x01
    309a:	6c 93       	st	X, r22
    309c:	80 81       	ld	r24, Z
    309e:	91 81       	ldd	r25, Z+1	; 0x01
    30a0:	01 96       	adiw	r24, 0x01	; 1
    30a2:	91 83       	std	Z+1, r25	; 0x01
    30a4:	80 83       	st	Z, r24
    30a6:	08 95       	ret

000030a8 <writeInt>:
    30a8:	cf 93       	push	r28
    30aa:	df 93       	push	r29
    30ac:	fc 01       	movw	r30, r24
    30ae:	c0 81       	ld	r28, Z
    30b0:	d1 81       	ldd	r29, Z+1	; 0x01
    30b2:	db 01       	movw	r26, r22
    30b4:	ca 01       	movw	r24, r20
    30b6:	77 23       	and	r23, r23
    30b8:	24 f4       	brge	.+8      	; 0x30c2 <writeInt+0x1a>
    30ba:	81 50       	subi	r24, 0x01	; 1
    30bc:	9f 4f       	sbci	r25, 0xFF	; 255
    30be:	af 4f       	sbci	r26, 0xFF	; 255
    30c0:	bf 4f       	sbci	r27, 0xFF	; 255
    30c2:	98 83       	st	Y, r25
    30c4:	a0 81       	ld	r26, Z
    30c6:	b1 81       	ldd	r27, Z+1	; 0x01
    30c8:	cd 01       	movw	r24, r26
    30ca:	01 96       	adiw	r24, 0x01	; 1
    30cc:	91 83       	std	Z+1, r25	; 0x01
    30ce:	80 83       	st	Z, r24
    30d0:	55 27       	eor	r21, r21
    30d2:	66 27       	eor	r22, r22
    30d4:	70 78       	andi	r23, 0x80	; 128
    30d6:	77 23       	and	r23, r23
    30d8:	5c f4       	brge	.+22     	; 0x30f0 <writeInt+0x48>
    30da:	41 50       	subi	r20, 0x01	; 1
    30dc:	51 09       	sbc	r21, r1
    30de:	61 09       	sbc	r22, r1
    30e0:	71 09       	sbc	r23, r1
    30e2:	5f 6f       	ori	r21, 0xFF	; 255
    30e4:	6f 6f       	ori	r22, 0xFF	; 255
    30e6:	7f 6f       	ori	r23, 0xFF	; 255
    30e8:	4f 5f       	subi	r20, 0xFF	; 255
    30ea:	5f 4f       	sbci	r21, 0xFF	; 255
    30ec:	6f 4f       	sbci	r22, 0xFF	; 255
    30ee:	7f 4f       	sbci	r23, 0xFF	; 255
    30f0:	11 96       	adiw	r26, 0x01	; 1
    30f2:	4c 93       	st	X, r20
    30f4:	80 81       	ld	r24, Z
    30f6:	91 81       	ldd	r25, Z+1	; 0x01
    30f8:	01 96       	adiw	r24, 0x01	; 1
    30fa:	91 83       	std	Z+1, r25	; 0x01
    30fc:	80 83       	st	Z, r24
    30fe:	df 91       	pop	r29
    3100:	cf 91       	pop	r28
    3102:	08 95       	ret

00003104 <writeCString>:
    3104:	ef 92       	push	r14
    3106:	ff 92       	push	r15
    3108:	0f 93       	push	r16
    310a:	1f 93       	push	r17
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
    3110:	8c 01       	movw	r16, r24
    3112:	7b 01       	movw	r14, r22
    3114:	eb 01       	movw	r28, r22
    3116:	09 90       	ld	r0, Y+
    3118:	00 20       	and	r0, r0
    311a:	e9 f7       	brne	.-6      	; 0x3116 <writeCString+0x12>
    311c:	21 97       	sbiw	r28, 0x01	; 1
    311e:	c6 1b       	sub	r28, r22
    3120:	d7 0b       	sbc	r29, r23
    3122:	ae 01       	movw	r20, r28
    3124:	60 e0       	ldi	r22, 0x00	; 0
    3126:	70 e0       	ldi	r23, 0x00	; 0
    3128:	bf df       	rcall	.-130    	; 0x30a8 <writeInt>
    312a:	ae 01       	movw	r20, r28
    312c:	b7 01       	movw	r22, r14
    312e:	f8 01       	movw	r30, r16
    3130:	80 81       	ld	r24, Z
    3132:	91 81       	ldd	r25, Z+1	; 0x01
    3134:	0e 94 a9 31 	call	0x6352	; 0x6352 <memcpy>
    3138:	f8 01       	movw	r30, r16
    313a:	80 81       	ld	r24, Z
    313c:	91 81       	ldd	r25, Z+1	; 0x01
    313e:	c8 0f       	add	r28, r24
    3140:	d9 1f       	adc	r29, r25
    3142:	d1 83       	std	Z+1, r29	; 0x01
    3144:	c0 83       	st	Z, r28
    3146:	df 91       	pop	r29
    3148:	cf 91       	pop	r28
    314a:	1f 91       	pop	r17
    314c:	0f 91       	pop	r16
    314e:	ff 90       	pop	r15
    3150:	ef 90       	pop	r14
    3152:	08 95       	ret

00003154 <writeMQTTString>:


void writeMQTTString(uint8_t** pptr, MQTTString mqttstring)
{
    3154:	af 92       	push	r10
    3156:	bf 92       	push	r11
    3158:	cf 92       	push	r12
    315a:	df 92       	push	r13
    315c:	ef 92       	push	r14
    315e:	ff 92       	push	r15
    3160:	0f 93       	push	r16
    3162:	1f 93       	push	r17
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	cd b7       	in	r28, 0x3d	; 61
    316a:	de b7       	in	r29, 0x3e	; 62
    316c:	28 97       	sbiw	r28, 0x08	; 8
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	5c 01       	movw	r10, r24
    317a:	09 83       	std	Y+1, r16	; 0x01
    317c:	1a 83       	std	Y+2, r17	; 0x02
    317e:	2b 83       	std	Y+3, r18	; 0x03
    3180:	3c 83       	std	Y+4, r19	; 0x04
    3182:	4d 83       	std	Y+5, r20	; 0x05
    3184:	5e 83       	std	Y+6, r21	; 0x06
    3186:	6f 83       	std	Y+7, r22	; 0x07
    3188:	78 87       	std	Y+8, r23	; 0x08
  if (mqttstring.lenstring.len > 0)
    318a:	cb 80       	ldd	r12, Y+3	; 0x03
    318c:	dc 80       	ldd	r13, Y+4	; 0x04
    318e:	ed 80       	ldd	r14, Y+5	; 0x05
    3190:	fe 80       	ldd	r15, Y+6	; 0x06
    3192:	1c 14       	cp	r1, r12
    3194:	1d 04       	cpc	r1, r13
    3196:	1e 04       	cpc	r1, r14
    3198:	1f 04       	cpc	r1, r15
    319a:	9c f4       	brge	.+38     	; 0x31c2 <writeMQTTString+0x6e>
  {
    writeInt(pptr, mqttstring.lenstring.len);
    319c:	b7 01       	movw	r22, r14
    319e:	a6 01       	movw	r20, r12
    31a0:	83 df       	rcall	.-250    	; 0x30a8 <writeInt>
    memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
    31a2:	6f 81       	ldd	r22, Y+7	; 0x07
    31a4:	78 85       	ldd	r23, Y+8	; 0x08
    31a6:	a6 01       	movw	r20, r12
    31a8:	f5 01       	movw	r30, r10
    31aa:	80 81       	ld	r24, Z
    31ac:	91 81       	ldd	r25, Z+1	; 0x01
    31ae:	0e 94 a9 31 	call	0x6352	; 0x6352 <memcpy>
    *pptr += mqttstring.lenstring.len;
    31b2:	f5 01       	movw	r30, r10
    31b4:	80 81       	ld	r24, Z
    31b6:	91 81       	ldd	r25, Z+1	; 0x01
    31b8:	c8 0e       	add	r12, r24
    31ba:	d9 1e       	adc	r13, r25
    31bc:	d1 82       	std	Z+1, r13	; 0x01
    31be:	c0 82       	st	Z, r12
    31c0:	0b c0       	rjmp	.+22     	; 0x31d8 <writeMQTTString+0x84>
  }
  else if (mqttstring.cstring)
    31c2:	69 81       	ldd	r22, Y+1	; 0x01
    31c4:	7a 81       	ldd	r23, Y+2	; 0x02
    31c6:	61 15       	cp	r22, r1
    31c8:	71 05       	cpc	r23, r1
    writeCString(pptr, mqttstring.cstring);
    31ca:	11 f0       	breq	.+4      	; 0x31d0 <writeMQTTString+0x7c>
    31cc:	9b df       	rcall	.-202    	; 0x3104 <writeCString>
    31ce:	04 c0       	rjmp	.+8      	; 0x31d8 <writeMQTTString+0x84>
  else
    writeInt(pptr, 0);
    31d0:	40 e0       	ldi	r20, 0x00	; 0
    31d2:	50 e0       	ldi	r21, 0x00	; 0
    31d4:	ba 01       	movw	r22, r20
    31d6:	68 df       	rcall	.-304    	; 0x30a8 <writeInt>
}
    31d8:	28 96       	adiw	r28, 0x08	; 8
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	de bf       	out	0x3e, r29	; 62
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	cd bf       	out	0x3d, r28	; 61
    31e4:	df 91       	pop	r29
    31e6:	cf 91       	pop	r28
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	ff 90       	pop	r15
    31ee:	ef 90       	pop	r14
    31f0:	df 90       	pop	r13
    31f2:	cf 90       	pop	r12
    31f4:	bf 90       	pop	r11
    31f6:	af 90       	pop	r10
    31f8:	08 95       	ret

000031fa <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int32_t readMQTTLenString(MQTTString* mqttstring, uint8_t** pptr, uint8_t* enddata)
{
    31fa:	ef 92       	push	r14
    31fc:	ff 92       	push	r15
    31fe:	0f 93       	push	r16
    3200:	1f 93       	push	r17
    3202:	cf 93       	push	r28
    3204:	df 93       	push	r29
    3206:	8c 01       	movw	r16, r24
    3208:	eb 01       	movw	r28, r22
    320a:	7a 01       	movw	r14, r20
  int32_t rc = 0;

  FUNC_ENTRY;

  /* the first two bytes are the length of the string */
  if (enddata - (*pptr) > 1) /* enough length to read the integer? */
    320c:	88 81       	ld	r24, Y
    320e:	99 81       	ldd	r25, Y+1	; 0x01
    3210:	9a 01       	movw	r18, r20
    3212:	28 1b       	sub	r18, r24
    3214:	39 0b       	sbc	r19, r25
    3216:	22 30       	cpi	r18, 0x02	; 2
    3218:	31 05       	cpc	r19, r1
    321a:	e4 f0       	brlt	.+56     	; 0x3254 <readMQTTLenString+0x5a>
  {
    mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
    321c:	cb 01       	movw	r24, r22
    321e:	1f df       	rcall	.-450    	; 0x305e <readInt>
    3220:	f8 01       	movw	r30, r16
    3222:	62 83       	std	Z+2, r22	; 0x02
    3224:	73 83       	std	Z+3, r23	; 0x03
    3226:	84 83       	std	Z+4, r24	; 0x04
    3228:	95 83       	std	Z+5, r25	; 0x05
	
    if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    322a:	28 81       	ld	r18, Y
    322c:	39 81       	ldd	r19, Y+1	; 0x01
    322e:	a9 01       	movw	r20, r18
    3230:	46 0f       	add	r20, r22
    3232:	57 1f       	adc	r21, r23
    3234:	e4 16       	cp	r14, r20
    3236:	f5 06       	cpc	r15, r21
    3238:	88 f0       	brcs	.+34     	; 0x325c <readMQTTLenString+0x62>
    {
      mqttstring->lenstring.data = (char*)*pptr;
    323a:	37 83       	std	Z+7, r19	; 0x07
    323c:	26 83       	std	Z+6, r18	; 0x06
      *pptr += mqttstring->lenstring.len;
    323e:	28 81       	ld	r18, Y
    3240:	39 81       	ldd	r19, Y+1	; 0x01
    3242:	62 0f       	add	r22, r18
    3244:	73 1f       	adc	r23, r19
    3246:	79 83       	std	Y+1, r23	; 0x01
    3248:	68 83       	st	Y, r22
      rc = 1;
    324a:	61 e0       	ldi	r22, 0x01	; 1
    324c:	70 e0       	ldi	r23, 0x00	; 0
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	07 c0       	rjmp	.+14     	; 0x3262 <readMQTTLenString+0x68>
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int32_t readMQTTLenString(MQTTString* mqttstring, uint8_t** pptr, uint8_t* enddata)
{
  int32_t rc = 0;
    3254:	60 e0       	ldi	r22, 0x00	; 0
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	cb 01       	movw	r24, r22
    325a:	03 c0       	rjmp	.+6      	; 0x3262 <readMQTTLenString+0x68>
    325c:	60 e0       	ldi	r22, 0x00	; 0
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	cb 01       	movw	r24, r22
      *pptr += mqttstring->lenstring.len;
      rc = 1;
    }
  }

  mqttstring->cstring = NULL;
    3262:	f8 01       	movw	r30, r16
    3264:	11 82       	std	Z+1, r1	; 0x01
    3266:	10 82       	st	Z, r1
  FUNC_EXIT_RC(rc);
  return rc;
}
    3268:	df 91       	pop	r29
    326a:	cf 91       	pop	r28
    326c:	1f 91       	pop	r17
    326e:	0f 91       	pop	r16
    3270:	ff 90       	pop	r15
    3272:	ef 90       	pop	r14
    3274:	08 95       	ret

00003276 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int32_t MQTTstrlen(MQTTString mqttstring)
{
    3276:	cf 93       	push	r28
    3278:	df 93       	push	r29
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	28 97       	sbiw	r28, 0x08	; 8
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	de bf       	out	0x3e, r29	; 62
    3286:	0f be       	out	0x3f, r0	; 63
    3288:	cd bf       	out	0x3d, r28	; 61
    328a:	29 83       	std	Y+1, r18	; 0x01
    328c:	3a 83       	std	Y+2, r19	; 0x02
    328e:	4b 83       	std	Y+3, r20	; 0x03
    3290:	5c 83       	std	Y+4, r21	; 0x04
    3292:	6d 83       	std	Y+5, r22	; 0x05
    3294:	7e 83       	std	Y+6, r23	; 0x06
    3296:	8f 83       	std	Y+7, r24	; 0x07
    3298:	98 87       	std	Y+8, r25	; 0x08
  int rc = 0;

  if (mqttstring.cstring)
    329a:	e9 81       	ldd	r30, Y+1	; 0x01
    329c:	fa 81       	ldd	r31, Y+2	; 0x02
    329e:	30 97       	sbiw	r30, 0x00	; 0
    32a0:	49 f0       	breq	.+18     	; 0x32b4 <MQTTstrlen+0x3e>
    rc = strlen(mqttstring.cstring);
    32a2:	df 01       	movw	r26, r30
    32a4:	0d 90       	ld	r0, X+
    32a6:	00 20       	and	r0, r0
    32a8:	e9 f7       	brne	.-6      	; 0x32a4 <MQTTstrlen+0x2e>
    32aa:	11 97       	sbiw	r26, 0x01	; 1
    32ac:	bd 01       	movw	r22, r26
    32ae:	6e 1b       	sub	r22, r30
    32b0:	7f 0b       	sbc	r23, r31
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <MQTTstrlen+0x42>
  else
    rc = mqttstring.lenstring.len;
    32b4:	6b 81       	ldd	r22, Y+3	; 0x03
    32b6:	7c 81       	ldd	r23, Y+4	; 0x04
	
  return rc;
    32b8:	07 2e       	mov	r0, r23
    32ba:	00 0c       	add	r0, r0
    32bc:	88 0b       	sbc	r24, r24
    32be:	99 0b       	sbc	r25, r25
}
    32c0:	28 96       	adiw	r28, 0x08	; 8
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	de bf       	out	0x3e, r29	; 62
    32c8:	0f be       	out	0x3f, r0	; 63
    32ca:	cd bf       	out	0x3d, r28	; 61
    32cc:	df 91       	pop	r29
    32ce:	cf 91       	pop	r28
    32d0:	08 95       	ret

000032d2 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int32_t MQTTPacket_equals(MQTTString* a, char* bptr)
{
    32d2:	0f 93       	push	r16
    32d4:	1f 93       	push	r17
    32d6:	cf 93       	push	r28
    32d8:	df 93       	push	r29
    32da:	eb 01       	movw	r28, r22
  int32_t alen = 0, blen = 0;
  char *aptr;
	
  if (a->cstring)
    32dc:	fc 01       	movw	r30, r24
    32de:	a0 81       	ld	r26, Z
    32e0:	b1 81       	ldd	r27, Z+1	; 0x01
    32e2:	10 97       	sbiw	r26, 0x00	; 0
    32e4:	59 f0       	breq	.+22     	; 0x32fc <MQTTPacket_equals+0x2a>
  {
    aptr = a->cstring;
    alen = strlen(a->cstring);
    32e6:	fd 01       	movw	r30, r26
    32e8:	01 90       	ld	r0, Z+
    32ea:	00 20       	and	r0, r0
    32ec:	e9 f7       	brne	.-6      	; 0x32e8 <MQTTPacket_equals+0x16>
    32ee:	31 97       	sbiw	r30, 0x01	; 1
    32f0:	af 01       	movw	r20, r30
    32f2:	4a 1b       	sub	r20, r26
    32f4:	5b 0b       	sbc	r21, r27
    32f6:	60 e0       	ldi	r22, 0x00	; 0
    32f8:	70 e0       	ldi	r23, 0x00	; 0
    32fa:	07 c0       	rjmp	.+14     	; 0x330a <MQTTPacket_equals+0x38>
  }
  else
  {
    aptr = a->lenstring.data;
    32fc:	fc 01       	movw	r30, r24
    32fe:	a6 81       	ldd	r26, Z+6	; 0x06
    3300:	b7 81       	ldd	r27, Z+7	; 0x07
    alen = a->lenstring.len;
    3302:	42 81       	ldd	r20, Z+2	; 0x02
    3304:	53 81       	ldd	r21, Z+3	; 0x03
    3306:	64 81       	ldd	r22, Z+4	; 0x04
    3308:	75 81       	ldd	r23, Z+5	; 0x05
  }

  blen = strlen(bptr);
    330a:	fe 01       	movw	r30, r28
    330c:	01 90       	ld	r0, Z+
    330e:	00 20       	and	r0, r0
    3310:	e9 f7       	brne	.-6      	; 0x330c <MQTTPacket_equals+0x3a>
    3312:	31 97       	sbiw	r30, 0x01	; 1
    3314:	8f 01       	movw	r16, r30
    3316:	0c 1b       	sub	r16, r28
    3318:	1d 0b       	sbc	r17, r29
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
	
  return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    331e:	40 17       	cp	r20, r16
    3320:	51 07       	cpc	r21, r17
    3322:	62 07       	cpc	r22, r18
    3324:	73 07       	cpc	r23, r19
    3326:	49 f4       	brne	.+18     	; 0x333a <MQTTPacket_equals+0x68>
    3328:	be 01       	movw	r22, r28
    332a:	cd 01       	movw	r24, r26
    332c:	0e 94 b2 31 	call	0x6364	; 0x6364 <strncmp>
    3330:	89 2b       	or	r24, r25
    3332:	31 f0       	breq	.+12     	; 0x3340 <MQTTPacket_equals+0x6e>
    3334:	60 e0       	ldi	r22, 0x00	; 0
    3336:	70 e0       	ldi	r23, 0x00	; 0
    3338:	05 c0       	rjmp	.+10     	; 0x3344 <MQTTPacket_equals+0x72>
    333a:	60 e0       	ldi	r22, 0x00	; 0
    333c:	70 e0       	ldi	r23, 0x00	; 0
    333e:	02 c0       	rjmp	.+4      	; 0x3344 <MQTTPacket_equals+0x72>
    3340:	61 e0       	ldi	r22, 0x01	; 1
    3342:	70 e0       	ldi	r23, 0x00	; 0
    3344:	07 2e       	mov	r0, r23
    3346:	00 0c       	add	r0, r0
    3348:	88 0b       	sbc	r24, r24
    334a:	99 0b       	sbc	r25, r25
}
    334c:	df 91       	pop	r29
    334e:	cf 91       	pop	r28
    3350:	1f 91       	pop	r17
    3352:	0f 91       	pop	r16
    3354:	08 95       	ret

00003356 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_ack(uint8_t* buf, int32_t buflen, uint8_t packettype, uint8_t dup, uint16_t packetid)
{
    3356:	ef 92       	push	r14
    3358:	ff 92       	push	r15
    335a:	0f 93       	push	r16
    335c:	1f 93       	push	r17
    335e:	cf 93       	push	r28
    3360:	df 93       	push	r29
    3362:	1f 92       	push	r1
    3364:	1f 92       	push	r1
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
    336a:	fc 01       	movw	r30, r24
  MQTTHeader header = {0};
  int32_t rc = 0;
  uint8_t *ptr = buf;
    336c:	fa 83       	std	Y+2, r31	; 0x02
    336e:	e9 83       	std	Y+1, r30	; 0x01

  FUNC_ENTRY;

  if (buflen < 4)
    3370:	44 30       	cpi	r20, 0x04	; 4
    3372:	51 05       	cpc	r21, r1
    3374:	61 05       	cpc	r22, r1
    3376:	71 05       	cpc	r23, r1
    3378:	7c f1       	brlt	.+94     	; 0x33d8 <MQTTSerialize_ack+0x82>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.bits.type = packettype;
    337a:	82 2f       	mov	r24, r18
    337c:	82 95       	swap	r24
    337e:	80 7f       	andi	r24, 0xF0	; 240
  header.bits.dup = dup;
    3380:	00 fb       	bst	r16, 0
    3382:	83 f9       	bld	r24, 3
  header.bits.qos = (packettype == PUBREL) ? 1 : 0;
    3384:	91 e0       	ldi	r25, 0x01	; 1
    3386:	26 30       	cpi	r18, 0x06	; 6
    3388:	09 f0       	breq	.+2      	; 0x338c <MQTTSerialize_ack+0x36>
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	8f 01       	movw	r16, r30
    338e:	99 0f       	add	r25, r25
    3390:	68 2f       	mov	r22, r24
    3392:	69 7f       	andi	r22, 0xF9	; 249
    3394:	86 2f       	mov	r24, r22
    3396:	89 2b       	or	r24, r25
  writeChar(&ptr, header.byte); /* write header */
    3398:	68 2f       	mov	r22, r24
    339a:	ce 01       	movw	r24, r28
    339c:	01 96       	adiw	r24, 0x01	; 1
    339e:	7a de       	rcall	.-780    	; 0x3094 <writeChar>

  ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
    33a0:	42 e0       	ldi	r20, 0x02	; 2
    33a2:	50 e0       	ldi	r21, 0x00	; 0
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	70 e0       	ldi	r23, 0x00	; 0
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	9a 81       	ldd	r25, Y+2	; 0x02
    33ac:	44 dd       	rcall	.-1400   	; 0x2e36 <MQTTPacket_encode>
    33ae:	29 81       	ldd	r18, Y+1	; 0x01
    33b0:	3a 81       	ldd	r19, Y+2	; 0x02
    33b2:	62 0f       	add	r22, r18
    33b4:	73 1f       	adc	r23, r19
    33b6:	7a 83       	std	Y+2, r23	; 0x02
    33b8:	69 83       	std	Y+1, r22	; 0x01
  writeInt(&ptr, packetid);
    33ba:	a7 01       	movw	r20, r14
    33bc:	60 e0       	ldi	r22, 0x00	; 0
    33be:	70 e0       	ldi	r23, 0x00	; 0
    33c0:	ce 01       	movw	r24, r28
    33c2:	01 96       	adiw	r24, 0x01	; 1
    33c4:	71 de       	rcall	.-798    	; 0x30a8 <writeInt>
  rc = ptr - buf;
    33c6:	69 81       	ldd	r22, Y+1	; 0x01
    33c8:	7a 81       	ldd	r23, Y+2	; 0x02
    33ca:	60 1b       	sub	r22, r16
    33cc:	71 0b       	sbc	r23, r17
    33ce:	07 2e       	mov	r0, r23
    33d0:	00 0c       	add	r0, r0
    33d2:	88 0b       	sbc	r24, r24
    33d4:	99 0b       	sbc	r25, r25
    33d6:	04 c0       	rjmp	.+8      	; 0x33e0 <MQTTSerialize_ack+0x8a>

  FUNC_ENTRY;

  if (buflen < 4)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    33d8:	6e ef       	ldi	r22, 0xFE	; 254
    33da:	7f ef       	ldi	r23, 0xFF	; 255
    33dc:	8f ef       	ldi	r24, 0xFF	; 255
    33de:	9f ef       	ldi	r25, 0xFF	; 255
  writeInt(&ptr, packetid);
  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	df 91       	pop	r29
    33e6:	cf 91       	pop	r28
    33e8:	1f 91       	pop	r17
    33ea:	0f 91       	pop	r16
    33ec:	ff 90       	pop	r15
    33ee:	ef 90       	pop	r14
    33f0:	08 95       	ret

000033f2 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
    33f2:	4f 92       	push	r4
    33f4:	5f 92       	push	r5
    33f6:	6f 92       	push	r6
    33f8:	7f 92       	push	r7
    33fa:	8f 92       	push	r8
    33fc:	9f 92       	push	r9
    33fe:	af 92       	push	r10
    3400:	bf 92       	push	r11
    3402:	cf 92       	push	r12
    3404:	df 92       	push	r13
    3406:	ef 92       	push	r14
    3408:	ff 92       	push	r15
    340a:	cf 93       	push	r28
    340c:	df 93       	push	r29
    340e:	2b 01       	movw	r4, r22
    3410:	3c 01       	movw	r6, r24
    3412:	ea 01       	movw	r28, r20
  int32_t len = 2; /* packetid */

  for (int32_t i = 0; i < count; ++i)
    3414:	c1 2c       	mov	r12, r1
    3416:	d1 2c       	mov	r13, r1
    3418:	76 01       	movw	r14, r12
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
  int32_t len = 2; /* packetid */
    341a:	81 2c       	mov	r8, r1
    341c:	91 2c       	mov	r9, r1
    341e:	54 01       	movw	r10, r8
    3420:	68 94       	set
    3422:	81 f8       	bld	r8, 1

  for (int32_t i = 0; i < count; ++i)
    3424:	20 c0       	rjmp	.+64     	; 0x3466 <MQTTSerialize_subscribeLength+0x74>
    len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
    3426:	f6 01       	movw	r30, r12
    3428:	ee 0f       	add	r30, r30
    342a:	ff 1f       	adc	r31, r31
    342c:	ee 0f       	add	r30, r30
    342e:	ff 1f       	adc	r31, r31
    3430:	ee 0f       	add	r30, r30
    3432:	ff 1f       	adc	r31, r31
    3434:	ec 0f       	add	r30, r28
    3436:	fd 1f       	adc	r31, r29
    3438:	20 81       	ld	r18, Z
    343a:	31 81       	ldd	r19, Z+1	; 0x01
    343c:	42 81       	ldd	r20, Z+2	; 0x02
    343e:	53 81       	ldd	r21, Z+3	; 0x03
    3440:	64 81       	ldd	r22, Z+4	; 0x04
    3442:	75 81       	ldd	r23, Z+5	; 0x05
    3444:	86 81       	ldd	r24, Z+6	; 0x06
    3446:	97 81       	ldd	r25, Z+7	; 0x07
    3448:	16 df       	rcall	.-468    	; 0x3276 <MQTTstrlen>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	03 96       	adiw	r24, 0x03	; 3
    3450:	a1 1d       	adc	r26, r1
    3452:	b1 1d       	adc	r27, r1
    3454:	88 0e       	add	r8, r24
    3456:	99 1e       	adc	r9, r25
    3458:	aa 1e       	adc	r10, r26
    345a:	bb 1e       	adc	r11, r27
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
  int32_t len = 2; /* packetid */

  for (int32_t i = 0; i < count; ++i)
    345c:	8f ef       	ldi	r24, 0xFF	; 255
    345e:	c8 1a       	sub	r12, r24
    3460:	d8 0a       	sbc	r13, r24
    3462:	e8 0a       	sbc	r14, r24
    3464:	f8 0a       	sbc	r15, r24
    3466:	c4 14       	cp	r12, r4
    3468:	d5 04       	cpc	r13, r5
    346a:	e6 04       	cpc	r14, r6
    346c:	f7 04       	cpc	r15, r7
    346e:	dc f2       	brlt	.-74     	; 0x3426 <MQTTSerialize_subscribeLength+0x34>
    len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
	
  return len;
}
    3470:	c5 01       	movw	r24, r10
    3472:	b4 01       	movw	r22, r8
    3474:	df 91       	pop	r29
    3476:	cf 91       	pop	r28
    3478:	ff 90       	pop	r15
    347a:	ef 90       	pop	r14
    347c:	df 90       	pop	r13
    347e:	cf 90       	pop	r12
    3480:	bf 90       	pop	r11
    3482:	af 90       	pop	r10
    3484:	9f 90       	pop	r9
    3486:	8f 90       	pop	r8
    3488:	7f 90       	pop	r7
    348a:	6f 90       	pop	r6
    348c:	5f 90       	pop	r5
    348e:	4f 90       	pop	r4
    3490:	08 95       	ret

00003492 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int32_t MQTTSerialize_subscribe(uint8_t* buf, int32_t buflen, uint8_t dup, uint16_t packetid, int32_t count,
		MQTTString topicFilters[], int32_t requestedQoSs[])
{
    3492:	2f 92       	push	r2
    3494:	3f 92       	push	r3
    3496:	4f 92       	push	r4
    3498:	5f 92       	push	r5
    349a:	6f 92       	push	r6
    349c:	7f 92       	push	r7
    349e:	8f 92       	push	r8
    34a0:	9f 92       	push	r9
    34a2:	af 92       	push	r10
    34a4:	bf 92       	push	r11
    34a6:	cf 92       	push	r12
    34a8:	df 92       	push	r13
    34aa:	ef 92       	push	r14
    34ac:	ff 92       	push	r15
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	27 97       	sbiw	r28, 0x07	; 7
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	de bf       	out	0x3e, r29	; 62
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	cd bf       	out	0x3d, r28	; 61
    34c6:	1c 01       	movw	r2, r24
    34c8:	2a 01       	movw	r4, r20
    34ca:	3b 01       	movw	r6, r22
    34cc:	2f 83       	std	Y+7, r18	; 0x07
  uint8_t *ptr = buf;
    34ce:	9a 83       	std	Y+2, r25	; 0x02
    34d0:	89 83       	std	Y+1, r24	; 0x01
  int32_t rem_len = 0;
  int32_t rc = 0;

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
    34d2:	a5 01       	movw	r20, r10
    34d4:	c7 01       	movw	r24, r14
    34d6:	b6 01       	movw	r22, r12
    34d8:	8c df       	rcall	.-232    	; 0x33f2 <MQTTSerialize_subscribeLength>
    34da:	6b 83       	std	Y+3, r22	; 0x03
    34dc:	7c 83       	std	Y+4, r23	; 0x04
    34de:	8d 83       	std	Y+5, r24	; 0x05
    34e0:	9e 83       	std	Y+6, r25	; 0x06
    34e2:	87 dd       	rcall	.-1266   	; 0x2ff2 <MQTTPacket_len>
    34e4:	46 16       	cp	r4, r22
    34e6:	57 06       	cpc	r5, r23
    34e8:	68 06       	cpc	r6, r24
    34ea:	79 06       	cpc	r7, r25
    34ec:	0c f4       	brge	.+2      	; 0x34f0 <MQTTSerialize_subscribe+0x5e>
    34ee:	52 c0       	rjmp	.+164    	; 0x3594 <MQTTSerialize_subscribe+0x102>
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.byte = 0;
  header.bits.type = SUBSCRIBE;
    34f0:	60 e8       	ldi	r22, 0x80	; 128
  header.bits.dup = dup;
    34f2:	8f 81       	ldd	r24, Y+7	; 0x07
    34f4:	80 fb       	bst	r24, 0
    34f6:	63 f9       	bld	r22, 3
  header.bits.qos = 1;
    34f8:	69 7f       	andi	r22, 0xF9	; 249
    34fa:	62 60       	ori	r22, 0x02	; 2
  writeChar(&ptr, header.byte); /* write header */
    34fc:	ce 01       	movw	r24, r28
    34fe:	01 96       	adiw	r24, 0x01	; 1
    3500:	c9 dd       	rcall	.-1134   	; 0x3094 <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    3502:	4b 81       	ldd	r20, Y+3	; 0x03
    3504:	5c 81       	ldd	r21, Y+4	; 0x04
    3506:	6d 81       	ldd	r22, Y+5	; 0x05
    3508:	7e 81       	ldd	r23, Y+6	; 0x06
    350a:	89 81       	ldd	r24, Y+1	; 0x01
    350c:	9a 81       	ldd	r25, Y+2	; 0x02
    350e:	93 dc       	rcall	.-1754   	; 0x2e36 <MQTTPacket_encode>
    3510:	29 81       	ldd	r18, Y+1	; 0x01
    3512:	3a 81       	ldd	r19, Y+2	; 0x02
    3514:	62 0f       	add	r22, r18
    3516:	73 1f       	adc	r23, r19
    3518:	7a 83       	std	Y+2, r23	; 0x02
    351a:	69 83       	std	Y+1, r22	; 0x01

  writeInt(&ptr, packetid);
    351c:	a8 01       	movw	r20, r16
    351e:	60 e0       	ldi	r22, 0x00	; 0
    3520:	70 e0       	ldi	r23, 0x00	; 0
    3522:	ce 01       	movw	r24, r28
    3524:	01 96       	adiw	r24, 0x01	; 1
    3526:	c0 dd       	rcall	.-1152   	; 0x30a8 <writeInt>

  for (int32_t i = 0; i < count; ++i)
    3528:	41 2c       	mov	r4, r1
    352a:	51 2c       	mov	r5, r1
    352c:	32 01       	movw	r6, r4
    352e:	24 c0       	rjmp	.+72     	; 0x3578 <MQTTSerialize_subscribe+0xe6>
  {
    writeMQTTString(&ptr, topicFilters[i]);
    3530:	f2 01       	movw	r30, r4
    3532:	ee 0f       	add	r30, r30
    3534:	ff 1f       	adc	r31, r31
    3536:	ee 0f       	add	r30, r30
    3538:	ff 1f       	adc	r31, r31
    353a:	ee 0f       	add	r30, r30
    353c:	ff 1f       	adc	r31, r31
    353e:	ea 0d       	add	r30, r10
    3540:	fb 1d       	adc	r31, r11
    3542:	00 81       	ld	r16, Z
    3544:	11 81       	ldd	r17, Z+1	; 0x01
    3546:	22 81       	ldd	r18, Z+2	; 0x02
    3548:	33 81       	ldd	r19, Z+3	; 0x03
    354a:	44 81       	ldd	r20, Z+4	; 0x04
    354c:	55 81       	ldd	r21, Z+5	; 0x05
    354e:	66 81       	ldd	r22, Z+6	; 0x06
    3550:	77 81       	ldd	r23, Z+7	; 0x07
    3552:	ce 01       	movw	r24, r28
    3554:	01 96       	adiw	r24, 0x01	; 1
    3556:	fe dd       	rcall	.-1028   	; 0x3154 <writeMQTTString>
    writeChar(&ptr, requestedQoSs[i]);
    3558:	f2 01       	movw	r30, r4
    355a:	ee 0f       	add	r30, r30
    355c:	ff 1f       	adc	r31, r31
    355e:	ee 0f       	add	r30, r30
    3560:	ff 1f       	adc	r31, r31
    3562:	e8 0d       	add	r30, r8
    3564:	f9 1d       	adc	r31, r9
    3566:	60 81       	ld	r22, Z
    3568:	ce 01       	movw	r24, r28
    356a:	01 96       	adiw	r24, 0x01	; 1
    356c:	93 dd       	rcall	.-1242   	; 0x3094 <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;

  writeInt(&ptr, packetid);

  for (int32_t i = 0; i < count; ++i)
    356e:	8f ef       	ldi	r24, 0xFF	; 255
    3570:	48 1a       	sub	r4, r24
    3572:	58 0a       	sbc	r5, r24
    3574:	68 0a       	sbc	r6, r24
    3576:	78 0a       	sbc	r7, r24
    3578:	4c 14       	cp	r4, r12
    357a:	5d 04       	cpc	r5, r13
    357c:	6e 04       	cpc	r6, r14
    357e:	7f 04       	cpc	r7, r15
    3580:	bc f2       	brlt	.-82     	; 0x3530 <MQTTSerialize_subscribe+0x9e>
  {
    writeMQTTString(&ptr, topicFilters[i]);
    writeChar(&ptr, requestedQoSs[i]);
  }

  rc = ptr - buf;
    3582:	69 81       	ldd	r22, Y+1	; 0x01
    3584:	7a 81       	ldd	r23, Y+2	; 0x02
    3586:	62 19       	sub	r22, r2
    3588:	73 09       	sbc	r23, r3
    358a:	07 2e       	mov	r0, r23
    358c:	00 0c       	add	r0, r0
    358e:	88 0b       	sbc	r24, r24
    3590:	99 0b       	sbc	r25, r25
    3592:	04 c0       	rjmp	.+8      	; 0x359c <MQTTSerialize_subscribe+0x10a>

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    3594:	6e ef       	ldi	r22, 0xFE	; 254
    3596:	7f ef       	ldi	r23, 0xFF	; 255
    3598:	8f ef       	ldi	r24, 0xFF	; 255
    359a:	9f ef       	ldi	r25, 0xFF	; 255

  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    359c:	27 96       	adiw	r28, 0x07	; 7
    359e:	0f b6       	in	r0, 0x3f	; 63
    35a0:	f8 94       	cli
    35a2:	de bf       	out	0x3e, r29	; 62
    35a4:	0f be       	out	0x3f, r0	; 63
    35a6:	cd bf       	out	0x3d, r28	; 61
    35a8:	df 91       	pop	r29
    35aa:	cf 91       	pop	r28
    35ac:	1f 91       	pop	r17
    35ae:	0f 91       	pop	r16
    35b0:	ff 90       	pop	r15
    35b2:	ef 90       	pop	r14
    35b4:	df 90       	pop	r13
    35b6:	cf 90       	pop	r12
    35b8:	bf 90       	pop	r11
    35ba:	af 90       	pop	r10
    35bc:	9f 90       	pop	r9
    35be:	8f 90       	pop	r8
    35c0:	7f 90       	pop	r7
    35c2:	6f 90       	pop	r6
    35c4:	5f 90       	pop	r5
    35c6:	4f 90       	pop	r4
    35c8:	3f 90       	pop	r3
    35ca:	2f 90       	pop	r2
    35cc:	08 95       	ret

000035ce <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_suback(uint16_t* packetid, int32_t maxcount, int32_t* count, int32_t grantedQoSs[], uint8_t* buf, int32_t buflen)
{
    35ce:	4f 92       	push	r4
    35d0:	5f 92       	push	r5
    35d2:	6f 92       	push	r6
    35d4:	7f 92       	push	r7
    35d6:	8f 92       	push	r8
    35d8:	9f 92       	push	r9
    35da:	af 92       	push	r10
    35dc:	bf 92       	push	r11
    35de:	cf 92       	push	r12
    35e0:	df 92       	push	r13
    35e2:	ef 92       	push	r14
    35e4:	ff 92       	push	r15
    35e6:	0f 93       	push	r16
    35e8:	1f 93       	push	r17
    35ea:	cf 93       	push	r28
    35ec:	df 93       	push	r29
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <MQTTDeserialize_suback+0x22>
    35f0:	00 d0       	rcall	.+0      	; 0x35f2 <MQTTDeserialize_suback+0x24>
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	4c 01       	movw	r8, r24
    35f8:	2a 01       	movw	r4, r20
    35fa:	3b 01       	movw	r6, r22
    35fc:	69 01       	movw	r12, r18
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    35fe:	fa 82       	std	Y+2, r15	; 0x02
    3600:	e9 82       	std	Y+1, r14	; 0x01
  int32_t rc = 0;
  int32_t mylen;

  FUNC_ENTRY;

  header.byte = readChar(&curdata);
    3602:	ce 01       	movw	r24, r28
    3604:	01 96       	adiw	r24, 0x01	; 1
    3606:	3e dd       	rcall	.-1412   	; 0x3084 <readChar>
  if (header.bits.type != SUBACK)
    3608:	80 7f       	andi	r24, 0xF0	; 240
    360a:	80 39       	cpi	r24, 0x90	; 144
    360c:	09 f0       	breq	.+2      	; 0x3610 <MQTTDeserialize_suback+0x42>
    360e:	53 c0       	rjmp	.+166    	; 0x36b6 <MQTTDeserialize_suback+0xe8>
    goto exit;

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    3610:	be 01       	movw	r22, r28
    3612:	6d 5f       	subi	r22, 0xFD	; 253
    3614:	7f 4f       	sbci	r23, 0xFF	; 255
    3616:	89 81       	ldd	r24, Y+1	; 0x01
    3618:	9a 81       	ldd	r25, Y+2	; 0x02
    361a:	19 dd       	rcall	.-1486   	; 0x304e <MQTTPacket_decodeBuf>
    361c:	29 81       	ldd	r18, Y+1	; 0x01
    361e:	3a 81       	ldd	r19, Y+2	; 0x02
    3620:	26 0f       	add	r18, r22
    3622:	37 1f       	adc	r19, r23
    3624:	3a 83       	std	Y+2, r19	; 0x02
    3626:	29 83       	std	Y+1, r18	; 0x01
  enddata = curdata + mylen;
    3628:	ab 80       	ldd	r10, Y+3	; 0x03
    362a:	bc 80       	ldd	r11, Y+4	; 0x04
    362c:	a2 0e       	add	r10, r18
    362e:	b3 1e       	adc	r11, r19

  if (enddata - curdata < 2)
    3630:	a5 01       	movw	r20, r10
    3632:	42 1b       	sub	r20, r18
    3634:	53 0b       	sbc	r21, r19
    3636:	42 30       	cpi	r20, 0x02	; 2
    3638:	51 05       	cpc	r21, r1
    363a:	0c f4       	brge	.+2      	; 0x363e <MQTTDeserialize_suback+0x70>
    363c:	43 c0       	rjmp	.+134    	; 0x36c4 <MQTTDeserialize_suback+0xf6>
    goto exit;

  *packetid = readInt(&curdata);
    363e:	ce 01       	movw	r24, r28
    3640:	01 96       	adiw	r24, 0x01	; 1
    3642:	0d dd       	rcall	.-1510   	; 0x305e <readInt>
    3644:	f4 01       	movw	r30, r8
    3646:	71 83       	std	Z+1, r23	; 0x01
    3648:	60 83       	st	Z, r22

  *count = 0;
    364a:	f6 01       	movw	r30, r12
    364c:	10 82       	st	Z, r1
    364e:	11 82       	std	Z+1, r1	; 0x01
    3650:	12 82       	std	Z+2, r1	; 0x02
    3652:	13 82       	std	Z+3, r1	; 0x03

  while (curdata < enddata)
    3654:	26 c0       	rjmp	.+76     	; 0x36a2 <MQTTDeserialize_suback+0xd4>
  {
    if (*count > maxcount)
    3656:	f6 01       	movw	r30, r12
    3658:	80 81       	ld	r24, Z
    365a:	91 81       	ldd	r25, Z+1	; 0x01
    365c:	a2 81       	ldd	r26, Z+2	; 0x02
    365e:	b3 81       	ldd	r27, Z+3	; 0x03
    3660:	48 16       	cp	r4, r24
    3662:	59 06       	cpc	r5, r25
    3664:	6a 06       	cpc	r6, r26
    3666:	7b 06       	cpc	r7, r27
    3668:	54 f1       	brlt	.+84     	; 0x36be <MQTTDeserialize_suback+0xf0>
    {
      rc = -1;
      goto exit;
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
    366a:	ac 01       	movw	r20, r24
    366c:	bd 01       	movw	r22, r26
    366e:	4f 5f       	subi	r20, 0xFF	; 255
    3670:	5f 4f       	sbci	r21, 0xFF	; 255
    3672:	6f 4f       	sbci	r22, 0xFF	; 255
    3674:	7f 4f       	sbci	r23, 0xFF	; 255
    3676:	40 83       	st	Z, r20
    3678:	51 83       	std	Z+1, r21	; 0x01
    367a:	62 83       	std	Z+2, r22	; 0x02
    367c:	73 83       	std	Z+3, r23	; 0x03
    367e:	88 0f       	add	r24, r24
    3680:	99 1f       	adc	r25, r25
    3682:	88 0f       	add	r24, r24
    3684:	99 1f       	adc	r25, r25
    3686:	78 01       	movw	r14, r16
    3688:	e8 0e       	add	r14, r24
    368a:	f9 1e       	adc	r15, r25
    368c:	ce 01       	movw	r24, r28
    368e:	01 96       	adiw	r24, 0x01	; 1
    3690:	f9 dc       	rcall	.-1550   	; 0x3084 <readChar>
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	a0 e0       	ldi	r26, 0x00	; 0
    3696:	b0 e0       	ldi	r27, 0x00	; 0
    3698:	f7 01       	movw	r30, r14
    369a:	80 83       	st	Z, r24
    369c:	91 83       	std	Z+1, r25	; 0x01
    369e:	a2 83       	std	Z+2, r26	; 0x02
    36a0:	b3 83       	std	Z+3, r27	; 0x03

  *packetid = readInt(&curdata);

  *count = 0;

  while (curdata < enddata)
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	9a 81       	ldd	r25, Y+2	; 0x02
    36a6:	8a 15       	cp	r24, r10
    36a8:	9b 05       	cpc	r25, r11
    36aa:	a8 f2       	brcs	.-86     	; 0x3656 <MQTTDeserialize_suback+0x88>
      goto exit;
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
  }

  rc = 1;
    36ac:	61 e0       	ldi	r22, 0x01	; 1
    36ae:	70 e0       	ldi	r23, 0x00	; 0
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	07 c0       	rjmp	.+14     	; 0x36c4 <MQTTDeserialize_suback+0xf6>
int32_t MQTTDeserialize_suback(uint16_t* packetid, int32_t maxcount, int32_t* count, int32_t grantedQoSs[], uint8_t* buf, int32_t buflen)
{
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
  uint8_t* enddata = NULL;
  int32_t rc = 0;
    36b6:	60 e0       	ldi	r22, 0x00	; 0
    36b8:	70 e0       	ldi	r23, 0x00	; 0
    36ba:	cb 01       	movw	r24, r22
    36bc:	03 c0       	rjmp	.+6      	; 0x36c4 <MQTTDeserialize_suback+0xf6>

  while (curdata < enddata)
  {
    if (*count > maxcount)
    {
      rc = -1;
    36be:	6f ef       	ldi	r22, 0xFF	; 255
    36c0:	7f ef       	ldi	r23, 0xFF	; 255
    36c2:	cb 01       	movw	r24, r22

  rc = 1;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    36c4:	26 96       	adiw	r28, 0x06	; 6
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	f8 94       	cli
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	cd bf       	out	0x3d, r28	; 61
    36d0:	df 91       	pop	r29
    36d2:	cf 91       	pop	r28
    36d4:	1f 91       	pop	r17
    36d6:	0f 91       	pop	r16
    36d8:	ff 90       	pop	r15
    36da:	ef 90       	pop	r14
    36dc:	df 90       	pop	r13
    36de:	cf 90       	pop	r12
    36e0:	bf 90       	pop	r11
    36e2:	af 90       	pop	r10
    36e4:	9f 90       	pop	r9
    36e6:	8f 90       	pop	r8
    36e8:	7f 90       	pop	r7
    36ea:	6f 90       	pop	r6
    36ec:	5f 90       	pop	r5
    36ee:	4f 90       	pop	r4
    36f0:	08 95       	ret

000036f2 <w5500_read>:
  n->mqttwrite = w5500_write;
  n->disconnect = w5500_disconnect;
}

int32_t w5500_read(Network* n, uint8_t* buffer, int32_t len, int32_t timeout_ms)
{
    36f2:	cf 92       	push	r12
    36f4:	df 92       	push	r13
    36f6:	ef 92       	push	r14
    36f8:	ff 92       	push	r15
    36fa:	0f 93       	push	r16
    36fc:	1f 93       	push	r17
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	ec 01       	movw	r28, r24
    3704:	8b 01       	movw	r16, r22
    3706:	69 01       	movw	r12, r18
    3708:	7a 01       	movw	r14, r20
  if ((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket) > 0))
    370a:	88 81       	ld	r24, Y
    370c:	99 81       	ldd	r25, Y+1	; 0x01
    370e:	aa 81       	ldd	r26, Y+2	; 0x02
    3710:	bb 81       	ldd	r27, Y+3	; 0x03
    3712:	88 0f       	add	r24, r24
    3714:	99 1f       	adc	r25, r25
    3716:	aa 1f       	adc	r26, r26
    3718:	bb 1f       	adc	r27, r27
    371a:	88 0f       	add	r24, r24
    371c:	99 1f       	adc	r25, r25
    371e:	aa 1f       	adc	r26, r26
    3720:	bb 1f       	adc	r27, r27
    3722:	01 96       	adiw	r24, 0x01	; 1
    3724:	a1 1d       	adc	r26, r1
    3726:	b1 1d       	adc	r27, r1
    3728:	88 0f       	add	r24, r24
    372a:	99 1f       	adc	r25, r25
    372c:	aa 1f       	adc	r26, r26
    372e:	bb 1f       	adc	r27, r27
    3730:	88 0f       	add	r24, r24
    3732:	99 1f       	adc	r25, r25
    3734:	aa 1f       	adc	r26, r26
    3736:	bb 1f       	adc	r27, r27
    3738:	88 0f       	add	r24, r24
    373a:	99 1f       	adc	r25, r25
    373c:	aa 1f       	adc	r26, r26
    373e:	bb 1f       	adc	r27, r27
    3740:	bc 01       	movw	r22, r24
    3742:	cd 01       	movw	r24, r26
    3744:	7d 5f       	subi	r23, 0xFD	; 253
    3746:	8f 4f       	sbci	r24, 0xFF	; 255
    3748:	9f 4f       	sbci	r25, 0xFF	; 255
    374a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <WIZCHIP_READ>
    374e:	87 31       	cpi	r24, 0x17	; 23
    3750:	59 f4       	brne	.+22     	; 0x3768 <w5500_read+0x76>
    3752:	88 81       	ld	r24, Y
    3754:	0e 94 b7 08 	call	0x116e	; 0x116e <getSn_RX_RSR>
    3758:	89 2b       	or	r24, r25
    375a:	51 f0       	breq	.+20     	; 0x3770 <w5500_read+0x7e>
    return recv(n->my_socket, buffer, len);
    375c:	a6 01       	movw	r20, r12
    375e:	b8 01       	movw	r22, r16
    3760:	88 81       	ld	r24, Y
    3762:	0e 94 be 05 	call	0xb7c	; 0xb7c <recv>
    3766:	07 c0       	rjmp	.+14     	; 0x3776 <w5500_read+0x84>
  
  return 0;
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	70 e0       	ldi	r23, 0x00	; 0
    376c:	cb 01       	movw	r24, r22
    376e:	03 c0       	rjmp	.+6      	; 0x3776 <w5500_read+0x84>
    3770:	60 e0       	ldi	r22, 0x00	; 0
    3772:	70 e0       	ldi	r23, 0x00	; 0
    3774:	cb 01       	movw	r24, r22
}
    3776:	df 91       	pop	r29
    3778:	cf 91       	pop	r28
    377a:	1f 91       	pop	r17
    377c:	0f 91       	pop	r16
    377e:	ff 90       	pop	r15
    3780:	ef 90       	pop	r14
    3782:	df 90       	pop	r13
    3784:	cf 90       	pop	r12
    3786:	08 95       	ret

00003788 <w5500_write>:

int32_t w5500_write(Network* n, uint8_t* buffer, int32_t len, int32_t timeout_ms)
{
    3788:	cf 92       	push	r12
    378a:	df 92       	push	r13
    378c:	ef 92       	push	r14
    378e:	ff 92       	push	r15
    3790:	0f 93       	push	r16
    3792:	1f 93       	push	r17
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29
    3798:	ec 01       	movw	r28, r24
    379a:	8b 01       	movw	r16, r22
    379c:	69 01       	movw	r12, r18
    379e:	7a 01       	movw	r14, r20
  if (getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
    37a0:	88 81       	ld	r24, Y
    37a2:	99 81       	ldd	r25, Y+1	; 0x01
    37a4:	aa 81       	ldd	r26, Y+2	; 0x02
    37a6:	bb 81       	ldd	r27, Y+3	; 0x03
    37a8:	88 0f       	add	r24, r24
    37aa:	99 1f       	adc	r25, r25
    37ac:	aa 1f       	adc	r26, r26
    37ae:	bb 1f       	adc	r27, r27
    37b0:	88 0f       	add	r24, r24
    37b2:	99 1f       	adc	r25, r25
    37b4:	aa 1f       	adc	r26, r26
    37b6:	bb 1f       	adc	r27, r27
    37b8:	01 96       	adiw	r24, 0x01	; 1
    37ba:	a1 1d       	adc	r26, r1
    37bc:	b1 1d       	adc	r27, r1
    37be:	88 0f       	add	r24, r24
    37c0:	99 1f       	adc	r25, r25
    37c2:	aa 1f       	adc	r26, r26
    37c4:	bb 1f       	adc	r27, r27
    37c6:	88 0f       	add	r24, r24
    37c8:	99 1f       	adc	r25, r25
    37ca:	aa 1f       	adc	r26, r26
    37cc:	bb 1f       	adc	r27, r27
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	aa 1f       	adc	r26, r26
    37d4:	bb 1f       	adc	r27, r27
    37d6:	bc 01       	movw	r22, r24
    37d8:	cd 01       	movw	r24, r26
    37da:	7d 5f       	subi	r23, 0xFD	; 253
    37dc:	8f 4f       	sbci	r24, 0xFF	; 255
    37de:	9f 4f       	sbci	r25, 0xFF	; 255
    37e0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <WIZCHIP_READ>
    37e4:	87 31       	cpi	r24, 0x17	; 23
    37e6:	31 f4       	brne	.+12     	; 0x37f4 <w5500_write+0x6c>
    return send(n->my_socket, buffer, len);
    37e8:	a6 01       	movw	r20, r12
    37ea:	b8 01       	movw	r22, r16
    37ec:	88 81       	ld	r24, Y
    37ee:	0e 94 ab 04 	call	0x956	; 0x956 <send>
    37f2:	03 c0       	rjmp	.+6      	; 0x37fa <w5500_write+0x72>
  
  return 0;
    37f4:	60 e0       	ldi	r22, 0x00	; 0
    37f6:	70 e0       	ldi	r23, 0x00	; 0
    37f8:	cb 01       	movw	r24, r22
}
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	1f 91       	pop	r17
    3800:	0f 91       	pop	r16
    3802:	ff 90       	pop	r15
    3804:	ef 90       	pop	r14
    3806:	df 90       	pop	r13
    3808:	cf 90       	pop	r12
    380a:	08 95       	ret

0000380c <w5500_disconnect>:

void w5500_disconnect(Network* n)
{
  disconnect(n->my_socket);
    380c:	fc 01       	movw	r30, r24
    380e:	80 81       	ld	r24, Z
    3810:	0c 94 37 04 	jmp	0x86e	; 0x86e <disconnect>
    3814:	08 95       	ret

00003816 <expired>:
  MilliTimer++;
}
*/

int8_t expired(Timer* timer)
{
    3816:	cf 92       	push	r12
    3818:	df 92       	push	r13
    381a:	ef 92       	push	r14
    381c:	ff 92       	push	r15
  int32_t left = (timer->end_time) - millis();
    381e:	fc 01       	movw	r30, r24
    3820:	c4 80       	ldd	r12, Z+4	; 0x04
    3822:	d5 80       	ldd	r13, Z+5	; 0x05
    3824:	e6 80       	ldd	r14, Z+6	; 0x06
    3826:	f7 80       	ldd	r15, Z+7	; 0x07
    3828:	40 d2       	rcall	.+1152   	; 0x3caa <millis>
    382a:	09 2e       	mov	r0, r25
    382c:	00 0c       	add	r0, r0
    382e:	aa 0b       	sbc	r26, r26
    3830:	bb 0b       	sbc	r27, r27
    3832:	a7 01       	movw	r20, r14
    3834:	96 01       	movw	r18, r12
    3836:	28 1b       	sub	r18, r24
    3838:	39 0b       	sbc	r19, r25
    383a:	4a 0b       	sbc	r20, r26
    383c:	5b 0b       	sbc	r21, r27
    383e:	da 01       	movw	r26, r20
    3840:	c9 01       	movw	r24, r18
  return (left < 0);
    3842:	88 27       	eor	r24, r24
    3844:	b7 fd       	sbrc	r27, 7
    3846:	83 95       	inc	r24
    3848:	99 27       	eor	r25, r25
    384a:	aa 27       	eor	r26, r26
    384c:	bb 27       	eor	r27, r27
}
    384e:	ff 90       	pop	r15
    3850:	ef 90       	pop	r14
    3852:	df 90       	pop	r13
    3854:	cf 90       	pop	r12
    3856:	08 95       	ret

00003858 <countdown_ms>:

void countdown_ms(Timer* timer, uint32_t timeout)
{
    3858:	cf 92       	push	r12
    385a:	df 92       	push	r13
    385c:	ef 92       	push	r14
    385e:	ff 92       	push	r15
    3860:	cf 93       	push	r28
    3862:	df 93       	push	r29
    3864:	ec 01       	movw	r28, r24
    3866:	6a 01       	movw	r12, r20
    3868:	7b 01       	movw	r14, r22
	timer->end_time = millis() + timeout;
    386a:	1f d2       	rcall	.+1086   	; 0x3caa <millis>
    386c:	09 2e       	mov	r0, r25
    386e:	00 0c       	add	r0, r0
    3870:	aa 0b       	sbc	r26, r26
    3872:	bb 0b       	sbc	r27, r27
    3874:	c8 0e       	add	r12, r24
    3876:	d9 1e       	adc	r13, r25
    3878:	ea 1e       	adc	r14, r26
    387a:	fb 1e       	adc	r15, r27
    387c:	cc 82       	std	Y+4, r12	; 0x04
    387e:	dd 82       	std	Y+5, r13	; 0x05
    3880:	ee 82       	std	Y+6, r14	; 0x06
    3882:	ff 82       	std	Y+7, r15	; 0x07
}
    3884:	df 91       	pop	r29
    3886:	cf 91       	pop	r28
    3888:	ff 90       	pop	r15
    388a:	ef 90       	pop	r14
    388c:	df 90       	pop	r13
    388e:	cf 90       	pop	r12
    3890:	08 95       	ret

00003892 <countdown>:

void countdown(Timer* timer, uint32_t timeout)
{
    3892:	cf 92       	push	r12
    3894:	df 92       	push	r13
    3896:	ef 92       	push	r14
    3898:	ff 92       	push	r15
    389a:	0f 93       	push	r16
    389c:	1f 93       	push	r17
    389e:	cf 93       	push	r28
    38a0:	df 93       	push	r29
    38a2:	ec 01       	movw	r28, r24
    38a4:	6a 01       	movw	r12, r20
    38a6:	7b 01       	movw	r14, r22
  timer->end_time = millis() + (timeout * 1000UL);
    38a8:	00 d2       	rcall	.+1024   	; 0x3caa <millis>
    38aa:	8c 01       	movw	r16, r24
    38ac:	a8 ee       	ldi	r26, 0xE8	; 232
    38ae:	b3 e0       	ldi	r27, 0x03	; 3
    38b0:	a7 01       	movw	r20, r14
    38b2:	96 01       	movw	r18, r12
    38b4:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__muluhisi3>
    38b8:	01 2e       	mov	r0, r17
    38ba:	00 0c       	add	r0, r0
    38bc:	22 0b       	sbc	r18, r18
    38be:	33 0b       	sbc	r19, r19
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	80 0f       	add	r24, r16
    38c6:	91 1f       	adc	r25, r17
    38c8:	a2 1f       	adc	r26, r18
    38ca:	b3 1f       	adc	r27, r19
    38cc:	8c 83       	std	Y+4, r24	; 0x04
    38ce:	9d 83       	std	Y+5, r25	; 0x05
    38d0:	ae 83       	std	Y+6, r26	; 0x06
    38d2:	bf 83       	std	Y+7, r27	; 0x07
}
    38d4:	df 91       	pop	r29
    38d6:	cf 91       	pop	r28
    38d8:	1f 91       	pop	r17
    38da:	0f 91       	pop	r16
    38dc:	ff 90       	pop	r15
    38de:	ef 90       	pop	r14
    38e0:	df 90       	pop	r13
    38e2:	cf 90       	pop	r12
    38e4:	08 95       	ret

000038e6 <left_ms>:

int32_t left_ms(Timer* timer)
{
    38e6:	cf 92       	push	r12
    38e8:	df 92       	push	r13
    38ea:	ef 92       	push	r14
    38ec:	ff 92       	push	r15
  int32_t left = timer->end_time - millis();
    38ee:	fc 01       	movw	r30, r24
    38f0:	c4 80       	ldd	r12, Z+4	; 0x04
    38f2:	d5 80       	ldd	r13, Z+5	; 0x05
    38f4:	e6 80       	ldd	r14, Z+6	; 0x06
    38f6:	f7 80       	ldd	r15, Z+7	; 0x07
    38f8:	d8 d1       	rcall	.+944    	; 0x3caa <millis>
    38fa:	09 2e       	mov	r0, r25
    38fc:	00 0c       	add	r0, r0
    38fe:	aa 0b       	sbc	r26, r26
    3900:	bb 0b       	sbc	r27, r27
  return (left < 0) ? 0 : left;
    3902:	a7 01       	movw	r20, r14
    3904:	96 01       	movw	r18, r12
    3906:	28 1b       	sub	r18, r24
    3908:	39 0b       	sbc	r19, r25
    390a:	4a 0b       	sbc	r20, r26
    390c:	5b 0b       	sbc	r21, r27
    390e:	ca 01       	movw	r24, r20
    3910:	b9 01       	movw	r22, r18
    3912:	1a f4       	brpl	.+6      	; 0x391a <left_ms+0x34>
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	70 e0       	ldi	r23, 0x00	; 0
    3918:	cb 01       	movw	r24, r22
}
    391a:	ff 90       	pop	r15
    391c:	ef 90       	pop	r14
    391e:	df 90       	pop	r13
    3920:	cf 90       	pop	r12
    3922:	08 95       	ret

00003924 <InitTimer>:

void InitTimer(Timer* timer)
{
  timer->end_time = 0;
    3924:	fc 01       	movw	r30, r24
    3926:	14 82       	std	Z+4, r1	; 0x04
    3928:	15 82       	std	Z+5, r1	; 0x05
    392a:	16 82       	std	Z+6, r1	; 0x06
    392c:	17 82       	std	Z+7, r1	; 0x07
    392e:	08 95       	ret

00003930 <NewNetwork>:
}


void NewNetwork(Network* n)
{
    3930:	fc 01       	movw	r30, r24
  //n->my_socket = 0; //initialized outside actually..
  n->mqttread = w5500_read;
    3932:	89 e7       	ldi	r24, 0x79	; 121
    3934:	9b e1       	ldi	r25, 0x1B	; 27
    3936:	95 83       	std	Z+5, r25	; 0x05
    3938:	84 83       	std	Z+4, r24	; 0x04
  n->mqttwrite = w5500_write;
    393a:	84 ec       	ldi	r24, 0xC4	; 196
    393c:	9b e1       	ldi	r25, 0x1B	; 27
    393e:	97 83       	std	Z+7, r25	; 0x07
    3940:	86 83       	std	Z+6, r24	; 0x06
  n->disconnect = w5500_disconnect;
    3942:	86 e0       	ldi	r24, 0x06	; 6
    3944:	9c e1       	ldi	r25, 0x1C	; 28
    3946:	91 87       	std	Z+9, r25	; 0x09
    3948:	80 87       	std	Z+8, r24	; 0x08
    394a:	08 95       	ret

0000394c <ConnectNetwork>:
{
  disconnect(n->my_socket);
}

int32_t ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
    394c:	ef 92       	push	r14
    394e:	ff 92       	push	r15
    3950:	0f 93       	push	r16
    3952:	1f 93       	push	r17
    3954:	cf 93       	push	r28
    3956:	df 93       	push	r29
    3958:	ec 01       	movw	r28, r24
    395a:	8b 01       	movw	r16, r22
    395c:	7a 01       	movw	r14, r20
  socket(n->my_socket, Sn_MR_TCP, 12345, 0);
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	49 e3       	ldi	r20, 0x39	; 57
    3962:	50 e3       	ldi	r21, 0x30	; 48
    3964:	61 e0       	ldi	r22, 0x01	; 1
    3966:	88 81       	ld	r24, Y
    3968:	0e 94 67 02 	call	0x4ce	; 0x4ce <socket>
  connect(n->my_socket, ip, port);
    396c:	a7 01       	movw	r20, r14
    396e:	b8 01       	movw	r22, r16
    3970:	88 81       	ld	r24, Y
    3972:	0e 94 64 03 	call	0x6c8	; 0x6c8 <connect>

  return 0;
}
    3976:	60 e0       	ldi	r22, 0x00	; 0
    3978:	70 e0       	ldi	r23, 0x00	; 0
    397a:	cb 01       	movw	r24, r22
    397c:	df 91       	pop	r29
    397e:	cf 91       	pop	r28
    3980:	1f 91       	pop	r17
    3982:	0f 91       	pop	r16
    3984:	ff 90       	pop	r15
    3986:	ef 90       	pop	r14
    3988:	08 95       	ret

0000398a <appDataConf>:
	//appUartBufferPtr = 0;
	appDataReqBusy = true;
}
void appDataConf(NWK_DataReq_t *req){
		
		appDataReqBusy = false;
    398a:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <appDataReqBusy>
    398e:	08 95       	ret

00003990 <appTimerHandler>:
	}

	SYS_TimerStop(&appTimer);
	SYS_TimerStart(&appTimer);
}
void appTimerHandler(SYS_Timer_t *timer){
    3990:	08 95       	ret

00003992 <appDataInd_ACK>:
	sendOK(ind->srcAddr);
	data_ready = 1;
	return true;
}
bool appDataInd_ACK(NWK_DataInd_t *ind)
{
    3992:	0f 93       	push	r16
    3994:	1f 93       	push	r17
    3996:	cf 93       	push	r28
    3998:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; i < ind->size; i++)
    399a:	c0 e0       	ldi	r28, 0x00	; 0
    399c:	0a c0       	rjmp	.+20     	; 0x39b2 <appDataInd_ACK+0x20>
		HAL_UartWriteByte(ind->data[i]);
    399e:	d8 01       	movw	r26, r16
    39a0:	17 96       	adiw	r26, 0x07	; 7
    39a2:	ed 91       	ld	r30, X+
    39a4:	fc 91       	ld	r31, X
    39a6:	18 97       	sbiw	r26, 0x08	; 8
    39a8:	ec 0f       	add	r30, r28
    39aa:	f1 1d       	adc	r31, r1
    39ac:	80 81       	ld	r24, Z
    39ae:	5d d4       	rcall	.+2234   	; 0x426a <HAL_UartWriteByte>
	data_ready = 1;
	return true;
}
bool appDataInd_ACK(NWK_DataInd_t *ind)
{
	for (uint8_t i = 0; i < ind->size; i++)
    39b0:	cf 5f       	subi	r28, 0xFF	; 255
    39b2:	f8 01       	movw	r30, r16
    39b4:	81 85       	ldd	r24, Z+9	; 0x09
    39b6:	c8 17       	cp	r28, r24
    39b8:	90 f3       	brcs	.-28     	; 0x399e <appDataInd_ACK+0xc>
		HAL_UartWriteByte(ind->data[i]);
	
	return true;
}
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	cf 91       	pop	r28
    39be:	1f 91       	pop	r17
    39c0:	0f 91       	pop	r16
    39c2:	08 95       	ret

000039c4 <sendOK>:
static uint8_t appUartBufferPtr = 0;
extern uint8_t buffer[30];
extern uint8_t data_ready;

void sendOK(int16_t odesilatel){
	if (appDataReqBusy)
    39c4:	20 91 a3 04 	lds	r18, 0x04A3	; 0x8004a3 <appDataReqBusy>
    39c8:	21 11       	cpse	r18, r1
    39ca:	20 c0       	rjmp	.+64     	; 0x3a0c <sendOK+0x48>
	return;
	static char text[]="OK\n\r";
	
	memcpy(appDataReqBuffer, text,sizeof(appDataReqBuffer)-1);
    39cc:	2c e6       	ldi	r18, 0x6C	; 108
    39ce:	ee e1       	ldi	r30, 0x1E	; 30
    39d0:	f2 e0       	ldi	r31, 0x02	; 2
    39d2:	a6 e3       	ldi	r26, 0x36	; 54
    39d4:	b4 e0       	ldi	r27, 0x04	; 4
    39d6:	01 90       	ld	r0, Z+
    39d8:	0d 92       	st	X+, r0
    39da:	2a 95       	dec	r18
    39dc:	e1 f7       	brne	.-8      	; 0x39d6 <sendOK+0x12>
	

	appDataReq.dstAddr = odesilatel;
    39de:	e4 ea       	ldi	r30, 0xA4	; 164
    39e0:	f4 e0       	ldi	r31, 0x04	; 4
    39e2:	96 83       	std	Z+6, r25	; 0x06
    39e4:	85 83       	std	Z+5, r24	; 0x05
	appDataReq.dstEndpoint = APP_ENDPOINT_ACK;
    39e6:	82 e0       	ldi	r24, 0x02	; 2
    39e8:	87 83       	std	Z+7, r24	; 0x07
	appDataReq.srcEndpoint = APP_ENDPOINT_ACK;
    39ea:	80 87       	std	Z+8, r24	; 0x08
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    39ec:	81 87       	std	Z+9, r24	; 0x09
	appDataReq.data = appDataReqBuffer;
    39ee:	86 e3       	ldi	r24, 0x36	; 54
    39f0:	94 e0       	ldi	r25, 0x04	; 4
    39f2:	93 87       	std	Z+11, r25	; 0x0b
    39f4:	82 87       	std	Z+10, r24	; 0x0a
	appDataReq.size = sizeof(text)-1;
    39f6:	84 e0       	ldi	r24, 0x04	; 4
    39f8:	84 87       	std	Z+12, r24	; 0x0c
	appDataReq.confirm = appDataConf;
    39fa:	85 ec       	ldi	r24, 0xC5	; 197
    39fc:	9c e1       	ldi	r25, 0x1C	; 28
    39fe:	96 87       	std	Z+14, r25	; 0x0e
    3a00:	85 87       	std	Z+13, r24	; 0x0d
	NWK_DataReq(&appDataReq);
    3a02:	cf 01       	movw	r24, r30
    3a04:	19 d6       	rcall	.+3122   	; 0x4638 <NWK_DataReq>

	//appUartBufferPtr = 0;
	appDataReqBusy = true;
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <appDataReqBusy>
    3a0c:	08 95       	ret

00003a0e <appDataInd>:
}
void appTimerHandler(SYS_Timer_t *timer){

	(void)timer;
}
bool appDataInd(NWK_DataInd_t *ind){
    3a0e:	dc 01       	movw	r26, r24
	//char* temp;
	for (uint8_t i = 0; i < ind->size; i++){
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	0e c0       	rjmp	.+28     	; 0x3a30 <appDataInd+0x22>
		//printf("%c",ind->data[i]);
		buffer[i] = ind->data[i];
    3a14:	29 2f       	mov	r18, r25
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	17 96       	adiw	r26, 0x07	; 7
    3a1a:	ed 91       	ld	r30, X+
    3a1c:	fc 91       	ld	r31, X
    3a1e:	18 97       	sbiw	r26, 0x08	; 8
    3a20:	e2 0f       	add	r30, r18
    3a22:	f3 1f       	adc	r31, r19
    3a24:	80 81       	ld	r24, Z
    3a26:	f9 01       	movw	r30, r18
    3a28:	ec 53       	subi	r30, 0x3C	; 60
    3a2a:	fb 4f       	sbci	r31, 0xFB	; 251
    3a2c:	80 83       	st	Z, r24

	(void)timer;
}
bool appDataInd(NWK_DataInd_t *ind){
	//char* temp;
	for (uint8_t i = 0; i < ind->size; i++){
    3a2e:	9f 5f       	subi	r25, 0xFF	; 255
    3a30:	19 96       	adiw	r26, 0x09	; 9
    3a32:	8c 91       	ld	r24, X
    3a34:	19 97       	sbiw	r26, 0x09	; 9
    3a36:	98 17       	cp	r25, r24
    3a38:	68 f3       	brcs	.-38     	; 0x3a14 <appDataInd+0x6>
		//printf("%c",ind->data[i]);
		buffer[i] = ind->data[i];
		
	}
	//printf(temp);
	sendOK(ind->srcAddr);
    3a3a:	8d 91       	ld	r24, X+
    3a3c:	9c 91       	ld	r25, X
    3a3e:	c2 df       	rcall	.-124    	; 0x39c4 <sendOK>
	data_ready = 1;
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <data_ready>
	return true;
}
    3a46:	08 95       	ret

00003a48 <HAL_UartBytesReceived>:
void appDataConf(NWK_DataReq_t *req){
		
		appDataReqBusy = false;
		(void)req;
}
void HAL_UartBytesReceived(uint16_t bytes){
    3a48:	0f 93       	push	r16
    3a4a:	1f 93       	push	r17
    3a4c:	cf 93       	push	r28
    3a4e:	df 93       	push	r29
    3a50:	8c 01       	movw	r16, r24
	for (uint16_t i = 0; i < bytes; i++)
    3a52:	c0 e0       	ldi	r28, 0x00	; 0
    3a54:	d0 e0       	ldi	r29, 0x00	; 0
    3a56:	10 c0       	rjmp	.+32     	; 0x3a78 <HAL_UartBytesReceived+0x30>
	{
		uint8_t byte = HAL_UartReadByte();
    3a58:	2f d4       	rcall	.+2142   	; 0x42b8 <HAL_UartReadByte>

		if (appUartBufferPtr == sizeof(appUartBuffer)){
    3a5a:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <appUartBufferPtr>
    3a5e:	8d 36       	cpi	r24, 0x6D	; 109
    3a60:	19 f4       	brne	.+6      	; 0x3a68 <HAL_UartBytesReceived+0x20>
			//appSendData();
			sendOK(1); // zadat adresu
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	ae df       	rcall	.-164    	; 0x39c4 <sendOK>
		}
		if (appUartBufferPtr < sizeof(appUartBuffer))
    3a68:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <appUartBufferPtr>
    3a6c:	8d 36       	cpi	r24, 0x6D	; 109
    3a6e:	18 f4       	brcc	.+6      	; 0x3a76 <HAL_UartBytesReceived+0x2e>
		appUartBuffer[appUartBufferPtr++] = byte;
    3a70:	8f 5f       	subi	r24, 0xFF	; 255
    3a72:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <appUartBufferPtr>
		
		appDataReqBusy = false;
		(void)req;
}
void HAL_UartBytesReceived(uint16_t bytes){
	for (uint16_t i = 0; i < bytes; i++)
    3a76:	21 96       	adiw	r28, 0x01	; 1
    3a78:	c0 17       	cp	r28, r16
    3a7a:	d1 07       	cpc	r29, r17
    3a7c:	68 f3       	brcs	.-38     	; 0x3a58 <HAL_UartBytesReceived+0x10>
		}
		if (appUartBufferPtr < sizeof(appUartBuffer))
		appUartBuffer[appUartBufferPtr++] = byte;
	}

	SYS_TimerStop(&appTimer);
    3a7e:	85 eb       	ldi	r24, 0xB5	; 181
    3a80:	94 e0       	ldi	r25, 0x04	; 4
    3a82:	0e 94 b4 2b 	call	0x5768	; 0x5768 <SYS_TimerStop>
	SYS_TimerStart(&appTimer);
    3a86:	85 eb       	ldi	r24, 0xB5	; 181
    3a88:	94 e0       	ldi	r25, 0x04	; 4
    3a8a:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <SYS_TimerStart>
}
    3a8e:	df 91       	pop	r29
    3a90:	cf 91       	pop	r28
    3a92:	1f 91       	pop	r17
    3a94:	0f 91       	pop	r16
    3a96:	08 95       	ret

00003a98 <appInit>:
	
	return true;
}

void appInit(void){
	NWK_SetAddr(APP_ADDR);
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	05 d5       	rcall	.+2570   	; 0x44a8 <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
    3a9e:	86 e9       	ldi	r24, 0x96	; 150
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	09 d5       	rcall	.+2578   	; 0x44b6 <NWK_SetPanId>
	PHY_SetChannel(APP_CHANNEL);
    3aa4:	8f e0       	ldi	r24, 0x0F	; 15
    3aa6:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <PHY_SetChannel>
	#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
	#endif
	PHY_SetRxState(true);
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <PHY_SetRxState>

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    3ab0:	67 e0       	ldi	r22, 0x07	; 7
    3ab2:	7d e1       	ldi	r23, 0x1D	; 29
    3ab4:	81 e0       	ldi	r24, 0x01	; 1
    3ab6:	06 d5       	rcall	.+2572   	; 0x44c4 <NWK_OpenEndpoint>
	NWK_OpenEndpoint(APP_ENDPOINT_ACK, appDataInd_ACK);
    3ab8:	69 ec       	ldi	r22, 0xC9	; 201
    3aba:	7c e1       	ldi	r23, 0x1C	; 28
    3abc:	82 e0       	ldi	r24, 0x02	; 2
    3abe:	02 d5       	rcall	.+2564   	; 0x44c4 <NWK_OpenEndpoint>

	HAL_BoardInit();

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    3ac0:	e5 eb       	ldi	r30, 0xB5	; 181
    3ac2:	f4 e0       	ldi	r31, 0x04	; 4
    3ac4:	84 e1       	ldi	r24, 0x14	; 20
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	a0 e0       	ldi	r26, 0x00	; 0
    3aca:	b0 e0       	ldi	r27, 0x00	; 0
    3acc:	86 83       	std	Z+6, r24	; 0x06
    3ace:	97 83       	std	Z+7, r25	; 0x07
    3ad0:	a0 87       	std	Z+8, r26	; 0x08
    3ad2:	b1 87       	std	Z+9, r27	; 0x09
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3ad4:	12 86       	std	Z+10, r1	; 0x0a
	appTimer.handler = appTimerHandler;
    3ad6:	88 ec       	ldi	r24, 0xC8	; 200
    3ad8:	9c e1       	ldi	r25, 0x1C	; 28
    3ada:	94 87       	std	Z+12, r25	; 0x0c
    3adc:	83 87       	std	Z+11, r24	; 0x0b
    3ade:	08 95       	ret

00003ae0 <APP_TaskHandler>:
}
void APP_TaskHandler(void){
	switch(appState){
    3ae0:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <appState>
    3ae4:	81 11       	cpse	r24, r1
    3ae6:	04 c0       	rjmp	.+8      	; 0x3af0 <APP_TaskHandler+0x10>
	case APP_STATE_INITIAL:
	{
		appInit();
    3ae8:	d7 df       	rcall	.-82     	; 0x3a98 <appInit>
		appState = APP_STATE_IDLE;
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <appState>
    3af0:	08 95       	ret

00003af2 <freeRam>:
    3af2:	cf 93       	push	r28
    3af4:	df 93       	push	r29
    3af6:	1f 92       	push	r1
    3af8:	1f 92       	push	r1
    3afa:	cd b7       	in	r28, 0x3d	; 61
    3afc:	de b7       	in	r29, 0x3e	; 62
    3afe:	80 91 d6 1c 	lds	r24, 0x1CD6	; 0x801cd6 <__brkval>
    3b02:	90 91 d7 1c 	lds	r25, 0x1CD7	; 0x801cd7 <__brkval+0x1>
    3b06:	00 97       	sbiw	r24, 0x00	; 0
    3b08:	11 f0       	breq	.+4      	; 0x3b0e <freeRam+0x1c>
    3b0a:	9c 01       	movw	r18, r24
    3b0c:	02 c0       	rjmp	.+4      	; 0x3b12 <freeRam+0x20>
    3b0e:	21 ee       	ldi	r18, 0xE1	; 225
    3b10:	3c e1       	ldi	r19, 0x1C	; 28
    3b12:	ce 01       	movw	r24, r28
    3b14:	01 96       	adiw	r24, 0x01	; 1
    3b16:	82 1b       	sub	r24, r18
    3b18:	93 0b       	sbc	r25, r19
    3b1a:	0f 90       	pop	r0
    3b1c:	0f 90       	pop	r0
    3b1e:	df 91       	pop	r29
    3b20:	cf 91       	pop	r28
    3b22:	08 95       	ret

00003b24 <cs_sel>:
    3b24:	8b b1       	in	r24, 0x0b	; 11
    3b26:	8f 7e       	andi	r24, 0xEF	; 239
    3b28:	8b b9       	out	0x0b, r24	; 11
    3b2a:	08 95       	ret

00003b2c <cs_desel>:
    3b2c:	8b b1       	in	r24, 0x0b	; 11
    3b2e:	80 61       	ori	r24, 0x10	; 16
    3b30:	8b b9       	out	0x0b, r24	; 11
    3b32:	08 95       	ret

00003b34 <spi_rb>:
    3b34:	1e bc       	out	0x2e, r1	; 46
    3b36:	0d b4       	in	r0, 0x2d	; 45
    3b38:	07 fe       	sbrs	r0, 7
    3b3a:	fd cf       	rjmp	.-6      	; 0x3b36 <spi_rb+0x2>
    3b3c:	8e b5       	in	r24, 0x2e	; 46
    3b3e:	08 95       	ret

00003b40 <spi_wb>:
    3b40:	8e bd       	out	0x2e, r24	; 46
    3b42:	0d b4       	in	r0, 0x2d	; 45
    3b44:	07 fe       	sbrs	r0, 7
    3b46:	fd cf       	rjmp	.-6      	; 0x3b42 <spi_wb+0x2>
    3b48:	08 95       	ret

00003b4a <spi_rb_burst>:
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	09 c0       	rjmp	.+18     	; 0x3b64 <spi_rb_burst+0x1a>
    3b52:	1e bc       	out	0x2e, r1	; 46
    3b54:	0d b4       	in	r0, 0x2d	; 45
    3b56:	07 fe       	sbrs	r0, 7
    3b58:	fd cf       	rjmp	.-6      	; 0x3b54 <spi_rb_burst+0xa>
    3b5a:	8e b5       	in	r24, 0x2e	; 46
    3b5c:	80 83       	st	Z, r24
    3b5e:	2f 5f       	subi	r18, 0xFF	; 255
    3b60:	3f 4f       	sbci	r19, 0xFF	; 255
    3b62:	31 96       	adiw	r30, 0x01	; 1
    3b64:	26 17       	cp	r18, r22
    3b66:	37 07       	cpc	r19, r23
    3b68:	a0 f3       	brcs	.-24     	; 0x3b52 <spi_rb_burst+0x8>
    3b6a:	08 95       	ret

00003b6c <spi_wb_burst>:
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	0a c0       	rjmp	.+20     	; 0x3b88 <spi_wb_burst+0x1c>
    3b74:	cf 01       	movw	r24, r30
    3b76:	01 96       	adiw	r24, 0x01	; 1
    3b78:	40 81       	ld	r20, Z
    3b7a:	4e bd       	out	0x2e, r20	; 46
    3b7c:	0d b4       	in	r0, 0x2d	; 45
    3b7e:	07 fe       	sbrs	r0, 7
    3b80:	fd cf       	rjmp	.-6      	; 0x3b7c <spi_wb_burst+0x10>
    3b82:	2f 5f       	subi	r18, 0xFF	; 255
    3b84:	3f 4f       	sbci	r19, 0xFF	; 255
    3b86:	fc 01       	movw	r30, r24
    3b88:	26 17       	cp	r18, r22
    3b8a:	37 07       	cpc	r19, r23
    3b8c:	98 f3       	brcs	.-26     	; 0x3b74 <spi_wb_burst+0x8>
    3b8e:	08 95       	ret

00003b90 <messageArrived>:
    3b90:	cf 92       	push	r12
    3b92:	df 92       	push	r13
    3b94:	ef 92       	push	r14
    3b96:	ff 92       	push	r15
    3b98:	0f 93       	push	r16
    3b9a:	1f 93       	push	r17
    3b9c:	cf 93       	push	r28
    3b9e:	df 93       	push	r29
    3ba0:	cd b7       	in	r28, 0x3d	; 61
    3ba2:	de b7       	in	r29, 0x3e	; 62
    3ba4:	c0 5c       	subi	r28, 0xC0	; 192
    3ba6:	d1 09       	sbc	r29, r1
    3ba8:	0f b6       	in	r0, 0x3f	; 63
    3baa:	f8 94       	cli
    3bac:	de bf       	out	0x3e, r29	; 62
    3bae:	0f be       	out	0x3f, r0	; 63
    3bb0:	cd bf       	out	0x3d, r28	; 61
    3bb2:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <mqtt_target+0x3f>
    3bb6:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <mqtt_target+0x40>
    3bba:	3a 83       	std	Y+2, r19	; 0x02
    3bbc:	29 83       	std	Y+1, r18	; 0x01
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	33 96       	adiw	r30, 0x03	; 3
    3bc2:	4e e3       	ldi	r20, 0x3E	; 62
    3bc4:	df 01       	movw	r26, r30
    3bc6:	1d 92       	st	X+, r1
    3bc8:	4a 95       	dec	r20
    3bca:	e9 f7       	brne	.-6      	; 0x3bc6 <messageArrived+0x36>
    3bcc:	8e 01       	movw	r16, r28
    3bce:	0f 5b       	subi	r16, 0xBF	; 191
    3bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd2:	f8 01       	movw	r30, r16
    3bd4:	31 83       	std	Z+1, r19	; 0x01
    3bd6:	20 83       	st	Z, r18
    3bd8:	32 96       	adiw	r30, 0x02	; 2
    3bda:	2e e7       	ldi	r18, 0x7E	; 126
    3bdc:	df 01       	movw	r26, r30
    3bde:	1d 92       	st	X+, r1
    3be0:	2a 95       	dec	r18
    3be2:	e9 f7       	brne	.-6      	; 0x3bde <messageArrived+0x4e>
    3be4:	fc 01       	movw	r30, r24
    3be6:	c0 80       	ld	r12, Z
    3be8:	d1 80       	ldd	r13, Z+1	; 0x01
    3bea:	02 80       	ldd	r0, Z+2	; 0x02
    3bec:	f3 81       	ldd	r31, Z+3	; 0x03
    3bee:	e0 2d       	mov	r30, r0
    3bf0:	42 81       	ldd	r20, Z+2	; 0x02
    3bf2:	53 81       	ldd	r21, Z+3	; 0x03
    3bf4:	64 81       	ldd	r22, Z+4	; 0x04
    3bf6:	75 81       	ldd	r23, Z+5	; 0x05
    3bf8:	86 81       	ldd	r24, Z+6	; 0x06
    3bfa:	97 81       	ldd	r25, Z+7	; 0x07
    3bfc:	bc 01       	movw	r22, r24
    3bfe:	ce 01       	movw	r24, r28
    3c00:	01 96       	adiw	r24, 0x01	; 1
    3c02:	7c 01       	movw	r14, r24
    3c04:	0e 94 c0 31 	call	0x6380	; 0x6380 <strncpy>
    3c08:	d6 01       	movw	r26, r12
    3c0a:	15 96       	adiw	r26, 0x05	; 5
    3c0c:	6d 91       	ld	r22, X+
    3c0e:	7c 91       	ld	r23, X
    3c10:	16 97       	sbiw	r26, 0x06	; 6
    3c12:	17 96       	adiw	r26, 0x07	; 7
    3c14:	4d 91       	ld	r20, X+
    3c16:	5c 91       	ld	r21, X
    3c18:	18 97       	sbiw	r26, 0x08	; 8
    3c1a:	c8 01       	movw	r24, r16
    3c1c:	0e 94 c0 31 	call	0x6380	; 0x6380 <strncpy>
    3c20:	1f 93       	push	r17
    3c22:	0f 93       	push	r16
    3c24:	ff 92       	push	r15
    3c26:	ef 92       	push	r14
    3c28:	87 e7       	ldi	r24, 0x77	; 119
    3c2a:	93 e0       	ldi	r25, 0x03	; 3
    3c2c:	9f 93       	push	r25
    3c2e:	8f 93       	push	r24
    3c30:	0e 94 29 32 	call	0x6452	; 0x6452 <printf_P>
    3c34:	0f 90       	pop	r0
    3c36:	0f 90       	pop	r0
    3c38:	0f 90       	pop	r0
    3c3a:	0f 90       	pop	r0
    3c3c:	0f 90       	pop	r0
    3c3e:	0f 90       	pop	r0
    3c40:	c0 54       	subi	r28, 0x40	; 64
    3c42:	df 4f       	sbci	r29, 0xFF	; 255
    3c44:	0f b6       	in	r0, 0x3f	; 63
    3c46:	f8 94       	cli
    3c48:	de bf       	out	0x3e, r29	; 62
    3c4a:	0f be       	out	0x3f, r0	; 63
    3c4c:	cd bf       	out	0x3d, r28	; 61
    3c4e:	df 91       	pop	r29
    3c50:	cf 91       	pop	r28
    3c52:	1f 91       	pop	r17
    3c54:	0f 91       	pop	r16
    3c56:	ff 90       	pop	r15
    3c58:	ef 90       	pop	r14
    3c5a:	df 90       	pop	r13
    3c5c:	cf 90       	pop	r12
    3c5e:	08 95       	ret

00003c60 <__vector_21>:
    3c60:	1f 92       	push	r1
    3c62:	0f 92       	push	r0
    3c64:	0f b6       	in	r0, 0x3f	; 63
    3c66:	0f 92       	push	r0
    3c68:	11 24       	eor	r1, r1
    3c6a:	8f 93       	push	r24
    3c6c:	9f 93       	push	r25
    3c6e:	af 93       	push	r26
    3c70:	bf 93       	push	r27
    3c72:	80 91 a7 19 	lds	r24, 0x19A7	; 0x8019a7 <_millis>
    3c76:	90 91 a8 19 	lds	r25, 0x19A8	; 0x8019a8 <_millis+0x1>
    3c7a:	a0 91 a9 19 	lds	r26, 0x19A9	; 0x8019a9 <_millis+0x2>
    3c7e:	b0 91 aa 19 	lds	r27, 0x19AA	; 0x8019aa <_millis+0x3>
    3c82:	01 96       	adiw	r24, 0x01	; 1
    3c84:	a1 1d       	adc	r26, r1
    3c86:	b1 1d       	adc	r27, r1
    3c88:	80 93 a7 19 	sts	0x19A7, r24	; 0x8019a7 <_millis>
    3c8c:	90 93 a8 19 	sts	0x19A8, r25	; 0x8019a8 <_millis+0x1>
    3c90:	a0 93 a9 19 	sts	0x19A9, r26	; 0x8019a9 <_millis+0x2>
    3c94:	b0 93 aa 19 	sts	0x19AA, r27	; 0x8019aa <_millis+0x3>
    3c98:	bf 91       	pop	r27
    3c9a:	af 91       	pop	r26
    3c9c:	9f 91       	pop	r25
    3c9e:	8f 91       	pop	r24
    3ca0:	0f 90       	pop	r0
    3ca2:	0f be       	out	0x3f, r0	; 63
    3ca4:	0f 90       	pop	r0
    3ca6:	1f 90       	pop	r1
    3ca8:	18 95       	reti

00003caa <millis>:
    3caa:	f8 94       	cli
    3cac:	60 91 a7 19 	lds	r22, 0x19A7	; 0x8019a7 <_millis>
    3cb0:	70 91 a8 19 	lds	r23, 0x19A8	; 0x8019a8 <_millis+0x1>
    3cb4:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <_millis+0x2>
    3cb8:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <_millis+0x3>
    3cbc:	78 94       	sei
    3cbe:	08 95       	ret

00003cc0 <IO_LIBRARY_Init>:
    3cc0:	cf 93       	push	r28
    3cc2:	df 93       	push	r29
    3cc4:	cd b7       	in	r28, 0x3d	; 61
    3cc6:	de b7       	in	r29, 0x3e	; 62
    3cc8:	28 97       	sbiw	r28, 0x08	; 8
    3cca:	0f b6       	in	r0, 0x3f	; 63
    3ccc:	f8 94       	cli
    3cce:	de bf       	out	0x3e, r29	; 62
    3cd0:	0f be       	out	0x3f, r0	; 63
    3cd2:	cd bf       	out	0x3d, r28	; 61
    3cd4:	88 e0       	ldi	r24, 0x08	; 8
    3cd6:	e7 ec       	ldi	r30, 0xC7	; 199
    3cd8:	f2 e0       	ldi	r31, 0x02	; 2
    3cda:	de 01       	movw	r26, r28
    3cdc:	11 96       	adiw	r26, 0x01	; 1
    3cde:	01 90       	ld	r0, Z+
    3ce0:	0d 92       	st	X+, r0
    3ce2:	8a 95       	dec	r24
    3ce4:	e1 f7       	brne	.-8      	; 0x3cde <IO_LIBRARY_Init+0x1e>
    3ce6:	66 e9       	ldi	r22, 0x96	; 150
    3ce8:	7d e1       	ldi	r23, 0x1D	; 29
    3cea:	82 e9       	ldi	r24, 0x92	; 146
    3cec:	9d e1       	ldi	r25, 0x1D	; 29
    3cee:	0e 94 2c 0a 	call	0x1458	; 0x1458 <reg_wizchip_cs_cbfunc>
    3cf2:	60 ea       	ldi	r22, 0xA0	; 160
    3cf4:	7d e1       	ldi	r23, 0x1D	; 29
    3cf6:	8a e9       	ldi	r24, 0x9A	; 154
    3cf8:	9d e1       	ldi	r25, 0x1D	; 29
    3cfa:	0e 94 43 0a 	call	0x1486	; 0x1486 <reg_wizchip_spi_cbfunc>
    3cfe:	66 eb       	ldi	r22, 0xB6	; 182
    3d00:	7d e1       	ldi	r23, 0x1D	; 29
    3d02:	85 ea       	ldi	r24, 0xA5	; 165
    3d04:	9d e1       	ldi	r25, 0x1D	; 29
    3d06:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <reg_wizchip_spiburst_cbfunc>
    3d0a:	be 01       	movw	r22, r28
    3d0c:	6f 5f       	subi	r22, 0xFF	; 255
    3d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d10:	cb 01       	movw	r24, r22
    3d12:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <wizchip_init>
    3d16:	81 e3       	ldi	r24, 0x31	; 49
    3d18:	92 e0       	ldi	r25, 0x02	; 2
    3d1a:	0e 94 df 0c 	call	0x19be	; 0x19be <wizchip_setnetinfo>
    3d1e:	28 96       	adiw	r28, 0x08	; 8
    3d20:	0f b6       	in	r0, 0x3f	; 63
    3d22:	f8 94       	cli
    3d24:	de bf       	out	0x3e, r29	; 62
    3d26:	0f be       	out	0x3f, r0	; 63
    3d28:	cd bf       	out	0x3d, r28	; 61
    3d2a:	df 91       	pop	r29
    3d2c:	cf 91       	pop	r28
    3d2e:	08 95       	ret

00003d30 <timer0_init>:
	TCCR0 = (1<<CS02)|(1<<WGM01); //TIMER0 SET-UP: CTC MODE & PS 1:64
	OCR0 = 249; // 1ms reach for clear (16mz:64=>250kHz:250-=>1kHz)
	TIMSK |= 1<<OCIE0;	 //IRQ on TIMER0 output compare
	 */
	//For M664p
	cli();
    3d30:	f8 94       	cli
	TCCR0A = 0; TCCR0B = 0; TIMSK0 =  0;
    3d32:	14 bc       	out	0x24, r1	; 36
    3d34:	15 bc       	out	0x25, r1	; 37
    3d36:	ee e6       	ldi	r30, 0x6E	; 110
    3d38:	f0 e0       	ldi	r31, 0x00	; 0
    3d3a:	10 82       	st	Z, r1
	
	TCCR0A = (1<<WGM01); //TIMER0 SET-UP: CTC MODE
    3d3c:	82 e0       	ldi	r24, 0x02	; 2
    3d3e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00); // PS 1:64
    3d40:	83 e0       	ldi	r24, 0x03	; 3
    3d42:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249; // 1ms reach for clear (16mz:64=>250kHz:250-=>1kHz)
    3d44:	89 ef       	ldi	r24, 0xF9	; 249
    3d46:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= 1<<OCIE0A;	 //IRQ on TIMER0 output compareA
    3d48:	80 81       	ld	r24, Z
    3d4a:	82 60       	ori	r24, 0x02	; 2
    3d4c:	80 83       	st	Z, r24
	sei();
    3d4e:	78 94       	sei
    3d50:	08 95       	ret

00003d52 <avr_init>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    3d52:	99 e2       	ldi	r25, 0x29	; 41
    3d54:	88 e1       	ldi	r24, 0x18	; 24
    3d56:	0f b6       	in	r0, 0x3f	; 63
    3d58:	f8 94       	cli
    3d5a:	a8 95       	wdr
    3d5c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    3d60:	0f be       	out	0x3f, r0	; 63
    3d62:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
static void avr_init(void)
{
	// Initialize device here.
	// WatchDog INIT
	wdt_enable(WDTO_8S);  // set up wdt reset interval 2 second
	wdt_reset(); // wdt reset ~ every <2000ms
    3d66:	a8 95       	wdr

	timer0_init();// Timer0 millis engine init
    3d68:	e3 df       	rcall	.-58     	; 0x3d30 <timer0_init>
	 *  uart1_BAUD_SELECT() (normal speed mode )
	 *  or
	 *  uart1_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
	 */

	UART_init( UART_BAUD_RATE );
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	96 e9       	ldi	r25, 0x96	; 150
    3d6e:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <UART_init>
	// Define Output/Input Stream
	stdout = &uart_str;
    3d72:	83 e2       	ldi	r24, 0x23	; 35
    3d74:	92 e0       	ldi	r25, 0x02	; 2
    3d76:	90 93 dd 1c 	sts	0x1CDD, r25	; 0x801cdd <__iob+0x3>
    3d7a:	80 93 dc 1c 	sts	0x1CDC, r24	; 0x801cdc <__iob+0x2>
	sei(); //re-enable global interrupts
    3d7e:	78 94       	sei
    3d80:	08 95       	ret

00003d82 <print_network_information>:

	return;
}

void print_network_information(void)
{
    3d82:	0f 93       	push	r16
    3d84:	1f 93       	push	r17
    3d86:	cf 93       	push	r28
    3d88:	df 93       	push	r29
    3d8a:	cd b7       	in	r28, 0x3d	; 61
    3d8c:	de b7       	in	r29, 0x3e	; 62
    3d8e:	6d 97       	sbiw	r28, 0x1d	; 29
    3d90:	0f b6       	in	r0, 0x3f	; 63
    3d92:	f8 94       	cli
    3d94:	de bf       	out	0x3e, r29	; 62
    3d96:	0f be       	out	0x3f, r0	; 63
    3d98:	cd bf       	out	0x3d, r28	; 61

	uint8_t tmpstr[6] = {0,};
    3d9a:	8e 01       	movw	r16, r28
    3d9c:	0f 5f       	subi	r16, 0xFF	; 255
    3d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3da0:	86 e0       	ldi	r24, 0x06	; 6
    3da2:	f8 01       	movw	r30, r16
    3da4:	11 92       	st	Z+, r1
    3da6:	8a 95       	dec	r24
    3da8:	e9 f7       	brne	.-6      	; 0x3da4 <print_network_information+0x22>
	ctlwizchip(CW_GET_ID,(void*)tmpstr); // Get WIZCHIP name
    3daa:	b8 01       	movw	r22, r16
    3dac:	88 e0       	ldi	r24, 0x08	; 8
    3dae:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <ctlwizchip>
    PRINTF("\r\n=======================================\r\n");
    3db2:	8b ea       	ldi	r24, 0xAB	; 171
    3db4:	92 e0       	ldi	r25, 0x02	; 2
    3db6:	9f 93       	push	r25
    3db8:	8f 93       	push	r24
    3dba:	0e 94 29 32 	call	0x6452	; 0x6452 <printf_P>
    PRINTF(" WIZnet chip:  %s \r\n", tmpstr);
    3dbe:	1f 93       	push	r17
    3dc0:	0f 93       	push	r16
    3dc2:	86 e9       	ldi	r24, 0x96	; 150
    3dc4:	92 e0       	ldi	r25, 0x02	; 2
    3dc6:	9f 93       	push	r25
    3dc8:	8f 93       	push	r24
    3dca:	0e 94 29 32 	call	0x6452	; 0x6452 <printf_P>
    PRINTF("=======================================\r\n");
    3dce:	8c e6       	ldi	r24, 0x6C	; 108
    3dd0:	92 e0       	ldi	r25, 0x02	; 2
    3dd2:	9f 93       	push	r25
    3dd4:	8f 93       	push	r24
    3dd6:	0e 94 29 32 	call	0x6452	; 0x6452 <printf_P>

	wiz_NetInfo gWIZNETINFO;
	wizchip_getnetinfo(&gWIZNETINFO);
    3dda:	ce 01       	movw	r24, r28
    3ddc:	07 96       	adiw	r24, 0x07	; 7
    3dde:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <wizchip_getnetinfo>
	if (gWIZNETINFO.dhcp == NETINFO_STATIC)
    3de2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
    3dee:	81 30       	cpi	r24, 0x01	; 1
    3df0:	49 f4       	brne	.+18     	; 0x3e04 <print_network_information+0x82>
		PRINTF("STATIC IP\r\n");
    3df2:	80 e6       	ldi	r24, 0x60	; 96
    3df4:	92 e0       	ldi	r25, 0x02	; 2
    3df6:	9f 93       	push	r25
    3df8:	8f 93       	push	r24
    3dfa:	0e 94 29 32 	call	0x6452	; 0x6452 <printf_P>
    3dfe:	0f 90       	pop	r0
    3e00:	0f 90       	pop	r0
    3e02:	08 c0       	rjmp	.+16     	; 0x3e14 <print_network_information+0x92>
	else
		PRINTF("DHCP IP\r\n");
    3e04:	86 e5       	ldi	r24, 0x56	; 86
    3e06:	92 e0       	ldi	r25, 0x02	; 2
    3e08:	9f 93       	push	r25
    3e0a:	8f 93       	push	r24
    3e0c:	0e 94 29 32 	call	0x6452	; 0x6452 <printf_P>
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
    3e14:	5c 85       	ldd	r21, Y+12	; 0x0c
    3e16:	4b 85       	ldd	r20, Y+11	; 0x0b
    3e18:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e1a:	29 85       	ldd	r18, Y+9	; 0x09
    3e1c:	98 85       	ldd	r25, Y+8	; 0x08
    3e1e:	8f 81       	ldd	r24, Y+7	; 0x07
    3e20:	1f 92       	push	r1
    3e22:	5f 93       	push	r21
    3e24:	1f 92       	push	r1
    3e26:	4f 93       	push	r20
    3e28:	1f 92       	push	r1
    3e2a:	3f 93       	push	r19
    3e2c:	1f 92       	push	r1
    3e2e:	2f 93       	push	r18
    3e30:	1f 92       	push	r1
    3e32:	9f 93       	push	r25
    3e34:	1f 92       	push	r1
    3e36:	8f 93       	push	r24
    3e38:	86 e2       	ldi	r24, 0x26	; 38
    3e3a:	93 e0       	ldi	r25, 0x03	; 3
    3e3c:	9f 93       	push	r25
    3e3e:	8f 93       	push	r24
    3e40:	0e 94 16 32 	call	0x642c	; 0x642c <printf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
    3e44:	38 89       	ldd	r19, Y+16	; 0x10
    3e46:	2f 85       	ldd	r18, Y+15	; 0x0f
    3e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e4c:	1f 92       	push	r1
    3e4e:	3f 93       	push	r19
    3e50:	1f 92       	push	r1
    3e52:	2f 93       	push	r18
    3e54:	1f 92       	push	r1
    3e56:	9f 93       	push	r25
    3e58:	1f 92       	push	r1
    3e5a:	8f 93       	push	r24
    3e5c:	83 e5       	ldi	r24, 0x53	; 83
    3e5e:	93 e0       	ldi	r25, 0x03	; 3
    3e60:	9f 93       	push	r25
    3e62:	8f 93       	push	r24
    3e64:	0e 94 16 32 	call	0x642c	; 0x642c <printf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
    3e68:	3c 89       	ldd	r19, Y+20	; 0x14
    3e6a:	2b 89       	ldd	r18, Y+19	; 0x13
    3e6c:	9a 89       	ldd	r25, Y+18	; 0x12
    3e6e:	89 89       	ldd	r24, Y+17	; 0x11
    3e70:	1f 92       	push	r1
    3e72:	3f 93       	push	r19
    3e74:	1f 92       	push	r1
    3e76:	2f 93       	push	r18
    3e78:	1f 92       	push	r1
    3e7a:	9f 93       	push	r25
    3e7c:	1f 92       	push	r1
    3e7e:	8f 93       	push	r24
    3e80:	8e e6       	ldi	r24, 0x6E	; 110
    3e82:	93 e0       	ldi	r25, 0x03	; 3
    3e84:	9f 93       	push	r25
    3e86:	8f 93       	push	r24
    3e88:	0e 94 16 32 	call	0x642c	; 0x642c <printf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
    3e8c:	38 8d       	ldd	r19, Y+24	; 0x18
    3e8e:	2f 89       	ldd	r18, Y+23	; 0x17
    3e90:	9e 89       	ldd	r25, Y+22	; 0x16
    3e92:	8d 89       	ldd	r24, Y+21	; 0x15
    3e94:	0f b6       	in	r0, 0x3f	; 63
    3e96:	f8 94       	cli
    3e98:	de bf       	out	0x3e, r29	; 62
    3e9a:	0f be       	out	0x3f, r0	; 63
    3e9c:	cd bf       	out	0x3d, r28	; 61
    3e9e:	1f 92       	push	r1
    3ea0:	3f 93       	push	r19
    3ea2:	1f 92       	push	r1
    3ea4:	2f 93       	push	r18
    3ea6:	1f 92       	push	r1
    3ea8:	9f 93       	push	r25
    3eaa:	1f 92       	push	r1
    3eac:	8f 93       	push	r24
    3eae:	89 e8       	ldi	r24, 0x89	; 137
    3eb0:	93 e0       	ldi	r25, 0x03	; 3
    3eb2:	9f 93       	push	r25
    3eb4:	8f 93       	push	r24
    3eb6:	0e 94 16 32 	call	0x642c	; 0x642c <printf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
    3eba:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3ebc:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3ebe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ec0:	89 8d       	ldd	r24, Y+25	; 0x19
    3ec2:	1f 92       	push	r1
    3ec4:	3f 93       	push	r19
    3ec6:	1f 92       	push	r1
    3ec8:	2f 93       	push	r18
    3eca:	1f 92       	push	r1
    3ecc:	9f 93       	push	r25
    3ece:	1f 92       	push	r1
    3ed0:	8f 93       	push	r24
    3ed2:	84 ea       	ldi	r24, 0xA4	; 164
    3ed4:	93 e0       	ldi	r25, 0x03	; 3
    3ed6:	9f 93       	push	r25
    3ed8:	8f 93       	push	r24
    3eda:	0e 94 16 32 	call	0x642c	; 0x642c <printf>
}
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	cd bf       	out	0x3d, r28	; 61
    3ee8:	6d 96       	adiw	r28, 0x1d	; 29
    3eea:	0f b6       	in	r0, 0x3f	; 63
    3eec:	f8 94       	cli
    3eee:	de bf       	out	0x3e, r29	; 62
    3ef0:	0f be       	out	0x3f, r0	; 63
    3ef2:	cd bf       	out	0x3d, r28	; 61
    3ef4:	df 91       	pop	r29
    3ef6:	cf 91       	pop	r28
    3ef8:	1f 91       	pop	r17
    3efa:	0f 91       	pop	r16
    3efc:	08 95       	ret

00003efe <main>:
			seq_query,\
			len_query);
}

int main()
{
    3efe:	cf 93       	push	r28
    3f00:	df 93       	push	r29
    3f02:	cd b7       	in	r28, 0x3d	; 61
    3f04:	de b7       	in	r29, 0x3e	; 62
    3f06:	c5 5e       	subi	r28, 0xE5	; 229
    3f08:	d1 09       	sbc	r29, r1
    3f0a:	0f b6       	in	r0, 0x3f	; 63
    3f0c:	f8 94       	cli
    3f0e:	de bf       	out	0x3e, r29	; 62
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	cd bf       	out	0x3d, r28	; 61
	
	//uint8_t prev_sw1 = 1; // VAR for sw1 pressing detect
	SYS_Init();
    3f14:	0e 94 4c 2b 	call	0x5698	; 0x5698 <SYS_Init>
	// INIT MCU
	avr_init();
    3f18:	1c df       	rcall	.-456    	; 0x3d52 <avr_init>
	spi_init(); //SPI Master, MODE0, 4Mhz(DIV4), CS_PB.3=HIGH - suitable for WIZNET 5x00(1/2/5)
    3f1a:	4b d1       	rcall	.+662    	; 0x41b2 <spi_init>

	// Print program metrics
	//PRINTF("%S", str_prog_name);// ???????? ?????????
	//PRINTF("Compiled at: %S %S\r\n", compile_time, compile_date);// ????? ???? ??????????
	//PRINTF(">> MCU is: %S; CLK is: %luHz\r\n", str_mcu, F_CPU);// MCU Name && FREQ
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());
    3f1c:	ea dd       	rcall	.-1068   	; 0x3af2 <freeRam>
    3f1e:	9f 93       	push	r25
    3f20:	8f 93       	push	r24
    3f22:	8c e5       	ldi	r24, 0x5C	; 92
    3f24:	93 e0       	ldi	r25, 0x03	; 3
    3f26:	9f 93       	push	r25
    3f28:	8f 93       	push	r24
    3f2a:	0e 94 29 32 	call	0x6452	; 0x6452 <printf_P>
    3f2e:	0f 90       	pop	r0

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
	while(i--)
    3f30:	0f 90       	pop	r0
    3f32:	0f 90       	pop	r0
    3f34:	0f 90       	pop	r0
    3f36:	83 e0       	ldi	r24, 0x03	; 3
	//PRINTF("Compiled at: %S %S\r\n", compile_time, compile_date);// ????? ???? ??????????
	//PRINTF(">> MCU is: %S; CLK is: %luHz\r\n", str_mcu, F_CPU);// MCU Name && FREQ
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
    3f38:	1a c0       	rjmp	.+52     	; 0x3f6e <main+0x70>
	while(i--)
    3f3a:	85 b1       	in	r24, 0x05	; 5
	{
		LED0ON;
    3f3c:	8f 7e       	andi	r24, 0xEF	; 239
    3f3e:	85 b9       	out	0x05, r24	; 5
    3f40:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3f42:	30 e7       	ldi	r19, 0x70	; 112
    3f44:	82 e0       	ldi	r24, 0x02	; 2
    3f46:	21 50       	subi	r18, 0x01	; 1
    3f48:	30 40       	sbci	r19, 0x00	; 0
    3f4a:	80 40       	sbci	r24, 0x00	; 0
    3f4c:	e1 f7       	brne	.-8      	; 0x3f46 <main+0x48>
    3f4e:	00 c0       	rjmp	.+0      	; 0x3f50 <main+0x52>
    3f50:	00 00       	nop
    3f52:	85 b1       	in	r24, 0x05	; 5
		_delay_ms(100);
		LED0OFF;
    3f54:	80 61       	ori	r24, 0x10	; 16
    3f56:	85 b9       	out	0x05, r24	; 5
    3f58:	ef ef       	ldi	r30, 0xFF	; 255
    3f5a:	f3 ec       	ldi	r31, 0xC3	; 195
    3f5c:	29 e0       	ldi	r18, 0x09	; 9
    3f5e:	e1 50       	subi	r30, 0x01	; 1
    3f60:	f0 40       	sbci	r31, 0x00	; 0
    3f62:	20 40       	sbci	r18, 0x00	; 0
    3f64:	e1 f7       	brne	.-8      	; 0x3f5e <main+0x60>
    3f66:	00 c0       	rjmp	.+0      	; 0x3f68 <main+0x6a>
    3f68:	00 00       	nop
    3f6a:	a8 95       	wdr
		_delay_ms(400);
		wdt_reset();
    3f6c:	89 2f       	mov	r24, r25
	//PRINTF(">> MCU is: %S; CLK is: %luHz\r\n", str_mcu, F_CPU);// MCU Name && FREQ
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
	while(i--)
    3f6e:	9f ef       	ldi	r25, 0xFF	; 255
    3f70:	98 0f       	add	r25, r24
    3f72:	81 11       	cpse	r24, r1
		_delay_ms(400);
		wdt_reset();
	}

	//Wizchip WIZ5500 Ethernet initialize
	IO_LIBRARY_Init(); //After that ping must working
    3f74:	e2 cf       	rjmp	.-60     	; 0x3f3a <main+0x3c>
    3f76:	a4 de       	rcall	.-696    	; 0x3cc0 <IO_LIBRARY_Init>
	print_network_information();
    3f78:	04 df       	rcall	.-504    	; 0x3d82 <print_network_information>
    3f7a:	85 e0       	ldi	r24, 0x05	; 5
	//Find MQTT broker and connect with it
	uint8_t mqtt_buf[100];
	int32_t mqtt_rc = 0;
	Network mqtt_network;
	Client mqtt_client;
	mqtt_network.my_socket = SOCK_MQTT;
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	a0 e0       	ldi	r26, 0x00	; 0
    3f80:	b0 e0       	ldi	r27, 0x00	; 0
    3f82:	a9 96       	adiw	r28, 0x29	; 41
    3f84:	8c af       	std	Y+60, r24	; 0x3c
    3f86:	9d af       	std	Y+61, r25	; 0x3d
    3f88:	ae af       	std	Y+62, r26	; 0x3e
    3f8a:	bf af       	std	Y+63, r27	; 0x3f
    3f8c:	a9 97       	sbiw	r28, 0x29	; 41
    3f8e:	e8 e4       	ldi	r30, 0x48	; 72
	
	PRINTF(">>Trying connect to MQTT broker: %d.%d.%d.%d ..\r\n", mqtt_target[0], mqtt_target[1], mqtt_target[2], mqtt_target[3]);
    3f90:	f2 e0       	ldi	r31, 0x02	; 2
    3f92:	33 81       	ldd	r19, Z+3	; 0x03
    3f94:	22 81       	ldd	r18, Z+2	; 0x02
    3f96:	91 81       	ldd	r25, Z+1	; 0x01
    3f98:	80 81       	ld	r24, Z
    3f9a:	1f 92       	push	r1
    3f9c:	3f 93       	push	r19
    3f9e:	1f 92       	push	r1
    3fa0:	2f 93       	push	r18
    3fa2:	1f 92       	push	r1
    3fa4:	9f 93       	push	r25
    3fa6:	1f 92       	push	r1
    3fa8:	8f 93       	push	r24
    3faa:	8a e2       	ldi	r24, 0x2A	; 42
    3fac:	93 e0       	ldi	r25, 0x03	; 3
    3fae:	9f 93       	push	r25
    3fb0:	8f 93       	push	r24
    3fb2:	0e 94 29 32 	call	0x6452	; 0x6452 <printf_P>
	NewNetwork(&mqtt_network);
    3fb6:	ce 01       	movw	r24, r28
    3fb8:	8b 59       	subi	r24, 0x9B	; 155
    3fba:	9f 4f       	sbci	r25, 0xFF	; 255
    3fbc:	b9 dc       	rcall	.-1678   	; 0x3930 <NewNetwork>
    3fbe:	4b e5       	ldi	r20, 0x5B	; 91
	ConnectNetwork(&mqtt_network, mqtt_target, 1883);
    3fc0:	57 e0       	ldi	r21, 0x07	; 7
    3fc2:	68 e4       	ldi	r22, 0x48	; 72
    3fc4:	72 e0       	ldi	r23, 0x02	; 2
    3fc6:	ce 01       	movw	r24, r28
    3fc8:	8b 59       	subi	r24, 0x9B	; 155
    3fca:	9f 4f       	sbci	r25, 0xFF	; 255
    3fcc:	bf dc       	rcall	.-1666   	; 0x394c <ConnectNetwork>
    3fce:	a1 2c       	mov	r10, r1
	MQTTClient(&mqtt_client, &mqtt_network, 1000, mqtt_buf, 100, mqtt_readBuffer, MQTT_BUFFER_SIZE);
    3fd0:	68 94       	set
    3fd2:	bb 24       	eor	r11, r11
    3fd4:	b1 f8       	bld	r11, 1
    3fd6:	0f 2e       	mov	r0, r31
    3fd8:	fb ea       	ldi	r31, 0xAB	; 171
    3fda:	cf 2e       	mov	r12, r31
    3fdc:	f9 e1       	ldi	r31, 0x19	; 25
    3fde:	df 2e       	mov	r13, r31
    3fe0:	f0 2d       	mov	r31, r0
    3fe2:	0f 2e       	mov	r0, r31
    3fe4:	f4 e6       	ldi	r31, 0x64	; 100
    3fe6:	ef 2e       	mov	r14, r31
    3fe8:	f1 2c       	mov	r15, r1
    3fea:	f0 2d       	mov	r31, r0
    3fec:	8e 01       	movw	r16, r28
    3fee:	0f 5f       	subi	r16, 0xFF	; 255
    3ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff2:	28 ee       	ldi	r18, 0xE8	; 232
    3ff4:	33 e0       	ldi	r19, 0x03	; 3
    3ff6:	40 e0       	ldi	r20, 0x00	; 0
    3ff8:	50 e0       	ldi	r21, 0x00	; 0
    3ffa:	be 01       	movw	r22, r28
    3ffc:	6b 59       	subi	r22, 0x9B	; 155
    3ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    4000:	ce 01       	movw	r24, r28
    4002:	81 59       	subi	r24, 0x91	; 145
    4004:	9f 4f       	sbci	r25, 0xFF	; 255
    4006:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <MQTTClient>
    400a:	8b e3       	ldi	r24, 0x3B	; 59
	
	//Connection to MQTT broker
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    400c:	e1 ed       	ldi	r30, 0xD1	; 209
    400e:	f2 e0       	ldi	r31, 0x02	; 2
    4010:	de 01       	movw	r26, r28
    4012:	a8 55       	subi	r26, 0x58	; 88
    4014:	bf 4f       	sbci	r27, 0xFF	; 255
    4016:	01 90       	ld	r0, Z+
    4018:	0d 92       	st	X+, r0
    401a:	8a 95       	dec	r24
    401c:	e1 f7       	brne	.-8      	; 0x4016 <main+0x118>
    401e:	c6 54       	subi	r28, 0x46	; 70
	data.willFlag = 0;
    4020:	df 4f       	sbci	r29, 0xFF	; 255
    4022:	18 82       	st	Y, r1
    4024:	ca 5b       	subi	r28, 0xBA	; 186
    4026:	d0 40       	sbci	r29, 0x00	; 0
    4028:	84 e0       	ldi	r24, 0x04	; 4
	data.MQTTVersion = 4;//3;
    402a:	c2 55       	subi	r28, 0x52	; 82
    402c:	df 4f       	sbci	r29, 0xFF	; 255
    402e:	88 83       	st	Y, r24
    4030:	ce 5a       	subi	r28, 0xAE	; 174
    4032:	d0 40       	sbci	r29, 0x00	; 0
    4034:	8f eb       	ldi	r24, 0xBF	; 191
	data.clientID.cstring = (char*)"w5500_avr_client";
    4036:	93 e0       	ldi	r25, 0x03	; 3
    4038:	c1 55       	subi	r28, 0x51	; 81
    403a:	df 4f       	sbci	r29, 0xFF	; 255
    403c:	99 83       	std	Y+1, r25	; 0x01
    403e:	88 83       	st	Y, r24
    4040:	cf 5a       	subi	r28, 0xAF	; 175
    4042:	d0 40       	sbci	r29, 0x00	; 0
    4044:	80 ed       	ldi	r24, 0xD0	; 208
	data.username.cstring = (char*)"user1234";
    4046:	93 e0       	ldi	r25, 0x03	; 3
    4048:	cd 52       	subi	r28, 0x2D	; 45
    404a:	df 4f       	sbci	r29, 0xFF	; 255
    404c:	99 83       	std	Y+1, r25	; 0x01
    404e:	88 83       	st	Y, r24
    4050:	c3 5d       	subi	r28, 0xD3	; 211
    4052:	d0 40       	sbci	r29, 0x00	; 0
    4054:	8f ec       	ldi	r24, 0xCF	; 207
	data.password.cstring = (char*)"\0";
    4056:	92 e0       	ldi	r25, 0x02	; 2
    4058:	c5 52       	subi	r28, 0x25	; 37
    405a:	df 4f       	sbci	r29, 0xFF	; 255
    405c:	99 83       	std	Y+1, r25	; 0x01
    405e:	88 83       	st	Y, r24
    4060:	cb 5d       	subi	r28, 0xDB	; 219
    4062:	d0 40       	sbci	r29, 0x00	; 0
    4064:	8c e3       	ldi	r24, 0x3C	; 60
	data.keepAliveInterval = 60;
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	c9 54       	subi	r28, 0x49	; 73
    406a:	df 4f       	sbci	r29, 0xFF	; 255
    406c:	99 83       	std	Y+1, r25	; 0x01
    406e:	88 83       	st	Y, r24
    4070:	c7 5b       	subi	r28, 0xB7	; 183
    4072:	d0 40       	sbci	r29, 0x00	; 0
    4074:	81 e0       	ldi	r24, 0x01	; 1
	data.cleansession = 1;
    4076:	c7 54       	subi	r28, 0x47	; 71
    4078:	df 4f       	sbci	r29, 0xFF	; 255
    407a:	88 83       	st	Y, r24
    407c:	c9 5b       	subi	r28, 0xB9	; 185
    407e:	d0 40       	sbci	r29, 0x00	; 0
    4080:	be 01       	movw	r22, r28
	mqtt_rc = MQTTConnect(&mqtt_client, &data);
    4082:	68 55       	subi	r22, 0x58	; 88
    4084:	7f 4f       	sbci	r23, 0xFF	; 255
    4086:	ce 01       	movw	r24, r28
    4088:	81 59       	subi	r24, 0x91	; 145
    408a:	9f 4f       	sbci	r25, 0xFF	; 255
    408c:	0e 94 4e 12 	call	0x249c	; 0x249c <MQTTConnect>
    4090:	0f b6       	in	r0, 0x3f	; 63
	if (mqtt_rc == SUCCESSS)
    4092:	f8 94       	cli
    4094:	de bf       	out	0x3e, r29	; 62
    4096:	0f be       	out	0x3f, r0	; 63
    4098:	cd bf       	out	0x3d, r28	; 61
    409a:	61 15       	cp	r22, r1
    409c:	71 05       	cpc	r23, r1
    409e:	81 05       	cpc	r24, r1
    40a0:	91 05       	cpc	r25, r1
    40a2:	e1 f5       	brne	.+120    	; 0x411c <main+0x21e>
    40a4:	9f 93       	push	r25
	{
		PRINTF("++MQTT Connected SUCCESS: %ld\r\n", mqtt_rc);
    40a6:	8f 93       	push	r24
    40a8:	7f 93       	push	r23
    40aa:	6f 93       	push	r22
    40ac:	8a e0       	ldi	r24, 0x0A	; 10
    40ae:	93 e0       	ldi	r25, 0x03	; 3
    40b0:	9f 93       	push	r25
    40b2:	8f 93       	push	r24
    40b4:	0e 94 29 32 	call	0x6452	; 0x6452 <printf_P>
    40b8:	7e 01       	movw	r14, r28
		PRINTF("--MQTT Connected ERROR: %ld\r\n", mqtt_rc);
		while(1);//Reboot the board
	}
	
	// Subscribe to all topics
	char SubString[] = "/#";// Subscribe for all that begin from "/"
    40ba:	f3 ee       	ldi	r31, 0xE3	; 227
    40bc:	ef 0e       	add	r14, r31
    40be:	f1 1c       	adc	r15, r1
    40c0:	8f e2       	ldi	r24, 0x2F	; 47
    40c2:	93 e2       	ldi	r25, 0x23	; 35
    40c4:	f7 01       	movw	r30, r14
    40c6:	91 83       	std	Z+1, r25	; 0x01
    40c8:	80 83       	st	Z, r24
    40ca:	12 82       	std	Z+2, r1	; 0x02
    40cc:	28 ec       	ldi	r18, 0xC8	; 200
	mqtt_rc = MQTTSubscribe(&mqtt_client, SubString, QOS0, messageArrived);
    40ce:	3d e1       	ldi	r19, 0x1D	; 29
    40d0:	40 e0       	ldi	r20, 0x00	; 0
    40d2:	b7 01       	movw	r22, r14
    40d4:	ce 01       	movw	r24, r28
    40d6:	81 59       	subi	r24, 0x91	; 145
    40d8:	9f 4f       	sbci	r25, 0xFF	; 255
    40da:	0e 94 09 13 	call	0x2612	; 0x2612 <MQTTSubscribe>
    40de:	9f 93       	push	r25
	PRINTF("Subscribed (%s) %d\r\n", SubString, mqtt_rc);
    40e0:	8f 93       	push	r24
    40e2:	7f 93       	push	r23
    40e4:	6f 93       	push	r22
    40e6:	ff 92       	push	r15
    40e8:	ef 92       	push	r14
    40ea:	85 ef       	ldi	r24, 0xF5	; 245
    40ec:	92 e0       	ldi	r25, 0x02	; 2
    40ee:	9f 93       	push	r25
    40f0:	8f 93       	push	r24
    40f2:	0e 94 29 32 	call	0x6452	; 0x6452 <printf_P>

	uint32_t timer_mqtt_pub_1sec = millis();
    40f6:	d9 dd       	rcall	.-1102   	; 0x3caa <millis>
	/* Loopback Test: TCP Server and UDP */
	// Test for Ethernet data transfer validation
	uint32_t timer_link_1sec = millis();
    40f8:	d8 dd       	rcall	.-1104   	; 0x3caa <millis>
    40fa:	6b 01       	movw	r12, r22
    40fc:	7c 01       	movw	r14, r24
    40fe:	20 e0       	ldi	r18, 0x00	; 0
	// w5500.h popis pre urcenie TCP/UDP
	int8_t socket_number = socket(5,Sn_MR_UDP,42000,0x00);
    4100:	40 e1       	ldi	r20, 0x10	; 16
    4102:	54 ea       	ldi	r21, 0xA4	; 164
    4104:	62 e0       	ldi	r22, 0x02	; 2
    4106:	85 e0       	ldi	r24, 0x05	; 5
    4108:	0e 94 67 02 	call	0x4ce	; 0x4ce <socket>
    410c:	0f b6       	in	r0, 0x3f	; 63
	if (socket_number == 5){
    410e:	f8 94       	cli
    4110:	de bf       	out	0x3e, r29	; 62
    4112:	0f be       	out	0x3f, r0	; 63
    4114:	cd bf       	out	0x3d, r28	; 61
    4116:	85 30       	cpi	r24, 0x05	; 5
    4118:	d9 f4       	brne	.+54     	; 0x4150 <main+0x252>
    411a:	11 c0       	rjmp	.+34     	; 0x413e <main+0x240>
    411c:	9f 93       	push	r25
	{
		PRINTF("++MQTT Connected SUCCESS: %ld\r\n", mqtt_rc);
	}
	else
	{
		PRINTF("--MQTT Connected ERROR: %ld\r\n", mqtt_rc);
    411e:	8f 93       	push	r24
    4120:	7f 93       	push	r23
    4122:	6f 93       	push	r22
    4124:	87 ed       	ldi	r24, 0xD7	; 215
    4126:	92 e0       	ldi	r25, 0x02	; 2
    4128:	9f 93       	push	r25
    412a:	8f 93       	push	r24
    412c:	0e 94 29 32 	call	0x6452	; 0x6452 <printf_P>
    4130:	0f 90       	pop	r0
    4132:	0f 90       	pop	r0
    4134:	0f 90       	pop	r0
    4136:	0f 90       	pop	r0
    4138:	0f 90       	pop	r0
    413a:	0f 90       	pop	r0
    413c:	ff cf       	rjmp	.-2      	; 0x413c <main+0x23e>
    413e:	89 ed       	ldi	r24, 0xD9	; 217
	// Test for Ethernet data transfer validation
	uint32_t timer_link_1sec = millis();
	// w5500.h popis pre urcenie TCP/UDP
	int8_t socket_number = socket(5,Sn_MR_UDP,42000,0x00);
	if (socket_number == 5){
		printf("Socket number is correct\n\r");
    4140:	93 e0       	ldi	r25, 0x03	; 3
    4142:	9f 93       	push	r25
    4144:	8f 93       	push	r24
    4146:	0e 94 16 32 	call	0x642c	; 0x642c <printf>
    414a:	0f 90       	pop	r0
    414c:	0f 90       	pop	r0
    414e:	08 c0       	rjmp	.+16     	; 0x4160 <main+0x262>
    4150:	84 ef       	ldi	r24, 0xF4	; 244
	}
	else{
		printf("Socket number is incorrect\n\r");
    4152:	93 e0       	ldi	r25, 0x03	; 3
    4154:	9f 93       	push	r25
    4156:	8f 93       	push	r24
    4158:	0e 94 16 32 	call	0x642c	; 0x642c <printf>
    415c:	0f 90       	pop	r0
	}
	//mqtt_pub(&mqtt_client, PUBLISH_TEPLOTA_0, 'a', 1);
	//sendto(socket_number,test,sizeof(test),ping_ip,42000);
	while(1)
	{	
		SYS_TaskHandler();
    415e:	0f 90       	pop	r0
    4160:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <SYS_TaskHandler>
		HAL_UartTaskHandler();
    4164:	42 d1       	rcall	.+644    	; 0x43ea <HAL_UartTaskHandler>
		APP_TaskHandler();
    4166:	bc dc       	rcall	.-1672   	; 0x3ae0 <APP_TaskHandler>
		//Here at least every 1sec
		wdt_reset(); // WDT reset at least every sec
    4168:	a8 95       	wdr
//  			data_ready = 0;
//  		}
		

		// MQTT broker connection and sub receive
		MQTTYield(&mqtt_client, 100);//~100msec blocking here
    416a:	44 e6       	ldi	r20, 0x64	; 100
    416c:	50 e0       	ldi	r21, 0x00	; 0
    416e:	60 e0       	ldi	r22, 0x00	; 0
    4170:	70 e0       	ldi	r23, 0x00	; 0
    4172:	ce 01       	movw	r24, r28
    4174:	81 59       	subi	r24, 0x91	; 145
    4176:	9f 4f       	sbci	r25, 0xFF	; 255
    4178:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <MQTTYield>
// 		}
// 
// 		//loopback_ret = loopback_tcpc(SOCK_TCPS, gDATABUF, destip, destport);
// 		//if(loopback_ret < 0) printf("loopback ret: %ld\r\n", loopback_ret); // TCP Socket Error code

		if((millis()-timer_link_1sec)> 1000)
    417c:	96 dd       	rcall	.-1236   	; 0x3caa <millis>
    417e:	dc 01       	movw	r26, r24
    4180:	cb 01       	movw	r24, r22
    4182:	8c 19       	sub	r24, r12
    4184:	9d 09       	sbc	r25, r13
    4186:	ae 09       	sbc	r26, r14
    4188:	bf 09       	sbc	r27, r15
    418a:	89 3e       	cpi	r24, 0xE9	; 233
    418c:	93 40       	sbci	r25, 0x03	; 3
    418e:	a1 05       	cpc	r26, r1
    4190:	b1 05       	cpc	r27, r1
    4192:	30 f3       	brcs	.-52     	; 0x4160 <main+0x262>
		{
			//here every 1 sec
			timer_link_1sec = millis();
    4194:	8a dd       	rcall	.-1260   	; 0x3caa <millis>
    4196:	6b 01       	movw	r12, r22
    4198:	7c 01       	movw	r14, r24
    419a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <wizphy_getphylink>
			if(wizphy_getphylink() == PHY_LINK_ON)
    419e:	81 30       	cpi	r24, 0x01	; 1
    41a0:	21 f4       	brne	.+8      	; 0x41aa <main+0x2ac>
    41a2:	85 b1       	in	r24, 0x05	; 5
			{
				LED0ON;
    41a4:	8f 7e       	andi	r24, 0xEF	; 239
    41a6:	85 b9       	out	0x05, r24	; 5
    41a8:	db cf       	rjmp	.-74     	; 0x4160 <main+0x262>
    41aa:	85 b1       	in	r24, 0x05	; 5
			}
			else
			{
				LED0OFF;
    41ac:	80 61       	ori	r24, 0x10	; 16
    41ae:	85 b9       	out	0x05, r24	; 5
    41b0:	d7 cf       	rjmp	.-82     	; 0x4160 <main+0x262>

000041b2 <spi_init>:

void
spi_init(void)
{
  // CS PIN for FLASH
  DDRD	|= BV(WIZNET_CS); // CS to OUT && Disable
    41b2:	8a b1       	in	r24, 0x0a	; 10
    41b4:	80 61       	ori	r24, 0x10	; 16
    41b6:	8a b9       	out	0x0a, r24	; 10
  SPI_WIZNET_DISABLE();
    41b8:	8b b1       	in	r24, 0x0b	; 11
    41ba:	80 61       	ori	r24, 0x10	; 16
    41bc:	8b b9       	out	0x0b, r24	; 11
  
  /* Initalize ports for communication with SPI units. */
  /* CSN=SS and must be output when master! */
  DDRB  |= BV(MOSI) | BV(SCK);
    41be:	84 b1       	in	r24, 0x04	; 4
    41c0:	86 60       	ori	r24, 0x06	; 6
    41c2:	84 b9       	out	0x04, r24	; 4
  PORTB |= BV(MOSI) | BV(SCK);
    41c4:	85 b1       	in	r24, 0x05	; 5
    41c6:	86 60       	ori	r24, 0x06	; 6
    41c8:	85 b9       	out	0x05, r24	; 5
  DDRD |= BV(CSN);
    41ca:	8a b1       	in	r24, 0x0a	; 10
    41cc:	80 64       	ori	r24, 0x40	; 64
    41ce:	8a b9       	out	0x0a, r24	; 10
 
  /* Enables SPI, selects "master", clock rate FCK / 4 - 4Mhz, and SPI mode 0 */
  SPCR = BV(SPE) | BV(MSTR);
    41d0:	80 e5       	ldi	r24, 0x50	; 80
    41d2:	8c bd       	out	0x2c, r24	; 44
#if defined(SPI_8_MHZ)
  SPSR = BV(SPI2X); //FCK / 2 - 8Mhz
#elif defined (SPI_4_MHZ)
  SPSR = 0x0; //FCK / 4 - 4Mhz
#else
  SPSR = 0x0; //FCK / 4 - 4Mhz
    41d4:	1d bc       	out	0x2d, r1	; 45
    41d6:	08 95       	ret

000041d8 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    41d8:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    41da:	0f b6       	in	r0, 0x3f	; 63
    41dc:	f8 94       	cli
    41de:	a8 95       	wdr
    41e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    41e4:	88 61       	ori	r24, 0x18	; 24
    41e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    41ea:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    41ee:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    41f0:	e1 e6       	ldi	r30, 0x61	; 97
    41f2:	f0 e0       	ldi	r31, 0x00	; 0
    41f4:	80 e8       	ldi	r24, 0x80	; 128
    41f6:	80 83       	st	Z, r24
  CLKPR = 0;
    41f8:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    41fa:	78 94       	sei

  HAL_TimerInit();
    41fc:	01 c0       	rjmp	.+2      	; 0x4200 <HAL_TimerInit>
    41fe:	08 95       	ret

00004200 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
    4200:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <halTimerIrqCount>
    4204:	80 e1       	ldi	r24, 0x10	; 16
    4206:	97 e2       	ldi	r25, 0x27	; 39
    4208:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    420c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    4210:	e1 ea       	ldi	r30, 0xA1	; 161
    4212:	f0 e0       	ldi	r31, 0x00	; 0
    4214:	88 e0       	ldi	r24, 0x08	; 8
    4216:	80 83       	st	Z, r24
    4218:	80 81       	ld	r24, Z
    421a:	82 60       	ori	r24, 0x02	; 2
    421c:	80 83       	st	Z, r24
    421e:	e2 e7       	ldi	r30, 0x72	; 114
    4220:	f0 e0       	ldi	r31, 0x00	; 0
    4222:	80 81       	ld	r24, Z
    4224:	82 60       	ori	r24, 0x02	; 2
    4226:	80 83       	st	Z, r24
    4228:	08 95       	ret

0000422a <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    422a:	1f 92       	push	r1
    422c:	0f 92       	push	r0
    422e:	0f b6       	in	r0, 0x3f	; 63
    4230:	0f 92       	push	r0
    4232:	11 24       	eor	r1, r1
    4234:	8f 93       	push	r24
  halTimerIrqCount++;
    4236:	80 91 ad 1c 	lds	r24, 0x1CAD	; 0x801cad <halTimerIrqCount>
    423a:	8f 5f       	subi	r24, 0xFF	; 255
    423c:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <halTimerIrqCount>
}
    4240:	8f 91       	pop	r24
    4242:	0f 90       	pop	r0
    4244:	0f be       	out	0x3f, r0	; 63
    4246:	0f 90       	pop	r0
    4248:	1f 90       	pop	r1
    424a:	18 95       	reti

0000424c <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
    424c:	1f 92       	push	r1
    424e:	0f 92       	push	r0
    4250:	0f b6       	in	r0, 0x3f	; 63
    4252:	0f 92       	push	r0
    4254:	11 24       	eor	r1, r1
    4256:	8f 93       	push	r24
  halSleepTimerEvent = true;
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <halSleepTimerEvent>
}
    425e:	8f 91       	pop	r24
    4260:	0f 90       	pop	r0
    4262:	0f be       	out	0x3f, r0	; 63
    4264:	0f 90       	pop	r0
    4266:	1f 90       	pop	r1
    4268:	18 95       	reti

0000426a <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
    426a:	cf 93       	push	r28
    426c:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
    426e:	ef ee       	ldi	r30, 0xEF	; 239
    4270:	f4 e0       	ldi	r31, 0x04	; 4
    4272:	26 81       	ldd	r18, Z+6	; 0x06
    4274:	37 81       	ldd	r19, Z+7	; 0x07
    4276:	64 81       	ldd	r22, Z+4	; 0x04
    4278:	75 81       	ldd	r23, Z+5	; 0x05
    427a:	26 17       	cp	r18, r22
    427c:	37 07       	cpc	r19, r23
    427e:	c9 f0       	breq	.+50     	; 0x42b2 <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
    4280:	c0 85       	ldd	r28, Z+8	; 0x08
    4282:	d1 85       	ldd	r29, Z+9	; 0x09
    4284:	42 81       	ldd	r20, Z+2	; 0x02
    4286:	53 81       	ldd	r21, Z+3	; 0x03
    4288:	da 01       	movw	r26, r20
    428a:	11 96       	adiw	r26, 0x01	; 1
    428c:	b3 83       	std	Z+3, r27	; 0x03
    428e:	a2 83       	std	Z+2, r26	; 0x02
    4290:	fe 01       	movw	r30, r28
    4292:	e4 0f       	add	r30, r20
    4294:	f5 1f       	adc	r31, r21
    4296:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
    4298:	6a 17       	cp	r22, r26
    429a:	7b 07       	cpc	r23, r27
    429c:	21 f4       	brne	.+8      	; 0x42a6 <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
    429e:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <txFifo+0x3>
    42a2:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <txFifo+0x2>
  txFifo.bytes++;
    42a6:	2f 5f       	subi	r18, 0xFF	; 255
    42a8:	3f 4f       	sbci	r19, 0xFF	; 255
    42aa:	30 93 f6 04 	sts	0x04F6, r19	; 0x8004f6 <txFifo+0x7>
    42ae:	20 93 f5 04 	sts	0x04F5, r18	; 0x8004f5 <txFifo+0x6>
}
    42b2:	df 91       	pop	r29
    42b4:	cf 91       	pop	r28
    42b6:	08 95       	ret

000042b8 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
    42b8:	4f b7       	in	r20, 0x3f	; 63
    42ba:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
    42bc:	e5 ee       	ldi	r30, 0xE5	; 229
    42be:	f4 e0       	ldi	r31, 0x04	; 4
    42c0:	20 85       	ldd	r18, Z+8	; 0x08
    42c2:	31 85       	ldd	r19, Z+9	; 0x09
    42c4:	80 81       	ld	r24, Z
    42c6:	91 81       	ldd	r25, Z+1	; 0x01
    42c8:	bc 01       	movw	r22, r24
    42ca:	6f 5f       	subi	r22, 0xFF	; 255
    42cc:	7f 4f       	sbci	r23, 0xFF	; 255
    42ce:	71 83       	std	Z+1, r23	; 0x01
    42d0:	60 83       	st	Z, r22
    42d2:	d9 01       	movw	r26, r18
    42d4:	a8 0f       	add	r26, r24
    42d6:	b9 1f       	adc	r27, r25
    42d8:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
    42da:	60 81       	ld	r22, Z
    42dc:	71 81       	ldd	r23, Z+1	; 0x01
    42de:	24 81       	ldd	r18, Z+4	; 0x04
    42e0:	35 81       	ldd	r19, Z+5	; 0x05
    42e2:	62 17       	cp	r22, r18
    42e4:	73 07       	cpc	r23, r19
    42e6:	21 f4       	brne	.+8      	; 0x42f0 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
    42e8:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <rxFifo+0x1>
    42ec:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <rxFifo>
    rxFifo.bytes--;
    42f0:	e5 ee       	ldi	r30, 0xE5	; 229
    42f2:	f4 e0       	ldi	r31, 0x04	; 4
    42f4:	26 81       	ldd	r18, Z+6	; 0x06
    42f6:	37 81       	ldd	r19, Z+7	; 0x07
    42f8:	21 50       	subi	r18, 0x01	; 1
    42fa:	31 09       	sbc	r19, r1
    42fc:	37 83       	std	Z+7, r19	; 0x07
    42fe:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
    4300:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
    4302:	08 95       	ret

00004304 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
    4304:	1f 92       	push	r1
    4306:	0f 92       	push	r0
    4308:	0f b6       	in	r0, 0x3f	; 63
    430a:	0f 92       	push	r0
    430c:	11 24       	eor	r1, r1
    430e:	0b b6       	in	r0, 0x3b	; 59
    4310:	0f 92       	push	r0
    4312:	8f 93       	push	r24
    4314:	ef 93       	push	r30
    4316:	ff 93       	push	r31
  udrEmpty = true;
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
    431e:	e9 ec       	ldi	r30, 0xC9	; 201
    4320:	f0 e0       	ldi	r31, 0x00	; 0
    4322:	80 81       	ld	r24, Z
    4324:	8f 7d       	andi	r24, 0xDF	; 223
    4326:	80 83       	st	Z, r24
}
    4328:	ff 91       	pop	r31
    432a:	ef 91       	pop	r30
    432c:	8f 91       	pop	r24
    432e:	0f 90       	pop	r0
    4330:	0b be       	out	0x3b, r0	; 59
    4332:	0f 90       	pop	r0
    4334:	0f be       	out	0x3f, r0	; 63
    4336:	0f 90       	pop	r0
    4338:	1f 90       	pop	r1
    433a:	18 95       	reti

0000433c <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
    433c:	1f 92       	push	r1
    433e:	0f 92       	push	r0
    4340:	0f b6       	in	r0, 0x3f	; 63
    4342:	0f 92       	push	r0
    4344:	11 24       	eor	r1, r1
    4346:	0b b6       	in	r0, 0x3b	; 59
    4348:	0f 92       	push	r0
    434a:	2f 93       	push	r18
    434c:	3f 93       	push	r19
    434e:	4f 93       	push	r20
    4350:	5f 93       	push	r21
    4352:	6f 93       	push	r22
    4354:	7f 93       	push	r23
    4356:	8f 93       	push	r24
    4358:	9f 93       	push	r25
    435a:	af 93       	push	r26
    435c:	bf 93       	push	r27
    435e:	ef 93       	push	r30
    4360:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
    4362:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
    4366:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
    436a:	8c 71       	andi	r24, 0x1C	; 28
    436c:	59 f5       	brne	.+86     	; 0x43c4 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
    436e:	e5 ee       	ldi	r30, 0xE5	; 229
    4370:	f4 e0       	ldi	r31, 0x04	; 4
    4372:	46 81       	ldd	r20, Z+6	; 0x06
    4374:	57 81       	ldd	r21, Z+7	; 0x07
    4376:	84 81       	ldd	r24, Z+4	; 0x04
    4378:	95 81       	ldd	r25, Z+5	; 0x05
    437a:	48 17       	cp	r20, r24
    437c:	59 07       	cpc	r21, r25
    437e:	11 f1       	breq	.+68     	; 0x43c4 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
    4380:	40 85       	ldd	r20, Z+8	; 0x08
    4382:	51 85       	ldd	r21, Z+9	; 0x09
    4384:	82 81       	ldd	r24, Z+2	; 0x02
    4386:	93 81       	ldd	r25, Z+3	; 0x03
    4388:	bc 01       	movw	r22, r24
    438a:	6f 5f       	subi	r22, 0xFF	; 255
    438c:	7f 4f       	sbci	r23, 0xFF	; 255
    438e:	73 83       	std	Z+3, r23	; 0x03
    4390:	62 83       	std	Z+2, r22	; 0x02
    4392:	da 01       	movw	r26, r20
    4394:	a8 0f       	add	r26, r24
    4396:	b9 1f       	adc	r27, r25
    4398:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
    439a:	22 81       	ldd	r18, Z+2	; 0x02
    439c:	33 81       	ldd	r19, Z+3	; 0x03
    439e:	84 81       	ldd	r24, Z+4	; 0x04
    43a0:	95 81       	ldd	r25, Z+5	; 0x05
    43a2:	28 17       	cp	r18, r24
    43a4:	39 07       	cpc	r19, r25
    43a6:	21 f4       	brne	.+8      	; 0x43b0 <__vector_36+0x74>
      rxFifo.tail = 0;
    43a8:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <rxFifo+0x3>
    43ac:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <rxFifo+0x2>
    rxFifo.bytes++;
    43b0:	e5 ee       	ldi	r30, 0xE5	; 229
    43b2:	f4 e0       	ldi	r31, 0x04	; 4
    43b4:	86 81       	ldd	r24, Z+6	; 0x06
    43b6:	97 81       	ldd	r25, Z+7	; 0x07
    43b8:	01 96       	adiw	r24, 0x01	; 1
    43ba:	97 83       	std	Z+7, r25	; 0x07
    43bc:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
    43c4:	ff 91       	pop	r31
    43c6:	ef 91       	pop	r30
    43c8:	bf 91       	pop	r27
    43ca:	af 91       	pop	r26
    43cc:	9f 91       	pop	r25
    43ce:	8f 91       	pop	r24
    43d0:	7f 91       	pop	r23
    43d2:	6f 91       	pop	r22
    43d4:	5f 91       	pop	r21
    43d6:	4f 91       	pop	r20
    43d8:	3f 91       	pop	r19
    43da:	2f 91       	pop	r18
    43dc:	0f 90       	pop	r0
    43de:	0b be       	out	0x3b, r0	; 59
    43e0:	0f 90       	pop	r0
    43e2:	0f be       	out	0x3f, r0	; 63
    43e4:	0f 90       	pop	r0
    43e6:	1f 90       	pop	r1
    43e8:	18 95       	reti

000043ea <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
    43ea:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <txFifo+0x6>
    43ee:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <txFifo+0x7>
    43f2:	00 97       	sbiw	r24, 0x00	; 0
    43f4:	69 f1       	breq	.+90     	; 0x4450 <HAL_UartTaskHandler+0x66>
    43f6:	20 91 e4 04 	lds	r18, 0x04E4	; 0x8004e4 <udrEmpty>
    43fa:	22 23       	and	r18, r18
    43fc:	49 f1       	breq	.+82     	; 0x4450 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
    43fe:	ef ee       	ldi	r30, 0xEF	; 239
    4400:	f4 e0       	ldi	r31, 0x04	; 4
    4402:	60 85       	ldd	r22, Z+8	; 0x08
    4404:	71 85       	ldd	r23, Z+9	; 0x09
    4406:	20 81       	ld	r18, Z
    4408:	31 81       	ldd	r19, Z+1	; 0x01
    440a:	a9 01       	movw	r20, r18
    440c:	4f 5f       	subi	r20, 0xFF	; 255
    440e:	5f 4f       	sbci	r21, 0xFF	; 255
    4410:	51 83       	std	Z+1, r21	; 0x01
    4412:	40 83       	st	Z, r20
    4414:	db 01       	movw	r26, r22
    4416:	a2 0f       	add	r26, r18
    4418:	b3 1f       	adc	r27, r19
    441a:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
    441c:	64 81       	ldd	r22, Z+4	; 0x04
    441e:	75 81       	ldd	r23, Z+5	; 0x05
    4420:	46 17       	cp	r20, r22
    4422:	57 07       	cpc	r21, r23
    4424:	21 f4       	brne	.+8      	; 0x442e <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
    4426:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <txFifo+0x1>
    442a:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <txFifo>
    txFifo.bytes--;
    442e:	01 97       	sbiw	r24, 0x01	; 1
    4430:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <txFifo+0x7>
    4434:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
    4438:	9f b7       	in	r25, 0x3f	; 63
    443a:	f8 94       	cli
      UDRx = byte;
    443c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
    4440:	e9 ec       	ldi	r30, 0xC9	; 201
    4442:	f0 e0       	ldi	r31, 0x00	; 0
    4444:	80 81       	ld	r24, Z
    4446:	80 62       	ori	r24, 0x20	; 32
    4448:	80 83       	st	Z, r24
      udrEmpty = false;
    444a:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <udrEmpty>
    ATOMIC_SECTION_LEAVE
    444e:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
    4450:	2f b7       	in	r18, 0x3f	; 63
    4452:	f8 94       	cli
      new = newData;
    4454:	90 91 e3 04 	lds	r25, 0x04E3	; 0x8004e3 <newData>
      newData = false;
    4458:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <newData>
      bytes = rxFifo.bytes;
    445c:	40 91 eb 04 	lds	r20, 0x04EB	; 0x8004eb <rxFifo+0x6>
    4460:	50 91 ec 04 	lds	r21, 0x04EC	; 0x8004ec <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
    4464:	2f bf       	out	0x3f, r18	; 63

    if (new)
    4466:	99 23       	and	r25, r25
    4468:	11 f0       	breq	.+4      	; 0x446e <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
    446a:	ca 01       	movw	r24, r20
    446c:	ed ca       	rjmp	.-2598   	; 0x3a48 <HAL_UartBytesReceived>
    446e:	08 95       	ret

00004470 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    4470:	ee ea       	ldi	r30, 0xAE	; 174
    4472:	fc e1       	ldi	r31, 0x1C	; 28
    4474:	14 82       	std	Z+4, r1	; 0x04
    4476:	15 82       	std	Z+5, r1	; 0x05
    4478:	11 82       	std	Z+1, r1	; 0x01
    447a:	10 82       	st	Z, r1
    447c:	17 a2       	std	Z+39, r1	; 0x27
    447e:	16 a2       	std	Z+38, r1	; 0x26
    4480:	80 e0       	ldi	r24, 0x00	; 0
    4482:	0a c0       	rjmp	.+20     	; 0x4498 <NWK_Init+0x28>
    4484:	e8 2f       	mov	r30, r24
    4486:	f0 e0       	ldi	r31, 0x00	; 0
    4488:	33 96       	adiw	r30, 0x03	; 3
    448a:	ee 0f       	add	r30, r30
    448c:	ff 1f       	adc	r31, r31
    448e:	e2 55       	subi	r30, 0x52	; 82
    4490:	f3 4e       	sbci	r31, 0xE3	; 227
    4492:	11 82       	std	Z+1, r1	; 0x01
    4494:	10 82       	st	Z, r1
    4496:	8f 5f       	subi	r24, 0xFF	; 255
    4498:	80 31       	cpi	r24, 0x10	; 16
    449a:	a0 f3       	brcs	.-24     	; 0x4484 <NWK_Init+0x14>
    449c:	3a d6       	rcall	.+3188   	; 0x5112 <nwkTxInit>
    449e:	8d d5       	rcall	.+2842   	; 0x4fba <nwkRxInit>
    44a0:	06 d1       	rcall	.+524    	; 0x46ae <nwkFrameInit>
    44a2:	c5 d0       	rcall	.+394    	; 0x462e <nwkDataReqInit>
    44a4:	bd c1       	rjmp	.+890    	; 0x4820 <nwkRouteInit>
    44a6:	08 95       	ret

000044a8 <NWK_SetAddr>:
    44a8:	90 93 af 1c 	sts	0x1CAF, r25	; 0x801caf <nwkIb+0x1>
    44ac:	80 93 ae 1c 	sts	0x1CAE, r24	; 0x801cae <nwkIb>
    44b0:	0c 94 95 2a 	jmp	0x552a	; 0x552a <PHY_SetShortAddr>
    44b4:	08 95       	ret

000044b6 <NWK_SetPanId>:
    44b6:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <nwkIb+0x3>
    44ba:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <nwkIb+0x2>
    44be:	0c 94 83 2a 	jmp	0x5506	; 0x5506 <PHY_SetPanId>
    44c2:	08 95       	ret

000044c4 <NWK_OpenEndpoint>:
    44c4:	e8 2f       	mov	r30, r24
    44c6:	f0 e0       	ldi	r31, 0x00	; 0
    44c8:	33 96       	adiw	r30, 0x03	; 3
    44ca:	ee 0f       	add	r30, r30
    44cc:	ff 1f       	adc	r31, r31
    44ce:	e2 55       	subi	r30, 0x52	; 82
    44d0:	f3 4e       	sbci	r31, 0xE3	; 227
    44d2:	71 83       	std	Z+1, r23	; 0x01
    44d4:	60 83       	st	Z, r22
    44d6:	08 95       	ret

000044d8 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    44d8:	c3 d5       	rcall	.+2950   	; 0x5060 <nwkRxTaskHandler>
  nwkTxTaskHandler();
    44da:	46 d7       	rcall	.+3724   	; 0x5368 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    44dc:	d1 c0       	rjmp	.+418    	; 0x4680 <nwkDataReqTaskHandler>
    44de:	08 95       	ret

000044e0 <nwkDataReqConfirm>:
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    44e0:	a0 91 f9 04 	lds	r26, 0x04F9	; 0x8004f9 <nwkDataReqQueue>
    44e4:	b0 91 fa 04 	lds	r27, 0x04FA	; 0x8004fa <nwkDataReqQueue+0x1>
    44e8:	a8 17       	cp	r26, r24
    44ea:	b9 07       	cpc	r27, r25
    44ec:	41 f4       	brne	.+16     	; 0x44fe <nwkDataReqConfirm+0x1e>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    44ee:	2d 91       	ld	r18, X+
    44f0:	3c 91       	ld	r19, X
    44f2:	30 93 fa 04 	sts	0x04FA, r19	; 0x8004fa <nwkDataReqQueue+0x1>
    44f6:	20 93 f9 04 	sts	0x04F9, r18	; 0x8004f9 <nwkDataReqQueue>
    44fa:	0b c0       	rjmp	.+22     	; 0x4512 <nwkDataReqConfirm+0x32>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    44fc:	df 01       	movw	r26, r30
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    44fe:	ed 91       	ld	r30, X+
    4500:	fc 91       	ld	r31, X
    4502:	11 97       	sbiw	r26, 0x01	; 1
    4504:	8e 17       	cp	r24, r30
    4506:	9f 07       	cpc	r25, r31
    4508:	c9 f7       	brne	.-14     	; 0x44fc <nwkDataReqConfirm+0x1c>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    450a:	20 81       	ld	r18, Z
    450c:	31 81       	ldd	r19, Z+1	; 0x01
    450e:	2d 93       	st	X+, r18
    4510:	3c 93       	st	X, r19
  }

  nwkIb.lock--;
    4512:	ee ea       	ldi	r30, 0xAE	; 174
    4514:	fc e1       	ldi	r31, 0x1C	; 28
    4516:	26 a1       	ldd	r18, Z+38	; 0x26
    4518:	37 a1       	ldd	r19, Z+39	; 0x27
    451a:	21 50       	subi	r18, 0x01	; 1
    451c:	31 09       	sbc	r19, r1
    451e:	37 a3       	std	Z+39, r19	; 0x27
    4520:	26 a3       	std	Z+38, r18	; 0x26
  req->confirm(req);
    4522:	dc 01       	movw	r26, r24
    4524:	1d 96       	adiw	r26, 0x0d	; 13
    4526:	ed 91       	ld	r30, X+
    4528:	fc 91       	ld	r31, X
    452a:	1e 97       	sbiw	r26, 0x0e	; 14
    452c:	19 95       	eicall
    452e:	08 95       	ret

00004530 <nwkDataReqSendFrame>:
/*************************************************************************//**
  @brief Prepares and send outgoing frame based on the request @a req parameters
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
    4530:	0f 93       	push	r16
    4532:	1f 93       	push	r17
    4534:	cf 93       	push	r28
    4536:	df 93       	push	r29
    4538:	8c 01       	movw	r16, r24
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    453a:	c6 d0       	rcall	.+396    	; 0x46c8 <nwkFrameAlloc>
    453c:	ec 01       	movw	r28, r24
    453e:	00 97       	sbiw	r24, 0x00	; 0
    4540:	29 f4       	brne	.+10     	; 0x454c <nwkDataReqSendFrame+0x1c>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    4542:	82 e0       	ldi	r24, 0x02	; 2
    4544:	f8 01       	movw	r30, r16
    4546:	84 83       	std	Z+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    4548:	87 87       	std	Z+15, r24	; 0x0f
    return;
    454a:	50 c0       	rjmp	.+160    	; 0x45ec <nwkDataReqSendFrame+0xbc>
  }

  req->frame = frame;
    454c:	f8 01       	movw	r30, r16
    454e:	93 83       	std	Z+3, r25	; 0x03
    4550:	82 83       	std	Z+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	84 83       	std	Z+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    4556:	fe 01       	movw	r30, r28
    4558:	e9 57       	subi	r30, 0x79	; 121
    455a:	ff 4f       	sbci	r31, 0xFF	; 255
    455c:	8b ef       	ldi	r24, 0xFB	; 251
    455e:	92 e2       	ldi	r25, 0x22	; 34
    4560:	91 83       	std	Z+1, r25	; 0x01
    4562:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    4564:	f8 01       	movw	r30, r16
    4566:	81 85       	ldd	r24, Z+9	; 0x09
    4568:	82 fb       	bst	r24, 2
    456a:	88 27       	eor	r24, r24
    456c:	80 f9       	bld	r24, 0
    456e:	fe 01       	movw	r30, r28
    4570:	ea 57       	subi	r30, 0x7A	; 122
    4572:	ff 4f       	sbci	r31, 0xFF	; 255
    4574:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    4576:	f8 01       	movw	r30, r16
    4578:	91 85       	ldd	r25, Z+9	; 0x09
    457a:	8b 85       	ldd	r24, Y+11	; 0x0b
    457c:	90 fb       	bst	r25, 0
    457e:	80 f9       	bld	r24, 0
    4580:	8b 87       	std	Y+11, r24	; 0x0b
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    4582:	91 85       	ldd	r25, Z+9	; 0x09
    4584:	93 fb       	bst	r25, 3
    4586:	99 27       	eor	r25, r25
    4588:	90 f9       	bld	r25, 0
    458a:	90 fb       	bst	r25, 0
    458c:	82 f9       	bld	r24, 2
    458e:	8b 87       	std	Y+11, r24	; 0x0b
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    4590:	ee ea       	ldi	r30, 0xAE	; 174
    4592:	fc e1       	ldi	r31, 0x1C	; 28
    4594:	84 81       	ldd	r24, Z+4	; 0x04
    4596:	8f 5f       	subi	r24, 0xFF	; 255
    4598:	84 83       	std	Z+4, r24	; 0x04
    459a:	8c 87       	std	Y+12, r24	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    459c:	80 81       	ld	r24, Z
    459e:	91 81       	ldd	r25, Z+1	; 0x01
    45a0:	9e 87       	std	Y+14, r25	; 0x0e
    45a2:	8d 87       	std	Y+13, r24	; 0x0d
  frame->header.nwkDstAddr = req->dstAddr;
    45a4:	f8 01       	movw	r30, r16
    45a6:	85 81       	ldd	r24, Z+5	; 0x05
    45a8:	96 81       	ldd	r25, Z+6	; 0x06
    45aa:	98 8b       	std	Y+16, r25	; 0x10
    45ac:	8f 87       	std	Y+15, r24	; 0x0f
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    45ae:	80 85       	ldd	r24, Z+8	; 0x08
    45b0:	98 2f       	mov	r25, r24
    45b2:	9f 70       	andi	r25, 0x0F	; 15
    45b4:	89 89       	ldd	r24, Y+17	; 0x11
    45b6:	80 7f       	andi	r24, 0xF0	; 240
    45b8:	89 2b       	or	r24, r25
    45ba:	89 8b       	std	Y+17, r24	; 0x11
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    45bc:	97 81       	ldd	r25, Z+7	; 0x07
    45be:	92 95       	swap	r25
    45c0:	90 7f       	andi	r25, 0xF0	; 240
    45c2:	8f 70       	andi	r24, 0x0F	; 15
    45c4:	89 2b       	or	r24, r25
    45c6:	89 8b       	std	Y+17, r24	; 0x11

  memcpy(frame->payload, req->data, req->size);
    45c8:	44 85       	ldd	r20, Z+12	; 0x0c
    45ca:	62 85       	ldd	r22, Z+10	; 0x0a
    45cc:	73 85       	ldd	r23, Z+11	; 0x0b
    45ce:	fe 01       	movw	r30, r28
    45d0:	ef 57       	subi	r30, 0x7F	; 127
    45d2:	ff 4f       	sbci	r31, 0xFF	; 255
    45d4:	50 e0       	ldi	r21, 0x00	; 0
    45d6:	80 81       	ld	r24, Z
    45d8:	91 81       	ldd	r25, Z+1	; 0x01
    45da:	0e 94 a9 31 	call	0x6352	; 0x6352 <memcpy>
  frame->size += req->size;
    45de:	f8 01       	movw	r30, r16
    45e0:	84 85       	ldd	r24, Z+12	; 0x0c
    45e2:	99 81       	ldd	r25, Y+1	; 0x01
    45e4:	89 0f       	add	r24, r25
    45e6:	89 83       	std	Y+1, r24	; 0x01

  nwkTxFrame(frame);
    45e8:	ce 01       	movw	r24, r28
    45ea:	b6 d5       	rcall	.+2924   	; 0x5158 <nwkTxFrame>
}
    45ec:	df 91       	pop	r29
    45ee:	cf 91       	pop	r28
    45f0:	1f 91       	pop	r17
    45f2:	0f 91       	pop	r16
    45f4:	08 95       	ret

000045f6 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    45f6:	e0 91 f9 04 	lds	r30, 0x04F9	; 0x8004f9 <nwkDataReqQueue>
    45fa:	f0 91 fa 04 	lds	r31, 0x04FA	; 0x8004fa <nwkDataReqQueue+0x1>
    45fe:	13 c0       	rjmp	.+38     	; 0x4626 <nwkDataReqTxConf+0x30>
  {
    if (req->frame == frame)
    4600:	22 81       	ldd	r18, Z+2	; 0x02
    4602:	33 81       	ldd	r19, Z+3	; 0x03
    4604:	28 17       	cp	r18, r24
    4606:	39 07       	cpc	r19, r25
    4608:	59 f4       	brne	.+22     	; 0x4620 <nwkDataReqTxConf+0x2a>
    {
      req->status = frame->tx.status;
    460a:	dc 01       	movw	r26, r24
    460c:	ad 57       	subi	r26, 0x7D	; 125
    460e:	bf 4f       	sbci	r27, 0xFF	; 255
    4610:	2c 91       	ld	r18, X
    4612:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    4614:	13 96       	adiw	r26, 0x03	; 3
    4616:	2c 91       	ld	r18, X
    4618:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    461a:	22 e0       	ldi	r18, 0x02	; 2
    461c:	24 83       	std	Z+4, r18	; 0x04
      break;
    461e:	05 c0       	rjmp	.+10     	; 0x462a <nwkDataReqTxConf+0x34>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    4620:	01 90       	ld	r0, Z+
    4622:	f0 81       	ld	r31, Z
    4624:	e0 2d       	mov	r30, r0
    4626:	30 97       	sbiw	r30, 0x00	; 0
    4628:	59 f7       	brne	.-42     	; 0x4600 <nwkDataReqTxConf+0xa>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    462a:	7f c0       	rjmp	.+254    	; 0x472a <nwkFrameFree>
    462c:	08 95       	ret

0000462e <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    462e:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <nwkDataReqQueue+0x1>
    4632:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <nwkDataReqQueue>
    4636:	08 95       	ret

00004638 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    4638:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    463a:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    463c:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    463e:	13 82       	std	Z+3, r1	; 0x03
    4640:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    4642:	ae ea       	ldi	r26, 0xAE	; 174
    4644:	bc e1       	ldi	r27, 0x1C	; 28
    4646:	96 96       	adiw	r26, 0x26	; 38
    4648:	8d 91       	ld	r24, X+
    464a:	9c 91       	ld	r25, X
    464c:	97 97       	sbiw	r26, 0x27	; 39
    464e:	01 96       	adiw	r24, 0x01	; 1
    4650:	97 96       	adiw	r26, 0x27	; 39
    4652:	9c 93       	st	X, r25
    4654:	8e 93       	st	-X, r24
    4656:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
    4658:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <nwkDataReqQueue>
    465c:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <nwkDataReqQueue+0x1>
    4660:	00 97       	sbiw	r24, 0x00	; 0
    4662:	39 f4       	brne	.+14     	; 0x4672 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    4664:	11 82       	std	Z+1, r1	; 0x01
    4666:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    4668:	f0 93 fa 04 	sts	0x04FA, r31	; 0x8004fa <nwkDataReqQueue+0x1>
    466c:	e0 93 f9 04 	sts	0x04F9, r30	; 0x8004f9 <nwkDataReqQueue>
    4670:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    4672:	91 83       	std	Z+1, r25	; 0x01
    4674:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    4676:	f0 93 fa 04 	sts	0x04FA, r31	; 0x8004fa <nwkDataReqQueue+0x1>
    467a:	e0 93 f9 04 	sts	0x04F9, r30	; 0x8004f9 <nwkDataReqQueue>
    467e:	08 95       	ret

00004680 <nwkDataReqTaskHandler>:
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    4680:	e0 91 f9 04 	lds	r30, 0x04F9	; 0x8004f9 <nwkDataReqQueue>
    4684:	f0 91 fa 04 	lds	r31, 0x04FA	; 0x8004fa <nwkDataReqQueue+0x1>
    4688:	0f c0       	rjmp	.+30     	; 0x46a8 <nwkDataReqTaskHandler+0x28>
  {
    switch (req->state)
    468a:	84 81       	ldd	r24, Z+4	; 0x04
    468c:	88 23       	and	r24, r24
    468e:	19 f0       	breq	.+6      	; 0x4696 <nwkDataReqTaskHandler+0x16>
    4690:	82 30       	cpi	r24, 0x02	; 2
    4692:	21 f0       	breq	.+8      	; 0x469c <nwkDataReqTaskHandler+0x1c>
    4694:	06 c0       	rjmp	.+12     	; 0x46a2 <nwkDataReqTaskHandler+0x22>
    {
      case NWK_DATA_REQ_STATE_INITIAL:
      {
        nwkDataReqSendFrame(req);
    4696:	cf 01       	movw	r24, r30
    4698:	4b cf       	rjmp	.-362    	; 0x4530 <nwkDataReqSendFrame>
        return;
    469a:	08 95       	ret
      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;

      case NWK_DATA_REQ_STATE_CONFIRM:
      {
        nwkDataReqConfirm(req);
    469c:	cf 01       	movw	r24, r30
    469e:	20 cf       	rjmp	.-448    	; 0x44e0 <nwkDataReqConfirm>
        return;
    46a0:	08 95       	ret
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    46a2:	01 90       	ld	r0, Z+
    46a4:	f0 81       	ld	r31, Z
    46a6:	e0 2d       	mov	r30, r0
    46a8:	30 97       	sbiw	r30, 0x00	; 0
    46aa:	79 f7       	brne	.-34     	; 0x468a <nwkDataReqTaskHandler+0xa>
    46ac:	08 95       	ret

000046ae <nwkFrameInit>:
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    46ae:	80 e0       	ldi	r24, 0x00	; 0
    46b0:	08 c0       	rjmp	.+16     	; 0x46c2 <nwkFrameInit+0x14>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    46b2:	99 e8       	ldi	r25, 0x89	; 137
    46b4:	89 9f       	mul	r24, r25
    46b6:	f0 01       	movw	r30, r0
    46b8:	11 24       	eor	r1, r1
    46ba:	e5 50       	subi	r30, 0x05	; 5
    46bc:	fb 4f       	sbci	r31, 0xFB	; 251
    46be:	10 82       	st	Z, r1
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    46c0:	8f 5f       	subi	r24, 0xFF	; 255
    46c2:	8e 31       	cpi	r24, 0x1E	; 30
    46c4:	b0 f3       	brcs	.-20     	; 0x46b2 <nwkFrameInit+0x4>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    46c6:	08 95       	ret

000046c8 <nwkFrameAlloc>:
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    46c8:	80 e0       	ldi	r24, 0x00	; 0
    46ca:	2a c0       	rjmp	.+84     	; 0x4720 <nwkFrameAlloc+0x58>
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    46cc:	28 2f       	mov	r18, r24
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	99 e8       	ldi	r25, 0x89	; 137
    46d2:	92 9f       	mul	r25, r18
    46d4:	f0 01       	movw	r30, r0
    46d6:	93 9f       	mul	r25, r19
    46d8:	f0 0d       	add	r31, r0
    46da:	11 24       	eor	r1, r1
    46dc:	e5 50       	subi	r30, 0x05	; 5
    46de:	fb 4f       	sbci	r31, 0xFB	; 251
    46e0:	90 81       	ld	r25, Z
    46e2:	91 11       	cpse	r25, r1
    46e4:	1c c0       	rjmp	.+56     	; 0x471e <nwkFrameAlloc+0x56>
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    46e6:	69 e8       	ldi	r22, 0x89	; 137
    46e8:	62 9f       	mul	r22, r18
    46ea:	a0 01       	movw	r20, r0
    46ec:	63 9f       	mul	r22, r19
    46ee:	50 0d       	add	r21, r0
    46f0:	11 24       	eor	r1, r1
    46f2:	cf 01       	movw	r24, r30
    46f4:	11 92       	st	Z+, r1
    46f6:	6a 95       	dec	r22
    46f8:	e9 f7       	brne	.-6      	; 0x46f4 <nwkFrameAlloc+0x2c>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    46fa:	20 e1       	ldi	r18, 0x10	; 16
    46fc:	fc 01       	movw	r30, r24
    46fe:	21 83       	std	Z+1, r18	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    4700:	43 5f       	subi	r20, 0xF3	; 243
    4702:	5a 4f       	sbci	r21, 0xFA	; 250
    4704:	ef 57       	subi	r30, 0x7F	; 127
    4706:	ff 4f       	sbci	r31, 0xFF	; 255
    4708:	51 83       	std	Z+1, r21	; 0x01
    470a:	40 83       	st	Z, r20
      nwkIb.lock++;
    470c:	ee ea       	ldi	r30, 0xAE	; 174
    470e:	fc e1       	ldi	r31, 0x1C	; 28
    4710:	26 a1       	ldd	r18, Z+38	; 0x26
    4712:	37 a1       	ldd	r19, Z+39	; 0x27
    4714:	2f 5f       	subi	r18, 0xFF	; 255
    4716:	3f 4f       	sbci	r19, 0xFF	; 255
    4718:	37 a3       	std	Z+39, r19	; 0x27
    471a:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    471c:	08 95       	ret
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    471e:	8f 5f       	subi	r24, 0xFF	; 255
    4720:	8e 31       	cpi	r24, 0x1E	; 30
    4722:	a0 f2       	brcs	.-88     	; 0x46cc <nwkFrameAlloc+0x4>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    4724:	80 e0       	ldi	r24, 0x00	; 0
    4726:	90 e0       	ldi	r25, 0x00	; 0
}
    4728:	08 95       	ret

0000472a <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    472a:	fc 01       	movw	r30, r24
    472c:	10 82       	st	Z, r1
  nwkIb.lock--;
    472e:	ee ea       	ldi	r30, 0xAE	; 174
    4730:	fc e1       	ldi	r31, 0x1C	; 28
    4732:	86 a1       	ldd	r24, Z+38	; 0x26
    4734:	97 a1       	ldd	r25, Z+39	; 0x27
    4736:	01 97       	sbiw	r24, 0x01	; 1
    4738:	97 a3       	std	Z+39, r25	; 0x27
    473a:	86 a3       	std	Z+38, r24	; 0x26
    473c:	08 95       	ret

0000473e <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    473e:	00 97       	sbiw	r24, 0x00	; 0
    4740:	21 f0       	breq	.+8      	; 0x474a <nwkFrameNext+0xc>
    frame = nwkFrameFrames;
  else
    frame++;
    4742:	fc 01       	movw	r30, r24
    4744:	e7 57       	subi	r30, 0x77	; 119
    4746:	ff 4f       	sbci	r31, 0xFF	; 255
    4748:	08 c0       	rjmp	.+16     	; 0x475a <nwkFrameNext+0x1c>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    474a:	eb ef       	ldi	r30, 0xFB	; 251
    474c:	f4 e0       	ldi	r31, 0x04	; 4
    474e:	05 c0       	rjmp	.+10     	; 0x475a <nwkFrameNext+0x1c>
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    4750:	80 81       	ld	r24, Z
    4752:	81 11       	cpse	r24, r1
    4754:	09 c0       	rjmp	.+18     	; 0x4768 <nwkFrameNext+0x2a>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    4756:	e7 57       	subi	r30, 0x77	; 119
    4758:	ff 4f       	sbci	r31, 0xFF	; 255
    475a:	85 e1       	ldi	r24, 0x15	; 21
    475c:	e9 30       	cpi	r30, 0x09	; 9
    475e:	f8 07       	cpc	r31, r24
    4760:	b8 f3       	brcs	.-18     	; 0x4750 <nwkFrameNext+0x12>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    4762:	80 e0       	ldi	r24, 0x00	; 0
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	08 95       	ret
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
    4768:	8e 2f       	mov	r24, r30
    476a:	9f 2f       	mov	r25, r31
  }

  return NULL;
}
    476c:	08 95       	ret

0000476e <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    476e:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    4770:	dc 01       	movw	r26, r24
    4772:	ad 57       	subi	r26, 0x7D	; 125
    4774:	bf 4f       	sbci	r27, 0xFF	; 255
    4776:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    4778:	ae ea       	ldi	r26, 0xAE	; 174
    477a:	bc e1       	ldi	r27, 0x1C	; 28
    477c:	14 96       	adiw	r26, 0x04	; 4
    477e:	9c 91       	ld	r25, X
    4780:	14 97       	sbiw	r26, 0x04	; 4
    4782:	9f 5f       	subi	r25, 0xFF	; 255
    4784:	14 96       	adiw	r26, 0x04	; 4
    4786:	9c 93       	st	X, r25
    4788:	14 97       	sbiw	r26, 0x04	; 4
    478a:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    478c:	8d 91       	ld	r24, X+
    478e:	9c 91       	ld	r25, X
    4790:	96 87       	std	Z+14, r25	; 0x0e
    4792:	85 87       	std	Z+13, r24	; 0x0d
    4794:	08 95       	ret

00004796 <nwkRouteNormalizeRanks>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	12 c0       	rjmp	.+36     	; 0x47be <nwkRouteNormalizeRanks+0x28>
    479a:	29 2f       	mov	r18, r25
    479c:	30 e0       	ldi	r19, 0x00	; 0
    479e:	f9 01       	movw	r30, r18
    47a0:	ee 0f       	add	r30, r30
    47a2:	ff 1f       	adc	r31, r31
    47a4:	ee 0f       	add	r30, r30
    47a6:	ff 1f       	adc	r31, r31
    47a8:	ee 0f       	add	r30, r30
    47aa:	ff 1f       	adc	r31, r31
    47ac:	e2 1b       	sub	r30, r18
    47ae:	f3 0b       	sbc	r31, r19
    47b0:	e7 5f       	subi	r30, 0xF7	; 247
    47b2:	fa 4e       	sbci	r31, 0xEA	; 234
    47b4:	85 81       	ldd	r24, Z+5	; 0x05
    47b6:	86 95       	lsr	r24
    47b8:	8f 5f       	subi	r24, 0xFF	; 255
    47ba:	85 83       	std	Z+5, r24	; 0x05
    47bc:	9f 5f       	subi	r25, 0xFF	; 255
    47be:	94 36       	cpi	r25, 0x64	; 100
    47c0:	60 f3       	brcs	.-40     	; 0x479a <nwkRouteNormalizeRanks+0x4>
    47c2:	08 95       	ret

000047c4 <nwkRouteSendRouteError>:
    47c4:	df 92       	push	r13
    47c6:	ef 92       	push	r14
    47c8:	ff 92       	push	r15
    47ca:	0f 93       	push	r16
    47cc:	1f 93       	push	r17
    47ce:	cf 93       	push	r28
    47d0:	df 93       	push	r29
    47d2:	8c 01       	movw	r16, r24
    47d4:	7b 01       	movw	r14, r22
    47d6:	d4 2e       	mov	r13, r20
    47d8:	77 df       	rcall	.-274    	; 0x46c8 <nwkFrameAlloc>
    47da:	ec 01       	movw	r28, r24
    47dc:	00 97       	sbiw	r24, 0x00	; 0
    47de:	c1 f0       	breq	.+48     	; 0x4810 <nwkRouteSendRouteError+0x4c>
    47e0:	c6 df       	rcall	.-116    	; 0x476e <nwkFrameCommandInit>
    47e2:	89 81       	ldd	r24, Y+1	; 0x01
    47e4:	8a 5f       	subi	r24, 0xFA	; 250
    47e6:	89 83       	std	Y+1, r24	; 0x01
    47e8:	fe 01       	movw	r30, r28
    47ea:	e9 57       	subi	r30, 0x79	; 121
    47ec:	ff 4f       	sbci	r31, 0xFF	; 255
    47ee:	11 82       	std	Z+1, r1	; 0x01
    47f0:	10 82       	st	Z, r1
    47f2:	18 8b       	std	Y+16, r17	; 0x10
    47f4:	0f 87       	std	Y+15, r16	; 0x0f
    47f6:	36 97       	sbiw	r30, 0x06	; 6
    47f8:	01 90       	ld	r0, Z+
    47fa:	f0 81       	ld	r31, Z
    47fc:	e0 2d       	mov	r30, r0
    47fe:	81 e0       	ldi	r24, 0x01	; 1
    4800:	80 83       	st	Z, r24
    4802:	12 83       	std	Z+2, r17	; 0x02
    4804:	01 83       	std	Z+1, r16	; 0x01
    4806:	f4 82       	std	Z+4, r15	; 0x04
    4808:	e3 82       	std	Z+3, r14	; 0x03
    480a:	d5 82       	std	Z+5, r13	; 0x05
    480c:	ce 01       	movw	r24, r28
    480e:	a4 d4       	rcall	.+2376   	; 0x5158 <nwkTxFrame>
    4810:	df 91       	pop	r29
    4812:	cf 91       	pop	r28
    4814:	1f 91       	pop	r17
    4816:	0f 91       	pop	r16
    4818:	ff 90       	pop	r15
    481a:	ef 90       	pop	r14
    481c:	df 90       	pop	r13
    481e:	08 95       	ret

00004820 <nwkRouteInit>:
    4820:	80 e0       	ldi	r24, 0x00	; 0
    4822:	16 c0       	rjmp	.+44     	; 0x4850 <nwkRouteInit+0x30>
    4824:	28 2f       	mov	r18, r24
    4826:	30 e0       	ldi	r19, 0x00	; 0
    4828:	f9 01       	movw	r30, r18
    482a:	ee 0f       	add	r30, r30
    482c:	ff 1f       	adc	r31, r31
    482e:	ee 0f       	add	r30, r30
    4830:	ff 1f       	adc	r31, r31
    4832:	ee 0f       	add	r30, r30
    4834:	ff 1f       	adc	r31, r31
    4836:	e2 1b       	sub	r30, r18
    4838:	f3 0b       	sbc	r31, r19
    483a:	e7 5f       	subi	r30, 0xF7	; 247
    483c:	fa 4e       	sbci	r31, 0xEA	; 234
    483e:	2f ef       	ldi	r18, 0xFF	; 255
    4840:	3f ef       	ldi	r19, 0xFF	; 255
    4842:	32 83       	std	Z+2, r19	; 0x02
    4844:	21 83       	std	Z+1, r18	; 0x01
    4846:	90 81       	ld	r25, Z
    4848:	9e 7f       	andi	r25, 0xFE	; 254
    484a:	90 83       	st	Z, r25
    484c:	15 82       	std	Z+5, r1	; 0x05
    484e:	8f 5f       	subi	r24, 0xFF	; 255
    4850:	84 36       	cpi	r24, 0x64	; 100
    4852:	40 f3       	brcs	.-48     	; 0x4824 <nwkRouteInit+0x4>
    4854:	08 95       	ret

00004856 <NWK_RouteFindEntry>:
    4856:	cf 93       	push	r28
    4858:	df 93       	push	r29
    485a:	ec 01       	movw	r28, r24
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	2a c0       	rjmp	.+84     	; 0x48b4 <NWK_RouteFindEntry+0x5e>
    4860:	29 2f       	mov	r18, r25
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	f9 01       	movw	r30, r18
    4866:	ee 0f       	add	r30, r30
    4868:	ff 1f       	adc	r31, r31
    486a:	ee 0f       	add	r30, r30
    486c:	ff 1f       	adc	r31, r31
    486e:	ee 0f       	add	r30, r30
    4870:	ff 1f       	adc	r31, r31
    4872:	e2 1b       	sub	r30, r18
    4874:	f3 0b       	sbc	r31, r19
    4876:	e7 5f       	subi	r30, 0xF7	; 247
    4878:	fa 4e       	sbci	r31, 0xEA	; 234
    487a:	41 81       	ldd	r20, Z+1	; 0x01
    487c:	52 81       	ldd	r21, Z+2	; 0x02
    487e:	4c 17       	cp	r20, r28
    4880:	5d 07       	cpc	r21, r29
    4882:	b9 f4       	brne	.+46     	; 0x48b2 <NWK_RouteFindEntry+0x5c>
    4884:	f9 01       	movw	r30, r18
    4886:	ee 0f       	add	r30, r30
    4888:	ff 1f       	adc	r31, r31
    488a:	ee 0f       	add	r30, r30
    488c:	ff 1f       	adc	r31, r31
    488e:	ee 0f       	add	r30, r30
    4890:	ff 1f       	adc	r31, r31
    4892:	e2 1b       	sub	r30, r18
    4894:	f3 0b       	sbc	r31, r19
    4896:	e7 5f       	subi	r30, 0xF7	; 247
    4898:	fa 4e       	sbci	r31, 0xEA	; 234
    489a:	80 81       	ld	r24, Z
    489c:	81 fb       	bst	r24, 1
    489e:	aa 27       	eor	r26, r26
    48a0:	a0 f9       	bld	r26, 0
    48a2:	b0 e0       	ldi	r27, 0x00	; 0
    48a4:	46 2f       	mov	r20, r22
    48a6:	50 e0       	ldi	r21, 0x00	; 0
    48a8:	a4 17       	cp	r26, r20
    48aa:	b5 07       	cpc	r27, r21
    48ac:	11 f4       	brne	.+4      	; 0x48b2 <NWK_RouteFindEntry+0x5c>
    48ae:	cf 01       	movw	r24, r30
    48b0:	05 c0       	rjmp	.+10     	; 0x48bc <NWK_RouteFindEntry+0x66>
    48b2:	9f 5f       	subi	r25, 0xFF	; 255
    48b4:	94 36       	cpi	r25, 0x64	; 100
    48b6:	a0 f2       	brcs	.-88     	; 0x4860 <NWK_RouteFindEntry+0xa>
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	df 91       	pop	r29
    48be:	cf 91       	pop	r28
    48c0:	08 95       	ret

000048c2 <NWK_RouteNewEntry>:
    48c2:	80 e0       	ldi	r24, 0x00	; 0
    48c4:	a0 e0       	ldi	r26, 0x00	; 0
    48c6:	b0 e0       	ldi	r27, 0x00	; 0
    48c8:	e9 e0       	ldi	r30, 0x09	; 9
    48ca:	f5 e1       	ldi	r31, 0x15	; 21
    48cc:	13 c0       	rjmp	.+38     	; 0x48f4 <NWK_RouteNewEntry+0x32>
    48ce:	90 81       	ld	r25, Z
    48d0:	90 fd       	sbrc	r25, 0
    48d2:	0e c0       	rjmp	.+28     	; 0x48f0 <NWK_RouteNewEntry+0x2e>
    48d4:	95 81       	ldd	r25, Z+5	; 0x05
    48d6:	99 23       	and	r25, r25
    48d8:	81 f0       	breq	.+32     	; 0x48fa <NWK_RouteNewEntry+0x38>
    48da:	10 97       	sbiw	r26, 0x00	; 0
    48dc:	31 f0       	breq	.+12     	; 0x48ea <NWK_RouteNewEntry+0x28>
    48de:	15 96       	adiw	r26, 0x05	; 5
    48e0:	2c 91       	ld	r18, X
    48e2:	15 97       	sbiw	r26, 0x05	; 5
    48e4:	92 17       	cp	r25, r18
    48e6:	18 f0       	brcs	.+6      	; 0x48ee <NWK_RouteNewEntry+0x2c>
    48e8:	03 c0       	rjmp	.+6      	; 0x48f0 <NWK_RouteNewEntry+0x2e>
    48ea:	df 01       	movw	r26, r30
    48ec:	01 c0       	rjmp	.+2      	; 0x48f0 <NWK_RouteNewEntry+0x2e>
    48ee:	df 01       	movw	r26, r30
    48f0:	8f 5f       	subi	r24, 0xFF	; 255
    48f2:	37 96       	adiw	r30, 0x07	; 7
    48f4:	84 36       	cpi	r24, 0x64	; 100
    48f6:	58 f3       	brcs	.-42     	; 0x48ce <NWK_RouteNewEntry+0xc>
    48f8:	fd 01       	movw	r30, r26
    48fa:	80 81       	ld	r24, Z
    48fc:	8d 70       	andi	r24, 0x0D	; 13
    48fe:	80 63       	ori	r24, 0x30	; 48
    4900:	80 83       	st	Z, r24
    4902:	80 e8       	ldi	r24, 0x80	; 128
    4904:	85 83       	std	Z+5, r24	; 0x05
    4906:	cf 01       	movw	r24, r30
    4908:	08 95       	ret

0000490a <NWK_RouteFreeEntry>:
    490a:	fc 01       	movw	r30, r24
    490c:	80 81       	ld	r24, Z
    490e:	80 fd       	sbrc	r24, 0
    4910:	05 c0       	rjmp	.+10     	; 0x491c <NWK_RouteFreeEntry+0x12>
    4912:	8f ef       	ldi	r24, 0xFF	; 255
    4914:	9f ef       	ldi	r25, 0xFF	; 255
    4916:	92 83       	std	Z+2, r25	; 0x02
    4918:	81 83       	std	Z+1, r24	; 0x01
    491a:	15 82       	std	Z+5, r1	; 0x05
    491c:	08 95       	ret

0000491e <NWK_RouteNextHop>:
    491e:	9b df       	rcall	.-202    	; 0x4856 <NWK_RouteFindEntry>
    4920:	00 97       	sbiw	r24, 0x00	; 0
    4922:	21 f0       	breq	.+8      	; 0x492c <NWK_RouteNextHop+0xe>
    4924:	fc 01       	movw	r30, r24
    4926:	83 81       	ldd	r24, Z+3	; 0x03
    4928:	94 81       	ldd	r25, Z+4	; 0x04
    492a:	08 95       	ret
    492c:	8f ef       	ldi	r24, 0xFF	; 255
    492e:	9f ef       	ldi	r25, 0xFF	; 255
    4930:	08 95       	ret

00004932 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    4932:	91 df       	rcall	.-222    	; 0x4856 <NWK_RouteFindEntry>
  if (entry)
    4934:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
    4936:	09 f0       	breq	.+2      	; 0x493a <nwkRouteRemove+0x8>
    4938:	e8 cf       	rjmp	.-48     	; 0x490a <NWK_RouteFreeEntry>
    493a:	08 95       	ret

0000493c <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    493c:	0f 93       	push	r16
    493e:	1f 93       	push	r17
    4940:	cf 93       	push	r28
    4942:	df 93       	push	r29
    4944:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    4946:	01 85       	ldd	r16, Z+9	; 0x09
    4948:	12 85       	ldd	r17, Z+10	; 0x0a
    494a:	11 23       	and	r17, r17
    494c:	34 f4       	brge	.+12     	; 0x495a <nwkRouteFrameReceived+0x1e>
      (header->macSrcAddr != header->nwkSrcAddr))
    494e:	85 85       	ldd	r24, Z+13	; 0x0d
    4950:	96 85       	ldd	r25, Z+14	; 0x0e
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    4952:	08 17       	cp	r16, r24
    4954:	19 07       	cpc	r17, r25
    4956:	09 f0       	breq	.+2      	; 0x495a <nwkRouteFrameReceived+0x1e>
    4958:	50 c0       	rjmp	.+160    	; 0x49fa <nwkRouteFrameReceived+0xbe>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    495a:	85 81       	ldd	r24, Z+5	; 0x05
    495c:	96 81       	ldd	r25, Z+6	; 0x06
    495e:	01 96       	adiw	r24, 0x01	; 1
    4960:	09 f4       	brne	.+2      	; 0x4964 <nwkRouteFrameReceived+0x28>
    4962:	4b c0       	rjmp	.+150    	; 0x49fa <nwkRouteFrameReceived+0xbe>
    4964:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    4966:	60 e0       	ldi	r22, 0x00	; 0
    4968:	85 85       	ldd	r24, Z+13	; 0x0d
    496a:	96 85       	ldd	r25, Z+14	; 0x0e
    496c:	74 df       	rcall	.-280    	; 0x4856 <NWK_RouteFindEntry>
    496e:	dc 01       	movw	r26, r24

  if (entry)
    4970:	89 2b       	or	r24, r25
    4972:	79 f1       	breq	.+94     	; 0x49d2 <nwkRouteFrameReceived+0x96>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    4974:	8f 81       	ldd	r24, Y+7	; 0x07
    4976:	98 85       	ldd	r25, Y+8	; 0x08
    4978:	01 96       	adiw	r24, 0x01	; 1
    497a:	59 f4       	brne	.+22     	; 0x4992 <nwkRouteFrameReceived+0x56>
        nwkIb.addr == header->nwkDstAddr);
    497c:	20 91 ae 1c 	lds	r18, 0x1CAE	; 0x801cae <nwkIb>
    4980:	30 91 af 1c 	lds	r19, 0x1CAF	; 0x801caf <nwkIb+0x1>
    4984:	8f 85       	ldd	r24, Y+15	; 0x0f
    4986:	98 89       	ldd	r25, Y+16	; 0x10

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    4988:	28 17       	cp	r18, r24
    498a:	39 07       	cpc	r19, r25
    498c:	21 f0       	breq	.+8      	; 0x4996 <nwkRouteFrameReceived+0x5a>
    498e:	80 e0       	ldi	r24, 0x00	; 0
    4990:	03 c0       	rjmp	.+6      	; 0x4998 <nwkRouteFrameReceived+0x5c>
    4992:	80 e0       	ldi	r24, 0x00	; 0
    4994:	01 c0       	rjmp	.+2      	; 0x4998 <nwkRouteFrameReceived+0x5c>
    4996:	81 e0       	ldi	r24, 0x01	; 1
    4998:	98 2f       	mov	r25, r24
    499a:	91 70       	andi	r25, 0x01	; 1
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    499c:	13 96       	adiw	r26, 0x03	; 3
    499e:	2d 91       	ld	r18, X+
    49a0:	3c 91       	ld	r19, X
    49a2:	14 97       	sbiw	r26, 0x04	; 4
    49a4:	02 17       	cp	r16, r18
    49a6:	13 07       	cpc	r17, r19
    49a8:	49 f0       	breq	.+18     	; 0x49bc <nwkRouteFrameReceived+0x80>
    49aa:	fe 01       	movw	r30, r28
    49ac:	ed 57       	subi	r30, 0x7D	; 125
    49ae:	ff 4f       	sbci	r31, 0xFF	; 255
    49b0:	20 81       	ld	r18, Z
    49b2:	16 96       	adiw	r26, 0x06	; 6
    49b4:	8c 91       	ld	r24, X
    49b6:	16 97       	sbiw	r26, 0x06	; 6
    49b8:	82 17       	cp	r24, r18
    49ba:	10 f0       	brcs	.+4      	; 0x49c0 <nwkRouteFrameReceived+0x84>
    49bc:	99 23       	and	r25, r25
    49be:	b9 f0       	breq	.+46     	; 0x49ee <nwkRouteFrameReceived+0xb2>
    {
      entry->nextHopAddr = header->macSrcAddr;
    49c0:	14 96       	adiw	r26, 0x04	; 4
    49c2:	1c 93       	st	X, r17
    49c4:	0e 93       	st	-X, r16
    49c6:	13 97       	sbiw	r26, 0x03	; 3
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    49c8:	8c 91       	ld	r24, X
    49ca:	8f 70       	andi	r24, 0x0F	; 15
    49cc:	80 63       	ori	r24, 0x30	; 48
    49ce:	8c 93       	st	X, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    49d0:	0e c0       	rjmp	.+28     	; 0x49ee <nwkRouteFrameReceived+0xb2>
    49d2:	77 df       	rcall	.-274    	; 0x48c2 <NWK_RouteNewEntry>
    49d4:	dc 01       	movw	r26, r24

    entry->dstAddr = header->nwkSrcAddr;
    49d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    49d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    49da:	12 96       	adiw	r26, 0x02	; 2
    49dc:	9c 93       	st	X, r25
    49de:	8e 93       	st	-X, r24
    49e0:	11 97       	sbiw	r26, 0x01	; 1
    entry->nextHopAddr = header->macSrcAddr;
    49e2:	89 85       	ldd	r24, Y+9	; 0x09
    49e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    49e6:	14 96       	adiw	r26, 0x04	; 4
    49e8:	9c 93       	st	X, r25
    49ea:	8e 93       	st	-X, r24
    49ec:	13 97       	sbiw	r26, 0x03	; 3
  }

  entry->lqi = frame->rx.lqi;
    49ee:	fe 01       	movw	r30, r28
    49f0:	ed 57       	subi	r30, 0x7D	; 125
    49f2:	ff 4f       	sbci	r31, 0xFF	; 255
    49f4:	80 81       	ld	r24, Z
    49f6:	16 96       	adiw	r26, 0x06	; 6
    49f8:	8c 93       	st	X, r24
#else
  (void)frame;
#endif
}
    49fa:	df 91       	pop	r29
    49fc:	cf 91       	pop	r28
    49fe:	1f 91       	pop	r17
    4a00:	0f 91       	pop	r16
    4a02:	08 95       	ret

00004a04 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    4a04:	cf 93       	push	r28
    4a06:	df 93       	push	r29
    4a08:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    4a0a:	87 85       	ldd	r24, Z+15	; 0x0f
    4a0c:	90 89       	ldd	r25, Z+16	; 0x10
    4a0e:	8f 3f       	cpi	r24, 0xFF	; 255
    4a10:	2f ef       	ldi	r18, 0xFF	; 255
    4a12:	92 07       	cpc	r25, r18
    4a14:	81 f1       	breq	.+96     	; 0x4a76 <nwkRouteFrameSent+0x72>
    4a16:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    4a18:	63 85       	ldd	r22, Z+11	; 0x0b
    4a1a:	63 fb       	bst	r22, 3
    4a1c:	66 27       	eor	r22, r22
    4a1e:	60 f9       	bld	r22, 0
    4a20:	1a df       	rcall	.-460    	; 0x4856 <NWK_RouteFindEntry>
    4a22:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
    4a24:	89 2b       	or	r24, r25
    4a26:	39 f1       	breq	.+78     	; 0x4a76 <nwkRouteFrameSent+0x72>
    4a28:	8c 91       	ld	r24, X
    4a2a:	80 fd       	sbrc	r24, 0
    4a2c:	24 c0       	rjmp	.+72     	; 0x4a76 <nwkRouteFrameSent+0x72>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    4a2e:	fe 01       	movw	r30, r28
    4a30:	ed 57       	subi	r30, 0x7D	; 125
    4a32:	ff 4f       	sbci	r31, 0xFF	; 255
    4a34:	80 81       	ld	r24, Z
    4a36:	81 11       	cpse	r24, r1
    4a38:	0e c0       	rjmp	.+28     	; 0x4a56 <nwkRouteFrameSent+0x52>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    4a3a:	8c 91       	ld	r24, X
    4a3c:	8f 70       	andi	r24, 0x0F	; 15
    4a3e:	80 63       	ori	r24, 0x30	; 48
    4a40:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    4a42:	15 96       	adiw	r26, 0x05	; 5
    4a44:	8c 91       	ld	r24, X
    4a46:	15 97       	sbiw	r26, 0x05	; 5
    4a48:	8f 5f       	subi	r24, 0xFF	; 255
    4a4a:	15 96       	adiw	r26, 0x05	; 5
    4a4c:	8c 93       	st	X, r24
    4a4e:	8f 3f       	cpi	r24, 0xFF	; 255
      nwkRouteNormalizeRanks();
    4a50:	91 f4       	brne	.+36     	; 0x4a76 <nwkRouteFrameSent+0x72>
    4a52:	a1 de       	rcall	.-702    	; 0x4796 <nwkRouteNormalizeRanks>
    4a54:	10 c0       	rjmp	.+32     	; 0x4a76 <nwkRouteFrameSent+0x72>
  }
  else
  {
    if (0 == --entry->score)
    4a56:	9c 91       	ld	r25, X
    4a58:	89 2f       	mov	r24, r25
    4a5a:	82 95       	swap	r24
    4a5c:	8f 70       	andi	r24, 0x0F	; 15
    4a5e:	81 5f       	subi	r24, 0xF1	; 241
    4a60:	8f 70       	andi	r24, 0x0F	; 15
    4a62:	28 2f       	mov	r18, r24
    4a64:	22 95       	swap	r18
    4a66:	20 7f       	andi	r18, 0xF0	; 240
    4a68:	9f 70       	andi	r25, 0x0F	; 15
    4a6a:	92 2b       	or	r25, r18
    4a6c:	9c 93       	st	X, r25
    4a6e:	81 11       	cpse	r24, r1
      NWK_RouteFreeEntry(entry);
    4a70:	02 c0       	rjmp	.+4      	; 0x4a76 <nwkRouteFrameSent+0x72>
    4a72:	cd 01       	movw	r24, r26
    4a74:	4a df       	rcall	.-364    	; 0x490a <NWK_RouteFreeEntry>
  }
}
    4a76:	df 91       	pop	r29
    4a78:	cf 91       	pop	r28
    4a7a:	08 95       	ret

00004a7c <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    4a7c:	cf 93       	push	r28
    4a7e:	df 93       	push	r29
    4a80:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    4a82:	87 85       	ldd	r24, Z+15	; 0x0f
    4a84:	90 89       	ldd	r25, Z+16	; 0x10
    4a86:	8f 3f       	cpi	r24, 0xFF	; 255
    4a88:	2f ef       	ldi	r18, 0xFF	; 255
    4a8a:	92 07       	cpc	r25, r18
    4a8c:	29 f4       	brne	.+10     	; 0x4a98 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    4a8e:	8f ef       	ldi	r24, 0xFF	; 255
    4a90:	9f ef       	ldi	r25, 0xFF	; 255
    4a92:	90 87       	std	Z+8, r25	; 0x08
    4a94:	87 83       	std	Z+7, r24	; 0x07
    4a96:	0e c0       	rjmp	.+28     	; 0x4ab4 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
    4a98:	23 85       	ldd	r18, Z+11	; 0x0b
    4a9a:	22 ff       	sbrs	r18, 2
    4a9c:	03 c0       	rjmp	.+6      	; 0x4aa4 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
    4a9e:	90 87       	std	Z+8, r25	; 0x08
    4aa0:	87 83       	std	Z+7, r24	; 0x07
    4aa2:	08 c0       	rjmp	.+16     	; 0x4ab4 <nwkRoutePrepareTx+0x38>
    4aa4:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    4aa6:	63 85       	ldd	r22, Z+11	; 0x0b
    4aa8:	63 fb       	bst	r22, 3
    4aaa:	66 27       	eor	r22, r22
    4aac:	60 f9       	bld	r22, 0
    4aae:	37 df       	rcall	.-402    	; 0x491e <NWK_RouteNextHop>
    4ab0:	98 87       	std	Y+8, r25	; 0x08
    4ab2:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    4ab4:	df 91       	pop	r29
    4ab6:	cf 91       	pop	r28
    4ab8:	08 95       	ret

00004aba <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    4aba:	ef 92       	push	r14
    4abc:	ff 92       	push	r15
    4abe:	1f 93       	push	r17
    4ac0:	cf 93       	push	r28
    4ac2:	df 93       	push	r29
    4ac4:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    4ac6:	1b 85       	ldd	r17, Y+11	; 0x0b
    4ac8:	13 fb       	bst	r17, 3
    4aca:	11 27       	eor	r17, r17
    4acc:	10 f9       	bld	r17, 0
    4ace:	ef 84       	ldd	r14, Y+15	; 0x0f
    4ad0:	f8 88       	ldd	r15, Y+16	; 0x10
    4ad2:	61 2f       	mov	r22, r17
    4ad4:	c7 01       	movw	r24, r14
    4ad6:	23 df       	rcall	.-442    	; 0x491e <NWK_RouteNextHop>
    4ad8:	01 96       	adiw	r24, 0x01	; 1
    4ada:	59 f0       	breq	.+22     	; 0x4af2 <nwkRouteFrame+0x38>
  {
    frame->tx.confirm = NULL;
    4adc:	fe 01       	movw	r30, r28
    4ade:	e9 57       	subi	r30, 0x79	; 121
    4ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae2:	11 82       	std	Z+1, r1	; 0x01
    4ae4:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    4ae6:	31 97       	sbiw	r30, 0x01	; 1
    4ae8:	82 e0       	ldi	r24, 0x02	; 2
    4aea:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    4aec:	ce 01       	movw	r24, r28
    4aee:	34 d3       	rcall	.+1640   	; 0x5158 <nwkTxFrame>
    4af0:	07 c0       	rjmp	.+14     	; 0x4b00 <nwkRouteFrame+0x46>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    4af2:	41 2f       	mov	r20, r17
    4af4:	b7 01       	movw	r22, r14
    4af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    nwkFrameFree(frame);
    4afa:	64 de       	rcall	.-824    	; 0x47c4 <nwkRouteSendRouteError>
    4afc:	ce 01       	movw	r24, r28
    4afe:	15 de       	rcall	.-982    	; 0x472a <nwkFrameFree>
  }
}
    4b00:	df 91       	pop	r29
    4b02:	cf 91       	pop	r28
    4b04:	1f 91       	pop	r17
    4b06:	ff 90       	pop	r15
    4b08:	ef 90       	pop	r14
    4b0a:	08 95       	ret

00004b0c <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    4b0c:	dc 01       	movw	r26, r24
    4b0e:	17 96       	adiw	r26, 0x07	; 7
    4b10:	ed 91       	ld	r30, X+
    4b12:	fc 91       	ld	r31, X
    4b14:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    4b16:	19 96       	adiw	r26, 0x09	; 9
    4b18:	8c 91       	ld	r24, X
    4b1a:	86 30       	cpi	r24, 0x06	; 6
    4b1c:	31 f4       	brne	.+12     	; 0x4b2a <nwkRouteErrorReceived+0x1e>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    4b1e:	65 81       	ldd	r22, Z+5	; 0x05
    4b20:	83 81       	ldd	r24, Z+3	; 0x03
    4b22:	94 81       	ldd	r25, Z+4	; 0x04
    4b24:	06 df       	rcall	.-500    	; 0x4932 <nwkRouteRemove>

  return true;
    4b26:	81 e0       	ldi	r24, 0x01	; 1
    4b28:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    4b2a:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    4b2c:	08 95       	ret

00004b2e <nwkRxIndicateFrame>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    4b2e:	ef 92       	push	r14
    4b30:	ff 92       	push	r15
    4b32:	0f 93       	push	r16
    4b34:	1f 93       	push	r17
    4b36:	cf 93       	push	r28
    4b38:	df 93       	push	r29
    4b3a:	cd b7       	in	r28, 0x3d	; 61
    4b3c:	de b7       	in	r29, 0x3e	; 62
    4b3e:	2c 97       	sbiw	r28, 0x0c	; 12
    4b40:	0f b6       	in	r0, 0x3f	; 63
    4b42:	f8 94       	cli
    4b44:	de bf       	out	0x3e, r29	; 62
    4b46:	0f be       	out	0x3f, r0	; 63
    4b48:	cd bf       	out	0x3d, r28	; 61
    4b4a:	dc 01       	movw	r26, r24
    4b4c:	51 96       	adiw	r26, 0x11	; 17
    4b4e:	8c 91       	ld	r24, X
    4b50:	51 97       	sbiw	r26, 0x11	; 17
    4b52:	82 95       	swap	r24
    4b54:	8f 70       	andi	r24, 0x0F	; 15
    4b56:	e8 2f       	mov	r30, r24
    4b58:	f0 e0       	ldi	r31, 0x00	; 0
    4b5a:	33 96       	adiw	r30, 0x03	; 3
    4b5c:	ee 0f       	add	r30, r30
    4b5e:	ff 1f       	adc	r31, r31
    4b60:	e2 55       	subi	r30, 0x52	; 82
    4b62:	f3 4e       	sbci	r31, 0xE3	; 227
    4b64:	e0 80       	ld	r14, Z
    4b66:	f1 80       	ldd	r15, Z+1	; 0x01
    4b68:	e1 14       	cp	r14, r1
    4b6a:	f1 04       	cpc	r15, r1
    4b6c:	09 f4       	brne	.+2      	; 0x4b70 <nwkRxIndicateFrame+0x42>
    4b6e:	67 c0       	rjmp	.+206    	; 0x4c3e <nwkRxIndicateFrame+0x110>
    4b70:	1d 96       	adiw	r26, 0x0d	; 13
    4b72:	4d 91       	ld	r20, X+
    4b74:	5c 91       	ld	r21, X
    4b76:	1e 97       	sbiw	r26, 0x0e	; 14
    4b78:	5a 83       	std	Y+2, r21	; 0x02
    4b7a:	49 83       	std	Y+1, r20	; 0x01
    4b7c:	1f 96       	adiw	r26, 0x0f	; 15
    4b7e:	6d 91       	ld	r22, X+
    4b80:	7c 91       	ld	r23, X
    4b82:	50 97       	sbiw	r26, 0x10	; 16
    4b84:	7c 83       	std	Y+4, r23	; 0x04
    4b86:	6b 83       	std	Y+3, r22	; 0x03
    4b88:	51 96       	adiw	r26, 0x11	; 17
    4b8a:	9c 91       	ld	r25, X
    4b8c:	51 97       	sbiw	r26, 0x11	; 17
    4b8e:	9f 70       	andi	r25, 0x0F	; 15
    4b90:	9d 83       	std	Y+5, r25	; 0x05
    4b92:	8e 83       	std	Y+6, r24	; 0x06
    4b94:	cd 01       	movw	r24, r26
    4b96:	8f 57       	subi	r24, 0x7F	; 127
    4b98:	9f 4f       	sbci	r25, 0xFF	; 255
    4b9a:	fc 01       	movw	r30, r24
    4b9c:	80 81       	ld	r24, Z
    4b9e:	91 81       	ldd	r25, Z+1	; 0x01
    4ba0:	99 87       	std	Y+9, r25	; 0x09
    4ba2:	88 87       	std	Y+8, r24	; 0x08
    4ba4:	11 96       	adiw	r26, 0x01	; 1
    4ba6:	2c 91       	ld	r18, X
    4ba8:	11 97       	sbiw	r26, 0x01	; 1
    4baa:	8d 01       	movw	r16, r26
    4bac:	0e 5f       	subi	r16, 0xFE	; 254
    4bae:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb0:	80 1b       	sub	r24, r16
    4bb2:	91 0b       	sbc	r25, r17
    4bb4:	28 1b       	sub	r18, r24
    4bb6:	2a 87       	std	Y+10, r18	; 0x0a
    4bb8:	cd 01       	movw	r24, r26
    4bba:	8d 57       	subi	r24, 0x7D	; 125
    4bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    4bbe:	fc 01       	movw	r30, r24
    4bc0:	80 81       	ld	r24, Z
    4bc2:	8b 87       	std	Y+11, r24	; 0x0b
    4bc4:	cd 01       	movw	r24, r26
    4bc6:	8c 57       	subi	r24, 0x7C	; 124
    4bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    4bca:	fc 01       	movw	r30, r24
    4bcc:	80 81       	ld	r24, Z
    4bce:	8c 87       	std	Y+12, r24	; 0x0c
    4bd0:	1b 96       	adiw	r26, 0x0b	; 11
    4bd2:	2c 91       	ld	r18, X
    4bd4:	1b 97       	sbiw	r26, 0x0b	; 11
    4bd6:	92 2f       	mov	r25, r18
    4bd8:	91 70       	andi	r25, 0x01	; 1
    4bda:	82 2f       	mov	r24, r18
    4bdc:	82 70       	andi	r24, 0x02	; 2
    4bde:	98 2b       	or	r25, r24
    4be0:	22 ff       	sbrs	r18, 2
    4be2:	02 c0       	rjmp	.+4      	; 0x4be8 <nwkRxIndicateFrame+0xba>
    4be4:	80 e2       	ldi	r24, 0x20	; 32
    4be6:	01 c0       	rjmp	.+2      	; 0x4bea <nwkRxIndicateFrame+0xbc>
    4be8:	80 e0       	ldi	r24, 0x00	; 0
    4bea:	98 2b       	or	r25, r24
    4bec:	23 ff       	sbrs	r18, 3
    4bee:	02 c0       	rjmp	.+4      	; 0x4bf4 <nwkRxIndicateFrame+0xc6>
    4bf0:	80 e4       	ldi	r24, 0x40	; 64
    4bf2:	01 c0       	rjmp	.+2      	; 0x4bf6 <nwkRxIndicateFrame+0xc8>
    4bf4:	80 e0       	ldi	r24, 0x00	; 0
    4bf6:	98 2b       	or	r25, r24
    4bf8:	6f 3f       	cpi	r22, 0xFF	; 255
    4bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    4bfc:	11 f4       	brne	.+4      	; 0x4c02 <nwkRxIndicateFrame+0xd4>
    4bfe:	84 e0       	ldi	r24, 0x04	; 4
    4c00:	01 c0       	rjmp	.+2      	; 0x4c04 <nwkRxIndicateFrame+0xd6>
    4c02:	80 e0       	ldi	r24, 0x00	; 0
    4c04:	98 2b       	or	r25, r24
    4c06:	19 96       	adiw	r26, 0x09	; 9
    4c08:	2d 91       	ld	r18, X+
    4c0a:	3c 91       	ld	r19, X
    4c0c:	1a 97       	sbiw	r26, 0x0a	; 10
    4c0e:	42 17       	cp	r20, r18
    4c10:	53 07       	cpc	r21, r19
    4c12:	11 f4       	brne	.+4      	; 0x4c18 <nwkRxIndicateFrame+0xea>
    4c14:	88 e0       	ldi	r24, 0x08	; 8
    4c16:	01 c0       	rjmp	.+2      	; 0x4c1a <nwkRxIndicateFrame+0xec>
    4c18:	80 e0       	ldi	r24, 0x00	; 0
    4c1a:	98 2b       	or	r25, r24
    4c1c:	15 96       	adiw	r26, 0x05	; 5
    4c1e:	2d 91       	ld	r18, X+
    4c20:	3c 91       	ld	r19, X
    4c22:	16 97       	sbiw	r26, 0x06	; 6
    4c24:	2f 3f       	cpi	r18, 0xFF	; 255
    4c26:	3f 4f       	sbci	r19, 0xFF	; 255
    4c28:	11 f4       	brne	.+4      	; 0x4c2e <nwkRxIndicateFrame+0x100>
    4c2a:	80 e1       	ldi	r24, 0x10	; 16
    4c2c:	01 c0       	rjmp	.+2      	; 0x4c30 <nwkRxIndicateFrame+0x102>
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	89 2b       	or	r24, r25
    4c32:	8f 83       	std	Y+7, r24	; 0x07
    4c34:	ce 01       	movw	r24, r28
    4c36:	01 96       	adiw	r24, 0x01	; 1
    4c38:	f7 01       	movw	r30, r14
    4c3a:	19 95       	eicall
    4c3c:	01 c0       	rjmp	.+2      	; 0x4c40 <nwkRxIndicateFrame+0x112>
    4c3e:	80 e0       	ldi	r24, 0x00	; 0
    4c40:	2c 96       	adiw	r28, 0x0c	; 12
    4c42:	0f b6       	in	r0, 0x3f	; 63
    4c44:	f8 94       	cli
    4c46:	de bf       	out	0x3e, r29	; 62
    4c48:	0f be       	out	0x3f, r0	; 63
    4c4a:	cd bf       	out	0x3d, r28	; 61
    4c4c:	df 91       	pop	r29
    4c4e:	cf 91       	pop	r28
    4c50:	1f 91       	pop	r17
    4c52:	0f 91       	pop	r16
    4c54:	ff 90       	pop	r15
    4c56:	ef 90       	pop	r14
    4c58:	08 95       	ret

00004c5a <nwkRxServiceDataInd>:
    4c5a:	dc 01       	movw	r26, r24
    4c5c:	19 96       	adiw	r26, 0x09	; 9
    4c5e:	2c 91       	ld	r18, X
    4c60:	19 97       	sbiw	r26, 0x09	; 9
    4c62:	22 23       	and	r18, r18
    4c64:	71 f0       	breq	.+28     	; 0x4c82 <nwkRxServiceDataInd+0x28>
    4c66:	17 96       	adiw	r26, 0x07	; 7
    4c68:	ed 91       	ld	r30, X+
    4c6a:	fc 91       	ld	r31, X
    4c6c:	18 97       	sbiw	r26, 0x08	; 8
    4c6e:	20 81       	ld	r18, Z
    4c70:	22 23       	and	r18, r18
    4c72:	19 f0       	breq	.+6      	; 0x4c7a <nwkRxServiceDataInd+0x20>
    4c74:	21 30       	cpi	r18, 0x01	; 1
    4c76:	19 f0       	breq	.+6      	; 0x4c7e <nwkRxServiceDataInd+0x24>
    4c78:	06 c0       	rjmp	.+12     	; 0x4c86 <nwkRxServiceDataInd+0x2c>
    4c7a:	04 c3       	rjmp	.+1544   	; 0x5284 <nwkTxAckReceived>
    4c7c:	08 95       	ret
    4c7e:	46 cf       	rjmp	.-372    	; 0x4b0c <nwkRouteErrorReceived>
    4c80:	08 95       	ret
    4c82:	80 e0       	ldi	r24, 0x00	; 0
    4c84:	08 95       	ret
    4c86:	80 e0       	ldi	r24, 0x00	; 0
    4c88:	08 95       	ret

00004c8a <nwkRxDuplicateRejectionTimerHandler>:
    4c8a:	bc 01       	movw	r22, r24
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	80 e0       	ldi	r24, 0x00	; 0
    4c90:	1c c0       	rjmp	.+56     	; 0x4cca <nwkRxDuplicateRejectionTimerHandler+0x40>
    4c92:	29 2f       	mov	r18, r25
    4c94:	30 e0       	ldi	r19, 0x00	; 0
    4c96:	f9 01       	movw	r30, r18
    4c98:	ee 0f       	add	r30, r30
    4c9a:	ff 1f       	adc	r31, r31
    4c9c:	ee 0f       	add	r30, r30
    4c9e:	ff 1f       	adc	r31, r31
    4ca0:	e2 0f       	add	r30, r18
    4ca2:	f3 1f       	adc	r31, r19
    4ca4:	ed 52       	subi	r30, 0x2D	; 45
    4ca6:	f8 4e       	sbci	r31, 0xE8	; 232
    4ca8:	44 81       	ldd	r20, Z+4	; 0x04
    4caa:	44 23       	and	r20, r20
    4cac:	69 f0       	breq	.+26     	; 0x4cc8 <nwkRxDuplicateRejectionTimerHandler+0x3e>
    4cae:	f9 01       	movw	r30, r18
    4cb0:	ee 0f       	add	r30, r30
    4cb2:	ff 1f       	adc	r31, r31
    4cb4:	ee 0f       	add	r30, r30
    4cb6:	ff 1f       	adc	r31, r31
    4cb8:	2e 0f       	add	r18, r30
    4cba:	3f 1f       	adc	r19, r31
    4cbc:	f9 01       	movw	r30, r18
    4cbe:	ed 52       	subi	r30, 0x2D	; 45
    4cc0:	f8 4e       	sbci	r31, 0xE8	; 232
    4cc2:	41 50       	subi	r20, 0x01	; 1
    4cc4:	44 83       	std	Z+4, r20	; 0x04
    4cc6:	81 e0       	ldi	r24, 0x01	; 1
    4cc8:	9f 5f       	subi	r25, 0xFF	; 255
    4cca:	9a 30       	cpi	r25, 0x0A	; 10
    4ccc:	10 f3       	brcs	.-60     	; 0x4c92 <nwkRxDuplicateRejectionTimerHandler+0x8>
    4cce:	88 23       	and	r24, r24
    4cd0:	11 f0       	breq	.+4      	; 0x4cd6 <nwkRxDuplicateRejectionTimerHandler+0x4c>
    4cd2:	cb 01       	movw	r24, r22
    4cd4:	93 c5       	rjmp	.+2854   	; 0x57fc <SYS_TimerStart>
    4cd6:	08 95       	ret

00004cd8 <nwkRxRejectDuplicate>:
    4cd8:	0f 93       	push	r16
    4cda:	1f 93       	push	r17
    4cdc:	cf 93       	push	r28
    4cde:	df 93       	push	r29
    4ce0:	ec 01       	movw	r28, r24
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	60 e0       	ldi	r22, 0x00	; 0
    4ce6:	70 e0       	ldi	r23, 0x00	; 0
    4ce8:	80 c0       	rjmp	.+256    	; 0x4dea <nwkRxRejectDuplicate+0x112>
    4cea:	29 2f       	mov	r18, r25
    4cec:	30 e0       	ldi	r19, 0x00	; 0
    4cee:	f9 01       	movw	r30, r18
    4cf0:	ee 0f       	add	r30, r30
    4cf2:	ff 1f       	adc	r31, r31
    4cf4:	ee 0f       	add	r30, r30
    4cf6:	ff 1f       	adc	r31, r31
    4cf8:	e2 0f       	add	r30, r18
    4cfa:	f3 1f       	adc	r31, r19
    4cfc:	ed 52       	subi	r30, 0x2D	; 45
    4cfe:	f8 4e       	sbci	r31, 0xE8	; 232
    4d00:	44 81       	ldd	r20, Z+4	; 0x04
    4d02:	44 23       	and	r20, r20
    4d04:	09 f4       	brne	.+2      	; 0x4d08 <nwkRxRejectDuplicate+0x30>
    4d06:	6d c0       	rjmp	.+218    	; 0x4de2 <nwkRxRejectDuplicate+0x10a>
    4d08:	0b 85       	ldd	r16, Y+11	; 0x0b
    4d0a:	1c 85       	ldd	r17, Y+12	; 0x0c
    4d0c:	a0 81       	ld	r26, Z
    4d0e:	b1 81       	ldd	r27, Z+1	; 0x01
    4d10:	0a 17       	cp	r16, r26
    4d12:	1b 07       	cpc	r17, r27
    4d14:	09 f0       	breq	.+2      	; 0x4d18 <nwkRxRejectDuplicate+0x40>
    4d16:	65 c0       	rjmp	.+202    	; 0x4de2 <nwkRxRejectDuplicate+0x10a>
    4d18:	f9 01       	movw	r30, r18
    4d1a:	ee 0f       	add	r30, r30
    4d1c:	ff 1f       	adc	r31, r31
    4d1e:	ee 0f       	add	r30, r30
    4d20:	ff 1f       	adc	r31, r31
    4d22:	e2 0f       	add	r30, r18
    4d24:	f3 1f       	adc	r31, r19
    4d26:	ed 52       	subi	r30, 0x2D	; 45
    4d28:	f8 4e       	sbci	r31, 0xE8	; 232
    4d2a:	82 81       	ldd	r24, Z+2	; 0x02
    4d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d2e:	89 1b       	sub	r24, r25
    4d30:	88 30       	cpi	r24, 0x08	; 8
    4d32:	e0 f5       	brcc	.+120    	; 0x4dac <nwkRxRejectDuplicate+0xd4>
    4d34:	f9 01       	movw	r30, r18
    4d36:	ee 0f       	add	r30, r30
    4d38:	ff 1f       	adc	r31, r31
    4d3a:	ee 0f       	add	r30, r30
    4d3c:	ff 1f       	adc	r31, r31
    4d3e:	e2 0f       	add	r30, r18
    4d40:	f3 1f       	adc	r31, r19
    4d42:	ed 52       	subi	r30, 0x2D	; 45
    4d44:	f8 4e       	sbci	r31, 0xE8	; 232
    4d46:	93 81       	ldd	r25, Z+3	; 0x03
    4d48:	49 2f       	mov	r20, r25
    4d4a:	50 e0       	ldi	r21, 0x00	; 0
    4d4c:	08 2e       	mov	r0, r24
    4d4e:	02 c0       	rjmp	.+4      	; 0x4d54 <nwkRxRejectDuplicate+0x7c>
    4d50:	55 95       	asr	r21
    4d52:	47 95       	ror	r20
    4d54:	0a 94       	dec	r0
    4d56:	e2 f7       	brpl	.-8      	; 0x4d50 <nwkRxRejectDuplicate+0x78>
    4d58:	40 ff       	sbrs	r20, 0
    4d5a:	13 c0       	rjmp	.+38     	; 0x4d82 <nwkRxRejectDuplicate+0xaa>
    4d5c:	20 91 ae 1c 	lds	r18, 0x1CAE	; 0x801cae <nwkIb>
    4d60:	30 91 af 1c 	lds	r19, 0x1CAF	; 0x801caf <nwkIb+0x1>
    4d64:	8d 81       	ldd	r24, Y+5	; 0x05
    4d66:	9e 81       	ldd	r25, Y+6	; 0x06
    4d68:	28 17       	cp	r18, r24
    4d6a:	39 07       	cpc	r19, r25
    4d6c:	09 f0       	breq	.+2      	; 0x4d70 <nwkRxRejectDuplicate+0x98>
    4d6e:	53 c0       	rjmp	.+166    	; 0x4e16 <nwkRxRejectDuplicate+0x13e>
    4d70:	69 85       	ldd	r22, Y+9	; 0x09
    4d72:	63 fb       	bst	r22, 3
    4d74:	66 27       	eor	r22, r22
    4d76:	60 f9       	bld	r22, 0
    4d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d7c:	da dd       	rcall	.-1100   	; 0x4932 <nwkRouteRemove>
    4d7e:	81 e0       	ldi	r24, 0x01	; 1
    4d80:	4d c0       	rjmp	.+154    	; 0x4e1c <nwkRxRejectDuplicate+0x144>
    4d82:	41 e0       	ldi	r20, 0x01	; 1
    4d84:	50 e0       	ldi	r21, 0x00	; 0
    4d86:	02 c0       	rjmp	.+4      	; 0x4d8c <nwkRxRejectDuplicate+0xb4>
    4d88:	44 0f       	add	r20, r20
    4d8a:	55 1f       	adc	r21, r21
    4d8c:	8a 95       	dec	r24
    4d8e:	e2 f7       	brpl	.-8      	; 0x4d88 <nwkRxRejectDuplicate+0xb0>
    4d90:	f9 01       	movw	r30, r18
    4d92:	ee 0f       	add	r30, r30
    4d94:	ff 1f       	adc	r31, r31
    4d96:	ee 0f       	add	r30, r30
    4d98:	ff 1f       	adc	r31, r31
    4d9a:	2e 0f       	add	r18, r30
    4d9c:	3f 1f       	adc	r19, r31
    4d9e:	f9 01       	movw	r30, r18
    4da0:	ed 52       	subi	r30, 0x2D	; 45
    4da2:	f8 4e       	sbci	r31, 0xE8	; 232
    4da4:	94 2b       	or	r25, r20
    4da6:	93 83       	std	Z+3, r25	; 0x03
    4da8:	80 e0       	ldi	r24, 0x00	; 0
    4daa:	38 c0       	rjmp	.+112    	; 0x4e1c <nwkRxRejectDuplicate+0x144>
    4dac:	81 95       	neg	r24
    4dae:	f9 01       	movw	r30, r18
    4db0:	ee 0f       	add	r30, r30
    4db2:	ff 1f       	adc	r31, r31
    4db4:	ee 0f       	add	r30, r30
    4db6:	ff 1f       	adc	r31, r31
    4db8:	2e 0f       	add	r18, r30
    4dba:	3f 1f       	adc	r19, r31
    4dbc:	f9 01       	movw	r30, r18
    4dbe:	ed 52       	subi	r30, 0x2D	; 45
    4dc0:	f8 4e       	sbci	r31, 0xE8	; 232
    4dc2:	92 83       	std	Z+2, r25	; 0x02
    4dc4:	23 81       	ldd	r18, Z+3	; 0x03
    4dc6:	30 e0       	ldi	r19, 0x00	; 0
    4dc8:	a9 01       	movw	r20, r18
    4dca:	02 c0       	rjmp	.+4      	; 0x4dd0 <nwkRxRejectDuplicate+0xf8>
    4dcc:	44 0f       	add	r20, r20
    4dce:	55 1f       	adc	r21, r21
    4dd0:	8a 95       	dec	r24
    4dd2:	e2 f7       	brpl	.-8      	; 0x4dcc <nwkRxRejectDuplicate+0xf4>
    4dd4:	ca 01       	movw	r24, r20
    4dd6:	81 60       	ori	r24, 0x01	; 1
    4dd8:	83 83       	std	Z+3, r24	; 0x03
    4dda:	8f e1       	ldi	r24, 0x1F	; 31
    4ddc:	84 83       	std	Z+4, r24	; 0x04
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	1d c0       	rjmp	.+58     	; 0x4e1c <nwkRxRejectDuplicate+0x144>
    4de2:	41 11       	cpse	r20, r1
    4de4:	01 c0       	rjmp	.+2      	; 0x4de8 <nwkRxRejectDuplicate+0x110>
    4de6:	bf 01       	movw	r22, r30
    4de8:	9f 5f       	subi	r25, 0xFF	; 255
    4dea:	9a 30       	cpi	r25, 0x0A	; 10
    4dec:	08 f4       	brcc	.+2      	; 0x4df0 <nwkRxRejectDuplicate+0x118>
    4dee:	7d cf       	rjmp	.-262    	; 0x4cea <nwkRxRejectDuplicate+0x12>
    4df0:	61 15       	cp	r22, r1
    4df2:	71 05       	cpc	r23, r1
    4df4:	91 f0       	breq	.+36     	; 0x4e1a <nwkRxRejectDuplicate+0x142>
    4df6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4df8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4dfa:	fb 01       	movw	r30, r22
    4dfc:	91 83       	std	Z+1, r25	; 0x01
    4dfe:	80 83       	st	Z, r24
    4e00:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e02:	82 83       	std	Z+2, r24	; 0x02
    4e04:	81 e0       	ldi	r24, 0x01	; 1
    4e06:	83 83       	std	Z+3, r24	; 0x03
    4e08:	8f e1       	ldi	r24, 0x1F	; 31
    4e0a:	84 83       	std	Z+4, r24	; 0x04
    4e0c:	85 ec       	ldi	r24, 0xC5	; 197
    4e0e:	97 e1       	ldi	r25, 0x17	; 23
    4e10:	f5 d4       	rcall	.+2538   	; 0x57fc <SYS_TimerStart>
    4e12:	80 e0       	ldi	r24, 0x00	; 0
    4e14:	03 c0       	rjmp	.+6      	; 0x4e1c <nwkRxRejectDuplicate+0x144>
    4e16:	81 e0       	ldi	r24, 0x01	; 1
    4e18:	01 c0       	rjmp	.+2      	; 0x4e1c <nwkRxRejectDuplicate+0x144>
    4e1a:	81 e0       	ldi	r24, 0x01	; 1
    4e1c:	df 91       	pop	r29
    4e1e:	cf 91       	pop	r28
    4e20:	1f 91       	pop	r17
    4e22:	0f 91       	pop	r16
    4e24:	08 95       	ret

00004e26 <nwkRxHandleReceivedFrame>:
    4e26:	0f 93       	push	r16
    4e28:	1f 93       	push	r17
    4e2a:	cf 93       	push	r28
    4e2c:	df 93       	push	r29
    4e2e:	fc 01       	movw	r30, r24
    4e30:	8c 01       	movw	r16, r24
    4e32:	0e 5f       	subi	r16, 0xFE	; 254
    4e34:	1f 4f       	sbci	r17, 0xFF	; 255
    4e36:	84 e2       	ldi	r24, 0x24	; 36
    4e38:	80 83       	st	Z, r24
    4e3a:	83 85       	ldd	r24, Z+11	; 0x0b
    4e3c:	81 fd       	sbrc	r24, 1
    4e3e:	54 c0       	rjmp	.+168    	; 0x4ee8 <nwkRxHandleReceivedFrame+0xc2>
    4e40:	83 fd       	sbrc	r24, 3
    4e42:	52 c0       	rjmp	.+164    	; 0x4ee8 <nwkRxHandleReceivedFrame+0xc2>
    4e44:	25 81       	ldd	r18, Z+5	; 0x05
    4e46:	36 81       	ldd	r19, Z+6	; 0x06
    4e48:	2f 3f       	cpi	r18, 0xFF	; 255
    4e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e4c:	79 f4       	brne	.+30     	; 0x4e6c <nwkRxHandleReceivedFrame+0x46>
    4e4e:	20 91 ae 1c 	lds	r18, 0x1CAE	; 0x801cae <nwkIb>
    4e52:	30 91 af 1c 	lds	r19, 0x1CAF	; 0x801caf <nwkIb+0x1>
    4e56:	87 85       	ldd	r24, Z+15	; 0x0f
    4e58:	90 89       	ldd	r25, Z+16	; 0x10
    4e5a:	28 17       	cp	r18, r24
    4e5c:	39 07       	cpc	r19, r25
    4e5e:	19 f0       	breq	.+6      	; 0x4e66 <nwkRxHandleReceivedFrame+0x40>
    4e60:	01 96       	adiw	r24, 0x01	; 1
    4e62:	09 f0       	breq	.+2      	; 0x4e66 <nwkRxHandleReceivedFrame+0x40>
    4e64:	41 c0       	rjmp	.+130    	; 0x4ee8 <nwkRxHandleReceivedFrame+0xc2>
    4e66:	82 e2       	ldi	r24, 0x22	; 34
    4e68:	80 83       	st	Z, r24
    4e6a:	3e c0       	rjmp	.+124    	; 0x4ee8 <nwkRxHandleReceivedFrame+0xc2>
    4e6c:	27 85       	ldd	r18, Z+15	; 0x0f
    4e6e:	30 89       	ldd	r19, Z+16	; 0x10
    4e70:	2f 3f       	cpi	r18, 0xFF	; 255
    4e72:	3f 4f       	sbci	r19, 0xFF	; 255
    4e74:	11 f4       	brne	.+4      	; 0x4e7a <nwkRxHandleReceivedFrame+0x54>
    4e76:	80 fd       	sbrc	r24, 0
    4e78:	37 c0       	rjmp	.+110    	; 0x4ee8 <nwkRxHandleReceivedFrame+0xc2>
    4e7a:	20 91 ae 1c 	lds	r18, 0x1CAE	; 0x801cae <nwkIb>
    4e7e:	30 91 af 1c 	lds	r19, 0x1CAF	; 0x801caf <nwkIb+0x1>
    4e82:	85 85       	ldd	r24, Z+13	; 0x0d
    4e84:	96 85       	ldd	r25, Z+14	; 0x0e
    4e86:	28 17       	cp	r18, r24
    4e88:	39 07       	cpc	r19, r25
    4e8a:	71 f1       	breq	.+92     	; 0x4ee8 <nwkRxHandleReceivedFrame+0xc2>
    4e8c:	ef 01       	movw	r28, r30
    4e8e:	cf 01       	movw	r24, r30
    4e90:	55 dd       	rcall	.-1366   	; 0x493c <nwkRouteFrameReceived>
    4e92:	c8 01       	movw	r24, r16
    4e94:	21 df       	rcall	.-446    	; 0x4cd8 <nwkRxRejectDuplicate>
    4e96:	81 11       	cpse	r24, r1
    4e98:	27 c0       	rjmp	.+78     	; 0x4ee8 <nwkRxHandleReceivedFrame+0xc2>
    4e9a:	8f 81       	ldd	r24, Y+7	; 0x07
    4e9c:	98 85       	ldd	r25, Y+8	; 0x08
    4e9e:	01 96       	adiw	r24, 0x01	; 1
    4ea0:	71 f4       	brne	.+28     	; 0x4ebe <nwkRxHandleReceivedFrame+0x98>
    4ea2:	20 91 ae 1c 	lds	r18, 0x1CAE	; 0x801cae <nwkIb>
    4ea6:	30 91 af 1c 	lds	r19, 0x1CAF	; 0x801caf <nwkIb+0x1>
    4eaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    4eac:	98 89       	ldd	r25, Y+16	; 0x10
    4eae:	28 17       	cp	r18, r24
    4eb0:	39 07       	cpc	r19, r25
    4eb2:	29 f0       	breq	.+10     	; 0x4ebe <nwkRxHandleReceivedFrame+0x98>
    4eb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4eb6:	82 fd       	sbrc	r24, 2
    4eb8:	02 c0       	rjmp	.+4      	; 0x4ebe <nwkRxHandleReceivedFrame+0x98>
    4eba:	ce 01       	movw	r24, r28
    4ebc:	9f d1       	rcall	.+830    	; 0x51fc <nwkTxBroadcastFrame>
    4ebe:	20 91 ae 1c 	lds	r18, 0x1CAE	; 0x801cae <nwkIb>
    4ec2:	30 91 af 1c 	lds	r19, 0x1CAF	; 0x801caf <nwkIb+0x1>
    4ec6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ec8:	98 89       	ldd	r25, Y+16	; 0x10
    4eca:	28 17       	cp	r18, r24
    4ecc:	39 07       	cpc	r19, r25
    4ece:	11 f0       	breq	.+4      	; 0x4ed4 <nwkRxHandleReceivedFrame+0xae>
    4ed0:	01 96       	adiw	r24, 0x01	; 1
    4ed2:	19 f4       	brne	.+6      	; 0x4eda <nwkRxHandleReceivedFrame+0xb4>
    4ed4:	82 e2       	ldi	r24, 0x22	; 34
    4ed6:	88 83       	st	Y, r24
    4ed8:	07 c0       	rjmp	.+14     	; 0x4ee8 <nwkRxHandleReceivedFrame+0xc2>
    4eda:	8f 81       	ldd	r24, Y+7	; 0x07
    4edc:	98 85       	ldd	r25, Y+8	; 0x08
    4ede:	28 17       	cp	r18, r24
    4ee0:	39 07       	cpc	r19, r25
    4ee2:	11 f4       	brne	.+4      	; 0x4ee8 <nwkRxHandleReceivedFrame+0xc2>
    4ee4:	83 e2       	ldi	r24, 0x23	; 35
    4ee6:	88 83       	st	Y, r24
    4ee8:	df 91       	pop	r29
    4eea:	cf 91       	pop	r28
    4eec:	1f 91       	pop	r17
    4eee:	0f 91       	pop	r16
    4ef0:	08 95       	ret

00004ef2 <nwkRxSendAck>:
    4ef2:	0f 93       	push	r16
    4ef4:	1f 93       	push	r17
    4ef6:	cf 93       	push	r28
    4ef8:	df 93       	push	r29
    4efa:	8c 01       	movw	r16, r24
    4efc:	e5 db       	rcall	.-2102   	; 0x46c8 <nwkFrameAlloc>
    4efe:	ec 01       	movw	r28, r24
    4f00:	00 97       	sbiw	r24, 0x00	; 0
    4f02:	31 f1       	breq	.+76     	; 0x4f50 <nwkRxSendAck+0x5e>
    4f04:	34 dc       	rcall	.-1944   	; 0x476e <nwkFrameCommandInit>
    4f06:	89 81       	ldd	r24, Y+1	; 0x01
    4f08:	8d 5f       	subi	r24, 0xFD	; 253
    4f0a:	89 83       	std	Y+1, r24	; 0x01
    4f0c:	fe 01       	movw	r30, r28
    4f0e:	e9 57       	subi	r30, 0x79	; 121
    4f10:	ff 4f       	sbci	r31, 0xFF	; 255
    4f12:	11 82       	std	Z+1, r1	; 0x01
    4f14:	10 82       	st	Z, r1
    4f16:	d8 01       	movw	r26, r16
    4f18:	1b 96       	adiw	r26, 0x0b	; 11
    4f1a:	8c 91       	ld	r24, X
    4f1c:	1b 97       	sbiw	r26, 0x0b	; 11
    4f1e:	86 95       	lsr	r24
    4f20:	81 70       	andi	r24, 0x01	; 1
    4f22:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f24:	80 fb       	bst	r24, 0
    4f26:	91 f9       	bld	r25, 1
    4f28:	9b 87       	std	Y+11, r25	; 0x0b
    4f2a:	1d 96       	adiw	r26, 0x0d	; 13
    4f2c:	8d 91       	ld	r24, X+
    4f2e:	9c 91       	ld	r25, X
    4f30:	1e 97       	sbiw	r26, 0x0e	; 14
    4f32:	98 8b       	std	Y+16, r25	; 0x10
    4f34:	8f 87       	std	Y+15, r24	; 0x0f
    4f36:	36 97       	sbiw	r30, 0x06	; 6
    4f38:	01 90       	ld	r0, Z+
    4f3a:	f0 81       	ld	r31, Z
    4f3c:	e0 2d       	mov	r30, r0
    4f3e:	10 82       	st	Z, r1
    4f40:	80 91 d2 17 	lds	r24, 0x17D2	; 0x8017d2 <nwkRxAckControl>
    4f44:	82 83       	std	Z+2, r24	; 0x02
    4f46:	1c 96       	adiw	r26, 0x0c	; 12
    4f48:	8c 91       	ld	r24, X
    4f4a:	81 83       	std	Z+1, r24	; 0x01
    4f4c:	ce 01       	movw	r24, r28
    4f4e:	04 d1       	rcall	.+520    	; 0x5158 <nwkTxFrame>
    4f50:	df 91       	pop	r29
    4f52:	cf 91       	pop	r28
    4f54:	1f 91       	pop	r17
    4f56:	0f 91       	pop	r16
    4f58:	08 95       	ret

00004f5a <nwkRxHandleIndication>:
    4f5a:	cf 93       	push	r28
    4f5c:	df 93       	push	r29
    4f5e:	ec 01       	movw	r28, r24
    4f60:	10 92 d2 17 	sts	0x17D2, r1	; 0x8017d2 <nwkRxAckControl>
    4f64:	e4 dd       	rcall	.-1080   	; 0x4b2e <nwkRxIndicateFrame>
    4f66:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f68:	90 ff       	sbrs	r25, 0
    4f6a:	80 e0       	ldi	r24, 0x00	; 0
    4f6c:	2f 81       	ldd	r18, Y+7	; 0x07
    4f6e:	38 85       	ldd	r19, Y+8	; 0x08
    4f70:	2f 3f       	cpi	r18, 0xFF	; 255
    4f72:	3f 4f       	sbci	r19, 0xFF	; 255
    4f74:	59 f4       	brne	.+22     	; 0x4f8c <nwkRxHandleIndication+0x32>
    4f76:	40 91 ae 1c 	lds	r20, 0x1CAE	; 0x801cae <nwkIb>
    4f7a:	50 91 af 1c 	lds	r21, 0x1CAF	; 0x801caf <nwkIb+0x1>
    4f7e:	2f 85       	ldd	r18, Y+15	; 0x0f
    4f80:	38 89       	ldd	r19, Y+16	; 0x10
    4f82:	42 17       	cp	r20, r18
    4f84:	53 07       	cpc	r21, r19
    4f86:	11 f4       	brne	.+4      	; 0x4f8c <nwkRxHandleIndication+0x32>
    4f88:	93 ff       	sbrs	r25, 3
    4f8a:	81 e0       	ldi	r24, 0x01	; 1
    4f8c:	2d 81       	ldd	r18, Y+5	; 0x05
    4f8e:	3e 81       	ldd	r19, Y+6	; 0x06
    4f90:	2f 3f       	cpi	r18, 0xFF	; 255
    4f92:	3f 4f       	sbci	r19, 0xFF	; 255
    4f94:	09 f4       	brne	.+2      	; 0x4f98 <nwkRxHandleIndication+0x3e>
    4f96:	80 e0       	ldi	r24, 0x00	; 0
    4f98:	20 91 ae 1c 	lds	r18, 0x1CAE	; 0x801cae <nwkIb>
    4f9c:	30 91 af 1c 	lds	r19, 0x1CAF	; 0x801caf <nwkIb+0x1>
    4fa0:	2f 3f       	cpi	r18, 0xFF	; 255
    4fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    4fa4:	09 f4       	brne	.+2      	; 0x4fa8 <nwkRxHandleIndication+0x4e>
    4fa6:	80 e0       	ldi	r24, 0x00	; 0
    4fa8:	88 23       	and	r24, r24
    4faa:	11 f0       	breq	.+4      	; 0x4fb0 <nwkRxHandleIndication+0x56>
    4fac:	ce 01       	movw	r24, r28
    4fae:	a1 df       	rcall	.-190    	; 0x4ef2 <nwkRxSendAck>
    4fb0:	84 e2       	ldi	r24, 0x24	; 36
    4fb2:	88 83       	st	Y, r24
    4fb4:	df 91       	pop	r29
    4fb6:	cf 91       	pop	r28
    4fb8:	08 95       	ret

00004fba <nwkRxInit>:
    4fba:	20 e0       	ldi	r18, 0x00	; 0
    4fbc:	0e c0       	rjmp	.+28     	; 0x4fda <nwkRxInit+0x20>
    4fbe:	82 2f       	mov	r24, r18
    4fc0:	90 e0       	ldi	r25, 0x00	; 0
    4fc2:	fc 01       	movw	r30, r24
    4fc4:	ee 0f       	add	r30, r30
    4fc6:	ff 1f       	adc	r31, r31
    4fc8:	ee 0f       	add	r30, r30
    4fca:	ff 1f       	adc	r31, r31
    4fcc:	8e 0f       	add	r24, r30
    4fce:	9f 1f       	adc	r25, r31
    4fd0:	fc 01       	movw	r30, r24
    4fd2:	ed 52       	subi	r30, 0x2D	; 45
    4fd4:	f8 4e       	sbci	r31, 0xE8	; 232
    4fd6:	14 82       	std	Z+4, r1	; 0x04
    4fd8:	2f 5f       	subi	r18, 0xFF	; 255
    4fda:	2a 30       	cpi	r18, 0x0A	; 10
    4fdc:	80 f3       	brcs	.-32     	; 0x4fbe <nwkRxInit+0x4>
    4fde:	e5 ec       	ldi	r30, 0xC5	; 197
    4fe0:	f7 e1       	ldi	r31, 0x17	; 23
    4fe2:	84 e6       	ldi	r24, 0x64	; 100
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	a0 e0       	ldi	r26, 0x00	; 0
    4fe8:	b0 e0       	ldi	r27, 0x00	; 0
    4fea:	86 83       	std	Z+6, r24	; 0x06
    4fec:	97 83       	std	Z+7, r25	; 0x07
    4fee:	a0 87       	std	Z+8, r26	; 0x08
    4ff0:	b1 87       	std	Z+9, r27	; 0x09
    4ff2:	12 86       	std	Z+10, r1	; 0x0a
    4ff4:	85 e4       	ldi	r24, 0x45	; 69
    4ff6:	96 e2       	ldi	r25, 0x26	; 38
    4ff8:	94 87       	std	Z+12, r25	; 0x0c
    4ffa:	83 87       	std	Z+11, r24	; 0x0b
    4ffc:	6d e2       	ldi	r22, 0x2D	; 45
    4ffe:	76 e2       	ldi	r23, 0x26	; 38
    5000:	80 e0       	ldi	r24, 0x00	; 0
    5002:	60 ca       	rjmp	.-2880   	; 0x44c4 <NWK_OpenEndpoint>
    5004:	08 95       	ret

00005006 <PHY_DataInd>:
    5006:	cf 93       	push	r28
    5008:	df 93       	push	r29
    500a:	dc 01       	movw	r26, r24
    500c:	ed 91       	ld	r30, X+
    500e:	fc 91       	ld	r31, X
    5010:	21 81       	ldd	r18, Z+1	; 0x01
    5012:	28 38       	cpi	r18, 0x88	; 136
    5014:	11 f5       	brne	.+68     	; 0x505a <PHY_DataInd+0x54>
    5016:	20 81       	ld	r18, Z
    5018:	21 36       	cpi	r18, 0x61	; 97
    501a:	11 f0       	breq	.+4      	; 0x5020 <PHY_DataInd+0x1a>
    501c:	21 34       	cpi	r18, 0x41	; 65
    501e:	e9 f4       	brne	.+58     	; 0x505a <PHY_DataInd+0x54>
    5020:	fc 01       	movw	r30, r24
    5022:	22 81       	ldd	r18, Z+2	; 0x02
    5024:	20 31       	cpi	r18, 0x10	; 16
    5026:	c8 f0       	brcs	.+50     	; 0x505a <PHY_DataInd+0x54>
    5028:	ec 01       	movw	r28, r24
    502a:	4e db       	rcall	.-2404   	; 0x46c8 <nwkFrameAlloc>
    502c:	00 97       	sbiw	r24, 0x00	; 0
    502e:	a9 f0       	breq	.+42     	; 0x505a <PHY_DataInd+0x54>
    5030:	20 e2       	ldi	r18, 0x20	; 32
    5032:	dc 01       	movw	r26, r24
    5034:	2c 93       	st	X, r18
    5036:	2a 81       	ldd	r18, Y+2	; 0x02
    5038:	11 96       	adiw	r26, 0x01	; 1
    503a:	2c 93       	st	X, r18
    503c:	2b 81       	ldd	r18, Y+3	; 0x03
    503e:	fc 01       	movw	r30, r24
    5040:	ed 57       	subi	r30, 0x7D	; 125
    5042:	ff 4f       	sbci	r31, 0xFF	; 255
    5044:	20 83       	st	Z, r18
    5046:	2c 81       	ldd	r18, Y+4	; 0x04
    5048:	31 96       	adiw	r30, 0x01	; 1
    504a:	20 83       	st	Z, r18
    504c:	4a 81       	ldd	r20, Y+2	; 0x02
    504e:	68 81       	ld	r22, Y
    5050:	79 81       	ldd	r23, Y+1	; 0x01
    5052:	50 e0       	ldi	r21, 0x00	; 0
    5054:	02 96       	adiw	r24, 0x02	; 2
    5056:	0e 94 a9 31 	call	0x6352	; 0x6352 <memcpy>
    505a:	df 91       	pop	r29
    505c:	cf 91       	pop	r28
    505e:	08 95       	ret

00005060 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    5060:	cf 93       	push	r28
    5062:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    5064:	c0 e0       	ldi	r28, 0x00	; 0
    5066:	d0 e0       	ldi	r29, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
    5068:	17 c0       	rjmp	.+46     	; 0x5098 <nwkRxTaskHandler+0x38>
  {
    switch (frame->state)
    506a:	88 81       	ld	r24, Y
    506c:	82 32       	cpi	r24, 0x22	; 34
    506e:	61 f0       	breq	.+24     	; 0x5088 <nwkRxTaskHandler+0x28>
    5070:	18 f4       	brcc	.+6      	; 0x5078 <nwkRxTaskHandler+0x18>
    5072:	80 32       	cpi	r24, 0x20	; 32
    5074:	31 f0       	breq	.+12     	; 0x5082 <nwkRxTaskHandler+0x22>
    5076:	10 c0       	rjmp	.+32     	; 0x5098 <nwkRxTaskHandler+0x38>
    5078:	83 32       	cpi	r24, 0x23	; 35
    507a:	49 f0       	breq	.+18     	; 0x508e <nwkRxTaskHandler+0x2e>
    507c:	84 32       	cpi	r24, 0x24	; 36
    507e:	51 f0       	breq	.+20     	; 0x5094 <nwkRxTaskHandler+0x34>
    5080:	0b c0       	rjmp	.+22     	; 0x5098 <nwkRxTaskHandler+0x38>
    {
      case NWK_RX_STATE_RECEIVED:
      {
        nwkRxHandleReceivedFrame(frame);
    5082:	ce 01       	movw	r24, r28
    5084:	d0 de       	rcall	.-608    	; 0x4e26 <nwkRxHandleReceivedFrame>
      } break;
    5086:	08 c0       	rjmp	.+16     	; 0x5098 <nwkRxTaskHandler+0x38>
      } break;
#endif

      case NWK_RX_STATE_INDICATE:
      {
        nwkRxHandleIndication(frame);
    5088:	ce 01       	movw	r24, r28
    508a:	67 df       	rcall	.-306    	; 0x4f5a <nwkRxHandleIndication>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    508c:	05 c0       	rjmp	.+10     	; 0x5098 <nwkRxTaskHandler+0x38>
    508e:	ce 01       	movw	r24, r28
      } break;
    5090:	14 dd       	rcall	.-1496   	; 0x4aba <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    5092:	02 c0       	rjmp	.+4      	; 0x5098 <nwkRxTaskHandler+0x38>
    5094:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    5096:	49 db       	rcall	.-2414   	; 0x472a <nwkFrameFree>
    5098:	ce 01       	movw	r24, r28
    509a:	51 db       	rcall	.-2398   	; 0x473e <nwkFrameNext>
    509c:	ec 01       	movw	r28, r24
    509e:	89 2b       	or	r24, r25
    50a0:	21 f7       	brne	.-56     	; 0x506a <nwkRxTaskHandler+0xa>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    50a2:	df 91       	pop	r29
    50a4:	cf 91       	pop	r28
    50a6:	08 95       	ret

000050a8 <nwkTxConvertPhyStatus>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    50a8:	81 30       	cpi	r24, 0x01	; 1
    50aa:	51 f0       	breq	.+20     	; 0x50c0 <nwkTxConvertPhyStatus+0x18>
    50ac:	18 f0       	brcs	.+6      	; 0x50b4 <nwkTxConvertPhyStatus+0xc>
    50ae:	82 30       	cpi	r24, 0x02	; 2
    50b0:	19 f0       	breq	.+6      	; 0x50b8 <nwkTxConvertPhyStatus+0x10>
    50b2:	04 c0       	rjmp	.+8      	; 0x50bc <nwkTxConvertPhyStatus+0x14>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	08 95       	ret

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    50b8:	81 e2       	ldi	r24, 0x21	; 33
    50ba:	08 95       	ret

    default:
      return NWK_ERROR_STATUS;
    50bc:	81 e0       	ldi	r24, 0x01	; 1
    50be:	08 95       	ret
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    50c0:	80 e2       	ldi	r24, 0x20	; 32
      return NWK_PHY_NO_ACK_STATUS;

    default:
      return NWK_ERROR_STATUS;
  }
}
    50c2:	08 95       	ret

000050c4 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    50c4:	1f 93       	push	r17
    50c6:	cf 93       	push	r28
    50c8:	df 93       	push	r29
    50ca:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    50cc:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    50ce:	80 e0       	ldi	r24, 0x00	; 0
    50d0:	90 e0       	ldi	r25, 0x00	; 0
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    50d2:	14 c0       	rjmp	.+40     	; 0x50fc <nwkTxDelayTimerHandler+0x38>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    50d4:	fc 01       	movw	r30, r24
    50d6:	20 81       	ld	r18, Z
    50d8:	21 31       	cpi	r18, 0x11	; 17
    50da:	81 f4       	brne	.+32     	; 0x50fc <nwkTxDelayTimerHandler+0x38>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    50dc:	ec 57       	subi	r30, 0x7C	; 124
    50de:	ff 4f       	sbci	r31, 0xFF	; 255
    50e0:	20 81       	ld	r18, Z
    50e2:	31 81       	ldd	r19, Z+1	; 0x01
    50e4:	21 50       	subi	r18, 0x01	; 1
    50e6:	31 09       	sbc	r19, r1
    50e8:	31 83       	std	Z+1, r19	; 0x01
    50ea:	20 83       	st	Z, r18
    50ec:	23 2b       	or	r18, r19
    50ee:	29 f4       	brne	.+10     	; 0x50fa <nwkTxDelayTimerHandler+0x36>
        frame->state = NWK_TX_STATE_SEND;
    50f0:	23 e1       	ldi	r18, 0x13	; 19
    50f2:	fc 01       	movw	r30, r24
    50f4:	20 83       	st	Z, r18

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    50f6:	11 e0       	ldi	r17, 0x01	; 1
    50f8:	01 c0       	rjmp	.+2      	; 0x50fc <nwkTxDelayTimerHandler+0x38>
    50fa:	11 e0       	ldi	r17, 0x01	; 1
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    50fc:	20 db       	rcall	.-2496   	; 0x473e <nwkFrameNext>
    50fe:	00 97       	sbiw	r24, 0x00	; 0
    5100:	49 f7       	brne	.-46     	; 0x50d4 <nwkTxDelayTimerHandler+0x10>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    5102:	11 23       	and	r17, r17
    5104:	11 f0       	breq	.+4      	; 0x510a <nwkTxDelayTimerHandler+0x46>
    SYS_TimerStart(timer);
    5106:	ce 01       	movw	r24, r28
    5108:	79 d3       	rcall	.+1778   	; 0x57fc <SYS_TimerStart>
}
    510a:	df 91       	pop	r29
    510c:	cf 91       	pop	r28
    510e:	1f 91       	pop	r17
    5110:	08 95       	ret

00005112 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    5112:	10 92 20 18 	sts	0x1820, r1	; 0x801820 <nwkTxPhyActiveFrame+0x1>
    5116:	10 92 1f 18 	sts	0x181F, r1	; 0x80181f <nwkTxPhyActiveFrame>

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    511a:	e2 e1       	ldi	r30, 0x12	; 18
    511c:	f8 e1       	ldi	r31, 0x18	; 24
    511e:	82 e3       	ldi	r24, 0x32	; 50
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	a0 e0       	ldi	r26, 0x00	; 0
    5124:	b0 e0       	ldi	r27, 0x00	; 0
    5126:	86 83       	std	Z+6, r24	; 0x06
    5128:	97 83       	std	Z+7, r25	; 0x07
    512a:	a0 87       	std	Z+8, r26	; 0x08
    512c:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    512e:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    5130:	8d e6       	ldi	r24, 0x6D	; 109
    5132:	99 e2       	ldi	r25, 0x29	; 41
    5134:	94 87       	std	Z+12, r25	; 0x0c
    5136:	83 87       	std	Z+11, r24	; 0x0b

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    5138:	e5 e0       	ldi	r30, 0x05	; 5
    513a:	f8 e1       	ldi	r31, 0x18	; 24
    513c:	8a e0       	ldi	r24, 0x0A	; 10
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	a0 e0       	ldi	r26, 0x00	; 0
    5142:	b0 e0       	ldi	r27, 0x00	; 0
    5144:	86 83       	std	Z+6, r24	; 0x06
    5146:	97 83       	std	Z+7, r25	; 0x07
    5148:	a0 87       	std	Z+8, r26	; 0x08
    514a:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    514c:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    514e:	82 e6       	ldi	r24, 0x62	; 98
    5150:	98 e2       	ldi	r25, 0x28	; 40
    5152:	94 87       	std	Z+12, r25	; 0x0c
    5154:	83 87       	std	Z+11, r24	; 0x0b
    5156:	08 95       	ret

00005158 <nwkTxFrame>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    5158:	cf 93       	push	r28
    515a:	df 93       	push	r29
    515c:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    515e:	fc 01       	movw	r30, r24
    5160:	ea 57       	subi	r30, 0x7A	; 122
    5162:	ff 4f       	sbci	r31, 0xFF	; 255
    5164:	80 81       	ld	r24, Z
    5166:	81 ff       	sbrs	r24, 1
    5168:	03 c0       	rjmp	.+6      	; 0x5170 <nwkTxFrame+0x18>
  {
    frame->state = NWK_TX_STATE_DELAY;
    516a:	92 e1       	ldi	r25, 0x12	; 18
    516c:	98 83       	st	Y, r25
    516e:	02 c0       	rjmp	.+4      	; 0x5174 <nwkTxFrame+0x1c>
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
    5170:	92 e1       	ldi	r25, 0x12	; 18
    5172:	98 83       	st	Y, r25
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    5174:	fe 01       	movw	r30, r28
    5176:	ed 57       	subi	r30, 0x7D	; 125
    5178:	ff 4f       	sbci	r31, 0xFF	; 255
    517a:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    517c:	98 2f       	mov	r25, r24
    517e:	91 70       	andi	r25, 0x01	; 1
    5180:	80 ff       	sbrs	r24, 0
    5182:	05 c0       	rjmp	.+10     	; 0x518e <nwkTxFrame+0x36>
    header->macDstPanId = NWK_BROADCAST_PANID;
    5184:	2f ef       	ldi	r18, 0xFF	; 255
    5186:	3f ef       	ldi	r19, 0xFF	; 255
    5188:	3e 83       	std	Y+6, r19	; 0x06
    518a:	2d 83       	std	Y+5, r18	; 0x05
    518c:	06 c0       	rjmp	.+12     	; 0x519a <nwkTxFrame+0x42>
  else
    header->macDstPanId = nwkIb.panId;
    518e:	20 91 b0 1c 	lds	r18, 0x1CB0	; 0x801cb0 <nwkIb+0x2>
    5192:	30 91 b1 1c 	lds	r19, 0x1CB1	; 0x801cb1 <nwkIb+0x3>
    5196:	3e 83       	std	Y+6, r19	; 0x06
    5198:	2d 83       	std	Y+5, r18	; 0x05

#ifdef NWK_ENABLE_ROUTING
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
    519a:	82 fd       	sbrc	r24, 2
    519c:	05 c0       	rjmp	.+10     	; 0x51a8 <nwkTxFrame+0x50>
    519e:	91 11       	cpse	r25, r1
    51a0:	03 c0       	rjmp	.+6      	; 0x51a8 <nwkTxFrame+0x50>
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
    51a2:	ce 01       	movw	r24, r28
    51a4:	6b dc       	rcall	.-1834   	; 0x4a7c <nwkRoutePrepareTx>
    51a6:	04 c0       	rjmp	.+8      	; 0x51b0 <nwkTxFrame+0x58>
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
    51a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    51aa:	98 89       	ldd	r25, Y+16	; 0x10
    51ac:	98 87       	std	Y+8, r25	; 0x08
    51ae:	8f 83       	std	Y+7, r24	; 0x07

  header->macSrcAddr = nwkIb.addr;
    51b0:	ee ea       	ldi	r30, 0xAE	; 174
    51b2:	fc e1       	ldi	r31, 0x1C	; 28
    51b4:	80 81       	ld	r24, Z
    51b6:	91 81       	ldd	r25, Z+1	; 0x01
    51b8:	9a 87       	std	Y+10, r25	; 0x0a
    51ba:	89 87       	std	Y+9, r24	; 0x09
  header->macSeq = ++nwkIb.macSeqNum;
    51bc:	85 81       	ldd	r24, Z+5	; 0x05
    51be:	8f 5f       	subi	r24, 0xFF	; 255
    51c0:	85 83       	std	Z+5, r24	; 0x05
    51c2:	8c 83       	std	Y+4, r24	; 0x04

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
    51c4:	8f 81       	ldd	r24, Y+7	; 0x07
    51c6:	98 85       	ldd	r25, Y+8	; 0x08
    51c8:	01 96       	adiw	r24, 0x01	; 1
    51ca:	69 f4       	brne	.+26     	; 0x51e6 <nwkTxFrame+0x8e>
  {
    header->macFcf = 0x8841;
    51cc:	81 e4       	ldi	r24, 0x41	; 65
    51ce:	98 e8       	ldi	r25, 0x88	; 136
    51d0:	9b 83       	std	Y+3, r25	; 0x03
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    51d2:	8a 83       	std	Y+2, r24	; 0x02
    51d4:	cd d7       	rcall	.+3994   	; 0x6170 <rand>
    51d6:	87 70       	andi	r24, 0x07	; 7
    51d8:	99 27       	eor	r25, r25
    51da:	01 96       	adiw	r24, 0x01	; 1
    51dc:	cc 57       	subi	r28, 0x7C	; 124
    51de:	df 4f       	sbci	r29, 0xFF	; 255
    51e0:	99 83       	std	Y+1, r25	; 0x01
    51e2:	88 83       	st	Y, r24
    51e4:	08 c0       	rjmp	.+16     	; 0x51f6 <nwkTxFrame+0x9e>
  }
  else
  {
    header->macFcf = 0x8861;
    51e6:	81 e6       	ldi	r24, 0x61	; 97
    51e8:	98 e8       	ldi	r25, 0x88	; 136
    51ea:	9b 83       	std	Y+3, r25	; 0x03
    51ec:	8a 83       	std	Y+2, r24	; 0x02
    frame->tx.timeout = 0;
    51ee:	cc 57       	subi	r28, 0x7C	; 124
    51f0:	df 4f       	sbci	r29, 0xFF	; 255
    51f2:	19 82       	std	Y+1, r1	; 0x01
    51f4:	18 82       	st	Y, r1
  }
}
    51f6:	df 91       	pop	r29
    51f8:	cf 91       	pop	r28
    51fa:	08 95       	ret

000051fc <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    51fc:	0f 93       	push	r16
    51fe:	1f 93       	push	r17
    5200:	cf 93       	push	r28
    5202:	df 93       	push	r29
    5204:	8c 01       	movw	r16, r24
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    5206:	60 da       	rcall	.-2880   	; 0x46c8 <nwkFrameAlloc>
    5208:	ec 01       	movw	r28, r24
    520a:	89 2b       	or	r24, r25
    520c:	b1 f1       	breq	.+108    	; 0x527a <nwkTxBroadcastFrame+0x7e>
    return;

  newFrame->state = NWK_TX_STATE_DELAY;
    520e:	82 e1       	ldi	r24, 0x12	; 18
    5210:	88 83       	st	Y, r24
  newFrame->size = frame->size;
    5212:	f8 01       	movw	r30, r16
    5214:	81 81       	ldd	r24, Z+1	; 0x01
    5216:	89 83       	std	Y+1, r24	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    5218:	fe 01       	movw	r30, r28
    521a:	ed 57       	subi	r30, 0x7D	; 125
    521c:	ff 4f       	sbci	r31, 0xFF	; 255
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    521e:	10 82       	st	Z, r1
    5220:	a7 d7       	rcall	.+3918   	; 0x6170 <rand>
    5222:	87 70       	andi	r24, 0x07	; 7
    5224:	99 27       	eor	r25, r25
    5226:	01 96       	adiw	r24, 0x01	; 1
    5228:	fe 01       	movw	r30, r28
    522a:	ec 57       	subi	r30, 0x7C	; 124
    522c:	ff 4f       	sbci	r31, 0xFF	; 255
    522e:	91 83       	std	Z+1, r25	; 0x01
    5230:	80 83       	st	Z, r24
  newFrame->tx.confirm = NULL;
    5232:	33 96       	adiw	r30, 0x03	; 3
    5234:	11 82       	std	Z+1, r1	; 0x01
    5236:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    5238:	f8 01       	movw	r30, r16
    523a:	41 81       	ldd	r20, Z+1	; 0x01
    523c:	b8 01       	movw	r22, r16
    523e:	6e 5f       	subi	r22, 0xFE	; 254
    5240:	7f 4f       	sbci	r23, 0xFF	; 255
    5242:	50 e0       	ldi	r21, 0x00	; 0
    5244:	ce 01       	movw	r24, r28
    5246:	02 96       	adiw	r24, 0x02	; 2
    5248:	0e 94 a9 31 	call	0x6352	; 0x6352 <memcpy>

  newFrame->header.macFcf = 0x8841;
    524c:	81 e4       	ldi	r24, 0x41	; 65
    524e:	98 e8       	ldi	r25, 0x88	; 136
    5250:	9b 83       	std	Y+3, r25	; 0x03
    5252:	8a 83       	std	Y+2, r24	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    5254:	8f ef       	ldi	r24, 0xFF	; 255
    5256:	9f ef       	ldi	r25, 0xFF	; 255
    5258:	98 87       	std	Y+8, r25	; 0x08
    525a:	8f 83       	std	Y+7, r24	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    525c:	f8 01       	movw	r30, r16
    525e:	85 81       	ldd	r24, Z+5	; 0x05
    5260:	96 81       	ldd	r25, Z+6	; 0x06
    5262:	9e 83       	std	Y+6, r25	; 0x06
    5264:	8d 83       	std	Y+5, r24	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    5266:	ee ea       	ldi	r30, 0xAE	; 174
    5268:	fc e1       	ldi	r31, 0x1C	; 28
    526a:	80 81       	ld	r24, Z
    526c:	91 81       	ldd	r25, Z+1	; 0x01
    526e:	9a 87       	std	Y+10, r25	; 0x0a
    5270:	89 87       	std	Y+9, r24	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    5272:	85 81       	ldd	r24, Z+5	; 0x05
    5274:	8f 5f       	subi	r24, 0xFF	; 255
    5276:	85 83       	std	Z+5, r24	; 0x05
    5278:	8c 83       	std	Y+4, r24	; 0x04
}
    527a:	df 91       	pop	r29
    527c:	cf 91       	pop	r28
    527e:	1f 91       	pop	r17
    5280:	0f 91       	pop	r16
    5282:	08 95       	ret

00005284 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    5284:	cf 93       	push	r28
    5286:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    5288:	fc 01       	movw	r30, r24
    528a:	c7 81       	ldd	r28, Z+7	; 0x07
    528c:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    528e:	81 85       	ldd	r24, Z+9	; 0x09
    5290:	83 30       	cpi	r24, 0x03	; 3
    5292:	c1 f4       	brne	.+48     	; 0x52c4 <nwkTxAckReceived+0x40>
    5294:	80 e0       	ldi	r24, 0x00	; 0
    5296:	90 e0       	ldi	r25, 0x00	; 0
    5298:	10 c0       	rjmp	.+32     	; 0x52ba <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    529a:	fc 01       	movw	r30, r24
    529c:	20 81       	ld	r18, Z
    529e:	26 31       	cpi	r18, 0x16	; 22
    52a0:	61 f4       	brne	.+24     	; 0x52ba <nwkTxAckReceived+0x36>
    52a2:	34 85       	ldd	r19, Z+12	; 0x0c
    52a4:	29 81       	ldd	r18, Y+1	; 0x01
    52a6:	32 13       	cpse	r19, r18
    52a8:	08 c0       	rjmp	.+16     	; 0x52ba <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    52aa:	27 e1       	ldi	r18, 0x17	; 23
    52ac:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    52ae:	2a 81       	ldd	r18, Y+2	; 0x02
    52b0:	ea 57       	subi	r30, 0x7A	; 122
    52b2:	ff 4f       	sbci	r31, 0xFF	; 255
    52b4:	20 83       	st	Z, r18
      return true;
    52b6:	81 e0       	ldi	r24, 0x01	; 1
    52b8:	06 c0       	rjmp	.+12     	; 0x52c6 <nwkTxAckReceived+0x42>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    52ba:	41 da       	rcall	.-2942   	; 0x473e <nwkFrameNext>
    52bc:	00 97       	sbiw	r24, 0x00	; 0
    52be:	69 f7       	brne	.-38     	; 0x529a <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    52c0:	80 e0       	ldi	r24, 0x00	; 0
    52c2:	01 c0       	rjmp	.+2      	; 0x52c6 <nwkTxAckReceived+0x42>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    52c4:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    52c6:	df 91       	pop	r29
    52c8:	cf 91       	pop	r28
    52ca:	08 95       	ret

000052cc <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    52cc:	27 e1       	ldi	r18, 0x17	; 23
    52ce:	fc 01       	movw	r30, r24
    52d0:	20 83       	st	Z, r18
  frame->tx.status = status;
    52d2:	ed 57       	subi	r30, 0x7D	; 125
    52d4:	ff 4f       	sbci	r31, 0xFF	; 255
    52d6:	60 83       	st	Z, r22
    52d8:	08 95       	ret

000052da <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    52da:	ef 92       	push	r14
    52dc:	ff 92       	push	r15
    52de:	1f 93       	push	r17
    52e0:	cf 93       	push	r28
    52e2:	df 93       	push	r29
    52e4:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    52e6:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    52e8:	c0 e0       	ldi	r28, 0x00	; 0
    52ea:	d0 e0       	ldi	r29, 0x00	; 0
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    52ec:	13 c0       	rjmp	.+38     	; 0x5314 <nwkTxAckWaitTimerHandler+0x3a>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    52ee:	88 81       	ld	r24, Y
    52f0:	86 31       	cpi	r24, 0x16	; 22
    52f2:	81 f4       	brne	.+32     	; 0x5314 <nwkTxAckWaitTimerHandler+0x3a>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    52f4:	fe 01       	movw	r30, r28
    52f6:	ec 57       	subi	r30, 0x7C	; 124
    52f8:	ff 4f       	sbci	r31, 0xFF	; 255
    52fa:	80 81       	ld	r24, Z
    52fc:	91 81       	ldd	r25, Z+1	; 0x01
    52fe:	01 97       	sbiw	r24, 0x01	; 1
    5300:	91 83       	std	Z+1, r25	; 0x01
    5302:	80 83       	st	Z, r24
    5304:	89 2b       	or	r24, r25
    5306:	29 f4       	brne	.+10     	; 0x5312 <nwkTxAckWaitTimerHandler+0x38>
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    5308:	60 e1       	ldi	r22, 0x10	; 16
    530a:	ce 01       	movw	r24, r28
    530c:	df df       	rcall	.-66     	; 0x52cc <nwkTxConfirm>

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    530e:	11 e0       	ldi	r17, 0x01	; 1
    5310:	01 c0       	rjmp	.+2      	; 0x5314 <nwkTxAckWaitTimerHandler+0x3a>
    5312:	11 e0       	ldi	r17, 0x01	; 1
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    5314:	ce 01       	movw	r24, r28
    5316:	13 da       	rcall	.-3034   	; 0x473e <nwkFrameNext>
    5318:	ec 01       	movw	r28, r24
    531a:	89 2b       	or	r24, r25
    531c:	41 f7       	brne	.-48     	; 0x52ee <nwkTxAckWaitTimerHandler+0x14>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    531e:	11 23       	and	r17, r17
    SYS_TimerStart(timer);
    5320:	11 f0       	breq	.+4      	; 0x5326 <nwkTxAckWaitTimerHandler+0x4c>
    5322:	c7 01       	movw	r24, r14
    5324:	6b d2       	rcall	.+1238   	; 0x57fc <SYS_TimerStart>
}
    5326:	df 91       	pop	r29
    5328:	cf 91       	pop	r28
    532a:	1f 91       	pop	r17
    532c:	ff 90       	pop	r15
    532e:	ef 90       	pop	r14
    5330:	08 95       	ret

00005332 <PHY_DataConf>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
    5332:	cf 93       	push	r28
    5334:	df 93       	push	r29
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    5336:	c0 91 1f 18 	lds	r28, 0x181F	; 0x80181f <nwkTxPhyActiveFrame>
    533a:	d0 91 20 18 	lds	r29, 0x1820	; 0x801820 <nwkTxPhyActiveFrame+0x1>
    533e:	b4 de       	rcall	.-664    	; 0x50a8 <nwkTxConvertPhyStatus>
    5340:	fe 01       	movw	r30, r28
    5342:	ed 57       	subi	r30, 0x7D	; 125
    5344:	ff 4f       	sbci	r31, 0xFF	; 255
    5346:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    5348:	85 e1       	ldi	r24, 0x15	; 21
    534a:	88 83       	st	Y, r24
  nwkTxPhyActiveFrame = NULL;
    534c:	10 92 20 18 	sts	0x1820, r1	; 0x801820 <nwkTxPhyActiveFrame+0x1>
    5350:	10 92 1f 18 	sts	0x181F, r1	; 0x80181f <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    5354:	ee ea       	ldi	r30, 0xAE	; 174
    5356:	fc e1       	ldi	r31, 0x1C	; 28
    5358:	86 a1       	ldd	r24, Z+38	; 0x26
    535a:	97 a1       	ldd	r25, Z+39	; 0x27
    535c:	01 97       	sbiw	r24, 0x01	; 1
    535e:	97 a3       	std	Z+39, r25	; 0x27
    5360:	86 a3       	std	Z+38, r24	; 0x26
}
    5362:	df 91       	pop	r29
    5364:	cf 91       	pop	r28
    5366:	08 95       	ret

00005368 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    5368:	cf 93       	push	r28
    536a:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    536c:	c0 e0       	ldi	r28, 0x00	; 0
    536e:	d0 e0       	ldi	r29, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
    5370:	68 c0       	rjmp	.+208    	; 0x5442 <nwkTxTaskHandler+0xda>
  {
    switch (frame->state)
    5372:	88 81       	ld	r24, Y
    5374:	83 31       	cpi	r24, 0x13	; 19
    5376:	d1 f0       	breq	.+52     	; 0x53ac <nwkTxTaskHandler+0x44>
    5378:	18 f4       	brcc	.+6      	; 0x5380 <nwkTxTaskHandler+0x18>
    537a:	82 31       	cpi	r24, 0x12	; 18
    537c:	39 f0       	breq	.+14     	; 0x538c <nwkTxTaskHandler+0x24>
    537e:	61 c0       	rjmp	.+194    	; 0x5442 <nwkTxTaskHandler+0xda>
    5380:	85 31       	cpi	r24, 0x15	; 21
    5382:	69 f1       	breq	.+90     	; 0x53de <nwkTxTaskHandler+0x76>
    5384:	87 31       	cpi	r24, 0x17	; 23
    5386:	09 f4       	brne	.+2      	; 0x538a <nwkTxTaskHandler+0x22>
    5388:	4d c0       	rjmp	.+154    	; 0x5424 <nwkTxTaskHandler+0xbc>
    538a:	5b c0       	rjmp	.+182    	; 0x5442 <nwkTxTaskHandler+0xda>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    538c:	fe 01       	movw	r30, r28
    538e:	ec 57       	subi	r30, 0x7C	; 124
    5390:	ff 4f       	sbci	r31, 0xFF	; 255
    5392:	80 81       	ld	r24, Z
    5394:	91 81       	ldd	r25, Z+1	; 0x01
    5396:	89 2b       	or	r24, r25
    5398:	31 f0       	breq	.+12     	; 0x53a6 <nwkTxTaskHandler+0x3e>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    539a:	81 e1       	ldi	r24, 0x11	; 17
    539c:	88 83       	st	Y, r24
          SYS_TimerStart(&nwkTxDelayTimer);
    539e:	85 e0       	ldi	r24, 0x05	; 5
    53a0:	98 e1       	ldi	r25, 0x18	; 24
    53a2:	2c d2       	rcall	.+1112   	; 0x57fc <SYS_TimerStart>
    53a4:	4e c0       	rjmp	.+156    	; 0x5442 <nwkTxTaskHandler+0xda>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    53a6:	83 e1       	ldi	r24, 0x13	; 19
    53a8:	88 83       	st	Y, r24
    53aa:	4b c0       	rjmp	.+150    	; 0x5442 <nwkTxTaskHandler+0xda>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    53ac:	80 91 1f 18 	lds	r24, 0x181F	; 0x80181f <nwkTxPhyActiveFrame>
    53b0:	90 91 20 18 	lds	r25, 0x1820	; 0x801820 <nwkTxPhyActiveFrame+0x1>
    53b4:	89 2b       	or	r24, r25
    53b6:	09 f0       	breq	.+2      	; 0x53ba <nwkTxTaskHandler+0x52>
    53b8:	44 c0       	rjmp	.+136    	; 0x5442 <nwkTxTaskHandler+0xda>
        {
          nwkTxPhyActiveFrame = frame;
    53ba:	d0 93 20 18 	sts	0x1820, r29	; 0x801820 <nwkTxPhyActiveFrame+0x1>
    53be:	c0 93 1f 18 	sts	0x181F, r28	; 0x80181f <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    53c2:	84 e1       	ldi	r24, 0x14	; 20
    53c4:	88 83       	st	Y, r24
          PHY_DataReq(frame->data, frame->size);
    53c6:	69 81       	ldd	r22, Y+1	; 0x01
    53c8:	ce 01       	movw	r24, r28
    53ca:	02 96       	adiw	r24, 0x02	; 2
    53cc:	c5 d0       	rcall	.+394    	; 0x5558 <PHY_DataReq>
          nwkIb.lock++;
    53ce:	ee ea       	ldi	r30, 0xAE	; 174
    53d0:	fc e1       	ldi	r31, 0x1C	; 28
    53d2:	86 a1       	ldd	r24, Z+38	; 0x26
    53d4:	97 a1       	ldd	r25, Z+39	; 0x27
    53d6:	01 96       	adiw	r24, 0x01	; 1
    53d8:	97 a3       	std	Z+39, r25	; 0x27
    53da:	86 a3       	std	Z+38, r24	; 0x26
    53dc:	32 c0       	rjmp	.+100    	; 0x5442 <nwkTxTaskHandler+0xda>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    53de:	fe 01       	movw	r30, r28
    53e0:	ed 57       	subi	r30, 0x7D	; 125
    53e2:	ff 4f       	sbci	r31, 0xFF	; 255
    53e4:	80 81       	ld	r24, Z
    53e6:	81 11       	cpse	r24, r1
    53e8:	1a c0       	rjmp	.+52     	; 0x541e <nwkTxTaskHandler+0xb6>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    53ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    53ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    53ee:	80 91 ae 1c 	lds	r24, 0x1CAE	; 0x801cae <nwkIb>
    53f2:	90 91 af 1c 	lds	r25, 0x1CAF	; 0x801caf <nwkIb+0x1>
    53f6:	28 17       	cp	r18, r24
    53f8:	39 07       	cpc	r19, r25
    53fa:	71 f4       	brne	.+28     	; 0x5418 <nwkTxTaskHandler+0xb0>
    53fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    53fe:	80 ff       	sbrs	r24, 0
    5400:	0b c0       	rjmp	.+22     	; 0x5418 <nwkTxTaskHandler+0xb0>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    5402:	86 e1       	ldi	r24, 0x16	; 22
    5404:	88 83       	st	Y, r24
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    5406:	89 e2       	ldi	r24, 0x29	; 41
    5408:	90 e0       	ldi	r25, 0x00	; 0
    540a:	31 96       	adiw	r30, 0x01	; 1
    540c:	91 83       	std	Z+1, r25	; 0x01
    540e:	80 83       	st	Z, r24
            SYS_TimerStart(&nwkTxAckWaitTimer);
    5410:	82 e1       	ldi	r24, 0x12	; 18
    5412:	98 e1       	ldi	r25, 0x18	; 24
    5414:	f3 d1       	rcall	.+998    	; 0x57fc <SYS_TimerStart>
    5416:	15 c0       	rjmp	.+42     	; 0x5442 <nwkTxTaskHandler+0xda>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    5418:	87 e1       	ldi	r24, 0x17	; 23
    541a:	88 83       	st	Y, r24
    541c:	12 c0       	rjmp	.+36     	; 0x5442 <nwkTxTaskHandler+0xda>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    541e:	87 e1       	ldi	r24, 0x17	; 23
    5420:	88 83       	st	Y, r24
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    5422:	0f c0       	rjmp	.+30     	; 0x5442 <nwkTxTaskHandler+0xda>
    5424:	ce 01       	movw	r24, r28
    5426:	ee da       	rcall	.-2596   	; 0x4a04 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    5428:	fe 01       	movw	r30, r28
    542a:	e9 57       	subi	r30, 0x79	; 121
    542c:	ff 4f       	sbci	r31, 0xFF	; 255
    542e:	01 90       	ld	r0, Z+
    5430:	f0 81       	ld	r31, Z
    5432:	e0 2d       	mov	r30, r0
    5434:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    5436:	19 f4       	brne	.+6      	; 0x543e <nwkTxTaskHandler+0xd6>
    5438:	ce 01       	movw	r24, r28
    543a:	77 d9       	rcall	.-3346   	; 0x472a <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    543c:	02 c0       	rjmp	.+4      	; 0x5442 <nwkTxTaskHandler+0xda>
    543e:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    5440:	19 95       	eicall
    5442:	ce 01       	movw	r24, r28
    5444:	7c d9       	rcall	.-3336   	; 0x473e <nwkFrameNext>
    5446:	ec 01       	movw	r28, r24
    5448:	89 2b       	or	r24, r25
    544a:	09 f0       	breq	.+2      	; 0x544e <nwkTxTaskHandler+0xe6>
    544c:	92 cf       	rjmp	.-220    	; 0x5372 <nwkTxTaskHandler+0xa>

      default:
        break;
    };
  }
}
    544e:	df 91       	pop	r29
    5450:	cf 91       	pop	r28
    5452:	08 95       	ret

00005454 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    5454:	80 91 21 18 	lds	r24, 0x1821	; 0x801821 <phyBand>
    5458:	98 2f       	mov	r25, r24
    545a:	9f 70       	andi	r25, 0x0F	; 15
    545c:	e4 e5       	ldi	r30, 0x54	; 84
    545e:	f1 e0       	ldi	r31, 0x01	; 1
    5460:	80 81       	ld	r24, Z
    5462:	80 7f       	andi	r24, 0xF0	; 240
    5464:	89 2b       	or	r24, r25
    5466:	80 83       	st	Z, r24
    5468:	80 91 21 18 	lds	r24, 0x1821	; 0x801821 <phyBand>
    546c:	88 23       	and	r24, r24
    546e:	29 f0       	breq	.+10     	; 0x547a <phySetChannel+0x26>
    5470:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <phyChannel>
    5474:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    5478:	08 95       	ret
    547a:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <phyChannel>
    547e:	98 2f       	mov	r25, r24
    5480:	9f 71       	andi	r25, 0x1F	; 31
    5482:	e8 e4       	ldi	r30, 0x48	; 72
    5484:	f1 e0       	ldi	r31, 0x01	; 1
    5486:	80 81       	ld	r24, Z
    5488:	80 7e       	andi	r24, 0xE0	; 224
    548a:	89 2b       	or	r24, r25
    548c:	80 83       	st	Z, r24
    548e:	08 95       	ret

00005490 <phyTrxSetState>:
    5490:	93 e0       	ldi	r25, 0x03	; 3
    5492:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    5496:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    549a:	9f 71       	andi	r25, 0x1F	; 31
    549c:	98 30       	cpi	r25, 0x08	; 8
    549e:	d9 f7       	brne	.-10     	; 0x5496 <phyTrxSetState+0x6>
    54a0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    54a4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    54a8:	9f 71       	andi	r25, 0x1F	; 31
    54aa:	89 13       	cpse	r24, r25
    54ac:	fb cf       	rjmp	.-10     	; 0x54a4 <phyTrxSetState+0x14>
    54ae:	08 95       	ret

000054b0 <phySetRxState>:
    54b0:	88 e0       	ldi	r24, 0x08	; 8
    54b2:	ee df       	rcall	.-36     	; 0x5490 <phyTrxSetState>
    54b4:	8f ef       	ldi	r24, 0xFF	; 255
    54b6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    54ba:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <phyRxState>
    54be:	88 23       	and	r24, r24
    54c0:	11 f0       	breq	.+4      	; 0x54c6 <phySetRxState+0x16>
    54c2:	86 e1       	ldi	r24, 0x16	; 22
    54c4:	e5 cf       	rjmp	.-54     	; 0x5490 <phyTrxSetState>
    54c6:	08 95       	ret

000054c8 <PHY_Init>:
    54c8:	e9 e3       	ldi	r30, 0x39	; 57
    54ca:	f1 e0       	ldi	r31, 0x01	; 1
    54cc:	80 81       	ld	r24, Z
    54ce:	81 60       	ori	r24, 0x01	; 1
    54d0:	80 83       	st	Z, r24
    54d2:	10 92 23 18 	sts	0x1823, r1	; 0x801823 <phyRxState>
    54d6:	10 92 21 18 	sts	0x1821, r1	; 0x801821 <phyBand>
    54da:	81 e0       	ldi	r24, 0x01	; 1
    54dc:	80 93 a4 18 	sts	0x18A4, r24	; 0x8018a4 <phyState>
    54e0:	88 e0       	ldi	r24, 0x08	; 8
    54e2:	d6 df       	rcall	.-84     	; 0x5490 <phyTrxSetState>
    54e4:	8b ee       	ldi	r24, 0xEB	; 235
    54e6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    54ea:	ec e4       	ldi	r30, 0x4C	; 76
    54ec:	f1 e0       	ldi	r31, 0x01	; 1
    54ee:	80 81       	ld	r24, Z
    54f0:	80 68       	ori	r24, 0x80	; 128
    54f2:	80 83       	st	Z, r24
    54f4:	08 95       	ret

000054f6 <PHY_SetRxState>:
    54f6:	80 93 23 18 	sts	0x1823, r24	; 0x801823 <phyRxState>
    54fa:	da cf       	rjmp	.-76     	; 0x54b0 <phySetRxState>
    54fc:	08 95       	ret

000054fe <PHY_SetChannel>:
    54fe:	80 93 22 18 	sts	0x1822, r24	; 0x801822 <phyChannel>
    5502:	a8 cf       	rjmp	.-176    	; 0x5454 <phySetChannel>
    5504:	08 95       	ret

00005506 <PHY_SetPanId>:
    5506:	cf 93       	push	r28
    5508:	df 93       	push	r29
    550a:	1f 92       	push	r1
    550c:	1f 92       	push	r1
    550e:	cd b7       	in	r28, 0x3d	; 61
    5510:	de b7       	in	r29, 0x3e	; 62
    5512:	9a 83       	std	Y+2, r25	; 0x02
    5514:	89 83       	std	Y+1, r24	; 0x01
    5516:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    551a:	8a 81       	ldd	r24, Y+2	; 0x02
    551c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    5520:	0f 90       	pop	r0
    5522:	0f 90       	pop	r0
    5524:	df 91       	pop	r29
    5526:	cf 91       	pop	r28
    5528:	08 95       	ret

0000552a <PHY_SetShortAddr>:
    552a:	cf 93       	push	r28
    552c:	df 93       	push	r29
    552e:	1f 92       	push	r1
    5530:	1f 92       	push	r1
    5532:	cd b7       	in	r28, 0x3d	; 61
    5534:	de b7       	in	r29, 0x3e	; 62
    5536:	9a 83       	std	Y+2, r25	; 0x02
    5538:	89 83       	std	Y+1, r24	; 0x01
    553a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    553e:	8a 81       	ldd	r24, Y+2	; 0x02
    5540:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    5544:	99 81       	ldd	r25, Y+1	; 0x01
    5546:	8a 81       	ldd	r24, Y+2	; 0x02
    5548:	89 0f       	add	r24, r25
    554a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    554e:	0f 90       	pop	r0
    5550:	0f 90       	pop	r0
    5552:	df 91       	pop	r29
    5554:	cf 91       	pop	r28
    5556:	08 95       	ret

00005558 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    5558:	0f 93       	push	r16
    555a:	1f 93       	push	r17
    555c:	cf 93       	push	r28
    555e:	8c 01       	movw	r16, r24
    5560:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    5562:	89 e1       	ldi	r24, 0x19	; 25
    5564:	95 df       	rcall	.-214    	; 0x5490 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    5566:	8f ef       	ldi	r24, 0xFF	; 255
    5568:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    556c:	82 e0       	ldi	r24, 0x02	; 2
    556e:	8c 0f       	add	r24, r28
    5570:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    5574:	20 e0       	ldi	r18, 0x00	; 0
    5576:	0b c0       	rjmp	.+22     	; 0x558e <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];
    5578:	82 2f       	mov	r24, r18
    557a:	90 e0       	ldi	r25, 0x00	; 0
    557c:	fc 01       	movw	r30, r24
    557e:	ef 57       	subi	r30, 0x7F	; 127
    5580:	fe 4f       	sbci	r31, 0xFE	; 254
    5582:	d8 01       	movw	r26, r16
    5584:	a8 0f       	add	r26, r24
    5586:	b9 1f       	adc	r27, r25
    5588:	8c 91       	ld	r24, X
    558a:	80 83       	st	Z, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    558c:	2f 5f       	subi	r18, 0xFF	; 255
    558e:	2c 17       	cp	r18, r28
    5590:	98 f3       	brcs	.-26     	; 0x5578 <PHY_DataReq+0x20>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    5592:	83 e0       	ldi	r24, 0x03	; 3
    5594:	80 93 a4 18 	sts	0x18A4, r24	; 0x8018a4 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    5598:	82 e0       	ldi	r24, 0x02	; 2
    559a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    559e:	cf 91       	pop	r28
    55a0:	1f 91       	pop	r17
    55a2:	0f 91       	pop	r16
    55a4:	08 95       	ret

000055a6 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    55a6:	1f 93       	push	r17
    55a8:	cf 93       	push	r28
    55aa:	df 93       	push	r29
    55ac:	00 d0       	rcall	.+0      	; 0x55ae <PHY_TaskHandler+0x8>
    55ae:	1f 92       	push	r1
    55b0:	1f 92       	push	r1
    55b2:	cd b7       	in	r28, 0x3d	; 61
    55b4:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    55b6:	80 91 a4 18 	lds	r24, 0x18A4	; 0x8018a4 <phyState>
    55ba:	82 30       	cpi	r24, 0x02	; 2
    55bc:	09 f4       	brne	.+2      	; 0x55c0 <PHY_TaskHandler+0x1a>
    55be:	63 c0       	rjmp	.+198    	; 0x5686 <PHY_TaskHandler+0xe0>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    55c0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    55c4:	83 ff       	sbrs	r24, 3
    55c6:	3c c0       	rjmp	.+120    	; 0x5640 <PHY_TaskHandler+0x9a>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    55c8:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    55cc:	20 e0       	ldi	r18, 0x00	; 0
    55ce:	09 c0       	rjmp	.+18     	; 0x55e2 <PHY_TaskHandler+0x3c>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    55d0:	fc 01       	movw	r30, r24
    55d2:	e0 58       	subi	r30, 0x80	; 128
    55d4:	fe 4f       	sbci	r31, 0xFE	; 254
    55d6:	30 81       	ld	r19, Z
    55d8:	fc 01       	movw	r30, r24
    55da:	ec 5d       	subi	r30, 0xDC	; 220
    55dc:	f7 4e       	sbci	r31, 0xE7	; 231
    55de:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    55e0:	2f 5f       	subi	r18, 0xFF	; 255
    55e2:	82 2f       	mov	r24, r18
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	4a 2f       	mov	r20, r26
    55e8:	50 e0       	ldi	r21, 0x00	; 0
    55ea:	ba 01       	movw	r22, r20
    55ec:	6f 5f       	subi	r22, 0xFF	; 255
    55ee:	7f 4f       	sbci	r23, 0xFF	; 255
    55f0:	86 17       	cp	r24, r22
    55f2:	97 07       	cpc	r25, r23
    55f4:	6c f3       	brlt	.-38     	; 0x55d0 <PHY_TaskHandler+0x2a>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    55f6:	84 e2       	ldi	r24, 0x24	; 36
    55f8:	98 e1       	ldi	r25, 0x18	; 24
    55fa:	9a 83       	std	Y+2, r25	; 0x02
    55fc:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    55fe:	a2 50       	subi	r26, 0x02	; 2
    5600:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    5602:	fa 01       	movw	r30, r20
    5604:	ec 5d       	subi	r30, 0xDC	; 220
    5606:	f7 4e       	sbci	r31, 0xE7	; 231
    5608:	80 81       	ld	r24, Z
    560a:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    560c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    5610:	8a 55       	subi	r24, 0x5A	; 90
    5612:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    5614:	ce 01       	movw	r24, r28
    5616:	01 96       	adiw	r24, 0x01	; 1
    5618:	f6 dc       	rcall	.-1556   	; 0x5006 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    561a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    561e:	8f 71       	andi	r24, 0x1F	; 31
    5620:	86 31       	cpi	r24, 0x16	; 22
    5622:	d9 f7       	brne	.-10     	; 0x561a <PHY_TaskHandler+0x74>

    IRQ_STATUS_REG_s.rxEnd = 1;
    5624:	ef e4       	ldi	r30, 0x4F	; 79
    5626:	f1 e0       	ldi	r31, 0x01	; 1
    5628:	80 81       	ld	r24, Z
    562a:	88 60       	ori	r24, 0x08	; 8
    562c:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    562e:	ec e4       	ldi	r30, 0x4C	; 76
    5630:	f1 e0       	ldi	r31, 0x01	; 1
    5632:	80 81       	ld	r24, Z
    5634:	8f 77       	andi	r24, 0x7F	; 127
    5636:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    5638:	80 81       	ld	r24, Z
    563a:	80 68       	ori	r24, 0x80	; 128
    563c:	80 83       	st	Z, r24
    563e:	23 c0       	rjmp	.+70     	; 0x5686 <PHY_TaskHandler+0xe0>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    5640:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    5644:	86 ff       	sbrs	r24, 6
    5646:	1f c0       	rjmp	.+62     	; 0x5686 <PHY_TaskHandler+0xe0>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    5648:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    564c:	8f 71       	andi	r24, 0x1F	; 31
    564e:	89 31       	cpi	r24, 0x19	; 25
    5650:	a9 f4       	brne	.+42     	; 0x567c <PHY_TaskHandler+0xd6>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    5652:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    5656:	12 95       	swap	r17
    5658:	16 95       	lsr	r17
    565a:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    565c:	49 f0       	breq	.+18     	; 0x5670 <PHY_TaskHandler+0xca>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    565e:	13 30       	cpi	r17, 0x03	; 3
    5660:	21 f0       	breq	.+8      	; 0x566a <PHY_TaskHandler+0xc4>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    5662:	15 30       	cpi	r17, 0x05	; 5
    5664:	21 f4       	brne	.+8      	; 0x566e <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_NO_ACK;
    5666:	12 e0       	ldi	r17, 0x02	; 2
    5668:	03 c0       	rjmp	.+6      	; 0x5670 <PHY_TaskHandler+0xca>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    566a:	11 e0       	ldi	r17, 0x01	; 1
    566c:	01 c0       	rjmp	.+2      	; 0x5670 <PHY_TaskHandler+0xca>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    566e:	13 e0       	ldi	r17, 0x03	; 3
    5670:	1f df       	rcall	.-450    	; 0x54b0 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    5672:	81 e0       	ldi	r24, 0x01	; 1
    5674:	80 93 a4 18 	sts	0x18A4, r24	; 0x8018a4 <phyState>

      PHY_DataConf(status);
    5678:	81 2f       	mov	r24, r17
    567a:	5b de       	rcall	.-842    	; 0x5332 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    567c:	ef e4       	ldi	r30, 0x4F	; 79
    567e:	f1 e0       	ldi	r31, 0x01	; 1
    5680:	80 81       	ld	r24, Z
    5682:	80 64       	ori	r24, 0x40	; 64
    5684:	80 83       	st	Z, r24
  }
}
    5686:	0f 90       	pop	r0
    5688:	0f 90       	pop	r0
    568a:	0f 90       	pop	r0
    568c:	0f 90       	pop	r0
    568e:	0f 90       	pop	r0
    5690:	df 91       	pop	r29
    5692:	cf 91       	pop	r28
    5694:	1f 91       	pop	r17
    5696:	08 95       	ret

00005698 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    5698:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <HAL_Init>
  SYS_TimerInit();
    569c:	60 d0       	rcall	.+192    	; 0x575e <SYS_TimerInit>
  PHY_Init();
    569e:	14 df       	rcall	.-472    	; 0x54c8 <PHY_Init>
    56a0:	0c 94 38 22 	jmp	0x4470	; 0x4470 <NWK_Init>
  NWK_Init();
    56a4:	08 95       	ret

000056a6 <SYS_TaskHandler>:
    56a6:	7f df       	rcall	.-258    	; 0x55a6 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    56a8:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    56ac:	b2 c0       	rjmp	.+356    	; 0x5812 <SYS_TimerTaskHandler>
    56ae:	08 95       	ret

000056b0 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    56b0:	0f 93       	push	r16
    56b2:	1f 93       	push	r17
    56b4:	cf 93       	push	r28
    56b6:	df 93       	push	r29
    56b8:	ec 01       	movw	r28, r24
  if (timers)
    56ba:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <timers>
    56be:	90 91 a6 18 	lds	r25, 0x18A6	; 0x8018a6 <timers+0x1>
    56c2:	00 97       	sbiw	r24, 0x00	; 0
    56c4:	c9 f1       	breq	.+114    	; 0x5738 <placeTimer+0x88>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    56c6:	4e 81       	ldd	r20, Y+6	; 0x06
    56c8:	5f 81       	ldd	r21, Y+7	; 0x07
    56ca:	68 85       	ldd	r22, Y+8	; 0x08
    56cc:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    56ce:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    56d0:	a0 e0       	ldi	r26, 0x00	; 0
    56d2:	b0 e0       	ldi	r27, 0x00	; 0
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    56d4:	1a c0       	rjmp	.+52     	; 0x570a <placeTimer+0x5a>
    {
      if (timeout < t->timeout)
    56d6:	02 81       	ldd	r16, Z+2	; 0x02
    56d8:	13 81       	ldd	r17, Z+3	; 0x03
    56da:	24 81       	ldd	r18, Z+4	; 0x04
    56dc:	35 81       	ldd	r19, Z+5	; 0x05
    56de:	40 17       	cp	r20, r16
    56e0:	51 07       	cpc	r21, r17
    56e2:	62 07       	cpc	r22, r18
    56e4:	73 07       	cpc	r23, r19
    56e6:	48 f4       	brcc	.+18     	; 0x56fa <placeTimer+0x4a>
      {
         t->timeout -= timeout;
    56e8:	04 1b       	sub	r16, r20
    56ea:	15 0b       	sbc	r17, r21
    56ec:	26 0b       	sbc	r18, r22
    56ee:	37 0b       	sbc	r19, r23
    56f0:	02 83       	std	Z+2, r16	; 0x02
    56f2:	13 83       	std	Z+3, r17	; 0x03
    56f4:	24 83       	std	Z+4, r18	; 0x04
    56f6:	35 83       	std	Z+5, r19	; 0x05
         break;
    56f8:	0a c0       	rjmp	.+20     	; 0x570e <placeTimer+0x5e>
      }
      else
        timeout -= t->timeout;
    56fa:	40 1b       	sub	r20, r16
    56fc:	51 0b       	sbc	r21, r17
    56fe:	62 0b       	sbc	r22, r18
    5700:	73 0b       	sbc	r23, r19

      prev = t;
    5702:	df 01       	movw	r26, r30
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    5704:	01 90       	ld	r0, Z+
    5706:	f0 81       	ld	r31, Z
    5708:	e0 2d       	mov	r30, r0
    570a:	30 97       	sbiw	r30, 0x00	; 0
    570c:	21 f7       	brne	.-56     	; 0x56d6 <placeTimer+0x26>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    570e:	4a 83       	std	Y+2, r20	; 0x02
    5710:	5b 83       	std	Y+3, r21	; 0x03
    5712:	6c 83       	std	Y+4, r22	; 0x04
    5714:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    5716:	10 97       	sbiw	r26, 0x00	; 0
    5718:	41 f0       	breq	.+16     	; 0x572a <placeTimer+0x7a>
    {
      timer->next = prev->next;
    571a:	8d 91       	ld	r24, X+
    571c:	9c 91       	ld	r25, X
    571e:	11 97       	sbiw	r26, 0x01	; 1
    5720:	99 83       	std	Y+1, r25	; 0x01
    5722:	88 83       	st	Y, r24
      prev->next = timer;
    5724:	cd 93       	st	X+, r28
    5726:	dc 93       	st	X, r29
    5728:	15 c0       	rjmp	.+42     	; 0x5754 <placeTimer+0xa4>
    }
    else
    {
      timer->next = timers;
    572a:	99 83       	std	Y+1, r25	; 0x01
    572c:	88 83       	st	Y, r24
      timers = timer;
    572e:	d0 93 a6 18 	sts	0x18A6, r29	; 0x8018a6 <timers+0x1>
    5732:	c0 93 a5 18 	sts	0x18A5, r28	; 0x8018a5 <timers>
    5736:	0e c0       	rjmp	.+28     	; 0x5754 <placeTimer+0xa4>
    }
  }
  else
  {
    timer->next = NULL;
    5738:	19 82       	std	Y+1, r1	; 0x01
    573a:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    573c:	8e 81       	ldd	r24, Y+6	; 0x06
    573e:	9f 81       	ldd	r25, Y+7	; 0x07
    5740:	a8 85       	ldd	r26, Y+8	; 0x08
    5742:	b9 85       	ldd	r27, Y+9	; 0x09
    5744:	8a 83       	std	Y+2, r24	; 0x02
    5746:	9b 83       	std	Y+3, r25	; 0x03
    5748:	ac 83       	std	Y+4, r26	; 0x04
    574a:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    574c:	d0 93 a6 18 	sts	0x18A6, r29	; 0x8018a6 <timers+0x1>
    5750:	c0 93 a5 18 	sts	0x18A5, r28	; 0x8018a5 <timers>
  }
}
    5754:	df 91       	pop	r29
    5756:	cf 91       	pop	r28
    5758:	1f 91       	pop	r17
    575a:	0f 91       	pop	r16
    575c:	08 95       	ret

0000575e <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    575e:	10 92 a6 18 	sts	0x18A6, r1	; 0x8018a6 <timers+0x1>
    5762:	10 92 a5 18 	sts	0x18A5, r1	; 0x8018a5 <timers>
    5766:	08 95       	ret

00005768 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    5768:	cf 93       	push	r28
    576a:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    576c:	e0 91 a5 18 	lds	r30, 0x18A5	; 0x8018a5 <timers>
    5770:	f0 91 a6 18 	lds	r31, 0x18A6	; 0x8018a6 <timers+0x1>

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;
    5774:	a0 e0       	ldi	r26, 0x00	; 0
    5776:	b0 e0       	ldi	r27, 0x00	; 0

  for (SYS_Timer_t *t = timers; t; t = t->next)
    5778:	2b c0       	rjmp	.+86     	; 0x57d0 <SYS_TimerStop+0x68>
  {
    if (t == timer)
    577a:	e8 17       	cp	r30, r24
    577c:	f9 07       	cpc	r31, r25
    577e:	21 f5       	brne	.+72     	; 0x57c8 <SYS_TimerStop+0x60>
    {
      if (prev)
    5780:	10 97       	sbiw	r26, 0x00	; 0
    5782:	29 f0       	breq	.+10     	; 0x578e <SYS_TimerStop+0x26>
        prev->next = t->next;
    5784:	20 81       	ld	r18, Z
    5786:	31 81       	ldd	r19, Z+1	; 0x01
    5788:	2d 93       	st	X+, r18
    578a:	3c 93       	st	X, r19
    578c:	06 c0       	rjmp	.+12     	; 0x579a <SYS_TimerStop+0x32>
      else
        timers = t->next;
    578e:	20 81       	ld	r18, Z
    5790:	31 81       	ldd	r19, Z+1	; 0x01
    5792:	30 93 a6 18 	sts	0x18A6, r19	; 0x8018a6 <timers+0x1>
    5796:	20 93 a5 18 	sts	0x18A5, r18	; 0x8018a5 <timers>

      if (t->next)
    579a:	01 90       	ld	r0, Z+
    579c:	f0 81       	ld	r31, Z
    579e:	e0 2d       	mov	r30, r0
    57a0:	30 97       	sbiw	r30, 0x00	; 0
    57a2:	c1 f0       	breq	.+48     	; 0x57d4 <SYS_TimerStop+0x6c>
        t->next->timeout += timer->timeout;
    57a4:	ec 01       	movw	r28, r24
    57a6:	8a 81       	ldd	r24, Y+2	; 0x02
    57a8:	9b 81       	ldd	r25, Y+3	; 0x03
    57aa:	ac 81       	ldd	r26, Y+4	; 0x04
    57ac:	bd 81       	ldd	r27, Y+5	; 0x05
    57ae:	42 81       	ldd	r20, Z+2	; 0x02
    57b0:	53 81       	ldd	r21, Z+3	; 0x03
    57b2:	64 81       	ldd	r22, Z+4	; 0x04
    57b4:	75 81       	ldd	r23, Z+5	; 0x05
    57b6:	84 0f       	add	r24, r20
    57b8:	95 1f       	adc	r25, r21
    57ba:	a6 1f       	adc	r26, r22
    57bc:	b7 1f       	adc	r27, r23
    57be:	82 83       	std	Z+2, r24	; 0x02
    57c0:	93 83       	std	Z+3, r25	; 0x03
    57c2:	a4 83       	std	Z+4, r26	; 0x04
    57c4:	b5 83       	std	Z+5, r27	; 0x05
    57c6:	06 c0       	rjmp	.+12     	; 0x57d4 <SYS_TimerStop+0x6c>

      break;
    }
    prev = t;
    57c8:	df 01       	movw	r26, r30
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    57ca:	01 90       	ld	r0, Z+
    57cc:	f0 81       	ld	r31, Z
    57ce:	e0 2d       	mov	r30, r0
    57d0:	30 97       	sbiw	r30, 0x00	; 0
    57d2:	99 f6       	brne	.-90     	; 0x577a <SYS_TimerStop+0x12>

      break;
    }
    prev = t;
  }
}
    57d4:	df 91       	pop	r29
    57d6:	cf 91       	pop	r28
    57d8:	08 95       	ret

000057da <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    57da:	e0 91 a5 18 	lds	r30, 0x18A5	; 0x8018a5 <timers>
    57de:	f0 91 a6 18 	lds	r31, 0x18A6	; 0x8018a6 <timers+0x1>
    57e2:	06 c0       	rjmp	.+12     	; 0x57f0 <SYS_TimerStarted+0x16>
    if (t == timer)
    57e4:	e8 17       	cp	r30, r24
    57e6:	f9 07       	cpc	r31, r25
    57e8:	39 f0       	breq	.+14     	; 0x57f8 <SYS_TimerStarted+0x1e>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    57ea:	01 90       	ld	r0, Z+
    57ec:	f0 81       	ld	r31, Z
    57ee:	e0 2d       	mov	r30, r0
    57f0:	30 97       	sbiw	r30, 0x00	; 0
    57f2:	c1 f7       	brne	.-16     	; 0x57e4 <SYS_TimerStarted+0xa>
    if (t == timer)
      return true;
  return false;
    57f4:	80 e0       	ldi	r24, 0x00	; 0
    57f6:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    57f8:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    57fa:	08 95       	ret

000057fc <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    57fc:	cf 93       	push	r28
    57fe:	df 93       	push	r29
    5800:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    5802:	eb df       	rcall	.-42     	; 0x57da <SYS_TimerStarted>
    5804:	81 11       	cpse	r24, r1
    5806:	02 c0       	rjmp	.+4      	; 0x580c <SYS_TimerStart+0x10>
    placeTimer(timer);
    5808:	ce 01       	movw	r24, r28
    580a:	52 df       	rcall	.-348    	; 0x56b0 <placeTimer>
}
    580c:	df 91       	pop	r29
    580e:	cf 91       	pop	r28
    5810:	08 95       	ret

00005812 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    5812:	cf 92       	push	r12
    5814:	df 92       	push	r13
    5816:	ef 92       	push	r14
    5818:	ff 92       	push	r15
    581a:	cf 93       	push	r28
    581c:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    581e:	80 91 ad 1c 	lds	r24, 0x1CAD	; 0x801cad <halTimerIrqCount>
    5822:	88 23       	and	r24, r24
    5824:	09 f4       	brne	.+2      	; 0x5828 <SYS_TimerTaskHandler+0x16>
    5826:	4d c0       	rjmp	.+154    	; 0x58c2 <SYS_TimerTaskHandler+0xb0>
    return;

  ATOMIC_SECTION_ENTER
    5828:	8f b7       	in	r24, 0x3f	; 63
    582a:	f8 94       	cli
    cnt = halTimerIrqCount;
    582c:	c0 90 ad 1c 	lds	r12, 0x1CAD	; 0x801cad <halTimerIrqCount>
    halTimerIrqCount = 0;
    5830:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    5834:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    5836:	d1 2c       	mov	r13, r1
    5838:	e1 2c       	mov	r14, r1
    583a:	f1 2c       	mov	r15, r1
    583c:	cc 0c       	add	r12, r12
    583e:	dd 1c       	adc	r13, r13
    5840:	ee 1c       	adc	r14, r14
    5842:	ff 1c       	adc	r15, r15
    5844:	d7 01       	movw	r26, r14
    5846:	c6 01       	movw	r24, r12
    5848:	88 0f       	add	r24, r24
    584a:	99 1f       	adc	r25, r25
    584c:	aa 1f       	adc	r26, r26
    584e:	bb 1f       	adc	r27, r27
    5850:	88 0f       	add	r24, r24
    5852:	99 1f       	adc	r25, r25
    5854:	aa 1f       	adc	r26, r26
    5856:	bb 1f       	adc	r27, r27
    5858:	c8 0e       	add	r12, r24
    585a:	d9 1e       	adc	r13, r25
    585c:	ea 1e       	adc	r14, r26
    585e:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    5860:	13 c0       	rjmp	.+38     	; 0x5888 <SYS_TimerTaskHandler+0x76>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    5862:	c8 1a       	sub	r12, r24
    5864:	d9 0a       	sbc	r13, r25
    5866:	ea 0a       	sbc	r14, r26
    5868:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    586a:	88 81       	ld	r24, Y
    586c:	99 81       	ldd	r25, Y+1	; 0x01
    586e:	90 93 a6 18 	sts	0x18A6, r25	; 0x8018a6 <timers+0x1>
    5872:	80 93 a5 18 	sts	0x18A5, r24	; 0x8018a5 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    5876:	8a 85       	ldd	r24, Y+10	; 0x0a
    5878:	81 30       	cpi	r24, 0x01	; 1
    587a:	11 f4       	brne	.+4      	; 0x5880 <SYS_TimerTaskHandler+0x6e>
      placeTimer(timer);
    587c:	ce 01       	movw	r24, r28
    587e:	18 df       	rcall	.-464    	; 0x56b0 <placeTimer>
    timer->handler(timer);
    5880:	eb 85       	ldd	r30, Y+11	; 0x0b
    5882:	fc 85       	ldd	r31, Y+12	; 0x0c
    5884:	ce 01       	movw	r24, r28
    5886:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    5888:	c0 91 a5 18 	lds	r28, 0x18A5	; 0x8018a5 <timers>
    588c:	d0 91 a6 18 	lds	r29, 0x18A6	; 0x8018a6 <timers+0x1>
    5890:	20 97       	sbiw	r28, 0x00	; 0
    5892:	49 f0       	breq	.+18     	; 0x58a6 <SYS_TimerTaskHandler+0x94>
    5894:	8a 81       	ldd	r24, Y+2	; 0x02
    5896:	9b 81       	ldd	r25, Y+3	; 0x03
    5898:	ac 81       	ldd	r26, Y+4	; 0x04
    589a:	bd 81       	ldd	r27, Y+5	; 0x05
    589c:	c8 16       	cp	r12, r24
    589e:	d9 06       	cpc	r13, r25
    58a0:	ea 06       	cpc	r14, r26
    58a2:	fb 06       	cpc	r15, r27
    58a4:	f0 f6       	brcc	.-68     	; 0x5862 <SYS_TimerTaskHandler+0x50>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    58a6:	20 97       	sbiw	r28, 0x00	; 0
    58a8:	61 f0       	breq	.+24     	; 0x58c2 <SYS_TimerTaskHandler+0xb0>
    timers->timeout -= elapsed;
    58aa:	8a 81       	ldd	r24, Y+2	; 0x02
    58ac:	9b 81       	ldd	r25, Y+3	; 0x03
    58ae:	ac 81       	ldd	r26, Y+4	; 0x04
    58b0:	bd 81       	ldd	r27, Y+5	; 0x05
    58b2:	8c 19       	sub	r24, r12
    58b4:	9d 09       	sbc	r25, r13
    58b6:	ae 09       	sbc	r26, r14
    58b8:	bf 09       	sbc	r27, r15
    58ba:	8a 83       	std	Y+2, r24	; 0x02
    58bc:	9b 83       	std	Y+3, r25	; 0x03
    58be:	ac 83       	std	Y+4, r26	; 0x04
    58c0:	bd 83       	std	Y+5, r27	; 0x05
}
    58c2:	df 91       	pop	r29
    58c4:	cf 91       	pop	r28
    58c6:	ff 90       	pop	r15
    58c8:	ef 90       	pop	r14
    58ca:	df 90       	pop	r13
    58cc:	cf 90       	pop	r12
    58ce:	08 95       	ret

000058d0 <UART_init>:
}

uint8_t UART_GetChar(void){
	while (!tbi_(UCSR1A,RXC1));
	return UDR1;
}
    58d0:	9c 01       	movw	r18, r24
    58d2:	40 e0       	ldi	r20, 0x00	; 0
    58d4:	50 e0       	ldi	r21, 0x00	; 0
    58d6:	60 e2       	ldi	r22, 0x20	; 32
    58d8:	71 ea       	ldi	r23, 0xA1	; 161
    58da:	87 e0       	ldi	r24, 0x07	; 7
    58dc:	90 e0       	ldi	r25, 0x00	; 0
    58de:	c4 d3       	rcall	.+1928   	; 0x6068 <__divmodsi4>
    58e0:	21 50       	subi	r18, 0x01	; 1
    58e2:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
    58e6:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    58ea:	e9 ec       	ldi	r30, 0xC9	; 201
    58ec:	f0 e0       	ldi	r31, 0x00	; 0
    58ee:	88 e1       	ldi	r24, 0x18	; 24
    58f0:	80 83       	st	Z, r24
    58f2:	86 e0       	ldi	r24, 0x06	; 6
    58f4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
    58f8:	80 81       	ld	r24, Z
    58fa:	80 68       	ori	r24, 0x80	; 128
    58fc:	80 83       	st	Z, r24
    58fe:	08 95       	ret

00005900 <printCHAR>:
int printCHAR(char character, FILE *stream)
{
	while ((UCSR1A & (1 << UDRE1)) == 0) {};
    5900:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    5904:	95 ff       	sbrs	r25, 5
    5906:	fc cf       	rjmp	.-8      	; 0x5900 <printCHAR>

	UDR1 = character;
    5908:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

	return 0;
    590c:	80 e0       	ldi	r24, 0x00	; 0
    590e:	90 e0       	ldi	r25, 0x00	; 0
    5910:	08 95       	ret

00005912 <vfprintf>:
    5912:	2f 92       	push	r2
    5914:	3f 92       	push	r3
    5916:	4f 92       	push	r4
    5918:	5f 92       	push	r5
    591a:	6f 92       	push	r6
    591c:	7f 92       	push	r7
    591e:	8f 92       	push	r8
    5920:	9f 92       	push	r9
    5922:	af 92       	push	r10
    5924:	bf 92       	push	r11
    5926:	cf 92       	push	r12
    5928:	df 92       	push	r13
    592a:	ef 92       	push	r14
    592c:	ff 92       	push	r15
    592e:	0f 93       	push	r16
    5930:	1f 93       	push	r17
    5932:	cf 93       	push	r28
    5934:	df 93       	push	r29
    5936:	cd b7       	in	r28, 0x3d	; 61
    5938:	de b7       	in	r29, 0x3e	; 62
    593a:	60 97       	sbiw	r28, 0x10	; 16
    593c:	0f b6       	in	r0, 0x3f	; 63
    593e:	f8 94       	cli
    5940:	de bf       	out	0x3e, r29	; 62
    5942:	0f be       	out	0x3f, r0	; 63
    5944:	cd bf       	out	0x3d, r28	; 61
    5946:	7c 01       	movw	r14, r24
    5948:	1b 01       	movw	r2, r22
    594a:	6a 01       	movw	r12, r20
    594c:	fc 01       	movw	r30, r24
    594e:	17 82       	std	Z+7, r1	; 0x07
    5950:	16 82       	std	Z+6, r1	; 0x06
    5952:	83 81       	ldd	r24, Z+3	; 0x03
    5954:	81 ff       	sbrs	r24, 1
    5956:	2a c3       	rjmp	.+1620   	; 0x5fac <vfprintf+0x69a>
    5958:	9e 01       	movw	r18, r28
    595a:	2f 5f       	subi	r18, 0xFF	; 255
    595c:	3f 4f       	sbci	r19, 0xFF	; 255
    595e:	39 01       	movw	r6, r18
    5960:	f7 01       	movw	r30, r14
    5962:	93 81       	ldd	r25, Z+3	; 0x03
    5964:	f1 01       	movw	r30, r2
    5966:	93 fd       	sbrc	r25, 3
    5968:	85 91       	lpm	r24, Z+
    596a:	93 ff       	sbrs	r25, 3
    596c:	81 91       	ld	r24, Z+
    596e:	1f 01       	movw	r2, r30
    5970:	88 23       	and	r24, r24
    5972:	09 f4       	brne	.+2      	; 0x5976 <vfprintf+0x64>
    5974:	17 c3       	rjmp	.+1582   	; 0x5fa4 <vfprintf+0x692>
    5976:	85 32       	cpi	r24, 0x25	; 37
    5978:	39 f4       	brne	.+14     	; 0x5988 <vfprintf+0x76>
    597a:	93 fd       	sbrc	r25, 3
    597c:	85 91       	lpm	r24, Z+
    597e:	93 ff       	sbrs	r25, 3
    5980:	81 91       	ld	r24, Z+
    5982:	1f 01       	movw	r2, r30
    5984:	85 32       	cpi	r24, 0x25	; 37
    5986:	31 f4       	brne	.+12     	; 0x5994 <vfprintf+0x82>
    5988:	b7 01       	movw	r22, r14
    598a:	90 e0       	ldi	r25, 0x00	; 0
    598c:	13 d5       	rcall	.+2598   	; 0x63b4 <fputc>
    598e:	56 01       	movw	r10, r12
    5990:	65 01       	movw	r12, r10
    5992:	e6 cf       	rjmp	.-52     	; 0x5960 <vfprintf+0x4e>
    5994:	10 e0       	ldi	r17, 0x00	; 0
    5996:	51 2c       	mov	r5, r1
    5998:	91 2c       	mov	r9, r1
    599a:	ff e1       	ldi	r31, 0x1F	; 31
    599c:	f9 15       	cp	r31, r9
    599e:	d8 f0       	brcs	.+54     	; 0x59d6 <vfprintf+0xc4>
    59a0:	8b 32       	cpi	r24, 0x2B	; 43
    59a2:	79 f0       	breq	.+30     	; 0x59c2 <vfprintf+0xb0>
    59a4:	38 f4       	brcc	.+14     	; 0x59b4 <vfprintf+0xa2>
    59a6:	80 32       	cpi	r24, 0x20	; 32
    59a8:	79 f0       	breq	.+30     	; 0x59c8 <vfprintf+0xb6>
    59aa:	83 32       	cpi	r24, 0x23	; 35
    59ac:	a1 f4       	brne	.+40     	; 0x59d6 <vfprintf+0xc4>
    59ae:	f9 2d       	mov	r31, r9
    59b0:	f0 61       	ori	r31, 0x10	; 16
    59b2:	2e c0       	rjmp	.+92     	; 0x5a10 <vfprintf+0xfe>
    59b4:	8d 32       	cpi	r24, 0x2D	; 45
    59b6:	61 f0       	breq	.+24     	; 0x59d0 <vfprintf+0xbe>
    59b8:	80 33       	cpi	r24, 0x30	; 48
    59ba:	69 f4       	brne	.+26     	; 0x59d6 <vfprintf+0xc4>
    59bc:	29 2d       	mov	r18, r9
    59be:	21 60       	ori	r18, 0x01	; 1
    59c0:	2d c0       	rjmp	.+90     	; 0x5a1c <vfprintf+0x10a>
    59c2:	39 2d       	mov	r19, r9
    59c4:	32 60       	ori	r19, 0x02	; 2
    59c6:	93 2e       	mov	r9, r19
    59c8:	89 2d       	mov	r24, r9
    59ca:	84 60       	ori	r24, 0x04	; 4
    59cc:	98 2e       	mov	r9, r24
    59ce:	2a c0       	rjmp	.+84     	; 0x5a24 <vfprintf+0x112>
    59d0:	e9 2d       	mov	r30, r9
    59d2:	e8 60       	ori	r30, 0x08	; 8
    59d4:	15 c0       	rjmp	.+42     	; 0x5a00 <vfprintf+0xee>
    59d6:	97 fc       	sbrc	r9, 7
    59d8:	2d c0       	rjmp	.+90     	; 0x5a34 <vfprintf+0x122>
    59da:	20 ed       	ldi	r18, 0xD0	; 208
    59dc:	28 0f       	add	r18, r24
    59de:	2a 30       	cpi	r18, 0x0A	; 10
    59e0:	88 f4       	brcc	.+34     	; 0x5a04 <vfprintf+0xf2>
    59e2:	96 fe       	sbrs	r9, 6
    59e4:	06 c0       	rjmp	.+12     	; 0x59f2 <vfprintf+0xe0>
    59e6:	3a e0       	ldi	r19, 0x0A	; 10
    59e8:	13 9f       	mul	r17, r19
    59ea:	20 0d       	add	r18, r0
    59ec:	11 24       	eor	r1, r1
    59ee:	12 2f       	mov	r17, r18
    59f0:	19 c0       	rjmp	.+50     	; 0x5a24 <vfprintf+0x112>
    59f2:	8a e0       	ldi	r24, 0x0A	; 10
    59f4:	58 9e       	mul	r5, r24
    59f6:	20 0d       	add	r18, r0
    59f8:	11 24       	eor	r1, r1
    59fa:	52 2e       	mov	r5, r18
    59fc:	e9 2d       	mov	r30, r9
    59fe:	e0 62       	ori	r30, 0x20	; 32
    5a00:	9e 2e       	mov	r9, r30
    5a02:	10 c0       	rjmp	.+32     	; 0x5a24 <vfprintf+0x112>
    5a04:	8e 32       	cpi	r24, 0x2E	; 46
    5a06:	31 f4       	brne	.+12     	; 0x5a14 <vfprintf+0x102>
    5a08:	96 fc       	sbrc	r9, 6
    5a0a:	cc c2       	rjmp	.+1432   	; 0x5fa4 <vfprintf+0x692>
    5a0c:	f9 2d       	mov	r31, r9
    5a0e:	f0 64       	ori	r31, 0x40	; 64
    5a10:	9f 2e       	mov	r9, r31
    5a12:	08 c0       	rjmp	.+16     	; 0x5a24 <vfprintf+0x112>
    5a14:	8c 36       	cpi	r24, 0x6C	; 108
    5a16:	21 f4       	brne	.+8      	; 0x5a20 <vfprintf+0x10e>
    5a18:	29 2d       	mov	r18, r9
    5a1a:	20 68       	ori	r18, 0x80	; 128
    5a1c:	92 2e       	mov	r9, r18
    5a1e:	02 c0       	rjmp	.+4      	; 0x5a24 <vfprintf+0x112>
    5a20:	88 36       	cpi	r24, 0x68	; 104
    5a22:	41 f4       	brne	.+16     	; 0x5a34 <vfprintf+0x122>
    5a24:	f1 01       	movw	r30, r2
    5a26:	93 fd       	sbrc	r25, 3
    5a28:	85 91       	lpm	r24, Z+
    5a2a:	93 ff       	sbrs	r25, 3
    5a2c:	81 91       	ld	r24, Z+
    5a2e:	1f 01       	movw	r2, r30
    5a30:	81 11       	cpse	r24, r1
    5a32:	b3 cf       	rjmp	.-154    	; 0x599a <vfprintf+0x88>
    5a34:	9b eb       	ldi	r25, 0xBB	; 187
    5a36:	98 0f       	add	r25, r24
    5a38:	93 30       	cpi	r25, 0x03	; 3
    5a3a:	20 f4       	brcc	.+8      	; 0x5a44 <vfprintf+0x132>
    5a3c:	99 2d       	mov	r25, r9
    5a3e:	90 61       	ori	r25, 0x10	; 16
    5a40:	80 5e       	subi	r24, 0xE0	; 224
    5a42:	07 c0       	rjmp	.+14     	; 0x5a52 <vfprintf+0x140>
    5a44:	9b e9       	ldi	r25, 0x9B	; 155
    5a46:	98 0f       	add	r25, r24
    5a48:	93 30       	cpi	r25, 0x03	; 3
    5a4a:	08 f0       	brcs	.+2      	; 0x5a4e <vfprintf+0x13c>
    5a4c:	59 c1       	rjmp	.+690    	; 0x5d00 <vfprintf+0x3ee>
    5a4e:	99 2d       	mov	r25, r9
    5a50:	9f 7e       	andi	r25, 0xEF	; 239
    5a52:	96 ff       	sbrs	r25, 6
    5a54:	16 e0       	ldi	r17, 0x06	; 6
    5a56:	9f 73       	andi	r25, 0x3F	; 63
    5a58:	99 2e       	mov	r9, r25
    5a5a:	85 36       	cpi	r24, 0x65	; 101
    5a5c:	19 f4       	brne	.+6      	; 0x5a64 <vfprintf+0x152>
    5a5e:	90 64       	ori	r25, 0x40	; 64
    5a60:	99 2e       	mov	r9, r25
    5a62:	08 c0       	rjmp	.+16     	; 0x5a74 <vfprintf+0x162>
    5a64:	86 36       	cpi	r24, 0x66	; 102
    5a66:	21 f4       	brne	.+8      	; 0x5a70 <vfprintf+0x15e>
    5a68:	39 2f       	mov	r19, r25
    5a6a:	30 68       	ori	r19, 0x80	; 128
    5a6c:	93 2e       	mov	r9, r19
    5a6e:	02 c0       	rjmp	.+4      	; 0x5a74 <vfprintf+0x162>
    5a70:	11 11       	cpse	r17, r1
    5a72:	11 50       	subi	r17, 0x01	; 1
    5a74:	97 fe       	sbrs	r9, 7
    5a76:	07 c0       	rjmp	.+14     	; 0x5a86 <vfprintf+0x174>
    5a78:	1c 33       	cpi	r17, 0x3C	; 60
    5a7a:	50 f4       	brcc	.+20     	; 0x5a90 <vfprintf+0x17e>
    5a7c:	44 24       	eor	r4, r4
    5a7e:	43 94       	inc	r4
    5a80:	41 0e       	add	r4, r17
    5a82:	27 e0       	ldi	r18, 0x07	; 7
    5a84:	0b c0       	rjmp	.+22     	; 0x5a9c <vfprintf+0x18a>
    5a86:	18 30       	cpi	r17, 0x08	; 8
    5a88:	38 f0       	brcs	.+14     	; 0x5a98 <vfprintf+0x186>
    5a8a:	27 e0       	ldi	r18, 0x07	; 7
    5a8c:	17 e0       	ldi	r17, 0x07	; 7
    5a8e:	05 c0       	rjmp	.+10     	; 0x5a9a <vfprintf+0x188>
    5a90:	27 e0       	ldi	r18, 0x07	; 7
    5a92:	9c e3       	ldi	r25, 0x3C	; 60
    5a94:	49 2e       	mov	r4, r25
    5a96:	02 c0       	rjmp	.+4      	; 0x5a9c <vfprintf+0x18a>
    5a98:	21 2f       	mov	r18, r17
    5a9a:	41 2c       	mov	r4, r1
    5a9c:	56 01       	movw	r10, r12
    5a9e:	84 e0       	ldi	r24, 0x04	; 4
    5aa0:	a8 0e       	add	r10, r24
    5aa2:	b1 1c       	adc	r11, r1
    5aa4:	f6 01       	movw	r30, r12
    5aa6:	60 81       	ld	r22, Z
    5aa8:	71 81       	ldd	r23, Z+1	; 0x01
    5aaa:	82 81       	ldd	r24, Z+2	; 0x02
    5aac:	93 81       	ldd	r25, Z+3	; 0x03
    5aae:	04 2d       	mov	r16, r4
    5ab0:	a3 01       	movw	r20, r6
    5ab2:	6c d3       	rcall	.+1752   	; 0x618c <__ftoa_engine>
    5ab4:	6c 01       	movw	r12, r24
    5ab6:	f9 81       	ldd	r31, Y+1	; 0x01
    5ab8:	fc 87       	std	Y+12, r31	; 0x0c
    5aba:	f0 ff       	sbrs	r31, 0
    5abc:	02 c0       	rjmp	.+4      	; 0x5ac2 <vfprintf+0x1b0>
    5abe:	f3 ff       	sbrs	r31, 3
    5ac0:	06 c0       	rjmp	.+12     	; 0x5ace <vfprintf+0x1bc>
    5ac2:	91 fc       	sbrc	r9, 1
    5ac4:	06 c0       	rjmp	.+12     	; 0x5ad2 <vfprintf+0x1c0>
    5ac6:	92 fe       	sbrs	r9, 2
    5ac8:	06 c0       	rjmp	.+12     	; 0x5ad6 <vfprintf+0x1c4>
    5aca:	00 e2       	ldi	r16, 0x20	; 32
    5acc:	05 c0       	rjmp	.+10     	; 0x5ad8 <vfprintf+0x1c6>
    5ace:	0d e2       	ldi	r16, 0x2D	; 45
    5ad0:	03 c0       	rjmp	.+6      	; 0x5ad8 <vfprintf+0x1c6>
    5ad2:	0b e2       	ldi	r16, 0x2B	; 43
    5ad4:	01 c0       	rjmp	.+2      	; 0x5ad8 <vfprintf+0x1c6>
    5ad6:	00 e0       	ldi	r16, 0x00	; 0
    5ad8:	8c 85       	ldd	r24, Y+12	; 0x0c
    5ada:	8c 70       	andi	r24, 0x0C	; 12
    5adc:	19 f0       	breq	.+6      	; 0x5ae4 <vfprintf+0x1d2>
    5ade:	01 11       	cpse	r16, r1
    5ae0:	43 c2       	rjmp	.+1158   	; 0x5f68 <vfprintf+0x656>
    5ae2:	80 c2       	rjmp	.+1280   	; 0x5fe4 <vfprintf+0x6d2>
    5ae4:	97 fe       	sbrs	r9, 7
    5ae6:	10 c0       	rjmp	.+32     	; 0x5b08 <vfprintf+0x1f6>
    5ae8:	4c 0c       	add	r4, r12
    5aea:	fc 85       	ldd	r31, Y+12	; 0x0c
    5aec:	f4 ff       	sbrs	r31, 4
    5aee:	04 c0       	rjmp	.+8      	; 0x5af8 <vfprintf+0x1e6>
    5af0:	8a 81       	ldd	r24, Y+2	; 0x02
    5af2:	81 33       	cpi	r24, 0x31	; 49
    5af4:	09 f4       	brne	.+2      	; 0x5af8 <vfprintf+0x1e6>
    5af6:	4a 94       	dec	r4
    5af8:	14 14       	cp	r1, r4
    5afa:	74 f5       	brge	.+92     	; 0x5b58 <vfprintf+0x246>
    5afc:	28 e0       	ldi	r18, 0x08	; 8
    5afe:	24 15       	cp	r18, r4
    5b00:	78 f5       	brcc	.+94     	; 0x5b60 <vfprintf+0x24e>
    5b02:	88 e0       	ldi	r24, 0x08	; 8
    5b04:	48 2e       	mov	r4, r24
    5b06:	2c c0       	rjmp	.+88     	; 0x5b60 <vfprintf+0x24e>
    5b08:	96 fc       	sbrc	r9, 6
    5b0a:	2a c0       	rjmp	.+84     	; 0x5b60 <vfprintf+0x24e>
    5b0c:	81 2f       	mov	r24, r17
    5b0e:	90 e0       	ldi	r25, 0x00	; 0
    5b10:	8c 15       	cp	r24, r12
    5b12:	9d 05       	cpc	r25, r13
    5b14:	9c f0       	brlt	.+38     	; 0x5b3c <vfprintf+0x22a>
    5b16:	3c ef       	ldi	r19, 0xFC	; 252
    5b18:	c3 16       	cp	r12, r19
    5b1a:	3f ef       	ldi	r19, 0xFF	; 255
    5b1c:	d3 06       	cpc	r13, r19
    5b1e:	74 f0       	brlt	.+28     	; 0x5b3c <vfprintf+0x22a>
    5b20:	89 2d       	mov	r24, r9
    5b22:	80 68       	ori	r24, 0x80	; 128
    5b24:	98 2e       	mov	r9, r24
    5b26:	0a c0       	rjmp	.+20     	; 0x5b3c <vfprintf+0x22a>
    5b28:	e2 e0       	ldi	r30, 0x02	; 2
    5b2a:	f0 e0       	ldi	r31, 0x00	; 0
    5b2c:	ec 0f       	add	r30, r28
    5b2e:	fd 1f       	adc	r31, r29
    5b30:	e1 0f       	add	r30, r17
    5b32:	f1 1d       	adc	r31, r1
    5b34:	80 81       	ld	r24, Z
    5b36:	80 33       	cpi	r24, 0x30	; 48
    5b38:	19 f4       	brne	.+6      	; 0x5b40 <vfprintf+0x22e>
    5b3a:	11 50       	subi	r17, 0x01	; 1
    5b3c:	11 11       	cpse	r17, r1
    5b3e:	f4 cf       	rjmp	.-24     	; 0x5b28 <vfprintf+0x216>
    5b40:	97 fe       	sbrs	r9, 7
    5b42:	0e c0       	rjmp	.+28     	; 0x5b60 <vfprintf+0x24e>
    5b44:	44 24       	eor	r4, r4
    5b46:	43 94       	inc	r4
    5b48:	41 0e       	add	r4, r17
    5b4a:	81 2f       	mov	r24, r17
    5b4c:	90 e0       	ldi	r25, 0x00	; 0
    5b4e:	c8 16       	cp	r12, r24
    5b50:	d9 06       	cpc	r13, r25
    5b52:	2c f4       	brge	.+10     	; 0x5b5e <vfprintf+0x24c>
    5b54:	1c 19       	sub	r17, r12
    5b56:	04 c0       	rjmp	.+8      	; 0x5b60 <vfprintf+0x24e>
    5b58:	44 24       	eor	r4, r4
    5b5a:	43 94       	inc	r4
    5b5c:	01 c0       	rjmp	.+2      	; 0x5b60 <vfprintf+0x24e>
    5b5e:	10 e0       	ldi	r17, 0x00	; 0
    5b60:	97 fe       	sbrs	r9, 7
    5b62:	06 c0       	rjmp	.+12     	; 0x5b70 <vfprintf+0x25e>
    5b64:	1c 14       	cp	r1, r12
    5b66:	1d 04       	cpc	r1, r13
    5b68:	34 f4       	brge	.+12     	; 0x5b76 <vfprintf+0x264>
    5b6a:	c6 01       	movw	r24, r12
    5b6c:	01 96       	adiw	r24, 0x01	; 1
    5b6e:	05 c0       	rjmp	.+10     	; 0x5b7a <vfprintf+0x268>
    5b70:	85 e0       	ldi	r24, 0x05	; 5
    5b72:	90 e0       	ldi	r25, 0x00	; 0
    5b74:	02 c0       	rjmp	.+4      	; 0x5b7a <vfprintf+0x268>
    5b76:	81 e0       	ldi	r24, 0x01	; 1
    5b78:	90 e0       	ldi	r25, 0x00	; 0
    5b7a:	01 11       	cpse	r16, r1
    5b7c:	01 96       	adiw	r24, 0x01	; 1
    5b7e:	11 23       	and	r17, r17
    5b80:	31 f0       	breq	.+12     	; 0x5b8e <vfprintf+0x27c>
    5b82:	21 2f       	mov	r18, r17
    5b84:	30 e0       	ldi	r19, 0x00	; 0
    5b86:	2f 5f       	subi	r18, 0xFF	; 255
    5b88:	3f 4f       	sbci	r19, 0xFF	; 255
    5b8a:	82 0f       	add	r24, r18
    5b8c:	93 1f       	adc	r25, r19
    5b8e:	25 2d       	mov	r18, r5
    5b90:	30 e0       	ldi	r19, 0x00	; 0
    5b92:	82 17       	cp	r24, r18
    5b94:	93 07       	cpc	r25, r19
    5b96:	14 f4       	brge	.+4      	; 0x5b9c <vfprintf+0x28a>
    5b98:	58 1a       	sub	r5, r24
    5b9a:	01 c0       	rjmp	.+2      	; 0x5b9e <vfprintf+0x28c>
    5b9c:	51 2c       	mov	r5, r1
    5b9e:	89 2d       	mov	r24, r9
    5ba0:	89 70       	andi	r24, 0x09	; 9
    5ba2:	41 f4       	brne	.+16     	; 0x5bb4 <vfprintf+0x2a2>
    5ba4:	55 20       	and	r5, r5
    5ba6:	31 f0       	breq	.+12     	; 0x5bb4 <vfprintf+0x2a2>
    5ba8:	b7 01       	movw	r22, r14
    5baa:	80 e2       	ldi	r24, 0x20	; 32
    5bac:	90 e0       	ldi	r25, 0x00	; 0
    5bae:	02 d4       	rcall	.+2052   	; 0x63b4 <fputc>
    5bb0:	5a 94       	dec	r5
    5bb2:	f8 cf       	rjmp	.-16     	; 0x5ba4 <vfprintf+0x292>
    5bb4:	00 23       	and	r16, r16
    5bb6:	21 f0       	breq	.+8      	; 0x5bc0 <vfprintf+0x2ae>
    5bb8:	b7 01       	movw	r22, r14
    5bba:	80 2f       	mov	r24, r16
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	fa d3       	rcall	.+2036   	; 0x63b4 <fputc>
    5bc0:	93 fc       	sbrc	r9, 3
    5bc2:	08 c0       	rjmp	.+16     	; 0x5bd4 <vfprintf+0x2c2>
    5bc4:	55 20       	and	r5, r5
    5bc6:	31 f0       	breq	.+12     	; 0x5bd4 <vfprintf+0x2c2>
    5bc8:	b7 01       	movw	r22, r14
    5bca:	80 e3       	ldi	r24, 0x30	; 48
    5bcc:	90 e0       	ldi	r25, 0x00	; 0
    5bce:	f2 d3       	rcall	.+2020   	; 0x63b4 <fputc>
    5bd0:	5a 94       	dec	r5
    5bd2:	f8 cf       	rjmp	.-16     	; 0x5bc4 <vfprintf+0x2b2>
    5bd4:	97 fe       	sbrs	r9, 7
    5bd6:	4a c0       	rjmp	.+148    	; 0x5c6c <vfprintf+0x35a>
    5bd8:	46 01       	movw	r8, r12
    5bda:	d7 fe       	sbrs	r13, 7
    5bdc:	02 c0       	rjmp	.+4      	; 0x5be2 <vfprintf+0x2d0>
    5bde:	81 2c       	mov	r8, r1
    5be0:	91 2c       	mov	r9, r1
    5be2:	c6 01       	movw	r24, r12
    5be4:	88 19       	sub	r24, r8
    5be6:	99 09       	sbc	r25, r9
    5be8:	f3 01       	movw	r30, r6
    5bea:	e8 0f       	add	r30, r24
    5bec:	f9 1f       	adc	r31, r25
    5bee:	fe 87       	std	Y+14, r31	; 0x0e
    5bf0:	ed 87       	std	Y+13, r30	; 0x0d
    5bf2:	96 01       	movw	r18, r12
    5bf4:	24 19       	sub	r18, r4
    5bf6:	31 09       	sbc	r19, r1
    5bf8:	38 8b       	std	Y+16, r19	; 0x10
    5bfa:	2f 87       	std	Y+15, r18	; 0x0f
    5bfc:	01 2f       	mov	r16, r17
    5bfe:	10 e0       	ldi	r17, 0x00	; 0
    5c00:	11 95       	neg	r17
    5c02:	01 95       	neg	r16
    5c04:	11 09       	sbc	r17, r1
    5c06:	3f ef       	ldi	r19, 0xFF	; 255
    5c08:	83 16       	cp	r8, r19
    5c0a:	93 06       	cpc	r9, r19
    5c0c:	21 f4       	brne	.+8      	; 0x5c16 <vfprintf+0x304>
    5c0e:	b7 01       	movw	r22, r14
    5c10:	8e e2       	ldi	r24, 0x2E	; 46
    5c12:	90 e0       	ldi	r25, 0x00	; 0
    5c14:	cf d3       	rcall	.+1950   	; 0x63b4 <fputc>
    5c16:	c8 14       	cp	r12, r8
    5c18:	d9 04       	cpc	r13, r9
    5c1a:	4c f0       	brlt	.+18     	; 0x5c2e <vfprintf+0x31c>
    5c1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c1e:	98 89       	ldd	r25, Y+16	; 0x10
    5c20:	88 15       	cp	r24, r8
    5c22:	99 05       	cpc	r25, r9
    5c24:	24 f4       	brge	.+8      	; 0x5c2e <vfprintf+0x31c>
    5c26:	ed 85       	ldd	r30, Y+13	; 0x0d
    5c28:	fe 85       	ldd	r31, Y+14	; 0x0e
    5c2a:	81 81       	ldd	r24, Z+1	; 0x01
    5c2c:	01 c0       	rjmp	.+2      	; 0x5c30 <vfprintf+0x31e>
    5c2e:	80 e3       	ldi	r24, 0x30	; 48
    5c30:	f1 e0       	ldi	r31, 0x01	; 1
    5c32:	8f 1a       	sub	r8, r31
    5c34:	91 08       	sbc	r9, r1
    5c36:	2d 85       	ldd	r18, Y+13	; 0x0d
    5c38:	3e 85       	ldd	r19, Y+14	; 0x0e
    5c3a:	2f 5f       	subi	r18, 0xFF	; 255
    5c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c3e:	3e 87       	std	Y+14, r19	; 0x0e
    5c40:	2d 87       	std	Y+13, r18	; 0x0d
    5c42:	80 16       	cp	r8, r16
    5c44:	91 06       	cpc	r9, r17
    5c46:	24 f0       	brlt	.+8      	; 0x5c50 <vfprintf+0x33e>
    5c48:	b7 01       	movw	r22, r14
    5c4a:	90 e0       	ldi	r25, 0x00	; 0
    5c4c:	b3 d3       	rcall	.+1894   	; 0x63b4 <fputc>
    5c4e:	db cf       	rjmp	.-74     	; 0x5c06 <vfprintf+0x2f4>
    5c50:	c8 14       	cp	r12, r8
    5c52:	d9 04       	cpc	r13, r9
    5c54:	41 f4       	brne	.+16     	; 0x5c66 <vfprintf+0x354>
    5c56:	9a 81       	ldd	r25, Y+2	; 0x02
    5c58:	96 33       	cpi	r25, 0x36	; 54
    5c5a:	20 f4       	brcc	.+8      	; 0x5c64 <vfprintf+0x352>
    5c5c:	95 33       	cpi	r25, 0x35	; 53
    5c5e:	19 f4       	brne	.+6      	; 0x5c66 <vfprintf+0x354>
    5c60:	3c 85       	ldd	r19, Y+12	; 0x0c
    5c62:	34 ff       	sbrs	r19, 4
    5c64:	81 e3       	ldi	r24, 0x31	; 49
    5c66:	b7 01       	movw	r22, r14
    5c68:	90 e0       	ldi	r25, 0x00	; 0
    5c6a:	48 c0       	rjmp	.+144    	; 0x5cfc <vfprintf+0x3ea>
    5c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c6e:	81 33       	cpi	r24, 0x31	; 49
    5c70:	19 f0       	breq	.+6      	; 0x5c78 <vfprintf+0x366>
    5c72:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c74:	9f 7e       	andi	r25, 0xEF	; 239
    5c76:	9c 87       	std	Y+12, r25	; 0x0c
    5c78:	b7 01       	movw	r22, r14
    5c7a:	90 e0       	ldi	r25, 0x00	; 0
    5c7c:	9b d3       	rcall	.+1846   	; 0x63b4 <fputc>
    5c7e:	11 11       	cpse	r17, r1
    5c80:	05 c0       	rjmp	.+10     	; 0x5c8c <vfprintf+0x37a>
    5c82:	94 fc       	sbrc	r9, 4
    5c84:	16 c0       	rjmp	.+44     	; 0x5cb2 <vfprintf+0x3a0>
    5c86:	85 e6       	ldi	r24, 0x65	; 101
    5c88:	90 e0       	ldi	r25, 0x00	; 0
    5c8a:	15 c0       	rjmp	.+42     	; 0x5cb6 <vfprintf+0x3a4>
    5c8c:	b7 01       	movw	r22, r14
    5c8e:	8e e2       	ldi	r24, 0x2E	; 46
    5c90:	90 e0       	ldi	r25, 0x00	; 0
    5c92:	90 d3       	rcall	.+1824   	; 0x63b4 <fputc>
    5c94:	1e 5f       	subi	r17, 0xFE	; 254
    5c96:	82 e0       	ldi	r24, 0x02	; 2
    5c98:	01 e0       	ldi	r16, 0x01	; 1
    5c9a:	08 0f       	add	r16, r24
    5c9c:	f3 01       	movw	r30, r6
    5c9e:	e8 0f       	add	r30, r24
    5ca0:	f1 1d       	adc	r31, r1
    5ca2:	80 81       	ld	r24, Z
    5ca4:	b7 01       	movw	r22, r14
    5ca6:	90 e0       	ldi	r25, 0x00	; 0
    5ca8:	85 d3       	rcall	.+1802   	; 0x63b4 <fputc>
    5caa:	80 2f       	mov	r24, r16
    5cac:	01 13       	cpse	r16, r17
    5cae:	f4 cf       	rjmp	.-24     	; 0x5c98 <vfprintf+0x386>
    5cb0:	e8 cf       	rjmp	.-48     	; 0x5c82 <vfprintf+0x370>
    5cb2:	85 e4       	ldi	r24, 0x45	; 69
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
    5cb6:	b7 01       	movw	r22, r14
    5cb8:	7d d3       	rcall	.+1786   	; 0x63b4 <fputc>
    5cba:	d7 fc       	sbrc	r13, 7
    5cbc:	06 c0       	rjmp	.+12     	; 0x5cca <vfprintf+0x3b8>
    5cbe:	c1 14       	cp	r12, r1
    5cc0:	d1 04       	cpc	r13, r1
    5cc2:	41 f4       	brne	.+16     	; 0x5cd4 <vfprintf+0x3c2>
    5cc4:	ec 85       	ldd	r30, Y+12	; 0x0c
    5cc6:	e4 ff       	sbrs	r30, 4
    5cc8:	05 c0       	rjmp	.+10     	; 0x5cd4 <vfprintf+0x3c2>
    5cca:	d1 94       	neg	r13
    5ccc:	c1 94       	neg	r12
    5cce:	d1 08       	sbc	r13, r1
    5cd0:	8d e2       	ldi	r24, 0x2D	; 45
    5cd2:	01 c0       	rjmp	.+2      	; 0x5cd6 <vfprintf+0x3c4>
    5cd4:	8b e2       	ldi	r24, 0x2B	; 43
    5cd6:	b7 01       	movw	r22, r14
    5cd8:	90 e0       	ldi	r25, 0x00	; 0
    5cda:	6c d3       	rcall	.+1752   	; 0x63b4 <fputc>
    5cdc:	80 e3       	ldi	r24, 0x30	; 48
    5cde:	2a e0       	ldi	r18, 0x0A	; 10
    5ce0:	c2 16       	cp	r12, r18
    5ce2:	d1 04       	cpc	r13, r1
    5ce4:	2c f0       	brlt	.+10     	; 0x5cf0 <vfprintf+0x3de>
    5ce6:	8f 5f       	subi	r24, 0xFF	; 255
    5ce8:	fa e0       	ldi	r31, 0x0A	; 10
    5cea:	cf 1a       	sub	r12, r31
    5cec:	d1 08       	sbc	r13, r1
    5cee:	f7 cf       	rjmp	.-18     	; 0x5cde <vfprintf+0x3cc>
    5cf0:	b7 01       	movw	r22, r14
    5cf2:	90 e0       	ldi	r25, 0x00	; 0
    5cf4:	5f d3       	rcall	.+1726   	; 0x63b4 <fputc>
    5cf6:	b7 01       	movw	r22, r14
    5cf8:	c6 01       	movw	r24, r12
    5cfa:	c0 96       	adiw	r24, 0x30	; 48
    5cfc:	5b d3       	rcall	.+1718   	; 0x63b4 <fputc>
    5cfe:	49 c1       	rjmp	.+658    	; 0x5f92 <vfprintf+0x680>
    5d00:	83 36       	cpi	r24, 0x63	; 99
    5d02:	31 f0       	breq	.+12     	; 0x5d10 <vfprintf+0x3fe>
    5d04:	83 37       	cpi	r24, 0x73	; 115
    5d06:	79 f0       	breq	.+30     	; 0x5d26 <vfprintf+0x414>
    5d08:	83 35       	cpi	r24, 0x53	; 83
    5d0a:	09 f0       	breq	.+2      	; 0x5d0e <vfprintf+0x3fc>
    5d0c:	52 c0       	rjmp	.+164    	; 0x5db2 <vfprintf+0x4a0>
    5d0e:	1f c0       	rjmp	.+62     	; 0x5d4e <vfprintf+0x43c>
    5d10:	56 01       	movw	r10, r12
    5d12:	32 e0       	ldi	r19, 0x02	; 2
    5d14:	a3 0e       	add	r10, r19
    5d16:	b1 1c       	adc	r11, r1
    5d18:	f6 01       	movw	r30, r12
    5d1a:	80 81       	ld	r24, Z
    5d1c:	89 83       	std	Y+1, r24	; 0x01
    5d1e:	01 e0       	ldi	r16, 0x01	; 1
    5d20:	10 e0       	ldi	r17, 0x00	; 0
    5d22:	63 01       	movw	r12, r6
    5d24:	11 c0       	rjmp	.+34     	; 0x5d48 <vfprintf+0x436>
    5d26:	56 01       	movw	r10, r12
    5d28:	f2 e0       	ldi	r31, 0x02	; 2
    5d2a:	af 0e       	add	r10, r31
    5d2c:	b1 1c       	adc	r11, r1
    5d2e:	f6 01       	movw	r30, r12
    5d30:	c0 80       	ld	r12, Z
    5d32:	d1 80       	ldd	r13, Z+1	; 0x01
    5d34:	96 fe       	sbrs	r9, 6
    5d36:	03 c0       	rjmp	.+6      	; 0x5d3e <vfprintf+0x42c>
    5d38:	61 2f       	mov	r22, r17
    5d3a:	70 e0       	ldi	r23, 0x00	; 0
    5d3c:	02 c0       	rjmp	.+4      	; 0x5d42 <vfprintf+0x430>
    5d3e:	6f ef       	ldi	r22, 0xFF	; 255
    5d40:	7f ef       	ldi	r23, 0xFF	; 255
    5d42:	c6 01       	movw	r24, r12
    5d44:	2c d3       	rcall	.+1624   	; 0x639e <strnlen>
    5d46:	8c 01       	movw	r16, r24
    5d48:	f9 2d       	mov	r31, r9
    5d4a:	ff 77       	andi	r31, 0x7F	; 127
    5d4c:	13 c0       	rjmp	.+38     	; 0x5d74 <vfprintf+0x462>
    5d4e:	56 01       	movw	r10, r12
    5d50:	22 e0       	ldi	r18, 0x02	; 2
    5d52:	a2 0e       	add	r10, r18
    5d54:	b1 1c       	adc	r11, r1
    5d56:	f6 01       	movw	r30, r12
    5d58:	c0 80       	ld	r12, Z
    5d5a:	d1 80       	ldd	r13, Z+1	; 0x01
    5d5c:	96 fe       	sbrs	r9, 6
    5d5e:	03 c0       	rjmp	.+6      	; 0x5d66 <vfprintf+0x454>
    5d60:	61 2f       	mov	r22, r17
    5d62:	70 e0       	ldi	r23, 0x00	; 0
    5d64:	02 c0       	rjmp	.+4      	; 0x5d6a <vfprintf+0x458>
    5d66:	6f ef       	ldi	r22, 0xFF	; 255
    5d68:	7f ef       	ldi	r23, 0xFF	; 255
    5d6a:	c6 01       	movw	r24, r12
    5d6c:	e7 d2       	rcall	.+1486   	; 0x633c <strnlen_P>
    5d6e:	8c 01       	movw	r16, r24
    5d70:	f9 2d       	mov	r31, r9
    5d72:	f0 68       	ori	r31, 0x80	; 128
    5d74:	9f 2e       	mov	r9, r31
    5d76:	f3 fd       	sbrc	r31, 3
    5d78:	18 c0       	rjmp	.+48     	; 0x5daa <vfprintf+0x498>
    5d7a:	85 2d       	mov	r24, r5
    5d7c:	90 e0       	ldi	r25, 0x00	; 0
    5d7e:	08 17       	cp	r16, r24
    5d80:	19 07       	cpc	r17, r25
    5d82:	98 f4       	brcc	.+38     	; 0x5daa <vfprintf+0x498>
    5d84:	b7 01       	movw	r22, r14
    5d86:	80 e2       	ldi	r24, 0x20	; 32
    5d88:	90 e0       	ldi	r25, 0x00	; 0
    5d8a:	14 d3       	rcall	.+1576   	; 0x63b4 <fputc>
    5d8c:	5a 94       	dec	r5
    5d8e:	f5 cf       	rjmp	.-22     	; 0x5d7a <vfprintf+0x468>
    5d90:	f6 01       	movw	r30, r12
    5d92:	97 fc       	sbrc	r9, 7
    5d94:	85 91       	lpm	r24, Z+
    5d96:	97 fe       	sbrs	r9, 7
    5d98:	81 91       	ld	r24, Z+
    5d9a:	6f 01       	movw	r12, r30
    5d9c:	b7 01       	movw	r22, r14
    5d9e:	90 e0       	ldi	r25, 0x00	; 0
    5da0:	09 d3       	rcall	.+1554   	; 0x63b4 <fputc>
    5da2:	51 10       	cpse	r5, r1
    5da4:	5a 94       	dec	r5
    5da6:	01 50       	subi	r16, 0x01	; 1
    5da8:	11 09       	sbc	r17, r1
    5daa:	01 15       	cp	r16, r1
    5dac:	11 05       	cpc	r17, r1
    5dae:	81 f7       	brne	.-32     	; 0x5d90 <vfprintf+0x47e>
    5db0:	f0 c0       	rjmp	.+480    	; 0x5f92 <vfprintf+0x680>
    5db2:	84 36       	cpi	r24, 0x64	; 100
    5db4:	11 f0       	breq	.+4      	; 0x5dba <vfprintf+0x4a8>
    5db6:	89 36       	cpi	r24, 0x69	; 105
    5db8:	59 f5       	brne	.+86     	; 0x5e10 <vfprintf+0x4fe>
    5dba:	56 01       	movw	r10, r12
    5dbc:	97 fe       	sbrs	r9, 7
    5dbe:	09 c0       	rjmp	.+18     	; 0x5dd2 <vfprintf+0x4c0>
    5dc0:	24 e0       	ldi	r18, 0x04	; 4
    5dc2:	a2 0e       	add	r10, r18
    5dc4:	b1 1c       	adc	r11, r1
    5dc6:	f6 01       	movw	r30, r12
    5dc8:	60 81       	ld	r22, Z
    5dca:	71 81       	ldd	r23, Z+1	; 0x01
    5dcc:	82 81       	ldd	r24, Z+2	; 0x02
    5dce:	93 81       	ldd	r25, Z+3	; 0x03
    5dd0:	0a c0       	rjmp	.+20     	; 0x5de6 <vfprintf+0x4d4>
    5dd2:	f2 e0       	ldi	r31, 0x02	; 2
    5dd4:	af 0e       	add	r10, r31
    5dd6:	b1 1c       	adc	r11, r1
    5dd8:	f6 01       	movw	r30, r12
    5dda:	60 81       	ld	r22, Z
    5ddc:	71 81       	ldd	r23, Z+1	; 0x01
    5dde:	07 2e       	mov	r0, r23
    5de0:	00 0c       	add	r0, r0
    5de2:	88 0b       	sbc	r24, r24
    5de4:	99 0b       	sbc	r25, r25
    5de6:	f9 2d       	mov	r31, r9
    5de8:	ff 76       	andi	r31, 0x6F	; 111
    5dea:	9f 2e       	mov	r9, r31
    5dec:	97 ff       	sbrs	r25, 7
    5dee:	09 c0       	rjmp	.+18     	; 0x5e02 <vfprintf+0x4f0>
    5df0:	90 95       	com	r25
    5df2:	80 95       	com	r24
    5df4:	70 95       	com	r23
    5df6:	61 95       	neg	r22
    5df8:	7f 4f       	sbci	r23, 0xFF	; 255
    5dfa:	8f 4f       	sbci	r24, 0xFF	; 255
    5dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    5dfe:	f0 68       	ori	r31, 0x80	; 128
    5e00:	9f 2e       	mov	r9, r31
    5e02:	2a e0       	ldi	r18, 0x0A	; 10
    5e04:	30 e0       	ldi	r19, 0x00	; 0
    5e06:	a3 01       	movw	r20, r6
    5e08:	4b d3       	rcall	.+1686   	; 0x64a0 <__ultoa_invert>
    5e0a:	c8 2e       	mov	r12, r24
    5e0c:	c6 18       	sub	r12, r6
    5e0e:	3e c0       	rjmp	.+124    	; 0x5e8c <vfprintf+0x57a>
    5e10:	09 2d       	mov	r16, r9
    5e12:	85 37       	cpi	r24, 0x75	; 117
    5e14:	21 f4       	brne	.+8      	; 0x5e1e <vfprintf+0x50c>
    5e16:	0f 7e       	andi	r16, 0xEF	; 239
    5e18:	2a e0       	ldi	r18, 0x0A	; 10
    5e1a:	30 e0       	ldi	r19, 0x00	; 0
    5e1c:	1d c0       	rjmp	.+58     	; 0x5e58 <vfprintf+0x546>
    5e1e:	09 7f       	andi	r16, 0xF9	; 249
    5e20:	8f 36       	cpi	r24, 0x6F	; 111
    5e22:	91 f0       	breq	.+36     	; 0x5e48 <vfprintf+0x536>
    5e24:	18 f4       	brcc	.+6      	; 0x5e2c <vfprintf+0x51a>
    5e26:	88 35       	cpi	r24, 0x58	; 88
    5e28:	59 f0       	breq	.+22     	; 0x5e40 <vfprintf+0x52e>
    5e2a:	bc c0       	rjmp	.+376    	; 0x5fa4 <vfprintf+0x692>
    5e2c:	80 37       	cpi	r24, 0x70	; 112
    5e2e:	19 f0       	breq	.+6      	; 0x5e36 <vfprintf+0x524>
    5e30:	88 37       	cpi	r24, 0x78	; 120
    5e32:	11 f0       	breq	.+4      	; 0x5e38 <vfprintf+0x526>
    5e34:	b7 c0       	rjmp	.+366    	; 0x5fa4 <vfprintf+0x692>
    5e36:	00 61       	ori	r16, 0x10	; 16
    5e38:	04 ff       	sbrs	r16, 4
    5e3a:	09 c0       	rjmp	.+18     	; 0x5e4e <vfprintf+0x53c>
    5e3c:	04 60       	ori	r16, 0x04	; 4
    5e3e:	07 c0       	rjmp	.+14     	; 0x5e4e <vfprintf+0x53c>
    5e40:	94 fe       	sbrs	r9, 4
    5e42:	08 c0       	rjmp	.+16     	; 0x5e54 <vfprintf+0x542>
    5e44:	06 60       	ori	r16, 0x06	; 6
    5e46:	06 c0       	rjmp	.+12     	; 0x5e54 <vfprintf+0x542>
    5e48:	28 e0       	ldi	r18, 0x08	; 8
    5e4a:	30 e0       	ldi	r19, 0x00	; 0
    5e4c:	05 c0       	rjmp	.+10     	; 0x5e58 <vfprintf+0x546>
    5e4e:	20 e1       	ldi	r18, 0x10	; 16
    5e50:	30 e0       	ldi	r19, 0x00	; 0
    5e52:	02 c0       	rjmp	.+4      	; 0x5e58 <vfprintf+0x546>
    5e54:	20 e1       	ldi	r18, 0x10	; 16
    5e56:	32 e0       	ldi	r19, 0x02	; 2
    5e58:	56 01       	movw	r10, r12
    5e5a:	07 ff       	sbrs	r16, 7
    5e5c:	09 c0       	rjmp	.+18     	; 0x5e70 <vfprintf+0x55e>
    5e5e:	84 e0       	ldi	r24, 0x04	; 4
    5e60:	a8 0e       	add	r10, r24
    5e62:	b1 1c       	adc	r11, r1
    5e64:	f6 01       	movw	r30, r12
    5e66:	60 81       	ld	r22, Z
    5e68:	71 81       	ldd	r23, Z+1	; 0x01
    5e6a:	82 81       	ldd	r24, Z+2	; 0x02
    5e6c:	93 81       	ldd	r25, Z+3	; 0x03
    5e6e:	08 c0       	rjmp	.+16     	; 0x5e80 <vfprintf+0x56e>
    5e70:	f2 e0       	ldi	r31, 0x02	; 2
    5e72:	af 0e       	add	r10, r31
    5e74:	b1 1c       	adc	r11, r1
    5e76:	f6 01       	movw	r30, r12
    5e78:	60 81       	ld	r22, Z
    5e7a:	71 81       	ldd	r23, Z+1	; 0x01
    5e7c:	80 e0       	ldi	r24, 0x00	; 0
    5e7e:	90 e0       	ldi	r25, 0x00	; 0
    5e80:	a3 01       	movw	r20, r6
    5e82:	0e d3       	rcall	.+1564   	; 0x64a0 <__ultoa_invert>
    5e84:	c8 2e       	mov	r12, r24
    5e86:	c6 18       	sub	r12, r6
    5e88:	0f 77       	andi	r16, 0x7F	; 127
    5e8a:	90 2e       	mov	r9, r16
    5e8c:	96 fe       	sbrs	r9, 6
    5e8e:	0b c0       	rjmp	.+22     	; 0x5ea6 <vfprintf+0x594>
    5e90:	09 2d       	mov	r16, r9
    5e92:	0e 7f       	andi	r16, 0xFE	; 254
    5e94:	c1 16       	cp	r12, r17
    5e96:	50 f4       	brcc	.+20     	; 0x5eac <vfprintf+0x59a>
    5e98:	94 fe       	sbrs	r9, 4
    5e9a:	0a c0       	rjmp	.+20     	; 0x5eb0 <vfprintf+0x59e>
    5e9c:	92 fc       	sbrc	r9, 2
    5e9e:	08 c0       	rjmp	.+16     	; 0x5eb0 <vfprintf+0x59e>
    5ea0:	09 2d       	mov	r16, r9
    5ea2:	0e 7e       	andi	r16, 0xEE	; 238
    5ea4:	05 c0       	rjmp	.+10     	; 0x5eb0 <vfprintf+0x59e>
    5ea6:	dc 2c       	mov	r13, r12
    5ea8:	09 2d       	mov	r16, r9
    5eaa:	03 c0       	rjmp	.+6      	; 0x5eb2 <vfprintf+0x5a0>
    5eac:	dc 2c       	mov	r13, r12
    5eae:	01 c0       	rjmp	.+2      	; 0x5eb2 <vfprintf+0x5a0>
    5eb0:	d1 2e       	mov	r13, r17
    5eb2:	04 ff       	sbrs	r16, 4
    5eb4:	0d c0       	rjmp	.+26     	; 0x5ed0 <vfprintf+0x5be>
    5eb6:	fe 01       	movw	r30, r28
    5eb8:	ec 0d       	add	r30, r12
    5eba:	f1 1d       	adc	r31, r1
    5ebc:	80 81       	ld	r24, Z
    5ebe:	80 33       	cpi	r24, 0x30	; 48
    5ec0:	11 f4       	brne	.+4      	; 0x5ec6 <vfprintf+0x5b4>
    5ec2:	09 7e       	andi	r16, 0xE9	; 233
    5ec4:	09 c0       	rjmp	.+18     	; 0x5ed8 <vfprintf+0x5c6>
    5ec6:	02 ff       	sbrs	r16, 2
    5ec8:	06 c0       	rjmp	.+12     	; 0x5ed6 <vfprintf+0x5c4>
    5eca:	d3 94       	inc	r13
    5ecc:	d3 94       	inc	r13
    5ece:	04 c0       	rjmp	.+8      	; 0x5ed8 <vfprintf+0x5c6>
    5ed0:	80 2f       	mov	r24, r16
    5ed2:	86 78       	andi	r24, 0x86	; 134
    5ed4:	09 f0       	breq	.+2      	; 0x5ed8 <vfprintf+0x5c6>
    5ed6:	d3 94       	inc	r13
    5ed8:	03 fd       	sbrc	r16, 3
    5eda:	10 c0       	rjmp	.+32     	; 0x5efc <vfprintf+0x5ea>
    5edc:	00 ff       	sbrs	r16, 0
    5ede:	06 c0       	rjmp	.+12     	; 0x5eec <vfprintf+0x5da>
    5ee0:	1c 2d       	mov	r17, r12
    5ee2:	d5 14       	cp	r13, r5
    5ee4:	78 f4       	brcc	.+30     	; 0x5f04 <vfprintf+0x5f2>
    5ee6:	15 0d       	add	r17, r5
    5ee8:	1d 19       	sub	r17, r13
    5eea:	0c c0       	rjmp	.+24     	; 0x5f04 <vfprintf+0x5f2>
    5eec:	d5 14       	cp	r13, r5
    5eee:	50 f4       	brcc	.+20     	; 0x5f04 <vfprintf+0x5f2>
    5ef0:	b7 01       	movw	r22, r14
    5ef2:	80 e2       	ldi	r24, 0x20	; 32
    5ef4:	90 e0       	ldi	r25, 0x00	; 0
    5ef6:	5e d2       	rcall	.+1212   	; 0x63b4 <fputc>
    5ef8:	d3 94       	inc	r13
    5efa:	f8 cf       	rjmp	.-16     	; 0x5eec <vfprintf+0x5da>
    5efc:	d5 14       	cp	r13, r5
    5efe:	10 f4       	brcc	.+4      	; 0x5f04 <vfprintf+0x5f2>
    5f00:	5d 18       	sub	r5, r13
    5f02:	01 c0       	rjmp	.+2      	; 0x5f06 <vfprintf+0x5f4>
    5f04:	51 2c       	mov	r5, r1
    5f06:	04 ff       	sbrs	r16, 4
    5f08:	0f c0       	rjmp	.+30     	; 0x5f28 <vfprintf+0x616>
    5f0a:	b7 01       	movw	r22, r14
    5f0c:	80 e3       	ldi	r24, 0x30	; 48
    5f0e:	90 e0       	ldi	r25, 0x00	; 0
    5f10:	51 d2       	rcall	.+1186   	; 0x63b4 <fputc>
    5f12:	02 ff       	sbrs	r16, 2
    5f14:	16 c0       	rjmp	.+44     	; 0x5f42 <vfprintf+0x630>
    5f16:	01 fd       	sbrc	r16, 1
    5f18:	03 c0       	rjmp	.+6      	; 0x5f20 <vfprintf+0x60e>
    5f1a:	88 e7       	ldi	r24, 0x78	; 120
    5f1c:	90 e0       	ldi	r25, 0x00	; 0
    5f1e:	02 c0       	rjmp	.+4      	; 0x5f24 <vfprintf+0x612>
    5f20:	88 e5       	ldi	r24, 0x58	; 88
    5f22:	90 e0       	ldi	r25, 0x00	; 0
    5f24:	b7 01       	movw	r22, r14
    5f26:	0c c0       	rjmp	.+24     	; 0x5f40 <vfprintf+0x62e>
    5f28:	80 2f       	mov	r24, r16
    5f2a:	86 78       	andi	r24, 0x86	; 134
    5f2c:	51 f0       	breq	.+20     	; 0x5f42 <vfprintf+0x630>
    5f2e:	01 ff       	sbrs	r16, 1
    5f30:	02 c0       	rjmp	.+4      	; 0x5f36 <vfprintf+0x624>
    5f32:	8b e2       	ldi	r24, 0x2B	; 43
    5f34:	01 c0       	rjmp	.+2      	; 0x5f38 <vfprintf+0x626>
    5f36:	80 e2       	ldi	r24, 0x20	; 32
    5f38:	07 fd       	sbrc	r16, 7
    5f3a:	8d e2       	ldi	r24, 0x2D	; 45
    5f3c:	b7 01       	movw	r22, r14
    5f3e:	90 e0       	ldi	r25, 0x00	; 0
    5f40:	39 d2       	rcall	.+1138   	; 0x63b4 <fputc>
    5f42:	c1 16       	cp	r12, r17
    5f44:	30 f4       	brcc	.+12     	; 0x5f52 <vfprintf+0x640>
    5f46:	b7 01       	movw	r22, r14
    5f48:	80 e3       	ldi	r24, 0x30	; 48
    5f4a:	90 e0       	ldi	r25, 0x00	; 0
    5f4c:	33 d2       	rcall	.+1126   	; 0x63b4 <fputc>
    5f4e:	11 50       	subi	r17, 0x01	; 1
    5f50:	f8 cf       	rjmp	.-16     	; 0x5f42 <vfprintf+0x630>
    5f52:	ca 94       	dec	r12
    5f54:	f3 01       	movw	r30, r6
    5f56:	ec 0d       	add	r30, r12
    5f58:	f1 1d       	adc	r31, r1
    5f5a:	80 81       	ld	r24, Z
    5f5c:	b7 01       	movw	r22, r14
    5f5e:	90 e0       	ldi	r25, 0x00	; 0
    5f60:	29 d2       	rcall	.+1106   	; 0x63b4 <fputc>
    5f62:	c1 10       	cpse	r12, r1
    5f64:	f6 cf       	rjmp	.-20     	; 0x5f52 <vfprintf+0x640>
    5f66:	15 c0       	rjmp	.+42     	; 0x5f92 <vfprintf+0x680>
    5f68:	f4 e0       	ldi	r31, 0x04	; 4
    5f6a:	f5 15       	cp	r31, r5
    5f6c:	50 f5       	brcc	.+84     	; 0x5fc2 <vfprintf+0x6b0>
    5f6e:	84 e0       	ldi	r24, 0x04	; 4
    5f70:	58 1a       	sub	r5, r24
    5f72:	93 fe       	sbrs	r9, 3
    5f74:	1e c0       	rjmp	.+60     	; 0x5fb2 <vfprintf+0x6a0>
    5f76:	01 11       	cpse	r16, r1
    5f78:	25 c0       	rjmp	.+74     	; 0x5fc4 <vfprintf+0x6b2>
    5f7a:	2c 85       	ldd	r18, Y+12	; 0x0c
    5f7c:	23 ff       	sbrs	r18, 3
    5f7e:	27 c0       	rjmp	.+78     	; 0x5fce <vfprintf+0x6bc>
    5f80:	04 e5       	ldi	r16, 0x54	; 84
    5f82:	11 e0       	ldi	r17, 0x01	; 1
    5f84:	39 2d       	mov	r19, r9
    5f86:	30 71       	andi	r19, 0x10	; 16
    5f88:	93 2e       	mov	r9, r19
    5f8a:	f8 01       	movw	r30, r16
    5f8c:	84 91       	lpm	r24, Z
    5f8e:	81 11       	cpse	r24, r1
    5f90:	21 c0       	rjmp	.+66     	; 0x5fd4 <vfprintf+0x6c2>
    5f92:	55 20       	and	r5, r5
    5f94:	09 f4       	brne	.+2      	; 0x5f98 <vfprintf+0x686>
    5f96:	fc cc       	rjmp	.-1544   	; 0x5990 <vfprintf+0x7e>
    5f98:	b7 01       	movw	r22, r14
    5f9a:	80 e2       	ldi	r24, 0x20	; 32
    5f9c:	90 e0       	ldi	r25, 0x00	; 0
    5f9e:	0a d2       	rcall	.+1044   	; 0x63b4 <fputc>
    5fa0:	5a 94       	dec	r5
    5fa2:	f7 cf       	rjmp	.-18     	; 0x5f92 <vfprintf+0x680>
    5fa4:	f7 01       	movw	r30, r14
    5fa6:	86 81       	ldd	r24, Z+6	; 0x06
    5fa8:	97 81       	ldd	r25, Z+7	; 0x07
    5faa:	23 c0       	rjmp	.+70     	; 0x5ff2 <vfprintf+0x6e0>
    5fac:	8f ef       	ldi	r24, 0xFF	; 255
    5fae:	9f ef       	ldi	r25, 0xFF	; 255
    5fb0:	20 c0       	rjmp	.+64     	; 0x5ff2 <vfprintf+0x6e0>
    5fb2:	b7 01       	movw	r22, r14
    5fb4:	80 e2       	ldi	r24, 0x20	; 32
    5fb6:	90 e0       	ldi	r25, 0x00	; 0
    5fb8:	fd d1       	rcall	.+1018   	; 0x63b4 <fputc>
    5fba:	5a 94       	dec	r5
    5fbc:	51 10       	cpse	r5, r1
    5fbe:	f9 cf       	rjmp	.-14     	; 0x5fb2 <vfprintf+0x6a0>
    5fc0:	da cf       	rjmp	.-76     	; 0x5f76 <vfprintf+0x664>
    5fc2:	51 2c       	mov	r5, r1
    5fc4:	b7 01       	movw	r22, r14
    5fc6:	80 2f       	mov	r24, r16
    5fc8:	90 e0       	ldi	r25, 0x00	; 0
    5fca:	f4 d1       	rcall	.+1000   	; 0x63b4 <fputc>
    5fcc:	d6 cf       	rjmp	.-84     	; 0x5f7a <vfprintf+0x668>
    5fce:	08 e5       	ldi	r16, 0x58	; 88
    5fd0:	11 e0       	ldi	r17, 0x01	; 1
    5fd2:	d8 cf       	rjmp	.-80     	; 0x5f84 <vfprintf+0x672>
    5fd4:	91 10       	cpse	r9, r1
    5fd6:	80 52       	subi	r24, 0x20	; 32
    5fd8:	b7 01       	movw	r22, r14
    5fda:	90 e0       	ldi	r25, 0x00	; 0
    5fdc:	eb d1       	rcall	.+982    	; 0x63b4 <fputc>
    5fde:	0f 5f       	subi	r16, 0xFF	; 255
    5fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    5fe2:	d3 cf       	rjmp	.-90     	; 0x5f8a <vfprintf+0x678>
    5fe4:	23 e0       	ldi	r18, 0x03	; 3
    5fe6:	25 15       	cp	r18, r5
    5fe8:	10 f4       	brcc	.+4      	; 0x5fee <vfprintf+0x6dc>
    5fea:	83 e0       	ldi	r24, 0x03	; 3
    5fec:	c1 cf       	rjmp	.-126    	; 0x5f70 <vfprintf+0x65e>
    5fee:	51 2c       	mov	r5, r1
    5ff0:	c4 cf       	rjmp	.-120    	; 0x5f7a <vfprintf+0x668>
    5ff2:	60 96       	adiw	r28, 0x10	; 16
    5ff4:	0f b6       	in	r0, 0x3f	; 63
    5ff6:	f8 94       	cli
    5ff8:	de bf       	out	0x3e, r29	; 62
    5ffa:	0f be       	out	0x3f, r0	; 63
    5ffc:	cd bf       	out	0x3d, r28	; 61
    5ffe:	df 91       	pop	r29
    6000:	cf 91       	pop	r28
    6002:	1f 91       	pop	r17
    6004:	0f 91       	pop	r16
    6006:	ff 90       	pop	r15
    6008:	ef 90       	pop	r14
    600a:	df 90       	pop	r13
    600c:	cf 90       	pop	r12
    600e:	bf 90       	pop	r11
    6010:	af 90       	pop	r10
    6012:	9f 90       	pop	r9
    6014:	8f 90       	pop	r8
    6016:	7f 90       	pop	r7
    6018:	6f 90       	pop	r6
    601a:	5f 90       	pop	r5
    601c:	4f 90       	pop	r4
    601e:	3f 90       	pop	r3
    6020:	2f 90       	pop	r2
    6022:	08 95       	ret

00006024 <__udivmodsi4>:
    6024:	a1 e2       	ldi	r26, 0x21	; 33
    6026:	1a 2e       	mov	r1, r26
    6028:	aa 1b       	sub	r26, r26
    602a:	bb 1b       	sub	r27, r27
    602c:	fd 01       	movw	r30, r26
    602e:	0d c0       	rjmp	.+26     	; 0x604a <__udivmodsi4_ep>

00006030 <__udivmodsi4_loop>:
    6030:	aa 1f       	adc	r26, r26
    6032:	bb 1f       	adc	r27, r27
    6034:	ee 1f       	adc	r30, r30
    6036:	ff 1f       	adc	r31, r31
    6038:	a2 17       	cp	r26, r18
    603a:	b3 07       	cpc	r27, r19
    603c:	e4 07       	cpc	r30, r20
    603e:	f5 07       	cpc	r31, r21
    6040:	20 f0       	brcs	.+8      	; 0x604a <__udivmodsi4_ep>
    6042:	a2 1b       	sub	r26, r18
    6044:	b3 0b       	sbc	r27, r19
    6046:	e4 0b       	sbc	r30, r20
    6048:	f5 0b       	sbc	r31, r21

0000604a <__udivmodsi4_ep>:
    604a:	66 1f       	adc	r22, r22
    604c:	77 1f       	adc	r23, r23
    604e:	88 1f       	adc	r24, r24
    6050:	99 1f       	adc	r25, r25
    6052:	1a 94       	dec	r1
    6054:	69 f7       	brne	.-38     	; 0x6030 <__udivmodsi4_loop>
    6056:	60 95       	com	r22
    6058:	70 95       	com	r23
    605a:	80 95       	com	r24
    605c:	90 95       	com	r25
    605e:	9b 01       	movw	r18, r22
    6060:	ac 01       	movw	r20, r24
    6062:	bd 01       	movw	r22, r26
    6064:	cf 01       	movw	r24, r30
    6066:	08 95       	ret

00006068 <__divmodsi4>:
    6068:	05 2e       	mov	r0, r21
    606a:	97 fb       	bst	r25, 7
    606c:	16 f4       	brtc	.+4      	; 0x6072 <__divmodsi4+0xa>
    606e:	00 94       	com	r0
    6070:	0f d0       	rcall	.+30     	; 0x6090 <__negsi2>
    6072:	57 fd       	sbrc	r21, 7
    6074:	05 d0       	rcall	.+10     	; 0x6080 <__divmodsi4_neg2>
    6076:	d6 df       	rcall	.-84     	; 0x6024 <__udivmodsi4>
    6078:	07 fc       	sbrc	r0, 7
    607a:	02 d0       	rcall	.+4      	; 0x6080 <__divmodsi4_neg2>
    607c:	46 f4       	brtc	.+16     	; 0x608e <__divmodsi4_exit>
    607e:	08 c0       	rjmp	.+16     	; 0x6090 <__negsi2>

00006080 <__divmodsi4_neg2>:
    6080:	50 95       	com	r21
    6082:	40 95       	com	r20
    6084:	30 95       	com	r19
    6086:	21 95       	neg	r18
    6088:	3f 4f       	sbci	r19, 0xFF	; 255
    608a:	4f 4f       	sbci	r20, 0xFF	; 255
    608c:	5f 4f       	sbci	r21, 0xFF	; 255

0000608e <__divmodsi4_exit>:
    608e:	08 95       	ret

00006090 <__negsi2>:
    6090:	90 95       	com	r25
    6092:	80 95       	com	r24
    6094:	70 95       	com	r23
    6096:	61 95       	neg	r22
    6098:	7f 4f       	sbci	r23, 0xFF	; 255
    609a:	8f 4f       	sbci	r24, 0xFF	; 255
    609c:	9f 4f       	sbci	r25, 0xFF	; 255
    609e:	08 95       	ret

000060a0 <__tablejump2__>:
    60a0:	ee 0f       	add	r30, r30
    60a2:	ff 1f       	adc	r31, r31
    60a4:	88 1f       	adc	r24, r24
    60a6:	8b bf       	out	0x3b, r24	; 59
    60a8:	07 90       	elpm	r0, Z+
    60aa:	f6 91       	elpm	r31, Z
    60ac:	e0 2d       	mov	r30, r0
    60ae:	19 94       	eijmp

000060b0 <__muluhisi3>:
    60b0:	09 d0       	rcall	.+18     	; 0x60c4 <__umulhisi3>
    60b2:	a5 9f       	mul	r26, r21
    60b4:	90 0d       	add	r25, r0
    60b6:	b4 9f       	mul	r27, r20
    60b8:	90 0d       	add	r25, r0
    60ba:	a4 9f       	mul	r26, r20
    60bc:	80 0d       	add	r24, r0
    60be:	91 1d       	adc	r25, r1
    60c0:	11 24       	eor	r1, r1
    60c2:	08 95       	ret

000060c4 <__umulhisi3>:
    60c4:	a2 9f       	mul	r26, r18
    60c6:	b0 01       	movw	r22, r0
    60c8:	b3 9f       	mul	r27, r19
    60ca:	c0 01       	movw	r24, r0
    60cc:	a3 9f       	mul	r26, r19
    60ce:	70 0d       	add	r23, r0
    60d0:	81 1d       	adc	r24, r1
    60d2:	11 24       	eor	r1, r1
    60d4:	91 1d       	adc	r25, r1
    60d6:	b2 9f       	mul	r27, r18
    60d8:	70 0d       	add	r23, r0
    60da:	81 1d       	adc	r24, r1
    60dc:	11 24       	eor	r1, r1
    60de:	91 1d       	adc	r25, r1
    60e0:	08 95       	ret

000060e2 <do_rand>:
    60e2:	8f 92       	push	r8
    60e4:	9f 92       	push	r9
    60e6:	af 92       	push	r10
    60e8:	bf 92       	push	r11
    60ea:	cf 92       	push	r12
    60ec:	df 92       	push	r13
    60ee:	ef 92       	push	r14
    60f0:	ff 92       	push	r15
    60f2:	cf 93       	push	r28
    60f4:	df 93       	push	r29
    60f6:	ec 01       	movw	r28, r24
    60f8:	68 81       	ld	r22, Y
    60fa:	79 81       	ldd	r23, Y+1	; 0x01
    60fc:	8a 81       	ldd	r24, Y+2	; 0x02
    60fe:	9b 81       	ldd	r25, Y+3	; 0x03
    6100:	61 15       	cp	r22, r1
    6102:	71 05       	cpc	r23, r1
    6104:	81 05       	cpc	r24, r1
    6106:	91 05       	cpc	r25, r1
    6108:	21 f4       	brne	.+8      	; 0x6112 <do_rand+0x30>
    610a:	64 e2       	ldi	r22, 0x24	; 36
    610c:	79 ed       	ldi	r23, 0xD9	; 217
    610e:	8b e5       	ldi	r24, 0x5B	; 91
    6110:	97 e0       	ldi	r25, 0x07	; 7
    6112:	2d e1       	ldi	r18, 0x1D	; 29
    6114:	33 ef       	ldi	r19, 0xF3	; 243
    6116:	41 e0       	ldi	r20, 0x01	; 1
    6118:	50 e0       	ldi	r21, 0x00	; 0
    611a:	a6 df       	rcall	.-180    	; 0x6068 <__divmodsi4>
    611c:	49 01       	movw	r8, r18
    611e:	5a 01       	movw	r10, r20
    6120:	9b 01       	movw	r18, r22
    6122:	ac 01       	movw	r20, r24
    6124:	a7 ea       	ldi	r26, 0xA7	; 167
    6126:	b1 e4       	ldi	r27, 0x41	; 65
    6128:	c3 df       	rcall	.-122    	; 0x60b0 <__muluhisi3>
    612a:	6b 01       	movw	r12, r22
    612c:	7c 01       	movw	r14, r24
    612e:	ac ee       	ldi	r26, 0xEC	; 236
    6130:	b4 ef       	ldi	r27, 0xF4	; 244
    6132:	a5 01       	movw	r20, r10
    6134:	94 01       	movw	r18, r8
    6136:	14 d2       	rcall	.+1064   	; 0x6560 <__mulohisi3>
    6138:	dc 01       	movw	r26, r24
    613a:	cb 01       	movw	r24, r22
    613c:	8c 0d       	add	r24, r12
    613e:	9d 1d       	adc	r25, r13
    6140:	ae 1d       	adc	r26, r14
    6142:	bf 1d       	adc	r27, r15
    6144:	b7 ff       	sbrs	r27, 7
    6146:	03 c0       	rjmp	.+6      	; 0x614e <do_rand+0x6c>
    6148:	01 97       	sbiw	r24, 0x01	; 1
    614a:	a1 09       	sbc	r26, r1
    614c:	b0 48       	sbci	r27, 0x80	; 128
    614e:	88 83       	st	Y, r24
    6150:	99 83       	std	Y+1, r25	; 0x01
    6152:	aa 83       	std	Y+2, r26	; 0x02
    6154:	bb 83       	std	Y+3, r27	; 0x03
    6156:	9f 77       	andi	r25, 0x7F	; 127
    6158:	df 91       	pop	r29
    615a:	cf 91       	pop	r28
    615c:	ff 90       	pop	r15
    615e:	ef 90       	pop	r14
    6160:	df 90       	pop	r13
    6162:	cf 90       	pop	r12
    6164:	bf 90       	pop	r11
    6166:	af 90       	pop	r10
    6168:	9f 90       	pop	r9
    616a:	8f 90       	pop	r8
    616c:	08 95       	ret

0000616e <rand_r>:
    616e:	b9 cf       	rjmp	.-142    	; 0x60e2 <do_rand>

00006170 <rand>:
    6170:	80 e0       	ldi	r24, 0x00	; 0
    6172:	92 e0       	ldi	r25, 0x02	; 2
    6174:	b6 cf       	rjmp	.-148    	; 0x60e2 <do_rand>

00006176 <srand>:
    6176:	a0 e0       	ldi	r26, 0x00	; 0
    6178:	b0 e0       	ldi	r27, 0x00	; 0
    617a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    617e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    6182:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    6186:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    618a:	08 95       	ret

0000618c <__ftoa_engine>:
    618c:	28 30       	cpi	r18, 0x08	; 8
    618e:	08 f0       	brcs	.+2      	; 0x6192 <__ftoa_engine+0x6>
    6190:	27 e0       	ldi	r18, 0x07	; 7
    6192:	33 27       	eor	r19, r19
    6194:	da 01       	movw	r26, r20
    6196:	99 0f       	add	r25, r25
    6198:	31 1d       	adc	r19, r1
    619a:	87 fd       	sbrc	r24, 7
    619c:	91 60       	ori	r25, 0x01	; 1
    619e:	00 96       	adiw	r24, 0x00	; 0
    61a0:	61 05       	cpc	r22, r1
    61a2:	71 05       	cpc	r23, r1
    61a4:	39 f4       	brne	.+14     	; 0x61b4 <__ftoa_engine+0x28>
    61a6:	32 60       	ori	r19, 0x02	; 2
    61a8:	2e 5f       	subi	r18, 0xFE	; 254
    61aa:	3d 93       	st	X+, r19
    61ac:	30 e3       	ldi	r19, 0x30	; 48
    61ae:	2a 95       	dec	r18
    61b0:	e1 f7       	brne	.-8      	; 0x61aa <__ftoa_engine+0x1e>
    61b2:	08 95       	ret
    61b4:	9f 3f       	cpi	r25, 0xFF	; 255
    61b6:	30 f0       	brcs	.+12     	; 0x61c4 <__ftoa_engine+0x38>
    61b8:	80 38       	cpi	r24, 0x80	; 128
    61ba:	71 05       	cpc	r23, r1
    61bc:	61 05       	cpc	r22, r1
    61be:	09 f0       	breq	.+2      	; 0x61c2 <__ftoa_engine+0x36>
    61c0:	3c 5f       	subi	r19, 0xFC	; 252
    61c2:	3c 5f       	subi	r19, 0xFC	; 252
    61c4:	3d 93       	st	X+, r19
    61c6:	91 30       	cpi	r25, 0x01	; 1
    61c8:	08 f0       	brcs	.+2      	; 0x61cc <__ftoa_engine+0x40>
    61ca:	80 68       	ori	r24, 0x80	; 128
    61cc:	91 1d       	adc	r25, r1
    61ce:	df 93       	push	r29
    61d0:	cf 93       	push	r28
    61d2:	1f 93       	push	r17
    61d4:	0f 93       	push	r16
    61d6:	ff 92       	push	r15
    61d8:	ef 92       	push	r14
    61da:	19 2f       	mov	r17, r25
    61dc:	98 7f       	andi	r25, 0xF8	; 248
    61de:	96 95       	lsr	r25
    61e0:	e9 2f       	mov	r30, r25
    61e2:	96 95       	lsr	r25
    61e4:	96 95       	lsr	r25
    61e6:	e9 0f       	add	r30, r25
    61e8:	ff 27       	eor	r31, r31
    61ea:	ea 54       	subi	r30, 0x4A	; 74
    61ec:	fe 4f       	sbci	r31, 0xFE	; 254
    61ee:	99 27       	eor	r25, r25
    61f0:	33 27       	eor	r19, r19
    61f2:	ee 24       	eor	r14, r14
    61f4:	ff 24       	eor	r15, r15
    61f6:	a7 01       	movw	r20, r14
    61f8:	e7 01       	movw	r28, r14
    61fa:	05 90       	lpm	r0, Z+
    61fc:	08 94       	sec
    61fe:	07 94       	ror	r0
    6200:	28 f4       	brcc	.+10     	; 0x620c <__ftoa_engine+0x80>
    6202:	36 0f       	add	r19, r22
    6204:	e7 1e       	adc	r14, r23
    6206:	f8 1e       	adc	r15, r24
    6208:	49 1f       	adc	r20, r25
    620a:	51 1d       	adc	r21, r1
    620c:	66 0f       	add	r22, r22
    620e:	77 1f       	adc	r23, r23
    6210:	88 1f       	adc	r24, r24
    6212:	99 1f       	adc	r25, r25
    6214:	06 94       	lsr	r0
    6216:	a1 f7       	brne	.-24     	; 0x6200 <__ftoa_engine+0x74>
    6218:	05 90       	lpm	r0, Z+
    621a:	07 94       	ror	r0
    621c:	28 f4       	brcc	.+10     	; 0x6228 <__ftoa_engine+0x9c>
    621e:	e7 0e       	add	r14, r23
    6220:	f8 1e       	adc	r15, r24
    6222:	49 1f       	adc	r20, r25
    6224:	56 1f       	adc	r21, r22
    6226:	c1 1d       	adc	r28, r1
    6228:	77 0f       	add	r23, r23
    622a:	88 1f       	adc	r24, r24
    622c:	99 1f       	adc	r25, r25
    622e:	66 1f       	adc	r22, r22
    6230:	06 94       	lsr	r0
    6232:	a1 f7       	brne	.-24     	; 0x621c <__ftoa_engine+0x90>
    6234:	05 90       	lpm	r0, Z+
    6236:	07 94       	ror	r0
    6238:	28 f4       	brcc	.+10     	; 0x6244 <__ftoa_engine+0xb8>
    623a:	f8 0e       	add	r15, r24
    623c:	49 1f       	adc	r20, r25
    623e:	56 1f       	adc	r21, r22
    6240:	c7 1f       	adc	r28, r23
    6242:	d1 1d       	adc	r29, r1
    6244:	88 0f       	add	r24, r24
    6246:	99 1f       	adc	r25, r25
    6248:	66 1f       	adc	r22, r22
    624a:	77 1f       	adc	r23, r23
    624c:	06 94       	lsr	r0
    624e:	a1 f7       	brne	.-24     	; 0x6238 <__ftoa_engine+0xac>
    6250:	05 90       	lpm	r0, Z+
    6252:	07 94       	ror	r0
    6254:	20 f4       	brcc	.+8      	; 0x625e <__ftoa_engine+0xd2>
    6256:	49 0f       	add	r20, r25
    6258:	56 1f       	adc	r21, r22
    625a:	c7 1f       	adc	r28, r23
    625c:	d8 1f       	adc	r29, r24
    625e:	99 0f       	add	r25, r25
    6260:	66 1f       	adc	r22, r22
    6262:	77 1f       	adc	r23, r23
    6264:	88 1f       	adc	r24, r24
    6266:	06 94       	lsr	r0
    6268:	a9 f7       	brne	.-22     	; 0x6254 <__ftoa_engine+0xc8>
    626a:	84 91       	lpm	r24, Z
    626c:	10 95       	com	r17
    626e:	17 70       	andi	r17, 0x07	; 7
    6270:	41 f0       	breq	.+16     	; 0x6282 <__ftoa_engine+0xf6>
    6272:	d6 95       	lsr	r29
    6274:	c7 95       	ror	r28
    6276:	57 95       	ror	r21
    6278:	47 95       	ror	r20
    627a:	f7 94       	ror	r15
    627c:	e7 94       	ror	r14
    627e:	1a 95       	dec	r17
    6280:	c1 f7       	brne	.-16     	; 0x6272 <__ftoa_engine+0xe6>
    6282:	ec e5       	ldi	r30, 0x5C	; 92
    6284:	f1 e0       	ldi	r31, 0x01	; 1
    6286:	68 94       	set
    6288:	15 90       	lpm	r1, Z+
    628a:	15 91       	lpm	r17, Z+
    628c:	35 91       	lpm	r19, Z+
    628e:	65 91       	lpm	r22, Z+
    6290:	95 91       	lpm	r25, Z+
    6292:	05 90       	lpm	r0, Z+
    6294:	7f e2       	ldi	r23, 0x2F	; 47
    6296:	73 95       	inc	r23
    6298:	e1 18       	sub	r14, r1
    629a:	f1 0a       	sbc	r15, r17
    629c:	43 0b       	sbc	r20, r19
    629e:	56 0b       	sbc	r21, r22
    62a0:	c9 0b       	sbc	r28, r25
    62a2:	d0 09       	sbc	r29, r0
    62a4:	c0 f7       	brcc	.-16     	; 0x6296 <__ftoa_engine+0x10a>
    62a6:	e1 0c       	add	r14, r1
    62a8:	f1 1e       	adc	r15, r17
    62aa:	43 1f       	adc	r20, r19
    62ac:	56 1f       	adc	r21, r22
    62ae:	c9 1f       	adc	r28, r25
    62b0:	d0 1d       	adc	r29, r0
    62b2:	7e f4       	brtc	.+30     	; 0x62d2 <__ftoa_engine+0x146>
    62b4:	70 33       	cpi	r23, 0x30	; 48
    62b6:	11 f4       	brne	.+4      	; 0x62bc <__ftoa_engine+0x130>
    62b8:	8a 95       	dec	r24
    62ba:	e6 cf       	rjmp	.-52     	; 0x6288 <__ftoa_engine+0xfc>
    62bc:	e8 94       	clt
    62be:	01 50       	subi	r16, 0x01	; 1
    62c0:	30 f0       	brcs	.+12     	; 0x62ce <__ftoa_engine+0x142>
    62c2:	08 0f       	add	r16, r24
    62c4:	0a f4       	brpl	.+2      	; 0x62c8 <__ftoa_engine+0x13c>
    62c6:	00 27       	eor	r16, r16
    62c8:	02 17       	cp	r16, r18
    62ca:	08 f4       	brcc	.+2      	; 0x62ce <__ftoa_engine+0x142>
    62cc:	20 2f       	mov	r18, r16
    62ce:	23 95       	inc	r18
    62d0:	02 2f       	mov	r16, r18
    62d2:	7a 33       	cpi	r23, 0x3A	; 58
    62d4:	28 f0       	brcs	.+10     	; 0x62e0 <__ftoa_engine+0x154>
    62d6:	79 e3       	ldi	r23, 0x39	; 57
    62d8:	7d 93       	st	X+, r23
    62da:	2a 95       	dec	r18
    62dc:	e9 f7       	brne	.-6      	; 0x62d8 <__ftoa_engine+0x14c>
    62de:	10 c0       	rjmp	.+32     	; 0x6300 <__ftoa_engine+0x174>
    62e0:	7d 93       	st	X+, r23
    62e2:	2a 95       	dec	r18
    62e4:	89 f6       	brne	.-94     	; 0x6288 <__ftoa_engine+0xfc>
    62e6:	06 94       	lsr	r0
    62e8:	97 95       	ror	r25
    62ea:	67 95       	ror	r22
    62ec:	37 95       	ror	r19
    62ee:	17 95       	ror	r17
    62f0:	17 94       	ror	r1
    62f2:	e1 18       	sub	r14, r1
    62f4:	f1 0a       	sbc	r15, r17
    62f6:	43 0b       	sbc	r20, r19
    62f8:	56 0b       	sbc	r21, r22
    62fa:	c9 0b       	sbc	r28, r25
    62fc:	d0 09       	sbc	r29, r0
    62fe:	98 f0       	brcs	.+38     	; 0x6326 <__ftoa_engine+0x19a>
    6300:	23 95       	inc	r18
    6302:	7e 91       	ld	r23, -X
    6304:	73 95       	inc	r23
    6306:	7a 33       	cpi	r23, 0x3A	; 58
    6308:	08 f0       	brcs	.+2      	; 0x630c <__ftoa_engine+0x180>
    630a:	70 e3       	ldi	r23, 0x30	; 48
    630c:	7c 93       	st	X, r23
    630e:	20 13       	cpse	r18, r16
    6310:	b8 f7       	brcc	.-18     	; 0x6300 <__ftoa_engine+0x174>
    6312:	7e 91       	ld	r23, -X
    6314:	70 61       	ori	r23, 0x10	; 16
    6316:	7d 93       	st	X+, r23
    6318:	30 f0       	brcs	.+12     	; 0x6326 <__ftoa_engine+0x19a>
    631a:	83 95       	inc	r24
    631c:	71 e3       	ldi	r23, 0x31	; 49
    631e:	7d 93       	st	X+, r23
    6320:	70 e3       	ldi	r23, 0x30	; 48
    6322:	2a 95       	dec	r18
    6324:	e1 f7       	brne	.-8      	; 0x631e <__ftoa_engine+0x192>
    6326:	11 24       	eor	r1, r1
    6328:	ef 90       	pop	r14
    632a:	ff 90       	pop	r15
    632c:	0f 91       	pop	r16
    632e:	1f 91       	pop	r17
    6330:	cf 91       	pop	r28
    6332:	df 91       	pop	r29
    6334:	99 27       	eor	r25, r25
    6336:	87 fd       	sbrc	r24, 7
    6338:	90 95       	com	r25
    633a:	08 95       	ret

0000633c <strnlen_P>:
    633c:	fc 01       	movw	r30, r24
    633e:	05 90       	lpm	r0, Z+
    6340:	61 50       	subi	r22, 0x01	; 1
    6342:	70 40       	sbci	r23, 0x00	; 0
    6344:	01 10       	cpse	r0, r1
    6346:	d8 f7       	brcc	.-10     	; 0x633e <strnlen_P+0x2>
    6348:	80 95       	com	r24
    634a:	90 95       	com	r25
    634c:	8e 0f       	add	r24, r30
    634e:	9f 1f       	adc	r25, r31
    6350:	08 95       	ret

00006352 <memcpy>:
    6352:	fb 01       	movw	r30, r22
    6354:	dc 01       	movw	r26, r24
    6356:	02 c0       	rjmp	.+4      	; 0x635c <memcpy+0xa>
    6358:	01 90       	ld	r0, Z+
    635a:	0d 92       	st	X+, r0
    635c:	41 50       	subi	r20, 0x01	; 1
    635e:	50 40       	sbci	r21, 0x00	; 0
    6360:	d8 f7       	brcc	.-10     	; 0x6358 <memcpy+0x6>
    6362:	08 95       	ret

00006364 <strncmp>:
    6364:	fb 01       	movw	r30, r22
    6366:	dc 01       	movw	r26, r24
    6368:	41 50       	subi	r20, 0x01	; 1
    636a:	50 40       	sbci	r21, 0x00	; 0
    636c:	30 f0       	brcs	.+12     	; 0x637a <strncmp+0x16>
    636e:	8d 91       	ld	r24, X+
    6370:	01 90       	ld	r0, Z+
    6372:	80 19       	sub	r24, r0
    6374:	19 f4       	brne	.+6      	; 0x637c <strncmp+0x18>
    6376:	00 20       	and	r0, r0
    6378:	b9 f7       	brne	.-18     	; 0x6368 <strncmp+0x4>
    637a:	88 1b       	sub	r24, r24
    637c:	99 0b       	sbc	r25, r25
    637e:	08 95       	ret

00006380 <strncpy>:
    6380:	fb 01       	movw	r30, r22
    6382:	dc 01       	movw	r26, r24
    6384:	41 50       	subi	r20, 0x01	; 1
    6386:	50 40       	sbci	r21, 0x00	; 0
    6388:	48 f0       	brcs	.+18     	; 0x639c <strncpy+0x1c>
    638a:	01 90       	ld	r0, Z+
    638c:	0d 92       	st	X+, r0
    638e:	00 20       	and	r0, r0
    6390:	c9 f7       	brne	.-14     	; 0x6384 <strncpy+0x4>
    6392:	01 c0       	rjmp	.+2      	; 0x6396 <strncpy+0x16>
    6394:	1d 92       	st	X+, r1
    6396:	41 50       	subi	r20, 0x01	; 1
    6398:	50 40       	sbci	r21, 0x00	; 0
    639a:	e0 f7       	brcc	.-8      	; 0x6394 <strncpy+0x14>
    639c:	08 95       	ret

0000639e <strnlen>:
    639e:	fc 01       	movw	r30, r24
    63a0:	61 50       	subi	r22, 0x01	; 1
    63a2:	70 40       	sbci	r23, 0x00	; 0
    63a4:	01 90       	ld	r0, Z+
    63a6:	01 10       	cpse	r0, r1
    63a8:	d8 f7       	brcc	.-10     	; 0x63a0 <strnlen+0x2>
    63aa:	80 95       	com	r24
    63ac:	90 95       	com	r25
    63ae:	8e 0f       	add	r24, r30
    63b0:	9f 1f       	adc	r25, r31
    63b2:	08 95       	ret

000063b4 <fputc>:
    63b4:	0f 93       	push	r16
    63b6:	1f 93       	push	r17
    63b8:	cf 93       	push	r28
    63ba:	df 93       	push	r29
    63bc:	fb 01       	movw	r30, r22
    63be:	23 81       	ldd	r18, Z+3	; 0x03
    63c0:	21 fd       	sbrc	r18, 1
    63c2:	03 c0       	rjmp	.+6      	; 0x63ca <fputc+0x16>
    63c4:	8f ef       	ldi	r24, 0xFF	; 255
    63c6:	9f ef       	ldi	r25, 0xFF	; 255
    63c8:	2c c0       	rjmp	.+88     	; 0x6422 <fputc+0x6e>
    63ca:	22 ff       	sbrs	r18, 2
    63cc:	16 c0       	rjmp	.+44     	; 0x63fa <fputc+0x46>
    63ce:	46 81       	ldd	r20, Z+6	; 0x06
    63d0:	57 81       	ldd	r21, Z+7	; 0x07
    63d2:	24 81       	ldd	r18, Z+4	; 0x04
    63d4:	35 81       	ldd	r19, Z+5	; 0x05
    63d6:	42 17       	cp	r20, r18
    63d8:	53 07       	cpc	r21, r19
    63da:	44 f4       	brge	.+16     	; 0x63ec <fputc+0x38>
    63dc:	a0 81       	ld	r26, Z
    63de:	b1 81       	ldd	r27, Z+1	; 0x01
    63e0:	9d 01       	movw	r18, r26
    63e2:	2f 5f       	subi	r18, 0xFF	; 255
    63e4:	3f 4f       	sbci	r19, 0xFF	; 255
    63e6:	31 83       	std	Z+1, r19	; 0x01
    63e8:	20 83       	st	Z, r18
    63ea:	8c 93       	st	X, r24
    63ec:	26 81       	ldd	r18, Z+6	; 0x06
    63ee:	37 81       	ldd	r19, Z+7	; 0x07
    63f0:	2f 5f       	subi	r18, 0xFF	; 255
    63f2:	3f 4f       	sbci	r19, 0xFF	; 255
    63f4:	37 83       	std	Z+7, r19	; 0x07
    63f6:	26 83       	std	Z+6, r18	; 0x06
    63f8:	14 c0       	rjmp	.+40     	; 0x6422 <fputc+0x6e>
    63fa:	8b 01       	movw	r16, r22
    63fc:	ec 01       	movw	r28, r24
    63fe:	fb 01       	movw	r30, r22
    6400:	00 84       	ldd	r0, Z+8	; 0x08
    6402:	f1 85       	ldd	r31, Z+9	; 0x09
    6404:	e0 2d       	mov	r30, r0
    6406:	19 95       	eicall
    6408:	89 2b       	or	r24, r25
    640a:	e1 f6       	brne	.-72     	; 0x63c4 <fputc+0x10>
    640c:	d8 01       	movw	r26, r16
    640e:	16 96       	adiw	r26, 0x06	; 6
    6410:	8d 91       	ld	r24, X+
    6412:	9c 91       	ld	r25, X
    6414:	17 97       	sbiw	r26, 0x07	; 7
    6416:	01 96       	adiw	r24, 0x01	; 1
    6418:	17 96       	adiw	r26, 0x07	; 7
    641a:	9c 93       	st	X, r25
    641c:	8e 93       	st	-X, r24
    641e:	16 97       	sbiw	r26, 0x06	; 6
    6420:	ce 01       	movw	r24, r28
    6422:	df 91       	pop	r29
    6424:	cf 91       	pop	r28
    6426:	1f 91       	pop	r17
    6428:	0f 91       	pop	r16
    642a:	08 95       	ret

0000642c <printf>:
    642c:	cf 93       	push	r28
    642e:	df 93       	push	r29
    6430:	cd b7       	in	r28, 0x3d	; 61
    6432:	de b7       	in	r29, 0x3e	; 62
    6434:	ae 01       	movw	r20, r28
    6436:	4a 5f       	subi	r20, 0xFA	; 250
    6438:	5f 4f       	sbci	r21, 0xFF	; 255
    643a:	fa 01       	movw	r30, r20
    643c:	61 91       	ld	r22, Z+
    643e:	71 91       	ld	r23, Z+
    6440:	af 01       	movw	r20, r30
    6442:	80 91 dc 1c 	lds	r24, 0x1CDC	; 0x801cdc <__iob+0x2>
    6446:	90 91 dd 1c 	lds	r25, 0x1CDD	; 0x801cdd <__iob+0x3>
    644a:	63 da       	rcall	.-2874   	; 0x5912 <vfprintf>
    644c:	df 91       	pop	r29
    644e:	cf 91       	pop	r28
    6450:	08 95       	ret

00006452 <printf_P>:
    6452:	0f 93       	push	r16
    6454:	1f 93       	push	r17
    6456:	cf 93       	push	r28
    6458:	df 93       	push	r29
    645a:	cd b7       	in	r28, 0x3d	; 61
    645c:	de b7       	in	r29, 0x3e	; 62
    645e:	ae 01       	movw	r20, r28
    6460:	48 5f       	subi	r20, 0xF8	; 248
    6462:	5f 4f       	sbci	r21, 0xFF	; 255
    6464:	da 01       	movw	r26, r20
    6466:	6d 91       	ld	r22, X+
    6468:	7d 91       	ld	r23, X+
    646a:	ad 01       	movw	r20, r26
    646c:	0a ed       	ldi	r16, 0xDA	; 218
    646e:	1c e1       	ldi	r17, 0x1C	; 28
    6470:	f8 01       	movw	r30, r16
    6472:	82 81       	ldd	r24, Z+2	; 0x02
    6474:	93 81       	ldd	r25, Z+3	; 0x03
    6476:	dc 01       	movw	r26, r24
    6478:	13 96       	adiw	r26, 0x03	; 3
    647a:	2c 91       	ld	r18, X
    647c:	13 97       	sbiw	r26, 0x03	; 3
    647e:	28 60       	ori	r18, 0x08	; 8
    6480:	13 96       	adiw	r26, 0x03	; 3
    6482:	2c 93       	st	X, r18
    6484:	46 da       	rcall	.-2932   	; 0x5912 <vfprintf>
    6486:	d8 01       	movw	r26, r16
    6488:	12 96       	adiw	r26, 0x02	; 2
    648a:	ed 91       	ld	r30, X+
    648c:	fc 91       	ld	r31, X
    648e:	13 97       	sbiw	r26, 0x03	; 3
    6490:	23 81       	ldd	r18, Z+3	; 0x03
    6492:	27 7f       	andi	r18, 0xF7	; 247
    6494:	23 83       	std	Z+3, r18	; 0x03
    6496:	df 91       	pop	r29
    6498:	cf 91       	pop	r28
    649a:	1f 91       	pop	r17
    649c:	0f 91       	pop	r16
    649e:	08 95       	ret

000064a0 <__ultoa_invert>:
    64a0:	fa 01       	movw	r30, r20
    64a2:	aa 27       	eor	r26, r26
    64a4:	28 30       	cpi	r18, 0x08	; 8
    64a6:	51 f1       	breq	.+84     	; 0x64fc <__ultoa_invert+0x5c>
    64a8:	20 31       	cpi	r18, 0x10	; 16
    64aa:	81 f1       	breq	.+96     	; 0x650c <__ultoa_invert+0x6c>
    64ac:	e8 94       	clt
    64ae:	6f 93       	push	r22
    64b0:	6e 7f       	andi	r22, 0xFE	; 254
    64b2:	6e 5f       	subi	r22, 0xFE	; 254
    64b4:	7f 4f       	sbci	r23, 0xFF	; 255
    64b6:	8f 4f       	sbci	r24, 0xFF	; 255
    64b8:	9f 4f       	sbci	r25, 0xFF	; 255
    64ba:	af 4f       	sbci	r26, 0xFF	; 255
    64bc:	b1 e0       	ldi	r27, 0x01	; 1
    64be:	3e d0       	rcall	.+124    	; 0x653c <__ultoa_invert+0x9c>
    64c0:	b4 e0       	ldi	r27, 0x04	; 4
    64c2:	3c d0       	rcall	.+120    	; 0x653c <__ultoa_invert+0x9c>
    64c4:	67 0f       	add	r22, r23
    64c6:	78 1f       	adc	r23, r24
    64c8:	89 1f       	adc	r24, r25
    64ca:	9a 1f       	adc	r25, r26
    64cc:	a1 1d       	adc	r26, r1
    64ce:	68 0f       	add	r22, r24
    64d0:	79 1f       	adc	r23, r25
    64d2:	8a 1f       	adc	r24, r26
    64d4:	91 1d       	adc	r25, r1
    64d6:	a1 1d       	adc	r26, r1
    64d8:	6a 0f       	add	r22, r26
    64da:	71 1d       	adc	r23, r1
    64dc:	81 1d       	adc	r24, r1
    64de:	91 1d       	adc	r25, r1
    64e0:	a1 1d       	adc	r26, r1
    64e2:	20 d0       	rcall	.+64     	; 0x6524 <__ultoa_invert+0x84>
    64e4:	09 f4       	brne	.+2      	; 0x64e8 <__ultoa_invert+0x48>
    64e6:	68 94       	set
    64e8:	3f 91       	pop	r19
    64ea:	2a e0       	ldi	r18, 0x0A	; 10
    64ec:	26 9f       	mul	r18, r22
    64ee:	11 24       	eor	r1, r1
    64f0:	30 19       	sub	r19, r0
    64f2:	30 5d       	subi	r19, 0xD0	; 208
    64f4:	31 93       	st	Z+, r19
    64f6:	de f6       	brtc	.-74     	; 0x64ae <__ultoa_invert+0xe>
    64f8:	cf 01       	movw	r24, r30
    64fa:	08 95       	ret
    64fc:	46 2f       	mov	r20, r22
    64fe:	47 70       	andi	r20, 0x07	; 7
    6500:	40 5d       	subi	r20, 0xD0	; 208
    6502:	41 93       	st	Z+, r20
    6504:	b3 e0       	ldi	r27, 0x03	; 3
    6506:	0f d0       	rcall	.+30     	; 0x6526 <__ultoa_invert+0x86>
    6508:	c9 f7       	brne	.-14     	; 0x64fc <__ultoa_invert+0x5c>
    650a:	f6 cf       	rjmp	.-20     	; 0x64f8 <__ultoa_invert+0x58>
    650c:	46 2f       	mov	r20, r22
    650e:	4f 70       	andi	r20, 0x0F	; 15
    6510:	40 5d       	subi	r20, 0xD0	; 208
    6512:	4a 33       	cpi	r20, 0x3A	; 58
    6514:	18 f0       	brcs	.+6      	; 0x651c <__ultoa_invert+0x7c>
    6516:	49 5d       	subi	r20, 0xD9	; 217
    6518:	31 fd       	sbrc	r19, 1
    651a:	40 52       	subi	r20, 0x20	; 32
    651c:	41 93       	st	Z+, r20
    651e:	02 d0       	rcall	.+4      	; 0x6524 <__ultoa_invert+0x84>
    6520:	a9 f7       	brne	.-22     	; 0x650c <__ultoa_invert+0x6c>
    6522:	ea cf       	rjmp	.-44     	; 0x64f8 <__ultoa_invert+0x58>
    6524:	b4 e0       	ldi	r27, 0x04	; 4
    6526:	a6 95       	lsr	r26
    6528:	97 95       	ror	r25
    652a:	87 95       	ror	r24
    652c:	77 95       	ror	r23
    652e:	67 95       	ror	r22
    6530:	ba 95       	dec	r27
    6532:	c9 f7       	brne	.-14     	; 0x6526 <__ultoa_invert+0x86>
    6534:	00 97       	sbiw	r24, 0x00	; 0
    6536:	61 05       	cpc	r22, r1
    6538:	71 05       	cpc	r23, r1
    653a:	08 95       	ret
    653c:	9b 01       	movw	r18, r22
    653e:	ac 01       	movw	r20, r24
    6540:	0a 2e       	mov	r0, r26
    6542:	06 94       	lsr	r0
    6544:	57 95       	ror	r21
    6546:	47 95       	ror	r20
    6548:	37 95       	ror	r19
    654a:	27 95       	ror	r18
    654c:	ba 95       	dec	r27
    654e:	c9 f7       	brne	.-14     	; 0x6542 <__ultoa_invert+0xa2>
    6550:	62 0f       	add	r22, r18
    6552:	73 1f       	adc	r23, r19
    6554:	84 1f       	adc	r24, r20
    6556:	95 1f       	adc	r25, r21
    6558:	a0 1d       	adc	r26, r0
    655a:	08 95       	ret

0000655c <__mulshisi3>:
    655c:	b7 ff       	sbrs	r27, 7
    655e:	a8 cd       	rjmp	.-1200   	; 0x60b0 <__muluhisi3>

00006560 <__mulohisi3>:
    6560:	a7 dd       	rcall	.-1202   	; 0x60b0 <__muluhisi3>
    6562:	82 1b       	sub	r24, r18
    6564:	93 0b       	sbc	r25, r19
    6566:	08 95       	ret

00006568 <_exit>:
    6568:	f8 94       	cli

0000656a <__stop_program>:
    656a:	ff cf       	rjmp	.-2      	; 0x656a <__stop_program>
