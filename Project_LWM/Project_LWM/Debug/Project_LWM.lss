
Project_LWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000240  00800200  00004cf6  00004d8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004cf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000173b  00800440  00800440  00004fca  2**0
                  ALLOC
  3 .noinit       00000001  00801b7b  00801b7b  00004fca  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00004fca  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005028  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000808  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b619  00000000  00000000  00005870  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b4a  00000000  00000000  00010e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000554c  00000000  00000000  000149d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001a10  00000000  00000000  00019f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002c90  00000000  00000000  0001b930  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000784f  00000000  00000000  0001e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000788  00000000  00000000  00025e0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	25 c1       	rjmp	.+586    	; 0x24c <__ctors_end>
       2:	00 00       	nop
       4:	53 c1       	rjmp	.+678    	; 0x2ac <__bad_interrupt>
       6:	00 00       	nop
       8:	51 c1       	rjmp	.+674    	; 0x2ac <__bad_interrupt>
       a:	00 00       	nop
       c:	4f c1       	rjmp	.+670    	; 0x2ac <__bad_interrupt>
       e:	00 00       	nop
      10:	4d c1       	rjmp	.+666    	; 0x2ac <__bad_interrupt>
      12:	00 00       	nop
      14:	4b c1       	rjmp	.+662    	; 0x2ac <__bad_interrupt>
      16:	00 00       	nop
      18:	49 c1       	rjmp	.+658    	; 0x2ac <__bad_interrupt>
      1a:	00 00       	nop
      1c:	47 c1       	rjmp	.+654    	; 0x2ac <__bad_interrupt>
      1e:	00 00       	nop
      20:	45 c1       	rjmp	.+650    	; 0x2ac <__bad_interrupt>
      22:	00 00       	nop
      24:	43 c1       	rjmp	.+646    	; 0x2ac <__bad_interrupt>
      26:	00 00       	nop
      28:	41 c1       	rjmp	.+642    	; 0x2ac <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3f c1       	rjmp	.+638    	; 0x2ac <__bad_interrupt>
      2e:	00 00       	nop
      30:	3d c1       	rjmp	.+634    	; 0x2ac <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__vector_13>
      38:	39 c1       	rjmp	.+626    	; 0x2ac <__bad_interrupt>
      3a:	00 00       	nop
      3c:	37 c1       	rjmp	.+622    	; 0x2ac <__bad_interrupt>
      3e:	00 00       	nop
      40:	35 c1       	rjmp	.+618    	; 0x2ac <__bad_interrupt>
      42:	00 00       	nop
      44:	33 c1       	rjmp	.+614    	; 0x2ac <__bad_interrupt>
      46:	00 00       	nop
      48:	31 c1       	rjmp	.+610    	; 0x2ac <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2f c1       	rjmp	.+606    	; 0x2ac <__bad_interrupt>
      4e:	00 00       	nop
      50:	2d c1       	rjmp	.+602    	; 0x2ac <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 cd 14 	jmp	0x299a	; 0x299a <__vector_21>
      58:	29 c1       	rjmp	.+594    	; 0x2ac <__bad_interrupt>
      5a:	00 00       	nop
      5c:	27 c1       	rjmp	.+590    	; 0x2ac <__bad_interrupt>
      5e:	00 00       	nop
      60:	25 c1       	rjmp	.+586    	; 0x2ac <__bad_interrupt>
      62:	00 00       	nop
      64:	23 c1       	rjmp	.+582    	; 0x2ac <__bad_interrupt>
      66:	00 00       	nop
      68:	21 c1       	rjmp	.+578    	; 0x2ac <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1f c1       	rjmp	.+574    	; 0x2ac <__bad_interrupt>
      6e:	00 00       	nop
      70:	1d c1       	rjmp	.+570    	; 0x2ac <__bad_interrupt>
      72:	00 00       	nop
      74:	1b c1       	rjmp	.+566    	; 0x2ac <__bad_interrupt>
      76:	00 00       	nop
      78:	19 c1       	rjmp	.+562    	; 0x2ac <__bad_interrupt>
      7a:	00 00       	nop
      7c:	17 c1       	rjmp	.+558    	; 0x2ac <__bad_interrupt>
      7e:	00 00       	nop
      80:	15 c1       	rjmp	.+554    	; 0x2ac <__bad_interrupt>
      82:	00 00       	nop
      84:	13 c1       	rjmp	.+550    	; 0x2ac <__bad_interrupt>
      86:	00 00       	nop
      88:	11 c1       	rjmp	.+546    	; 0x2ac <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0f c1       	rjmp	.+542    	; 0x2ac <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__vector_36>
      94:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__vector_37>
      98:	09 c1       	rjmp	.+530    	; 0x2ac <__bad_interrupt>
      9a:	00 00       	nop
      9c:	07 c1       	rjmp	.+526    	; 0x2ac <__bad_interrupt>
      9e:	00 00       	nop
      a0:	05 c1       	rjmp	.+522    	; 0x2ac <__bad_interrupt>
      a2:	00 00       	nop
      a4:	03 c1       	rjmp	.+518    	; 0x2ac <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__vector_42>
      ac:	ff c0       	rjmp	.+510    	; 0x2ac <__bad_interrupt>
      ae:	00 00       	nop
      b0:	fd c0       	rjmp	.+506    	; 0x2ac <__bad_interrupt>
      b2:	00 00       	nop
      b4:	fb c0       	rjmp	.+502    	; 0x2ac <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f9 c0       	rjmp	.+498    	; 0x2ac <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f7 c0       	rjmp	.+494    	; 0x2ac <__bad_interrupt>
      be:	00 00       	nop
      c0:	f5 c0       	rjmp	.+490    	; 0x2ac <__bad_interrupt>
      c2:	00 00       	nop
      c4:	f3 c0       	rjmp	.+486    	; 0x2ac <__bad_interrupt>
      c6:	00 00       	nop
      c8:	f1 c0       	rjmp	.+482    	; 0x2ac <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ef c0       	rjmp	.+478    	; 0x2ac <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ed c0       	rjmp	.+474    	; 0x2ac <__bad_interrupt>
      d2:	00 00       	nop
      d4:	eb c0       	rjmp	.+470    	; 0x2ac <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e9 c0       	rjmp	.+466    	; 0x2ac <__bad_interrupt>
      da:	00 00       	nop
      dc:	e7 c0       	rjmp	.+462    	; 0x2ac <__bad_interrupt>
      de:	00 00       	nop
      e0:	e5 c0       	rjmp	.+458    	; 0x2ac <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e3 c0       	rjmp	.+454    	; 0x2ac <__bad_interrupt>
      e6:	00 00       	nop
      e8:	e1 c0       	rjmp	.+450    	; 0x2ac <__bad_interrupt>
      ea:	00 00       	nop
      ec:	df c0       	rjmp	.+446    	; 0x2ac <__bad_interrupt>
      ee:	00 00       	nop
      f0:	dd c0       	rjmp	.+442    	; 0x2ac <__bad_interrupt>
      f2:	00 00       	nop
      f4:	db c0       	rjmp	.+438    	; 0x2ac <__bad_interrupt>
      f6:	00 00       	nop
      f8:	d9 c0       	rjmp	.+434    	; 0x2ac <__bad_interrupt>
      fa:	00 00       	nop
      fc:	d7 c0       	rjmp	.+430    	; 0x2ac <__bad_interrupt>
      fe:	00 00       	nop
     100:	d5 c0       	rjmp	.+426    	; 0x2ac <__bad_interrupt>
     102:	00 00       	nop
     104:	d3 c0       	rjmp	.+422    	; 0x2ac <__bad_interrupt>
     106:	00 00       	nop
     108:	d1 c0       	rjmp	.+418    	; 0x2ac <__bad_interrupt>
     10a:	00 00       	nop
     10c:	cf c0       	rjmp	.+414    	; 0x2ac <__bad_interrupt>
     10e:	00 00       	nop
     110:	cd c0       	rjmp	.+410    	; 0x2ac <__bad_interrupt>
     112:	00 00       	nop
     114:	cb c0       	rjmp	.+406    	; 0x2ac <__bad_interrupt>
     116:	00 00       	nop
     118:	c9 c0       	rjmp	.+402    	; 0x2ac <__bad_interrupt>
     11a:	00 00       	nop
     11c:	c7 c0       	rjmp	.+398    	; 0x2ac <__bad_interrupt>
     11e:	00 00       	nop
     120:	c5 c0       	rjmp	.+394    	; 0x2ac <__bad_interrupt>
     122:	00 00       	nop
     124:	c3 c0       	rjmp	.+390    	; 0x2ac <__bad_interrupt>
     126:	00 00       	nop
     128:	c1 c0       	rjmp	.+386    	; 0x2ac <__bad_interrupt>
     12a:	00 00       	nop
     12c:	bf c0       	rjmp	.+382    	; 0x2ac <__bad_interrupt>
     12e:	00 00       	nop
     130:	bd c0       	rjmp	.+378    	; 0x2ac <__bad_interrupt>
     132:	00 00       	nop
     134:	e3 12       	cpse	r14, r19
     136:	e6 12       	cpse	r14, r22
     138:	f5 12       	cpse	r15, r21
     13a:	f0 12       	cpse	r15, r16
     13c:	fa 12       	cpse	r15, r26
     13e:	ff 12       	cpse	r15, r31
     140:	04 13       	cpse	r16, r20
     142:	12 13       	cpse	r17, r18
     144:	26 13       	cpse	r18, r22
     146:	35 13       	cpse	r19, r21
     148:	38 13       	cpse	r19, r24
     14a:	3c 13       	cpse	r19, r28
     14c:	4f 13       	cpse	r20, r31
     14e:	40 13       	cpse	r20, r16
     150:	43 13       	cpse	r20, r19
     152:	49 13       	cpse	r20, r25

00000154 <__trampolines_end>:
     154:	44 48       	sbci	r20, 0x84	; 132
     156:	43 50       	subi	r20, 0x03	; 3
     158:	20 49       	sbci	r18, 0x90	; 144
     15a:	50 0d       	add	r21, r0
     15c:	0a 00       	.word	0x000a	; ????

0000015e <__c.3161>:
     15e:	53 54 41 54 49 43 20 49 50 0d 0a 00                 STATIC IP...

0000016a <__c.3158>:
     16a:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     17a:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     18a:	3d 3d 3d 3d 3d 3d 3d 0d 0a 00                       =======...

00000194 <__c.3156>:
     194:	20 57 49 5a 6e 65 74 20 63 68 69 70 3a 20 20 25      WIZnet chip:  %
     1a4:	73 20 0d 0a 00                                      s ...

000001a9 <__c.3154>:
     1a9:	0d 0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ..==============
     1b9:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     1c9:	3d 3d 3d 3d 3d 3d 3d 3d 3d 0d 0a 00                 =========...

000001d5 <__c.3141>:
     1d5:	0d 0a 3e 3e 3e 20 50 49 4e 47 20 44 4e 53 0d 0a     ..>>> PING DNS..
	...

000001e6 <__c.3139>:
     1e6:	0d 0a 3e 3e 20 50 49 4e 47 20 6d 79 20 50 43 0d     ..>> PING my PC.
     1f6:	0a 00                                               ..

000001f8 <__c.3130>:
     1f8:	3e 3e 20 46 72 65 65 20 52 41 4d 20 69 73 3a 20     >> Free RAM is: 
     208:	25 64 20 62 79 74 65 73 0d 0a 00                    %d bytes...

00000213 <__c.3126>:
     213:	3c 3c 20 50 49 4e 47 20 25 73 20 66 72 6f 6d 20     << PING %s from 
     223:	25 64 2e 25 64 2e 25 64 2e 25 64 20 49 44 3a 25     %d.%d.%d.%d ID:%
     233:	78 20 53 65 71 3a 25 78 20 64 61 74 61 3a 25 75     x Seq:%x data:%u
     243:	20 62 79 74 65 73 0d 0a 00                           bytes...

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d1 e8       	ldi	r29, 0x81	; 129
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61
     258:	00 e0       	ldi	r16, 0x00	; 0
     25a:	0c bf       	out	0x3c, r16	; 60

0000025c <get_mcusr>:
void get_mcusr(void) \
  __attribute__((naked)) \
  __attribute__((section(".init3")));
void get_mcusr(void)
{
  mcucsr_mirror = MCUSR;
     25c:	84 b7       	in	r24, 0x34	; 52
     25e:	80 93 7b 1b 	sts	0x1B7B, r24	; 0x801b7b <__bss_end>
  MCUSR = 0;
     262:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	a8 95       	wdr
     26a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     26e:	88 61       	ori	r24, 0x18	; 24
     270:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     274:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     278:	0f be       	out	0x3f, r0	; 63

0000027a <__do_copy_data>:
     27a:	14 e0       	ldi	r17, 0x04	; 4
     27c:	a0 e0       	ldi	r26, 0x00	; 0
     27e:	b2 e0       	ldi	r27, 0x02	; 2
     280:	e6 ef       	ldi	r30, 0xF6	; 246
     282:	fc e4       	ldi	r31, 0x4C	; 76
     284:	00 e0       	ldi	r16, 0x00	; 0
     286:	0b bf       	out	0x3b, r16	; 59
     288:	02 c0       	rjmp	.+4      	; 0x28e <__do_copy_data+0x14>
     28a:	07 90       	elpm	r0, Z+
     28c:	0d 92       	st	X+, r0
     28e:	a0 34       	cpi	r26, 0x40	; 64
     290:	b1 07       	cpc	r27, r17
     292:	d9 f7       	brne	.-10     	; 0x28a <__do_copy_data+0x10>

00000294 <__do_clear_bss>:
     294:	2b e1       	ldi	r18, 0x1B	; 27
     296:	a0 e4       	ldi	r26, 0x40	; 64
     298:	b4 e0       	ldi	r27, 0x04	; 4
     29a:	01 c0       	rjmp	.+2      	; 0x29e <.do_clear_bss_start>

0000029c <.do_clear_bss_loop>:
     29c:	1d 92       	st	X+, r1

0000029e <.do_clear_bss_start>:
     29e:	ab 37       	cpi	r26, 0x7B	; 123
     2a0:	b2 07       	cpc	r27, r18
     2a2:	e1 f7       	brne	.-8      	; 0x29c <.do_clear_bss_loop>
     2a4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <main>
     2a8:	0c 94 79 26 	jmp	0x4cf2	; 0x4cf2 <_exit>

000002ac <__bad_interrupt>:
     2ac:	a9 ce       	rjmp	.-686    	; 0x0 <__vectors>

000002ae <loopback_tcps>:
         break;
      default:
         break;
   }
   return 1;
}
     2ae:	4f 92       	push	r4
     2b0:	5f 92       	push	r5
     2b2:	6f 92       	push	r6
     2b4:	7f 92       	push	r7
     2b6:	af 92       	push	r10
     2b8:	bf 92       	push	r11
     2ba:	df 92       	push	r13
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <loopback_tcps+0x1c>
     2ca:	1f 92       	push	r1
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	d8 2e       	mov	r13, r24
     2d2:	7b 01       	movw	r14, r22
     2d4:	a4 2e       	mov	r10, r20
     2d6:	b5 2e       	mov	r11, r21
     2d8:	08 2f       	mov	r16, r24
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	00 0f       	add	r16, r16
     2de:	11 1f       	adc	r17, r17
     2e0:	00 0f       	add	r16, r16
     2e2:	11 1f       	adc	r17, r17
     2e4:	0f 5f       	subi	r16, 0xFF	; 255
     2e6:	1f 4f       	sbci	r17, 0xFF	; 255
     2e8:	00 0f       	add	r16, r16
     2ea:	11 1f       	adc	r17, r17
     2ec:	00 0f       	add	r16, r16
     2ee:	11 1f       	adc	r17, r17
     2f0:	00 0f       	add	r16, r16
     2f2:	11 1f       	adc	r17, r17
     2f4:	b8 01       	movw	r22, r16
     2f6:	7d 5f       	subi	r23, 0xFD	; 253
     2f8:	07 2e       	mov	r0, r23
     2fa:	00 0c       	add	r0, r0
     2fc:	88 0b       	sbc	r24, r24
     2fe:	99 0b       	sbc	r25, r25
     300:	0e 94 ab 0c 	call	0x1956	; 0x1956 <WIZCHIP_READ>
     304:	83 31       	cpi	r24, 0x13	; 19
     306:	09 f4       	brne	.+2      	; 0x30a <loopback_tcps+0x5c>
     308:	b0 c0       	rjmp	.+352    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     30a:	20 f4       	brcc	.+8      	; 0x314 <loopback_tcps+0x66>
     30c:	88 23       	and	r24, r24
     30e:	09 f4       	brne	.+2      	; 0x312 <loopback_tcps+0x64>
     310:	cd c0       	rjmp	.+410    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     312:	e5 c0       	rjmp	.+458    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     314:	87 31       	cpi	r24, 0x17	; 23
     316:	21 f0       	breq	.+8      	; 0x320 <loopback_tcps+0x72>
     318:	8c 31       	cpi	r24, 0x1C	; 28
     31a:	09 f4       	brne	.+2      	; 0x31e <loopback_tcps+0x70>
     31c:	88 c0       	rjmp	.+272    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     31e:	df c0       	rjmp	.+446    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     320:	28 01       	movw	r4, r16
     322:	2e ef       	ldi	r18, 0xFE	; 254
     324:	52 1a       	sub	r5, r18
     326:	05 2c       	mov	r0, r5
     328:	00 0c       	add	r0, r0
     32a:	66 08       	sbc	r6, r6
     32c:	77 08       	sbc	r7, r7
     32e:	c3 01       	movw	r24, r6
     330:	b2 01       	movw	r22, r4
     332:	0e 94 ab 0c 	call	0x1956	; 0x1956 <WIZCHIP_READ>
     336:	80 ff       	sbrs	r24, 0
     338:	43 c0       	rjmp	.+134    	; 0x3c0 <loopback_tcps+0x112>
     33a:	b8 01       	movw	r22, r16
     33c:	74 5f       	subi	r23, 0xF4	; 244
     33e:	07 2e       	mov	r0, r23
     340:	00 0c       	add	r0, r0
     342:	88 0b       	sbc	r24, r24
     344:	99 0b       	sbc	r25, r25
     346:	24 e0       	ldi	r18, 0x04	; 4
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	ae 01       	movw	r20, r28
     34c:	4f 5f       	subi	r20, 0xFF	; 255
     34e:	5f 4f       	sbci	r21, 0xFF	; 255
     350:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <WIZCHIP_READ_BUF>
     354:	b8 01       	movw	r22, r16
     356:	70 5f       	subi	r23, 0xF0	; 240
     358:	07 2e       	mov	r0, r23
     35a:	00 0c       	add	r0, r0
     35c:	88 0b       	sbc	r24, r24
     35e:	99 0b       	sbc	r25, r25
     360:	0e 94 ab 0c 	call	0x1956	; 0x1956 <WIZCHIP_READ>
     364:	a8 2e       	mov	r10, r24
     366:	b1 2c       	mov	r11, r1
     368:	ba 2c       	mov	r11, r10
     36a:	aa 24       	eor	r10, r10
     36c:	b8 01       	movw	r22, r16
     36e:	7f 5e       	subi	r23, 0xEF	; 239
     370:	07 2e       	mov	r0, r23
     372:	00 0c       	add	r0, r0
     374:	88 0b       	sbc	r24, r24
     376:	99 0b       	sbc	r25, r25
     378:	0e 94 ab 0c 	call	0x1956	; 0x1956 <WIZCHIP_READ>
     37c:	a8 0e       	add	r10, r24
     37e:	b1 1c       	adc	r11, r1
     380:	3c 81       	ldd	r19, Y+4	; 0x04
     382:	2b 81       	ldd	r18, Y+3	; 0x03
     384:	9a 81       	ldd	r25, Y+2	; 0x02
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	bf 92       	push	r11
     38a:	af 92       	push	r10
     38c:	1f 92       	push	r1
     38e:	3f 93       	push	r19
     390:	1f 92       	push	r1
     392:	2f 93       	push	r18
     394:	1f 92       	push	r1
     396:	9f 93       	push	r25
     398:	1f 92       	push	r1
     39a:	8f 93       	push	r24
     39c:	1f 92       	push	r1
     39e:	df 92       	push	r13
     3a0:	83 e5       	ldi	r24, 0x53	; 83
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	9f 93       	push	r25
     3a6:	8f 93       	push	r24
     3a8:	0e 94 73 23 	call	0x46e6	; 0x46e6 <printf>
     3ac:	41 e0       	ldi	r20, 0x01	; 1
     3ae:	c3 01       	movw	r24, r6
     3b0:	b2 01       	movw	r22, r4
     3b2:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <WIZCHIP_WRITE>
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	cd bf       	out	0x3d, r28	; 61
     3c0:	8d 2d       	mov	r24, r13
     3c2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <getSn_RX_RSR>
     3c6:	00 97       	sbiw	r24, 0x00	; 0
     3c8:	09 f4       	brne	.+2      	; 0x3cc <loopback_tcps+0x11e>
     3ca:	8e c0       	rjmp	.+284    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	28 e0       	ldi	r18, 0x08	; 8
     3d0:	92 07       	cpc	r25, r18
     3d2:	10 f0       	brcs	.+4      	; 0x3d8 <loopback_tcps+0x12a>
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	98 e0       	ldi	r25, 0x08	; 8
     3d8:	ac 01       	movw	r20, r24
     3da:	b7 01       	movw	r22, r14
     3dc:	8d 2d       	mov	r24, r13
     3de:	f0 d6       	rcall	.+3552   	; 0x11c0 <recv>
     3e0:	16 16       	cp	r1, r22
     3e2:	17 06       	cpc	r1, r23
     3e4:	18 06       	cpc	r1, r24
     3e6:	19 06       	cpc	r1, r25
     3e8:	0c f0       	brlt	.+2      	; 0x3ec <loopback_tcps+0x13e>
     3ea:	83 c0       	rjmp	.+262    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     3ec:	5b 01       	movw	r10, r22
     3ee:	00 e0       	ldi	r16, 0x00	; 0
     3f0:	10 e0       	ldi	r17, 0x00	; 0
     3f2:	15 c0       	rjmp	.+42     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3f4:	a5 01       	movw	r20, r10
     3f6:	40 1b       	sub	r20, r16
     3f8:	51 0b       	sbc	r21, r17
     3fa:	b7 01       	movw	r22, r14
     3fc:	60 0f       	add	r22, r16
     3fe:	71 1f       	adc	r23, r17
     400:	8d 2d       	mov	r24, r13
     402:	cb d5       	rcall	.+2966   	; 0xf9a <send>
     404:	2b 01       	movw	r4, r22
     406:	3c 01       	movw	r6, r24
     408:	99 23       	and	r25, r25
     40a:	3c f4       	brge	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     40c:	8d 2d       	mov	r24, r13
     40e:	8a d3       	rcall	.+1812   	; 0xb24 <close>
     410:	44 2d       	mov	r20, r4
     412:	35 2d       	mov	r19, r5
     414:	26 2d       	mov	r18, r6
     416:	97 2d       	mov	r25, r7
     418:	7e c0       	rjmp	.+252    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     41a:	06 0f       	add	r16, r22
     41c:	17 1f       	adc	r17, r23
     41e:	0a 15       	cp	r16, r10
     420:	1b 05       	cpc	r17, r11
     422:	41 f7       	brne	.-48     	; 0x3f4 <loopback_tcps+0x146>
     424:	41 e0       	ldi	r20, 0x01	; 1
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	74 c0       	rjmp	.+232    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     42e:	8d 2d       	mov	r24, r13
     430:	40 d5       	rcall	.+2688   	; 0xeb2 <disconnect>
     432:	08 2e       	mov	r0, r24
     434:	00 0c       	add	r0, r0
     436:	99 0b       	sbc	r25, r25
     438:	aa 0b       	sbc	r26, r26
     43a:	bb 0b       	sbc	r27, r27
     43c:	81 30       	cpi	r24, 0x01	; 1
     43e:	91 05       	cpc	r25, r1
     440:	a1 05       	cpc	r26, r1
     442:	b1 05       	cpc	r27, r1
     444:	09 f0       	breq	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     446:	59 c0       	rjmp	.+178    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     448:	1f 92       	push	r1
     44a:	df 92       	push	r13
     44c:	85 e7       	ldi	r24, 0x75	; 117
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	9f 93       	push	r25
     452:	8f 93       	push	r24
     454:	0e 94 73 23 	call	0x46e6	; 0x46e6 <printf>
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	41 e0       	ldi	r20, 0x01	; 1
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	56 c0       	rjmp	.+172    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     46a:	bf 92       	push	r11
     46c:	af 92       	push	r10
     46e:	1f 92       	push	r1
     470:	df 92       	push	r13
     472:	88 e8       	ldi	r24, 0x88	; 136
     474:	92 e0       	ldi	r25, 0x02	; 2
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	0e 94 73 23 	call	0x46e6	; 0x46e6 <printf>
     47e:	8d 2d       	mov	r24, r13
     480:	be d4       	rcall	.+2428   	; 0xdfe <listen>
     482:	08 2e       	mov	r0, r24
     484:	00 0c       	add	r0, r0
     486:	99 0b       	sbc	r25, r25
     488:	aa 0b       	sbc	r26, r26
     48a:	bb 0b       	sbc	r27, r27
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	91 05       	cpc	r25, r1
     49c:	a1 05       	cpc	r26, r1
     49e:	b1 05       	cpc	r27, r1
     4a0:	89 f1       	breq	.+98     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     4a2:	48 2f       	mov	r20, r24
     4a4:	39 2f       	mov	r19, r25
     4a6:	2a 2f       	mov	r18, r26
     4a8:	9b 2f       	mov	r25, r27
     4aa:	35 c0       	rjmp	.+106    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	4a 2d       	mov	r20, r10
     4b0:	5b 2d       	mov	r21, r11
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	8d 2d       	mov	r24, r13
     4b6:	a6 d3       	rcall	.+1868   	; 0xc04 <socket>
     4b8:	08 2e       	mov	r0, r24
     4ba:	00 0c       	add	r0, r0
     4bc:	99 0b       	sbc	r25, r25
     4be:	aa 0b       	sbc	r26, r26
     4c0:	bb 0b       	sbc	r27, r27
     4c2:	4d 2d       	mov	r20, r13
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	84 17       	cp	r24, r20
     4cc:	95 07       	cpc	r25, r21
     4ce:	a6 07       	cpc	r26, r22
     4d0:	b7 07       	cpc	r27, r23
     4d2:	e9 f0       	breq	.+58     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     4d4:	48 2f       	mov	r20, r24
     4d6:	39 2f       	mov	r19, r25
     4d8:	2a 2f       	mov	r18, r26
     4da:	9b 2f       	mov	r25, r27
     4dc:	1c c0       	rjmp	.+56     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     4de:	41 e0       	ldi	r20, 0x01	; 1
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	17 c0       	rjmp	.+46     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     4e8:	41 e0       	ldi	r20, 0x01	; 1
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	12 c0       	rjmp	.+36     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     4f2:	46 2f       	mov	r20, r22
     4f4:	37 2f       	mov	r19, r23
     4f6:	28 2f       	mov	r18, r24
     4f8:	0e c0       	rjmp	.+28     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     4fa:	48 2f       	mov	r20, r24
     4fc:	39 2f       	mov	r19, r25
     4fe:	2a 2f       	mov	r18, r26
     500:	9b 2f       	mov	r25, r27
     502:	09 c0       	rjmp	.+18     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     504:	41 e0       	ldi	r20, 0x01	; 1
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	04 c0       	rjmp	.+8      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	64 2f       	mov	r22, r20
     518:	73 2f       	mov	r23, r19
     51a:	82 2f       	mov	r24, r18
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	df 90       	pop	r13
     532:	bf 90       	pop	r11
     534:	af 90       	pop	r10
     536:	7f 90       	pop	r7
     538:	6f 90       	pop	r6
     53a:	5f 90       	pop	r5
     53c:	4f 90       	pop	r4
     53e:	08 95       	ret

00000540 <loopback_udps>:


int32_t loopback_udps(uint8_t sn, uint8_t* buf, uint16_t port)
{
     540:	4f 92       	push	r4
     542:	5f 92       	push	r5
     544:	6f 92       	push	r6
     546:	7f 92       	push	r7
     548:	8f 92       	push	r8
     54a:	9f 92       	push	r9
     54c:	af 92       	push	r10
     54e:	bf 92       	push	r11
     550:	df 92       	push	r13
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	00 d0       	rcall	.+0      	; 0x560 <loopback_udps+0x20>
     560:	00 d0       	rcall	.+0      	; 0x562 <loopback_udps+0x22>
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	d8 2e       	mov	r13, r24
     568:	7b 01       	movw	r14, r22
     56a:	14 2f       	mov	r17, r20
     56c:	05 2f       	mov	r16, r21
   int32_t  ret;
   uint16_t size, sentsize;
   uint8_t  destip[4];
   uint16_t destport;

   switch(getSn_SR(sn))
     56e:	68 2f       	mov	r22, r24
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	66 0f       	add	r22, r22
     574:	77 1f       	adc	r23, r23
     576:	66 0f       	add	r22, r22
     578:	77 1f       	adc	r23, r23
     57a:	6f 5f       	subi	r22, 0xFF	; 255
     57c:	7f 4f       	sbci	r23, 0xFF	; 255
     57e:	66 0f       	add	r22, r22
     580:	77 1f       	adc	r23, r23
     582:	66 0f       	add	r22, r22
     584:	77 1f       	adc	r23, r23
     586:	66 0f       	add	r22, r22
     588:	77 1f       	adc	r23, r23
     58a:	7d 5f       	subi	r23, 0xFD	; 253
     58c:	07 2e       	mov	r0, r23
     58e:	00 0c       	add	r0, r0
     590:	88 0b       	sbc	r24, r24
     592:	99 0b       	sbc	r25, r25
     594:	0e 94 ab 0c 	call	0x1956	; 0x1956 <WIZCHIP_READ>
     598:	88 23       	and	r24, r24
     59a:	09 f4       	brne	.+2      	; 0x59e <loopback_udps+0x5e>
     59c:	6a c0       	rjmp	.+212    	; 0x672 <loopback_udps+0x132>
     59e:	82 32       	cpi	r24, 0x22	; 34
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <loopback_udps+0x64>
     5a2:	90 c0       	rjmp	.+288    	; 0x6c4 <loopback_udps+0x184>
   {
      case SOCK_UDP :
         if((size = getSn_RX_RSR(sn)) > 0)
     5a4:	8d 2d       	mov	r24, r13
     5a6:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <getSn_RX_RSR>
     5aa:	00 97       	sbiw	r24, 0x00	; 0
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <loopback_udps+0x70>
     5ae:	8f c0       	rjmp	.+286    	; 0x6ce <loopback_udps+0x18e>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	28 e0       	ldi	r18, 0x08	; 8
     5b4:	92 07       	cpc	r25, r18
     5b6:	10 f0       	brcs	.+4      	; 0x5bc <loopback_udps+0x7c>
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	98 e0       	ldi	r25, 0x08	; 8
            ret = recvfrom(sn, buf, size, destip, (uint16_t*)&destport);
     5bc:	8e 01       	movw	r16, r28
     5be:	0b 5f       	subi	r16, 0xFB	; 251
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255
     5c2:	9e 01       	movw	r18, r28
     5c4:	2f 5f       	subi	r18, 0xFF	; 255
     5c6:	3f 4f       	sbci	r19, 0xFF	; 255
     5c8:	ac 01       	movw	r20, r24
     5ca:	b7 01       	movw	r22, r14
     5cc:	8d 2d       	mov	r24, r13
     5ce:	e5 d7       	rcall	.+4042   	; 0x159a <recvfrom>
     5d0:	4b 01       	movw	r8, r22
     5d2:	5c 01       	movw	r10, r24
            if(ret <= 0)
     5d4:	16 16       	cp	r1, r22
     5d6:	17 06       	cpc	r1, r23
     5d8:	18 06       	cpc	r1, r24
     5da:	19 06       	cpc	r1, r25
     5dc:	b4 f0       	brlt	.+44     	; 0x60a <loopback_udps+0xca>
            {
#ifdef _LOOPBACK_DEBUG_
               printf("%d: recvfrom error. %ld\r\n",sn,ret);
     5de:	bf 92       	push	r11
     5e0:	af 92       	push	r10
     5e2:	9f 92       	push	r9
     5e4:	6f 93       	push	r22
     5e6:	1f 92       	push	r1
     5e8:	df 92       	push	r13
     5ea:	85 e0       	ldi	r24, 0x05	; 5
     5ec:	93 e0       	ldi	r25, 0x03	; 3
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	0e 94 73 23 	call	0x46e6	; 0x46e6 <printf>
#endif
               return ret;
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	38 2d       	mov	r19, r8
     602:	29 2d       	mov	r18, r9
     604:	8a 2d       	mov	r24, r10
     606:	9b 2d       	mov	r25, r11
     608:	6b c0       	rjmp	.+214    	; 0x6e0 <loopback_udps+0x1a0>
            }
            size = (uint16_t) ret;
            sentsize = 0;
     60a:	a1 2c       	mov	r10, r1
     60c:	b1 2c       	mov	r11, r1
            while(sentsize != size)
     60e:	29 c0       	rjmp	.+82     	; 0x662 <loopback_udps+0x122>
            {
               ret = sendto(sn, buf+sentsize, size-sentsize, destip, destport);
     610:	0d 81       	ldd	r16, Y+5	; 0x05
     612:	1e 81       	ldd	r17, Y+6	; 0x06
     614:	9e 01       	movw	r18, r28
     616:	2f 5f       	subi	r18, 0xFF	; 255
     618:	3f 4f       	sbci	r19, 0xFF	; 255
     61a:	a4 01       	movw	r20, r8
     61c:	4a 19       	sub	r20, r10
     61e:	5b 09       	sbc	r21, r11
     620:	b7 01       	movw	r22, r14
     622:	6a 0d       	add	r22, r10
     624:	7b 1d       	adc	r23, r11
     626:	8d 2d       	mov	r24, r13
     628:	8a d6       	rcall	.+3348   	; 0x133e <sendto>
     62a:	2b 01       	movw	r4, r22
     62c:	3c 01       	movw	r6, r24
               if(ret < 0)
     62e:	99 23       	and	r25, r25
     630:	b4 f4       	brge	.+44     	; 0x65e <loopback_udps+0x11e>
               {
#ifdef _LOOPBACK_DEBUG_
                  printf("%d: sendto error. %ld\r\n",sn,ret);
     632:	7f 92       	push	r7
     634:	6f 92       	push	r6
     636:	5f 92       	push	r5
     638:	6f 93       	push	r22
     63a:	1f 92       	push	r1
     63c:	df 92       	push	r13
     63e:	8f e1       	ldi	r24, 0x1F	; 31
     640:	93 e0       	ldi	r25, 0x03	; 3
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	0e 94 73 23 	call	0x46e6	; 0x46e6 <printf>
#endif
                  return ret;
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	34 2d       	mov	r19, r4
     656:	25 2d       	mov	r18, r5
     658:	86 2d       	mov	r24, r6
     65a:	97 2d       	mov	r25, r7
     65c:	41 c0       	rjmp	.+130    	; 0x6e0 <loopback_udps+0x1a0>
               }
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
     65e:	a6 0e       	add	r10, r22
     660:	b7 1e       	adc	r11, r23
#endif
               return ret;
            }
            size = (uint16_t) ret;
            sentsize = 0;
            while(sentsize != size)
     662:	a8 14       	cp	r10, r8
     664:	b9 04       	cpc	r11, r9
     666:	a1 f6       	brne	.-88     	; 0x610 <loopback_udps+0xd0>
#endif
         break;
      default :
         break;
   }
   return 1;
     668:	31 e0       	ldi	r19, 0x01	; 1
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	37 c0       	rjmp	.+110    	; 0x6e0 <loopback_udps+0x1a0>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:UDP loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	41 2f       	mov	r20, r17
     676:	50 2f       	mov	r21, r16
     678:	62 e0       	ldi	r22, 0x02	; 2
     67a:	8d 2d       	mov	r24, r13
     67c:	c3 d2       	rcall	.+1414   	; 0xc04 <socket>
     67e:	48 2f       	mov	r20, r24
     680:	88 0f       	add	r24, r24
     682:	55 0b       	sbc	r21, r21
     684:	66 0b       	sbc	r22, r22
     686:	77 0b       	sbc	r23, r23
     688:	8d 2d       	mov	r24, r13
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	a0 e0       	ldi	r26, 0x00	; 0
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	48 17       	cp	r20, r24
     692:	59 07       	cpc	r21, r25
     694:	6a 07       	cpc	r22, r26
     696:	7b 07       	cpc	r23, r27
     698:	f9 f4       	brne	.+62     	; 0x6d8 <loopback_udps+0x198>
            return ret;
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Opened, UDP loopback, port [%d]\r\n", sn, port);
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	1f 92       	push	r1
     6a0:	df 92       	push	r13
     6a2:	87 e3       	ldi	r24, 0x37	; 55
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	0e 94 73 23 	call	0x46e6	; 0x46e6 <printf>
#endif
         break;
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
      default :
         break;
   }
   return 1;
     6ba:	31 e0       	ldi	r19, 0x01	; 1
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
            return ret;
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Opened, UDP loopback, port [%d]\r\n", sn, port);
#endif
         break;
     6c2:	0e c0       	rjmp	.+28     	; 0x6e0 <loopback_udps+0x1a0>
      default :
         break;
   }
   return 1;
     6c4:	31 e0       	ldi	r19, 0x01	; 1
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <loopback_udps+0x1a0>
     6ce:	31 e0       	ldi	r19, 0x01	; 1
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <loopback_udps+0x1a0>
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:UDP loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
            return ret;
     6d8:	34 2f       	mov	r19, r20
     6da:	25 2f       	mov	r18, r21
     6dc:	86 2f       	mov	r24, r22
     6de:	97 2f       	mov	r25, r23
         break;
      default :
         break;
   }
   return 1;
}
     6e0:	63 2f       	mov	r22, r19
     6e2:	72 2f       	mov	r23, r18
     6e4:	26 96       	adiw	r28, 0x06	; 6
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	bf 90       	pop	r11
     700:	af 90       	pop	r10
     702:	9f 90       	pop	r9
     704:	8f 90       	pop	r8
     706:	7f 90       	pop	r7
     708:	6f 90       	pop	r6
     70a:	5f 90       	pop	r5
     70c:	4f 90       	pop	r4
     70e:	08 95       	ret

00000710 <checksum>:
 *****************************************************************************************/
void wait_10ms(unsigned int cnt)
{
	unsigned int i;
	for (i = 0; i < cnt; i++) wait_1ms(10);
}
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	db 01       	movw	r26, r22
     71a:	b6 95       	lsr	r27
     71c:	a7 95       	ror	r26
     71e:	c1 2c       	mov	r12, r1
     720:	d1 2c       	mov	r13, r1
     722:	76 01       	movw	r14, r12
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	12 c0       	rjmp	.+36     	; 0x74e <checksum+0x3e>
     72a:	fa 01       	movw	r30, r20
     72c:	ee 0f       	add	r30, r30
     72e:	ff 1f       	adc	r31, r31
     730:	e8 0f       	add	r30, r24
     732:	f9 1f       	adc	r31, r25
     734:	20 81       	ld	r18, Z
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	32 2f       	mov	r19, r18
     73a:	22 27       	eor	r18, r18
     73c:	e1 81       	ldd	r30, Z+1	; 0x01
     73e:	2e 0f       	add	r18, r30
     740:	31 1d       	adc	r19, r1
     742:	c2 0e       	add	r12, r18
     744:	d3 1e       	adc	r13, r19
     746:	e1 1c       	adc	r14, r1
     748:	f1 1c       	adc	r15, r1
     74a:	4f 5f       	subi	r20, 0xFF	; 255
     74c:	5f 4f       	sbci	r21, 0xFF	; 255
     74e:	4a 17       	cp	r20, r26
     750:	5b 07       	cpc	r21, r27
     752:	58 f3       	brcs	.-42     	; 0x72a <checksum+0x1a>
     754:	60 ff       	sbrs	r22, 0
     756:	0d c0       	rjmp	.+26     	; 0x772 <checksum+0x62>
     758:	44 0f       	add	r20, r20
     75a:	55 1f       	adc	r21, r21
     75c:	fc 01       	movw	r30, r24
     75e:	e4 0f       	add	r30, r20
     760:	f5 1f       	adc	r31, r21
     762:	80 81       	ld	r24, Z
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	98 2f       	mov	r25, r24
     768:	88 27       	eor	r24, r24
     76a:	c8 0e       	add	r12, r24
     76c:	d9 1e       	adc	r13, r25
     76e:	e1 1c       	adc	r14, r1
     770:	f1 1c       	adc	r15, r1
     772:	c7 01       	movw	r24, r14
     774:	aa 27       	eor	r26, r26
     776:	bb 27       	eor	r27, r27
     778:	8c 0d       	add	r24, r12
     77a:	9d 1d       	adc	r25, r13
     77c:	80 95       	com	r24
     77e:	90 95       	com	r25
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	08 95       	ret

0000078a <htons>:
     78a:	98 27       	eor	r25, r24
     78c:	89 27       	eor	r24, r25
     78e:	98 27       	eor	r25, r24
     790:	08 95       	ret

00000792 <ping_request>:
     792:	df 92       	push	r13
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	d8 2e       	mov	r13, r24
     7a2:	7b 01       	movw	r14, r22
     7a4:	c4 eb       	ldi	r28, 0xB4	; 180
     7a6:	d8 e1       	ldi	r29, 0x18	; 24
     7a8:	88 e0       	ldi	r24, 0x08	; 8
     7aa:	88 83       	st	Y, r24
     7ac:	19 82       	std	Y+1, r1	; 0x01
     7ae:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <RandomID>
     7b2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <RandomID+0x1>
     7b6:	9c 01       	movw	r18, r24
     7b8:	2f 5f       	subi	r18, 0xFF	; 255
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <RandomID+0x1>
     7c0:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <RandomID>
     7c4:	e2 df       	rcall	.-60     	; 0x78a <htons>
     7c6:	9d 83       	std	Y+5, r25	; 0x05
     7c8:	8c 83       	std	Y+4, r24	; 0x04
     7ca:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <RandomSeqNum>
     7ce:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <RandomSeqNum+0x1>
     7d2:	9c 01       	movw	r18, r24
     7d4:	2f 5f       	subi	r18, 0xFF	; 255
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	30 93 05 02 	sts	0x0205, r19	; 0x800205 <RandomSeqNum+0x1>
     7dc:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <RandomSeqNum>
     7e0:	d4 df       	rcall	.-88     	; 0x78a <htons>
     7e2:	9f 83       	std	Y+7, r25	; 0x07
     7e4:	8e 83       	std	Y+6, r24	; 0x06
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	07 c0       	rjmp	.+14     	; 0x7fa <ping_request+0x68>
     7ec:	fc 01       	movw	r30, r24
     7ee:	ec 54       	subi	r30, 0x4C	; 76
     7f0:	f7 4e       	sbci	r31, 0xE7	; 231
     7f2:	28 2f       	mov	r18, r24
     7f4:	27 70       	andi	r18, 0x07	; 7
     7f6:	20 87       	std	Z+8, r18	; 0x08
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	80 32       	cpi	r24, 0x20	; 32
     7fc:	91 05       	cpc	r25, r1
     7fe:	b0 f3       	brcs	.-20     	; 0x7ec <ping_request+0x5a>
     800:	c4 eb       	ldi	r28, 0xB4	; 180
     802:	d8 e1       	ldi	r29, 0x18	; 24
     804:	1b 82       	std	Y+3, r1	; 0x03
     806:	1a 82       	std	Y+2, r1	; 0x02
     808:	68 e2       	ldi	r22, 0x28	; 40
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	ce 01       	movw	r24, r28
     80e:	80 df       	rcall	.-256    	; 0x710 <checksum>
     810:	bc df       	rcall	.-136    	; 0x78a <htons>
     812:	9b 83       	std	Y+3, r25	; 0x03
     814:	8a 83       	std	Y+2, r24	; 0x02
     816:	08 eb       	ldi	r16, 0xB8	; 184
     818:	1b e0       	ldi	r17, 0x0B	; 11
     81a:	97 01       	movw	r18, r14
     81c:	48 e2       	ldi	r20, 0x28	; 40
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	be 01       	movw	r22, r28
     822:	8d 2d       	mov	r24, r13
     824:	8c d5       	rcall	.+2840   	; 0x133e <sendto>
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	df 90       	pop	r13
     836:	08 95       	ret

00000838 <ping_reply>:

uint8_t ping_reply(uint8_t s, uint8_t *addr, uint16_t len){
     838:	af 92       	push	r10
     83a:	bf 92       	push	r11
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	d8 2e       	mov	r13, r24
     84c:	5b 01       	movw	r10, r22
     84e:	7a 01       	movw	r14, r20

	//uint16_t i;

	PingReply.Type = PING_REPLY; // Ping-Reply
     850:	cc ef       	ldi	r28, 0xFC	; 252
     852:	d8 e1       	ldi	r29, 0x18	; 24
     854:	18 82       	st	Y, r1
	for(i = 0 ; i < PING_BUF_LEN; i++){
		PingRequest.Data[i] = (i) % 8;		  //'0'~'8' number into ping-request's data
	}
*/
	/* Do checksum of Ping Request */
	PingReply.CheckSum = 0;		               // value of checksum before calucating checksum of ping-request packet
     856:	1b 82       	std	Y+3, r1	; 0x03
     858:	1a 82       	std	Y+2, r1	; 0x02
	PingReply.CheckSum = htons(checksum((uint8_t*)&PingReply,len));  // Calculate checksum
     85a:	ba 01       	movw	r22, r20
     85c:	ce 01       	movw	r24, r28
     85e:	58 df       	rcall	.-336    	; 0x710 <checksum>
     860:	94 df       	rcall	.-216    	; 0x78a <htons>
     862:	9b 83       	std	Y+3, r25	; 0x03
     864:	8a 83       	std	Y+2, r24	; 0x02
	PingRequest.CheckSum = 0;		               // value of checksum before calucating checksum of ping-request packet
	PingRequest.CheckSum = htons(checksum((uint8_t*)&PingRequest,sizeof(PingRequest)));  // Calculate checksum
*/
	/* sendto ping_request to destination */
//	if(sendto(s,(uint8_t *)&PingRequest,sizeof(PingRequest),addr,3000)==0){  // Send Ping-Request to the specified peer.
	if(sendto(s,(uint8_t *)&PingReply,len,addr,3000)==0){  // Send Ping-Request to the specified peer.
     866:	08 eb       	ldi	r16, 0xB8	; 184
     868:	1b e0       	ldi	r17, 0x0B	; 11
     86a:	95 01       	movw	r18, r10
     86c:	a7 01       	movw	r20, r14
     86e:	be 01       	movw	r22, r28
     870:	8d 2d       	mov	r24, r13
     872:	65 d5       	rcall	.+2762   	; 0x133e <sendto>
				PingReply.SeqNum,
				htons(PingReply.CheckSum)) ;
#endif
	}
	return 0;
} // ping request
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	bf 90       	pop	r11
     886:	af 90       	pop	r10
     888:	08 95       	ret

0000088a <ping_read>:

void ping_read(uint8_t s, uint8_t *addr,  uint16_t rlen)
{
     88a:	4f 92       	push	r4
     88c:	5f 92       	push	r5
     88e:	6f 92       	push	r6
     890:	7f 92       	push	r7
     892:	bf 92       	push	r11
     894:	cf 92       	push	r12
     896:	df 92       	push	r13
     898:	ef 92       	push	r14
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	c2 58       	subi	r28, 0x82	; 130
     8aa:	d1 09       	sbc	r29, r1
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	b8 2e       	mov	r11, r24
     8b8:	6b 01       	movw	r12, r22
	//uint16_t tmp_checksum;
	uint16_t len;
	uint16_t i;
	uint8_t data_buf[128];
	uint16_t port = 3000;
     8ba:	88 eb       	ldi	r24, 0xB8	; 184
     8bc:	9b e0       	ldi	r25, 0x0B	; 11
     8be:	cf 57       	subi	r28, 0x7F	; 127
     8c0:	df 4f       	sbci	r29, 0xFF	; 255
     8c2:	99 83       	std	Y+1, r25	; 0x01
     8c4:	88 83       	st	Y, r24
     8c6:	c1 58       	subi	r28, 0x81	; 129
     8c8:	d0 40       	sbci	r29, 0x00	; 0
	/* receive data from a destination */
	len = recvfrom(s, (uint8_t *)data_buf,rlen,addr,&port);
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 57       	subi	r16, 0x7F	; 127
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	9b 01       	movw	r18, r22
     8d2:	be 01       	movw	r22, r28
     8d4:	6f 5f       	subi	r22, 0xFF	; 255
     8d6:	7f 4f       	sbci	r23, 0xFF	; 255
     8d8:	8b 2d       	mov	r24, r11
     8da:	5f d6       	rcall	.+3262   	; 0x159a <recvfrom>
     8dc:	2b 01       	movw	r4, r22
     8de:	3c 01       	movw	r6, r24
	//printf(">>rlen: %u, len: %u\r\n", rlen, len);
	if(data_buf[0] == PING_REPLY)
     8e0:	49 81       	ldd	r20, Y+1	; 0x01
     8e2:	41 11       	cpse	r20, r1
     8e4:	3d c0       	rjmp	.+122    	; 0x960 <ping_read+0xd6>
	{
		PingReply.Type 		 = data_buf[0];
     8e6:	ec ef       	ldi	r30, 0xFC	; 252
     8e8:	f8 e1       	ldi	r31, 0x18	; 24
     8ea:	40 83       	st	Z, r20
		PingReply.Code 		 = data_buf[1];
     8ec:	8a 81       	ldd	r24, Y+2	; 0x02
     8ee:	81 83       	std	Z+1, r24	; 0x01
		PingReply.CheckSum   = (data_buf[3]<<8) + data_buf[2];
     8f0:	8c 81       	ldd	r24, Y+4	; 0x04
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	98 2f       	mov	r25, r24
     8f6:	88 27       	eor	r24, r24
     8f8:	2b 81       	ldd	r18, Y+3	; 0x03
     8fa:	82 0f       	add	r24, r18
     8fc:	91 1d       	adc	r25, r1
     8fe:	93 83       	std	Z+3, r25	; 0x03
     900:	82 83       	std	Z+2, r24	; 0x02
		PingReply.ID 		 = (data_buf[5]<<8) + data_buf[4];
     902:	2e 81       	ldd	r18, Y+6	; 0x06
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	32 2f       	mov	r19, r18
     908:	22 27       	eor	r18, r18
     90a:	8d 81       	ldd	r24, Y+5	; 0x05
     90c:	28 0f       	add	r18, r24
     90e:	31 1d       	adc	r19, r1
     910:	35 83       	std	Z+5, r19	; 0x05
     912:	24 83       	std	Z+4, r18	; 0x04
		PingReply.SeqNum 	 = (data_buf[7]<<8) + data_buf[6];
     914:	08 85       	ldd	r16, Y+8	; 0x08
     916:	10 e0       	ldi	r17, 0x00	; 0
     918:	10 2f       	mov	r17, r16
     91a:	00 27       	eor	r16, r16
     91c:	8f 81       	ldd	r24, Y+7	; 0x07
     91e:	08 0f       	add	r16, r24
     920:	11 1d       	adc	r17, r1
     922:	17 83       	std	Z+7, r17	; 0x07
     924:	06 83       	std	Z+6, r16	; 0x06

		for(i=0; i<len-8 ; i++)
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e c0       	rjmp	.+28     	; 0x948 <ping_read+0xbe>
		{
			PingReply.Data[i] = data_buf[8+i];
     92c:	fc 01       	movw	r30, r24
     92e:	38 96       	adiw	r30, 0x08	; 8
     930:	a1 e0       	ldi	r26, 0x01	; 1
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	ac 0f       	add	r26, r28
     936:	bd 1f       	adc	r27, r29
     938:	ea 0f       	add	r30, r26
     93a:	fb 1f       	adc	r31, r27
     93c:	50 81       	ld	r21, Z
     93e:	fc 01       	movw	r30, r24
     940:	e4 50       	subi	r30, 0x04	; 4
     942:	f7 4e       	sbci	r31, 0xE7	; 231
     944:	50 87       	std	Z+8, r21	; 0x08
		PingReply.Code 		 = data_buf[1];
		PingReply.CheckSum   = (data_buf[3]<<8) + data_buf[2];
		PingReply.ID 		 = (data_buf[5]<<8) + data_buf[4];
		PingReply.SeqNum 	 = (data_buf[7]<<8) + data_buf[6];

		for(i=0; i<len-8 ; i++)
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	7b 01       	movw	r14, r22
     94a:	b8 e0       	ldi	r27, 0x08	; 8
     94c:	eb 1a       	sub	r14, r27
     94e:	f1 08       	sbc	r15, r1
     950:	8e 15       	cp	r24, r14
     952:	9f 05       	cpc	r25, r15
     954:	58 f3       	brcs	.-42     	; 0x92c <ping_read+0xa2>
					htons(PingReply.ID),  htons(PingReply.SeqNum),
					(int16_t) (len+6));
			printf("\r\n");
#endif
			//Fire call-buck function
			icmp_cb(s, addr, PingReply.Type, PingReply.ID, PingReply.SeqNum, len-8);
     956:	b6 01       	movw	r22, r12
     958:	8b 2d       	mov	r24, r11
     95a:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <icmp_cb>
     95e:	43 c0       	rjmp	.+134    	; 0x9e6 <ping_read+0x15c>
		}
	}
	else if(data_buf[0] == PING_REQUEST)
     960:	48 30       	cpi	r20, 0x08	; 8
     962:	09 f0       	breq	.+2      	; 0x966 <ping_read+0xdc>
     964:	40 c0       	rjmp	.+128    	; 0x9e6 <ping_read+0x15c>
	{
		PingReply.Type 		 = data_buf[0];
     966:	ec ef       	ldi	r30, 0xFC	; 252
     968:	f8 e1       	ldi	r31, 0x18	; 24
     96a:	40 83       	st	Z, r20
		PingReply.Code 		 = data_buf[1];
     96c:	8a 81       	ldd	r24, Y+2	; 0x02
     96e:	81 83       	std	Z+1, r24	; 0x01
		PingReply.CheckSum  = (data_buf[3]<<8) + data_buf[2];
     970:	8c 81       	ldd	r24, Y+4	; 0x04
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	98 2f       	mov	r25, r24
     976:	88 27       	eor	r24, r24
     978:	2b 81       	ldd	r18, Y+3	; 0x03
     97a:	82 0f       	add	r24, r18
     97c:	91 1d       	adc	r25, r1
     97e:	93 83       	std	Z+3, r25	; 0x03
     980:	82 83       	std	Z+2, r24	; 0x02
		PingReply.ID 		 = (data_buf[5]<<8) + data_buf[4];
     982:	2e 81       	ldd	r18, Y+6	; 0x06
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	32 2f       	mov	r19, r18
     988:	22 27       	eor	r18, r18
     98a:	8d 81       	ldd	r24, Y+5	; 0x05
     98c:	28 0f       	add	r18, r24
     98e:	31 1d       	adc	r19, r1
     990:	35 83       	std	Z+5, r19	; 0x05
     992:	24 83       	std	Z+4, r18	; 0x04
		PingReply.SeqNum 	 = (data_buf[7]<<8) + data_buf[6];
     994:	08 85       	ldd	r16, Y+8	; 0x08
     996:	10 e0       	ldi	r17, 0x00	; 0
     998:	10 2f       	mov	r17, r16
     99a:	00 27       	eor	r16, r16
     99c:	8f 81       	ldd	r24, Y+7	; 0x07
     99e:	08 0f       	add	r16, r24
     9a0:	11 1d       	adc	r17, r1
     9a2:	17 83       	std	Z+7, r17	; 0x07
     9a4:	06 83       	std	Z+6, r16	; 0x06

		for(i=0; i<len-8 ; i++)
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e c0       	rjmp	.+28     	; 0x9c8 <ping_read+0x13e>
		{
			PingReply.Data[i] = data_buf[8+i];
     9ac:	fc 01       	movw	r30, r24
     9ae:	38 96       	adiw	r30, 0x08	; 8
     9b0:	a1 e0       	ldi	r26, 0x01	; 1
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	ac 0f       	add	r26, r28
     9b6:	bd 1f       	adc	r27, r29
     9b8:	ea 0f       	add	r30, r26
     9ba:	fb 1f       	adc	r31, r27
     9bc:	50 81       	ld	r21, Z
     9be:	fc 01       	movw	r30, r24
     9c0:	e4 50       	subi	r30, 0x04	; 4
     9c2:	f7 4e       	sbci	r31, 0xE7	; 231
     9c4:	50 87       	std	Z+8, r21	; 0x08
		PingReply.Code 		 = data_buf[1];
		PingReply.CheckSum  = (data_buf[3]<<8) + data_buf[2];
		PingReply.ID 		 = (data_buf[5]<<8) + data_buf[4];
		PingReply.SeqNum 	 = (data_buf[7]<<8) + data_buf[6];

		for(i=0; i<len-8 ; i++)
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	7b 01       	movw	r14, r22
     9ca:	b8 e0       	ldi	r27, 0x08	; 8
     9cc:	eb 1a       	sub	r14, r27
     9ce:	f1 08       	sbc	r15, r1
     9d0:	8e 15       	cp	r24, r14
     9d2:	9f 05       	cpc	r25, r15
     9d4:	58 f3       	brcs	.-42     	; 0x9ac <ping_read+0x122>
			printf( "++crc is ok\r\n");
		}
#endif
*/
		//Fire call-buck function
		icmp_cb(s, addr, PingReply.Type, PingReply.ID, PingReply.SeqNum, len-8);
     9d6:	b6 01       	movw	r22, r12
     9d8:	8b 2d       	mov	r24, r11
     9da:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <icmp_cb>
		//Send ping REPLY to PING REQUEST to addr
		ping_reply(s, addr, len);
     9de:	a2 01       	movw	r20, r4
     9e0:	b6 01       	movw	r22, r12
     9e2:	8b 2d       	mov	r24, r11
     9e4:	29 df       	rcall	.-430    	; 0x838 <ping_reply>
	{
#ifdef PING_DEBUG
		printf(" Unkonwn ICMP type msg:%u\n", data_buf[0]);
#endif
	}
}// ping_read
     9e6:	ce 57       	subi	r28, 0x7E	; 126
     9e8:	df 4f       	sbci	r29, 0xFF	; 255
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	df 90       	pop	r13
     a02:	cf 90       	pop	r12
     a04:	bf 90       	pop	r11
     a06:	7f 90       	pop	r7
     a08:	6f 90       	pop	r6
     a0a:	5f 90       	pop	r5
     a0c:	4f 90       	pop	r4
     a0e:	08 95       	ret

00000a10 <ping_srv>:

void ping_srv(uint8_t s)
{
     a10:	8f 92       	push	r8
     a12:	9f 92       	push	r9
     a14:	bf 92       	push	r11
     a16:	cf 92       	push	r12
     a18:	df 92       	push	r13
     a1a:	ef 92       	push	r14
     a1c:	ff 92       	push	r15
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	00 d0       	rcall	.+0      	; 0xa28 <ping_srv+0x18>
     a28:	1f 92       	push	r1
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	b8 2e       	mov	r11, r24
	int32_t len = 0;
	uint8_t dest_ip[4] = { 0, 0, 0, 0 };
     a30:	19 82       	std	Y+1, r1	; 0x01
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	1b 82       	std	Y+3, r1	; 0x03
     a36:	1c 82       	std	Y+4, r1	; 0x04
	switch(getSn_SR(s))
     a38:	08 2f       	mov	r16, r24
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	b8 01       	movw	r22, r16
     a3e:	66 0f       	add	r22, r22
     a40:	77 1f       	adc	r23, r23
     a42:	66 0f       	add	r22, r22
     a44:	77 1f       	adc	r23, r23
     a46:	6f 5f       	subi	r22, 0xFF	; 255
     a48:	7f 4f       	sbci	r23, 0xFF	; 255
     a4a:	4b 01       	movw	r8, r22
     a4c:	88 0c       	add	r8, r8
     a4e:	99 1c       	adc	r9, r9
     a50:	88 0c       	add	r8, r8
     a52:	99 1c       	adc	r9, r9
     a54:	88 0c       	add	r8, r8
     a56:	99 1c       	adc	r9, r9
     a58:	64 01       	movw	r12, r8
     a5a:	8d ef       	ldi	r24, 0xFD	; 253
     a5c:	d8 1a       	sub	r13, r24
     a5e:	0d 2c       	mov	r0, r13
     a60:	00 0c       	add	r0, r0
     a62:	ee 08       	sbc	r14, r14
     a64:	ff 08       	sbc	r15, r15
     a66:	c7 01       	movw	r24, r14
     a68:	b6 01       	movw	r22, r12
     a6a:	75 d7       	rcall	.+3818   	; 0x1956 <WIZCHIP_READ>
     a6c:	88 23       	and	r24, r24
     a6e:	21 f0       	breq	.+8      	; 0xa78 <ping_srv+0x68>
     a70:	82 33       	cpi	r24, 0x32	; 50
     a72:	09 f4       	brne	.+2      	; 0xa76 <ping_srv+0x66>
     a74:	3c c0       	rjmp	.+120    	; 0xaee <ping_srv+0xde>
     a76:	46 c0       	rjmp	.+140    	; 0xb04 <ping_srv+0xf4>
	{
	case SOCK_CLOSED:
		close(s);
     a78:	8b 2d       	mov	r24, r11
     a7a:	54 d0       	rcall	.+168    	; 0xb24 <close>
		// set ICMP Protocol
		IINCHIP_WRITE(Sn_PROTO(s), IPPROTO_ICMP);
     a7c:	b4 01       	movw	r22, r8
     a7e:	7c 5e       	subi	r23, 0xEC	; 236
     a80:	07 2e       	mov	r0, r23
     a82:	00 0c       	add	r0, r0
     a84:	88 0b       	sbc	r24, r24
     a86:	99 0b       	sbc	r25, r25
     a88:	41 e0       	ldi	r20, 0x01	; 1
     a8a:	cc d7       	rcall	.+3992   	; 0x1a24 <WIZCHIP_WRITE>
		// open the SOCKET with IPRAW mode,
		if(socket(s,Sn_MR_IPRAW,3000,0)!=s){
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	48 eb       	ldi	r20, 0xB8	; 184
     a90:	5b e0       	ldi	r21, 0x0B	; 11
     a92:	63 e0       	ldi	r22, 0x03	; 3
     a94:	8b 2d       	mov	r24, r11
     a96:	b6 d0       	rcall	.+364    	; 0xc04 <socket>
     a98:	08 2e       	mov	r0, r24
     a9a:	00 0c       	add	r0, r0
     a9c:	99 0b       	sbc	r25, r25
     a9e:	08 17       	cp	r16, r24
     aa0:	19 07       	cpc	r17, r25
     aa2:	69 f0       	breq	.+26     	; 0xabe <ping_srv+0xae>
			//if fail then Error
			printf("\r\n socket %d fail r\n",s);
     aa4:	1f 92       	push	r1
     aa6:	bf 92       	push	r11
     aa8:	8c e5       	ldi	r24, 0x5C	; 92
     aaa:	93 e0       	ldi	r25, 0x03	; 3
     aac:	9f 93       	push	r25
     aae:	8f 93       	push	r24
     ab0:	0e 94 73 23 	call	0x46e6	; 0x46e6 <printf>
			return;
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
		}
		/* Check socket register */
		while(getSn_SR(s)!=SOCK_IPRAW);
     abc:	23 c0       	rjmp	.+70     	; 0xb04 <ping_srv+0xf4>
     abe:	c7 01       	movw	r24, r14
     ac0:	b6 01       	movw	r22, r12
     ac2:	49 d7       	rcall	.+3730   	; 0x1956 <WIZCHIP_READ>
     ac4:	82 33       	cpi	r24, 0x32	; 50
     ac6:	d9 f7       	brne	.-10     	; 0xabe <ping_srv+0xae>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ac8:	8f ec       	ldi	r24, 0xCF	; 207
     aca:	97 e0       	ldi	r25, 0x07	; 7
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	f1 f7       	brne	.-4      	; 0xacc <ping_srv+0xbc>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <ping_srv+0xc2>
     ad2:	00 00       	nop
		//wait_1ms(100); // wait 100ms
		_delay_us(1000); // wait 1 ms
		printf("%d:Opened, IPRAW mode (ICMP ping)\r\n",s);
     ad4:	1f 92       	push	r1
     ad6:	bf 92       	push	r11
     ad8:	81 e7       	ldi	r24, 0x71	; 113
     ada:	93 e0       	ldi	r25, 0x03	; 3
     adc:	9f 93       	push	r25
     ade:	8f 93       	push	r24
     ae0:	0e 94 73 23 	call	0x46e6	; 0x46e6 <printf>
		break;
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	0b c0       	rjmp	.+22     	; 0xb04 <ping_srv+0xf4>
	case SOCK_IPRAW:

		//Check if IPRAW socket have RX data
		if ( (len = getSn_RX_RSR(s) ) > 0)
     aee:	8b 2d       	mov	r24, r11
     af0:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <getSn_RX_RSR>
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	31 f0       	breq	.+12     	; 0xb04 <ping_srv+0xf4>
		{
			//Yes, RX data is present
			ping_read(s, dest_ip, len);
     af8:	ac 01       	movw	r20, r24
     afa:	be 01       	movw	r22, r28
     afc:	6f 5f       	subi	r22, 0xFF	; 255
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	8b 2d       	mov	r24, r11
     b02:	c3 de       	rcall	.-634    	; 0x88a <ping_read>
		break;
	default:
		break;

	}
}
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	df 90       	pop	r13
     b1a:	cf 90       	pop	r12
     b1c:	bf 90       	pop	r11
     b1e:	9f 90       	pop	r9
     b20:	8f 90       	pop	r8
     b22:	08 95       	ret

00000b24 <close>:
			return SOCKERR_SOCKCLOSED;
		}
	}
   
   return SOCK_OK;
}
     b24:	bf 92       	push	r11
     b26:	cf 92       	push	r12
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	89 30       	cpi	r24, 0x09	; 9
     b38:	08 f0       	brcs	.+2      	; 0xb3c <close+0x18>
     b3a:	59 c0       	rjmp	.+178    	; 0xbee <close+0xca>
     b3c:	b8 2e       	mov	r11, r24
     b3e:	08 2f       	mov	r16, r24
     b40:	10 e0       	ldi	r17, 0x00	; 0
     b42:	e8 01       	movw	r28, r16
     b44:	cc 0f       	add	r28, r28
     b46:	dd 1f       	adc	r29, r29
     b48:	cc 0f       	add	r28, r28
     b4a:	dd 1f       	adc	r29, r29
     b4c:	21 96       	adiw	r28, 0x01	; 1
     b4e:	cc 0f       	add	r28, r28
     b50:	dd 1f       	adc	r29, r29
     b52:	cc 0f       	add	r28, r28
     b54:	dd 1f       	adc	r29, r29
     b56:	cc 0f       	add	r28, r28
     b58:	dd 1f       	adc	r29, r29
     b5a:	6e 01       	movw	r12, r28
     b5c:	d3 94       	inc	r13
     b5e:	0d 2c       	mov	r0, r13
     b60:	00 0c       	add	r0, r0
     b62:	ee 08       	sbc	r14, r14
     b64:	ff 08       	sbc	r15, r15
     b66:	40 e1       	ldi	r20, 0x10	; 16
     b68:	c7 01       	movw	r24, r14
     b6a:	b6 01       	movw	r22, r12
     b6c:	5b d7       	rcall	.+3766   	; 0x1a24 <WIZCHIP_WRITE>
     b6e:	c7 01       	movw	r24, r14
     b70:	b6 01       	movw	r22, r12
     b72:	f1 d6       	rcall	.+3554   	; 0x1956 <WIZCHIP_READ>
     b74:	81 11       	cpse	r24, r1
     b76:	fb cf       	rjmp	.-10     	; 0xb6e <close+0x4a>
     b78:	be 01       	movw	r22, r28
     b7a:	7e 5f       	subi	r23, 0xFE	; 254
     b7c:	07 2e       	mov	r0, r23
     b7e:	00 0c       	add	r0, r0
     b80:	88 0b       	sbc	r24, r24
     b82:	99 0b       	sbc	r25, r25
     b84:	4f e1       	ldi	r20, 0x1F	; 31
     b86:	4e d7       	rcall	.+3740   	; 0x1a24 <WIZCHIP_WRITE>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <close+0x6e>
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	ba 94       	dec	r11
     b94:	e2 f7       	brpl	.-8      	; 0xb8e <close+0x6a>
     b96:	80 95       	com	r24
     b98:	90 95       	com	r25
     b9a:	20 91 5a 04 	lds	r18, 0x045A	; 0x80045a <sock_io_mode>
     b9e:	30 91 5b 04 	lds	r19, 0x045B	; 0x80045b <sock_io_mode+0x1>
     ba2:	28 23       	and	r18, r24
     ba4:	39 23       	and	r19, r25
     ba6:	30 93 5b 04 	sts	0x045B, r19	; 0x80045b <sock_io_mode+0x1>
     baa:	20 93 5a 04 	sts	0x045A, r18	; 0x80045a <sock_io_mode>
     bae:	20 91 58 04 	lds	r18, 0x0458	; 0x800458 <sock_is_sending>
     bb2:	30 91 59 04 	lds	r19, 0x0459	; 0x800459 <sock_is_sending+0x1>
     bb6:	82 23       	and	r24, r18
     bb8:	93 23       	and	r25, r19
     bba:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <sock_is_sending+0x1>
     bbe:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <sock_is_sending>
     bc2:	f8 01       	movw	r30, r16
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	e8 5b       	subi	r30, 0xB8	; 184
     bca:	fb 4f       	sbci	r31, 0xFB	; 251
     bcc:	11 82       	std	Z+1, r1	; 0x01
     bce:	10 82       	st	Z, r1
     bd0:	f8 01       	movw	r30, r16
     bd2:	e0 5c       	subi	r30, 0xC0	; 192
     bd4:	fb 4f       	sbci	r31, 0xFB	; 251
     bd6:	10 82       	st	Z, r1
     bd8:	be 01       	movw	r22, r28
     bda:	7d 5f       	subi	r23, 0xFD	; 253
     bdc:	07 2e       	mov	r0, r23
     bde:	00 0c       	add	r0, r0
     be0:	88 0b       	sbc	r24, r24
     be2:	99 0b       	sbc	r25, r25
     be4:	b8 d6       	rcall	.+3440   	; 0x1956 <WIZCHIP_READ>
     be6:	81 11       	cpse	r24, r1
     be8:	f7 cf       	rjmp	.-18     	; 0xbd8 <close+0xb4>
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <close+0xcc>
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13
     bfe:	cf 90       	pop	r12
     c00:	bf 90       	pop	r11
     c02:	08 95       	ret

00000c04 <socket>:
     c04:	4f 92       	push	r4
     c06:	5f 92       	push	r5
     c08:	6f 92       	push	r6
     c0a:	7f 92       	push	r7
     c0c:	af 92       	push	r10
     c0e:	bf 92       	push	r11
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	00 d0       	rcall	.+0      	; 0xc22 <socket+0x1e>
     c22:	1f 92       	push	r1
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	f8 2e       	mov	r15, r24
     c2a:	56 2e       	mov	r5, r22
     c2c:	3a 01       	movw	r6, r20
     c2e:	e2 2e       	mov	r14, r18
     c30:	28 e0       	ldi	r18, 0x08	; 8
     c32:	28 17       	cp	r18, r24
     c34:	08 f4       	brcc	.+2      	; 0xc38 <socket+0x34>
     c36:	c5 c0       	rjmp	.+394    	; 0xdc2 <socket+0x1be>
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	68 17       	cp	r22, r24
     c3c:	39 f0       	breq	.+14     	; 0xc4c <socket+0x48>
     c3e:	68 17       	cp	r22, r24
     c40:	08 f4       	brcc	.+2      	; 0xc44 <socket+0x40>
     c42:	c1 c0       	rjmp	.+386    	; 0xdc6 <socket+0x1c2>
     c44:	24 e0       	ldi	r18, 0x04	; 4
     c46:	26 17       	cp	r18, r22
     c48:	a8 f4       	brcc	.+42     	; 0xc74 <socket+0x70>
     c4a:	bd c0       	rjmp	.+378    	; 0xdc6 <socket+0x1c2>
     c4c:	24 e0       	ldi	r18, 0x04	; 4
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	ae 01       	movw	r20, r28
     c52:	4f 5f       	subi	r20, 0xFF	; 255
     c54:	5f 4f       	sbci	r21, 0xFF	; 255
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	7f e0       	ldi	r23, 0x0F	; 15
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	54 d7       	rcall	.+3752   	; 0x1b08 <WIZCHIP_READ_BUF>
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	ab 81       	ldd	r26, Y+3	; 0x03
     c66:	bc 81       	ldd	r27, Y+4	; 0x04
     c68:	89 2b       	or	r24, r25
     c6a:	8a 2b       	or	r24, r26
     c6c:	8b 2b       	or	r24, r27
     c6e:	11 f4       	brne	.+4      	; 0xc74 <socket+0x70>
     c70:	8d ef       	ldi	r24, 0xFD	; 253
     c72:	b2 c0       	rjmp	.+356    	; 0xdd8 <socket+0x1d4>
     c74:	e2 fc       	sbrc	r14, 2
     c76:	a9 c0       	rjmp	.+338    	; 0xdca <socket+0x1c6>
     c78:	ee 20       	and	r14, r14
     c7a:	a9 f0       	breq	.+42     	; 0xca6 <socket+0xa2>
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	58 16       	cp	r5, r24
     c80:	21 f0       	breq	.+8      	; 0xc8a <socket+0x86>
     c82:	22 e0       	ldi	r18, 0x02	; 2
     c84:	52 16       	cp	r5, r18
     c86:	29 f0       	breq	.+10     	; 0xc92 <socket+0x8e>
     c88:	0e c0       	rjmp	.+28     	; 0xca6 <socket+0xa2>
     c8a:	8e 2d       	mov	r24, r14
     c8c:	81 72       	andi	r24, 0x21	; 33
     c8e:	59 f4       	brne	.+22     	; 0xca6 <socket+0xa2>
     c90:	9e c0       	rjmp	.+316    	; 0xdce <socket+0x1ca>
     c92:	e5 fe       	sbrs	r14, 5
     c94:	03 c0       	rjmp	.+6      	; 0xc9c <socket+0x98>
     c96:	ee 20       	and	r14, r14
     c98:	0c f0       	brlt	.+2      	; 0xc9c <socket+0x98>
     c9a:	9b c0       	rjmp	.+310    	; 0xdd2 <socket+0x1ce>
     c9c:	e4 fe       	sbrs	r14, 4
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <socket+0xa2>
     ca0:	ee 20       	and	r14, r14
     ca2:	0c f0       	brlt	.+2      	; 0xca6 <socket+0xa2>
     ca4:	98 c0       	rjmp	.+304    	; 0xdd6 <socket+0x1d2>
     ca6:	8f 2d       	mov	r24, r15
     ca8:	3d df       	rcall	.-390    	; 0xb24 <close>
     caa:	cf 2c       	mov	r12, r15
     cac:	d1 2c       	mov	r13, r1
     cae:	86 01       	movw	r16, r12
     cb0:	00 0f       	add	r16, r16
     cb2:	11 1f       	adc	r17, r17
     cb4:	00 0f       	add	r16, r16
     cb6:	11 1f       	adc	r17, r17
     cb8:	0f 5f       	subi	r16, 0xFF	; 255
     cba:	1f 4f       	sbci	r17, 0xFF	; 255
     cbc:	00 0f       	add	r16, r16
     cbe:	11 1f       	adc	r17, r17
     cc0:	00 0f       	add	r16, r16
     cc2:	11 1f       	adc	r17, r17
     cc4:	00 0f       	add	r16, r16
     cc6:	11 1f       	adc	r17, r17
     cc8:	4e 2d       	mov	r20, r14
     cca:	40 7f       	andi	r20, 0xF0	; 240
     ccc:	45 29       	or	r20, r5
     cce:	b8 01       	movw	r22, r16
     cd0:	01 2e       	mov	r0, r17
     cd2:	00 0c       	add	r0, r0
     cd4:	88 0b       	sbc	r24, r24
     cd6:	99 0b       	sbc	r25, r25
     cd8:	a5 d6       	rcall	.+3402   	; 0x1a24 <WIZCHIP_WRITE>
     cda:	61 14       	cp	r6, r1
     cdc:	71 04       	cpc	r7, r1
     cde:	91 f4       	brne	.+36     	; 0xd04 <socket+0x100>
     ce0:	60 90 08 02 	lds	r6, 0x0208	; 0x800208 <sock_any_port>
     ce4:	70 90 09 02 	lds	r7, 0x0209	; 0x800209 <sock_any_port+0x1>
     ce8:	c3 01       	movw	r24, r6
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <sock_any_port+0x1>
     cf0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <sock_any_port>
     cf4:	40 96       	adiw	r24, 0x10	; 16
     cf6:	31 f4       	brne	.+12     	; 0xd04 <socket+0x100>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 ec       	ldi	r25, 0xC0	; 192
     cfc:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <sock_any_port+0x1>
     d00:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <sock_any_port>
     d04:	b8 01       	movw	r22, r16
     d06:	7c 5f       	subi	r23, 0xFC	; 252
     d08:	07 2e       	mov	r0, r23
     d0a:	00 0c       	add	r0, r0
     d0c:	88 0b       	sbc	r24, r24
     d0e:	99 0b       	sbc	r25, r25
     d10:	47 2d       	mov	r20, r7
     d12:	88 d6       	rcall	.+3344   	; 0x1a24 <WIZCHIP_WRITE>
     d14:	b8 01       	movw	r22, r16
     d16:	7b 5f       	subi	r23, 0xFB	; 251
     d18:	07 2e       	mov	r0, r23
     d1a:	00 0c       	add	r0, r0
     d1c:	88 0b       	sbc	r24, r24
     d1e:	99 0b       	sbc	r25, r25
     d20:	46 2d       	mov	r20, r6
     d22:	80 d6       	rcall	.+3328   	; 0x1a24 <WIZCHIP_WRITE>
     d24:	28 01       	movw	r4, r16
     d26:	53 94       	inc	r5
     d28:	05 2c       	mov	r0, r5
     d2a:	00 0c       	add	r0, r0
     d2c:	66 08       	sbc	r6, r6
     d2e:	77 08       	sbc	r7, r7
     d30:	41 e0       	ldi	r20, 0x01	; 1
     d32:	c3 01       	movw	r24, r6
     d34:	b2 01       	movw	r22, r4
     d36:	76 d6       	rcall	.+3308   	; 0x1a24 <WIZCHIP_WRITE>
     d38:	c3 01       	movw	r24, r6
     d3a:	b2 01       	movw	r22, r4
     d3c:	0c d6       	rcall	.+3096   	; 0x1956 <WIZCHIP_READ>
     d3e:	81 11       	cpse	r24, r1
     d40:	fb cf       	rjmp	.-10     	; 0xd38 <socket+0x134>
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0f 2c       	mov	r0, r15
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <socket+0x14a>
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	0a 94       	dec	r0
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <socket+0x146>
     d52:	80 95       	com	r24
     d54:	90 95       	com	r25
     d56:	20 91 5a 04 	lds	r18, 0x045A	; 0x80045a <sock_io_mode>
     d5a:	30 91 5b 04 	lds	r19, 0x045B	; 0x80045b <sock_io_mode+0x1>
     d5e:	28 23       	and	r18, r24
     d60:	39 23       	and	r19, r25
     d62:	e0 fa       	bst	r14, 0
     d64:	aa 24       	eor	r10, r10
     d66:	a0 f8       	bld	r10, 0
     d68:	b1 2c       	mov	r11, r1
     d6a:	0f 2c       	mov	r0, r15
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <socket+0x16e>
     d6e:	aa 0c       	add	r10, r10
     d70:	bb 1c       	adc	r11, r11
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <socket+0x16a>
     d76:	a2 2a       	or	r10, r18
     d78:	b3 2a       	or	r11, r19
     d7a:	b0 92 5b 04 	sts	0x045B, r11	; 0x80045b <sock_io_mode+0x1>
     d7e:	a0 92 5a 04 	sts	0x045A, r10	; 0x80045a <sock_io_mode>
     d82:	20 91 58 04 	lds	r18, 0x0458	; 0x800458 <sock_is_sending>
     d86:	30 91 59 04 	lds	r19, 0x0459	; 0x800459 <sock_is_sending+0x1>
     d8a:	82 23       	and	r24, r18
     d8c:	93 23       	and	r25, r19
     d8e:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <sock_is_sending+0x1>
     d92:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <sock_is_sending>
     d96:	f6 01       	movw	r30, r12
     d98:	ee 0f       	add	r30, r30
     d9a:	ff 1f       	adc	r31, r31
     d9c:	e8 5b       	subi	r30, 0xB8	; 184
     d9e:	fb 4f       	sbci	r31, 0xFB	; 251
     da0:	11 82       	std	Z+1, r1	; 0x01
     da2:	10 82       	st	Z, r1
     da4:	f6 01       	movw	r30, r12
     da6:	e0 5c       	subi	r30, 0xC0	; 192
     da8:	fb 4f       	sbci	r31, 0xFB	; 251
     daa:	10 82       	st	Z, r1
     dac:	b8 01       	movw	r22, r16
     dae:	7d 5f       	subi	r23, 0xFD	; 253
     db0:	07 2e       	mov	r0, r23
     db2:	00 0c       	add	r0, r0
     db4:	88 0b       	sbc	r24, r24
     db6:	99 0b       	sbc	r25, r25
     db8:	ce d5       	rcall	.+2972   	; 0x1956 <WIZCHIP_READ>
     dba:	88 23       	and	r24, r24
     dbc:	b9 f3       	breq	.-18     	; 0xdac <socket+0x1a8>
     dbe:	8f 2d       	mov	r24, r15
     dc0:	0b c0       	rjmp	.+22     	; 0xdd8 <socket+0x1d4>
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
     dc4:	09 c0       	rjmp	.+18     	; 0xdd8 <socket+0x1d4>
     dc6:	8b ef       	ldi	r24, 0xFB	; 251
     dc8:	07 c0       	rjmp	.+14     	; 0xdd8 <socket+0x1d4>
     dca:	8a ef       	ldi	r24, 0xFA	; 250
     dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <socket+0x1d4>
     dce:	8a ef       	ldi	r24, 0xFA	; 250
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <socket+0x1d4>
     dd2:	8a ef       	ldi	r24, 0xFA	; 250
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <socket+0x1d4>
     dd6:	8a ef       	ldi	r24, 0xFA	; 250
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	df 90       	pop	r13
     dee:	cf 90       	pop	r12
     df0:	bf 90       	pop	r11
     df2:	af 90       	pop	r10
     df4:	7f 90       	pop	r7
     df6:	6f 90       	pop	r6
     df8:	5f 90       	pop	r5
     dfa:	4f 90       	pop	r4
     dfc:	08 95       	ret

00000dfe <listen>:
     dfe:	8f 92       	push	r8
     e00:	9f 92       	push	r9
     e02:	af 92       	push	r10
     e04:	bf 92       	push	r11
     e06:	cf 92       	push	r12
     e08:	df 92       	push	r13
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	cf 93       	push	r28
     e10:	89 30       	cpi	r24, 0x09	; 9
     e12:	08 f0       	brcs	.+2      	; 0xe16 <listen+0x18>
     e14:	3f c0       	rjmp	.+126    	; 0xe94 <listen+0x96>
     e16:	c8 2f       	mov	r28, r24
     e18:	c8 2e       	mov	r12, r24
     e1a:	d1 2c       	mov	r13, r1
     e1c:	cc 0c       	add	r12, r12
     e1e:	dd 1c       	adc	r13, r13
     e20:	cc 0c       	add	r12, r12
     e22:	dd 1c       	adc	r13, r13
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	c8 1a       	sub	r12, r24
     e28:	d8 0a       	sbc	r13, r24
     e2a:	cc 0c       	add	r12, r12
     e2c:	dd 1c       	adc	r13, r13
     e2e:	cc 0c       	add	r12, r12
     e30:	dd 1c       	adc	r13, r13
     e32:	cc 0c       	add	r12, r12
     e34:	dd 1c       	adc	r13, r13
     e36:	b6 01       	movw	r22, r12
     e38:	0d 2c       	mov	r0, r13
     e3a:	00 0c       	add	r0, r0
     e3c:	88 0b       	sbc	r24, r24
     e3e:	99 0b       	sbc	r25, r25
     e40:	8a d5       	rcall	.+2836   	; 0x1956 <WIZCHIP_READ>
     e42:	8f 70       	andi	r24, 0x0F	; 15
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	41 f5       	brne	.+80     	; 0xe98 <listen+0x9a>
     e48:	46 01       	movw	r8, r12
     e4a:	8d ef       	ldi	r24, 0xFD	; 253
     e4c:	98 1a       	sub	r9, r24
     e4e:	09 2c       	mov	r0, r9
     e50:	00 0c       	add	r0, r0
     e52:	aa 08       	sbc	r10, r10
     e54:	bb 08       	sbc	r11, r11
     e56:	c5 01       	movw	r24, r10
     e58:	b4 01       	movw	r22, r8
     e5a:	7d d5       	rcall	.+2810   	; 0x1956 <WIZCHIP_READ>
     e5c:	83 31       	cpi	r24, 0x13	; 19
     e5e:	f1 f4       	brne	.+60     	; 0xe9c <listen+0x9e>
     e60:	d3 94       	inc	r13
     e62:	0d 2c       	mov	r0, r13
     e64:	00 0c       	add	r0, r0
     e66:	ee 08       	sbc	r14, r14
     e68:	ff 08       	sbc	r15, r15
     e6a:	42 e0       	ldi	r20, 0x02	; 2
     e6c:	c7 01       	movw	r24, r14
     e6e:	b6 01       	movw	r22, r12
     e70:	d9 d5       	rcall	.+2994   	; 0x1a24 <WIZCHIP_WRITE>
     e72:	c7 01       	movw	r24, r14
     e74:	b6 01       	movw	r22, r12
     e76:	6f d5       	rcall	.+2782   	; 0x1956 <WIZCHIP_READ>
     e78:	81 11       	cpse	r24, r1
     e7a:	fb cf       	rjmp	.-10     	; 0xe72 <listen+0x74>
     e7c:	04 c0       	rjmp	.+8      	; 0xe86 <listen+0x88>
     e7e:	8c 2f       	mov	r24, r28
     e80:	51 de       	rcall	.-862    	; 0xb24 <close>
     e82:	8c ef       	ldi	r24, 0xFC	; 252
     e84:	0c c0       	rjmp	.+24     	; 0xe9e <listen+0xa0>
     e86:	c5 01       	movw	r24, r10
     e88:	b4 01       	movw	r22, r8
     e8a:	65 d5       	rcall	.+2762   	; 0x1956 <WIZCHIP_READ>
     e8c:	84 31       	cpi	r24, 0x14	; 20
     e8e:	b9 f7       	brne	.-18     	; 0xe7e <listen+0x80>
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	05 c0       	rjmp	.+10     	; 0xe9e <listen+0xa0>
     e94:	8f ef       	ldi	r24, 0xFF	; 255
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <listen+0xa0>
     e98:	8b ef       	ldi	r24, 0xFB	; 251
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <listen+0xa0>
     e9c:	8d ef       	ldi	r24, 0xFD	; 253
     e9e:	cf 91       	pop	r28
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	9f 90       	pop	r9
     eae:	8f 90       	pop	r8
     eb0:	08 95       	ret

00000eb2 <disconnect>:

int8_t disconnect(uint8_t sn)
{
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
   CHECK_SOCKNUM();
     ec0:	89 30       	cpi	r24, 0x09	; 9
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <disconnect+0x14>
     ec4:	5d c0       	rjmp	.+186    	; 0xf80 <disconnect+0xce>
     ec6:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     ec8:	c8 2f       	mov	r28, r24
     eca:	d0 e0       	ldi	r29, 0x00	; 0
     ecc:	cc 0f       	add	r28, r28
     ece:	dd 1f       	adc	r29, r29
     ed0:	cc 0f       	add	r28, r28
     ed2:	dd 1f       	adc	r29, r29
     ed4:	21 96       	adiw	r28, 0x01	; 1
     ed6:	cc 0f       	add	r28, r28
     ed8:	dd 1f       	adc	r29, r29
     eda:	cc 0f       	add	r28, r28
     edc:	dd 1f       	adc	r29, r29
     ede:	cc 0f       	add	r28, r28
     ee0:	dd 1f       	adc	r29, r29
     ee2:	be 01       	movw	r22, r28
     ee4:	0d 2e       	mov	r0, r29
     ee6:	00 0c       	add	r0, r0
     ee8:	88 0b       	sbc	r24, r24
     eea:	99 0b       	sbc	r25, r25
     eec:	34 d5       	rcall	.+2664   	; 0x1956 <WIZCHIP_READ>
     eee:	8f 70       	andi	r24, 0x0F	; 15
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	09 f0       	breq	.+2      	; 0xef6 <disconnect+0x44>
     ef4:	47 c0       	rjmp	.+142    	; 0xf84 <disconnect+0xd2>
	setSn_CR(sn,Sn_CR_DISCON);
     ef6:	6e 01       	movw	r12, r28
     ef8:	d3 94       	inc	r13
     efa:	0d 2c       	mov	r0, r13
     efc:	00 0c       	add	r0, r0
     efe:	ee 08       	sbc	r14, r14
     f00:	ff 08       	sbc	r15, r15
     f02:	48 e0       	ldi	r20, 0x08	; 8
     f04:	c7 01       	movw	r24, r14
     f06:	b6 01       	movw	r22, r12
     f08:	8d d5       	rcall	.+2842   	; 0x1a24 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
     f0a:	c7 01       	movw	r24, r14
     f0c:	b6 01       	movw	r22, r12
     f0e:	23 d5       	rcall	.+2630   	; 0x1956 <WIZCHIP_READ>
     f10:	81 11       	cpse	r24, r1
     f12:	fb cf       	rjmp	.-10     	; 0xf0a <disconnect+0x58>
	sock_is_sending &= ~(1<<sn);
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	01 2e       	mov	r0, r17
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <disconnect+0x6e>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <disconnect+0x6a>
     f24:	9c 01       	movw	r18, r24
     f26:	20 95       	com	r18
     f28:	30 95       	com	r19
     f2a:	40 91 58 04 	lds	r20, 0x0458	; 0x800458 <sock_is_sending>
     f2e:	50 91 59 04 	lds	r21, 0x0459	; 0x800459 <sock_is_sending+0x1>
     f32:	24 23       	and	r18, r20
     f34:	35 23       	and	r19, r21
     f36:	30 93 59 04 	sts	0x0459, r19	; 0x800459 <sock_is_sending+0x1>
     f3a:	20 93 58 04 	sts	0x0458, r18	; 0x800458 <sock_is_sending>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     f3e:	20 91 5a 04 	lds	r18, 0x045A	; 0x80045a <sock_io_mode>
     f42:	30 91 5b 04 	lds	r19, 0x045B	; 0x80045b <sock_io_mode+0x1>
     f46:	82 23       	and	r24, r18
     f48:	93 23       	and	r25, r19
     f4a:	89 2b       	or	r24, r25
     f4c:	71 f0       	breq	.+28     	; 0xf6a <disconnect+0xb8>
     f4e:	1c c0       	rjmp	.+56     	; 0xf88 <disconnect+0xd6>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
     f50:	be 01       	movw	r22, r28
     f52:	7e 5f       	subi	r23, 0xFE	; 254
     f54:	07 2e       	mov	r0, r23
     f56:	00 0c       	add	r0, r0
     f58:	88 0b       	sbc	r24, r24
     f5a:	99 0b       	sbc	r25, r25
     f5c:	fc d4       	rcall	.+2552   	; 0x1956 <WIZCHIP_READ>
     f5e:	83 ff       	sbrs	r24, 3
	   {
	      close(sn);
     f60:	04 c0       	rjmp	.+8      	; 0xf6a <disconnect+0xb8>
     f62:	81 2f       	mov	r24, r17
     f64:	df dd       	rcall	.-1090   	; 0xb24 <close>
	      return SOCKERR_TIMEOUT;
     f66:	83 ef       	ldi	r24, 0xF3	; 243
     f68:	10 c0       	rjmp	.+32     	; 0xf8a <disconnect+0xd8>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
	while(getSn_SR(sn) != SOCK_CLOSED)
     f6a:	be 01       	movw	r22, r28
     f6c:	7d 5f       	subi	r23, 0xFD	; 253
     f6e:	07 2e       	mov	r0, r23
     f70:	00 0c       	add	r0, r0
     f72:	88 0b       	sbc	r24, r24
     f74:	99 0b       	sbc	r25, r25
     f76:	ef d4       	rcall	.+2526   	; 0x1956 <WIZCHIP_READ>
     f78:	81 11       	cpse	r24, r1
     f7a:	ea cf       	rjmp	.-44     	; 0xf50 <disconnect+0x9e>
	   {
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <disconnect+0xd8>
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <disconnect+0xd8>
   CHECK_SOCKMODE(Sn_MR_TCP);
     f84:	8b ef       	ldi	r24, 0xFB	; 251
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <disconnect+0xd8>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     f88:	80 e0       	ldi	r24, 0x00	; 0
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
}
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	ff 90       	pop	r15
     f92:	ef 90       	pop	r14
     f94:	df 90       	pop	r13
     f96:	cf 90       	pop	r12
     f98:	08 95       	ret

00000f9a <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
     f9a:	2f 92       	push	r2
     f9c:	3f 92       	push	r3
     f9e:	4f 92       	push	r4
     fa0:	5f 92       	push	r5
     fa2:	6f 92       	push	r6
     fa4:	7f 92       	push	r7
     fa6:	8f 92       	push	r8
     fa8:	9f 92       	push	r9
     faa:	af 92       	push	r10
     fac:	bf 92       	push	r11
     fae:	cf 92       	push	r12
     fb0:	df 92       	push	r13
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <send+0x26>
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <send+0x28>
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     fc6:	89 30       	cpi	r24, 0x09	; 9
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <send+0x32>
     fca:	c7 c0       	rjmp	.+398    	; 0x115a <send+0x1c0>
     fcc:	5e 83       	std	Y+6, r21	; 0x06
     fce:	4d 83       	std	Y+5, r20	; 0x05
     fd0:	1b 01       	movw	r2, r22
     fd2:	f8 2e       	mov	r15, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     fd4:	c8 2e       	mov	r12, r24
     fd6:	d1 2c       	mov	r13, r1
     fd8:	cc 0c       	add	r12, r12
     fda:	dd 1c       	adc	r13, r13
     fdc:	cc 0c       	add	r12, r12
     fde:	dd 1c       	adc	r13, r13
     fe0:	2f ef       	ldi	r18, 0xFF	; 255
     fe2:	c2 1a       	sub	r12, r18
     fe4:	d2 0a       	sbc	r13, r18
     fe6:	cc 0c       	add	r12, r12
     fe8:	dd 1c       	adc	r13, r13
     fea:	cc 0c       	add	r12, r12
     fec:	dd 1c       	adc	r13, r13
     fee:	cc 0c       	add	r12, r12
     ff0:	dd 1c       	adc	r13, r13
     ff2:	b6 01       	movw	r22, r12
     ff4:	0d 2c       	mov	r0, r13
     ff6:	00 0c       	add	r0, r0
     ff8:	88 0b       	sbc	r24, r24
     ffa:	99 0b       	sbc	r25, r25
     ffc:	ac d4       	rcall	.+2392   	; 0x1956 <WIZCHIP_READ>
     ffe:	8f 70       	andi	r24, 0x0F	; 15
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	09 f0       	breq	.+2      	; 0x1006 <send+0x6c>
    1004:	ae c0       	rjmp	.+348    	; 0x1162 <send+0x1c8>
   CHECK_SOCKDATA();
    1006:	4d 81       	ldd	r20, Y+5	; 0x05
    1008:	5e 81       	ldd	r21, Y+6	; 0x06
    100a:	45 2b       	or	r20, r21
    100c:	09 f4       	brne	.+2      	; 0x1010 <send+0x76>
    100e:	ae c0       	rjmp	.+348    	; 0x116c <send+0x1d2>
   tmp = getSn_SR(sn);
    1010:	26 01       	movw	r4, r12
    1012:	5d ef       	ldi	r21, 0xFD	; 253
    1014:	55 1a       	sub	r5, r21
    1016:	05 2c       	mov	r0, r5
    1018:	00 0c       	add	r0, r0
    101a:	66 08       	sbc	r6, r6
    101c:	77 08       	sbc	r7, r7
    101e:	c3 01       	movw	r24, r6
    1020:	b2 01       	movw	r22, r4
    1022:	99 d4       	rcall	.+2354   	; 0x1956 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    1024:	87 31       	cpi	r24, 0x17	; 23
    1026:	19 f0       	breq	.+6      	; 0x102e <send+0x94>
    1028:	8c 31       	cpi	r24, 0x1C	; 28
    102a:	09 f0       	breq	.+2      	; 0x102e <send+0x94>
    102c:	a4 c0       	rjmp	.+328    	; 0x1176 <send+0x1dc>
   if( sock_is_sending & (1<<sn) )
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	4c 01       	movw	r8, r24
    1034:	0f 2c       	mov	r0, r15
    1036:	02 c0       	rjmp	.+4      	; 0x103c <send+0xa2>
    1038:	88 0c       	add	r8, r8
    103a:	99 1c       	adc	r9, r9
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <send+0x9e>
    1040:	54 01       	movw	r10, r8
    1042:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <sock_is_sending>
    1046:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <sock_is_sending+0x1>
    104a:	88 21       	and	r24, r8
    104c:	99 21       	and	r25, r9
    104e:	89 2b       	or	r24, r25
    1050:	61 f1       	breq	.+88     	; 0x10aa <send+0x110>
   {
      tmp = getSn_IR(sn);
    1052:	c6 01       	movw	r24, r12
    1054:	9e 5f       	subi	r25, 0xFE	; 254
    1056:	9c 01       	movw	r18, r24
    1058:	99 0f       	add	r25, r25
    105a:	44 0b       	sbc	r20, r20
    105c:	55 0b       	sbc	r21, r21
    105e:	29 83       	std	Y+1, r18	; 0x01
    1060:	3a 83       	std	Y+2, r19	; 0x02
    1062:	4b 83       	std	Y+3, r20	; 0x03
    1064:	5c 83       	std	Y+4, r21	; 0x04
    1066:	ca 01       	movw	r24, r20
    1068:	b9 01       	movw	r22, r18
    106a:	75 d4       	rcall	.+2282   	; 0x1956 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
    106c:	84 ff       	sbrs	r24, 4
    106e:	14 c0       	rjmp	.+40     	; 0x1098 <send+0xfe>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
    1070:	40 e1       	ldi	r20, 0x10	; 16
    1072:	69 81       	ldd	r22, Y+1	; 0x01
    1074:	7a 81       	ldd	r23, Y+2	; 0x02
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	d4 d4       	rcall	.+2472   	; 0x1a24 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
    107c:	20 91 58 04 	lds	r18, 0x0458	; 0x800458 <sock_is_sending>
    1080:	30 91 59 04 	lds	r19, 0x0459	; 0x800459 <sock_is_sending+0x1>
    1084:	c4 01       	movw	r24, r8
    1086:	80 95       	com	r24
    1088:	90 95       	com	r25
    108a:	82 23       	and	r24, r18
    108c:	93 23       	and	r25, r19
    108e:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <sock_is_sending+0x1>
    1092:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <sock_is_sending>
      }
      else if(tmp & Sn_IR_TIMEOUT)
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <send+0x110>
    1098:	83 ff       	sbrs	r24, 3
      {
         close(sn);
    109a:	72 c0       	rjmp	.+228    	; 0x1180 <send+0x1e6>
    109c:	8f 2d       	mov	r24, r15
    109e:	42 dd       	rcall	.-1404   	; 0xb24 <close>
         return SOCKERR_TIMEOUT;
    10a0:	63 ef       	ldi	r22, 0xF3	; 243
    10a2:	7f ef       	ldi	r23, 0xFF	; 255
    10a4:	8f ef       	ldi	r24, 0xFF	; 255
    10a6:	9f ef       	ldi	r25, 0xFF	; 255
    10a8:	72 c0       	rjmp	.+228    	; 0x118e <send+0x1f4>
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
    10aa:	b6 01       	movw	r22, r12
    10ac:	71 5e       	subi	r23, 0xE1	; 225
    10ae:	07 2e       	mov	r0, r23
    10b0:	00 0c       	add	r0, r0
    10b2:	88 0b       	sbc	r24, r24
    10b4:	99 0b       	sbc	r25, r25
    10b6:	4f d4       	rcall	.+2206   	; 0x1956 <WIZCHIP_READ>
    10b8:	08 2f       	mov	r16, r24
    10ba:	10 e0       	ldi	r17, 0x00	; 0
    10bc:	10 2f       	mov	r17, r16
    10be:	00 27       	eor	r16, r16
    10c0:	11 0f       	add	r17, r17
    10c2:	11 0f       	add	r17, r17
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
    10c4:	4d 81       	ldd	r20, Y+5	; 0x05
    10c6:	5e 81       	ldd	r21, Y+6	; 0x06
    10c8:	04 17       	cp	r16, r20
    10ca:	15 07       	cpc	r17, r21
    10cc:	08 f0       	brcs	.+2      	; 0x10d0 <send+0x136>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
    10ce:	8a 01       	movw	r16, r20
    10d0:	8f 2d       	mov	r24, r15
    10d2:	23 d6       	rcall	.+3142   	; 0x1d1a <getSn_TX_FSR>
    10d4:	9a 83       	std	Y+2, r25	; 0x02
      tmp = getSn_SR(sn);
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	c3 01       	movw	r24, r6
    10da:	b2 01       	movw	r22, r4
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
    10dc:	3c d4       	rcall	.+2168   	; 0x1956 <WIZCHIP_READ>
    10de:	87 31       	cpi	r24, 0x17	; 23
    10e0:	49 f0       	breq	.+18     	; 0x10f4 <send+0x15a>
    10e2:	8c 31       	cpi	r24, 0x1C	; 28
      {
         close(sn);
    10e4:	39 f0       	breq	.+14     	; 0x10f4 <send+0x15a>
    10e6:	8f 2d       	mov	r24, r15
    10e8:	1d dd       	rcall	.-1478   	; 0xb24 <close>
         return SOCKERR_SOCKSTATUS;
    10ea:	69 ef       	ldi	r22, 0xF9	; 249
    10ec:	7f ef       	ldi	r23, 0xFF	; 255
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	9f ef       	ldi	r25, 0xFF	; 255
    10f2:	4d c0       	rjmp	.+154    	; 0x118e <send+0x1f4>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    10f4:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <sock_io_mode>
    10f8:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <sock_io_mode+0x1>
    10fc:	8a 21       	and	r24, r10
    10fe:	9b 21       	and	r25, r11
    1100:	89 2b       	or	r24, r25
    1102:	31 f0       	breq	.+12     	; 0x1110 <send+0x176>
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	9a 81       	ldd	r25, Y+2	; 0x02
    1108:	80 17       	cp	r24, r16
    110a:	91 07       	cpc	r25, r17
    110c:	08 f4       	brcc	.+2      	; 0x1110 <send+0x176>
      if(len <= freesize) break;
    110e:	3c c0       	rjmp	.+120    	; 0x1188 <send+0x1ee>
    1110:	29 81       	ldd	r18, Y+1	; 0x01
    1112:	3a 81       	ldd	r19, Y+2	; 0x02
    1114:	20 17       	cp	r18, r16
    1116:	31 07       	cpc	r19, r17
   }
   wiz_send_data(sn, buf, len);
    1118:	d8 f2       	brcs	.-74     	; 0x10d0 <send+0x136>
    111a:	a8 01       	movw	r20, r16
    111c:	b1 01       	movw	r22, r2
    111e:	8f 2d       	mov	r24, r15

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
    1120:	ac d6       	rcall	.+3416   	; 0x1e7a <wiz_send_data>
    1122:	d3 94       	inc	r13
    1124:	0d 2c       	mov	r0, r13
    1126:	00 0c       	add	r0, r0
    1128:	ee 08       	sbc	r14, r14
    112a:	ff 08       	sbc	r15, r15
    112c:	40 e2       	ldi	r20, 0x20	; 32
    112e:	c7 01       	movw	r24, r14
    1130:	b6 01       	movw	r22, r12
   /* wait to process the command... */
   while(getSn_CR(sn));
    1132:	78 d4       	rcall	.+2288   	; 0x1a24 <WIZCHIP_WRITE>
    1134:	c7 01       	movw	r24, r14
    1136:	b6 01       	movw	r22, r12
    1138:	0e d4       	rcall	.+2076   	; 0x1956 <WIZCHIP_READ>
    113a:	81 11       	cpse	r24, r1
    113c:	fb cf       	rjmp	.-10     	; 0x1134 <send+0x19a>
   sock_is_sending |= (1 << sn);
    113e:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <sock_is_sending>
    1142:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <sock_is_sending+0x1>
    1146:	88 2a       	or	r8, r24
    1148:	99 2a       	or	r9, r25
    114a:	90 92 59 04 	sts	0x0459, r9	; 0x800459 <sock_is_sending+0x1>
    114e:	80 92 58 04 	sts	0x0458, r8	; 0x800458 <sock_is_sending>
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    1152:	b8 01       	movw	r22, r16
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	1a c0       	rjmp	.+52     	; 0x118e <send+0x1f4>
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
    115a:	6f ef       	ldi	r22, 0xFF	; 255
    115c:	7f ef       	ldi	r23, 0xFF	; 255
    115e:	cb 01       	movw	r24, r22
    1160:	16 c0       	rjmp	.+44     	; 0x118e <send+0x1f4>
   CHECK_SOCKMODE(Sn_MR_TCP);
    1162:	6b ef       	ldi	r22, 0xFB	; 251
    1164:	7f ef       	ldi	r23, 0xFF	; 255
    1166:	8f ef       	ldi	r24, 0xFF	; 255
    1168:	9f ef       	ldi	r25, 0xFF	; 255
    116a:	11 c0       	rjmp	.+34     	; 0x118e <send+0x1f4>
   CHECK_SOCKDATA();
    116c:	62 ef       	ldi	r22, 0xF2	; 242
    116e:	7f ef       	ldi	r23, 0xFF	; 255
    1170:	8f ef       	ldi	r24, 0xFF	; 255
    1172:	9f ef       	ldi	r25, 0xFF	; 255
    1174:	0c c0       	rjmp	.+24     	; 0x118e <send+0x1f4>
   tmp = getSn_SR(sn);
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    1176:	69 ef       	ldi	r22, 0xF9	; 249
    1178:	7f ef       	ldi	r23, 0xFF	; 255
    117a:	8f ef       	ldi	r24, 0xFF	; 255
    117c:	9f ef       	ldi	r25, 0xFF	; 255
    117e:	07 c0       	rjmp	.+14     	; 0x118e <send+0x1f4>
      else if(tmp & Sn_IR_TIMEOUT)
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	cb 01       	movw	r24, r22
    1186:	03 c0       	rjmp	.+6      	; 0x118e <send+0x1f4>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	cb 01       	movw	r24, r22
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
    118e:	26 96       	adiw	r28, 0x06	; 6
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	df 90       	pop	r13
    11a8:	cf 90       	pop	r12
    11aa:	bf 90       	pop	r11
    11ac:	af 90       	pop	r10
    11ae:	9f 90       	pop	r9
    11b0:	8f 90       	pop	r8
    11b2:	7f 90       	pop	r7
    11b4:	6f 90       	pop	r6
    11b6:	5f 90       	pop	r5
    11b8:	4f 90       	pop	r4
    11ba:	3f 90       	pop	r3
    11bc:	2f 90       	pop	r2
    11be:	08 95       	ret

000011c0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
    11c0:	7f 92       	push	r7
    11c2:	8f 92       	push	r8
    11c4:	9f 92       	push	r9
    11c6:	af 92       	push	r10
    11c8:	bf 92       	push	r11
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
    11da:	89 30       	cpi	r24, 0x09	; 9
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <recv+0x20>
    11de:	90 c0       	rjmp	.+288    	; 0x1300 <recv+0x140>
    11e0:	ea 01       	movw	r28, r20
    11e2:	4b 01       	movw	r8, r22
    11e4:	78 2e       	mov	r7, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
    11e6:	c8 2e       	mov	r12, r24
    11e8:	d1 2c       	mov	r13, r1
    11ea:	86 01       	movw	r16, r12
    11ec:	00 0f       	add	r16, r16
    11ee:	11 1f       	adc	r17, r17
    11f0:	00 0f       	add	r16, r16
    11f2:	11 1f       	adc	r17, r17
    11f4:	0f 5f       	subi	r16, 0xFF	; 255
    11f6:	1f 4f       	sbci	r17, 0xFF	; 255
    11f8:	00 0f       	add	r16, r16
    11fa:	11 1f       	adc	r17, r17
    11fc:	00 0f       	add	r16, r16
    11fe:	11 1f       	adc	r17, r17
    1200:	00 0f       	add	r16, r16
    1202:	11 1f       	adc	r17, r17
    1204:	b8 01       	movw	r22, r16
    1206:	01 2e       	mov	r0, r17
    1208:	00 0c       	add	r0, r0
    120a:	88 0b       	sbc	r24, r24
    120c:	99 0b       	sbc	r25, r25
    120e:	a3 d3       	rcall	.+1862   	; 0x1956 <WIZCHIP_READ>
    1210:	8f 70       	andi	r24, 0x0F	; 15
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	09 f0       	breq	.+2      	; 0x1218 <recv+0x58>
    1216:	78 c0       	rjmp	.+240    	; 0x1308 <recv+0x148>
   CHECK_SOCKDATA();
    1218:	20 97       	sbiw	r28, 0x00	; 0
    121a:	09 f4       	brne	.+2      	; 0x121e <recv+0x5e>
    121c:	7a c0       	rjmp	.+244    	; 0x1312 <recv+0x152>
   
   recvsize = getSn_RxMAX(sn);
    121e:	b8 01       	movw	r22, r16
    1220:	72 5e       	subi	r23, 0xE2	; 226
    1222:	07 2e       	mov	r0, r23
    1224:	00 0c       	add	r0, r0
    1226:	88 0b       	sbc	r24, r24
    1228:	99 0b       	sbc	r25, r25
    122a:	95 d3       	rcall	.+1834   	; 0x1956 <WIZCHIP_READ>
    122c:	a8 2e       	mov	r10, r24
    122e:	b1 2c       	mov	r11, r1
    1230:	ba 2c       	mov	r11, r10
    1232:	aa 24       	eor	r10, r10
    1234:	bb 0c       	add	r11, r11
    1236:	bb 0c       	add	r11, r11
   if(recvsize < len) len = recvsize;
    1238:	ac 16       	cp	r10, r28
    123a:	bd 06       	cpc	r11, r29
    123c:	08 f0       	brcs	.+2      	; 0x1240 <recv+0x80>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
    123e:	5e 01       	movw	r10, r28
    1240:	87 2d       	mov	r24, r7
    1242:	c3 d5       	rcall	.+2950   	; 0x1dca <getSn_RX_RSR>
    1244:	ec 01       	movw	r28, r24
         tmp = getSn_SR(sn);
    1246:	b8 01       	movw	r22, r16
    1248:	7d 5f       	subi	r23, 0xFD	; 253
    124a:	07 2e       	mov	r0, r23
    124c:	00 0c       	add	r0, r0
    124e:	88 0b       	sbc	r24, r24
    1250:	99 0b       	sbc	r25, r25
    1252:	81 d3       	rcall	.+1794   	; 0x1956 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
    1254:	87 31       	cpi	r24, 0x17	; 23
    1256:	21 f1       	breq	.+72     	; 0x12a0 <recv+0xe0>
         {
            if(tmp == SOCK_CLOSE_WAIT)
    1258:	8c 31       	cpi	r24, 0x1C	; 28
            {
               if(recvsize != 0) break;
    125a:	d9 f4       	brne	.+54     	; 0x1292 <recv+0xd2>
    125c:	20 97       	sbiw	r28, 0x00	; 0
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
    125e:	a9 f5       	brne	.+106    	; 0x12ca <recv+0x10a>
    1260:	87 2d       	mov	r24, r7
    1262:	5b d5       	rcall	.+2742   	; 0x1d1a <getSn_TX_FSR>
    1264:	7c 01       	movw	r14, r24
    1266:	b8 01       	movw	r22, r16
    1268:	71 5e       	subi	r23, 0xE1	; 225
    126a:	07 2e       	mov	r0, r23
    126c:	00 0c       	add	r0, r0
    126e:	88 0b       	sbc	r24, r24
    1270:	99 0b       	sbc	r25, r25
    1272:	71 d3       	rcall	.+1762   	; 0x1956 <WIZCHIP_READ>
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	98 2f       	mov	r25, r24
    1278:	88 27       	eor	r24, r24
    127a:	99 0f       	add	r25, r25
    127c:	99 0f       	add	r25, r25
    127e:	e8 16       	cp	r14, r24
    1280:	f9 06       	cpc	r15, r25
               {
                  close(sn);
    1282:	71 f4       	brne	.+28     	; 0x12a0 <recv+0xe0>
    1284:	87 2d       	mov	r24, r7
                  return SOCKERR_SOCKSTATUS;
    1286:	4e dc       	rcall	.-1892   	; 0xb24 <close>
    1288:	69 ef       	ldi	r22, 0xF9	; 249
    128a:	7f ef       	ldi	r23, 0xFF	; 255
    128c:	8f ef       	ldi	r24, 0xFF	; 255
    128e:	9f ef       	ldi	r25, 0xFF	; 255
               }
            }
            else
            {
               close(sn);
    1290:	48 c0       	rjmp	.+144    	; 0x1322 <recv+0x162>
    1292:	87 2d       	mov	r24, r7
    1294:	47 dc       	rcall	.-1906   	; 0xb24 <close>
               return SOCKERR_SOCKSTATUS;
    1296:	69 ef       	ldi	r22, 0xF9	; 249
    1298:	7f ef       	ldi	r23, 0xFF	; 255
    129a:	8f ef       	ldi	r24, 0xFF	; 255
    129c:	9f ef       	ldi	r25, 0xFF	; 255
    129e:	41 c0       	rjmp	.+130    	; 0x1322 <recv+0x162>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0c 2c       	mov	r0, r12
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <recv+0xec>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <recv+0xe8>
    12b0:	20 91 5a 04 	lds	r18, 0x045A	; 0x80045a <sock_io_mode>
    12b4:	30 91 5b 04 	lds	r19, 0x045B	; 0x80045b <sock_io_mode+0x1>
    12b8:	82 23       	and	r24, r18
    12ba:	93 23       	and	r25, r19
    12bc:	89 2b       	or	r24, r25
    12be:	11 f0       	breq	.+4      	; 0x12c4 <recv+0x104>
    12c0:	20 97       	sbiw	r28, 0x00	; 0
    12c2:	61 f1       	breq	.+88     	; 0x131c <recv+0x15c>
         if(recvsize != 0) break;
    12c4:	20 97       	sbiw	r28, 0x00	; 0
    12c6:	09 f4       	brne	.+2      	; 0x12ca <recv+0x10a>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
    12c8:	bb cf       	rjmp	.-138    	; 0x1240 <recv+0x80>
    12ca:	ca 15       	cp	r28, r10
    12cc:	db 05       	cpc	r29, r11
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <recv+0x112>
   wiz_recv_data(sn, buf, len);
    12d0:	e5 01       	movw	r28, r10
    12d2:	ae 01       	movw	r20, r28
    12d4:	b4 01       	movw	r22, r8
    12d6:	87 2d       	mov	r24, r7
    12d8:	57 d6       	rcall	.+3246   	; 0x1f88 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
    12da:	68 01       	movw	r12, r16
    12dc:	d3 94       	inc	r13
    12de:	0d 2c       	mov	r0, r13
    12e0:	00 0c       	add	r0, r0
    12e2:	ee 08       	sbc	r14, r14
    12e4:	ff 08       	sbc	r15, r15
    12e6:	40 e4       	ldi	r20, 0x40	; 64
    12e8:	c7 01       	movw	r24, r14
    12ea:	b6 01       	movw	r22, r12
   while(getSn_CR(sn));
    12ec:	9b d3       	rcall	.+1846   	; 0x1a24 <WIZCHIP_WRITE>
    12ee:	c7 01       	movw	r24, r14
    12f0:	b6 01       	movw	r22, r12
    12f2:	31 d3       	rcall	.+1634   	; 0x1956 <WIZCHIP_READ>
    12f4:	81 11       	cpse	r24, r1
    12f6:	fb cf       	rjmp	.-10     	; 0x12ee <recv+0x12e>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    12f8:	be 01       	movw	r22, r28
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	11 c0       	rjmp	.+34     	; 0x1322 <recv+0x162>
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
    1300:	6f ef       	ldi	r22, 0xFF	; 255
    1302:	7f ef       	ldi	r23, 0xFF	; 255
    1304:	cb 01       	movw	r24, r22
    1306:	0d c0       	rjmp	.+26     	; 0x1322 <recv+0x162>
   CHECK_SOCKMODE(Sn_MR_TCP);
    1308:	6b ef       	ldi	r22, 0xFB	; 251
    130a:	7f ef       	ldi	r23, 0xFF	; 255
    130c:	8f ef       	ldi	r24, 0xFF	; 255
    130e:	9f ef       	ldi	r25, 0xFF	; 255
    1310:	08 c0       	rjmp	.+16     	; 0x1322 <recv+0x162>
   CHECK_SOCKDATA();
    1312:	62 ef       	ldi	r22, 0xF2	; 242
    1314:	7f ef       	ldi	r23, 0xFF	; 255
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	9f ef       	ldi	r25, 0xFF	; 255
    131a:	03 c0       	rjmp	.+6      	; 0x1322 <recv+0x162>
            {
               close(sn);
               return SOCKERR_SOCKSTATUS;
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	cb 01       	movw	r24, r22
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	df 90       	pop	r13
    1330:	cf 90       	pop	r12
    1332:	bf 90       	pop	r11
    1334:	af 90       	pop	r10
    1336:	9f 90       	pop	r9
    1338:	8f 90       	pop	r8
    133a:	7f 90       	pop	r7
    133c:	08 95       	ret

0000133e <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
    133e:	2f 92       	push	r2
    1340:	3f 92       	push	r3
    1342:	5f 92       	push	r5
    1344:	6f 92       	push	r6
    1346:	7f 92       	push	r7
    1348:	8f 92       	push	r8
    134a:	9f 92       	push	r9
    134c:	af 92       	push	r10
    134e:	bf 92       	push	r11
    1350:	cf 92       	push	r12
    1352:	df 92       	push	r13
    1354:	ef 92       	push	r14
    1356:	ff 92       	push	r15
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
    1360:	89 30       	cpi	r24, 0x09	; 9
    1362:	08 f0       	brcs	.+2      	; 0x1366 <sendto+0x28>
    1364:	e3 c0       	rjmp	.+454    	; 0x152c <sendto+0x1ee>
    1366:	e9 01       	movw	r28, r18
    1368:	3a 01       	movw	r6, r20
    136a:	1b 01       	movw	r2, r22
    136c:	58 2e       	mov	r5, r24
   switch(getSn_MR(sn) & 0x0F)
    136e:	c8 2e       	mov	r12, r24
    1370:	d1 2c       	mov	r13, r1
    1372:	76 01       	movw	r14, r12
    1374:	ee 0c       	add	r14, r14
    1376:	ff 1c       	adc	r15, r15
    1378:	ee 0c       	add	r14, r14
    137a:	ff 1c       	adc	r15, r15
    137c:	8f ef       	ldi	r24, 0xFF	; 255
    137e:	e8 1a       	sub	r14, r24
    1380:	f8 0a       	sbc	r15, r24
    1382:	ee 0c       	add	r14, r14
    1384:	ff 1c       	adc	r15, r15
    1386:	ee 0c       	add	r14, r14
    1388:	ff 1c       	adc	r15, r15
    138a:	ee 0c       	add	r14, r14
    138c:	ff 1c       	adc	r15, r15
    138e:	47 01       	movw	r8, r14
    1390:	0f 2c       	mov	r0, r15
    1392:	00 0c       	add	r0, r0
    1394:	aa 08       	sbc	r10, r10
    1396:	bb 08       	sbc	r11, r11
    1398:	c5 01       	movw	r24, r10
    139a:	b4 01       	movw	r22, r8
    139c:	dc d2       	rcall	.+1464   	; 0x1956 <WIZCHIP_READ>
    139e:	8f 70       	andi	r24, 0x0F	; 15
    13a0:	82 50       	subi	r24, 0x02	; 2
    13a2:	83 30       	cpi	r24, 0x03	; 3
    13a4:	08 f0       	brcs	.+2      	; 0x13a8 <sendto+0x6a>
    13a6:	c6 c0       	rjmp	.+396    	; 0x1534 <sendto+0x1f6>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    13a8:	61 14       	cp	r6, r1
    13aa:	71 04       	cpc	r7, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <sendto+0x72>
    13ae:	c7 c0       	rjmp	.+398    	; 0x153e <sendto+0x200>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
    13b0:	88 81       	ld	r24, Y
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a0 e0       	ldi	r26, 0x00	; 0
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
    13b8:	ba 2f       	mov	r27, r26
    13ba:	a9 2f       	mov	r26, r25
    13bc:	98 2f       	mov	r25, r24
    13be:	88 27       	eor	r24, r24
    13c0:	29 81       	ldd	r18, Y+1	; 0x01
    13c2:	82 0f       	add	r24, r18
    13c4:	91 1d       	adc	r25, r1
    13c6:	a1 1d       	adc	r26, r1
    13c8:	b1 1d       	adc	r27, r1
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
    13ca:	ba 2f       	mov	r27, r26
    13cc:	a9 2f       	mov	r26, r25
    13ce:	98 2f       	mov	r25, r24
    13d0:	88 27       	eor	r24, r24
    13d2:	2a 81       	ldd	r18, Y+2	; 0x02
    13d4:	82 0f       	add	r24, r18
    13d6:	91 1d       	adc	r25, r1
    13d8:	a1 1d       	adc	r26, r1
    13da:	b1 1d       	adc	r27, r1
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
    13dc:	ba 2f       	mov	r27, r26
    13de:	a9 2f       	mov	r26, r25
    13e0:	98 2f       	mov	r25, r24
    13e2:	88 27       	eor	r24, r24
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	82 0f       	add	r24, r18
    13e8:	91 1d       	adc	r25, r1
    13ea:	a1 1d       	adc	r26, r1
    13ec:	b1 1d       	adc	r27, r1
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    13ee:	89 2b       	or	r24, r25
    13f0:	8a 2b       	or	r24, r26
    13f2:	8b 2b       	or	r24, r27
    13f4:	29 f4       	brne	.+10     	; 0x1400 <sendto+0xc2>
    13f6:	c5 01       	movw	r24, r10
    13f8:	b4 01       	movw	r22, r8
    13fa:	ad d2       	rcall	.+1370   	; 0x1956 <WIZCHIP_READ>
    13fc:	82 ff       	sbrs	r24, 2
    13fe:	a4 c0       	rjmp	.+328    	; 0x1548 <sendto+0x20a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    1400:	01 15       	cp	r16, r1
    1402:	11 05       	cpc	r17, r1
    1404:	29 f4       	brne	.+10     	; 0x1410 <sendto+0xd2>
    1406:	c5 01       	movw	r24, r10
    1408:	b4 01       	movw	r22, r8
    140a:	a5 d2       	rcall	.+1354   	; 0x1956 <WIZCHIP_READ>
    140c:	82 ff       	sbrs	r24, 2
    140e:	a1 c0       	rjmp	.+322    	; 0x1552 <sendto+0x214>
   tmp = getSn_SR(sn);
    1410:	47 01       	movw	r8, r14
    1412:	8d ef       	ldi	r24, 0xFD	; 253
    1414:	98 1a       	sub	r9, r24
    1416:	09 2c       	mov	r0, r9
    1418:	00 0c       	add	r0, r0
    141a:	aa 08       	sbc	r10, r10
    141c:	bb 08       	sbc	r11, r11
    141e:	c5 01       	movw	r24, r10
    1420:	b4 01       	movw	r22, r8
    1422:	99 d2       	rcall	.+1330   	; 0x1956 <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    1424:	82 34       	cpi	r24, 0x42	; 66
    1426:	29 f0       	breq	.+10     	; 0x1432 <sendto+0xf4>
    1428:	82 32       	cpi	r24, 0x22	; 34
    142a:	19 f0       	breq	.+6      	; 0x1432 <sendto+0xf4>
    142c:	82 33       	cpi	r24, 0x32	; 50
    142e:	09 f0       	breq	.+2      	; 0x1432 <sendto+0xf4>
    1430:	95 c0       	rjmp	.+298    	; 0x155c <sendto+0x21e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
    1432:	b7 01       	movw	r22, r14
    1434:	74 5f       	subi	r23, 0xF4	; 244
    1436:	07 2e       	mov	r0, r23
    1438:	00 0c       	add	r0, r0
    143a:	88 0b       	sbc	r24, r24
    143c:	99 0b       	sbc	r25, r25
    143e:	24 e0       	ldi	r18, 0x04	; 4
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	ae 01       	movw	r20, r28
    1444:	e3 d3       	rcall	.+1990   	; 0x1c0c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
    1446:	b7 01       	movw	r22, r14
    1448:	70 5f       	subi	r23, 0xF0	; 240
    144a:	07 2e       	mov	r0, r23
    144c:	00 0c       	add	r0, r0
    144e:	88 0b       	sbc	r24, r24
    1450:	99 0b       	sbc	r25, r25
    1452:	41 2f       	mov	r20, r17
    1454:	e7 d2       	rcall	.+1486   	; 0x1a24 <WIZCHIP_WRITE>
    1456:	b7 01       	movw	r22, r14
    1458:	7f 5e       	subi	r23, 0xEF	; 239
    145a:	07 2e       	mov	r0, r23
    145c:	00 0c       	add	r0, r0
    145e:	88 0b       	sbc	r24, r24
    1460:	99 0b       	sbc	r25, r25
    1462:	40 2f       	mov	r20, r16
    1464:	df d2       	rcall	.+1470   	; 0x1a24 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
    1466:	b7 01       	movw	r22, r14
    1468:	71 5e       	subi	r23, 0xE1	; 225
    146a:	07 2e       	mov	r0, r23
    146c:	00 0c       	add	r0, r0
    146e:	88 0b       	sbc	r24, r24
    1470:	99 0b       	sbc	r25, r25
    1472:	71 d2       	rcall	.+1250   	; 0x1956 <WIZCHIP_READ>
    1474:	08 2f       	mov	r16, r24
    1476:	10 e0       	ldi	r17, 0x00	; 0
    1478:	10 2f       	mov	r17, r16
    147a:	00 27       	eor	r16, r16
    147c:	11 0f       	add	r17, r17
    147e:	11 0f       	add	r17, r17
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
    1480:	06 15       	cp	r16, r6
    1482:	17 05       	cpc	r17, r7
    1484:	08 f0       	brcs	.+2      	; 0x1488 <sendto+0x14a>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
    1486:	83 01       	movw	r16, r6
    1488:	85 2d       	mov	r24, r5
    148a:	47 d4       	rcall	.+2190   	; 0x1d1a <getSn_TX_FSR>
    148c:	ec 01       	movw	r28, r24
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    148e:	c5 01       	movw	r24, r10
    1490:	b4 01       	movw	r22, r8
    1492:	61 d2       	rcall	.+1218   	; 0x1956 <WIZCHIP_READ>
    1494:	88 23       	and	r24, r24
    1496:	09 f4       	brne	.+2      	; 0x149a <sendto+0x15c>
    1498:	66 c0       	rjmp	.+204    	; 0x1566 <sendto+0x228>
    149a:	81 e0       	ldi	r24, 0x01	; 1
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0c 2c       	mov	r0, r12
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <sendto+0x168>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <sendto+0x164>
    14aa:	20 91 5a 04 	lds	r18, 0x045A	; 0x80045a <sock_io_mode>
    14ae:	30 91 5b 04 	lds	r19, 0x045B	; 0x80045b <sock_io_mode+0x1>
    14b2:	82 23       	and	r24, r18
    14b4:	93 23       	and	r25, r19
    14b6:	89 2b       	or	r24, r25
    14b8:	21 f0       	breq	.+8      	; 0x14c2 <sendto+0x184>
    14ba:	c0 17       	cp	r28, r16
    14bc:	d1 07       	cpc	r29, r17
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <sendto+0x184>
    14c0:	57 c0       	rjmp	.+174    	; 0x1570 <sendto+0x232>
      if(len <= freesize) break;
    14c2:	c0 17       	cp	r28, r16
    14c4:	d1 07       	cpc	r29, r17
    14c6:	00 f3       	brcs	.-64     	; 0x1488 <sendto+0x14a>
   };
	wiz_send_data(sn, buf, len);
    14c8:	a8 01       	movw	r20, r16
    14ca:	b1 01       	movw	r22, r2
    14cc:	85 2d       	mov	r24, r5
    14ce:	d5 d4       	rcall	.+2474   	; 0x1e7a <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
    14d0:	47 01       	movw	r8, r14
    14d2:	93 94       	inc	r9
    14d4:	09 2c       	mov	r0, r9
    14d6:	00 0c       	add	r0, r0
    14d8:	aa 08       	sbc	r10, r10
    14da:	bb 08       	sbc	r11, r11
    14dc:	40 e2       	ldi	r20, 0x20	; 32
    14de:	c5 01       	movw	r24, r10
    14e0:	b4 01       	movw	r22, r8
    14e2:	a0 d2       	rcall	.+1344   	; 0x1a24 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
    14e4:	c5 01       	movw	r24, r10
    14e6:	b4 01       	movw	r22, r8
    14e8:	36 d2       	rcall	.+1132   	; 0x1956 <WIZCHIP_READ>
    14ea:	81 11       	cpse	r24, r1
    14ec:	fb cf       	rjmp	.-10     	; 0x14e4 <sendto+0x1a6>
   while(1)
   {
      tmp = getSn_IR(sn);
    14ee:	47 01       	movw	r8, r14
    14f0:	8e ef       	ldi	r24, 0xFE	; 254
    14f2:	98 1a       	sub	r9, r24
    14f4:	09 2c       	mov	r0, r9
    14f6:	00 0c       	add	r0, r0
    14f8:	aa 08       	sbc	r10, r10
    14fa:	bb 08       	sbc	r11, r11
    14fc:	c5 01       	movw	r24, r10
    14fe:	b4 01       	movw	r22, r8
    1500:	2a d2       	rcall	.+1108   	; 0x1956 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
    1502:	84 ff       	sbrs	r24, 4
      {
         setSn_IR(sn, Sn_IR_SENDOK);
    1504:	08 c0       	rjmp	.+16     	; 0x1516 <sendto+0x1d8>
    1506:	40 e1       	ldi	r20, 0x10	; 16
    1508:	c5 01       	movw	r24, r10
    150a:	b4 01       	movw	r22, r8
    150c:	8b d2       	rcall	.+1302   	; 0x1a24 <WIZCHIP_WRITE>
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    150e:	b8 01       	movw	r22, r16
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	30 c0       	rjmp	.+96     	; 0x1576 <sendto+0x238>
         setSn_IR(sn, Sn_IR_SENDOK);
         break;
      }
      //M:20131104
      //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
      else if(tmp & Sn_IR_TIMEOUT)
    1516:	83 ff       	sbrs	r24, 3
    1518:	ea cf       	rjmp	.-44     	; 0x14ee <sendto+0x1b0>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
    151a:	48 e0       	ldi	r20, 0x08	; 8
    151c:	c5 01       	movw	r24, r10
    151e:	b4 01       	movw	r22, r8
    1520:	81 d2       	rcall	.+1282   	; 0x1a24 <WIZCHIP_WRITE>
    1522:	63 ef       	ldi	r22, 0xF3	; 243
         //len = (uint16_t)SOCKERR_TIMEOUT;
         //break;
         #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
            if(taddr) setSUBR((uint8_t*)&taddr);
         #endif
         return SOCKERR_TIMEOUT;
    1524:	7f ef       	ldi	r23, 0xFF	; 255
    1526:	8f ef       	ldi	r24, 0xFF	; 255
    1528:	9f ef       	ldi	r25, 0xFF	; 255
    152a:	25 c0       	rjmp	.+74     	; 0x1576 <sendto+0x238>
    152c:	6f ef       	ldi	r22, 0xFF	; 255
{
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
    152e:	7f ef       	ldi	r23, 0xFF	; 255
    1530:	cb 01       	movw	r24, r22
    1532:	21 c0       	rjmp	.+66     	; 0x1576 <sendto+0x238>
    1534:	6b ef       	ldi	r22, 0xFB	; 251
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
    1536:	7f ef       	ldi	r23, 0xFF	; 255
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	9f ef       	ldi	r25, 0xFF	; 255
    153c:	1c c0       	rjmp	.+56     	; 0x1576 <sendto+0x238>
    153e:	62 ef       	ldi	r22, 0xF2	; 242
   }
   CHECK_SOCKDATA();
    1540:	7f ef       	ldi	r23, 0xFF	; 255
    1542:	8f ef       	ldi	r24, 0xFF	; 255
    1544:	9f ef       	ldi	r25, 0xFF	; 255
    1546:	17 c0       	rjmp	.+46     	; 0x1576 <sendto+0x238>
    1548:	64 ef       	ldi	r22, 0xF4	; 244
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    154a:	7f ef       	ldi	r23, 0xFF	; 255
    154c:	8f ef       	ldi	r24, 0xFF	; 255
    154e:	9f ef       	ldi	r25, 0xFF	; 255
    1550:	12 c0       	rjmp	.+36     	; 0x1576 <sendto+0x238>
    1552:	65 ef       	ldi	r22, 0xF5	; 245
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    1554:	7f ef       	ldi	r23, 0xFF	; 255
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	9f ef       	ldi	r25, 0xFF	; 255
    155a:	0d c0       	rjmp	.+26     	; 0x1576 <sendto+0x238>
    155c:	69 ef       	ldi	r22, 0xF9	; 249
   tmp = getSn_SR(sn);
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    155e:	7f ef       	ldi	r23, 0xFF	; 255
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	9f ef       	ldi	r25, 0xFF	; 255
    1564:	08 c0       	rjmp	.+16     	; 0x1576 <sendto+0x238>
    1566:	6c ef       	ldi	r22, 0xFC	; 252
   freesize = getSn_TxMAX(sn);
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    1568:	7f ef       	ldi	r23, 0xFF	; 255
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	9f ef       	ldi	r25, 0xFF	; 255
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <sendto+0x238>
    1570:	60 e0       	ldi	r22, 0x00	; 0
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	cb 01       	movw	r24, r22
    1576:	df 91       	pop	r29
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	cf 90       	pop	r12
    1586:	bf 90       	pop	r11
    1588:	af 90       	pop	r10
    158a:	9f 90       	pop	r9
    158c:	8f 90       	pop	r8
    158e:	7f 90       	pop	r7
    1590:	6f 90       	pop	r6
    1592:	5f 90       	pop	r5
    1594:	3f 90       	pop	r3
    1596:	2f 90       	pop	r2
    1598:	08 95       	ret

0000159a <recvfrom>:
    159a:	2f 92       	push	r2



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
    159c:	3f 92       	push	r3
    159e:	4f 92       	push	r4
    15a0:	5f 92       	push	r5
    15a2:	6f 92       	push	r6
    15a4:	7f 92       	push	r7
    15a6:	8f 92       	push	r8
    15a8:	9f 92       	push	r9
    15aa:	af 92       	push	r10
    15ac:	bf 92       	push	r11
    15ae:	cf 92       	push	r12
    15b0:	df 92       	push	r13
    15b2:	ef 92       	push	r14
    15b4:	ff 92       	push	r15
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	2c 97       	sbiw	r28, 0x0c	; 12
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
    15ce:	89 30       	cpi	r24, 0x09	; 9
    15d0:	08 f0       	brcs	.+2      	; 0x15d4 <recvfrom+0x3a>
    15d2:	92 c1       	rjmp	.+804    	; 0x18f8 <recvfrom+0x35e>
    15d4:	28 01       	movw	r4, r16
    15d6:	39 01       	movw	r6, r18
    15d8:	5a 01       	movw	r10, r20
    15da:	4b 01       	movw	r8, r22
    15dc:	38 2e       	mov	r3, r24
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
    15de:	c8 2e       	mov	r12, r24
    15e0:	d1 2c       	mov	r13, r1
    15e2:	86 01       	movw	r16, r12
    15e4:	00 0f       	add	r16, r16
    15e6:	11 1f       	adc	r17, r17
    15e8:	00 0f       	add	r16, r16
    15ea:	11 1f       	adc	r17, r17
    15ec:	0f 5f       	subi	r16, 0xFF	; 255
    15ee:	1f 4f       	sbci	r17, 0xFF	; 255
    15f0:	00 0f       	add	r16, r16
    15f2:	11 1f       	adc	r17, r17
    15f4:	00 0f       	add	r16, r16
    15f6:	11 1f       	adc	r17, r17
    15f8:	00 0f       	add	r16, r16
    15fa:	11 1f       	adc	r17, r17
    15fc:	b8 01       	movw	r22, r16
    15fe:	01 2e       	mov	r0, r17
    1600:	00 0c       	add	r0, r0
    1602:	88 0b       	sbc	r24, r24
    1604:	99 0b       	sbc	r25, r25
    1606:	a7 d1       	rcall	.+846    	; 0x1956 <WIZCHIP_READ>
    1608:	28 2e       	mov	r2, r24
    160a:	8f 70       	andi	r24, 0x0F	; 15
    160c:	82 50       	subi	r24, 0x02	; 2
    160e:	83 30       	cpi	r24, 0x03	; 3
    1610:	08 f0       	brcs	.+2      	; 0x1614 <recvfrom+0x7a>
    1612:	76 c1       	rjmp	.+748    	; 0x1900 <recvfrom+0x366>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    1614:	a1 14       	cp	r10, r1
    1616:	b1 04       	cpc	r11, r1
    1618:	09 f4       	brne	.+2      	; 0x161c <recvfrom+0x82>
    161a:	77 c1       	rjmp	.+750    	; 0x190a <recvfrom+0x370>
   if(sock_remained_size[sn] == 0)
    161c:	f6 01       	movw	r30, r12
    161e:	ee 0f       	add	r30, r30
    1620:	ff 1f       	adc	r31, r31
    1622:	e8 5b       	subi	r30, 0xB8	; 184
    1624:	fb 4f       	sbci	r31, 0xFB	; 251
    1626:	80 81       	ld	r24, Z
    1628:	91 81       	ldd	r25, Z+1	; 0x01
    162a:	89 2b       	or	r24, r25
    162c:	29 f5       	brne	.+74     	; 0x1678 <recvfrom+0xde>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
    162e:	83 2d       	mov	r24, r3
    1630:	cc d3       	rcall	.+1944   	; 0x1dca <getSn_RX_RSR>
    1632:	7c 01       	movw	r14, r24
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    1634:	b8 01       	movw	r22, r16
    1636:	7d 5f       	subi	r23, 0xFD	; 253
    1638:	07 2e       	mov	r0, r23
    163a:	00 0c       	add	r0, r0
    163c:	88 0b       	sbc	r24, r24
    163e:	99 0b       	sbc	r25, r25
    1640:	8a d1       	rcall	.+788    	; 0x1956 <WIZCHIP_READ>
    1642:	88 23       	and	r24, r24
    1644:	09 f4       	brne	.+2      	; 0x1648 <recvfrom+0xae>
    1646:	66 c1       	rjmp	.+716    	; 0x1914 <recvfrom+0x37a>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0c 2c       	mov	r0, r12
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <recvfrom+0xba>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <recvfrom+0xb6>
    1658:	20 91 5a 04 	lds	r18, 0x045A	; 0x80045a <sock_io_mode>
    165c:	30 91 5b 04 	lds	r19, 0x045B	; 0x80045b <sock_io_mode+0x1>
    1660:	82 23       	and	r24, r18
    1662:	93 23       	and	r25, r19
    1664:	89 2b       	or	r24, r25
    1666:	21 f0       	breq	.+8      	; 0x1670 <recvfrom+0xd6>
    1668:	e1 14       	cp	r14, r1
    166a:	f1 04       	cpc	r15, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <recvfrom+0xd6>
    166e:	57 c1       	rjmp	.+686    	; 0x191e <recvfrom+0x384>
         if(pack_len != 0) break;
    1670:	e1 14       	cp	r14, r1
    1672:	f1 04       	cpc	r15, r1
    1674:	e1 f2       	breq	.-72     	; 0x162e <recvfrom+0x94>
    1676:	02 c0       	rjmp	.+4      	; 0x167c <recvfrom+0xe2>
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
    1678:	e1 2c       	mov	r14, r1
    167a:	f1 2c       	mov	r15, r1
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
    167c:	82 2d       	mov	r24, r2
    167e:	87 70       	andi	r24, 0x07	; 7
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	09 f4       	brne	.+2      	; 0x1686 <recvfrom+0xec>
    1684:	b1 c0       	rjmp	.+354    	; 0x17e8 <recvfrom+0x24e>
    1686:	84 30       	cpi	r24, 0x04	; 4
    1688:	09 f4       	brne	.+2      	; 0x168c <recvfrom+0xf2>
    168a:	61 c0       	rjmp	.+194    	; 0x174e <recvfrom+0x1b4>
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	09 f0       	breq	.+2      	; 0x1692 <recvfrom+0xf8>
    1690:	fe c0       	rjmp	.+508    	; 0x188e <recvfrom+0x2f4>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
    1692:	f6 01       	movw	r30, r12
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	e8 5b       	subi	r30, 0xB8	; 184
    169a:	fb 4f       	sbci	r31, 0xFB	; 251
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	89 2b       	or	r24, r25
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <recvfrom+0x10c>
    16a4:	44 c0       	rjmp	.+136    	; 0x172e <recvfrom+0x194>
	      {
   			wiz_recv_data(sn, head, 8);
    16a6:	48 e0       	ldi	r20, 0x08	; 8
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	be 01       	movw	r22, r28
    16ac:	6f 5f       	subi	r22, 0xFF	; 255
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255
    16b0:	83 2d       	mov	r24, r3
    16b2:	6a d4       	rcall	.+2260   	; 0x1f88 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
    16b4:	c8 01       	movw	r24, r16
    16b6:	93 95       	inc	r25
    16b8:	9c 01       	movw	r18, r24
    16ba:	99 0f       	add	r25, r25
    16bc:	44 0b       	sbc	r20, r20
    16be:	55 0b       	sbc	r21, r21
    16c0:	29 87       	std	Y+9, r18	; 0x09
    16c2:	3a 87       	std	Y+10, r19	; 0x0a
    16c4:	4b 87       	std	Y+11, r20	; 0x0b
    16c6:	5c 87       	std	Y+12, r21	; 0x0c
    16c8:	40 e4       	ldi	r20, 0x40	; 64
    16ca:	69 85       	ldd	r22, Y+9	; 0x09
    16cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    16ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    16d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    16d2:	a8 d1       	rcall	.+848    	; 0x1a24 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    16d4:	69 85       	ldd	r22, Y+9	; 0x09
    16d6:	7a 85       	ldd	r23, Y+10	; 0x0a
    16d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    16da:	9c 85       	ldd	r25, Y+12	; 0x0c
    16dc:	3c d1       	rcall	.+632    	; 0x1956 <WIZCHIP_READ>
    16de:	81 11       	cpse	r24, r1
    16e0:	f9 cf       	rjmp	.-14     	; 0x16d4 <recvfrom+0x13a>
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
    16e4:	f3 01       	movw	r30, r6
    16e6:	80 83       	st	Z, r24
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
      			addr[1] = head[1];
    16ea:	81 83       	std	Z+1, r24	; 0x01
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
      			addr[2] = head[2];
    16ee:	82 83       	std	Z+2, r24	; 0x02
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
      			addr[3] = head[3];
    16f2:	83 83       	std	Z+3, r24	; 0x03
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
      			*port = head[4];
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	98 2f       	mov	r25, r24
      			*port = (*port << 8) + head[5];
    16fa:	88 27       	eor	r24, r24
    16fc:	2e 81       	ldd	r18, Y+6	; 0x06
    16fe:	82 0f       	add	r24, r18
    1700:	91 1d       	adc	r25, r1
    1702:	f2 01       	movw	r30, r4
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	80 83       	st	Z, r24
    1708:	8f 81       	ldd	r24, Y+7	; 0x07
      			sock_remained_size[sn] = head[6];
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	f6 01       	movw	r30, r12
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	e8 5b       	subi	r30, 0xB8	; 184
    1714:	fb 4f       	sbci	r31, 0xFB	; 251
    1716:	98 2f       	mov	r25, r24
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
    1718:	88 27       	eor	r24, r24
    171a:	28 85       	ldd	r18, Y+8	; 0x08
    171c:	82 0f       	add	r24, r18
    171e:	91 1d       	adc	r25, r1
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
    1724:	80 e8       	ldi	r24, 0x80	; 128
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
    1726:	f6 01       	movw	r30, r12
    1728:	e0 5c       	subi	r30, 0xC0	; 192
    172a:	fb 4f       	sbci	r31, 0xFB	; 251
    172c:	80 83       	st	Z, r24
    172e:	f6 01       	movw	r30, r12
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
    1730:	ee 0f       	add	r30, r30
    1732:	ff 1f       	adc	r31, r31
    1734:	e8 5b       	subi	r30, 0xB8	; 184
    1736:	fb 4f       	sbci	r31, 0xFB	; 251
    1738:	e0 80       	ld	r14, Z
    173a:	f1 80       	ldd	r15, Z+1	; 0x01
    173c:	ae 14       	cp	r10, r14
    173e:	bf 04       	cpc	r11, r15
    1740:	08 f4       	brcc	.+2      	; 0x1744 <recvfrom+0x1aa>
    1742:	75 01       	movw	r14, r10
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    1744:	a7 01       	movw	r20, r14
    1746:	b4 01       	movw	r22, r8
    1748:	83 2d       	mov	r24, r3
    174a:	1e d4       	rcall	.+2108   	; 0x1f88 <wiz_recv_data>
    174c:	aa c0       	rjmp	.+340    	; 0x18a2 <recvfrom+0x308>
			break;
    174e:	f6 01       	movw	r30, r12
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
    1750:	ee 0f       	add	r30, r30
    1752:	ff 1f       	adc	r31, r31
    1754:	e8 5b       	subi	r30, 0xB8	; 184
    1756:	fb 4f       	sbci	r31, 0xFB	; 251
    1758:	80 81       	ld	r24, Z
    175a:	91 81       	ldd	r25, Z+1	; 0x01
    175c:	89 2b       	or	r24, r25
    175e:	a1 f5       	brne	.+104    	; 0x17c8 <recvfrom+0x22e>
	      {
   			wiz_recv_data(sn, head, 2);
    1760:	42 e0       	ldi	r20, 0x02	; 2
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	be 01       	movw	r22, r28
    1766:	6f 5f       	subi	r22, 0xFF	; 255
    1768:	7f 4f       	sbci	r23, 0xFF	; 255
    176a:	83 2d       	mov	r24, r3
    176c:	0d d4       	rcall	.+2074   	; 0x1f88 <wiz_recv_data>
    176e:	28 01       	movw	r4, r16
   			setSn_CR(sn,Sn_CR_RECV);
    1770:	53 94       	inc	r5
    1772:	05 2c       	mov	r0, r5
    1774:	00 0c       	add	r0, r0
    1776:	66 08       	sbc	r6, r6
    1778:	77 08       	sbc	r7, r7
    177a:	40 e4       	ldi	r20, 0x40	; 64
    177c:	c3 01       	movw	r24, r6
    177e:	b2 01       	movw	r22, r4
    1780:	51 d1       	rcall	.+674    	; 0x1a24 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    1782:	c3 01       	movw	r24, r6
    1784:	b2 01       	movw	r22, r4
    1786:	e7 d0       	rcall	.+462    	; 0x1956 <WIZCHIP_READ>
    1788:	81 11       	cpse	r24, r1
    178a:	fb cf       	rjmp	.-10     	; 0x1782 <recvfrom+0x1e8>
    178c:	89 81       	ldd	r24, Y+1	; 0x01
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	f6 01       	movw	r30, r12
    1792:	ee 0f       	add	r30, r30
    1794:	ff 1f       	adc	r31, r31
    1796:	e8 5b       	subi	r30, 0xB8	; 184
    1798:	fb 4f       	sbci	r31, 0xFB	; 251
    179a:	98 2f       	mov	r25, r24
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
    179c:	88 27       	eor	r24, r24
    179e:	2a 81       	ldd	r18, Y+2	; 0x02
    17a0:	82 0f       	add	r24, r18
    17a2:	91 1d       	adc	r25, r1
    17a4:	02 97       	sbiw	r24, 0x02	; 2
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
    17aa:	8b 3e       	cpi	r24, 0xEB	; 235
    17ac:	95 40       	sbci	r25, 0x05	; 5
    17ae:	38 f0       	brcs	.+14     	; 0x17be <recvfrom+0x224>
   			{
   			   close(sn);
    17b0:	83 2d       	mov	r24, r3
    17b2:	b8 d9       	rcall	.-3216   	; 0xb24 <close>
    17b4:	67 e1       	ldi	r22, 0x17	; 23
   			   return SOCKFATAL_PACKLEN;
    17b6:	7c ef       	ldi	r23, 0xFC	; 252
    17b8:	8f ef       	ldi	r24, 0xFF	; 255
    17ba:	9f ef       	ldi	r25, 0xFF	; 255
    17bc:	b3 c0       	rjmp	.+358    	; 0x1924 <recvfrom+0x38a>
    17be:	80 e8       	ldi	r24, 0x80	; 128
   			}
   			sock_pack_info[sn] = PACK_FIRST;
    17c0:	f6 01       	movw	r30, r12
    17c2:	e0 5c       	subi	r30, 0xC0	; 192
    17c4:	fb 4f       	sbci	r31, 0xFB	; 251
    17c6:	80 83       	st	Z, r24
    17c8:	f6 01       	movw	r30, r12
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
    17ca:	ee 0f       	add	r30, r30
    17cc:	ff 1f       	adc	r31, r31
    17ce:	e8 5b       	subi	r30, 0xB8	; 184
    17d0:	fb 4f       	sbci	r31, 0xFB	; 251
    17d2:	e0 80       	ld	r14, Z
    17d4:	f1 80       	ldd	r15, Z+1	; 0x01
    17d6:	ae 14       	cp	r10, r14
    17d8:	bf 04       	cpc	r11, r15
    17da:	08 f4       	brcc	.+2      	; 0x17de <recvfrom+0x244>
    17dc:	75 01       	movw	r14, r10
			else pack_len = sock_remained_size[sn];
			wiz_recv_data(sn,buf,pack_len);
    17de:	a7 01       	movw	r20, r14
    17e0:	b4 01       	movw	r22, r8
    17e2:	83 2d       	mov	r24, r3
    17e4:	d1 d3       	rcall	.+1954   	; 0x1f88 <wiz_recv_data>
    17e6:	5d c0       	rjmp	.+186    	; 0x18a2 <recvfrom+0x308>
		   break;
    17e8:	f6 01       	movw	r30, r12
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
    17ea:	ee 0f       	add	r30, r30
    17ec:	ff 1f       	adc	r31, r31
    17ee:	e8 5b       	subi	r30, 0xB8	; 184
    17f0:	fb 4f       	sbci	r31, 0xFB	; 251
    17f2:	80 81       	ld	r24, Z
    17f4:	91 81       	ldd	r25, Z+1	; 0x01
    17f6:	89 2b       	or	r24, r25
    17f8:	d1 f5       	brne	.+116    	; 0x186e <recvfrom+0x2d4>
		   {
   			wiz_recv_data(sn, head, 6);
    17fa:	46 e0       	ldi	r20, 0x06	; 6
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	be 01       	movw	r22, r28
    1800:	6f 5f       	subi	r22, 0xFF	; 255
    1802:	7f 4f       	sbci	r23, 0xFF	; 255
    1804:	83 2d       	mov	r24, r3
    1806:	c0 d3       	rcall	.+1920   	; 0x1f88 <wiz_recv_data>
    1808:	c8 01       	movw	r24, r16
   			setSn_CR(sn,Sn_CR_RECV);
    180a:	93 95       	inc	r25
    180c:	9c 01       	movw	r18, r24
    180e:	99 0f       	add	r25, r25
    1810:	44 0b       	sbc	r20, r20
    1812:	55 0b       	sbc	r21, r21
    1814:	29 87       	std	Y+9, r18	; 0x09
    1816:	3a 87       	std	Y+10, r19	; 0x0a
    1818:	4b 87       	std	Y+11, r20	; 0x0b
    181a:	5c 87       	std	Y+12, r21	; 0x0c
    181c:	40 e4       	ldi	r20, 0x40	; 64
    181e:	69 85       	ldd	r22, Y+9	; 0x09
    1820:	7a 85       	ldd	r23, Y+10	; 0x0a
    1822:	8b 85       	ldd	r24, Y+11	; 0x0b
    1824:	9c 85       	ldd	r25, Y+12	; 0x0c
    1826:	fe d0       	rcall	.+508    	; 0x1a24 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    1828:	69 85       	ldd	r22, Y+9	; 0x09
    182a:	7a 85       	ldd	r23, Y+10	; 0x0a
    182c:	8b 85       	ldd	r24, Y+11	; 0x0b
    182e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1830:	92 d0       	rcall	.+292    	; 0x1956 <WIZCHIP_READ>
    1832:	81 11       	cpse	r24, r1
    1834:	f9 cf       	rjmp	.-14     	; 0x1828 <recvfrom+0x28e>
    1836:	89 81       	ldd	r24, Y+1	; 0x01
   			addr[0] = head[0];
    1838:	f3 01       	movw	r30, r6
    183a:	80 83       	st	Z, r24
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
   			addr[1] = head[1];
    183e:	81 83       	std	Z+1, r24	; 0x01
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
   			addr[2] = head[2];
    1842:	82 83       	std	Z+2, r24	; 0x02
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
   			addr[3] = head[3];
    1846:	83 83       	std	Z+3, r24	; 0x03
    1848:	8d 81       	ldd	r24, Y+5	; 0x05
   			sock_remained_size[sn] = head[4];
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	f6 01       	movw	r30, r12
    184e:	ee 0f       	add	r30, r30
    1850:	ff 1f       	adc	r31, r31
    1852:	e8 5b       	subi	r30, 0xB8	; 184
    1854:	fb 4f       	sbci	r31, 0xFB	; 251
    1856:	98 2f       	mov	r25, r24
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
    1858:	88 27       	eor	r24, r24
    185a:	2e 81       	ldd	r18, Y+6	; 0x06
    185c:	82 0f       	add	r24, r18
    185e:	91 1d       	adc	r25, r1
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24
    1864:	80 e8       	ldi	r24, 0x80	; 128
   			sock_pack_info[sn] = PACK_FIRST;
    1866:	f6 01       	movw	r30, r12
    1868:	e0 5c       	subi	r30, 0xC0	; 192
    186a:	fb 4f       	sbci	r31, 0xFB	; 251
    186c:	80 83       	st	Z, r24
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
    186e:	f6 01       	movw	r30, r12
    1870:	ee 0f       	add	r30, r30
    1872:	ff 1f       	adc	r31, r31
    1874:	e8 5b       	subi	r30, 0xB8	; 184
    1876:	fb 4f       	sbci	r31, 0xFB	; 251
    1878:	e0 80       	ld	r14, Z
    187a:	f1 80       	ldd	r15, Z+1	; 0x01
    187c:	ae 14       	cp	r10, r14
    187e:	bf 04       	cpc	r11, r15
    1880:	08 f4       	brcc	.+2      	; 0x1884 <recvfrom+0x2ea>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    1882:	75 01       	movw	r14, r10
    1884:	a7 01       	movw	r20, r14
    1886:	b4 01       	movw	r22, r8
    1888:	83 2d       	mov	r24, r3
    188a:	7e d3       	rcall	.+1788   	; 0x1f88 <wiz_recv_data>
			break;
    188c:	0a c0       	rjmp	.+20     	; 0x18a2 <recvfrom+0x308>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
    188e:	b7 01       	movw	r22, r14
    1890:	83 2d       	mov	r24, r3
    1892:	01 d4       	rcall	.+2050   	; 0x2096 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
    1894:	f6 01       	movw	r30, r12
    1896:	ee 0f       	add	r30, r30
    1898:	ff 1f       	adc	r31, r31
    189a:	e8 5b       	subi	r30, 0xB8	; 184
    189c:	fb 4f       	sbci	r31, 0xFB	; 251
    189e:	f1 82       	std	Z+1, r15	; 0x01
         break;
   }
	setSn_CR(sn,Sn_CR_RECV);
    18a0:	e0 82       	st	Z, r14
    18a2:	48 01       	movw	r8, r16
    18a4:	93 94       	inc	r9
    18a6:	09 2c       	mov	r0, r9
    18a8:	00 0c       	add	r0, r0
    18aa:	aa 08       	sbc	r10, r10
    18ac:	bb 08       	sbc	r11, r11
    18ae:	40 e4       	ldi	r20, 0x40	; 64
    18b0:	c5 01       	movw	r24, r10
    18b2:	b4 01       	movw	r22, r8
    18b4:	b7 d0       	rcall	.+366    	; 0x1a24 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
    18b6:	c5 01       	movw	r24, r10
    18b8:	b4 01       	movw	r22, r8
    18ba:	4d d0       	rcall	.+154    	; 0x1956 <WIZCHIP_READ>
    18bc:	81 11       	cpse	r24, r1
    18be:	fb cf       	rjmp	.-10     	; 0x18b6 <recvfrom+0x31c>
    18c0:	f6 01       	movw	r30, r12
	sock_remained_size[sn] -= pack_len;
    18c2:	ee 0f       	add	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	e8 5b       	subi	r30, 0xB8	; 184
    18c8:	fb 4f       	sbci	r31, 0xFB	; 251
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	8e 19       	sub	r24, r14
    18d0:	9f 09       	sbc	r25, r15
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	80 83       	st	Z, r24
    18d6:	89 2b       	or	r24, r25
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
    18d8:	39 f0       	breq	.+14     	; 0x18e8 <recvfrom+0x34e>
    18da:	f6 01       	movw	r30, r12
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
    18dc:	e0 5c       	subi	r30, 0xC0	; 192
    18de:	fb 4f       	sbci	r31, 0xFB	; 251
    18e0:	80 81       	ld	r24, Z
    18e2:	81 60       	ori	r24, 0x01	; 1
    18e4:	80 83       	st	Z, r24
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <recvfrom+0x356>
    18e8:	f6 01       	movw	r30, r12
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
    18ea:	e0 5c       	subi	r30, 0xC0	; 192
    18ec:	fb 4f       	sbci	r31, 0xFB	; 251
    18ee:	10 82       	st	Z, r1
    18f0:	b7 01       	movw	r22, r14
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	16 c0       	rjmp	.+44     	; 0x1924 <recvfrom+0x38a>
    18f8:	6f ef       	ldi	r22, 0xFF	; 255
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
    18fa:	7f ef       	ldi	r23, 0xFF	; 255
    18fc:	cb 01       	movw	r24, r22
    18fe:	12 c0       	rjmp	.+36     	; 0x1924 <recvfrom+0x38a>
    1900:	6b ef       	ldi	r22, 0xFB	; 251
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
    1902:	7f ef       	ldi	r23, 0xFF	; 255
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	9f ef       	ldi	r25, 0xFF	; 255
    1908:	0d c0       	rjmp	.+26     	; 0x1924 <recvfrom+0x38a>
    190a:	62 ef       	ldi	r22, 0xF2	; 242
   }
   CHECK_SOCKDATA();
    190c:	7f ef       	ldi	r23, 0xFF	; 255
    190e:	8f ef       	ldi	r24, 0xFF	; 255
    1910:	9f ef       	ldi	r25, 0xFF	; 255
    1912:	08 c0       	rjmp	.+16     	; 0x1924 <recvfrom+0x38a>
    1914:	6c ef       	ldi	r22, 0xFC	; 252
   if(sock_remained_size[sn] == 0)
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    1916:	7f ef       	ldi	r23, 0xFF	; 255
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	9f ef       	ldi	r25, 0xFF	; 255
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <recvfrom+0x38a>
    191e:	60 e0       	ldi	r22, 0x00	; 0
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	cb 01       	movw	r24, r22
    1924:	2c 96       	adiw	r28, 0x0c	; 12
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
}
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	ff 90       	pop	r15
    193a:	ef 90       	pop	r14
    193c:	df 90       	pop	r13
    193e:	cf 90       	pop	r12
    1940:	bf 90       	pop	r11
    1942:	af 90       	pop	r10
    1944:	9f 90       	pop	r9
    1946:	8f 90       	pop	r8
    1948:	7f 90       	pop	r7
    194a:	6f 90       	pop	r6
    194c:	5f 90       	pop	r5
    194e:	4f 90       	pop	r4
    1950:	3f 90       	pop	r3
    1952:	2f 90       	pop	r2
    1954:	08 95       	ret

00001956 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
    1956:	df 92       	push	r13
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	00 d0       	rcall	.+0      	; 0x1966 <WIZCHIP_READ+0x10>
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	f6 2e       	mov	r15, r22
    196c:	e7 2e       	mov	r14, r23
    196e:	d8 2e       	mov	r13, r24
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
    1970:	0a e0       	ldi	r16, 0x0A	; 10
    1972:	12 e0       	ldi	r17, 0x02	; 2
    1974:	d8 01       	movw	r26, r16
    1976:	18 96       	adiw	r26, 0x08	; 8
    1978:	ed 91       	ld	r30, X+
    197a:	fc 91       	ld	r31, X
    197c:	19 97       	sbiw	r26, 0x09	; 9
    197e:	19 95       	eicall
   WIZCHIP.CS._select();
    1980:	d8 01       	movw	r26, r16
    1982:	1c 96       	adiw	r26, 0x0c	; 12
    1984:	ed 91       	ld	r30, X+
    1986:	fc 91       	ld	r31, X
    1988:	1d 97       	sbiw	r26, 0x0d	; 13
    198a:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    198c:	f8 01       	movw	r30, r16
    198e:	84 89       	ldd	r24, Z+20	; 0x14
    1990:	95 89       	ldd	r25, Z+21	; 0x15
    1992:	89 2b       	or	r24, r25
    1994:	31 f0       	breq	.+12     	; 0x19a2 <WIZCHIP_READ+0x4c>
    1996:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <WIZCHIP+0x16>
    199a:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <WIZCHIP+0x17>
    199e:	30 97       	sbiw	r30, 0x00	; 0
    19a0:	c1 f4       	brne	.+48     	; 0x19d2 <WIZCHIP_READ+0x7c>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    19a2:	0a e0       	ldi	r16, 0x0A	; 10
    19a4:	12 e0       	ldi	r17, 0x02	; 2
    19a6:	d8 01       	movw	r26, r16
    19a8:	52 96       	adiw	r26, 0x12	; 18
    19aa:	ed 91       	ld	r30, X+
    19ac:	fc 91       	ld	r31, X
    19ae:	53 97       	sbiw	r26, 0x13	; 19
    19b0:	8d 2d       	mov	r24, r13
    19b2:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    19b4:	d8 01       	movw	r26, r16
    19b6:	52 96       	adiw	r26, 0x12	; 18
    19b8:	ed 91       	ld	r30, X+
    19ba:	fc 91       	ld	r31, X
    19bc:	53 97       	sbiw	r26, 0x13	; 19
    19be:	8e 2d       	mov	r24, r14
    19c0:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    19c2:	d8 01       	movw	r26, r16
    19c4:	52 96       	adiw	r26, 0x12	; 18
    19c6:	ed 91       	ld	r30, X+
    19c8:	fc 91       	ld	r31, X
    19ca:	53 97       	sbiw	r26, 0x13	; 19
    19cc:	8f 2d       	mov	r24, r15
    19ce:	19 95       	eicall
    19d0:	08 c0       	rjmp	.+16     	; 0x19e2 <WIZCHIP_READ+0x8c>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    19d2:	d9 82       	std	Y+1, r13	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    19d4:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    19d6:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    19d8:	63 e0       	ldi	r22, 0x03	; 3
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	ce 01       	movw	r24, r28
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	19 95       	eicall
   }
   ret = WIZCHIP.IF.SPI._read_byte();
    19e2:	0a e0       	ldi	r16, 0x0A	; 10
    19e4:	12 e0       	ldi	r17, 0x02	; 2
    19e6:	d8 01       	movw	r26, r16
    19e8:	50 96       	adiw	r26, 0x10	; 16
    19ea:	ed 91       	ld	r30, X+
    19ec:	fc 91       	ld	r31, X
    19ee:	51 97       	sbiw	r26, 0x11	; 17
    19f0:	19 95       	eicall
    19f2:	f8 2e       	mov	r15, r24

   WIZCHIP.CS._deselect();
    19f4:	d8 01       	movw	r26, r16
    19f6:	1e 96       	adiw	r26, 0x0e	; 14
    19f8:	ed 91       	ld	r30, X+
    19fa:	fc 91       	ld	r31, X
    19fc:	1f 97       	sbiw	r26, 0x0f	; 15
    19fe:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    1a00:	d8 01       	movw	r26, r16
    1a02:	1a 96       	adiw	r26, 0x0a	; 10
    1a04:	ed 91       	ld	r30, X+
    1a06:	fc 91       	ld	r31, X
    1a08:	1b 97       	sbiw	r26, 0x0b	; 11
    1a0a:	19 95       	eicall
   return ret;
}
    1a0c:	8f 2d       	mov	r24, r15
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	df 90       	pop	r13
    1a22:	08 95       	ret

00001a24 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
    1a24:	4f 92       	push	r4
    1a26:	5f 92       	push	r5
    1a28:	6f 92       	push	r6
    1a2a:	7f 92       	push	r7
    1a2c:	bf 92       	push	r11
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <WIZCHIP_WRITE+0x1c>
    1a40:	1f 92       	push	r1
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	6b 01       	movw	r12, r22
    1a48:	7c 01       	movw	r14, r24
    1a4a:	b4 2e       	mov	r11, r20
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
    1a4c:	0a e0       	ldi	r16, 0x0A	; 10
    1a4e:	12 e0       	ldi	r17, 0x02	; 2
    1a50:	d8 01       	movw	r26, r16
    1a52:	18 96       	adiw	r26, 0x08	; 8
    1a54:	ed 91       	ld	r30, X+
    1a56:	fc 91       	ld	r31, X
    1a58:	19 97       	sbiw	r26, 0x09	; 9
    1a5a:	19 95       	eicall
   WIZCHIP.CS._select();
    1a5c:	d8 01       	movw	r26, r16
    1a5e:	1c 96       	adiw	r26, 0x0c	; 12
    1a60:	ed 91       	ld	r30, X+
    1a62:	fc 91       	ld	r31, X
    1a64:	1d 97       	sbiw	r26, 0x0d	; 13
    1a66:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    1a68:	26 01       	movw	r4, r12
    1a6a:	37 01       	movw	r6, r14
    1a6c:	68 94       	set
    1a6e:	42 f8       	bld	r4, 2

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    1a70:	d8 01       	movw	r26, r16
    1a72:	56 96       	adiw	r26, 0x16	; 22
    1a74:	ed 91       	ld	r30, X+
    1a76:	fc 91       	ld	r31, X
    1a78:	57 97       	sbiw	r26, 0x17	; 23
    1a7a:	30 97       	sbiw	r30, 0x00	; 0
    1a7c:	e1 f4       	brne	.+56     	; 0x1ab6 <WIZCHIP_WRITE+0x92>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1a7e:	52 96       	adiw	r26, 0x12	; 18
    1a80:	ed 91       	ld	r30, X+
    1a82:	fc 91       	ld	r31, X
    1a84:	53 97       	sbiw	r26, 0x13	; 19
    1a86:	8e 2d       	mov	r24, r14
    1a88:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1a8a:	d8 01       	movw	r26, r16
    1a8c:	52 96       	adiw	r26, 0x12	; 18
    1a8e:	ed 91       	ld	r30, X+
    1a90:	fc 91       	ld	r31, X
    1a92:	53 97       	sbiw	r26, 0x13	; 19
    1a94:	8d 2d       	mov	r24, r13
    1a96:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1a98:	d8 01       	movw	r26, r16
    1a9a:	52 96       	adiw	r26, 0x12	; 18
    1a9c:	ed 91       	ld	r30, X+
    1a9e:	fc 91       	ld	r31, X
    1aa0:	53 97       	sbiw	r26, 0x13	; 19
    1aa2:	84 2d       	mov	r24, r4
    1aa4:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte(wb);
    1aa6:	d8 01       	movw	r26, r16
    1aa8:	52 96       	adiw	r26, 0x12	; 18
    1aaa:	ed 91       	ld	r30, X+
    1aac:	fc 91       	ld	r31, X
    1aae:	53 97       	sbiw	r26, 0x13	; 19
    1ab0:	8b 2d       	mov	r24, r11
    1ab2:	19 95       	eicall
    1ab4:	09 c0       	rjmp	.+18     	; 0x1ac8 <WIZCHIP_WRITE+0xa4>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    1ab6:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    1ab8:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    1aba:	4b 82       	std	Y+3, r4	; 0x03
		spi_data[3] = wb;
    1abc:	bc 82       	std	Y+4, r11	; 0x04
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
    1abe:	64 e0       	ldi	r22, 0x04	; 4
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    1ac8:	0a e0       	ldi	r16, 0x0A	; 10
    1aca:	12 e0       	ldi	r17, 0x02	; 2
    1acc:	d8 01       	movw	r26, r16
    1ace:	1e 96       	adiw	r26, 0x0e	; 14
    1ad0:	ed 91       	ld	r30, X+
    1ad2:	fc 91       	ld	r31, X
    1ad4:	1f 97       	sbiw	r26, 0x0f	; 15
    1ad6:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    1ad8:	d8 01       	movw	r26, r16
    1ada:	1a 96       	adiw	r26, 0x0a	; 10
    1adc:	ed 91       	ld	r30, X+
    1ade:	fc 91       	ld	r31, X
    1ae0:	1b 97       	sbiw	r26, 0x0b	; 11
    1ae2:	19 95       	eicall
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	cf 90       	pop	r12
    1afc:	bf 90       	pop	r11
    1afe:	7f 90       	pop	r7
    1b00:	6f 90       	pop	r6
    1b02:	5f 90       	pop	r5
    1b04:	4f 90       	pop	r4
    1b06:	08 95       	ret

00001b08 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    1b08:	9f 92       	push	r9
    1b0a:	af 92       	push	r10
    1b0c:	bf 92       	push	r11
    1b0e:	cf 92       	push	r12
    1b10:	df 92       	push	r13
    1b12:	ef 92       	push	r14
    1b14:	ff 92       	push	r15
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <WIZCHIP_READ_BUF+0x18>
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	f6 2e       	mov	r15, r22
    1b26:	e7 2e       	mov	r14, r23
    1b28:	98 2e       	mov	r9, r24
    1b2a:	5a 01       	movw	r10, r20
    1b2c:	69 01       	movw	r12, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    1b2e:	0a e0       	ldi	r16, 0x0A	; 10
    1b30:	12 e0       	ldi	r17, 0x02	; 2
    1b32:	d8 01       	movw	r26, r16
    1b34:	18 96       	adiw	r26, 0x08	; 8
    1b36:	ed 91       	ld	r30, X+
    1b38:	fc 91       	ld	r31, X
    1b3a:	19 97       	sbiw	r26, 0x09	; 9
    1b3c:	19 95       	eicall
   WIZCHIP.CS._select();
    1b3e:	d8 01       	movw	r26, r16
    1b40:	1c 96       	adiw	r26, 0x0c	; 12
    1b42:	ed 91       	ld	r30, X+
    1b44:	fc 91       	ld	r31, X
    1b46:	1d 97       	sbiw	r26, 0x0d	; 13
    1b48:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	84 89       	ldd	r24, Z+20	; 0x14
    1b4e:	95 89       	ldd	r25, Z+21	; 0x15
    1b50:	89 2b       	or	r24, r25
    1b52:	31 f0       	breq	.+12     	; 0x1b60 <WIZCHIP_READ_BUF+0x58>
    1b54:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <WIZCHIP+0x16>
    1b58:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <WIZCHIP+0x17>
    1b5c:	30 97       	sbiw	r30, 0x00	; 0
    1b5e:	51 f5       	brne	.+84     	; 0x1bb4 <WIZCHIP_READ_BUF+0xac>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1b60:	0a e0       	ldi	r16, 0x0A	; 10
    1b62:	12 e0       	ldi	r17, 0x02	; 2
    1b64:	d8 01       	movw	r26, r16
    1b66:	52 96       	adiw	r26, 0x12	; 18
    1b68:	ed 91       	ld	r30, X+
    1b6a:	fc 91       	ld	r31, X
    1b6c:	53 97       	sbiw	r26, 0x13	; 19
    1b6e:	89 2d       	mov	r24, r9
    1b70:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1b72:	d8 01       	movw	r26, r16
    1b74:	52 96       	adiw	r26, 0x12	; 18
    1b76:	ed 91       	ld	r30, X+
    1b78:	fc 91       	ld	r31, X
    1b7a:	53 97       	sbiw	r26, 0x13	; 19
    1b7c:	8e 2d       	mov	r24, r14
    1b7e:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1b80:	d8 01       	movw	r26, r16
    1b82:	52 96       	adiw	r26, 0x12	; 18
    1b84:	ed 91       	ld	r30, X+
    1b86:	fc 91       	ld	r31, X
    1b88:	53 97       	sbiw	r26, 0x13	; 19
    1b8a:	8f 2d       	mov	r24, r15
    1b8c:	19 95       	eicall
		for(i = 0; i < len; i++)
    1b8e:	00 e0       	ldi	r16, 0x00	; 0
    1b90:	10 e0       	ldi	r17, 0x00	; 0
    1b92:	0c c0       	rjmp	.+24     	; 0x1bac <WIZCHIP_READ_BUF+0xa4>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
    1b94:	75 01       	movw	r14, r10
    1b96:	e0 0e       	add	r14, r16
    1b98:	f1 1e       	adc	r15, r17
    1b9a:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <WIZCHIP+0x10>
    1b9e:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <WIZCHIP+0x11>
    1ba2:	19 95       	eicall
    1ba4:	f7 01       	movw	r30, r14
    1ba6:	80 83       	st	Z, r24
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    1ba8:	0f 5f       	subi	r16, 0xFF	; 255
    1baa:	1f 4f       	sbci	r17, 0xFF	; 255
    1bac:	0c 15       	cp	r16, r12
    1bae:	1d 05       	cpc	r17, r13
    1bb0:	88 f3       	brcs	.-30     	; 0x1b94 <WIZCHIP_READ_BUF+0x8c>
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <WIZCHIP_READ_BUF+0xca>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    1bb4:	99 82       	std	Y+1, r9	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    1bb6:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    1bb8:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    1bba:	63 e0       	ldi	r22, 0x03	; 3
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	01 96       	adiw	r24, 0x01	; 1
    1bc2:	19 95       	eicall
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
    1bc4:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <WIZCHIP+0x14>
    1bc8:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <WIZCHIP+0x15>
    1bcc:	b6 01       	movw	r22, r12
    1bce:	c5 01       	movw	r24, r10
    1bd0:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    1bd2:	0a e0       	ldi	r16, 0x0A	; 10
    1bd4:	12 e0       	ldi	r17, 0x02	; 2
    1bd6:	d8 01       	movw	r26, r16
    1bd8:	1e 96       	adiw	r26, 0x0e	; 14
    1bda:	ed 91       	ld	r30, X+
    1bdc:	fc 91       	ld	r31, X
    1bde:	1f 97       	sbiw	r26, 0x0f	; 15
    1be0:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    1be2:	d8 01       	movw	r26, r16
    1be4:	1a 96       	adiw	r26, 0x0a	; 10
    1be6:	ed 91       	ld	r30, X+
    1be8:	fc 91       	ld	r31, X
    1bea:	1b 97       	sbiw	r26, 0x0b	; 11
    1bec:	19 95       	eicall
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	1f 91       	pop	r17
    1bfa:	0f 91       	pop	r16
    1bfc:	ff 90       	pop	r15
    1bfe:	ef 90       	pop	r14
    1c00:	df 90       	pop	r13
    1c02:	cf 90       	pop	r12
    1c04:	bf 90       	pop	r11
    1c06:	af 90       	pop	r10
    1c08:	9f 90       	pop	r9
    1c0a:	08 95       	ret

00001c0c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    1c0c:	4f 92       	push	r4
    1c0e:	5f 92       	push	r5
    1c10:	6f 92       	push	r6
    1c12:	7f 92       	push	r7
    1c14:	8f 92       	push	r8
    1c16:	9f 92       	push	r9
    1c18:	af 92       	push	r10
    1c1a:	bf 92       	push	r11
    1c1c:	cf 92       	push	r12
    1c1e:	df 92       	push	r13
    1c20:	ef 92       	push	r14
    1c22:	ff 92       	push	r15
    1c24:	0f 93       	push	r16
    1c26:	1f 93       	push	r17
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <WIZCHIP_WRITE_BUF+0x22>
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	6b 01       	movw	r12, r22
    1c34:	7c 01       	movw	r14, r24
    1c36:	4a 01       	movw	r8, r20
    1c38:	59 01       	movw	r10, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    1c3a:	0a e0       	ldi	r16, 0x0A	; 10
    1c3c:	12 e0       	ldi	r17, 0x02	; 2
    1c3e:	d8 01       	movw	r26, r16
    1c40:	18 96       	adiw	r26, 0x08	; 8
    1c42:	ed 91       	ld	r30, X+
    1c44:	fc 91       	ld	r31, X
    1c46:	19 97       	sbiw	r26, 0x09	; 9
    1c48:	19 95       	eicall
   WIZCHIP.CS._select();
    1c4a:	d8 01       	movw	r26, r16
    1c4c:	1c 96       	adiw	r26, 0x0c	; 12
    1c4e:	ed 91       	ld	r30, X+
    1c50:	fc 91       	ld	r31, X
    1c52:	1d 97       	sbiw	r26, 0x0d	; 13
    1c54:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    1c56:	26 01       	movw	r4, r12
    1c58:	37 01       	movw	r6, r14
    1c5a:	68 94       	set
    1c5c:	42 f8       	bld	r4, 2

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    1c5e:	d8 01       	movw	r26, r16
    1c60:	56 96       	adiw	r26, 0x16	; 22
    1c62:	ed 91       	ld	r30, X+
    1c64:	fc 91       	ld	r31, X
    1c66:	57 97       	sbiw	r26, 0x17	; 23
    1c68:	30 97       	sbiw	r30, 0x00	; 0
    1c6a:	31 f5       	brne	.+76     	; 0x1cb8 <WIZCHIP_WRITE_BUF+0xac>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1c6c:	52 96       	adiw	r26, 0x12	; 18
    1c6e:	ed 91       	ld	r30, X+
    1c70:	fc 91       	ld	r31, X
    1c72:	53 97       	sbiw	r26, 0x13	; 19
    1c74:	8e 2d       	mov	r24, r14
    1c76:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1c78:	d8 01       	movw	r26, r16
    1c7a:	52 96       	adiw	r26, 0x12	; 18
    1c7c:	ed 91       	ld	r30, X+
    1c7e:	fc 91       	ld	r31, X
    1c80:	53 97       	sbiw	r26, 0x13	; 19
    1c82:	8d 2d       	mov	r24, r13
    1c84:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1c86:	d8 01       	movw	r26, r16
    1c88:	52 96       	adiw	r26, 0x12	; 18
    1c8a:	ed 91       	ld	r30, X+
    1c8c:	fc 91       	ld	r31, X
    1c8e:	53 97       	sbiw	r26, 0x13	; 19
    1c90:	84 2d       	mov	r24, r4
    1c92:	19 95       	eicall
		for(i = 0; i < len; i++)
    1c94:	00 e0       	ldi	r16, 0x00	; 0
    1c96:	10 e0       	ldi	r17, 0x00	; 0
    1c98:	0b c0       	rjmp	.+22     	; 0x1cb0 <WIZCHIP_WRITE_BUF+0xa4>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    1c9a:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x12>
    1c9e:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x13>
    1ca2:	d4 01       	movw	r26, r8
    1ca4:	a0 0f       	add	r26, r16
    1ca6:	b1 1f       	adc	r27, r17
    1ca8:	8c 91       	ld	r24, X
    1caa:	19 95       	eicall
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    1cac:	0f 5f       	subi	r16, 0xFF	; 255
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	0a 15       	cp	r16, r10
    1cb2:	1b 05       	cpc	r17, r11
    1cb4:	90 f3       	brcs	.-28     	; 0x1c9a <WIZCHIP_WRITE_BUF+0x8e>
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <WIZCHIP_WRITE_BUF+0xca>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    1cb8:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    1cba:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    1cbc:	4b 82       	std	Y+3, r4	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    1cbe:	63 e0       	ldi	r22, 0x03	; 3
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	01 96       	adiw	r24, 0x01	; 1
    1cc6:	19 95       	eicall
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    1cc8:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <WIZCHIP+0x16>
    1ccc:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <WIZCHIP+0x17>
    1cd0:	b5 01       	movw	r22, r10
    1cd2:	c4 01       	movw	r24, r8
    1cd4:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    1cd6:	0a e0       	ldi	r16, 0x0A	; 10
    1cd8:	12 e0       	ldi	r17, 0x02	; 2
    1cda:	d8 01       	movw	r26, r16
    1cdc:	1e 96       	adiw	r26, 0x0e	; 14
    1cde:	ed 91       	ld	r30, X+
    1ce0:	fc 91       	ld	r31, X
    1ce2:	1f 97       	sbiw	r26, 0x0f	; 15
    1ce4:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    1ce6:	d8 01       	movw	r26, r16
    1ce8:	1a 96       	adiw	r26, 0x0a	; 10
    1cea:	ed 91       	ld	r30, X+
    1cec:	fc 91       	ld	r31, X
    1cee:	1b 97       	sbiw	r26, 0x0b	; 11
    1cf0:	19 95       	eicall
}
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	df 90       	pop	r13
    1d06:	cf 90       	pop	r12
    1d08:	bf 90       	pop	r11
    1d0a:	af 90       	pop	r10
    1d0c:	9f 90       	pop	r9
    1d0e:	8f 90       	pop	r8
    1d10:	7f 90       	pop	r7
    1d12:	6f 90       	pop	r6
    1d14:	5f 90       	pop	r5
    1d16:	4f 90       	pop	r4
    1d18:	08 95       	ret

00001d1a <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
    1d1a:	7f 92       	push	r7
    1d1c:	8f 92       	push	r8
    1d1e:	9f 92       	push	r9
    1d20:	af 92       	push	r10
    1d22:	bf 92       	push	r11
    1d24:	cf 92       	push	r12
    1d26:	df 92       	push	r13
    1d28:	ef 92       	push	r14
    1d2a:	ff 92       	push	r15
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	78 2e       	mov	r7, r24
   uint16_t val=0,val1=0;
    1d36:	00 e0       	ldi	r16, 0x00	; 0
    1d38:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    1d3a:	c7 2c       	mov	r12, r7
    1d3c:	d1 2c       	mov	r13, r1
    1d3e:	cc 0c       	add	r12, r12
    1d40:	dd 1c       	adc	r13, r13
    1d42:	cc 0c       	add	r12, r12
    1d44:	dd 1c       	adc	r13, r13
    1d46:	8f ef       	ldi	r24, 0xFF	; 255
    1d48:	c8 1a       	sub	r12, r24
    1d4a:	d8 0a       	sbc	r13, r24
    1d4c:	cc 0c       	add	r12, r12
    1d4e:	dd 1c       	adc	r13, r13
    1d50:	cc 0c       	add	r12, r12
    1d52:	dd 1c       	adc	r13, r13
    1d54:	cc 0c       	add	r12, r12
    1d56:	dd 1c       	adc	r13, r13
    1d58:	46 01       	movw	r8, r12
    1d5a:	80 ee       	ldi	r24, 0xE0	; 224
    1d5c:	98 1a       	sub	r9, r24
    1d5e:	09 2c       	mov	r0, r9
    1d60:	00 0c       	add	r0, r0
    1d62:	aa 08       	sbc	r10, r10
    1d64:	bb 08       	sbc	r11, r11
    1d66:	c5 01       	movw	r24, r10
    1d68:	b4 01       	movw	r22, r8
    1d6a:	f5 dd       	rcall	.-1046   	; 0x1956 <WIZCHIP_READ>
    1d6c:	c8 2f       	mov	r28, r24
    1d6e:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    1d70:	dc 2f       	mov	r29, r28
    1d72:	cc 27       	eor	r28, r28
    1d74:	8f ed       	ldi	r24, 0xDF	; 223
    1d76:	d8 1a       	sub	r13, r24
    1d78:	0d 2c       	mov	r0, r13
    1d7a:	00 0c       	add	r0, r0
    1d7c:	ee 08       	sbc	r14, r14
    1d7e:	ff 08       	sbc	r15, r15
    1d80:	c7 01       	movw	r24, r14
    1d82:	b6 01       	movw	r22, r12
    1d84:	e8 dd       	rcall	.-1072   	; 0x1956 <WIZCHIP_READ>
    1d86:	c8 0f       	add	r28, r24
    1d88:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    1d8a:	20 97       	sbiw	r28, 0x00	; 0
    1d8c:	61 f0       	breq	.+24     	; 0x1da6 <getSn_TX_FSR+0x8c>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    1d8e:	c5 01       	movw	r24, r10
    1d90:	b4 01       	movw	r22, r8
    1d92:	e1 dd       	rcall	.-1086   	; 0x1956 <WIZCHIP_READ>
    1d94:	08 2f       	mov	r16, r24
    1d96:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    1d98:	10 2f       	mov	r17, r16
    1d9a:	00 27       	eor	r16, r16
    1d9c:	c7 01       	movw	r24, r14
    1d9e:	b6 01       	movw	r22, r12
    1da0:	da dd       	rcall	.-1100   	; 0x1956 <WIZCHIP_READ>
    1da2:	08 0f       	add	r16, r24
    1da4:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    1da6:	0c 17       	cp	r16, r28
    1da8:	1d 07       	cpc	r17, r29
    1daa:	39 f6       	brne	.-114    	; 0x1d3a <getSn_TX_FSR+0x20>
   return val;
}
    1dac:	c8 01       	movw	r24, r16
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	ff 90       	pop	r15
    1db8:	ef 90       	pop	r14
    1dba:	df 90       	pop	r13
    1dbc:	cf 90       	pop	r12
    1dbe:	bf 90       	pop	r11
    1dc0:	af 90       	pop	r10
    1dc2:	9f 90       	pop	r9
    1dc4:	8f 90       	pop	r8
    1dc6:	7f 90       	pop	r7
    1dc8:	08 95       	ret

00001dca <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    1dca:	7f 92       	push	r7
    1dcc:	8f 92       	push	r8
    1dce:	9f 92       	push	r9
    1dd0:	af 92       	push	r10
    1dd2:	bf 92       	push	r11
    1dd4:	cf 92       	push	r12
    1dd6:	df 92       	push	r13
    1dd8:	ef 92       	push	r14
    1dda:	ff 92       	push	r15
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	78 2e       	mov	r7, r24
   uint16_t val=0,val1=0;
    1de6:	00 e0       	ldi	r16, 0x00	; 0
    1de8:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    1dea:	c7 2c       	mov	r12, r7
    1dec:	d1 2c       	mov	r13, r1
    1dee:	cc 0c       	add	r12, r12
    1df0:	dd 1c       	adc	r13, r13
    1df2:	cc 0c       	add	r12, r12
    1df4:	dd 1c       	adc	r13, r13
    1df6:	8f ef       	ldi	r24, 0xFF	; 255
    1df8:	c8 1a       	sub	r12, r24
    1dfa:	d8 0a       	sbc	r13, r24
    1dfc:	cc 0c       	add	r12, r12
    1dfe:	dd 1c       	adc	r13, r13
    1e00:	cc 0c       	add	r12, r12
    1e02:	dd 1c       	adc	r13, r13
    1e04:	cc 0c       	add	r12, r12
    1e06:	dd 1c       	adc	r13, r13
    1e08:	46 01       	movw	r8, r12
    1e0a:	8a ed       	ldi	r24, 0xDA	; 218
    1e0c:	98 1a       	sub	r9, r24
    1e0e:	09 2c       	mov	r0, r9
    1e10:	00 0c       	add	r0, r0
    1e12:	aa 08       	sbc	r10, r10
    1e14:	bb 08       	sbc	r11, r11
    1e16:	c5 01       	movw	r24, r10
    1e18:	b4 01       	movw	r22, r8
    1e1a:	9d dd       	rcall	.-1222   	; 0x1956 <WIZCHIP_READ>
    1e1c:	c8 2f       	mov	r28, r24
    1e1e:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    1e20:	dc 2f       	mov	r29, r28
    1e22:	cc 27       	eor	r28, r28
    1e24:	89 ed       	ldi	r24, 0xD9	; 217
    1e26:	d8 1a       	sub	r13, r24
    1e28:	0d 2c       	mov	r0, r13
    1e2a:	00 0c       	add	r0, r0
    1e2c:	ee 08       	sbc	r14, r14
    1e2e:	ff 08       	sbc	r15, r15
    1e30:	c7 01       	movw	r24, r14
    1e32:	b6 01       	movw	r22, r12
    1e34:	90 dd       	rcall	.-1248   	; 0x1956 <WIZCHIP_READ>
    1e36:	c8 0f       	add	r28, r24
    1e38:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    1e3a:	20 97       	sbiw	r28, 0x00	; 0
    1e3c:	61 f0       	breq	.+24     	; 0x1e56 <getSn_RX_RSR+0x8c>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    1e3e:	c5 01       	movw	r24, r10
    1e40:	b4 01       	movw	r22, r8
    1e42:	89 dd       	rcall	.-1262   	; 0x1956 <WIZCHIP_READ>
    1e44:	08 2f       	mov	r16, r24
    1e46:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    1e48:	10 2f       	mov	r17, r16
    1e4a:	00 27       	eor	r16, r16
    1e4c:	c7 01       	movw	r24, r14
    1e4e:	b6 01       	movw	r22, r12
    1e50:	82 dd       	rcall	.-1276   	; 0x1956 <WIZCHIP_READ>
    1e52:	08 0f       	add	r16, r24
    1e54:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    1e56:	0c 17       	cp	r16, r28
    1e58:	1d 07       	cpc	r17, r29
    1e5a:	39 f6       	brne	.-114    	; 0x1dea <getSn_RX_RSR+0x20>
   return val;
}
    1e5c:	c8 01       	movw	r24, r16
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	ff 90       	pop	r15
    1e68:	ef 90       	pop	r14
    1e6a:	df 90       	pop	r13
    1e6c:	cf 90       	pop	r12
    1e6e:	bf 90       	pop	r11
    1e70:	af 90       	pop	r10
    1e72:	9f 90       	pop	r9
    1e74:	8f 90       	pop	r8
    1e76:	7f 90       	pop	r7
    1e78:	08 95       	ret

00001e7a <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    1e7a:	2f 92       	push	r2
    1e7c:	3f 92       	push	r3
    1e7e:	4f 92       	push	r4
    1e80:	5f 92       	push	r5
    1e82:	6f 92       	push	r6
    1e84:	7f 92       	push	r7
    1e86:	8f 92       	push	r8
    1e88:	9f 92       	push	r9
    1e8a:	af 92       	push	r10
    1e8c:	bf 92       	push	r11
    1e8e:	cf 92       	push	r12
    1e90:	df 92       	push	r13
    1e92:	ef 92       	push	r14
    1e94:	ff 92       	push	r15
    1e96:	0f 93       	push	r16
    1e98:	1f 93       	push	r17
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <wiz_send_data+0x26>
    1ea0:	1f 92       	push	r1
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
    1ea6:	41 15       	cp	r20, r1
    1ea8:	51 05       	cpc	r21, r1
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <wiz_send_data+0x34>
    1eac:	56 c0       	rjmp	.+172    	; 0x1f5a <wiz_send_data+0xe0>
    1eae:	3a 01       	movw	r6, r20
    1eb0:	7a 83       	std	Y+2, r23	; 0x02
    1eb2:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_TX_WR(sn);
    1eb4:	28 2e       	mov	r2, r24
    1eb6:	31 2c       	mov	r3, r1
    1eb8:	22 0c       	add	r2, r2
    1eba:	33 1c       	adc	r3, r3
    1ebc:	22 0c       	add	r2, r2
    1ebe:	33 1c       	adc	r3, r3
    1ec0:	61 01       	movw	r12, r2
    1ec2:	2f ef       	ldi	r18, 0xFF	; 255
    1ec4:	c2 1a       	sub	r12, r18
    1ec6:	d2 0a       	sbc	r13, r18
    1ec8:	cc 0c       	add	r12, r12
    1eca:	dd 1c       	adc	r13, r13
    1ecc:	cc 0c       	add	r12, r12
    1ece:	dd 1c       	adc	r13, r13
    1ed0:	cc 0c       	add	r12, r12
    1ed2:	dd 1c       	adc	r13, r13
    1ed4:	46 01       	movw	r8, r12
    1ed6:	3c ed       	ldi	r19, 0xDC	; 220
    1ed8:	93 1a       	sub	r9, r19
    1eda:	09 2c       	mov	r0, r9
    1edc:	00 0c       	add	r0, r0
    1ede:	aa 08       	sbc	r10, r10
    1ee0:	bb 08       	sbc	r11, r11
    1ee2:	c5 01       	movw	r24, r10
    1ee4:	b4 01       	movw	r22, r8
    1ee6:	37 dd       	rcall	.-1426   	; 0x1956 <WIZCHIP_READ>
    1ee8:	08 2f       	mov	r16, r24
    1eea:	10 e0       	ldi	r17, 0x00	; 0
    1eec:	10 2f       	mov	r17, r16
    1eee:	00 27       	eor	r16, r16
    1ef0:	8b ed       	ldi	r24, 0xDB	; 219
    1ef2:	d8 1a       	sub	r13, r24
    1ef4:	0d 2c       	mov	r0, r13
    1ef6:	00 0c       	add	r0, r0
    1ef8:	ee 08       	sbc	r14, r14
    1efa:	ff 08       	sbc	r15, r15
    1efc:	c7 01       	movw	r24, r14
    1efe:	b6 01       	movw	r22, r12
    1f00:	2a dd       	rcall	.-1452   	; 0x1956 <WIZCHIP_READ>
    1f02:	08 0f       	add	r16, r24
    1f04:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
    1f06:	c8 01       	movw	r24, r16
    1f08:	a0 e0       	ldi	r26, 0x00	; 0
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	44 27       	eor	r20, r20
    1f0e:	58 2f       	mov	r21, r24
    1f10:	69 2f       	mov	r22, r25
    1f12:	7a 2f       	mov	r23, r26
    1f14:	c1 01       	movw	r24, r2
    1f16:	02 96       	adiw	r24, 0x02	; 2
    1f18:	1c 01       	movw	r2, r24
    1f1a:	22 0c       	add	r2, r2
    1f1c:	33 1c       	adc	r3, r3
    1f1e:	22 0c       	add	r2, r2
    1f20:	33 1c       	adc	r3, r3
    1f22:	22 0c       	add	r2, r2
    1f24:	33 1c       	adc	r3, r3
    1f26:	c1 01       	movw	r24, r2
    1f28:	33 0c       	add	r3, r3
    1f2a:	aa 0b       	sbc	r26, r26
    1f2c:	bb 0b       	sbc	r27, r27
    1f2e:	1a 01       	movw	r2, r20
    1f30:	2b 01       	movw	r4, r22
    1f32:	28 0e       	add	r2, r24
    1f34:	39 1e       	adc	r3, r25
    1f36:	4a 1e       	adc	r4, r26
    1f38:	5b 1e       	adc	r5, r27
    1f3a:	c2 01       	movw	r24, r4
    1f3c:	b1 01       	movw	r22, r2
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    1f3e:	93 01       	movw	r18, r6
    1f40:	49 81       	ldd	r20, Y+1	; 0x01
    1f42:	5a 81       	ldd	r21, Y+2	; 0x02
    1f44:	63 de       	rcall	.-826    	; 0x1c0c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
    1f46:	06 0d       	add	r16, r6
    1f48:	17 1d       	adc	r17, r7
   setSn_TX_WR(sn,ptr);
    1f4a:	41 2f       	mov	r20, r17
    1f4c:	c5 01       	movw	r24, r10
    1f4e:	b4 01       	movw	r22, r8
    1f50:	69 dd       	rcall	.-1326   	; 0x1a24 <WIZCHIP_WRITE>
    1f52:	40 2f       	mov	r20, r16
    1f54:	c7 01       	movw	r24, r14
    1f56:	b6 01       	movw	r22, r12
    1f58:	65 dd       	rcall	.-1334   	; 0x1a24 <WIZCHIP_WRITE>
}
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	1f 91       	pop	r17
    1f68:	0f 91       	pop	r16
    1f6a:	ff 90       	pop	r15
    1f6c:	ef 90       	pop	r14
    1f6e:	df 90       	pop	r13
    1f70:	cf 90       	pop	r12
    1f72:	bf 90       	pop	r11
    1f74:	af 90       	pop	r10
    1f76:	9f 90       	pop	r9
    1f78:	8f 90       	pop	r8
    1f7a:	7f 90       	pop	r7
    1f7c:	6f 90       	pop	r6
    1f7e:	5f 90       	pop	r5
    1f80:	4f 90       	pop	r4
    1f82:	3f 90       	pop	r3
    1f84:	2f 90       	pop	r2
    1f86:	08 95       	ret

00001f88 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    1f88:	2f 92       	push	r2
    1f8a:	3f 92       	push	r3
    1f8c:	4f 92       	push	r4
    1f8e:	5f 92       	push	r5
    1f90:	6f 92       	push	r6
    1f92:	7f 92       	push	r7
    1f94:	8f 92       	push	r8
    1f96:	9f 92       	push	r9
    1f98:	af 92       	push	r10
    1f9a:	bf 92       	push	r11
    1f9c:	cf 92       	push	r12
    1f9e:	df 92       	push	r13
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <wiz_recv_data+0x26>
    1fae:	1f 92       	push	r1
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
    1fb4:	41 15       	cp	r20, r1
    1fb6:	51 05       	cpc	r21, r1
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <wiz_recv_data+0x34>
    1fba:	56 c0       	rjmp	.+172    	; 0x2068 <__EEPROM_REGION_LENGTH__+0x68>
    1fbc:	3a 01       	movw	r6, r20
    1fbe:	7a 83       	std	Y+2, r23	; 0x02
    1fc0:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_RX_RD(sn);
    1fc2:	28 2e       	mov	r2, r24
    1fc4:	31 2c       	mov	r3, r1
    1fc6:	22 0c       	add	r2, r2
    1fc8:	33 1c       	adc	r3, r3
    1fca:	22 0c       	add	r2, r2
    1fcc:	33 1c       	adc	r3, r3
    1fce:	61 01       	movw	r12, r2
    1fd0:	2f ef       	ldi	r18, 0xFF	; 255
    1fd2:	c2 1a       	sub	r12, r18
    1fd4:	d2 0a       	sbc	r13, r18
    1fd6:	cc 0c       	add	r12, r12
    1fd8:	dd 1c       	adc	r13, r13
    1fda:	cc 0c       	add	r12, r12
    1fdc:	dd 1c       	adc	r13, r13
    1fde:	cc 0c       	add	r12, r12
    1fe0:	dd 1c       	adc	r13, r13
    1fe2:	46 01       	movw	r8, r12
    1fe4:	38 ed       	ldi	r19, 0xD8	; 216
    1fe6:	93 1a       	sub	r9, r19
    1fe8:	09 2c       	mov	r0, r9
    1fea:	00 0c       	add	r0, r0
    1fec:	aa 08       	sbc	r10, r10
    1fee:	bb 08       	sbc	r11, r11
    1ff0:	c5 01       	movw	r24, r10
    1ff2:	b4 01       	movw	r22, r8
    1ff4:	b0 dc       	rcall	.-1696   	; 0x1956 <WIZCHIP_READ>
    1ff6:	08 2f       	mov	r16, r24
    1ff8:	10 e0       	ldi	r17, 0x00	; 0
    1ffa:	10 2f       	mov	r17, r16
    1ffc:	00 27       	eor	r16, r16
    1ffe:	87 ed       	ldi	r24, 0xD7	; 215
    2000:	d8 1a       	sub	r13, r24
    2002:	0d 2c       	mov	r0, r13
    2004:	00 0c       	add	r0, r0
    2006:	ee 08       	sbc	r14, r14
    2008:	ff 08       	sbc	r15, r15
    200a:	c7 01       	movw	r24, r14
    200c:	b6 01       	movw	r22, r12
    200e:	a3 dc       	rcall	.-1722   	; 0x1956 <WIZCHIP_READ>
    2010:	08 0f       	add	r16, r24
    2012:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
    2014:	c8 01       	movw	r24, r16
    2016:	a0 e0       	ldi	r26, 0x00	; 0
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	44 27       	eor	r20, r20
    201c:	58 2f       	mov	r21, r24
    201e:	69 2f       	mov	r22, r25
    2020:	7a 2f       	mov	r23, r26
    2022:	c1 01       	movw	r24, r2
    2024:	03 96       	adiw	r24, 0x03	; 3
    2026:	1c 01       	movw	r2, r24
    2028:	22 0c       	add	r2, r2
    202a:	33 1c       	adc	r3, r3
    202c:	22 0c       	add	r2, r2
    202e:	33 1c       	adc	r3, r3
    2030:	22 0c       	add	r2, r2
    2032:	33 1c       	adc	r3, r3
    2034:	c1 01       	movw	r24, r2
    2036:	33 0c       	add	r3, r3
    2038:	aa 0b       	sbc	r26, r26
    203a:	bb 0b       	sbc	r27, r27
    203c:	1a 01       	movw	r2, r20
    203e:	2b 01       	movw	r4, r22
    2040:	28 0e       	add	r2, r24
    2042:	39 1e       	adc	r3, r25
    2044:	4a 1e       	adc	r4, r26
    2046:	5b 1e       	adc	r5, r27
    2048:	c2 01       	movw	r24, r4
    204a:	b1 01       	movw	r22, r2
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    204c:	93 01       	movw	r18, r6
    204e:	49 81       	ldd	r20, Y+1	; 0x01
    2050:	5a 81       	ldd	r21, Y+2	; 0x02
    2052:	5a dd       	rcall	.-1356   	; 0x1b08 <WIZCHIP_READ_BUF>
   ptr += len;
    2054:	06 0d       	add	r16, r6
    2056:	17 1d       	adc	r17, r7
   
   setSn_RX_RD(sn,ptr);
    2058:	41 2f       	mov	r20, r17
    205a:	c5 01       	movw	r24, r10
    205c:	b4 01       	movw	r22, r8
    205e:	e2 dc       	rcall	.-1596   	; 0x1a24 <WIZCHIP_WRITE>
    2060:	40 2f       	mov	r20, r16
    2062:	c7 01       	movw	r24, r14
    2064:	b6 01       	movw	r22, r12
    2066:	de dc       	rcall	.-1604   	; 0x1a24 <WIZCHIP_WRITE>
}
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	1f 91       	pop	r17
    2076:	0f 91       	pop	r16
    2078:	ff 90       	pop	r15
    207a:	ef 90       	pop	r14
    207c:	df 90       	pop	r13
    207e:	cf 90       	pop	r12
    2080:	bf 90       	pop	r11
    2082:	af 90       	pop	r10
    2084:	9f 90       	pop	r9
    2086:	8f 90       	pop	r8
    2088:	7f 90       	pop	r7
    208a:	6f 90       	pop	r6
    208c:	5f 90       	pop	r5
    208e:	4f 90       	pop	r4
    2090:	3f 90       	pop	r3
    2092:	2f 90       	pop	r2
    2094:	08 95       	ret

00002096 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
    2096:	8f 92       	push	r8
    2098:	9f 92       	push	r9
    209a:	af 92       	push	r10
    209c:	bf 92       	push	r11
    209e:	cf 92       	push	r12
    20a0:	df 92       	push	r13
    20a2:	ef 92       	push	r14
    20a4:	ff 92       	push	r15
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	eb 01       	movw	r28, r22
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
    20b0:	c8 2e       	mov	r12, r24
    20b2:	d1 2c       	mov	r13, r1
    20b4:	cc 0c       	add	r12, r12
    20b6:	dd 1c       	adc	r13, r13
    20b8:	cc 0c       	add	r12, r12
    20ba:	dd 1c       	adc	r13, r13
    20bc:	8f ef       	ldi	r24, 0xFF	; 255
    20be:	c8 1a       	sub	r12, r24
    20c0:	d8 0a       	sbc	r13, r24
    20c2:	cc 0c       	add	r12, r12
    20c4:	dd 1c       	adc	r13, r13
    20c6:	cc 0c       	add	r12, r12
    20c8:	dd 1c       	adc	r13, r13
    20ca:	cc 0c       	add	r12, r12
    20cc:	dd 1c       	adc	r13, r13
    20ce:	46 01       	movw	r8, r12
    20d0:	88 ed       	ldi	r24, 0xD8	; 216
    20d2:	98 1a       	sub	r9, r24
    20d4:	09 2c       	mov	r0, r9
    20d6:	00 0c       	add	r0, r0
    20d8:	aa 08       	sbc	r10, r10
    20da:	bb 08       	sbc	r11, r11
    20dc:	c5 01       	movw	r24, r10
    20de:	b4 01       	movw	r22, r8
    20e0:	3a dc       	rcall	.-1932   	; 0x1956 <WIZCHIP_READ>
    20e2:	08 2f       	mov	r16, r24
    20e4:	10 e0       	ldi	r17, 0x00	; 0
    20e6:	10 2f       	mov	r17, r16
    20e8:	00 27       	eor	r16, r16
    20ea:	87 ed       	ldi	r24, 0xD7	; 215
    20ec:	d8 1a       	sub	r13, r24
    20ee:	0d 2c       	mov	r0, r13
    20f0:	00 0c       	add	r0, r0
    20f2:	ee 08       	sbc	r14, r14
    20f4:	ff 08       	sbc	r15, r15
    20f6:	c7 01       	movw	r24, r14
    20f8:	b6 01       	movw	r22, r12
    20fa:	2d dc       	rcall	.-1958   	; 0x1956 <WIZCHIP_READ>
    20fc:	08 0f       	add	r16, r24
    20fe:	11 1d       	adc	r17, r1
   ptr += len;
    2100:	c0 0f       	add	r28, r16
    2102:	d1 1f       	adc	r29, r17
   setSn_RX_RD(sn,ptr);
    2104:	4d 2f       	mov	r20, r29
    2106:	c5 01       	movw	r24, r10
    2108:	b4 01       	movw	r22, r8
    210a:	8c dc       	rcall	.-1768   	; 0x1a24 <WIZCHIP_WRITE>
    210c:	4c 2f       	mov	r20, r28
    210e:	c7 01       	movw	r24, r14
    2110:	b6 01       	movw	r22, r12
    2112:	88 dc       	rcall	.-1776   	; 0x1a24 <WIZCHIP_WRITE>
}
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	af 90       	pop	r10
    2128:	9f 90       	pop	r9
    212a:	8f 90       	pop	r8
    212c:	08 95       	ret

0000212e <wizchip_cris_enter>:
void wizphy_getphystat(wiz_PhyConf* phyconf)
{
   uint8_t tmp = getPHYCFGR();
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}
    212e:	08 95       	ret

00002130 <wizchip_cris_exit>:
    2130:	08 95       	ret

00002132 <wizchip_cs_select>:
    2132:	08 95       	ret

00002134 <wizchip_cs_deselect>:
    2134:	08 95       	ret

00002136 <wizchip_bus_readdata>:
    2136:	fb 01       	movw	r30, r22
    2138:	80 81       	ld	r24, Z
    213a:	08 95       	ret

0000213c <wizchip_bus_writedata>:
    213c:	fb 01       	movw	r30, r22
    213e:	40 83       	st	Z, r20
    2140:	08 95       	ret

00002142 <wizchip_spi_readbyte>:
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	08 95       	ret

00002146 <wizchip_spi_writebyte>:
    2146:	08 95       	ret

00002148 <wizchip_spi_readburst>:
    2148:	08 95       	ret

0000214a <wizchip_spi_writeburst>:
    214a:	08 95       	ret

0000214c <reg_wizchip_cs_cbfunc>:
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	19 f0       	breq	.+6      	; 0x2156 <reg_wizchip_cs_cbfunc+0xa>
    2150:	61 15       	cp	r22, r1
    2152:	71 05       	cpc	r23, r1
    2154:	59 f4       	brne	.+22     	; 0x216c <reg_wizchip_cs_cbfunc+0x20>
    2156:	ea e0       	ldi	r30, 0x0A	; 10
    2158:	f2 e0       	ldi	r31, 0x02	; 2
    215a:	89 e9       	ldi	r24, 0x99	; 153
    215c:	90 e1       	ldi	r25, 0x10	; 16
    215e:	95 87       	std	Z+13, r25	; 0x0d
    2160:	84 87       	std	Z+12, r24	; 0x0c
    2162:	8a e9       	ldi	r24, 0x9A	; 154
    2164:	90 e1       	ldi	r25, 0x10	; 16
    2166:	97 87       	std	Z+15, r25	; 0x0f
    2168:	86 87       	std	Z+14, r24	; 0x0e
    216a:	08 95       	ret
    216c:	ea e0       	ldi	r30, 0x0A	; 10
    216e:	f2 e0       	ldi	r31, 0x02	; 2
    2170:	95 87       	std	Z+13, r25	; 0x0d
    2172:	84 87       	std	Z+12, r24	; 0x0c
    2174:	77 87       	std	Z+15, r23	; 0x0f
    2176:	66 87       	std	Z+14, r22	; 0x0e
    2178:	08 95       	ret

0000217a <reg_wizchip_spi_cbfunc>:
    217a:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <WIZCHIP>
    217e:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <WIZCHIP+0x1>
    2182:	31 ff       	sbrs	r19, 1
    2184:	fa cf       	rjmp	.-12     	; 0x217a <reg_wizchip_spi_cbfunc>
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	19 f0       	breq	.+6      	; 0x2190 <reg_wizchip_spi_cbfunc+0x16>
    218a:	61 15       	cp	r22, r1
    218c:	71 05       	cpc	r23, r1
    218e:	59 f4       	brne	.+22     	; 0x21a6 <reg_wizchip_spi_cbfunc+0x2c>
    2190:	ea e0       	ldi	r30, 0x0A	; 10
    2192:	f2 e0       	ldi	r31, 0x02	; 2
    2194:	81 ea       	ldi	r24, 0xA1	; 161
    2196:	90 e1       	ldi	r25, 0x10	; 16
    2198:	91 8b       	std	Z+17, r25	; 0x11
    219a:	80 8b       	std	Z+16, r24	; 0x10
    219c:	83 ea       	ldi	r24, 0xA3	; 163
    219e:	90 e1       	ldi	r25, 0x10	; 16
    21a0:	93 8b       	std	Z+19, r25	; 0x13
    21a2:	82 8b       	std	Z+18, r24	; 0x12
    21a4:	08 95       	ret
    21a6:	ea e0       	ldi	r30, 0x0A	; 10
    21a8:	f2 e0       	ldi	r31, 0x02	; 2
    21aa:	91 8b       	std	Z+17, r25	; 0x11
    21ac:	80 8b       	std	Z+16, r24	; 0x10
    21ae:	73 8b       	std	Z+19, r23	; 0x13
    21b0:	62 8b       	std	Z+18, r22	; 0x12
    21b2:	08 95       	ret

000021b4 <reg_wizchip_spiburst_cbfunc>:
    21b4:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <WIZCHIP>
    21b8:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <WIZCHIP+0x1>
    21bc:	31 ff       	sbrs	r19, 1
    21be:	fa cf       	rjmp	.-12     	; 0x21b4 <reg_wizchip_spiburst_cbfunc>
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	19 f0       	breq	.+6      	; 0x21ca <reg_wizchip_spiburst_cbfunc+0x16>
    21c4:	61 15       	cp	r22, r1
    21c6:	71 05       	cpc	r23, r1
    21c8:	59 f4       	brne	.+22     	; 0x21e0 <reg_wizchip_spiburst_cbfunc+0x2c>
    21ca:	ea e0       	ldi	r30, 0x0A	; 10
    21cc:	f2 e0       	ldi	r31, 0x02	; 2
    21ce:	84 ea       	ldi	r24, 0xA4	; 164
    21d0:	90 e1       	ldi	r25, 0x10	; 16
    21d2:	95 8b       	std	Z+21, r25	; 0x15
    21d4:	84 8b       	std	Z+20, r24	; 0x14
    21d6:	85 ea       	ldi	r24, 0xA5	; 165
    21d8:	90 e1       	ldi	r25, 0x10	; 16
    21da:	97 8b       	std	Z+23, r25	; 0x17
    21dc:	86 8b       	std	Z+22, r24	; 0x16
    21de:	08 95       	ret
    21e0:	ea e0       	ldi	r30, 0x0A	; 10
    21e2:	f2 e0       	ldi	r31, 0x02	; 2
    21e4:	95 8b       	std	Z+21, r25	; 0x15
    21e6:	84 8b       	std	Z+20, r24	; 0x14
    21e8:	77 8b       	std	Z+23, r23	; 0x17
    21ea:	66 8b       	std	Z+22, r22	; 0x16
    21ec:	08 95       	ret

000021ee <wizchip_sw_reset>:
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	62 97       	sbiw	r28, 0x12	; 18
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	26 e0       	ldi	r18, 0x06	; 6
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	ae 01       	movw	r20, r28
    2208:	43 5f       	subi	r20, 0xF3	; 243
    220a:	5f 4f       	sbci	r21, 0xFF	; 255
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	79 e0       	ldi	r23, 0x09	; 9
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	79 dc       	rcall	.-1806   	; 0x1b08 <WIZCHIP_READ_BUF>
    2216:	24 e0       	ldi	r18, 0x04	; 4
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	ae 01       	movw	r20, r28
    221c:	4f 5f       	subi	r20, 0xFF	; 255
    221e:	5f 4f       	sbci	r21, 0xFF	; 255
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	71 e0       	ldi	r23, 0x01	; 1
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	6f dc       	rcall	.-1826   	; 0x1b08 <WIZCHIP_READ_BUF>
    222a:	24 e0       	ldi	r18, 0x04	; 4
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	ae 01       	movw	r20, r28
    2230:	4b 5f       	subi	r20, 0xFB	; 251
    2232:	5f 4f       	sbci	r21, 0xFF	; 255
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	75 e0       	ldi	r23, 0x05	; 5
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	65 dc       	rcall	.-1846   	; 0x1b08 <WIZCHIP_READ_BUF>
    223e:	24 e0       	ldi	r18, 0x04	; 4
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	ae 01       	movw	r20, r28
    2244:	47 5f       	subi	r20, 0xF7	; 247
    2246:	5f 4f       	sbci	r21, 0xFF	; 255
    2248:	60 e0       	ldi	r22, 0x00	; 0
    224a:	7f e0       	ldi	r23, 0x0F	; 15
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	5b dc       	rcall	.-1866   	; 0x1b08 <WIZCHIP_READ_BUF>
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	cb 01       	movw	r24, r22
    225a:	e4 db       	rcall	.-2104   	; 0x1a24 <WIZCHIP_WRITE>
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	cb 01       	movw	r24, r22
    2262:	79 db       	rcall	.-2318   	; 0x1956 <WIZCHIP_READ>
    2264:	26 e0       	ldi	r18, 0x06	; 6
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	ae 01       	movw	r20, r28
    226a:	43 5f       	subi	r20, 0xF3	; 243
    226c:	5f 4f       	sbci	r21, 0xFF	; 255
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	79 e0       	ldi	r23, 0x09	; 9
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	ca dc       	rcall	.-1644   	; 0x1c0c <WIZCHIP_WRITE_BUF>
    2278:	24 e0       	ldi	r18, 0x04	; 4
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	ae 01       	movw	r20, r28
    227e:	4f 5f       	subi	r20, 0xFF	; 255
    2280:	5f 4f       	sbci	r21, 0xFF	; 255
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	71 e0       	ldi	r23, 0x01	; 1
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	c0 dc       	rcall	.-1664   	; 0x1c0c <WIZCHIP_WRITE_BUF>
    228c:	24 e0       	ldi	r18, 0x04	; 4
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	ae 01       	movw	r20, r28
    2292:	4b 5f       	subi	r20, 0xFB	; 251
    2294:	5f 4f       	sbci	r21, 0xFF	; 255
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	75 e0       	ldi	r23, 0x05	; 5
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	b6 dc       	rcall	.-1684   	; 0x1c0c <WIZCHIP_WRITE_BUF>
    22a0:	24 e0       	ldi	r18, 0x04	; 4
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	ae 01       	movw	r20, r28
    22a6:	47 5f       	subi	r20, 0xF7	; 247
    22a8:	5f 4f       	sbci	r21, 0xFF	; 255
    22aa:	60 e0       	ldi	r22, 0x00	; 0
    22ac:	7f e0       	ldi	r23, 0x0F	; 15
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	ac dc       	rcall	.-1704   	; 0x1c0c <WIZCHIP_WRITE_BUF>
    22b4:	62 96       	adiw	r28, 0x12	; 18
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	08 95       	ret

000022c6 <wizchip_init>:
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	ec 01       	movw	r28, r24
    22d2:	8b 01       	movw	r16, r22
    22d4:	8c df       	rcall	.-232    	; 0x21ee <wizchip_sw_reset>
    22d6:	20 97       	sbiw	r28, 0x00	; 0
    22d8:	69 f4       	brne	.+26     	; 0x22f4 <wizchip_init+0x2e>
    22da:	30 c0       	rjmp	.+96     	; 0x233c <wizchip_init+0x76>
    22dc:	fe 01       	movw	r30, r28
    22de:	e8 0f       	add	r30, r24
    22e0:	f1 1d       	adc	r31, r1
    22e2:	87 fd       	sbrc	r24, 7
    22e4:	fa 95       	dec	r31
    22e6:	20 81       	ld	r18, Z
    22e8:	92 0f       	add	r25, r18
    22ea:	91 31       	cpi	r25, 0x11	; 17
    22ec:	0c f0       	brlt	.+2      	; 0x22f0 <wizchip_init+0x2a>
    22ee:	5b c0       	rjmp	.+182    	; 0x23a6 <wizchip_init+0xe0>
    22f0:	8f 5f       	subi	r24, 0xFF	; 255
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <wizchip_init+0x32>
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	88 30       	cpi	r24, 0x08	; 8
    22fa:	84 f3       	brlt	.-32     	; 0x22dc <wizchip_init+0x16>
    22fc:	f1 2c       	mov	r15, r1
    22fe:	1b c0       	rjmp	.+54     	; 0x2336 <wizchip_init+0x70>
    2300:	6f 2d       	mov	r22, r15
    2302:	0f 2c       	mov	r0, r15
    2304:	00 0c       	add	r0, r0
    2306:	77 0b       	sbc	r23, r23
    2308:	fe 01       	movw	r30, r28
    230a:	e6 0f       	add	r30, r22
    230c:	f7 1f       	adc	r31, r23
    230e:	66 0f       	add	r22, r22
    2310:	77 1f       	adc	r23, r23
    2312:	66 0f       	add	r22, r22
    2314:	77 1f       	adc	r23, r23
    2316:	6f 5f       	subi	r22, 0xFF	; 255
    2318:	7f 4f       	sbci	r23, 0xFF	; 255
    231a:	66 0f       	add	r22, r22
    231c:	77 1f       	adc	r23, r23
    231e:	66 0f       	add	r22, r22
    2320:	77 1f       	adc	r23, r23
    2322:	66 0f       	add	r22, r22
    2324:	77 1f       	adc	r23, r23
    2326:	71 5e       	subi	r23, 0xE1	; 225
    2328:	07 2e       	mov	r0, r23
    232a:	00 0c       	add	r0, r0
    232c:	88 0b       	sbc	r24, r24
    232e:	99 0b       	sbc	r25, r25
    2330:	40 81       	ld	r20, Z
    2332:	78 db       	rcall	.-2320   	; 0x1a24 <WIZCHIP_WRITE>
    2334:	f3 94       	inc	r15
    2336:	87 e0       	ldi	r24, 0x07	; 7
    2338:	8f 15       	cp	r24, r15
    233a:	14 f7       	brge	.-60     	; 0x2300 <wizchip_init+0x3a>
    233c:	01 15       	cp	r16, r1
    233e:	11 05       	cpc	r17, r1
    2340:	69 f4       	brne	.+26     	; 0x235c <wizchip_init+0x96>
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	33 c0       	rjmp	.+102    	; 0x23ac <wizchip_init+0xe6>
    2346:	f8 01       	movw	r30, r16
    2348:	e8 0f       	add	r30, r24
    234a:	f1 1d       	adc	r31, r1
    234c:	87 fd       	sbrc	r24, 7
    234e:	fa 95       	dec	r31
    2350:	20 81       	ld	r18, Z
    2352:	92 0f       	add	r25, r18
    2354:	91 31       	cpi	r25, 0x11	; 17
    2356:	4c f5       	brge	.+82     	; 0x23aa <wizchip_init+0xe4>
    2358:	8f 5f       	subi	r24, 0xFF	; 255
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <wizchip_init+0x9a>
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	88 30       	cpi	r24, 0x08	; 8
    2362:	8c f3       	brlt	.-30     	; 0x2346 <wizchip_init+0x80>
    2364:	c0 e0       	ldi	r28, 0x00	; 0
    2366:	1b c0       	rjmp	.+54     	; 0x239e <wizchip_init+0xd8>
    2368:	6c 2f       	mov	r22, r28
    236a:	0c 2e       	mov	r0, r28
    236c:	00 0c       	add	r0, r0
    236e:	77 0b       	sbc	r23, r23
    2370:	f8 01       	movw	r30, r16
    2372:	e6 0f       	add	r30, r22
    2374:	f7 1f       	adc	r31, r23
    2376:	66 0f       	add	r22, r22
    2378:	77 1f       	adc	r23, r23
    237a:	66 0f       	add	r22, r22
    237c:	77 1f       	adc	r23, r23
    237e:	6f 5f       	subi	r22, 0xFF	; 255
    2380:	7f 4f       	sbci	r23, 0xFF	; 255
    2382:	66 0f       	add	r22, r22
    2384:	77 1f       	adc	r23, r23
    2386:	66 0f       	add	r22, r22
    2388:	77 1f       	adc	r23, r23
    238a:	66 0f       	add	r22, r22
    238c:	77 1f       	adc	r23, r23
    238e:	72 5e       	subi	r23, 0xE2	; 226
    2390:	07 2e       	mov	r0, r23
    2392:	00 0c       	add	r0, r0
    2394:	88 0b       	sbc	r24, r24
    2396:	99 0b       	sbc	r25, r25
    2398:	40 81       	ld	r20, Z
    239a:	44 db       	rcall	.-2424   	; 0x1a24 <WIZCHIP_WRITE>
    239c:	cf 5f       	subi	r28, 0xFF	; 255
    239e:	c8 30       	cpi	r28, 0x08	; 8
    23a0:	1c f3       	brlt	.-58     	; 0x2368 <wizchip_init+0xa2>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	03 c0       	rjmp	.+6      	; 0x23ac <wizchip_init+0xe6>
    23a6:	8f ef       	ldi	r24, 0xFF	; 255
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <wizchip_init+0xe6>
    23aa:	8f ef       	ldi	r24, 0xFF	; 255
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	ff 90       	pop	r15
    23b6:	08 95       	ret

000023b8 <wizchip_clrinterrupt>:
    23b8:	cf 93       	push	r28
    23ba:	c9 2f       	mov	r28, r25
    23bc:	48 2f       	mov	r20, r24
    23be:	40 7f       	andi	r20, 0xF0	; 240
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	75 e1       	ldi	r23, 0x15	; 21
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	2d db       	rcall	.-2470   	; 0x1a24 <WIZCHIP_WRITE>
    23ca:	4c 2f       	mov	r20, r28
    23cc:	60 e0       	ldi	r22, 0x00	; 0
    23ce:	77 e1       	ldi	r23, 0x17	; 23
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	27 db       	rcall	.-2482   	; 0x1a24 <WIZCHIP_WRITE>
    23d6:	cf 91       	pop	r28
    23d8:	08 95       	ret

000023da <wizchip_getinterrupt>:
    23da:	cf 93       	push	r28
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	75 e1       	ldi	r23, 0x15	; 21
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	b8 da       	rcall	.-2704   	; 0x1956 <WIZCHIP_READ>
    23e6:	c8 2f       	mov	r28, r24
    23e8:	c0 7f       	andi	r28, 0xF0	; 240
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	77 e1       	ldi	r23, 0x17	; 23
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	b1 da       	rcall	.-2718   	; 0x1956 <WIZCHIP_READ>
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	98 2f       	mov	r25, r24
    23f8:	88 27       	eor	r24, r24
    23fa:	8c 0f       	add	r24, r28
    23fc:	91 1d       	adc	r25, r1
    23fe:	cf 91       	pop	r28
    2400:	08 95       	ret

00002402 <wizchip_setinterruptmask>:
    2402:	cf 93       	push	r28
    2404:	c9 2f       	mov	r28, r25
    2406:	48 2f       	mov	r20, r24
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	76 e1       	ldi	r23, 0x16	; 22
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	09 db       	rcall	.-2542   	; 0x1a24 <WIZCHIP_WRITE>
    2412:	4c 2f       	mov	r20, r28
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	78 e1       	ldi	r23, 0x18	; 24
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	03 db       	rcall	.-2554   	; 0x1a24 <WIZCHIP_WRITE>
    241e:	cf 91       	pop	r28
    2420:	08 95       	ret

00002422 <wizchip_getinterruptmask>:
    2422:	cf 93       	push	r28
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	76 e1       	ldi	r23, 0x16	; 22
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	94 da       	rcall	.-2776   	; 0x1956 <WIZCHIP_READ>
    242e:	c8 2f       	mov	r28, r24
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	78 e1       	ldi	r23, 0x18	; 24
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	8e da       	rcall	.-2788   	; 0x1956 <WIZCHIP_READ>
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	98 2f       	mov	r25, r24
    243e:	88 27       	eor	r24, r24
    2440:	8c 0f       	add	r24, r28
    2442:	91 1d       	adc	r25, r1
    2444:	cf 91       	pop	r28
    2446:	08 95       	ret

00002448 <wizphy_getphylink>:
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	7e e2       	ldi	r23, 0x2E	; 46
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	82 da       	rcall	.-2812   	; 0x1956 <WIZCHIP_READ>
    2452:	80 fd       	sbrc	r24, 0
    2454:	02 c0       	rjmp	.+4      	; 0x245a <wizphy_getphylink+0x12>
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	08 95       	ret
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	08 95       	ret

0000245e <wizphy_getphypmode>:
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	7e e2       	ldi	r23, 0x2E	; 46
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	77 da       	rcall	.-2834   	; 0x1956 <WIZCHIP_READ>
    2468:	88 73       	andi	r24, 0x38	; 56
    246a:	80 33       	cpi	r24, 0x30	; 48
    246c:	11 f4       	brne	.+4      	; 0x2472 <wizphy_getphypmode+0x14>
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	08 95       	ret
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	08 95       	ret

00002476 <wizphy_reset>:
    2476:	60 e0       	ldi	r22, 0x00	; 0
    2478:	7e e2       	ldi	r23, 0x2E	; 46
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	6b da       	rcall	.-2858   	; 0x1956 <WIZCHIP_READ>
    2480:	48 2f       	mov	r20, r24
    2482:	4f 77       	andi	r20, 0x7F	; 127
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	7e e2       	ldi	r23, 0x2E	; 46
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	cb da       	rcall	.-2666   	; 0x1a24 <WIZCHIP_WRITE>
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	7e e2       	ldi	r23, 0x2E	; 46
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	5f da       	rcall	.-2882   	; 0x1956 <WIZCHIP_READ>
    2498:	48 2f       	mov	r20, r24
    249a:	40 68       	ori	r20, 0x80	; 128
    249c:	60 e0       	ldi	r22, 0x00	; 0
    249e:	7e e2       	ldi	r23, 0x2E	; 46
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	bf ca       	rjmp	.-2690   	; 0x1a24 <WIZCHIP_WRITE>
    24a6:	08 95       	ret

000024a8 <wizphy_setphyconf>:
    24a8:	fc 01       	movw	r30, r24
    24aa:	80 81       	ld	r24, Z
    24ac:	81 30       	cpi	r24, 0x01	; 1
    24ae:	11 f4       	brne	.+4      	; 0x24b4 <wizphy_setphyconf+0xc>
    24b0:	40 e4       	ldi	r20, 0x40	; 64
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <wizphy_setphyconf+0xe>
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	81 81       	ldd	r24, Z+1	; 0x01
    24b8:	81 30       	cpi	r24, 0x01	; 1
    24ba:	11 f4       	brne	.+4      	; 0x24c0 <wizphy_setphyconf+0x18>
    24bc:	48 63       	ori	r20, 0x38	; 56
    24be:	0e c0       	rjmp	.+28     	; 0x24dc <wizphy_setphyconf+0x34>
    24c0:	83 81       	ldd	r24, Z+3	; 0x03
    24c2:	81 30       	cpi	r24, 0x01	; 1
    24c4:	39 f4       	brne	.+14     	; 0x24d4 <wizphy_setphyconf+0x2c>
    24c6:	82 81       	ldd	r24, Z+2	; 0x02
    24c8:	81 30       	cpi	r24, 0x01	; 1
    24ca:	11 f4       	brne	.+4      	; 0x24d0 <wizphy_setphyconf+0x28>
    24cc:	48 61       	ori	r20, 0x18	; 24
    24ce:	06 c0       	rjmp	.+12     	; 0x24dc <wizphy_setphyconf+0x34>
    24d0:	48 60       	ori	r20, 0x08	; 8
    24d2:	04 c0       	rjmp	.+8      	; 0x24dc <wizphy_setphyconf+0x34>
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	81 30       	cpi	r24, 0x01	; 1
    24d8:	09 f4       	brne	.+2      	; 0x24dc <wizphy_setphyconf+0x34>
    24da:	40 61       	ori	r20, 0x10	; 16
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	7e e2       	ldi	r23, 0x2E	; 46
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9f da       	rcall	.-2754   	; 0x1a24 <WIZCHIP_WRITE>
    24e6:	c7 cf       	rjmp	.-114    	; 0x2476 <wizphy_reset>
    24e8:	08 95       	ret

000024ea <wizphy_getphyconf>:
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	ec 01       	movw	r28, r24
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	7e e2       	ldi	r23, 0x2E	; 46
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	2e da       	rcall	.-2980   	; 0x1956 <WIZCHIP_READ>
    24fa:	86 fb       	bst	r24, 6
    24fc:	99 27       	eor	r25, r25
    24fe:	90 f9       	bld	r25, 0
    2500:	98 83       	st	Y, r25
    2502:	88 73       	andi	r24, 0x38	; 56
    2504:	80 32       	cpi	r24, 0x20	; 32
    2506:	11 f0       	breq	.+4      	; 0x250c <wizphy_getphyconf+0x22>
    2508:	88 33       	cpi	r24, 0x38	; 56
    250a:	19 f4       	brne	.+6      	; 0x2512 <wizphy_getphyconf+0x28>
    250c:	91 e0       	ldi	r25, 0x01	; 1
    250e:	99 83       	std	Y+1, r25	; 0x01
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <wizphy_getphyconf+0x2a>
    2512:	19 82       	std	Y+1, r1	; 0x01
    2514:	88 31       	cpi	r24, 0x18	; 24
    2516:	21 f0       	breq	.+8      	; 0x2520 <wizphy_getphyconf+0x36>
    2518:	80 32       	cpi	r24, 0x20	; 32
    251a:	11 f0       	breq	.+4      	; 0x2520 <wizphy_getphyconf+0x36>
    251c:	80 31       	cpi	r24, 0x10	; 16
    251e:	19 f4       	brne	.+6      	; 0x2526 <wizphy_getphyconf+0x3c>
    2520:	91 e0       	ldi	r25, 0x01	; 1
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <wizphy_getphyconf+0x3e>
    2526:	1a 82       	std	Y+2, r1	; 0x02
    2528:	88 31       	cpi	r24, 0x18	; 24
    252a:	21 f0       	breq	.+8      	; 0x2534 <wizphy_getphyconf+0x4a>
    252c:	80 32       	cpi	r24, 0x20	; 32
    252e:	11 f0       	breq	.+4      	; 0x2534 <wizphy_getphyconf+0x4a>
    2530:	88 30       	cpi	r24, 0x08	; 8
    2532:	19 f4       	brne	.+6      	; 0x253a <wizphy_getphyconf+0x50>
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	8b 83       	std	Y+3, r24	; 0x03
    2538:	01 c0       	rjmp	.+2      	; 0x253c <wizphy_getphyconf+0x52>
    253a:	1b 82       	std	Y+3, r1	; 0x03
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	08 95       	ret

00002542 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
    2542:	cf 93       	push	r28
    2544:	c8 2f       	mov	r28, r24
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
    2546:	60 e0       	ldi	r22, 0x00	; 0
    2548:	7e e2       	ldi	r23, 0x2E	; 46
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	03 da       	rcall	.-3066   	; 0x1956 <WIZCHIP_READ>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    2550:	86 ff       	sbrs	r24, 6
    2552:	1d c0       	rjmp	.+58     	; 0x258e <wizphy_setphypmode+0x4c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
    2554:	87 7c       	andi	r24, 0xC7	; 199
   if( pmode == PHY_POWER_DOWN)
    2556:	c1 30       	cpi	r28, 0x01	; 1
    2558:	19 f4       	brne	.+6      	; 0x2560 <wizphy_setphypmode+0x1e>
      tmp |= PHYCFGR_OPMDC_PDOWN;
    255a:	48 2f       	mov	r20, r24
    255c:	40 63       	ori	r20, 0x30	; 48
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <wizphy_setphypmode+0x22>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
    2560:	48 2f       	mov	r20, r24
    2562:	48 63       	ori	r20, 0x38	; 56
   setPHYCFGR(tmp);
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	7e e2       	ldi	r23, 0x2E	; 46
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	90 e0       	ldi	r25, 0x00	; 0
   wizphy_reset();
    256c:	5b da       	rcall	.-2890   	; 0x1a24 <WIZCHIP_WRITE>
    256e:	83 df       	rcall	.-250    	; 0x2476 <wizphy_reset>
   tmp = getPHYCFGR();
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	7e e2       	ldi	r23, 0x2E	; 46
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	ee d9       	rcall	.-3108   	; 0x1956 <WIZCHIP_READ>
   if( pmode == PHY_POWER_DOWN)
    257a:	c1 30       	cpi	r28, 0x01	; 1
    257c:	21 f4       	brne	.+8      	; 0x2586 <wizphy_setphypmode+0x44>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    257e:	80 73       	andi	r24, 0x30	; 48
    2580:	41 f4       	brne	.+16     	; 0x2592 <wizphy_setphypmode+0x50>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
   }
   return -1;
    2582:	8f ef       	ldi	r24, 0xFF	; 255
    2584:	09 c0       	rjmp	.+18     	; 0x2598 <wizphy_setphypmode+0x56>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    2586:	88 73       	andi	r24, 0x38	; 56
    2588:	31 f4       	brne	.+12     	; 0x2596 <wizphy_setphypmode+0x54>
   }
   return -1;
    258a:	8f ef       	ldi	r24, 0xFF	; 255
    258c:	05 c0       	rjmp	.+10     	; 0x2598 <wizphy_setphypmode+0x56>

int8_t wizphy_setphypmode(uint8_t pmode)
{
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    258e:	8f ef       	ldi	r24, 0xFF	; 255
    2590:	03 c0       	rjmp	.+6      	; 0x2598 <wizphy_setphypmode+0x56>
   setPHYCFGR(tmp);
   wizphy_reset();
   tmp = getPHYCFGR();
   if( pmode == PHY_POWER_DOWN)
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <wizphy_setphypmode+0x56>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    2596:	80 e0       	ldi	r24, 0x00	; 0
   }
   return -1;
}
    2598:	cf 91       	pop	r28
    259a:	08 95       	ret

0000259c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
    259c:	0f 93       	push	r16
    259e:	1f 93       	push	r17
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
    25a4:	00 e0       	ldi	r16, 0x00	; 0
    25a6:	10 e0       	ldi	r17, 0x00	; 0
    25a8:	98 01       	movw	r18, r16
   switch(cwtype)
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	80 31       	cpi	r24, 0x10	; 16
    25ae:	91 05       	cpc	r25, r1
    25b0:	40 f4       	brcc	.+16     	; 0x25c2 <ctlwizchip+0x26>
    25b2:	eb 01       	movw	r28, r22
    25b4:	fc 01       	movw	r30, r24
    25b6:	88 27       	eor	r24, r24
    25b8:	e6 56       	subi	r30, 0x66	; 102
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	8f 4f       	sbci	r24, 0xFF	; 255
    25be:	0c 94 0d 23 	jmp	0x461a	; 0x461a <__tablejump2__>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
    25c2:	8f ef       	ldi	r24, 0xFF	; 255
    25c4:	71 c0       	rjmp	.+226    	; 0x26a8 <ctlwizchip+0x10c>
#endif
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
    25c6:	13 de       	rcall	.-986    	; 0x21ee <wizchip_sw_reset>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    25c8:	80 e0       	ldi	r24, 0x00	; 0
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
         break;
    25ca:	6e c0       	rjmp	.+220    	; 0x26a8 <ctlwizchip+0x10c>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
    25cc:	cd 2b       	or	r28, r29
    25ce:	21 f0       	breq	.+8      	; 0x25d8 <ctlwizchip+0x3c>
         {
            ptmp[0] = (uint8_t*)arg;
    25d0:	8b 01       	movw	r16, r22
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
    25d2:	9b 01       	movw	r18, r22
    25d4:	28 5f       	subi	r18, 0xF8	; 248
    25d6:	3f 4f       	sbci	r19, 0xFF	; 255
         }
         return wizchip_init(ptmp[0], ptmp[1]);
    25d8:	b9 01       	movw	r22, r18
    25da:	c8 01       	movw	r24, r16
    25dc:	74 de       	rcall	.-792    	; 0x22c6 <wizchip_init>
    25de:	64 c0       	rjmp	.+200    	; 0x26a8 <ctlwizchip+0x10c>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
    25e0:	88 81       	ld	r24, Y
    25e2:	99 81       	ldd	r25, Y+1	; 0x01
    25e4:	e9 de       	rcall	.-558    	; 0x23b8 <wizchip_clrinterrupt>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    25e6:	80 e0       	ldi	r24, 0x00	; 0
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
         }
         return wizchip_init(ptmp[0], ptmp[1]);
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
         break;
    25e8:	5f c0       	rjmp	.+190    	; 0x26a8 <ctlwizchip+0x10c>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
    25ea:	f7 de       	rcall	.-530    	; 0x23da <wizchip_getinterrupt>
    25ec:	99 83       	std	Y+1, r25	; 0x01
    25ee:	88 83       	st	Y, r24
    25f0:	80 e0       	ldi	r24, 0x00	; 0
         break;
    25f2:	5a c0       	rjmp	.+180    	; 0x26a8 <ctlwizchip+0x10c>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
    25f4:	88 81       	ld	r24, Y
    25f6:	99 81       	ldd	r25, Y+1	; 0x01
    25f8:	04 df       	rcall	.-504    	; 0x2402 <wizchip_setinterruptmask>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    25fa:	80 e0       	ldi	r24, 0x00	; 0
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
         break;
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
         break;         
    25fc:	55 c0       	rjmp	.+170    	; 0x26a8 <ctlwizchip+0x10c>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
    25fe:	11 df       	rcall	.-478    	; 0x2422 <wizchip_getinterruptmask>
    2600:	99 83       	std	Y+1, r25	; 0x01
    2602:	88 83       	st	Y, r24
    2604:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    2606:	50 c0       	rjmp	.+160    	; 0x26a8 <ctlwizchip+0x10c>
         break;
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
    2608:	49 81       	ldd	r20, Y+1	; 0x01
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	73 e1       	ldi	r23, 0x13	; 19
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	08 da       	rcall	.-3056   	; 0x1a24 <WIZCHIP_WRITE>
    2614:	48 81       	ld	r20, Y
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	74 e1       	ldi	r23, 0x14	; 20
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	02 da       	rcall	.-3068   	; 0x1a24 <WIZCHIP_WRITE>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    2620:	80 e0       	ldi	r24, 0x00	; 0
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
         break;
    2622:	42 c0       	rjmp	.+132    	; 0x26a8 <ctlwizchip+0x10c>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
    2624:	60 e0       	ldi	r22, 0x00	; 0
    2626:	73 e1       	ldi	r23, 0x13	; 19
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	94 d9       	rcall	.-3288   	; 0x1956 <WIZCHIP_READ>
    262e:	08 2f       	mov	r16, r24
    2630:	10 e0       	ldi	r17, 0x00	; 0
    2632:	10 2f       	mov	r17, r16
    2634:	00 27       	eor	r16, r16
    2636:	60 e0       	ldi	r22, 0x00	; 0
    2638:	74 e1       	ldi	r23, 0x14	; 20
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	8b d9       	rcall	.-3306   	; 0x1956 <WIZCHIP_READ>
    2640:	08 0f       	add	r16, r24
    2642:	11 1d       	adc	r17, r1
    2644:	19 83       	std	Y+1, r17	; 0x01
    2646:	08 83       	st	Y, r16
    2648:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    264a:	2e c0       	rjmp	.+92     	; 0x26a8 <ctlwizchip+0x10c>
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
         break;
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
    264c:	ea e0       	ldi	r30, 0x0A	; 10
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
    264e:	f2 e0       	ldi	r31, 0x02	; 2
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	88 83       	st	Y, r24
    2654:	83 81       	ldd	r24, Z+3	; 0x03
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
    2656:	89 83       	std	Y+1, r24	; 0x01
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
    2658:	84 81       	ldd	r24, Z+4	; 0x04
    265a:	8a 83       	std	Y+2, r24	; 0x02
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
    265c:	85 81       	ldd	r24, Z+5	; 0x05
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
    265e:	8b 83       	std	Y+3, r24	; 0x03
    2660:	86 81       	ldd	r24, Z+6	; 0x06
         ((uint8_t*)arg)[5] = 0;
    2662:	8c 83       	std	Y+4, r24	; 0x04
         break;
    2664:	1d 82       	std	Y+5, r1	; 0x05
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	1f c0       	rjmp	.+62     	; 0x26a8 <ctlwizchip+0x10c>
         break;
    266a:	05 df       	rcall	.-502    	; 0x2476 <wizphy_reset>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	1c c0       	rjmp	.+56     	; 0x26a8 <ctlwizchip+0x10c>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    2670:	cb 01       	movw	r24, r22
      case CW_RESET_PHY:
         wizphy_reset();
         break;
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
         break;
    2672:	1a df       	rcall	.-460    	; 0x24a8 <wizphy_setphyconf>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	18 c0       	rjmp	.+48     	; 0x26a8 <ctlwizchip+0x10c>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    2678:	cb 01       	movw	r24, r22
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
         break;
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
         break;
    267a:	37 df       	rcall	.-402    	; 0x24ea <wizphy_getphyconf>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	14 c0       	rjmp	.+40     	; 0x26a8 <ctlwizchip+0x10c>
    2680:	88 81       	ld	r24, Y
    2682:	5f df       	rcall	.-322    	; 0x2542 <wizphy_setphypmode>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
    2684:	11 c0       	rjmp	.+34     	; 0x26a8 <ctlwizchip+0x10c>
    2686:	eb de       	rcall	.-554    	; 0x245e <wizphy_getphypmode>
         if((int8_t)tmp == -1) return -1;
    2688:	8f 3f       	cpi	r24, 0xFF	; 255
    268a:	59 f0       	breq	.+22     	; 0x26a2 <ctlwizchip+0x106>
         *(uint8_t*)arg = tmp;
    268c:	88 83       	st	Y, r24
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    268e:	80 e0       	ldi	r24, 0x00	; 0
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
    2690:	0b c0       	rjmp	.+22     	; 0x26a8 <ctlwizchip+0x10c>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
    2692:	da de       	rcall	.-588    	; 0x2448 <wizphy_getphylink>
    2694:	8f 3f       	cpi	r24, 0xFF	; 255
         if((int8_t)tmp == -1) return -1;
    2696:	39 f0       	breq	.+14     	; 0x26a6 <ctlwizchip+0x10a>
    2698:	88 83       	st	Y, r24
         *(uint8_t*)arg = tmp;
    269a:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    269c:	05 c0       	rjmp	.+10     	; 0x26a8 <ctlwizchip+0x10c>
         break;
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
    269e:	80 e0       	ldi	r24, 0x00	; 0
   #endif      
      default:
         return -1;
   }
   return 0;
    26a0:	03 c0       	rjmp	.+6      	; 0x26a8 <ctlwizchip+0x10c>
    26a2:	8f ef       	ldi	r24, 0xFF	; 255
         return wizphy_setphypmode(*(uint8_t*)arg);
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
         if((int8_t)tmp == -1) return -1;
    26a4:	01 c0       	rjmp	.+2      	; 0x26a8 <ctlwizchip+0x10c>
    26a6:	8f ef       	ldi	r24, 0xFF	; 255
         *(uint8_t*)arg = tmp;
         break;
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
         if((int8_t)tmp == -1) return -1;
    26a8:	df 91       	pop	r29
   #endif      
      default:
         return -1;
   }
   return 0;
}
    26aa:	cf 91       	pop	r28
    26ac:	1f 91       	pop	r17
    26ae:	0f 91       	pop	r16
    26b0:	08 95       	ret

000026b2 <wizchip_setnetinfo>:
    26b2:	cf 93       	push	r28
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    26b4:	df 93       	push	r29
    26b6:	ec 01       	movw	r28, r24
   setSHAR(pnetinfo->mac);
    26b8:	26 e0       	ldi	r18, 0x06	; 6
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	ac 01       	movw	r20, r24
    26be:	60 e0       	ldi	r22, 0x00	; 0
    26c0:	79 e0       	ldi	r23, 0x09	; 9
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a2 da       	rcall	.-2748   	; 0x1c0c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
    26c8:	ae 01       	movw	r20, r28
    26ca:	42 5f       	subi	r20, 0xF2	; 242
    26cc:	5f 4f       	sbci	r21, 0xFF	; 255
    26ce:	24 e0       	ldi	r18, 0x04	; 4
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	71 e0       	ldi	r23, 0x01	; 1
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	98 da       	rcall	.-2768   	; 0x1c0c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
    26dc:	ae 01       	movw	r20, r28
    26de:	46 5f       	subi	r20, 0xF6	; 246
    26e0:	5f 4f       	sbci	r21, 0xFF	; 255
    26e2:	24 e0       	ldi	r18, 0x04	; 4
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	75 e0       	ldi	r23, 0x05	; 5
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	8e da       	rcall	.-2788   	; 0x1c0c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
    26f0:	ae 01       	movw	r20, r28
    26f2:	4a 5f       	subi	r20, 0xFA	; 250
    26f4:	5f 4f       	sbci	r21, 0xFF	; 255
    26f6:	24 e0       	ldi	r18, 0x04	; 4
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	7f e0       	ldi	r23, 0x0F	; 15
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	84 da       	rcall	.-2808   	; 0x1c0c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
    2704:	8a 89       	ldd	r24, Y+18	; 0x12
    2706:	ed e5       	ldi	r30, 0x5D	; 93
    2708:	f4 e0       	ldi	r31, 0x04	; 4
    270a:	80 83       	st	Z, r24
   _DNS_[1] = pnetinfo->dns[1];
    270c:	8b 89       	ldd	r24, Y+19	; 0x13
    270e:	81 83       	std	Z+1, r24	; 0x01
   _DNS_[2] = pnetinfo->dns[2];
    2710:	8c 89       	ldd	r24, Y+20	; 0x14
    2712:	82 83       	std	Z+2, r24	; 0x02
   _DNS_[3] = pnetinfo->dns[3];
    2714:	8d 89       	ldd	r24, Y+21	; 0x15
    2716:	83 83       	std	Z+3, r24	; 0x03
   _DHCP_   = pnetinfo->dhcp;
    2718:	8e 89       	ldd	r24, Y+22	; 0x16
    271a:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <_DHCP_>
}
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	08 95       	ret

00002724 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
    2724:	cf 93       	push	r28
    2726:	df 93       	push	r29
    2728:	ec 01       	movw	r28, r24
   getSHAR(pnetinfo->mac);
    272a:	26 e0       	ldi	r18, 0x06	; 6
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	ac 01       	movw	r20, r24
    2730:	60 e0       	ldi	r22, 0x00	; 0
    2732:	79 e0       	ldi	r23, 0x09	; 9
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	e7 d9       	rcall	.-3122   	; 0x1b08 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
    273a:	ae 01       	movw	r20, r28
    273c:	42 5f       	subi	r20, 0xF2	; 242
    273e:	5f 4f       	sbci	r21, 0xFF	; 255
    2740:	24 e0       	ldi	r18, 0x04	; 4
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	71 e0       	ldi	r23, 0x01	; 1
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	dd d9       	rcall	.-3142   	; 0x1b08 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
    274e:	ae 01       	movw	r20, r28
    2750:	46 5f       	subi	r20, 0xF6	; 246
    2752:	5f 4f       	sbci	r21, 0xFF	; 255
    2754:	24 e0       	ldi	r18, 0x04	; 4
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	60 e0       	ldi	r22, 0x00	; 0
    275a:	75 e0       	ldi	r23, 0x05	; 5
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	d3 d9       	rcall	.-3162   	; 0x1b08 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
    2762:	ae 01       	movw	r20, r28
    2764:	4a 5f       	subi	r20, 0xFA	; 250
    2766:	5f 4f       	sbci	r21, 0xFF	; 255
    2768:	24 e0       	ldi	r18, 0x04	; 4
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	60 e0       	ldi	r22, 0x00	; 0
    276e:	7f e0       	ldi	r23, 0x0F	; 15
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	c9 d9       	rcall	.-3182   	; 0x1b08 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
    2776:	ed e5       	ldi	r30, 0x5D	; 93
    2778:	f4 e0       	ldi	r31, 0x04	; 4
    277a:	80 81       	ld	r24, Z
    277c:	8a 8b       	std	Y+18, r24	; 0x12
   pnetinfo->dns[1]= _DNS_[1];
    277e:	81 81       	ldd	r24, Z+1	; 0x01
    2780:	8b 8b       	std	Y+19, r24	; 0x13
   pnetinfo->dns[2]= _DNS_[2];
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	8c 8b       	std	Y+20, r24	; 0x14
   pnetinfo->dns[3]= _DNS_[3];
    2786:	83 81       	ldd	r24, Z+3	; 0x03
    2788:	8d 8b       	std	Y+21, r24	; 0x15
   pnetinfo->dhcp  = _DHCP_;
    278a:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <_DHCP_>
    278e:	8e 8b       	std	Y+22, r24	; 0x16
}
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	08 95       	ret

00002796 <appDataConf>:
	//appUartBufferPtr = 0;
	appDataReqBusy = true;
}
void appDataConf(NWK_DataReq_t *req){
		
		appDataReqBusy = false;
    2796:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <appDataReqBusy>
    279a:	08 95       	ret

0000279c <appTimerHandler>:
	}

	SYS_TimerStop(&appTimer);
	SYS_TimerStart(&appTimer);
}
void appTimerHandler(SYS_Timer_t *timer){
    279c:	08 95       	ret

0000279e <appDataInd_ACK>:
	
	
	return true;
}
bool appDataInd_ACK(NWK_DataInd_t *ind)
{
    279e:	0f 93       	push	r16
    27a0:	1f 93       	push	r17
    27a2:	cf 93       	push	r28
    27a4:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; i < ind->size; i++)
    27a6:	c0 e0       	ldi	r28, 0x00	; 0
    27a8:	0a c0       	rjmp	.+20     	; 0x27be <appDataInd_ACK+0x20>
	HAL_UartWriteByte(ind->data[i]);
    27aa:	d8 01       	movw	r26, r16
    27ac:	17 96       	adiw	r26, 0x07	; 7
    27ae:	ed 91       	ld	r30, X+
    27b0:	fc 91       	ld	r31, X
    27b2:	18 97       	sbiw	r26, 0x08	; 8
    27b4:	ec 0f       	add	r30, r28
    27b6:	f1 1d       	adc	r31, r1
    27b8:	80 81       	ld	r24, Z
    27ba:	9f d3       	rcall	.+1854   	; 0x2efa <HAL_UartWriteByte>
	
	return true;
}
bool appDataInd_ACK(NWK_DataInd_t *ind)
{
	for (uint8_t i = 0; i < ind->size; i++)
    27bc:	cf 5f       	subi	r28, 0xFF	; 255
    27be:	f8 01       	movw	r30, r16
    27c0:	81 85       	ldd	r24, Z+9	; 0x09
    27c2:	c8 17       	cp	r28, r24
    27c4:	90 f3       	brcs	.-28     	; 0x27aa <appDataInd_ACK+0xc>
	HAL_UartWriteByte(ind->data[i]);
	return true;
}
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	cf 91       	pop	r28
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	08 95       	ret

000027d0 <sendOK>:
static uint8_t appDataReqBuffer[APP_BUFFER_SIZE];
static uint8_t appUartBuffer[APP_BUFFER_SIZE];
static uint8_t appUartBufferPtr = 0;

void sendOK(int16_t odesilatel){
	if (appDataReqBusy)
    27d0:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <appDataReqBusy>
    27d4:	21 11       	cpse	r18, r1
    27d6:	20 c0       	rjmp	.+64     	; 0x2818 <sendOK+0x48>
	return;
	static char text[]="OK";
	
	memcpy(appDataReqBuffer, text,sizeof(appDataReqBuffer));
    27d8:	2d e6       	ldi	r18, 0x6D	; 109
    27da:	e5 e9       	ldi	r30, 0x95	; 149
    27dc:	f3 e0       	ldi	r31, 0x03	; 3
    27de:	a2 e6       	ldi	r26, 0x62	; 98
    27e0:	b4 e0       	ldi	r27, 0x04	; 4
    27e2:	01 90       	ld	r0, Z+
    27e4:	0d 92       	st	X+, r0
    27e6:	2a 95       	dec	r18
    27e8:	e1 f7       	brne	.-8      	; 0x27e2 <sendOK+0x12>
	

	appDataReq.dstAddr = odesilatel;
    27ea:	e0 ed       	ldi	r30, 0xD0	; 208
    27ec:	f4 e0       	ldi	r31, 0x04	; 4
    27ee:	96 83       	std	Z+6, r25	; 0x06
    27f0:	85 83       	std	Z+5, r24	; 0x05
	appDataReq.dstEndpoint = APP_ENDPOINT_ACK;
    27f2:	82 e0       	ldi	r24, 0x02	; 2
    27f4:	87 83       	std	Z+7, r24	; 0x07
	appDataReq.srcEndpoint = APP_ENDPOINT_ACK;
    27f6:	80 87       	std	Z+8, r24	; 0x08
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    27f8:	81 87       	std	Z+9, r24	; 0x09
	appDataReq.data = appDataReqBuffer;
    27fa:	82 e6       	ldi	r24, 0x62	; 98
    27fc:	94 e0       	ldi	r25, 0x04	; 4
    27fe:	93 87       	std	Z+11, r25	; 0x0b
    2800:	82 87       	std	Z+10, r24	; 0x0a
	appDataReq.size = sizeof(text);
    2802:	83 e0       	ldi	r24, 0x03	; 3
    2804:	84 87       	std	Z+12, r24	; 0x0c
	appDataReq.confirm = appDataConf;
    2806:	8b ec       	ldi	r24, 0xCB	; 203
    2808:	93 e1       	ldi	r25, 0x13	; 19
    280a:	96 87       	std	Z+14, r25	; 0x0e
    280c:	85 87       	std	Z+13, r24	; 0x0d
	NWK_DataReq(&appDataReq);
    280e:	cf 01       	movw	r24, r30
    2810:	5b d5       	rcall	.+2742   	; 0x32c8 <NWK_DataReq>

	//appUartBufferPtr = 0;
	appDataReqBusy = true;
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <appDataReqBusy>
    2818:	08 95       	ret

0000281a <appDataInd>:
}
void appTimerHandler(SYS_Timer_t *timer){

	(void)timer;
}
bool appDataInd(NWK_DataInd_t *ind){
    281a:	0f 93       	push	r16
    281c:	1f 93       	push	r17
    281e:	cf 93       	push	r28
    2820:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; i < ind->size; i++){
    2822:	c0 e0       	ldi	r28, 0x00	; 0
    2824:	0a c0       	rjmp	.+20     	; 0x283a <appDataInd+0x20>
		HAL_UartWriteByte(ind->data[i]);
    2826:	d8 01       	movw	r26, r16
    2828:	17 96       	adiw	r26, 0x07	; 7
    282a:	ed 91       	ld	r30, X+
    282c:	fc 91       	ld	r31, X
    282e:	18 97       	sbiw	r26, 0x08	; 8
    2830:	ec 0f       	add	r30, r28
    2832:	f1 1d       	adc	r31, r1
    2834:	80 81       	ld	r24, Z
    2836:	61 d3       	rcall	.+1730   	; 0x2efa <HAL_UartWriteByte>
void appTimerHandler(SYS_Timer_t *timer){

	(void)timer;
}
bool appDataInd(NWK_DataInd_t *ind){
	for (uint8_t i = 0; i < ind->size; i++){
    2838:	cf 5f       	subi	r28, 0xFF	; 255
    283a:	f8 01       	movw	r30, r16
    283c:	81 85       	ldd	r24, Z+9	; 0x09
    283e:	c8 17       	cp	r28, r24
    2840:	90 f3       	brcs	.-28     	; 0x2826 <appDataInd+0xc>
		HAL_UartWriteByte(ind->data[i]);
	}
	sendOK(ind->srcAddr);
    2842:	80 81       	ld	r24, Z
    2844:	91 81       	ldd	r25, Z+1	; 0x01
    2846:	c4 df       	rcall	.-120    	; 0x27d0 <sendOK>
	
	
	return true;
}
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	cf 91       	pop	r28
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	08 95       	ret

00002852 <HAL_UartBytesReceived>:
void appDataConf(NWK_DataReq_t *req){
		
		appDataReqBusy = false;
		(void)req;
}
void HAL_UartBytesReceived(uint16_t bytes){
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	8c 01       	movw	r16, r24
	for (uint16_t i = 0; i < bytes; i++)
    285c:	c0 e0       	ldi	r28, 0x00	; 0
    285e:	d0 e0       	ldi	r29, 0x00	; 0
    2860:	10 c0       	rjmp	.+32     	; 0x2882 <HAL_UartBytesReceived+0x30>
	{
		uint8_t byte = HAL_UartReadByte();
    2862:	72 d3       	rcall	.+1764   	; 0x2f48 <HAL_UartReadByte>

		if (appUartBufferPtr == sizeof(appUartBuffer)){
    2864:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <appUartBufferPtr>
    2868:	8d 36       	cpi	r24, 0x6D	; 109
    286a:	19 f4       	brne	.+6      	; 0x2872 <HAL_UartBytesReceived+0x20>
			//appSendData();
			sendOK(1); // zadat adresu
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	af df       	rcall	.-162    	; 0x27d0 <sendOK>
		}
		if (appUartBufferPtr < sizeof(appUartBuffer))
    2872:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <appUartBufferPtr>
    2876:	8d 36       	cpi	r24, 0x6D	; 109
    2878:	18 f4       	brcc	.+6      	; 0x2880 <HAL_UartBytesReceived+0x2e>
		appUartBuffer[appUartBufferPtr++] = byte;
    287a:	8f 5f       	subi	r24, 0xFF	; 255
    287c:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <appUartBufferPtr>
		
		appDataReqBusy = false;
		(void)req;
}
void HAL_UartBytesReceived(uint16_t bytes){
	for (uint16_t i = 0; i < bytes; i++)
    2880:	21 96       	adiw	r28, 0x01	; 1
    2882:	c0 17       	cp	r28, r16
    2884:	d1 07       	cpc	r29, r17
    2886:	68 f3       	brcs	.-38     	; 0x2862 <HAL_UartBytesReceived+0x10>
		}
		if (appUartBufferPtr < sizeof(appUartBuffer))
		appUartBuffer[appUartBufferPtr++] = byte;
	}

	SYS_TimerStop(&appTimer);
    2888:	81 ee       	ldi	r24, 0xE1	; 225
    288a:	94 e0       	ldi	r25, 0x04	; 4
    288c:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <SYS_TimerStop>
	SYS_TimerStart(&appTimer);
    2890:	81 ee       	ldi	r24, 0xE1	; 225
    2892:	94 e0       	ldi	r25, 0x04	; 4
    2894:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_TimerStart>
}
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	1f 91       	pop	r17
    289e:	0f 91       	pop	r16
    28a0:	08 95       	ret

000028a2 <appInit>:
	HAL_UartWriteByte(ind->data[i]);
	return true;
}

void appInit(void){
	NWK_SetAddr(APP_ADDR);
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	48 d4       	rcall	.+2192   	; 0x3138 <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
    28a8:	86 e9       	ldi	r24, 0x96	; 150
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	4c d4       	rcall	.+2200   	; 0x3146 <NWK_SetPanId>
	PHY_SetChannel(APP_CHANNEL);
    28ae:	8f e0       	ldi	r24, 0x0F	; 15
    28b0:	0e 94 c5 20 	call	0x418a	; 0x418a <PHY_SetChannel>
	#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
	#endif
	PHY_SetRxState(true);
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	0e 94 c1 20 	call	0x4182	; 0x4182 <PHY_SetRxState>

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    28ba:	6d e0       	ldi	r22, 0x0D	; 13
    28bc:	74 e1       	ldi	r23, 0x14	; 20
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	49 d4       	rcall	.+2194   	; 0x3154 <NWK_OpenEndpoint>
	NWK_OpenEndpoint(APP_ENDPOINT_ACK, appDataInd_ACK);
    28c2:	6f ec       	ldi	r22, 0xCF	; 207
    28c4:	73 e1       	ldi	r23, 0x13	; 19
    28c6:	82 e0       	ldi	r24, 0x02	; 2
    28c8:	45 d4       	rcall	.+2186   	; 0x3154 <NWK_OpenEndpoint>

	HAL_BoardInit();

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    28ca:	e1 ee       	ldi	r30, 0xE1	; 225
    28cc:	f4 e0       	ldi	r31, 0x04	; 4
    28ce:	84 e1       	ldi	r24, 0x14	; 20
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	a0 e0       	ldi	r26, 0x00	; 0
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	86 83       	std	Z+6, r24	; 0x06
    28d8:	97 83       	std	Z+7, r25	; 0x07
    28da:	a0 87       	std	Z+8, r26	; 0x08
    28dc:	b1 87       	std	Z+9, r27	; 0x09
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
    28de:	12 86       	std	Z+10, r1	; 0x0a
	appTimer.handler = appTimerHandler;
    28e0:	8e ec       	ldi	r24, 0xCE	; 206
    28e2:	93 e1       	ldi	r25, 0x13	; 19
    28e4:	94 87       	std	Z+12, r25	; 0x0c
    28e6:	83 87       	std	Z+11, r24	; 0x0b
    28e8:	08 95       	ret

000028ea <APP_TaskHandler>:
}
void APP_TaskHandler(void){
	switch(appState){
    28ea:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <appState>
    28ee:	81 11       	cpse	r24, r1
    28f0:	04 c0       	rjmp	.+8      	; 0x28fa <APP_TaskHandler+0x10>
	case APP_STATE_INITIAL:
	{
		appInit();
    28f2:	d7 df       	rcall	.-82     	; 0x28a2 <appInit>
		appState = APP_STATE_IDLE;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <appState>
    28fa:	08 95       	ret

000028fc <freeRam>:
//Wiznet FUNC headers
void print_network_information(void);

// RAM Memory usage test
static int freeRam (void)
{
    28fc:	cf 93       	push	r28
    28fe:	df 93       	push	r29
    2900:	1f 92       	push	r1
    2902:	1f 92       	push	r1
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
	extern int __heap_start, *__brkval;
	int v;
	int _res = (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
    2908:	80 91 71 1b 	lds	r24, 0x1B71	; 0x801b71 <__brkval>
    290c:	90 91 72 1b 	lds	r25, 0x1B72	; 0x801b72 <__brkval+0x1>
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	11 f0       	breq	.+4      	; 0x2918 <freeRam+0x1c>
    2914:	9c 01       	movw	r18, r24
    2916:	02 c0       	rjmp	.+4      	; 0x291c <freeRam+0x20>
    2918:	2c e7       	ldi	r18, 0x7C	; 124
    291a:	3b e1       	ldi	r19, 0x1B	; 27
	return _res;
}
    291c:	ce 01       	movw	r24, r28
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	82 1b       	sub	r24, r18
    2922:	93 0b       	sbc	r25, r19
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	08 95       	ret

0000292e <cs_sel>:

unsigned char ethBuf0[ETH_MAX_BUF_SIZE];
unsigned char ethBuf1[ETH_MAX_BUF_SIZE];

void cs_sel() {
	SPI_WIZNET_ENABLE();
    292e:	8b b1       	in	r24, 0x0b	; 11
    2930:	8f 7e       	andi	r24, 0xEF	; 239
    2932:	8b b9       	out	0x0b, r24	; 11
    2934:	08 95       	ret

00002936 <cs_desel>:
}

void cs_desel() {
	SPI_WIZNET_DISABLE();
    2936:	8b b1       	in	r24, 0x0b	; 11
    2938:	80 61       	ori	r24, 0x10	; 16
    293a:	8b b9       	out	0x0b, r24	; 11
    293c:	08 95       	ret

0000293e <spi_rb>:
}

uint8_t spi_rb(void) {
	uint8_t rbuf;
	SPI_READ(rbuf);
    293e:	1e bc       	out	0x2e, r1	; 46
    2940:	0d b4       	in	r0, 0x2d	; 45
    2942:	07 fe       	sbrs	r0, 7
    2944:	fd cf       	rjmp	.-6      	; 0x2940 <spi_rb+0x2>
    2946:	8e b5       	in	r24, 0x2e	; 46
	return rbuf;
}
    2948:	08 95       	ret

0000294a <spi_wb>:

void spi_wb(uint8_t b) {
	SPI_WRITE(b);
    294a:	8e bd       	out	0x2e, r24	; 46
    294c:	0d b4       	in	r0, 0x2d	; 45
    294e:	07 fe       	sbrs	r0, 7
    2950:	fd cf       	rjmp	.-6      	; 0x294c <spi_wb+0x2>
}
    2952:	08 95       	ret

00002954 <spi_rb_burst>:

void spi_rb_burst(uint8_t *buf, uint16_t len) {
    2954:	fc 01       	movw	r30, r24
	for (uint16_t var = 0; var < len; var++) {
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	09 c0       	rjmp	.+18     	; 0x296e <spi_rb_burst+0x1a>
		SPI_READ(*buf++);
    295c:	1e bc       	out	0x2e, r1	; 46
    295e:	0d b4       	in	r0, 0x2d	; 45
    2960:	07 fe       	sbrs	r0, 7
    2962:	fd cf       	rjmp	.-6      	; 0x295e <spi_rb_burst+0xa>
    2964:	8e b5       	in	r24, 0x2e	; 46
    2966:	80 83       	st	Z, r24
void spi_wb(uint8_t b) {
	SPI_WRITE(b);
}

void spi_rb_burst(uint8_t *buf, uint16_t len) {
	for (uint16_t var = 0; var < len; var++) {
    2968:	2f 5f       	subi	r18, 0xFF	; 255
    296a:	3f 4f       	sbci	r19, 0xFF	; 255
		SPI_READ(*buf++);
    296c:	31 96       	adiw	r30, 0x01	; 1
void spi_wb(uint8_t b) {
	SPI_WRITE(b);
}

void spi_rb_burst(uint8_t *buf, uint16_t len) {
	for (uint16_t var = 0; var < len; var++) {
    296e:	26 17       	cp	r18, r22
    2970:	37 07       	cpc	r19, r23
    2972:	a0 f3       	brcs	.-24     	; 0x295c <spi_rb_burst+0x8>
		SPI_READ(*buf++);
	}
}
    2974:	08 95       	ret

00002976 <spi_wb_burst>:

void spi_wb_burst(uint8_t *buf, uint16_t len) {
    2976:	fc 01       	movw	r30, r24
	for (uint16_t var = 0; var < len; var++) {
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	0a c0       	rjmp	.+20     	; 0x2992 <spi_wb_burst+0x1c>
		SPI_WRITE(*buf++);
    297e:	cf 01       	movw	r24, r30
    2980:	01 96       	adiw	r24, 0x01	; 1
    2982:	40 81       	ld	r20, Z
    2984:	4e bd       	out	0x2e, r20	; 46
    2986:	0d b4       	in	r0, 0x2d	; 45
    2988:	07 fe       	sbrs	r0, 7
    298a:	fd cf       	rjmp	.-6      	; 0x2986 <spi_wb_burst+0x10>
		SPI_READ(*buf++);
	}
}

void spi_wb_burst(uint8_t *buf, uint16_t len) {
	for (uint16_t var = 0; var < len; var++) {
    298c:	2f 5f       	subi	r18, 0xFF	; 255
    298e:	3f 4f       	sbci	r19, 0xFF	; 255
		SPI_WRITE(*buf++);
    2990:	fc 01       	movw	r30, r24
		SPI_READ(*buf++);
	}
}

void spi_wb_burst(uint8_t *buf, uint16_t len) {
	for (uint16_t var = 0; var < len; var++) {
    2992:	26 17       	cp	r18, r22
    2994:	37 07       	cpc	r19, r23
    2996:	98 f3       	brcs	.-26     	; 0x297e <spi_wb_burst+0x8>
		SPI_WRITE(*buf++);
	}
}
    2998:	08 95       	ret

0000299a <__vector_21>:


//******************* MILLIS ENGINE: BEGIN
//ISR (TIMER0_COMP_vect )
ISR (TIMER0_COMPA_vect)
{
    299a:	1f 92       	push	r1
    299c:	0f 92       	push	r0
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	0f 92       	push	r0
    29a2:	11 24       	eor	r1, r1
    29a4:	8f 93       	push	r24
    29a6:	9f 93       	push	r25
    29a8:	af 93       	push	r26
    29aa:	bf 93       	push	r27
	// Compare match Timer0
	// Here every 1ms
	_millis++; // INC millis tick
    29ac:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <_millis>
    29b0:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <_millis+0x1>
    29b4:	a0 91 46 1a 	lds	r26, 0x1A46	; 0x801a46 <_millis+0x2>
    29b8:	b0 91 47 1a 	lds	r27, 0x1A47	; 0x801a47 <_millis+0x3>
    29bc:	01 96       	adiw	r24, 0x01	; 1
    29be:	a1 1d       	adc	r26, r1
    29c0:	b1 1d       	adc	r27, r1
    29c2:	80 93 44 1a 	sts	0x1A44, r24	; 0x801a44 <_millis>
    29c6:	90 93 45 1a 	sts	0x1A45, r25	; 0x801a45 <_millis+0x1>
    29ca:	a0 93 46 1a 	sts	0x1A46, r26	; 0x801a46 <_millis+0x2>
    29ce:	b0 93 47 1a 	sts	0x1A47, r27	; 0x801a47 <_millis+0x3>
}
    29d2:	bf 91       	pop	r27
    29d4:	af 91       	pop	r26
    29d6:	9f 91       	pop	r25
    29d8:	8f 91       	pop	r24
    29da:	0f 90       	pop	r0
    29dc:	0f be       	out	0x3f, r0	; 63
    29de:	0f 90       	pop	r0
    29e0:	1f 90       	pop	r1
    29e2:	18 95       	reti

000029e4 <IO_LIBRARY_Init>:
	for (uint16_t var = 0; var < len; var++) {
		SPI_WRITE(*buf++);
	}
}

void IO_LIBRARY_Init(void) {
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	28 97       	sbiw	r28, 0x08	; 8
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
	uint8_t bufSize[] = {2, 2, 2, 2, 2, 2, 2, 2};
    29f8:	88 e0       	ldi	r24, 0x08	; 8
    29fa:	eb e4       	ldi	r30, 0x4B	; 75
    29fc:	f2 e0       	ldi	r31, 0x02	; 2
    29fe:	de 01       	movw	r26, r28
    2a00:	11 96       	adiw	r26, 0x01	; 1
    2a02:	01 90       	ld	r0, Z+
    2a04:	0d 92       	st	X+, r0
    2a06:	8a 95       	dec	r24
    2a08:	e1 f7       	brne	.-8      	; 0x2a02 <IO_LIBRARY_Init+0x1e>

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
    2a0a:	6b e9       	ldi	r22, 0x9B	; 155
    2a0c:	74 e1       	ldi	r23, 0x14	; 20
    2a0e:	87 e9       	ldi	r24, 0x97	; 151
    2a10:	94 e1       	ldi	r25, 0x14	; 20
    2a12:	9c db       	rcall	.-2248   	; 0x214c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
    2a14:	65 ea       	ldi	r22, 0xA5	; 165
    2a16:	74 e1       	ldi	r23, 0x14	; 20
    2a18:	8f e9       	ldi	r24, 0x9F	; 159
    2a1a:	94 e1       	ldi	r25, 0x14	; 20
    2a1c:	ae db       	rcall	.-2212   	; 0x217a <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(spi_rb_burst, spi_wb_burst);
    2a1e:	6b eb       	ldi	r22, 0xBB	; 187
    2a20:	74 e1       	ldi	r23, 0x14	; 20
    2a22:	8a ea       	ldi	r24, 0xAA	; 170
    2a24:	94 e1       	ldi	r25, 0x14	; 20
    2a26:	c6 db       	rcall	.-2164   	; 0x21b4 <reg_wizchip_spiburst_cbfunc>

	wizchip_init(bufSize, bufSize);
    2a28:	be 01       	movw	r22, r28
    2a2a:	6f 5f       	subi	r22, 0xFF	; 255
    2a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2e:	cb 01       	movw	r24, r22
	wizchip_setnetinfo(&netInfo);
    2a30:	4a dc       	rcall	.-1900   	; 0x22c6 <wizchip_init>
    2a32:	80 e3       	ldi	r24, 0x30	; 48
    2a34:	92 e0       	ldi	r25, 0x02	; 2
    2a36:	3d de       	rcall	.-902    	; 0x26b2 <wizchip_setnetinfo>
	//wizchip_setinterruptmask(IK_SOCK_0);
}
    2a38:	28 96       	adiw	r28, 0x08	; 8
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	f8 94       	cli
    2a3e:	de bf       	out	0x3e, r29	; 62
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	cd bf       	out	0x3d, r28	; 61
    2a44:	df 91       	pop	r29
    2a46:	cf 91       	pop	r28
    2a48:	08 95       	ret

00002a4a <icmp_cb>:
		uint8_t* ip_query,\
		uint8_t type_query,\
		uint16_t id_query,\
		uint16_t seq_query,\
		uint16_t len_query)
{
    2a4a:	ef 92       	push	r14
    2a4c:	ff 92       	push	r15
    2a4e:	0f 93       	push	r16
    2a50:	1f 93       	push	r17
    2a52:	fb 01       	movw	r30, r22
	PRINTF( "<< PING %s from %d.%d.%d.%d ID:%x Seq:%x data:%u bytes\r\n",\
    2a54:	a3 81       	ldd	r26, Z+3	; 0x03
    2a56:	72 81       	ldd	r23, Z+2	; 0x02
    2a58:	61 81       	ldd	r22, Z+1	; 0x01
    2a5a:	50 81       	ld	r21, Z
    2a5c:	44 23       	and	r20, r20
    2a5e:	19 f0       	breq	.+6      	; 0x2a66 <icmp_cb+0x1c>
    2a60:	88 e9       	ldi	r24, 0x98	; 152
    2a62:	93 e0       	ldi	r25, 0x03	; 3
    2a64:	02 c0       	rjmp	.+4      	; 0x2a6a <icmp_cb+0x20>
    2a66:	80 ea       	ldi	r24, 0xA0	; 160
    2a68:	93 e0       	ldi	r25, 0x03	; 3
    2a6a:	ff 92       	push	r15
    2a6c:	ef 92       	push	r14
    2a6e:	1f 93       	push	r17
    2a70:	0f 93       	push	r16
    2a72:	3f 93       	push	r19
    2a74:	2f 93       	push	r18
    2a76:	1f 92       	push	r1
    2a78:	af 93       	push	r26
    2a7a:	1f 92       	push	r1
    2a7c:	7f 93       	push	r23
    2a7e:	1f 92       	push	r1
    2a80:	6f 93       	push	r22
    2a82:	1f 92       	push	r1
    2a84:	5f 93       	push	r21
    2a86:	9f 93       	push	r25
    2a88:	8f 93       	push	r24
    2a8a:	83 e1       	ldi	r24, 0x13	; 19
    2a8c:	92 e0       	ldi	r25, 0x02	; 2
    2a8e:	9f 93       	push	r25
    2a90:	8f 93       	push	r24
    2a92:	0e 94 86 23 	call	0x470c	; 0x470c <printf_P>
			(int16_t) ip_query[2],\
			(int16_t) ip_query[3],\
			id_query,\
			seq_query,\
			len_query);
}
    2a96:	8d b7       	in	r24, 0x3d	; 61
    2a98:	9e b7       	in	r25, 0x3e	; 62
    2a9a:	42 96       	adiw	r24, 0x12	; 18
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	9e bf       	out	0x3e, r25	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	8d bf       	out	0x3d, r24	; 61
    2aa6:	1f 91       	pop	r17
    2aa8:	0f 91       	pop	r16
    2aaa:	ff 90       	pop	r15
    2aac:	ef 90       	pop	r14
    2aae:	08 95       	ret

00002ab0 <timer0_init>:
	TCCR0 = (1<<CS02)|(1<<WGM01); //TIMER0 SET-UP: CTC MODE & PS 1:64
	OCR0 = 249; // 1ms reach for clear (16mz:64=>250kHz:250-=>1kHz)
	TIMSK |= 1<<OCIE0;	 //IRQ on TIMER0 output compare
	 */
	//For M664p
	cli();
    2ab0:	f8 94       	cli
	TCCR0A = 0; TCCR0B = 0; TIMSK0 =  0;
    2ab2:	14 bc       	out	0x24, r1	; 36
    2ab4:	15 bc       	out	0x25, r1	; 37
    2ab6:	ee e6       	ldi	r30, 0x6E	; 110
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	10 82       	st	Z, r1
	
	TCCR0A = (1<<WGM01); //TIMER0 SET-UP: CTC MODE
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00); // PS 1:64
    2ac0:	83 e0       	ldi	r24, 0x03	; 3
    2ac2:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249; // 1ms reach for clear (16mz:64=>250kHz:250-=>1kHz)
    2ac4:	89 ef       	ldi	r24, 0xF9	; 249
    2ac6:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= 1<<OCIE0A;	 //IRQ on TIMER0 output compareA
    2ac8:	80 81       	ld	r24, Z
    2aca:	82 60       	ori	r24, 0x02	; 2
    2acc:	80 83       	st	Z, r24
	sei();
    2ace:	78 94       	sei
    2ad0:	08 95       	ret

00002ad2 <avr_init>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    2ad2:	99 e2       	ldi	r25, 0x29	; 41
    2ad4:	88 e1       	ldi	r24, 0x18	; 24
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	a8 95       	wdr
    2adc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
static void avr_init(void)
{
	// Initialize device here.
	// WatchDog INIT
	wdt_enable(WDTO_8S);  // set up wdt reset interval 2 second
	wdt_reset(); // wdt reset ~ every <2000ms
    2ae6:	a8 95       	wdr

	timer0_init();// Timer0 millis engine init
    2ae8:	e3 df       	rcall	.-58     	; 0x2ab0 <timer0_init>
	 *  uart1_BAUD_SELECT() (normal speed mode )
	 *  or
	 *  uart1_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
	 */

	UART_init( UART_BAUD_RATE );
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	96 e9       	ldi	r25, 0x96	; 150
    2aee:	0e 94 ae 22 	call	0x455c	; 0x455c <UART_init>
	// Define Output/Input Stream
	stdout = &uart_str;
    2af2:	82 e2       	ldi	r24, 0x22	; 34
    2af4:	92 e0       	ldi	r25, 0x02	; 2
    2af6:	90 93 78 1b 	sts	0x1B78, r25	; 0x801b78 <__iob+0x3>
    2afa:	80 93 77 1b 	sts	0x1B77, r24	; 0x801b77 <__iob+0x2>
	sei(); //re-enable global interrupts
    2afe:	78 94       	sei
    2b00:	08 95       	ret

00002b02 <print_network_information>:

	return;
}

void print_network_information(void)
{
    2b02:	0f 93       	push	r16
    2b04:	1f 93       	push	r17
    2b06:	cf 93       	push	r28
    2b08:	df 93       	push	r29
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	6d 97       	sbiw	r28, 0x1d	; 29
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	de bf       	out	0x3e, r29	; 62
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	cd bf       	out	0x3d, r28	; 61

	uint8_t tmpstr[6] = {0,};
    2b1a:	8e 01       	movw	r16, r28
    2b1c:	0f 5f       	subi	r16, 0xFF	; 255
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	86 e0       	ldi	r24, 0x06	; 6
    2b22:	f8 01       	movw	r30, r16
    2b24:	11 92       	st	Z+, r1
    2b26:	8a 95       	dec	r24
    2b28:	e9 f7       	brne	.-6      	; 0x2b24 <print_network_information+0x22>
	ctlwizchip(CW_GET_ID,(void*)tmpstr); // Get WIZCHIP name
    2b2a:	b8 01       	movw	r22, r16
    2b2c:	88 e0       	ldi	r24, 0x08	; 8
    2b2e:	36 dd       	rcall	.-1428   	; 0x259c <ctlwizchip>
    PRINTF("\r\n=======================================\r\n");
    2b30:	89 ea       	ldi	r24, 0xA9	; 169
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	9f 93       	push	r25
    2b36:	8f 93       	push	r24
    2b38:	0e 94 86 23 	call	0x470c	; 0x470c <printf_P>
    PRINTF(" WIZnet chip:  %s \r\n", tmpstr);
    2b3c:	1f 93       	push	r17
    2b3e:	0f 93       	push	r16
    2b40:	84 e9       	ldi	r24, 0x94	; 148
    2b42:	91 e0       	ldi	r25, 0x01	; 1
    2b44:	9f 93       	push	r25
    2b46:	8f 93       	push	r24
    2b48:	0e 94 86 23 	call	0x470c	; 0x470c <printf_P>
    PRINTF("=======================================\r\n");
    2b4c:	8a e6       	ldi	r24, 0x6A	; 106
    2b4e:	91 e0       	ldi	r25, 0x01	; 1
    2b50:	9f 93       	push	r25
    2b52:	8f 93       	push	r24
    2b54:	0e 94 86 23 	call	0x470c	; 0x470c <printf_P>

	wiz_NetInfo gWIZNETINFO;
	wizchip_getnetinfo(&gWIZNETINFO);
    2b58:	ce 01       	movw	r24, r28
    2b5a:	07 96       	adiw	r24, 0x07	; 7
    2b5c:	e3 dd       	rcall	.-1082   	; 0x2724 <wizchip_getnetinfo>
	if (gWIZNETINFO.dhcp == NETINFO_STATIC)
    2b5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b60:	0f b6       	in	r0, 0x3f	; 63
    2b62:	f8 94       	cli
    2b64:	de bf       	out	0x3e, r29	; 62
    2b66:	0f be       	out	0x3f, r0	; 63
    2b68:	cd bf       	out	0x3d, r28	; 61
    2b6a:	81 30       	cpi	r24, 0x01	; 1
    2b6c:	49 f4       	brne	.+18     	; 0x2b80 <print_network_information+0x7e>
		PRINTF("STATIC IP\r\n");
    2b6e:	8e e5       	ldi	r24, 0x5E	; 94
    2b70:	91 e0       	ldi	r25, 0x01	; 1
    2b72:	9f 93       	push	r25
    2b74:	8f 93       	push	r24
    2b76:	0e 94 86 23 	call	0x470c	; 0x470c <printf_P>
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	08 c0       	rjmp	.+16     	; 0x2b90 <print_network_information+0x8e>
	else
		PRINTF("DHCP IP\r\n");
    2b80:	84 e5       	ldi	r24, 0x54	; 84
    2b82:	91 e0       	ldi	r25, 0x01	; 1
    2b84:	9f 93       	push	r25
    2b86:	8f 93       	push	r24
    2b88:	0e 94 86 23 	call	0x470c	; 0x470c <printf_P>
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
    2b90:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b92:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b94:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b96:	29 85       	ldd	r18, Y+9	; 0x09
    2b98:	98 85       	ldd	r25, Y+8	; 0x08
    2b9a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b9c:	1f 92       	push	r1
    2b9e:	5f 93       	push	r21
    2ba0:	1f 92       	push	r1
    2ba2:	4f 93       	push	r20
    2ba4:	1f 92       	push	r1
    2ba6:	3f 93       	push	r19
    2ba8:	1f 92       	push	r1
    2baa:	2f 93       	push	r18
    2bac:	1f 92       	push	r1
    2bae:	9f 93       	push	r25
    2bb0:	1f 92       	push	r1
    2bb2:	8f 93       	push	r24
    2bb4:	86 ea       	ldi	r24, 0xA6	; 166
    2bb6:	93 e0       	ldi	r25, 0x03	; 3
    2bb8:	9f 93       	push	r25
    2bba:	8f 93       	push	r24
    2bbc:	0e 94 73 23 	call	0x46e6	; 0x46e6 <printf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
    2bc0:	38 89       	ldd	r19, Y+16	; 0x10
    2bc2:	2f 85       	ldd	r18, Y+15	; 0x0f
    2bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc8:	1f 92       	push	r1
    2bca:	3f 93       	push	r19
    2bcc:	1f 92       	push	r1
    2bce:	2f 93       	push	r18
    2bd0:	1f 92       	push	r1
    2bd2:	9f 93       	push	r25
    2bd4:	1f 92       	push	r1
    2bd6:	8f 93       	push	r24
    2bd8:	83 ed       	ldi	r24, 0xD3	; 211
    2bda:	93 e0       	ldi	r25, 0x03	; 3
    2bdc:	9f 93       	push	r25
    2bde:	8f 93       	push	r24
    2be0:	0e 94 73 23 	call	0x46e6	; 0x46e6 <printf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
    2be4:	3c 89       	ldd	r19, Y+20	; 0x14
    2be6:	2b 89       	ldd	r18, Y+19	; 0x13
    2be8:	9a 89       	ldd	r25, Y+18	; 0x12
    2bea:	89 89       	ldd	r24, Y+17	; 0x11
    2bec:	1f 92       	push	r1
    2bee:	3f 93       	push	r19
    2bf0:	1f 92       	push	r1
    2bf2:	2f 93       	push	r18
    2bf4:	1f 92       	push	r1
    2bf6:	9f 93       	push	r25
    2bf8:	1f 92       	push	r1
    2bfa:	8f 93       	push	r24
    2bfc:	8e ee       	ldi	r24, 0xEE	; 238
    2bfe:	93 e0       	ldi	r25, 0x03	; 3
    2c00:	9f 93       	push	r25
    2c02:	8f 93       	push	r24
    2c04:	0e 94 73 23 	call	0x46e6	; 0x46e6 <printf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
    2c08:	38 8d       	ldd	r19, Y+24	; 0x18
    2c0a:	2f 89       	ldd	r18, Y+23	; 0x17
    2c0c:	9e 89       	ldd	r25, Y+22	; 0x16
    2c0e:	8d 89       	ldd	r24, Y+21	; 0x15
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	de bf       	out	0x3e, r29	; 62
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	cd bf       	out	0x3d, r28	; 61
    2c1a:	1f 92       	push	r1
    2c1c:	3f 93       	push	r19
    2c1e:	1f 92       	push	r1
    2c20:	2f 93       	push	r18
    2c22:	1f 92       	push	r1
    2c24:	9f 93       	push	r25
    2c26:	1f 92       	push	r1
    2c28:	8f 93       	push	r24
    2c2a:	89 e0       	ldi	r24, 0x09	; 9
    2c2c:	94 e0       	ldi	r25, 0x04	; 4
    2c2e:	9f 93       	push	r25
    2c30:	8f 93       	push	r24
    2c32:	0e 94 73 23 	call	0x46e6	; 0x46e6 <printf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
    2c36:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2c38:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2c3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c3c:	89 8d       	ldd	r24, Y+25	; 0x19
    2c3e:	1f 92       	push	r1
    2c40:	3f 93       	push	r19
    2c42:	1f 92       	push	r1
    2c44:	2f 93       	push	r18
    2c46:	1f 92       	push	r1
    2c48:	9f 93       	push	r25
    2c4a:	1f 92       	push	r1
    2c4c:	8f 93       	push	r24
    2c4e:	84 e2       	ldi	r24, 0x24	; 36
    2c50:	94 e0       	ldi	r25, 0x04	; 4
    2c52:	9f 93       	push	r25
    2c54:	8f 93       	push	r24
    2c56:	0e 94 73 23 	call	0x46e6	; 0x46e6 <printf>
}
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	6d 96       	adiw	r28, 0x1d	; 29
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	df 91       	pop	r29
    2c72:	cf 91       	pop	r28
    2c74:	1f 91       	pop	r17
    2c76:	0f 91       	pop	r16
    2c78:	08 95       	ret

00002c7a <main>:
}

int main()
{
	//uint8_t prev_sw1 = 1; // VAR for sw1 pressing detect
	SYS_Init();
    2c7a:	0e 94 92 21 	call	0x4324	; 0x4324 <SYS_Init>
	// INIT MCU
	avr_init();
    2c7e:	29 df       	rcall	.-430    	; 0x2ad2 <avr_init>
	spi_init(); //SPI Master, MODE0, 4Mhz(DIV4), CS_PB.3=HIGH - suitable for WIZNET 5x00(1/2/5)
    2c80:	e0 d0       	rcall	.+448    	; 0x2e42 <spi_init>

	// Print program metrics
	//PRINTF("%S", str_prog_name);// ???????? ?????????
	//PRINTF("Compiled at: %S %S\r\n", compile_time, compile_date);// ????? ???? ??????????
	//PRINTF(">> MCU is: %S; CLK is: %luHz\r\n", str_mcu, F_CPU);// MCU Name && FREQ
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());
    2c82:	3c de       	rcall	.-904    	; 0x28fc <freeRam>
    2c84:	9f 93       	push	r25
    2c86:	8f 93       	push	r24
    2c88:	88 ef       	ldi	r24, 0xF8	; 248
    2c8a:	91 e0       	ldi	r25, 0x01	; 1
    2c8c:	9f 93       	push	r25
    2c8e:	8f 93       	push	r24
    2c90:	0e 94 86 23 	call	0x470c	; 0x470c <printf_P>
    2c94:	0f 90       	pop	r0

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
	while(i--)
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	83 e0       	ldi	r24, 0x03	; 3
	//PRINTF("Compiled at: %S %S\r\n", compile_time, compile_date);// ????? ???? ??????????
	//PRINTF(">> MCU is: %S; CLK is: %luHz\r\n", str_mcu, F_CPU);// MCU Name && FREQ
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
    2c9e:	1a c0       	rjmp	.+52     	; 0x2cd4 <main+0x5a>
	while(i--)
    2ca0:	85 b1       	in	r24, 0x05	; 5
	{
		LED0ON;
    2ca2:	8f 7e       	andi	r24, 0xEF	; 239
    2ca4:	85 b9       	out	0x05, r24	; 5
    2ca6:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ca8:	30 e7       	ldi	r19, 0x70	; 112
    2caa:	82 e0       	ldi	r24, 0x02	; 2
    2cac:	21 50       	subi	r18, 0x01	; 1
    2cae:	30 40       	sbci	r19, 0x00	; 0
    2cb0:	80 40       	sbci	r24, 0x00	; 0
    2cb2:	e1 f7       	brne	.-8      	; 0x2cac <main+0x32>
    2cb4:	00 c0       	rjmp	.+0      	; 0x2cb6 <main+0x3c>
    2cb6:	00 00       	nop
    2cb8:	85 b1       	in	r24, 0x05	; 5
		_delay_ms(100);
		LED0OFF;
    2cba:	80 61       	ori	r24, 0x10	; 16
    2cbc:	85 b9       	out	0x05, r24	; 5
    2cbe:	2f ef       	ldi	r18, 0xFF	; 255
    2cc0:	33 ec       	ldi	r19, 0xC3	; 195
    2cc2:	89 e0       	ldi	r24, 0x09	; 9
    2cc4:	21 50       	subi	r18, 0x01	; 1
    2cc6:	30 40       	sbci	r19, 0x00	; 0
    2cc8:	80 40       	sbci	r24, 0x00	; 0
    2cca:	e1 f7       	brne	.-8      	; 0x2cc4 <main+0x4a>
    2ccc:	00 c0       	rjmp	.+0      	; 0x2cce <main+0x54>
    2cce:	00 00       	nop
    2cd0:	a8 95       	wdr
		_delay_ms(400);
		wdt_reset();
    2cd2:	89 2f       	mov	r24, r25
	//PRINTF(">> MCU is: %S; CLK is: %luHz\r\n", str_mcu, F_CPU);// MCU Name && FREQ
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
	while(i--)
    2cd4:	9f ef       	ldi	r25, 0xFF	; 255
    2cd6:	98 0f       	add	r25, r24
    2cd8:	81 11       	cpse	r24, r1
		_delay_ms(400);
		wdt_reset();
	}

	//Wizchip WIZ5500 Ethernet initialize
	IO_LIBRARY_Init(); //After that ping must working
    2cda:	e2 cf       	rjmp	.-60     	; 0x2ca0 <main+0x26>
    2cdc:	83 de       	rcall	.-762    	; 0x29e4 <IO_LIBRARY_Init>
	print_network_information();
    2cde:	11 df       	rcall	.-478    	; 0x2b02 <print_network_information>
    2ce0:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2ce2:	40 90 44 1a 	lds	r4, 0x1A44	; 0x801a44 <_millis>
	// Atomic tick reading
	i = _millis;
    2ce6:	50 90 45 1a 	lds	r5, 0x1A45	; 0x801a45 <_millis+0x1>
    2cea:	60 90 46 1a 	lds	r6, 0x1A46	; 0x801a46 <_millis+0x2>
    2cee:	70 90 47 1a 	lds	r7, 0x1A47	; 0x801a47 <_millis+0x3>
    2cf2:	78 94       	sei
	sei();
    2cf4:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2cf6:	80 90 44 1a 	lds	r8, 0x1A44	; 0x801a44 <_millis>
	// Atomic tick reading
	i = _millis;
    2cfa:	90 90 45 1a 	lds	r9, 0x1A45	; 0x801a45 <_millis+0x1>
    2cfe:	a0 90 46 1a 	lds	r10, 0x1A46	; 0x801a46 <_millis+0x2>
    2d02:	b0 90 47 1a 	lds	r11, 0x1A47	; 0x801a47 <_millis+0x3>
    2d06:	78 94       	sei
	sei();
    2d08:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2d0a:	c0 90 44 1a 	lds	r12, 0x1A44	; 0x801a44 <_millis>
	// Atomic tick reading
	i = _millis;
    2d0e:	d0 90 45 1a 	lds	r13, 0x1A45	; 0x801a45 <_millis+0x1>
    2d12:	e0 90 46 1a 	lds	r14, 0x1A46	; 0x801a46 <_millis+0x2>
    2d16:	f0 90 47 1a 	lds	r15, 0x1A47	; 0x801a47 <_millis+0x3>
	sei();
    2d1a:	78 94       	sei
	{	
// 		appTimer.interval = 1000;
// 		appTimer.mode = SYS_TIMER_PERIODIC_MODE;
// 		appTimer.handler = appTimerHandler;
// 		SYS_TimerStart(&appTimer);
		SYS_TaskHandler();
    2d1c:	0e 94 99 21 	call	0x4332	; 0x4332 <SYS_TaskHandler>
		HAL_UartTaskHandler();
    2d20:	ac d1       	rcall	.+856    	; 0x307a <HAL_UartTaskHandler>
    2d22:	e3 dd       	rcall	.-1082   	; 0x28ea <APP_TaskHandler>
		APP_TaskHandler();
    2d24:	a8 95       	wdr
    2d26:	48 e8       	ldi	r20, 0x88	; 136
		//Here at least every 1sec
		wdt_reset(); // WDT reset at least every sec
    2d28:	53 e1       	ldi	r21, 0x13	; 19

		//Use Hercules Terminal to check loopback tcp:5000 and udp:3000
		/*
		 * https://www.hw-group.com/software/hercules-setup-utility
		 * */
		loopback_tcps(0,ethBuf0,5000);
    2d2a:	68 e4       	ldi	r22, 0x48	; 72
    2d2c:	7a e1       	ldi	r23, 0x1A	; 26
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	0e 94 57 01 	call	0x2ae	; 0x2ae <loopback_tcps>
    2d34:	48 eb       	ldi	r20, 0xB8	; 184
    2d36:	5b e0       	ldi	r21, 0x0B	; 11
		loopback_udps(1, ethBuf0, 3000);
    2d38:	68 e4       	ldi	r22, 0x48	; 72
    2d3a:	7a e1       	ldi	r23, 0x1A	; 26
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	0e 94 a0 02 	call	0x540	; 0x540 <loopback_udps>
    2d42:	82 e0       	ldi	r24, 0x02	; 2
    2d44:	0e 94 08 05 	call	0xa10	; 0xa10 <ping_srv>

		/*
		 * run ICMP (ping) server
		 */
		ping_srv(2);
    2d48:	f8 94       	cli
    2d4a:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <_millis>
static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
	// Atomic tick reading
	i = _millis;
    2d4e:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <_millis+0x1>
    2d52:	a0 91 46 1a 	lds	r26, 0x1A46	; 0x801a46 <_millis+0x2>
    2d56:	b0 91 47 1a 	lds	r27, 0x1A47	; 0x801a47 <_millis+0x3>
    2d5a:	78 94       	sei
    2d5c:	88 19       	sub	r24, r8
	sei();
    2d5e:	99 09       	sbc	r25, r9
		 * run ICMP (ping) server
		 */
		ping_srv(2);

		/*ICM Ping client example #1 - ping GW/myPC every 10 sec*/
		if((millis()-timer_ping1)> 10000)
    2d60:	aa 09       	sbc	r26, r10
    2d62:	bb 09       	sbc	r27, r11
    2d64:	81 31       	cpi	r24, 0x11	; 17
    2d66:	97 42       	sbci	r25, 0x27	; 39
    2d68:	a1 05       	cpc	r26, r1
    2d6a:	b1 05       	cpc	r27, r1
    2d6c:	b8 f0       	brcs	.+46     	; 0x2d9c <main+0x122>
    2d6e:	f8 94       	cli
    2d70:	80 90 44 1a 	lds	r8, 0x1A44	; 0x801a44 <_millis>
static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
	// Atomic tick reading
	i = _millis;
    2d74:	90 90 45 1a 	lds	r9, 0x1A45	; 0x801a45 <_millis+0x1>
    2d78:	a0 90 46 1a 	lds	r10, 0x1A46	; 0x801a46 <_millis+0x2>
    2d7c:	b0 90 47 1a 	lds	r11, 0x1A47	; 0x801a47 <_millis+0x3>
    2d80:	78 94       	sei
    2d82:	86 ee       	ldi	r24, 0xE6	; 230
	sei();
    2d84:	91 e0       	ldi	r25, 0x01	; 1
		{
			timer_ping1 = millis();
			//PRINTF("\r\n>> PING GW\r\n");
			//ping_request(2, netInfo.gw);

			PRINTF("\r\n>> PING my PC\r\n");
    2d86:	9f 93       	push	r25
    2d88:	8f 93       	push	r24
    2d8a:	0e 94 86 23 	call	0x470c	; 0x470c <printf_P>
    2d8e:	67 e4       	ldi	r22, 0x47	; 71
    2d90:	72 e0       	ldi	r23, 0x02	; 2
			ping_request(2, ping_ip); //DEVELOPER PC IP
    2d92:	82 e0       	ldi	r24, 0x02	; 2
    2d94:	0e 94 c9 03 	call	0x792	; 0x792 <ping_request>
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	f8 94       	cli
    2d9e:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <_millis>
static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
	// Atomic tick reading
	i = _millis;
    2da2:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <_millis+0x1>
    2da6:	a0 91 46 1a 	lds	r26, 0x1A46	; 0x801a46 <_millis+0x2>
    2daa:	b0 91 47 1a 	lds	r27, 0x1A47	; 0x801a47 <_millis+0x3>
    2dae:	78 94       	sei
    2db0:	8c 19       	sub	r24, r12
	sei();
    2db2:	9d 09       	sbc	r25, r13
			PRINTF("\r\n>> PING my PC\r\n");
			ping_request(2, ping_ip); //DEVELOPER PC IP
		}

		/*ICM Ping client example #2 - ping DNS google  every 15 sec*/
		if((millis()-timer_ping2)> 15000)
    2db4:	ae 09       	sbc	r26, r14
    2db6:	bf 09       	sbc	r27, r15
    2db8:	89 39       	cpi	r24, 0x99	; 153
    2dba:	9a 43       	sbci	r25, 0x3A	; 58
    2dbc:	a1 05       	cpc	r26, r1
    2dbe:	b1 05       	cpc	r27, r1
    2dc0:	b8 f0       	brcs	.+46     	; 0x2df0 <main+0x176>
    2dc2:	f8 94       	cli
    2dc4:	c0 90 44 1a 	lds	r12, 0x1A44	; 0x801a44 <_millis>
static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
	// Atomic tick reading
	i = _millis;
    2dc8:	d0 90 45 1a 	lds	r13, 0x1A45	; 0x801a45 <_millis+0x1>
    2dcc:	e0 90 46 1a 	lds	r14, 0x1A46	; 0x801a46 <_millis+0x2>
    2dd0:	f0 90 47 1a 	lds	r15, 0x1A47	; 0x801a47 <_millis+0x3>
    2dd4:	78 94       	sei
    2dd6:	85 ed       	ldi	r24, 0xD5	; 213
	sei();
    2dd8:	91 e0       	ldi	r25, 0x01	; 1

		/*ICM Ping client example #2 - ping DNS google  every 15 sec*/
		if((millis()-timer_ping2)> 15000)
		{
			timer_ping2 = millis();
			PRINTF("\r\n>>> PING DNS\r\n");
    2dda:	9f 93       	push	r25
    2ddc:	8f 93       	push	r24
    2dde:	0e 94 86 23 	call	0x470c	; 0x470c <printf_P>
    2de2:	62 e4       	ldi	r22, 0x42	; 66
    2de4:	72 e0       	ldi	r23, 0x02	; 2
			ping_request(2, netInfo.dns);
    2de6:	82 e0       	ldi	r24, 0x02	; 2
    2de8:	0e 94 c9 03 	call	0x792	; 0x792 <ping_request>
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	f8 94       	cli
    2df2:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <_millis>
static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
	// Atomic tick reading
	i = _millis;
    2df6:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <_millis+0x1>
    2dfa:	a0 91 46 1a 	lds	r26, 0x1A46	; 0x801a46 <_millis+0x2>
    2dfe:	b0 91 47 1a 	lds	r27, 0x1A47	; 0x801a47 <_millis+0x3>
    2e02:	78 94       	sei
    2e04:	84 19       	sub	r24, r4
	sei();
    2e06:	95 09       	sbc	r25, r5
		}

		//loopback_ret = loopback_tcpc(SOCK_TCPS, gDATABUF, destip, destport);
		//if(loopback_ret < 0) printf("loopback ret: %ld\r\n", loopback_ret); // TCP Socket Error code

		if((millis()-timer_link_1sec)> 1000)
    2e08:	a6 09       	sbc	r26, r6
    2e0a:	b7 09       	sbc	r27, r7
    2e0c:	89 3e       	cpi	r24, 0xE9	; 233
    2e0e:	93 40       	sbci	r25, 0x03	; 3
    2e10:	a1 05       	cpc	r26, r1
    2e12:	b1 05       	cpc	r27, r1
    2e14:	08 f4       	brcc	.+2      	; 0x2e18 <main+0x19e>
    2e16:	82 cf       	rjmp	.-252    	; 0x2d1c <main+0xa2>
    2e18:	f8 94       	cli
    2e1a:	40 90 44 1a 	lds	r4, 0x1A44	; 0x801a44 <_millis>
static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
	// Atomic tick reading
	i = _millis;
    2e1e:	50 90 45 1a 	lds	r5, 0x1A45	; 0x801a45 <_millis+0x1>
    2e22:	60 90 46 1a 	lds	r6, 0x1A46	; 0x801a46 <_millis+0x2>
    2e26:	70 90 47 1a 	lds	r7, 0x1A47	; 0x801a47 <_millis+0x3>
    2e2a:	78 94       	sei
	sei();
    2e2c:	0d db       	rcall	.-2534   	; 0x2448 <wizphy_getphylink>

		if((millis()-timer_link_1sec)> 1000)
		{
			//here every 1 sec
			timer_link_1sec = millis();
			if(wizphy_getphylink() == PHY_LINK_ON)
    2e2e:	81 30       	cpi	r24, 0x01	; 1
    2e30:	21 f4       	brne	.+8      	; 0x2e3a <main+0x1c0>
    2e32:	85 b1       	in	r24, 0x05	; 5
    2e34:	8f 7e       	andi	r24, 0xEF	; 239
			{
				LED0ON;
    2e36:	85 b9       	out	0x05, r24	; 5
    2e38:	71 cf       	rjmp	.-286    	; 0x2d1c <main+0xa2>
    2e3a:	85 b1       	in	r24, 0x05	; 5
    2e3c:	80 61       	ori	r24, 0x10	; 16
			}
			else
			{
				LED0OFF;
    2e3e:	85 b9       	out	0x05, r24	; 5
    2e40:	6d cf       	rjmp	.-294    	; 0x2d1c <main+0xa2>

00002e42 <spi_init>:

void
spi_init(void)
{
  // CS PIN for FLASH
  DDRD	|= BV(WIZNET_CS); // CS to OUT && Disable
    2e42:	8a b1       	in	r24, 0x0a	; 10
    2e44:	80 61       	ori	r24, 0x10	; 16
    2e46:	8a b9       	out	0x0a, r24	; 10
  SPI_WIZNET_DISABLE();
    2e48:	8b b1       	in	r24, 0x0b	; 11
    2e4a:	80 61       	ori	r24, 0x10	; 16
    2e4c:	8b b9       	out	0x0b, r24	; 11
  
  /* Initalize ports for communication with SPI units. */
  /* CSN=SS and must be output when master! */
  DDRB  |= BV(MOSI) | BV(SCK);
    2e4e:	84 b1       	in	r24, 0x04	; 4
    2e50:	86 60       	ori	r24, 0x06	; 6
    2e52:	84 b9       	out	0x04, r24	; 4
  PORTB |= BV(MOSI) | BV(SCK);
    2e54:	85 b1       	in	r24, 0x05	; 5
    2e56:	86 60       	ori	r24, 0x06	; 6
    2e58:	85 b9       	out	0x05, r24	; 5
  DDRD |= BV(CSN);
    2e5a:	8a b1       	in	r24, 0x0a	; 10
    2e5c:	80 64       	ori	r24, 0x40	; 64
    2e5e:	8a b9       	out	0x0a, r24	; 10
 
  /* Enables SPI, selects "master", clock rate FCK / 4 - 4Mhz, and SPI mode 0 */
  SPCR = BV(SPE) | BV(MSTR);
    2e60:	80 e5       	ldi	r24, 0x50	; 80
    2e62:	8c bd       	out	0x2c, r24	; 44
#if defined(SPI_8_MHZ)
  SPSR = BV(SPI2X); //FCK / 2 - 8Mhz
#elif defined (SPI_4_MHZ)
  SPSR = 0x0; //FCK / 4 - 4Mhz
#else
  SPSR = 0x0; //FCK / 4 - 4Mhz
    2e64:	1d bc       	out	0x2d, r1	; 45
    2e66:	08 95       	ret

00002e68 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    2e68:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	a8 95       	wdr
    2e70:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    2e74:	88 61       	ori	r24, 0x18	; 24
    2e76:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    2e7a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    2e7e:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    2e80:	e1 e6       	ldi	r30, 0x61	; 97
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 e8       	ldi	r24, 0x80	; 128
    2e86:	80 83       	st	Z, r24
  CLKPR = 0;
    2e88:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    2e8a:	78 94       	sei

  HAL_TimerInit();
    2e8c:	01 c0       	rjmp	.+2      	; 0x2e90 <HAL_TimerInit>
    2e8e:	08 95       	ret

00002e90 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
    2e90:	10 92 48 1b 	sts	0x1B48, r1	; 0x801b48 <halTimerIrqCount>
    2e94:	80 e1       	ldi	r24, 0x10	; 16
    2e96:	97 e2       	ldi	r25, 0x27	; 39
    2e98:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    2e9c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    2ea0:	e1 ea       	ldi	r30, 0xA1	; 161
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	88 e0       	ldi	r24, 0x08	; 8
    2ea6:	80 83       	st	Z, r24
    2ea8:	80 81       	ld	r24, Z
    2eaa:	82 60       	ori	r24, 0x02	; 2
    2eac:	80 83       	st	Z, r24
    2eae:	e2 e7       	ldi	r30, 0x72	; 114
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	82 60       	ori	r24, 0x02	; 2
    2eb6:	80 83       	st	Z, r24
    2eb8:	08 95       	ret

00002eba <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    2eba:	1f 92       	push	r1
    2ebc:	0f 92       	push	r0
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	0f 92       	push	r0
    2ec2:	11 24       	eor	r1, r1
    2ec4:	8f 93       	push	r24
  halTimerIrqCount++;
    2ec6:	80 91 48 1b 	lds	r24, 0x1B48	; 0x801b48 <halTimerIrqCount>
    2eca:	8f 5f       	subi	r24, 0xFF	; 255
    2ecc:	80 93 48 1b 	sts	0x1B48, r24	; 0x801b48 <halTimerIrqCount>
}
    2ed0:	8f 91       	pop	r24
    2ed2:	0f 90       	pop	r0
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	0f 90       	pop	r0
    2ed8:	1f 90       	pop	r1
    2eda:	18 95       	reti

00002edc <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
    2edc:	1f 92       	push	r1
    2ede:	0f 92       	push	r0
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	0f 92       	push	r0
    2ee4:	11 24       	eor	r1, r1
    2ee6:	8f 93       	push	r24
  halSleepTimerEvent = true;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <halSleepTimerEvent>
}
    2eee:	8f 91       	pop	r24
    2ef0:	0f 90       	pop	r0
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	0f 90       	pop	r0
    2ef6:	1f 90       	pop	r1
    2ef8:	18 95       	reti

00002efa <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
    2efe:	ec ef       	ldi	r30, 0xFC	; 252
    2f00:	f4 e0       	ldi	r31, 0x04	; 4
    2f02:	26 81       	ldd	r18, Z+6	; 0x06
    2f04:	37 81       	ldd	r19, Z+7	; 0x07
    2f06:	64 81       	ldd	r22, Z+4	; 0x04
    2f08:	75 81       	ldd	r23, Z+5	; 0x05
    2f0a:	26 17       	cp	r18, r22
    2f0c:	37 07       	cpc	r19, r23
    2f0e:	c9 f0       	breq	.+50     	; 0x2f42 <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
    2f10:	c0 85       	ldd	r28, Z+8	; 0x08
    2f12:	d1 85       	ldd	r29, Z+9	; 0x09
    2f14:	42 81       	ldd	r20, Z+2	; 0x02
    2f16:	53 81       	ldd	r21, Z+3	; 0x03
    2f18:	da 01       	movw	r26, r20
    2f1a:	11 96       	adiw	r26, 0x01	; 1
    2f1c:	b3 83       	std	Z+3, r27	; 0x03
    2f1e:	a2 83       	std	Z+2, r26	; 0x02
    2f20:	fe 01       	movw	r30, r28
    2f22:	e4 0f       	add	r30, r20
    2f24:	f5 1f       	adc	r31, r21
    2f26:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
    2f28:	6a 17       	cp	r22, r26
    2f2a:	7b 07       	cpc	r23, r27
    2f2c:	21 f4       	brne	.+8      	; 0x2f36 <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
    2f2e:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <txFifo+0x3>
    2f32:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <txFifo+0x2>
  txFifo.bytes++;
    2f36:	2f 5f       	subi	r18, 0xFF	; 255
    2f38:	3f 4f       	sbci	r19, 0xFF	; 255
    2f3a:	30 93 03 05 	sts	0x0503, r19	; 0x800503 <txFifo+0x7>
    2f3e:	20 93 02 05 	sts	0x0502, r18	; 0x800502 <txFifo+0x6>
}
    2f42:	df 91       	pop	r29
    2f44:	cf 91       	pop	r28
    2f46:	08 95       	ret

00002f48 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
    2f48:	4f b7       	in	r20, 0x3f	; 63
    2f4a:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
    2f4c:	e2 ef       	ldi	r30, 0xF2	; 242
    2f4e:	f4 e0       	ldi	r31, 0x04	; 4
    2f50:	20 85       	ldd	r18, Z+8	; 0x08
    2f52:	31 85       	ldd	r19, Z+9	; 0x09
    2f54:	80 81       	ld	r24, Z
    2f56:	91 81       	ldd	r25, Z+1	; 0x01
    2f58:	bc 01       	movw	r22, r24
    2f5a:	6f 5f       	subi	r22, 0xFF	; 255
    2f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5e:	71 83       	std	Z+1, r23	; 0x01
    2f60:	60 83       	st	Z, r22
    2f62:	d9 01       	movw	r26, r18
    2f64:	a8 0f       	add	r26, r24
    2f66:	b9 1f       	adc	r27, r25
    2f68:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
    2f6a:	60 81       	ld	r22, Z
    2f6c:	71 81       	ldd	r23, Z+1	; 0x01
    2f6e:	24 81       	ldd	r18, Z+4	; 0x04
    2f70:	35 81       	ldd	r19, Z+5	; 0x05
    2f72:	62 17       	cp	r22, r18
    2f74:	73 07       	cpc	r23, r19
    2f76:	21 f4       	brne	.+8      	; 0x2f80 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
    2f78:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <rxFifo+0x1>
    2f7c:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <rxFifo>
    rxFifo.bytes--;
    2f80:	e2 ef       	ldi	r30, 0xF2	; 242
    2f82:	f4 e0       	ldi	r31, 0x04	; 4
    2f84:	26 81       	ldd	r18, Z+6	; 0x06
    2f86:	37 81       	ldd	r19, Z+7	; 0x07
    2f88:	21 50       	subi	r18, 0x01	; 1
    2f8a:	31 09       	sbc	r19, r1
    2f8c:	37 83       	std	Z+7, r19	; 0x07
    2f8e:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
    2f90:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
    2f92:	08 95       	ret

00002f94 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
    2f94:	1f 92       	push	r1
    2f96:	0f 92       	push	r0
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	0f 92       	push	r0
    2f9c:	11 24       	eor	r1, r1
    2f9e:	0b b6       	in	r0, 0x3b	; 59
    2fa0:	0f 92       	push	r0
    2fa2:	8f 93       	push	r24
    2fa4:	ef 93       	push	r30
    2fa6:	ff 93       	push	r31
  udrEmpty = true;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
    2fae:	e9 ec       	ldi	r30, 0xC9	; 201
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	8f 7d       	andi	r24, 0xDF	; 223
    2fb6:	80 83       	st	Z, r24
}
    2fb8:	ff 91       	pop	r31
    2fba:	ef 91       	pop	r30
    2fbc:	8f 91       	pop	r24
    2fbe:	0f 90       	pop	r0
    2fc0:	0b be       	out	0x3b, r0	; 59
    2fc2:	0f 90       	pop	r0
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	0f 90       	pop	r0
    2fc8:	1f 90       	pop	r1
    2fca:	18 95       	reti

00002fcc <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
    2fcc:	1f 92       	push	r1
    2fce:	0f 92       	push	r0
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	0f 92       	push	r0
    2fd4:	11 24       	eor	r1, r1
    2fd6:	0b b6       	in	r0, 0x3b	; 59
    2fd8:	0f 92       	push	r0
    2fda:	2f 93       	push	r18
    2fdc:	3f 93       	push	r19
    2fde:	4f 93       	push	r20
    2fe0:	5f 93       	push	r21
    2fe2:	6f 93       	push	r22
    2fe4:	7f 93       	push	r23
    2fe6:	8f 93       	push	r24
    2fe8:	9f 93       	push	r25
    2fea:	af 93       	push	r26
    2fec:	bf 93       	push	r27
    2fee:	ef 93       	push	r30
    2ff0:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
    2ff2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
    2ff6:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
    2ffa:	8c 71       	andi	r24, 0x1C	; 28
    2ffc:	59 f5       	brne	.+86     	; 0x3054 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
    2ffe:	e2 ef       	ldi	r30, 0xF2	; 242
    3000:	f4 e0       	ldi	r31, 0x04	; 4
    3002:	46 81       	ldd	r20, Z+6	; 0x06
    3004:	57 81       	ldd	r21, Z+7	; 0x07
    3006:	84 81       	ldd	r24, Z+4	; 0x04
    3008:	95 81       	ldd	r25, Z+5	; 0x05
    300a:	48 17       	cp	r20, r24
    300c:	59 07       	cpc	r21, r25
    300e:	11 f1       	breq	.+68     	; 0x3054 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
    3010:	40 85       	ldd	r20, Z+8	; 0x08
    3012:	51 85       	ldd	r21, Z+9	; 0x09
    3014:	82 81       	ldd	r24, Z+2	; 0x02
    3016:	93 81       	ldd	r25, Z+3	; 0x03
    3018:	bc 01       	movw	r22, r24
    301a:	6f 5f       	subi	r22, 0xFF	; 255
    301c:	7f 4f       	sbci	r23, 0xFF	; 255
    301e:	73 83       	std	Z+3, r23	; 0x03
    3020:	62 83       	std	Z+2, r22	; 0x02
    3022:	da 01       	movw	r26, r20
    3024:	a8 0f       	add	r26, r24
    3026:	b9 1f       	adc	r27, r25
    3028:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
    302a:	22 81       	ldd	r18, Z+2	; 0x02
    302c:	33 81       	ldd	r19, Z+3	; 0x03
    302e:	84 81       	ldd	r24, Z+4	; 0x04
    3030:	95 81       	ldd	r25, Z+5	; 0x05
    3032:	28 17       	cp	r18, r24
    3034:	39 07       	cpc	r19, r25
    3036:	21 f4       	brne	.+8      	; 0x3040 <__vector_36+0x74>
      rxFifo.tail = 0;
    3038:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <rxFifo+0x3>
    303c:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <rxFifo+0x2>
    rxFifo.bytes++;
    3040:	e2 ef       	ldi	r30, 0xF2	; 242
    3042:	f4 e0       	ldi	r31, 0x04	; 4
    3044:	86 81       	ldd	r24, Z+6	; 0x06
    3046:	97 81       	ldd	r25, Z+7	; 0x07
    3048:	01 96       	adiw	r24, 0x01	; 1
    304a:	97 83       	std	Z+7, r25	; 0x07
    304c:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
    3054:	ff 91       	pop	r31
    3056:	ef 91       	pop	r30
    3058:	bf 91       	pop	r27
    305a:	af 91       	pop	r26
    305c:	9f 91       	pop	r25
    305e:	8f 91       	pop	r24
    3060:	7f 91       	pop	r23
    3062:	6f 91       	pop	r22
    3064:	5f 91       	pop	r21
    3066:	4f 91       	pop	r20
    3068:	3f 91       	pop	r19
    306a:	2f 91       	pop	r18
    306c:	0f 90       	pop	r0
    306e:	0b be       	out	0x3b, r0	; 59
    3070:	0f 90       	pop	r0
    3072:	0f be       	out	0x3f, r0	; 63
    3074:	0f 90       	pop	r0
    3076:	1f 90       	pop	r1
    3078:	18 95       	reti

0000307a <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
    307a:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <txFifo+0x6>
    307e:	90 91 03 05 	lds	r25, 0x0503	; 0x800503 <txFifo+0x7>
    3082:	00 97       	sbiw	r24, 0x00	; 0
    3084:	69 f1       	breq	.+90     	; 0x30e0 <HAL_UartTaskHandler+0x66>
    3086:	20 91 f1 04 	lds	r18, 0x04F1	; 0x8004f1 <udrEmpty>
    308a:	22 23       	and	r18, r18
    308c:	49 f1       	breq	.+82     	; 0x30e0 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
    308e:	ec ef       	ldi	r30, 0xFC	; 252
    3090:	f4 e0       	ldi	r31, 0x04	; 4
    3092:	60 85       	ldd	r22, Z+8	; 0x08
    3094:	71 85       	ldd	r23, Z+9	; 0x09
    3096:	20 81       	ld	r18, Z
    3098:	31 81       	ldd	r19, Z+1	; 0x01
    309a:	a9 01       	movw	r20, r18
    309c:	4f 5f       	subi	r20, 0xFF	; 255
    309e:	5f 4f       	sbci	r21, 0xFF	; 255
    30a0:	51 83       	std	Z+1, r21	; 0x01
    30a2:	40 83       	st	Z, r20
    30a4:	db 01       	movw	r26, r22
    30a6:	a2 0f       	add	r26, r18
    30a8:	b3 1f       	adc	r27, r19
    30aa:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
    30ac:	64 81       	ldd	r22, Z+4	; 0x04
    30ae:	75 81       	ldd	r23, Z+5	; 0x05
    30b0:	46 17       	cp	r20, r22
    30b2:	57 07       	cpc	r21, r23
    30b4:	21 f4       	brne	.+8      	; 0x30be <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
    30b6:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <txFifo+0x1>
    30ba:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <txFifo>
    txFifo.bytes--;
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	90 93 03 05 	sts	0x0503, r25	; 0x800503 <txFifo+0x7>
    30c4:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
    30c8:	9f b7       	in	r25, 0x3f	; 63
    30ca:	f8 94       	cli
      UDRx = byte;
    30cc:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
    30d0:	e9 ec       	ldi	r30, 0xC9	; 201
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	80 81       	ld	r24, Z
    30d6:	80 62       	ori	r24, 0x20	; 32
    30d8:	80 83       	st	Z, r24
      udrEmpty = false;
    30da:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <udrEmpty>
    ATOMIC_SECTION_LEAVE
    30de:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
    30e0:	2f b7       	in	r18, 0x3f	; 63
    30e2:	f8 94       	cli
      new = newData;
    30e4:	90 91 f0 04 	lds	r25, 0x04F0	; 0x8004f0 <newData>
      newData = false;
    30e8:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <newData>
      bytes = rxFifo.bytes;
    30ec:	40 91 f8 04 	lds	r20, 0x04F8	; 0x8004f8 <rxFifo+0x6>
    30f0:	50 91 f9 04 	lds	r21, 0x04F9	; 0x8004f9 <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
    30f4:	2f bf       	out	0x3f, r18	; 63

    if (new)
    30f6:	99 23       	and	r25, r25
    30f8:	11 f0       	breq	.+4      	; 0x30fe <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
    30fa:	ca 01       	movw	r24, r20
    30fc:	aa cb       	rjmp	.-2220   	; 0x2852 <HAL_UartBytesReceived>
    30fe:	08 95       	ret

00003100 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    3100:	e9 e4       	ldi	r30, 0x49	; 73
    3102:	fb e1       	ldi	r31, 0x1B	; 27
    3104:	14 82       	std	Z+4, r1	; 0x04
    3106:	15 82       	std	Z+5, r1	; 0x05
    3108:	11 82       	std	Z+1, r1	; 0x01
    310a:	10 82       	st	Z, r1
    310c:	17 a2       	std	Z+39, r1	; 0x27
    310e:	16 a2       	std	Z+38, r1	; 0x26
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	0a c0       	rjmp	.+20     	; 0x3128 <NWK_Init+0x28>
    3114:	e8 2f       	mov	r30, r24
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	33 96       	adiw	r30, 0x03	; 3
    311a:	ee 0f       	add	r30, r30
    311c:	ff 1f       	adc	r31, r31
    311e:	e7 5b       	subi	r30, 0xB7	; 183
    3120:	f4 4e       	sbci	r31, 0xE4	; 228
    3122:	11 82       	std	Z+1, r1	; 0x01
    3124:	10 82       	st	Z, r1
    3126:	8f 5f       	subi	r24, 0xFF	; 255
    3128:	80 31       	cpi	r24, 0x10	; 16
    312a:	a0 f3       	brcs	.-24     	; 0x3114 <NWK_Init+0x14>
    312c:	39 d6       	rcall	.+3186   	; 0x3da0 <nwkTxInit>
    312e:	8d d5       	rcall	.+2842   	; 0x3c4a <nwkRxInit>
    3130:	06 d1       	rcall	.+524    	; 0x333e <nwkFrameInit>
    3132:	c5 d0       	rcall	.+394    	; 0x32be <nwkDataReqInit>
    3134:	bd c1       	rjmp	.+890    	; 0x34b0 <nwkRouteInit>
    3136:	08 95       	ret

00003138 <NWK_SetAddr>:
    3138:	90 93 4a 1b 	sts	0x1B4A, r25	; 0x801b4a <nwkIb+0x1>
    313c:	80 93 49 1b 	sts	0x1B49, r24	; 0x801b49 <nwkIb>
    3140:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <PHY_SetShortAddr>
    3144:	08 95       	ret

00003146 <NWK_SetPanId>:
    3146:	90 93 4c 1b 	sts	0x1B4C, r25	; 0x801b4c <nwkIb+0x3>
    314a:	80 93 4b 1b 	sts	0x1B4B, r24	; 0x801b4b <nwkIb+0x2>
    314e:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <PHY_SetPanId>
    3152:	08 95       	ret

00003154 <NWK_OpenEndpoint>:
    3154:	e8 2f       	mov	r30, r24
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	33 96       	adiw	r30, 0x03	; 3
    315a:	ee 0f       	add	r30, r30
    315c:	ff 1f       	adc	r31, r31
    315e:	e7 5b       	subi	r30, 0xB7	; 183
    3160:	f4 4e       	sbci	r31, 0xE4	; 228
    3162:	71 83       	std	Z+1, r23	; 0x01
    3164:	60 83       	st	Z, r22
    3166:	08 95       	ret

00003168 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    3168:	c2 d5       	rcall	.+2948   	; 0x3cee <nwkRxTaskHandler>
  nwkTxTaskHandler();
    316a:	44 d7       	rcall	.+3720   	; 0x3ff4 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    316c:	d1 c0       	rjmp	.+418    	; 0x3310 <nwkDataReqTaskHandler>
    316e:	08 95       	ret

00003170 <nwkDataReqConfirm>:
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    3170:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <nwkDataReqQueue>
    3174:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <nwkDataReqQueue+0x1>
    3178:	a8 17       	cp	r26, r24
    317a:	b9 07       	cpc	r27, r25
    317c:	41 f4       	brne	.+16     	; 0x318e <nwkDataReqConfirm+0x1e>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    317e:	2d 91       	ld	r18, X+
    3180:	3c 91       	ld	r19, X
    3182:	30 93 07 05 	sts	0x0507, r19	; 0x800507 <nwkDataReqQueue+0x1>
    3186:	20 93 06 05 	sts	0x0506, r18	; 0x800506 <nwkDataReqQueue>
    318a:	0b c0       	rjmp	.+22     	; 0x31a2 <nwkDataReqConfirm+0x32>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    318c:	df 01       	movw	r26, r30
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    318e:	ed 91       	ld	r30, X+
    3190:	fc 91       	ld	r31, X
    3192:	11 97       	sbiw	r26, 0x01	; 1
    3194:	8e 17       	cp	r24, r30
    3196:	9f 07       	cpc	r25, r31
    3198:	c9 f7       	brne	.-14     	; 0x318c <nwkDataReqConfirm+0x1c>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    319a:	20 81       	ld	r18, Z
    319c:	31 81       	ldd	r19, Z+1	; 0x01
    319e:	2d 93       	st	X+, r18
    31a0:	3c 93       	st	X, r19
  }

  nwkIb.lock--;
    31a2:	e9 e4       	ldi	r30, 0x49	; 73
    31a4:	fb e1       	ldi	r31, 0x1B	; 27
    31a6:	26 a1       	ldd	r18, Z+38	; 0x26
    31a8:	37 a1       	ldd	r19, Z+39	; 0x27
    31aa:	21 50       	subi	r18, 0x01	; 1
    31ac:	31 09       	sbc	r19, r1
    31ae:	37 a3       	std	Z+39, r19	; 0x27
    31b0:	26 a3       	std	Z+38, r18	; 0x26
  req->confirm(req);
    31b2:	dc 01       	movw	r26, r24
    31b4:	1d 96       	adiw	r26, 0x0d	; 13
    31b6:	ed 91       	ld	r30, X+
    31b8:	fc 91       	ld	r31, X
    31ba:	1e 97       	sbiw	r26, 0x0e	; 14
    31bc:	19 95       	eicall
    31be:	08 95       	ret

000031c0 <nwkDataReqSendFrame>:
/*************************************************************************//**
  @brief Prepares and send outgoing frame based on the request @a req parameters
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
    31c0:	0f 93       	push	r16
    31c2:	1f 93       	push	r17
    31c4:	cf 93       	push	r28
    31c6:	df 93       	push	r29
    31c8:	8c 01       	movw	r16, r24
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    31ca:	c6 d0       	rcall	.+396    	; 0x3358 <nwkFrameAlloc>
    31cc:	ec 01       	movw	r28, r24
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	29 f4       	brne	.+10     	; 0x31dc <nwkDataReqSendFrame+0x1c>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    31d2:	82 e0       	ldi	r24, 0x02	; 2
    31d4:	f8 01       	movw	r30, r16
    31d6:	84 83       	std	Z+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    31d8:	87 87       	std	Z+15, r24	; 0x0f
    return;
    31da:	50 c0       	rjmp	.+160    	; 0x327c <nwkDataReqSendFrame+0xbc>
  }

  req->frame = frame;
    31dc:	f8 01       	movw	r30, r16
    31de:	93 83       	std	Z+3, r25	; 0x03
    31e0:	82 83       	std	Z+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	84 83       	std	Z+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    31e6:	fe 01       	movw	r30, r28
    31e8:	e9 57       	subi	r30, 0x79	; 121
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	83 e4       	ldi	r24, 0x43	; 67
    31ee:	99 e1       	ldi	r25, 0x19	; 25
    31f0:	91 83       	std	Z+1, r25	; 0x01
    31f2:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    31f4:	f8 01       	movw	r30, r16
    31f6:	81 85       	ldd	r24, Z+9	; 0x09
    31f8:	82 fb       	bst	r24, 2
    31fa:	88 27       	eor	r24, r24
    31fc:	80 f9       	bld	r24, 0
    31fe:	fe 01       	movw	r30, r28
    3200:	ea 57       	subi	r30, 0x7A	; 122
    3202:	ff 4f       	sbci	r31, 0xFF	; 255
    3204:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    3206:	f8 01       	movw	r30, r16
    3208:	91 85       	ldd	r25, Z+9	; 0x09
    320a:	8b 85       	ldd	r24, Y+11	; 0x0b
    320c:	90 fb       	bst	r25, 0
    320e:	80 f9       	bld	r24, 0
    3210:	8b 87       	std	Y+11, r24	; 0x0b
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    3212:	91 85       	ldd	r25, Z+9	; 0x09
    3214:	93 fb       	bst	r25, 3
    3216:	99 27       	eor	r25, r25
    3218:	90 f9       	bld	r25, 0
    321a:	90 fb       	bst	r25, 0
    321c:	82 f9       	bld	r24, 2
    321e:	8b 87       	std	Y+11, r24	; 0x0b
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    3220:	e9 e4       	ldi	r30, 0x49	; 73
    3222:	fb e1       	ldi	r31, 0x1B	; 27
    3224:	84 81       	ldd	r24, Z+4	; 0x04
    3226:	8f 5f       	subi	r24, 0xFF	; 255
    3228:	84 83       	std	Z+4, r24	; 0x04
    322a:	8c 87       	std	Y+12, r24	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    322c:	80 81       	ld	r24, Z
    322e:	91 81       	ldd	r25, Z+1	; 0x01
    3230:	9e 87       	std	Y+14, r25	; 0x0e
    3232:	8d 87       	std	Y+13, r24	; 0x0d
  frame->header.nwkDstAddr = req->dstAddr;
    3234:	f8 01       	movw	r30, r16
    3236:	85 81       	ldd	r24, Z+5	; 0x05
    3238:	96 81       	ldd	r25, Z+6	; 0x06
    323a:	98 8b       	std	Y+16, r25	; 0x10
    323c:	8f 87       	std	Y+15, r24	; 0x0f
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    323e:	80 85       	ldd	r24, Z+8	; 0x08
    3240:	98 2f       	mov	r25, r24
    3242:	9f 70       	andi	r25, 0x0F	; 15
    3244:	89 89       	ldd	r24, Y+17	; 0x11
    3246:	80 7f       	andi	r24, 0xF0	; 240
    3248:	89 2b       	or	r24, r25
    324a:	89 8b       	std	Y+17, r24	; 0x11
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    324c:	97 81       	ldd	r25, Z+7	; 0x07
    324e:	92 95       	swap	r25
    3250:	90 7f       	andi	r25, 0xF0	; 240
    3252:	8f 70       	andi	r24, 0x0F	; 15
    3254:	89 2b       	or	r24, r25
    3256:	89 8b       	std	Y+17, r24	; 0x11

  memcpy(frame->payload, req->data, req->size);
    3258:	44 85       	ldd	r20, Z+12	; 0x0c
    325a:	62 85       	ldd	r22, Z+10	; 0x0a
    325c:	73 85       	ldd	r23, Z+11	; 0x0b
    325e:	fe 01       	movw	r30, r28
    3260:	ef 57       	subi	r30, 0x7F	; 127
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	50 e0       	ldi	r21, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	91 81       	ldd	r25, Z+1	; 0x01
    326a:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <memcpy>
  frame->size += req->size;
    326e:	f8 01       	movw	r30, r16
    3270:	84 85       	ldd	r24, Z+12	; 0x0c
    3272:	99 81       	ldd	r25, Y+1	; 0x01
    3274:	89 0f       	add	r24, r25
    3276:	89 83       	std	Y+1, r24	; 0x01

  nwkTxFrame(frame);
    3278:	ce 01       	movw	r24, r28
    327a:	b5 d5       	rcall	.+2922   	; 0x3de6 <nwkTxFrame>
}
    327c:	df 91       	pop	r29
    327e:	cf 91       	pop	r28
    3280:	1f 91       	pop	r17
    3282:	0f 91       	pop	r16
    3284:	08 95       	ret

00003286 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    3286:	e0 91 06 05 	lds	r30, 0x0506	; 0x800506 <nwkDataReqQueue>
    328a:	f0 91 07 05 	lds	r31, 0x0507	; 0x800507 <nwkDataReqQueue+0x1>
    328e:	13 c0       	rjmp	.+38     	; 0x32b6 <nwkDataReqTxConf+0x30>
  {
    if (req->frame == frame)
    3290:	22 81       	ldd	r18, Z+2	; 0x02
    3292:	33 81       	ldd	r19, Z+3	; 0x03
    3294:	28 17       	cp	r18, r24
    3296:	39 07       	cpc	r19, r25
    3298:	59 f4       	brne	.+22     	; 0x32b0 <nwkDataReqTxConf+0x2a>
    {
      req->status = frame->tx.status;
    329a:	dc 01       	movw	r26, r24
    329c:	ad 57       	subi	r26, 0x7D	; 125
    329e:	bf 4f       	sbci	r27, 0xFF	; 255
    32a0:	2c 91       	ld	r18, X
    32a2:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    32a4:	13 96       	adiw	r26, 0x03	; 3
    32a6:	2c 91       	ld	r18, X
    32a8:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    32aa:	22 e0       	ldi	r18, 0x02	; 2
    32ac:	24 83       	std	Z+4, r18	; 0x04
      break;
    32ae:	05 c0       	rjmp	.+10     	; 0x32ba <nwkDataReqTxConf+0x34>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    32b0:	01 90       	ld	r0, Z+
    32b2:	f0 81       	ld	r31, Z
    32b4:	e0 2d       	mov	r30, r0
    32b6:	30 97       	sbiw	r30, 0x00	; 0
    32b8:	59 f7       	brne	.-42     	; 0x3290 <nwkDataReqTxConf+0xa>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    32ba:	7f c0       	rjmp	.+254    	; 0x33ba <nwkFrameFree>
    32bc:	08 95       	ret

000032be <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    32be:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <nwkDataReqQueue+0x1>
    32c2:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <nwkDataReqQueue>
    32c6:	08 95       	ret

000032c8 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    32c8:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    32ca:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    32cc:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    32ce:	13 82       	std	Z+3, r1	; 0x03
    32d0:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    32d2:	a9 e4       	ldi	r26, 0x49	; 73
    32d4:	bb e1       	ldi	r27, 0x1B	; 27
    32d6:	96 96       	adiw	r26, 0x26	; 38
    32d8:	8d 91       	ld	r24, X+
    32da:	9c 91       	ld	r25, X
    32dc:	97 97       	sbiw	r26, 0x27	; 39
    32de:	01 96       	adiw	r24, 0x01	; 1
    32e0:	97 96       	adiw	r26, 0x27	; 39
    32e2:	9c 93       	st	X, r25
    32e4:	8e 93       	st	-X, r24
    32e6:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
    32e8:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <nwkDataReqQueue>
    32ec:	90 91 07 05 	lds	r25, 0x0507	; 0x800507 <nwkDataReqQueue+0x1>
    32f0:	00 97       	sbiw	r24, 0x00	; 0
    32f2:	39 f4       	brne	.+14     	; 0x3302 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    32f4:	11 82       	std	Z+1, r1	; 0x01
    32f6:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    32f8:	f0 93 07 05 	sts	0x0507, r31	; 0x800507 <nwkDataReqQueue+0x1>
    32fc:	e0 93 06 05 	sts	0x0506, r30	; 0x800506 <nwkDataReqQueue>
    3300:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    3302:	91 83       	std	Z+1, r25	; 0x01
    3304:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    3306:	f0 93 07 05 	sts	0x0507, r31	; 0x800507 <nwkDataReqQueue+0x1>
    330a:	e0 93 06 05 	sts	0x0506, r30	; 0x800506 <nwkDataReqQueue>
    330e:	08 95       	ret

00003310 <nwkDataReqTaskHandler>:
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    3310:	e0 91 06 05 	lds	r30, 0x0506	; 0x800506 <nwkDataReqQueue>
    3314:	f0 91 07 05 	lds	r31, 0x0507	; 0x800507 <nwkDataReqQueue+0x1>
    3318:	0f c0       	rjmp	.+30     	; 0x3338 <nwkDataReqTaskHandler+0x28>
  {
    switch (req->state)
    331a:	84 81       	ldd	r24, Z+4	; 0x04
    331c:	88 23       	and	r24, r24
    331e:	19 f0       	breq	.+6      	; 0x3326 <nwkDataReqTaskHandler+0x16>
    3320:	82 30       	cpi	r24, 0x02	; 2
    3322:	21 f0       	breq	.+8      	; 0x332c <nwkDataReqTaskHandler+0x1c>
    3324:	06 c0       	rjmp	.+12     	; 0x3332 <nwkDataReqTaskHandler+0x22>
    {
      case NWK_DATA_REQ_STATE_INITIAL:
      {
        nwkDataReqSendFrame(req);
    3326:	cf 01       	movw	r24, r30
    3328:	4b cf       	rjmp	.-362    	; 0x31c0 <nwkDataReqSendFrame>
        return;
    332a:	08 95       	ret
      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;

      case NWK_DATA_REQ_STATE_CONFIRM:
      {
        nwkDataReqConfirm(req);
    332c:	cf 01       	movw	r24, r30
    332e:	20 cf       	rjmp	.-448    	; 0x3170 <nwkDataReqConfirm>
        return;
    3330:	08 95       	ret
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    3332:	01 90       	ld	r0, Z+
    3334:	f0 81       	ld	r31, Z
    3336:	e0 2d       	mov	r30, r0
    3338:	30 97       	sbiw	r30, 0x00	; 0
    333a:	79 f7       	brne	.-34     	; 0x331a <nwkDataReqTaskHandler+0xa>
    333c:	08 95       	ret

0000333e <nwkFrameInit>:
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	08 c0       	rjmp	.+16     	; 0x3352 <nwkFrameInit+0x14>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    3342:	99 e8       	ldi	r25, 0x89	; 137
    3344:	89 9f       	mul	r24, r25
    3346:	f0 01       	movw	r30, r0
    3348:	11 24       	eor	r1, r1
    334a:	e8 5f       	subi	r30, 0xF8	; 248
    334c:	fa 4f       	sbci	r31, 0xFA	; 250
    334e:	10 82       	st	Z, r1
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    3350:	8f 5f       	subi	r24, 0xFF	; 255
    3352:	8e 31       	cpi	r24, 0x1E	; 30
    3354:	b0 f3       	brcs	.-20     	; 0x3342 <nwkFrameInit+0x4>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    3356:	08 95       	ret

00003358 <nwkFrameAlloc>:
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	2a c0       	rjmp	.+84     	; 0x33b0 <nwkFrameAlloc+0x58>
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    335c:	28 2f       	mov	r18, r24
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	99 e8       	ldi	r25, 0x89	; 137
    3362:	92 9f       	mul	r25, r18
    3364:	f0 01       	movw	r30, r0
    3366:	93 9f       	mul	r25, r19
    3368:	f0 0d       	add	r31, r0
    336a:	11 24       	eor	r1, r1
    336c:	e8 5f       	subi	r30, 0xF8	; 248
    336e:	fa 4f       	sbci	r31, 0xFA	; 250
    3370:	90 81       	ld	r25, Z
    3372:	91 11       	cpse	r25, r1
    3374:	1c c0       	rjmp	.+56     	; 0x33ae <nwkFrameAlloc+0x56>
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    3376:	69 e8       	ldi	r22, 0x89	; 137
    3378:	62 9f       	mul	r22, r18
    337a:	a0 01       	movw	r20, r0
    337c:	63 9f       	mul	r22, r19
    337e:	50 0d       	add	r21, r0
    3380:	11 24       	eor	r1, r1
    3382:	cf 01       	movw	r24, r30
    3384:	11 92       	st	Z+, r1
    3386:	6a 95       	dec	r22
    3388:	e9 f7       	brne	.-6      	; 0x3384 <nwkFrameAlloc+0x2c>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    338a:	20 e1       	ldi	r18, 0x10	; 16
    338c:	fc 01       	movw	r30, r24
    338e:	21 83       	std	Z+1, r18	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    3390:	46 5e       	subi	r20, 0xE6	; 230
    3392:	5a 4f       	sbci	r21, 0xFA	; 250
    3394:	ef 57       	subi	r30, 0x7F	; 127
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	51 83       	std	Z+1, r21	; 0x01
    339a:	40 83       	st	Z, r20
      nwkIb.lock++;
    339c:	e9 e4       	ldi	r30, 0x49	; 73
    339e:	fb e1       	ldi	r31, 0x1B	; 27
    33a0:	26 a1       	ldd	r18, Z+38	; 0x26
    33a2:	37 a1       	ldd	r19, Z+39	; 0x27
    33a4:	2f 5f       	subi	r18, 0xFF	; 255
    33a6:	3f 4f       	sbci	r19, 0xFF	; 255
    33a8:	37 a3       	std	Z+39, r19	; 0x27
    33aa:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    33ac:	08 95       	ret
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    33ae:	8f 5f       	subi	r24, 0xFF	; 255
    33b0:	8e 31       	cpi	r24, 0x1E	; 30
    33b2:	a0 f2       	brcs	.-88     	; 0x335c <nwkFrameAlloc+0x4>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	90 e0       	ldi	r25, 0x00	; 0
}
    33b8:	08 95       	ret

000033ba <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    33ba:	fc 01       	movw	r30, r24
    33bc:	10 82       	st	Z, r1
  nwkIb.lock--;
    33be:	e9 e4       	ldi	r30, 0x49	; 73
    33c0:	fb e1       	ldi	r31, 0x1B	; 27
    33c2:	86 a1       	ldd	r24, Z+38	; 0x26
    33c4:	97 a1       	ldd	r25, Z+39	; 0x27
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	97 a3       	std	Z+39, r25	; 0x27
    33ca:	86 a3       	std	Z+38, r24	; 0x26
    33cc:	08 95       	ret

000033ce <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    33ce:	00 97       	sbiw	r24, 0x00	; 0
    33d0:	21 f0       	breq	.+8      	; 0x33da <nwkFrameNext+0xc>
    frame = nwkFrameFrames;
  else
    frame++;
    33d2:	fc 01       	movw	r30, r24
    33d4:	e7 57       	subi	r30, 0x77	; 119
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	08 c0       	rjmp	.+16     	; 0x33ea <nwkFrameNext+0x1c>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    33da:	e8 e0       	ldi	r30, 0x08	; 8
    33dc:	f5 e0       	ldi	r31, 0x05	; 5
    33de:	05 c0       	rjmp	.+10     	; 0x33ea <nwkFrameNext+0x1c>
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    33e0:	80 81       	ld	r24, Z
    33e2:	81 11       	cpse	r24, r1
    33e4:	09 c0       	rjmp	.+18     	; 0x33f8 <nwkFrameNext+0x2a>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    33e6:	e7 57       	subi	r30, 0x77	; 119
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	85 e1       	ldi	r24, 0x15	; 21
    33ec:	e6 31       	cpi	r30, 0x16	; 22
    33ee:	f8 07       	cpc	r31, r24
    33f0:	b8 f3       	brcs	.-18     	; 0x33e0 <nwkFrameNext+0x12>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	08 95       	ret
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
    33f8:	8e 2f       	mov	r24, r30
    33fa:	9f 2f       	mov	r25, r31
  }

  return NULL;
}
    33fc:	08 95       	ret

000033fe <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    33fe:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    3400:	dc 01       	movw	r26, r24
    3402:	ad 57       	subi	r26, 0x7D	; 125
    3404:	bf 4f       	sbci	r27, 0xFF	; 255
    3406:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    3408:	a9 e4       	ldi	r26, 0x49	; 73
    340a:	bb e1       	ldi	r27, 0x1B	; 27
    340c:	14 96       	adiw	r26, 0x04	; 4
    340e:	9c 91       	ld	r25, X
    3410:	14 97       	sbiw	r26, 0x04	; 4
    3412:	9f 5f       	subi	r25, 0xFF	; 255
    3414:	14 96       	adiw	r26, 0x04	; 4
    3416:	9c 93       	st	X, r25
    3418:	14 97       	sbiw	r26, 0x04	; 4
    341a:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    341c:	8d 91       	ld	r24, X+
    341e:	9c 91       	ld	r25, X
    3420:	96 87       	std	Z+14, r25	; 0x0e
    3422:	85 87       	std	Z+13, r24	; 0x0d
    3424:	08 95       	ret

00003426 <nwkRouteNormalizeRanks>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	12 c0       	rjmp	.+36     	; 0x344e <nwkRouteNormalizeRanks+0x28>
    342a:	29 2f       	mov	r18, r25
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	f9 01       	movw	r30, r18
    3430:	ee 0f       	add	r30, r30
    3432:	ff 1f       	adc	r31, r31
    3434:	ee 0f       	add	r30, r30
    3436:	ff 1f       	adc	r31, r31
    3438:	ee 0f       	add	r30, r30
    343a:	ff 1f       	adc	r31, r31
    343c:	e2 1b       	sub	r30, r18
    343e:	f3 0b       	sbc	r31, r19
    3440:	ea 5e       	subi	r30, 0xEA	; 234
    3442:	fa 4e       	sbci	r31, 0xEA	; 234
    3444:	85 81       	ldd	r24, Z+5	; 0x05
    3446:	86 95       	lsr	r24
    3448:	8f 5f       	subi	r24, 0xFF	; 255
    344a:	85 83       	std	Z+5, r24	; 0x05
    344c:	9f 5f       	subi	r25, 0xFF	; 255
    344e:	94 36       	cpi	r25, 0x64	; 100
    3450:	60 f3       	brcs	.-40     	; 0x342a <nwkRouteNormalizeRanks+0x4>
    3452:	08 95       	ret

00003454 <nwkRouteSendRouteError>:
    3454:	df 92       	push	r13
    3456:	ef 92       	push	r14
    3458:	ff 92       	push	r15
    345a:	0f 93       	push	r16
    345c:	1f 93       	push	r17
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	8c 01       	movw	r16, r24
    3464:	7b 01       	movw	r14, r22
    3466:	d4 2e       	mov	r13, r20
    3468:	77 df       	rcall	.-274    	; 0x3358 <nwkFrameAlloc>
    346a:	ec 01       	movw	r28, r24
    346c:	00 97       	sbiw	r24, 0x00	; 0
    346e:	c1 f0       	breq	.+48     	; 0x34a0 <nwkRouteSendRouteError+0x4c>
    3470:	c6 df       	rcall	.-116    	; 0x33fe <nwkFrameCommandInit>
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	8a 5f       	subi	r24, 0xFA	; 250
    3476:	89 83       	std	Y+1, r24	; 0x01
    3478:	fe 01       	movw	r30, r28
    347a:	e9 57       	subi	r30, 0x79	; 121
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	11 82       	std	Z+1, r1	; 0x01
    3480:	10 82       	st	Z, r1
    3482:	18 8b       	std	Y+16, r17	; 0x10
    3484:	0f 87       	std	Y+15, r16	; 0x0f
    3486:	36 97       	sbiw	r30, 0x06	; 6
    3488:	01 90       	ld	r0, Z+
    348a:	f0 81       	ld	r31, Z
    348c:	e0 2d       	mov	r30, r0
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	80 83       	st	Z, r24
    3492:	12 83       	std	Z+2, r17	; 0x02
    3494:	01 83       	std	Z+1, r16	; 0x01
    3496:	f4 82       	std	Z+4, r15	; 0x04
    3498:	e3 82       	std	Z+3, r14	; 0x03
    349a:	d5 82       	std	Z+5, r13	; 0x05
    349c:	ce 01       	movw	r24, r28
    349e:	a3 d4       	rcall	.+2374   	; 0x3de6 <nwkTxFrame>
    34a0:	df 91       	pop	r29
    34a2:	cf 91       	pop	r28
    34a4:	1f 91       	pop	r17
    34a6:	0f 91       	pop	r16
    34a8:	ff 90       	pop	r15
    34aa:	ef 90       	pop	r14
    34ac:	df 90       	pop	r13
    34ae:	08 95       	ret

000034b0 <nwkRouteInit>:
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	16 c0       	rjmp	.+44     	; 0x34e0 <nwkRouteInit+0x30>
    34b4:	28 2f       	mov	r18, r24
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	f9 01       	movw	r30, r18
    34ba:	ee 0f       	add	r30, r30
    34bc:	ff 1f       	adc	r31, r31
    34be:	ee 0f       	add	r30, r30
    34c0:	ff 1f       	adc	r31, r31
    34c2:	ee 0f       	add	r30, r30
    34c4:	ff 1f       	adc	r31, r31
    34c6:	e2 1b       	sub	r30, r18
    34c8:	f3 0b       	sbc	r31, r19
    34ca:	ea 5e       	subi	r30, 0xEA	; 234
    34cc:	fa 4e       	sbci	r31, 0xEA	; 234
    34ce:	2f ef       	ldi	r18, 0xFF	; 255
    34d0:	3f ef       	ldi	r19, 0xFF	; 255
    34d2:	32 83       	std	Z+2, r19	; 0x02
    34d4:	21 83       	std	Z+1, r18	; 0x01
    34d6:	90 81       	ld	r25, Z
    34d8:	9e 7f       	andi	r25, 0xFE	; 254
    34da:	90 83       	st	Z, r25
    34dc:	15 82       	std	Z+5, r1	; 0x05
    34de:	8f 5f       	subi	r24, 0xFF	; 255
    34e0:	84 36       	cpi	r24, 0x64	; 100
    34e2:	40 f3       	brcs	.-48     	; 0x34b4 <nwkRouteInit+0x4>
    34e4:	08 95       	ret

000034e6 <NWK_RouteFindEntry>:
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	ec 01       	movw	r28, r24
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	2a c0       	rjmp	.+84     	; 0x3544 <NWK_RouteFindEntry+0x5e>
    34f0:	29 2f       	mov	r18, r25
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	f9 01       	movw	r30, r18
    34f6:	ee 0f       	add	r30, r30
    34f8:	ff 1f       	adc	r31, r31
    34fa:	ee 0f       	add	r30, r30
    34fc:	ff 1f       	adc	r31, r31
    34fe:	ee 0f       	add	r30, r30
    3500:	ff 1f       	adc	r31, r31
    3502:	e2 1b       	sub	r30, r18
    3504:	f3 0b       	sbc	r31, r19
    3506:	ea 5e       	subi	r30, 0xEA	; 234
    3508:	fa 4e       	sbci	r31, 0xEA	; 234
    350a:	41 81       	ldd	r20, Z+1	; 0x01
    350c:	52 81       	ldd	r21, Z+2	; 0x02
    350e:	4c 17       	cp	r20, r28
    3510:	5d 07       	cpc	r21, r29
    3512:	b9 f4       	brne	.+46     	; 0x3542 <NWK_RouteFindEntry+0x5c>
    3514:	f9 01       	movw	r30, r18
    3516:	ee 0f       	add	r30, r30
    3518:	ff 1f       	adc	r31, r31
    351a:	ee 0f       	add	r30, r30
    351c:	ff 1f       	adc	r31, r31
    351e:	ee 0f       	add	r30, r30
    3520:	ff 1f       	adc	r31, r31
    3522:	e2 1b       	sub	r30, r18
    3524:	f3 0b       	sbc	r31, r19
    3526:	ea 5e       	subi	r30, 0xEA	; 234
    3528:	fa 4e       	sbci	r31, 0xEA	; 234
    352a:	80 81       	ld	r24, Z
    352c:	81 fb       	bst	r24, 1
    352e:	aa 27       	eor	r26, r26
    3530:	a0 f9       	bld	r26, 0
    3532:	b0 e0       	ldi	r27, 0x00	; 0
    3534:	46 2f       	mov	r20, r22
    3536:	50 e0       	ldi	r21, 0x00	; 0
    3538:	a4 17       	cp	r26, r20
    353a:	b5 07       	cpc	r27, r21
    353c:	11 f4       	brne	.+4      	; 0x3542 <NWK_RouteFindEntry+0x5c>
    353e:	cf 01       	movw	r24, r30
    3540:	05 c0       	rjmp	.+10     	; 0x354c <NWK_RouteFindEntry+0x66>
    3542:	9f 5f       	subi	r25, 0xFF	; 255
    3544:	94 36       	cpi	r25, 0x64	; 100
    3546:	a0 f2       	brcs	.-88     	; 0x34f0 <NWK_RouteFindEntry+0xa>
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    3550:	08 95       	ret

00003552 <NWK_RouteNewEntry>:
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	a0 e0       	ldi	r26, 0x00	; 0
    3556:	b0 e0       	ldi	r27, 0x00	; 0
    3558:	e6 e1       	ldi	r30, 0x16	; 22
    355a:	f5 e1       	ldi	r31, 0x15	; 21
    355c:	13 c0       	rjmp	.+38     	; 0x3584 <NWK_RouteNewEntry+0x32>
    355e:	90 81       	ld	r25, Z
    3560:	90 fd       	sbrc	r25, 0
    3562:	0e c0       	rjmp	.+28     	; 0x3580 <NWK_RouteNewEntry+0x2e>
    3564:	95 81       	ldd	r25, Z+5	; 0x05
    3566:	99 23       	and	r25, r25
    3568:	81 f0       	breq	.+32     	; 0x358a <NWK_RouteNewEntry+0x38>
    356a:	10 97       	sbiw	r26, 0x00	; 0
    356c:	31 f0       	breq	.+12     	; 0x357a <NWK_RouteNewEntry+0x28>
    356e:	15 96       	adiw	r26, 0x05	; 5
    3570:	2c 91       	ld	r18, X
    3572:	15 97       	sbiw	r26, 0x05	; 5
    3574:	92 17       	cp	r25, r18
    3576:	18 f0       	brcs	.+6      	; 0x357e <NWK_RouteNewEntry+0x2c>
    3578:	03 c0       	rjmp	.+6      	; 0x3580 <NWK_RouteNewEntry+0x2e>
    357a:	df 01       	movw	r26, r30
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <NWK_RouteNewEntry+0x2e>
    357e:	df 01       	movw	r26, r30
    3580:	8f 5f       	subi	r24, 0xFF	; 255
    3582:	37 96       	adiw	r30, 0x07	; 7
    3584:	84 36       	cpi	r24, 0x64	; 100
    3586:	58 f3       	brcs	.-42     	; 0x355e <NWK_RouteNewEntry+0xc>
    3588:	fd 01       	movw	r30, r26
    358a:	80 81       	ld	r24, Z
    358c:	8d 70       	andi	r24, 0x0D	; 13
    358e:	80 63       	ori	r24, 0x30	; 48
    3590:	80 83       	st	Z, r24
    3592:	80 e8       	ldi	r24, 0x80	; 128
    3594:	85 83       	std	Z+5, r24	; 0x05
    3596:	cf 01       	movw	r24, r30
    3598:	08 95       	ret

0000359a <NWK_RouteFreeEntry>:
    359a:	fc 01       	movw	r30, r24
    359c:	80 81       	ld	r24, Z
    359e:	80 fd       	sbrc	r24, 0
    35a0:	05 c0       	rjmp	.+10     	; 0x35ac <NWK_RouteFreeEntry+0x12>
    35a2:	8f ef       	ldi	r24, 0xFF	; 255
    35a4:	9f ef       	ldi	r25, 0xFF	; 255
    35a6:	92 83       	std	Z+2, r25	; 0x02
    35a8:	81 83       	std	Z+1, r24	; 0x01
    35aa:	15 82       	std	Z+5, r1	; 0x05
    35ac:	08 95       	ret

000035ae <NWK_RouteNextHop>:
    35ae:	9b df       	rcall	.-202    	; 0x34e6 <NWK_RouteFindEntry>
    35b0:	00 97       	sbiw	r24, 0x00	; 0
    35b2:	21 f0       	breq	.+8      	; 0x35bc <NWK_RouteNextHop+0xe>
    35b4:	fc 01       	movw	r30, r24
    35b6:	83 81       	ldd	r24, Z+3	; 0x03
    35b8:	94 81       	ldd	r25, Z+4	; 0x04
    35ba:	08 95       	ret
    35bc:	8f ef       	ldi	r24, 0xFF	; 255
    35be:	9f ef       	ldi	r25, 0xFF	; 255
    35c0:	08 95       	ret

000035c2 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    35c2:	91 df       	rcall	.-222    	; 0x34e6 <NWK_RouteFindEntry>
  if (entry)
    35c4:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
    35c6:	09 f0       	breq	.+2      	; 0x35ca <nwkRouteRemove+0x8>
    35c8:	e8 cf       	rjmp	.-48     	; 0x359a <NWK_RouteFreeEntry>
    35ca:	08 95       	ret

000035cc <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    35cc:	0f 93       	push	r16
    35ce:	1f 93       	push	r17
    35d0:	cf 93       	push	r28
    35d2:	df 93       	push	r29
    35d4:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    35d6:	01 85       	ldd	r16, Z+9	; 0x09
    35d8:	12 85       	ldd	r17, Z+10	; 0x0a
    35da:	11 23       	and	r17, r17
    35dc:	34 f4       	brge	.+12     	; 0x35ea <nwkRouteFrameReceived+0x1e>
      (header->macSrcAddr != header->nwkSrcAddr))
    35de:	85 85       	ldd	r24, Z+13	; 0x0d
    35e0:	96 85       	ldd	r25, Z+14	; 0x0e
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    35e2:	08 17       	cp	r16, r24
    35e4:	19 07       	cpc	r17, r25
    35e6:	09 f0       	breq	.+2      	; 0x35ea <nwkRouteFrameReceived+0x1e>
    35e8:	50 c0       	rjmp	.+160    	; 0x368a <nwkRouteFrameReceived+0xbe>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    35ea:	85 81       	ldd	r24, Z+5	; 0x05
    35ec:	96 81       	ldd	r25, Z+6	; 0x06
    35ee:	01 96       	adiw	r24, 0x01	; 1
    35f0:	09 f4       	brne	.+2      	; 0x35f4 <nwkRouteFrameReceived+0x28>
    35f2:	4b c0       	rjmp	.+150    	; 0x368a <nwkRouteFrameReceived+0xbe>
    35f4:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	85 85       	ldd	r24, Z+13	; 0x0d
    35fa:	96 85       	ldd	r25, Z+14	; 0x0e
    35fc:	74 df       	rcall	.-280    	; 0x34e6 <NWK_RouteFindEntry>
    35fe:	dc 01       	movw	r26, r24

  if (entry)
    3600:	89 2b       	or	r24, r25
    3602:	79 f1       	breq	.+94     	; 0x3662 <nwkRouteFrameReceived+0x96>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    3604:	8f 81       	ldd	r24, Y+7	; 0x07
    3606:	98 85       	ldd	r25, Y+8	; 0x08
    3608:	01 96       	adiw	r24, 0x01	; 1
    360a:	59 f4       	brne	.+22     	; 0x3622 <nwkRouteFrameReceived+0x56>
        nwkIb.addr == header->nwkDstAddr);
    360c:	20 91 49 1b 	lds	r18, 0x1B49	; 0x801b49 <nwkIb>
    3610:	30 91 4a 1b 	lds	r19, 0x1B4A	; 0x801b4a <nwkIb+0x1>
    3614:	8f 85       	ldd	r24, Y+15	; 0x0f
    3616:	98 89       	ldd	r25, Y+16	; 0x10

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    3618:	28 17       	cp	r18, r24
    361a:	39 07       	cpc	r19, r25
    361c:	21 f0       	breq	.+8      	; 0x3626 <nwkRouteFrameReceived+0x5a>
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	03 c0       	rjmp	.+6      	; 0x3628 <nwkRouteFrameReceived+0x5c>
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	01 c0       	rjmp	.+2      	; 0x3628 <nwkRouteFrameReceived+0x5c>
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	98 2f       	mov	r25, r24
    362a:	91 70       	andi	r25, 0x01	; 1
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    362c:	13 96       	adiw	r26, 0x03	; 3
    362e:	2d 91       	ld	r18, X+
    3630:	3c 91       	ld	r19, X
    3632:	14 97       	sbiw	r26, 0x04	; 4
    3634:	02 17       	cp	r16, r18
    3636:	13 07       	cpc	r17, r19
    3638:	49 f0       	breq	.+18     	; 0x364c <nwkRouteFrameReceived+0x80>
    363a:	fe 01       	movw	r30, r28
    363c:	ed 57       	subi	r30, 0x7D	; 125
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	20 81       	ld	r18, Z
    3642:	16 96       	adiw	r26, 0x06	; 6
    3644:	8c 91       	ld	r24, X
    3646:	16 97       	sbiw	r26, 0x06	; 6
    3648:	82 17       	cp	r24, r18
    364a:	10 f0       	brcs	.+4      	; 0x3650 <nwkRouteFrameReceived+0x84>
    364c:	99 23       	and	r25, r25
    364e:	b9 f0       	breq	.+46     	; 0x367e <nwkRouteFrameReceived+0xb2>
    {
      entry->nextHopAddr = header->macSrcAddr;
    3650:	14 96       	adiw	r26, 0x04	; 4
    3652:	1c 93       	st	X, r17
    3654:	0e 93       	st	-X, r16
    3656:	13 97       	sbiw	r26, 0x03	; 3
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    3658:	8c 91       	ld	r24, X
    365a:	8f 70       	andi	r24, 0x0F	; 15
    365c:	80 63       	ori	r24, 0x30	; 48
    365e:	8c 93       	st	X, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    3660:	0e c0       	rjmp	.+28     	; 0x367e <nwkRouteFrameReceived+0xb2>
    3662:	77 df       	rcall	.-274    	; 0x3552 <NWK_RouteNewEntry>
    3664:	dc 01       	movw	r26, r24

    entry->dstAddr = header->nwkSrcAddr;
    3666:	8d 85       	ldd	r24, Y+13	; 0x0d
    3668:	9e 85       	ldd	r25, Y+14	; 0x0e
    366a:	12 96       	adiw	r26, 0x02	; 2
    366c:	9c 93       	st	X, r25
    366e:	8e 93       	st	-X, r24
    3670:	11 97       	sbiw	r26, 0x01	; 1
    entry->nextHopAddr = header->macSrcAddr;
    3672:	89 85       	ldd	r24, Y+9	; 0x09
    3674:	9a 85       	ldd	r25, Y+10	; 0x0a
    3676:	14 96       	adiw	r26, 0x04	; 4
    3678:	9c 93       	st	X, r25
    367a:	8e 93       	st	-X, r24
    367c:	13 97       	sbiw	r26, 0x03	; 3
  }

  entry->lqi = frame->rx.lqi;
    367e:	fe 01       	movw	r30, r28
    3680:	ed 57       	subi	r30, 0x7D	; 125
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	80 81       	ld	r24, Z
    3686:	16 96       	adiw	r26, 0x06	; 6
    3688:	8c 93       	st	X, r24
#else
  (void)frame;
#endif
}
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	1f 91       	pop	r17
    3690:	0f 91       	pop	r16
    3692:	08 95       	ret

00003694 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    3694:	cf 93       	push	r28
    3696:	df 93       	push	r29
    3698:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    369a:	87 85       	ldd	r24, Z+15	; 0x0f
    369c:	90 89       	ldd	r25, Z+16	; 0x10
    369e:	8f 3f       	cpi	r24, 0xFF	; 255
    36a0:	2f ef       	ldi	r18, 0xFF	; 255
    36a2:	92 07       	cpc	r25, r18
    36a4:	81 f1       	breq	.+96     	; 0x3706 <nwkRouteFrameSent+0x72>
    36a6:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    36a8:	63 85       	ldd	r22, Z+11	; 0x0b
    36aa:	63 fb       	bst	r22, 3
    36ac:	66 27       	eor	r22, r22
    36ae:	60 f9       	bld	r22, 0
    36b0:	1a df       	rcall	.-460    	; 0x34e6 <NWK_RouteFindEntry>
    36b2:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
    36b4:	89 2b       	or	r24, r25
    36b6:	39 f1       	breq	.+78     	; 0x3706 <nwkRouteFrameSent+0x72>
    36b8:	8c 91       	ld	r24, X
    36ba:	80 fd       	sbrc	r24, 0
    36bc:	24 c0       	rjmp	.+72     	; 0x3706 <nwkRouteFrameSent+0x72>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    36be:	fe 01       	movw	r30, r28
    36c0:	ed 57       	subi	r30, 0x7D	; 125
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	80 81       	ld	r24, Z
    36c6:	81 11       	cpse	r24, r1
    36c8:	0e c0       	rjmp	.+28     	; 0x36e6 <nwkRouteFrameSent+0x52>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    36ca:	8c 91       	ld	r24, X
    36cc:	8f 70       	andi	r24, 0x0F	; 15
    36ce:	80 63       	ori	r24, 0x30	; 48
    36d0:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    36d2:	15 96       	adiw	r26, 0x05	; 5
    36d4:	8c 91       	ld	r24, X
    36d6:	15 97       	sbiw	r26, 0x05	; 5
    36d8:	8f 5f       	subi	r24, 0xFF	; 255
    36da:	15 96       	adiw	r26, 0x05	; 5
    36dc:	8c 93       	st	X, r24
    36de:	8f 3f       	cpi	r24, 0xFF	; 255
      nwkRouteNormalizeRanks();
    36e0:	91 f4       	brne	.+36     	; 0x3706 <nwkRouteFrameSent+0x72>
    36e2:	a1 de       	rcall	.-702    	; 0x3426 <nwkRouteNormalizeRanks>
    36e4:	10 c0       	rjmp	.+32     	; 0x3706 <nwkRouteFrameSent+0x72>
  }
  else
  {
    if (0 == --entry->score)
    36e6:	9c 91       	ld	r25, X
    36e8:	89 2f       	mov	r24, r25
    36ea:	82 95       	swap	r24
    36ec:	8f 70       	andi	r24, 0x0F	; 15
    36ee:	81 5f       	subi	r24, 0xF1	; 241
    36f0:	8f 70       	andi	r24, 0x0F	; 15
    36f2:	28 2f       	mov	r18, r24
    36f4:	22 95       	swap	r18
    36f6:	20 7f       	andi	r18, 0xF0	; 240
    36f8:	9f 70       	andi	r25, 0x0F	; 15
    36fa:	92 2b       	or	r25, r18
    36fc:	9c 93       	st	X, r25
    36fe:	81 11       	cpse	r24, r1
      NWK_RouteFreeEntry(entry);
    3700:	02 c0       	rjmp	.+4      	; 0x3706 <nwkRouteFrameSent+0x72>
    3702:	cd 01       	movw	r24, r26
    3704:	4a df       	rcall	.-364    	; 0x359a <NWK_RouteFreeEntry>
  }
}
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	08 95       	ret

0000370c <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    370c:	cf 93       	push	r28
    370e:	df 93       	push	r29
    3710:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    3712:	87 85       	ldd	r24, Z+15	; 0x0f
    3714:	90 89       	ldd	r25, Z+16	; 0x10
    3716:	8f 3f       	cpi	r24, 0xFF	; 255
    3718:	2f ef       	ldi	r18, 0xFF	; 255
    371a:	92 07       	cpc	r25, r18
    371c:	29 f4       	brne	.+10     	; 0x3728 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    371e:	8f ef       	ldi	r24, 0xFF	; 255
    3720:	9f ef       	ldi	r25, 0xFF	; 255
    3722:	90 87       	std	Z+8, r25	; 0x08
    3724:	87 83       	std	Z+7, r24	; 0x07
    3726:	0e c0       	rjmp	.+28     	; 0x3744 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
    3728:	23 85       	ldd	r18, Z+11	; 0x0b
    372a:	22 ff       	sbrs	r18, 2
    372c:	03 c0       	rjmp	.+6      	; 0x3734 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
    372e:	90 87       	std	Z+8, r25	; 0x08
    3730:	87 83       	std	Z+7, r24	; 0x07
    3732:	08 c0       	rjmp	.+16     	; 0x3744 <nwkRoutePrepareTx+0x38>
    3734:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    3736:	63 85       	ldd	r22, Z+11	; 0x0b
    3738:	63 fb       	bst	r22, 3
    373a:	66 27       	eor	r22, r22
    373c:	60 f9       	bld	r22, 0
    373e:	37 df       	rcall	.-402    	; 0x35ae <NWK_RouteNextHop>
    3740:	98 87       	std	Y+8, r25	; 0x08
    3742:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    3744:	df 91       	pop	r29
    3746:	cf 91       	pop	r28
    3748:	08 95       	ret

0000374a <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    374a:	ef 92       	push	r14
    374c:	ff 92       	push	r15
    374e:	1f 93       	push	r17
    3750:	cf 93       	push	r28
    3752:	df 93       	push	r29
    3754:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    3756:	1b 85       	ldd	r17, Y+11	; 0x0b
    3758:	13 fb       	bst	r17, 3
    375a:	11 27       	eor	r17, r17
    375c:	10 f9       	bld	r17, 0
    375e:	ef 84       	ldd	r14, Y+15	; 0x0f
    3760:	f8 88       	ldd	r15, Y+16	; 0x10
    3762:	61 2f       	mov	r22, r17
    3764:	c7 01       	movw	r24, r14
    3766:	23 df       	rcall	.-442    	; 0x35ae <NWK_RouteNextHop>
    3768:	01 96       	adiw	r24, 0x01	; 1
    376a:	59 f0       	breq	.+22     	; 0x3782 <nwkRouteFrame+0x38>
  {
    frame->tx.confirm = NULL;
    376c:	fe 01       	movw	r30, r28
    376e:	e9 57       	subi	r30, 0x79	; 121
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	11 82       	std	Z+1, r1	; 0x01
    3774:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    3776:	31 97       	sbiw	r30, 0x01	; 1
    3778:	82 e0       	ldi	r24, 0x02	; 2
    377a:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    377c:	ce 01       	movw	r24, r28
    377e:	33 d3       	rcall	.+1638   	; 0x3de6 <nwkTxFrame>
    3780:	07 c0       	rjmp	.+14     	; 0x3790 <nwkRouteFrame+0x46>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    3782:	41 2f       	mov	r20, r17
    3784:	b7 01       	movw	r22, r14
    3786:	8d 85       	ldd	r24, Y+13	; 0x0d
    3788:	9e 85       	ldd	r25, Y+14	; 0x0e
    nwkFrameFree(frame);
    378a:	64 de       	rcall	.-824    	; 0x3454 <nwkRouteSendRouteError>
    378c:	ce 01       	movw	r24, r28
    378e:	15 de       	rcall	.-982    	; 0x33ba <nwkFrameFree>
  }
}
    3790:	df 91       	pop	r29
    3792:	cf 91       	pop	r28
    3794:	1f 91       	pop	r17
    3796:	ff 90       	pop	r15
    3798:	ef 90       	pop	r14
    379a:	08 95       	ret

0000379c <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    379c:	dc 01       	movw	r26, r24
    379e:	17 96       	adiw	r26, 0x07	; 7
    37a0:	ed 91       	ld	r30, X+
    37a2:	fc 91       	ld	r31, X
    37a4:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    37a6:	19 96       	adiw	r26, 0x09	; 9
    37a8:	8c 91       	ld	r24, X
    37aa:	86 30       	cpi	r24, 0x06	; 6
    37ac:	31 f4       	brne	.+12     	; 0x37ba <nwkRouteErrorReceived+0x1e>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    37ae:	65 81       	ldd	r22, Z+5	; 0x05
    37b0:	83 81       	ldd	r24, Z+3	; 0x03
    37b2:	94 81       	ldd	r25, Z+4	; 0x04
    37b4:	06 df       	rcall	.-500    	; 0x35c2 <nwkRouteRemove>

  return true;
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    37ba:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    37bc:	08 95       	ret

000037be <nwkRxIndicateFrame>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    37be:	ef 92       	push	r14
    37c0:	ff 92       	push	r15
    37c2:	0f 93       	push	r16
    37c4:	1f 93       	push	r17
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
    37ce:	2c 97       	sbiw	r28, 0x0c	; 12
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	de bf       	out	0x3e, r29	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	dc 01       	movw	r26, r24
    37dc:	51 96       	adiw	r26, 0x11	; 17
    37de:	8c 91       	ld	r24, X
    37e0:	51 97       	sbiw	r26, 0x11	; 17
    37e2:	82 95       	swap	r24
    37e4:	8f 70       	andi	r24, 0x0F	; 15
    37e6:	e8 2f       	mov	r30, r24
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	33 96       	adiw	r30, 0x03	; 3
    37ec:	ee 0f       	add	r30, r30
    37ee:	ff 1f       	adc	r31, r31
    37f0:	e7 5b       	subi	r30, 0xB7	; 183
    37f2:	f4 4e       	sbci	r31, 0xE4	; 228
    37f4:	e0 80       	ld	r14, Z
    37f6:	f1 80       	ldd	r15, Z+1	; 0x01
    37f8:	e1 14       	cp	r14, r1
    37fa:	f1 04       	cpc	r15, r1
    37fc:	09 f4       	brne	.+2      	; 0x3800 <nwkRxIndicateFrame+0x42>
    37fe:	67 c0       	rjmp	.+206    	; 0x38ce <nwkRxIndicateFrame+0x110>
    3800:	1d 96       	adiw	r26, 0x0d	; 13
    3802:	4d 91       	ld	r20, X+
    3804:	5c 91       	ld	r21, X
    3806:	1e 97       	sbiw	r26, 0x0e	; 14
    3808:	5a 83       	std	Y+2, r21	; 0x02
    380a:	49 83       	std	Y+1, r20	; 0x01
    380c:	1f 96       	adiw	r26, 0x0f	; 15
    380e:	6d 91       	ld	r22, X+
    3810:	7c 91       	ld	r23, X
    3812:	50 97       	sbiw	r26, 0x10	; 16
    3814:	7c 83       	std	Y+4, r23	; 0x04
    3816:	6b 83       	std	Y+3, r22	; 0x03
    3818:	51 96       	adiw	r26, 0x11	; 17
    381a:	9c 91       	ld	r25, X
    381c:	51 97       	sbiw	r26, 0x11	; 17
    381e:	9f 70       	andi	r25, 0x0F	; 15
    3820:	9d 83       	std	Y+5, r25	; 0x05
    3822:	8e 83       	std	Y+6, r24	; 0x06
    3824:	cd 01       	movw	r24, r26
    3826:	8f 57       	subi	r24, 0x7F	; 127
    3828:	9f 4f       	sbci	r25, 0xFF	; 255
    382a:	fc 01       	movw	r30, r24
    382c:	80 81       	ld	r24, Z
    382e:	91 81       	ldd	r25, Z+1	; 0x01
    3830:	99 87       	std	Y+9, r25	; 0x09
    3832:	88 87       	std	Y+8, r24	; 0x08
    3834:	11 96       	adiw	r26, 0x01	; 1
    3836:	2c 91       	ld	r18, X
    3838:	11 97       	sbiw	r26, 0x01	; 1
    383a:	8d 01       	movw	r16, r26
    383c:	0e 5f       	subi	r16, 0xFE	; 254
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	80 1b       	sub	r24, r16
    3842:	91 0b       	sbc	r25, r17
    3844:	28 1b       	sub	r18, r24
    3846:	2a 87       	std	Y+10, r18	; 0x0a
    3848:	cd 01       	movw	r24, r26
    384a:	8d 57       	subi	r24, 0x7D	; 125
    384c:	9f 4f       	sbci	r25, 0xFF	; 255
    384e:	fc 01       	movw	r30, r24
    3850:	80 81       	ld	r24, Z
    3852:	8b 87       	std	Y+11, r24	; 0x0b
    3854:	cd 01       	movw	r24, r26
    3856:	8c 57       	subi	r24, 0x7C	; 124
    3858:	9f 4f       	sbci	r25, 0xFF	; 255
    385a:	fc 01       	movw	r30, r24
    385c:	80 81       	ld	r24, Z
    385e:	8c 87       	std	Y+12, r24	; 0x0c
    3860:	1b 96       	adiw	r26, 0x0b	; 11
    3862:	2c 91       	ld	r18, X
    3864:	1b 97       	sbiw	r26, 0x0b	; 11
    3866:	92 2f       	mov	r25, r18
    3868:	91 70       	andi	r25, 0x01	; 1
    386a:	82 2f       	mov	r24, r18
    386c:	82 70       	andi	r24, 0x02	; 2
    386e:	98 2b       	or	r25, r24
    3870:	22 ff       	sbrs	r18, 2
    3872:	02 c0       	rjmp	.+4      	; 0x3878 <nwkRxIndicateFrame+0xba>
    3874:	80 e2       	ldi	r24, 0x20	; 32
    3876:	01 c0       	rjmp	.+2      	; 0x387a <nwkRxIndicateFrame+0xbc>
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	98 2b       	or	r25, r24
    387c:	23 ff       	sbrs	r18, 3
    387e:	02 c0       	rjmp	.+4      	; 0x3884 <nwkRxIndicateFrame+0xc6>
    3880:	80 e4       	ldi	r24, 0x40	; 64
    3882:	01 c0       	rjmp	.+2      	; 0x3886 <nwkRxIndicateFrame+0xc8>
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	98 2b       	or	r25, r24
    3888:	6f 3f       	cpi	r22, 0xFF	; 255
    388a:	7f 4f       	sbci	r23, 0xFF	; 255
    388c:	11 f4       	brne	.+4      	; 0x3892 <nwkRxIndicateFrame+0xd4>
    388e:	84 e0       	ldi	r24, 0x04	; 4
    3890:	01 c0       	rjmp	.+2      	; 0x3894 <nwkRxIndicateFrame+0xd6>
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	98 2b       	or	r25, r24
    3896:	19 96       	adiw	r26, 0x09	; 9
    3898:	2d 91       	ld	r18, X+
    389a:	3c 91       	ld	r19, X
    389c:	1a 97       	sbiw	r26, 0x0a	; 10
    389e:	42 17       	cp	r20, r18
    38a0:	53 07       	cpc	r21, r19
    38a2:	11 f4       	brne	.+4      	; 0x38a8 <nwkRxIndicateFrame+0xea>
    38a4:	88 e0       	ldi	r24, 0x08	; 8
    38a6:	01 c0       	rjmp	.+2      	; 0x38aa <nwkRxIndicateFrame+0xec>
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	98 2b       	or	r25, r24
    38ac:	15 96       	adiw	r26, 0x05	; 5
    38ae:	2d 91       	ld	r18, X+
    38b0:	3c 91       	ld	r19, X
    38b2:	16 97       	sbiw	r26, 0x06	; 6
    38b4:	2f 3f       	cpi	r18, 0xFF	; 255
    38b6:	3f 4f       	sbci	r19, 0xFF	; 255
    38b8:	11 f4       	brne	.+4      	; 0x38be <nwkRxIndicateFrame+0x100>
    38ba:	80 e1       	ldi	r24, 0x10	; 16
    38bc:	01 c0       	rjmp	.+2      	; 0x38c0 <nwkRxIndicateFrame+0x102>
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	89 2b       	or	r24, r25
    38c2:	8f 83       	std	Y+7, r24	; 0x07
    38c4:	ce 01       	movw	r24, r28
    38c6:	01 96       	adiw	r24, 0x01	; 1
    38c8:	f7 01       	movw	r30, r14
    38ca:	19 95       	eicall
    38cc:	01 c0       	rjmp	.+2      	; 0x38d0 <nwkRxIndicateFrame+0x112>
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	2c 96       	adiw	r28, 0x0c	; 12
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
    38dc:	df 91       	pop	r29
    38de:	cf 91       	pop	r28
    38e0:	1f 91       	pop	r17
    38e2:	0f 91       	pop	r16
    38e4:	ff 90       	pop	r15
    38e6:	ef 90       	pop	r14
    38e8:	08 95       	ret

000038ea <nwkRxServiceDataInd>:
    38ea:	dc 01       	movw	r26, r24
    38ec:	19 96       	adiw	r26, 0x09	; 9
    38ee:	2c 91       	ld	r18, X
    38f0:	19 97       	sbiw	r26, 0x09	; 9
    38f2:	22 23       	and	r18, r18
    38f4:	71 f0       	breq	.+28     	; 0x3912 <nwkRxServiceDataInd+0x28>
    38f6:	17 96       	adiw	r26, 0x07	; 7
    38f8:	ed 91       	ld	r30, X+
    38fa:	fc 91       	ld	r31, X
    38fc:	18 97       	sbiw	r26, 0x08	; 8
    38fe:	20 81       	ld	r18, Z
    3900:	22 23       	and	r18, r18
    3902:	19 f0       	breq	.+6      	; 0x390a <nwkRxServiceDataInd+0x20>
    3904:	21 30       	cpi	r18, 0x01	; 1
    3906:	19 f0       	breq	.+6      	; 0x390e <nwkRxServiceDataInd+0x24>
    3908:	06 c0       	rjmp	.+12     	; 0x3916 <nwkRxServiceDataInd+0x2c>
    390a:	02 c3       	rjmp	.+1540   	; 0x3f10 <nwkTxAckReceived>
    390c:	08 95       	ret
    390e:	46 cf       	rjmp	.-372    	; 0x379c <nwkRouteErrorReceived>
    3910:	08 95       	ret
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	08 95       	ret
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	08 95       	ret

0000391a <nwkRxDuplicateRejectionTimerHandler>:
    391a:	bc 01       	movw	r22, r24
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	1c c0       	rjmp	.+56     	; 0x395a <nwkRxDuplicateRejectionTimerHandler+0x40>
    3922:	29 2f       	mov	r18, r25
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	f9 01       	movw	r30, r18
    3928:	ee 0f       	add	r30, r30
    392a:	ff 1f       	adc	r31, r31
    392c:	ee 0f       	add	r30, r30
    392e:	ff 1f       	adc	r31, r31
    3930:	e2 0f       	add	r30, r18
    3932:	f3 1f       	adc	r31, r19
    3934:	e0 52       	subi	r30, 0x20	; 32
    3936:	f8 4e       	sbci	r31, 0xE8	; 232
    3938:	44 81       	ldd	r20, Z+4	; 0x04
    393a:	44 23       	and	r20, r20
    393c:	69 f0       	breq	.+26     	; 0x3958 <nwkRxDuplicateRejectionTimerHandler+0x3e>
    393e:	f9 01       	movw	r30, r18
    3940:	ee 0f       	add	r30, r30
    3942:	ff 1f       	adc	r31, r31
    3944:	ee 0f       	add	r30, r30
    3946:	ff 1f       	adc	r31, r31
    3948:	2e 0f       	add	r18, r30
    394a:	3f 1f       	adc	r19, r31
    394c:	f9 01       	movw	r30, r18
    394e:	e0 52       	subi	r30, 0x20	; 32
    3950:	f8 4e       	sbci	r31, 0xE8	; 232
    3952:	41 50       	subi	r20, 0x01	; 1
    3954:	44 83       	std	Z+4, r20	; 0x04
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	9f 5f       	subi	r25, 0xFF	; 255
    395a:	9a 30       	cpi	r25, 0x0A	; 10
    395c:	10 f3       	brcs	.-60     	; 0x3922 <nwkRxDuplicateRejectionTimerHandler+0x8>
    395e:	88 23       	and	r24, r24
    3960:	11 f0       	breq	.+4      	; 0x3966 <nwkRxDuplicateRejectionTimerHandler+0x4c>
    3962:	cb 01       	movw	r24, r22
    3964:	91 c5       	rjmp	.+2850   	; 0x4488 <SYS_TimerStart>
    3966:	08 95       	ret

00003968 <nwkRxRejectDuplicate>:
    3968:	0f 93       	push	r16
    396a:	1f 93       	push	r17
    396c:	cf 93       	push	r28
    396e:	df 93       	push	r29
    3970:	ec 01       	movw	r28, r24
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	60 e0       	ldi	r22, 0x00	; 0
    3976:	70 e0       	ldi	r23, 0x00	; 0
    3978:	80 c0       	rjmp	.+256    	; 0x3a7a <nwkRxRejectDuplicate+0x112>
    397a:	29 2f       	mov	r18, r25
    397c:	30 e0       	ldi	r19, 0x00	; 0
    397e:	f9 01       	movw	r30, r18
    3980:	ee 0f       	add	r30, r30
    3982:	ff 1f       	adc	r31, r31
    3984:	ee 0f       	add	r30, r30
    3986:	ff 1f       	adc	r31, r31
    3988:	e2 0f       	add	r30, r18
    398a:	f3 1f       	adc	r31, r19
    398c:	e0 52       	subi	r30, 0x20	; 32
    398e:	f8 4e       	sbci	r31, 0xE8	; 232
    3990:	44 81       	ldd	r20, Z+4	; 0x04
    3992:	44 23       	and	r20, r20
    3994:	09 f4       	brne	.+2      	; 0x3998 <nwkRxRejectDuplicate+0x30>
    3996:	6d c0       	rjmp	.+218    	; 0x3a72 <nwkRxRejectDuplicate+0x10a>
    3998:	0b 85       	ldd	r16, Y+11	; 0x0b
    399a:	1c 85       	ldd	r17, Y+12	; 0x0c
    399c:	a0 81       	ld	r26, Z
    399e:	b1 81       	ldd	r27, Z+1	; 0x01
    39a0:	0a 17       	cp	r16, r26
    39a2:	1b 07       	cpc	r17, r27
    39a4:	09 f0       	breq	.+2      	; 0x39a8 <nwkRxRejectDuplicate+0x40>
    39a6:	65 c0       	rjmp	.+202    	; 0x3a72 <nwkRxRejectDuplicate+0x10a>
    39a8:	f9 01       	movw	r30, r18
    39aa:	ee 0f       	add	r30, r30
    39ac:	ff 1f       	adc	r31, r31
    39ae:	ee 0f       	add	r30, r30
    39b0:	ff 1f       	adc	r31, r31
    39b2:	e2 0f       	add	r30, r18
    39b4:	f3 1f       	adc	r31, r19
    39b6:	e0 52       	subi	r30, 0x20	; 32
    39b8:	f8 4e       	sbci	r31, 0xE8	; 232
    39ba:	82 81       	ldd	r24, Z+2	; 0x02
    39bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39be:	89 1b       	sub	r24, r25
    39c0:	88 30       	cpi	r24, 0x08	; 8
    39c2:	e0 f5       	brcc	.+120    	; 0x3a3c <nwkRxRejectDuplicate+0xd4>
    39c4:	f9 01       	movw	r30, r18
    39c6:	ee 0f       	add	r30, r30
    39c8:	ff 1f       	adc	r31, r31
    39ca:	ee 0f       	add	r30, r30
    39cc:	ff 1f       	adc	r31, r31
    39ce:	e2 0f       	add	r30, r18
    39d0:	f3 1f       	adc	r31, r19
    39d2:	e0 52       	subi	r30, 0x20	; 32
    39d4:	f8 4e       	sbci	r31, 0xE8	; 232
    39d6:	93 81       	ldd	r25, Z+3	; 0x03
    39d8:	49 2f       	mov	r20, r25
    39da:	50 e0       	ldi	r21, 0x00	; 0
    39dc:	08 2e       	mov	r0, r24
    39de:	02 c0       	rjmp	.+4      	; 0x39e4 <nwkRxRejectDuplicate+0x7c>
    39e0:	55 95       	asr	r21
    39e2:	47 95       	ror	r20
    39e4:	0a 94       	dec	r0
    39e6:	e2 f7       	brpl	.-8      	; 0x39e0 <nwkRxRejectDuplicate+0x78>
    39e8:	40 ff       	sbrs	r20, 0
    39ea:	13 c0       	rjmp	.+38     	; 0x3a12 <nwkRxRejectDuplicate+0xaa>
    39ec:	20 91 49 1b 	lds	r18, 0x1B49	; 0x801b49 <nwkIb>
    39f0:	30 91 4a 1b 	lds	r19, 0x1B4A	; 0x801b4a <nwkIb+0x1>
    39f4:	8d 81       	ldd	r24, Y+5	; 0x05
    39f6:	9e 81       	ldd	r25, Y+6	; 0x06
    39f8:	28 17       	cp	r18, r24
    39fa:	39 07       	cpc	r19, r25
    39fc:	09 f0       	breq	.+2      	; 0x3a00 <nwkRxRejectDuplicate+0x98>
    39fe:	53 c0       	rjmp	.+166    	; 0x3aa6 <nwkRxRejectDuplicate+0x13e>
    3a00:	69 85       	ldd	r22, Y+9	; 0x09
    3a02:	63 fb       	bst	r22, 3
    3a04:	66 27       	eor	r22, r22
    3a06:	60 f9       	bld	r22, 0
    3a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a0c:	da dd       	rcall	.-1100   	; 0x35c2 <nwkRouteRemove>
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	4d c0       	rjmp	.+154    	; 0x3aac <nwkRxRejectDuplicate+0x144>
    3a12:	41 e0       	ldi	r20, 0x01	; 1
    3a14:	50 e0       	ldi	r21, 0x00	; 0
    3a16:	02 c0       	rjmp	.+4      	; 0x3a1c <nwkRxRejectDuplicate+0xb4>
    3a18:	44 0f       	add	r20, r20
    3a1a:	55 1f       	adc	r21, r21
    3a1c:	8a 95       	dec	r24
    3a1e:	e2 f7       	brpl	.-8      	; 0x3a18 <nwkRxRejectDuplicate+0xb0>
    3a20:	f9 01       	movw	r30, r18
    3a22:	ee 0f       	add	r30, r30
    3a24:	ff 1f       	adc	r31, r31
    3a26:	ee 0f       	add	r30, r30
    3a28:	ff 1f       	adc	r31, r31
    3a2a:	2e 0f       	add	r18, r30
    3a2c:	3f 1f       	adc	r19, r31
    3a2e:	f9 01       	movw	r30, r18
    3a30:	e0 52       	subi	r30, 0x20	; 32
    3a32:	f8 4e       	sbci	r31, 0xE8	; 232
    3a34:	94 2b       	or	r25, r20
    3a36:	93 83       	std	Z+3, r25	; 0x03
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	38 c0       	rjmp	.+112    	; 0x3aac <nwkRxRejectDuplicate+0x144>
    3a3c:	81 95       	neg	r24
    3a3e:	f9 01       	movw	r30, r18
    3a40:	ee 0f       	add	r30, r30
    3a42:	ff 1f       	adc	r31, r31
    3a44:	ee 0f       	add	r30, r30
    3a46:	ff 1f       	adc	r31, r31
    3a48:	2e 0f       	add	r18, r30
    3a4a:	3f 1f       	adc	r19, r31
    3a4c:	f9 01       	movw	r30, r18
    3a4e:	e0 52       	subi	r30, 0x20	; 32
    3a50:	f8 4e       	sbci	r31, 0xE8	; 232
    3a52:	92 83       	std	Z+2, r25	; 0x02
    3a54:	23 81       	ldd	r18, Z+3	; 0x03
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	a9 01       	movw	r20, r18
    3a5a:	02 c0       	rjmp	.+4      	; 0x3a60 <nwkRxRejectDuplicate+0xf8>
    3a5c:	44 0f       	add	r20, r20
    3a5e:	55 1f       	adc	r21, r21
    3a60:	8a 95       	dec	r24
    3a62:	e2 f7       	brpl	.-8      	; 0x3a5c <nwkRxRejectDuplicate+0xf4>
    3a64:	ca 01       	movw	r24, r20
    3a66:	81 60       	ori	r24, 0x01	; 1
    3a68:	83 83       	std	Z+3, r24	; 0x03
    3a6a:	8f e1       	ldi	r24, 0x1F	; 31
    3a6c:	84 83       	std	Z+4, r24	; 0x04
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	1d c0       	rjmp	.+58     	; 0x3aac <nwkRxRejectDuplicate+0x144>
    3a72:	41 11       	cpse	r20, r1
    3a74:	01 c0       	rjmp	.+2      	; 0x3a78 <nwkRxRejectDuplicate+0x110>
    3a76:	bf 01       	movw	r22, r30
    3a78:	9f 5f       	subi	r25, 0xFF	; 255
    3a7a:	9a 30       	cpi	r25, 0x0A	; 10
    3a7c:	08 f4       	brcc	.+2      	; 0x3a80 <nwkRxRejectDuplicate+0x118>
    3a7e:	7d cf       	rjmp	.-262    	; 0x397a <nwkRxRejectDuplicate+0x12>
    3a80:	61 15       	cp	r22, r1
    3a82:	71 05       	cpc	r23, r1
    3a84:	91 f0       	breq	.+36     	; 0x3aaa <nwkRxRejectDuplicate+0x142>
    3a86:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a88:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a8a:	fb 01       	movw	r30, r22
    3a8c:	91 83       	std	Z+1, r25	; 0x01
    3a8e:	80 83       	st	Z, r24
    3a90:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a92:	82 83       	std	Z+2, r24	; 0x02
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	83 83       	std	Z+3, r24	; 0x03
    3a98:	8f e1       	ldi	r24, 0x1F	; 31
    3a9a:	84 83       	std	Z+4, r24	; 0x04
    3a9c:	82 ed       	ldi	r24, 0xD2	; 210
    3a9e:	97 e1       	ldi	r25, 0x17	; 23
    3aa0:	f3 d4       	rcall	.+2534   	; 0x4488 <SYS_TimerStart>
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	03 c0       	rjmp	.+6      	; 0x3aac <nwkRxRejectDuplicate+0x144>
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	01 c0       	rjmp	.+2      	; 0x3aac <nwkRxRejectDuplicate+0x144>
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	1f 91       	pop	r17
    3ab2:	0f 91       	pop	r16
    3ab4:	08 95       	ret

00003ab6 <nwkRxHandleReceivedFrame>:
    3ab6:	0f 93       	push	r16
    3ab8:	1f 93       	push	r17
    3aba:	cf 93       	push	r28
    3abc:	df 93       	push	r29
    3abe:	fc 01       	movw	r30, r24
    3ac0:	8c 01       	movw	r16, r24
    3ac2:	0e 5f       	subi	r16, 0xFE	; 254
    3ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac6:	84 e2       	ldi	r24, 0x24	; 36
    3ac8:	80 83       	st	Z, r24
    3aca:	83 85       	ldd	r24, Z+11	; 0x0b
    3acc:	81 fd       	sbrc	r24, 1
    3ace:	54 c0       	rjmp	.+168    	; 0x3b78 <nwkRxHandleReceivedFrame+0xc2>
    3ad0:	83 fd       	sbrc	r24, 3
    3ad2:	52 c0       	rjmp	.+164    	; 0x3b78 <nwkRxHandleReceivedFrame+0xc2>
    3ad4:	25 81       	ldd	r18, Z+5	; 0x05
    3ad6:	36 81       	ldd	r19, Z+6	; 0x06
    3ad8:	2f 3f       	cpi	r18, 0xFF	; 255
    3ada:	3f 4f       	sbci	r19, 0xFF	; 255
    3adc:	79 f4       	brne	.+30     	; 0x3afc <nwkRxHandleReceivedFrame+0x46>
    3ade:	20 91 49 1b 	lds	r18, 0x1B49	; 0x801b49 <nwkIb>
    3ae2:	30 91 4a 1b 	lds	r19, 0x1B4A	; 0x801b4a <nwkIb+0x1>
    3ae6:	87 85       	ldd	r24, Z+15	; 0x0f
    3ae8:	90 89       	ldd	r25, Z+16	; 0x10
    3aea:	28 17       	cp	r18, r24
    3aec:	39 07       	cpc	r19, r25
    3aee:	19 f0       	breq	.+6      	; 0x3af6 <nwkRxHandleReceivedFrame+0x40>
    3af0:	01 96       	adiw	r24, 0x01	; 1
    3af2:	09 f0       	breq	.+2      	; 0x3af6 <nwkRxHandleReceivedFrame+0x40>
    3af4:	41 c0       	rjmp	.+130    	; 0x3b78 <nwkRxHandleReceivedFrame+0xc2>
    3af6:	82 e2       	ldi	r24, 0x22	; 34
    3af8:	80 83       	st	Z, r24
    3afa:	3e c0       	rjmp	.+124    	; 0x3b78 <nwkRxHandleReceivedFrame+0xc2>
    3afc:	27 85       	ldd	r18, Z+15	; 0x0f
    3afe:	30 89       	ldd	r19, Z+16	; 0x10
    3b00:	2f 3f       	cpi	r18, 0xFF	; 255
    3b02:	3f 4f       	sbci	r19, 0xFF	; 255
    3b04:	11 f4       	brne	.+4      	; 0x3b0a <nwkRxHandleReceivedFrame+0x54>
    3b06:	80 fd       	sbrc	r24, 0
    3b08:	37 c0       	rjmp	.+110    	; 0x3b78 <nwkRxHandleReceivedFrame+0xc2>
    3b0a:	20 91 49 1b 	lds	r18, 0x1B49	; 0x801b49 <nwkIb>
    3b0e:	30 91 4a 1b 	lds	r19, 0x1B4A	; 0x801b4a <nwkIb+0x1>
    3b12:	85 85       	ldd	r24, Z+13	; 0x0d
    3b14:	96 85       	ldd	r25, Z+14	; 0x0e
    3b16:	28 17       	cp	r18, r24
    3b18:	39 07       	cpc	r19, r25
    3b1a:	71 f1       	breq	.+92     	; 0x3b78 <nwkRxHandleReceivedFrame+0xc2>
    3b1c:	ef 01       	movw	r28, r30
    3b1e:	cf 01       	movw	r24, r30
    3b20:	55 dd       	rcall	.-1366   	; 0x35cc <nwkRouteFrameReceived>
    3b22:	c8 01       	movw	r24, r16
    3b24:	21 df       	rcall	.-446    	; 0x3968 <nwkRxRejectDuplicate>
    3b26:	81 11       	cpse	r24, r1
    3b28:	27 c0       	rjmp	.+78     	; 0x3b78 <nwkRxHandleReceivedFrame+0xc2>
    3b2a:	8f 81       	ldd	r24, Y+7	; 0x07
    3b2c:	98 85       	ldd	r25, Y+8	; 0x08
    3b2e:	01 96       	adiw	r24, 0x01	; 1
    3b30:	71 f4       	brne	.+28     	; 0x3b4e <nwkRxHandleReceivedFrame+0x98>
    3b32:	20 91 49 1b 	lds	r18, 0x1B49	; 0x801b49 <nwkIb>
    3b36:	30 91 4a 1b 	lds	r19, 0x1B4A	; 0x801b4a <nwkIb+0x1>
    3b3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b3c:	98 89       	ldd	r25, Y+16	; 0x10
    3b3e:	28 17       	cp	r18, r24
    3b40:	39 07       	cpc	r19, r25
    3b42:	29 f0       	breq	.+10     	; 0x3b4e <nwkRxHandleReceivedFrame+0x98>
    3b44:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b46:	82 fd       	sbrc	r24, 2
    3b48:	02 c0       	rjmp	.+4      	; 0x3b4e <nwkRxHandleReceivedFrame+0x98>
    3b4a:	ce 01       	movw	r24, r28
    3b4c:	9e d1       	rcall	.+828    	; 0x3e8a <nwkTxBroadcastFrame>
    3b4e:	20 91 49 1b 	lds	r18, 0x1B49	; 0x801b49 <nwkIb>
    3b52:	30 91 4a 1b 	lds	r19, 0x1B4A	; 0x801b4a <nwkIb+0x1>
    3b56:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b58:	98 89       	ldd	r25, Y+16	; 0x10
    3b5a:	28 17       	cp	r18, r24
    3b5c:	39 07       	cpc	r19, r25
    3b5e:	11 f0       	breq	.+4      	; 0x3b64 <nwkRxHandleReceivedFrame+0xae>
    3b60:	01 96       	adiw	r24, 0x01	; 1
    3b62:	19 f4       	brne	.+6      	; 0x3b6a <nwkRxHandleReceivedFrame+0xb4>
    3b64:	82 e2       	ldi	r24, 0x22	; 34
    3b66:	88 83       	st	Y, r24
    3b68:	07 c0       	rjmp	.+14     	; 0x3b78 <nwkRxHandleReceivedFrame+0xc2>
    3b6a:	8f 81       	ldd	r24, Y+7	; 0x07
    3b6c:	98 85       	ldd	r25, Y+8	; 0x08
    3b6e:	28 17       	cp	r18, r24
    3b70:	39 07       	cpc	r19, r25
    3b72:	11 f4       	brne	.+4      	; 0x3b78 <nwkRxHandleReceivedFrame+0xc2>
    3b74:	83 e2       	ldi	r24, 0x23	; 35
    3b76:	88 83       	st	Y, r24
    3b78:	df 91       	pop	r29
    3b7a:	cf 91       	pop	r28
    3b7c:	1f 91       	pop	r17
    3b7e:	0f 91       	pop	r16
    3b80:	08 95       	ret

00003b82 <nwkRxSendAck>:
    3b82:	0f 93       	push	r16
    3b84:	1f 93       	push	r17
    3b86:	cf 93       	push	r28
    3b88:	df 93       	push	r29
    3b8a:	8c 01       	movw	r16, r24
    3b8c:	e5 db       	rcall	.-2102   	; 0x3358 <nwkFrameAlloc>
    3b8e:	ec 01       	movw	r28, r24
    3b90:	00 97       	sbiw	r24, 0x00	; 0
    3b92:	31 f1       	breq	.+76     	; 0x3be0 <nwkRxSendAck+0x5e>
    3b94:	34 dc       	rcall	.-1944   	; 0x33fe <nwkFrameCommandInit>
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
    3b98:	8d 5f       	subi	r24, 0xFD	; 253
    3b9a:	89 83       	std	Y+1, r24	; 0x01
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e9 57       	subi	r30, 0x79	; 121
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	11 82       	std	Z+1, r1	; 0x01
    3ba4:	10 82       	st	Z, r1
    3ba6:	d8 01       	movw	r26, r16
    3ba8:	1b 96       	adiw	r26, 0x0b	; 11
    3baa:	8c 91       	ld	r24, X
    3bac:	1b 97       	sbiw	r26, 0x0b	; 11
    3bae:	86 95       	lsr	r24
    3bb0:	81 70       	andi	r24, 0x01	; 1
    3bb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bb4:	80 fb       	bst	r24, 0
    3bb6:	91 f9       	bld	r25, 1
    3bb8:	9b 87       	std	Y+11, r25	; 0x0b
    3bba:	1d 96       	adiw	r26, 0x0d	; 13
    3bbc:	8d 91       	ld	r24, X+
    3bbe:	9c 91       	ld	r25, X
    3bc0:	1e 97       	sbiw	r26, 0x0e	; 14
    3bc2:	98 8b       	std	Y+16, r25	; 0x10
    3bc4:	8f 87       	std	Y+15, r24	; 0x0f
    3bc6:	36 97       	sbiw	r30, 0x06	; 6
    3bc8:	01 90       	ld	r0, Z+
    3bca:	f0 81       	ld	r31, Z
    3bcc:	e0 2d       	mov	r30, r0
    3bce:	10 82       	st	Z, r1
    3bd0:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <nwkRxAckControl>
    3bd4:	82 83       	std	Z+2, r24	; 0x02
    3bd6:	1c 96       	adiw	r26, 0x0c	; 12
    3bd8:	8c 91       	ld	r24, X
    3bda:	81 83       	std	Z+1, r24	; 0x01
    3bdc:	ce 01       	movw	r24, r28
    3bde:	03 d1       	rcall	.+518    	; 0x3de6 <nwkTxFrame>
    3be0:	df 91       	pop	r29
    3be2:	cf 91       	pop	r28
    3be4:	1f 91       	pop	r17
    3be6:	0f 91       	pop	r16
    3be8:	08 95       	ret

00003bea <nwkRxHandleIndication>:
    3bea:	cf 93       	push	r28
    3bec:	df 93       	push	r29
    3bee:	ec 01       	movw	r28, r24
    3bf0:	10 92 df 17 	sts	0x17DF, r1	; 0x8017df <nwkRxAckControl>
    3bf4:	e4 dd       	rcall	.-1080   	; 0x37be <nwkRxIndicateFrame>
    3bf6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bf8:	90 ff       	sbrs	r25, 0
    3bfa:	80 e0       	ldi	r24, 0x00	; 0
    3bfc:	2f 81       	ldd	r18, Y+7	; 0x07
    3bfe:	38 85       	ldd	r19, Y+8	; 0x08
    3c00:	2f 3f       	cpi	r18, 0xFF	; 255
    3c02:	3f 4f       	sbci	r19, 0xFF	; 255
    3c04:	59 f4       	brne	.+22     	; 0x3c1c <nwkRxHandleIndication+0x32>
    3c06:	40 91 49 1b 	lds	r20, 0x1B49	; 0x801b49 <nwkIb>
    3c0a:	50 91 4a 1b 	lds	r21, 0x1B4A	; 0x801b4a <nwkIb+0x1>
    3c0e:	2f 85       	ldd	r18, Y+15	; 0x0f
    3c10:	38 89       	ldd	r19, Y+16	; 0x10
    3c12:	42 17       	cp	r20, r18
    3c14:	53 07       	cpc	r21, r19
    3c16:	11 f4       	brne	.+4      	; 0x3c1c <nwkRxHandleIndication+0x32>
    3c18:	93 ff       	sbrs	r25, 3
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	2d 81       	ldd	r18, Y+5	; 0x05
    3c1e:	3e 81       	ldd	r19, Y+6	; 0x06
    3c20:	2f 3f       	cpi	r18, 0xFF	; 255
    3c22:	3f 4f       	sbci	r19, 0xFF	; 255
    3c24:	09 f4       	brne	.+2      	; 0x3c28 <nwkRxHandleIndication+0x3e>
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	20 91 49 1b 	lds	r18, 0x1B49	; 0x801b49 <nwkIb>
    3c2c:	30 91 4a 1b 	lds	r19, 0x1B4A	; 0x801b4a <nwkIb+0x1>
    3c30:	2f 3f       	cpi	r18, 0xFF	; 255
    3c32:	3f 4f       	sbci	r19, 0xFF	; 255
    3c34:	09 f4       	brne	.+2      	; 0x3c38 <nwkRxHandleIndication+0x4e>
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	88 23       	and	r24, r24
    3c3a:	11 f0       	breq	.+4      	; 0x3c40 <nwkRxHandleIndication+0x56>
    3c3c:	ce 01       	movw	r24, r28
    3c3e:	a1 df       	rcall	.-190    	; 0x3b82 <nwkRxSendAck>
    3c40:	84 e2       	ldi	r24, 0x24	; 36
    3c42:	88 83       	st	Y, r24
    3c44:	df 91       	pop	r29
    3c46:	cf 91       	pop	r28
    3c48:	08 95       	ret

00003c4a <nwkRxInit>:
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	0e c0       	rjmp	.+28     	; 0x3c6a <nwkRxInit+0x20>
    3c4e:	82 2f       	mov	r24, r18
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	fc 01       	movw	r30, r24
    3c54:	ee 0f       	add	r30, r30
    3c56:	ff 1f       	adc	r31, r31
    3c58:	ee 0f       	add	r30, r30
    3c5a:	ff 1f       	adc	r31, r31
    3c5c:	8e 0f       	add	r24, r30
    3c5e:	9f 1f       	adc	r25, r31
    3c60:	fc 01       	movw	r30, r24
    3c62:	e0 52       	subi	r30, 0x20	; 32
    3c64:	f8 4e       	sbci	r31, 0xE8	; 232
    3c66:	14 82       	std	Z+4, r1	; 0x04
    3c68:	2f 5f       	subi	r18, 0xFF	; 255
    3c6a:	2a 30       	cpi	r18, 0x0A	; 10
    3c6c:	80 f3       	brcs	.-32     	; 0x3c4e <nwkRxInit+0x4>
    3c6e:	e2 ed       	ldi	r30, 0xD2	; 210
    3c70:	f7 e1       	ldi	r31, 0x17	; 23
    3c72:	84 e6       	ldi	r24, 0x64	; 100
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	a0 e0       	ldi	r26, 0x00	; 0
    3c78:	b0 e0       	ldi	r27, 0x00	; 0
    3c7a:	86 83       	std	Z+6, r24	; 0x06
    3c7c:	97 83       	std	Z+7, r25	; 0x07
    3c7e:	a0 87       	std	Z+8, r26	; 0x08
    3c80:	b1 87       	std	Z+9, r27	; 0x09
    3c82:	12 86       	std	Z+10, r1	; 0x0a
    3c84:	8d e8       	ldi	r24, 0x8D	; 141
    3c86:	9c e1       	ldi	r25, 0x1C	; 28
    3c88:	94 87       	std	Z+12, r25	; 0x0c
    3c8a:	83 87       	std	Z+11, r24	; 0x0b
    3c8c:	65 e7       	ldi	r22, 0x75	; 117
    3c8e:	7c e1       	ldi	r23, 0x1C	; 28
    3c90:	80 e0       	ldi	r24, 0x00	; 0
    3c92:	60 ca       	rjmp	.-2880   	; 0x3154 <NWK_OpenEndpoint>
    3c94:	08 95       	ret

00003c96 <PHY_DataInd>:
    3c96:	cf 93       	push	r28
    3c98:	df 93       	push	r29
    3c9a:	dc 01       	movw	r26, r24
    3c9c:	ed 91       	ld	r30, X+
    3c9e:	fc 91       	ld	r31, X
    3ca0:	21 81       	ldd	r18, Z+1	; 0x01
    3ca2:	28 38       	cpi	r18, 0x88	; 136
    3ca4:	09 f5       	brne	.+66     	; 0x3ce8 <PHY_DataInd+0x52>
    3ca6:	20 81       	ld	r18, Z
    3ca8:	21 36       	cpi	r18, 0x61	; 97
    3caa:	11 f0       	breq	.+4      	; 0x3cb0 <PHY_DataInd+0x1a>
    3cac:	21 34       	cpi	r18, 0x41	; 65
    3cae:	e1 f4       	brne	.+56     	; 0x3ce8 <PHY_DataInd+0x52>
    3cb0:	fc 01       	movw	r30, r24
    3cb2:	22 81       	ldd	r18, Z+2	; 0x02
    3cb4:	20 31       	cpi	r18, 0x10	; 16
    3cb6:	c0 f0       	brcs	.+48     	; 0x3ce8 <PHY_DataInd+0x52>
    3cb8:	ec 01       	movw	r28, r24
    3cba:	4e db       	rcall	.-2404   	; 0x3358 <nwkFrameAlloc>
    3cbc:	00 97       	sbiw	r24, 0x00	; 0
    3cbe:	a1 f0       	breq	.+40     	; 0x3ce8 <PHY_DataInd+0x52>
    3cc0:	20 e2       	ldi	r18, 0x20	; 32
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	2c 93       	st	X, r18
    3cc6:	2a 81       	ldd	r18, Y+2	; 0x02
    3cc8:	11 96       	adiw	r26, 0x01	; 1
    3cca:	2c 93       	st	X, r18
    3ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    3cce:	fc 01       	movw	r30, r24
    3cd0:	ed 57       	subi	r30, 0x7D	; 125
    3cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd4:	20 83       	st	Z, r18
    3cd6:	2c 81       	ldd	r18, Y+4	; 0x04
    3cd8:	31 96       	adiw	r30, 0x01	; 1
    3cda:	20 83       	st	Z, r18
    3cdc:	4a 81       	ldd	r20, Y+2	; 0x02
    3cde:	68 81       	ld	r22, Y
    3ce0:	79 81       	ldd	r23, Y+1	; 0x01
    3ce2:	50 e0       	ldi	r21, 0x00	; 0
    3ce4:	02 96       	adiw	r24, 0x02	; 2
    3ce6:	f6 d4       	rcall	.+2540   	; 0x46d4 <memcpy>
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	08 95       	ret

00003cee <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    3cee:	cf 93       	push	r28
    3cf0:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    3cf2:	c0 e0       	ldi	r28, 0x00	; 0
    3cf4:	d0 e0       	ldi	r29, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
    3cf6:	17 c0       	rjmp	.+46     	; 0x3d26 <nwkRxTaskHandler+0x38>
  {
    switch (frame->state)
    3cf8:	88 81       	ld	r24, Y
    3cfa:	82 32       	cpi	r24, 0x22	; 34
    3cfc:	61 f0       	breq	.+24     	; 0x3d16 <nwkRxTaskHandler+0x28>
    3cfe:	18 f4       	brcc	.+6      	; 0x3d06 <nwkRxTaskHandler+0x18>
    3d00:	80 32       	cpi	r24, 0x20	; 32
    3d02:	31 f0       	breq	.+12     	; 0x3d10 <nwkRxTaskHandler+0x22>
    3d04:	10 c0       	rjmp	.+32     	; 0x3d26 <nwkRxTaskHandler+0x38>
    3d06:	83 32       	cpi	r24, 0x23	; 35
    3d08:	49 f0       	breq	.+18     	; 0x3d1c <nwkRxTaskHandler+0x2e>
    3d0a:	84 32       	cpi	r24, 0x24	; 36
    3d0c:	51 f0       	breq	.+20     	; 0x3d22 <nwkRxTaskHandler+0x34>
    3d0e:	0b c0       	rjmp	.+22     	; 0x3d26 <nwkRxTaskHandler+0x38>
    {
      case NWK_RX_STATE_RECEIVED:
      {
        nwkRxHandleReceivedFrame(frame);
    3d10:	ce 01       	movw	r24, r28
    3d12:	d1 de       	rcall	.-606    	; 0x3ab6 <nwkRxHandleReceivedFrame>
      } break;
    3d14:	08 c0       	rjmp	.+16     	; 0x3d26 <nwkRxTaskHandler+0x38>
      } break;
#endif

      case NWK_RX_STATE_INDICATE:
      {
        nwkRxHandleIndication(frame);
    3d16:	ce 01       	movw	r24, r28
    3d18:	68 df       	rcall	.-304    	; 0x3bea <nwkRxHandleIndication>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    3d1a:	05 c0       	rjmp	.+10     	; 0x3d26 <nwkRxTaskHandler+0x38>
    3d1c:	ce 01       	movw	r24, r28
      } break;
    3d1e:	15 dd       	rcall	.-1494   	; 0x374a <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    3d20:	02 c0       	rjmp	.+4      	; 0x3d26 <nwkRxTaskHandler+0x38>
    3d22:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    3d24:	4a db       	rcall	.-2412   	; 0x33ba <nwkFrameFree>
    3d26:	ce 01       	movw	r24, r28
    3d28:	52 db       	rcall	.-2396   	; 0x33ce <nwkFrameNext>
    3d2a:	ec 01       	movw	r28, r24
    3d2c:	89 2b       	or	r24, r25
    3d2e:	21 f7       	brne	.-56     	; 0x3cf8 <nwkRxTaskHandler+0xa>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    3d30:	df 91       	pop	r29
    3d32:	cf 91       	pop	r28
    3d34:	08 95       	ret

00003d36 <nwkTxConvertPhyStatus>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    3d36:	81 30       	cpi	r24, 0x01	; 1
    3d38:	51 f0       	breq	.+20     	; 0x3d4e <nwkTxConvertPhyStatus+0x18>
    3d3a:	18 f0       	brcs	.+6      	; 0x3d42 <nwkTxConvertPhyStatus+0xc>
    3d3c:	82 30       	cpi	r24, 0x02	; 2
    3d3e:	19 f0       	breq	.+6      	; 0x3d46 <nwkTxConvertPhyStatus+0x10>
    3d40:	04 c0       	rjmp	.+8      	; 0x3d4a <nwkTxConvertPhyStatus+0x14>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	08 95       	ret

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    3d46:	81 e2       	ldi	r24, 0x21	; 33
    3d48:	08 95       	ret

    default:
      return NWK_ERROR_STATUS;
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	08 95       	ret
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    3d4e:	80 e2       	ldi	r24, 0x20	; 32
      return NWK_PHY_NO_ACK_STATUS;

    default:
      return NWK_ERROR_STATUS;
  }
}
    3d50:	08 95       	ret

00003d52 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    3d52:	1f 93       	push	r17
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    3d5a:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    3d60:	14 c0       	rjmp	.+40     	; 0x3d8a <nwkTxDelayTimerHandler+0x38>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    3d62:	fc 01       	movw	r30, r24
    3d64:	20 81       	ld	r18, Z
    3d66:	21 31       	cpi	r18, 0x11	; 17
    3d68:	81 f4       	brne	.+32     	; 0x3d8a <nwkTxDelayTimerHandler+0x38>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    3d6a:	ec 57       	subi	r30, 0x7C	; 124
    3d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6e:	20 81       	ld	r18, Z
    3d70:	31 81       	ldd	r19, Z+1	; 0x01
    3d72:	21 50       	subi	r18, 0x01	; 1
    3d74:	31 09       	sbc	r19, r1
    3d76:	31 83       	std	Z+1, r19	; 0x01
    3d78:	20 83       	st	Z, r18
    3d7a:	23 2b       	or	r18, r19
    3d7c:	29 f4       	brne	.+10     	; 0x3d88 <nwkTxDelayTimerHandler+0x36>
        frame->state = NWK_TX_STATE_SEND;
    3d7e:	23 e1       	ldi	r18, 0x13	; 19
    3d80:	fc 01       	movw	r30, r24
    3d82:	20 83       	st	Z, r18

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    3d84:	11 e0       	ldi	r17, 0x01	; 1
    3d86:	01 c0       	rjmp	.+2      	; 0x3d8a <nwkTxDelayTimerHandler+0x38>
    3d88:	11 e0       	ldi	r17, 0x01	; 1
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    3d8a:	21 db       	rcall	.-2494   	; 0x33ce <nwkFrameNext>
    3d8c:	00 97       	sbiw	r24, 0x00	; 0
    3d8e:	49 f7       	brne	.-46     	; 0x3d62 <nwkTxDelayTimerHandler+0x10>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    3d90:	11 23       	and	r17, r17
    3d92:	11 f0       	breq	.+4      	; 0x3d98 <nwkTxDelayTimerHandler+0x46>
    SYS_TimerStart(timer);
    3d94:	ce 01       	movw	r24, r28
    3d96:	78 d3       	rcall	.+1776   	; 0x4488 <SYS_TimerStart>
}
    3d98:	df 91       	pop	r29
    3d9a:	cf 91       	pop	r28
    3d9c:	1f 91       	pop	r17
    3d9e:	08 95       	ret

00003da0 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    3da0:	10 92 2d 18 	sts	0x182D, r1	; 0x80182d <nwkTxPhyActiveFrame+0x1>
    3da4:	10 92 2c 18 	sts	0x182C, r1	; 0x80182c <nwkTxPhyActiveFrame>

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    3da8:	ef e1       	ldi	r30, 0x1F	; 31
    3daa:	f8 e1       	ldi	r31, 0x18	; 24
    3dac:	82 e3       	ldi	r24, 0x32	; 50
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	a0 e0       	ldi	r26, 0x00	; 0
    3db2:	b0 e0       	ldi	r27, 0x00	; 0
    3db4:	86 83       	std	Z+6, r24	; 0x06
    3db6:	97 83       	std	Z+7, r25	; 0x07
    3db8:	a0 87       	std	Z+8, r26	; 0x08
    3dba:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3dbc:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    3dbe:	83 eb       	ldi	r24, 0xB3	; 179
    3dc0:	9f e1       	ldi	r25, 0x1F	; 31
    3dc2:	94 87       	std	Z+12, r25	; 0x0c
    3dc4:	83 87       	std	Z+11, r24	; 0x0b

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    3dc6:	e2 e1       	ldi	r30, 0x12	; 18
    3dc8:	f8 e1       	ldi	r31, 0x18	; 24
    3dca:	8a e0       	ldi	r24, 0x0A	; 10
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	a0 e0       	ldi	r26, 0x00	; 0
    3dd0:	b0 e0       	ldi	r27, 0x00	; 0
    3dd2:	86 83       	std	Z+6, r24	; 0x06
    3dd4:	97 83       	std	Z+7, r25	; 0x07
    3dd6:	a0 87       	std	Z+8, r26	; 0x08
    3dd8:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3dda:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    3ddc:	89 ea       	ldi	r24, 0xA9	; 169
    3dde:	9e e1       	ldi	r25, 0x1E	; 30
    3de0:	94 87       	std	Z+12, r25	; 0x0c
    3de2:	83 87       	std	Z+11, r24	; 0x0b
    3de4:	08 95       	ret

00003de6 <nwkTxFrame>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    3dec:	fc 01       	movw	r30, r24
    3dee:	ea 57       	subi	r30, 0x7A	; 122
    3df0:	ff 4f       	sbci	r31, 0xFF	; 255
    3df2:	80 81       	ld	r24, Z
    3df4:	81 ff       	sbrs	r24, 1
    3df6:	03 c0       	rjmp	.+6      	; 0x3dfe <nwkTxFrame+0x18>
  {
    frame->state = NWK_TX_STATE_DELAY;
    3df8:	92 e1       	ldi	r25, 0x12	; 18
    3dfa:	98 83       	st	Y, r25
    3dfc:	02 c0       	rjmp	.+4      	; 0x3e02 <nwkTxFrame+0x1c>
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
    3dfe:	92 e1       	ldi	r25, 0x12	; 18
    3e00:	98 83       	st	Y, r25
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    3e02:	fe 01       	movw	r30, r28
    3e04:	ed 57       	subi	r30, 0x7D	; 125
    3e06:	ff 4f       	sbci	r31, 0xFF	; 255
    3e08:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    3e0a:	98 2f       	mov	r25, r24
    3e0c:	91 70       	andi	r25, 0x01	; 1
    3e0e:	80 ff       	sbrs	r24, 0
    3e10:	05 c0       	rjmp	.+10     	; 0x3e1c <nwkTxFrame+0x36>
    header->macDstPanId = NWK_BROADCAST_PANID;
    3e12:	2f ef       	ldi	r18, 0xFF	; 255
    3e14:	3f ef       	ldi	r19, 0xFF	; 255
    3e16:	3e 83       	std	Y+6, r19	; 0x06
    3e18:	2d 83       	std	Y+5, r18	; 0x05
    3e1a:	06 c0       	rjmp	.+12     	; 0x3e28 <nwkTxFrame+0x42>
  else
    header->macDstPanId = nwkIb.panId;
    3e1c:	20 91 4b 1b 	lds	r18, 0x1B4B	; 0x801b4b <nwkIb+0x2>
    3e20:	30 91 4c 1b 	lds	r19, 0x1B4C	; 0x801b4c <nwkIb+0x3>
    3e24:	3e 83       	std	Y+6, r19	; 0x06
    3e26:	2d 83       	std	Y+5, r18	; 0x05

#ifdef NWK_ENABLE_ROUTING
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
    3e28:	82 fd       	sbrc	r24, 2
    3e2a:	05 c0       	rjmp	.+10     	; 0x3e36 <nwkTxFrame+0x50>
    3e2c:	91 11       	cpse	r25, r1
    3e2e:	03 c0       	rjmp	.+6      	; 0x3e36 <nwkTxFrame+0x50>
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
    3e30:	ce 01       	movw	r24, r28
    3e32:	6c dc       	rcall	.-1832   	; 0x370c <nwkRoutePrepareTx>
    3e34:	04 c0       	rjmp	.+8      	; 0x3e3e <nwkTxFrame+0x58>
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
    3e36:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e38:	98 89       	ldd	r25, Y+16	; 0x10
    3e3a:	98 87       	std	Y+8, r25	; 0x08
    3e3c:	8f 83       	std	Y+7, r24	; 0x07

  header->macSrcAddr = nwkIb.addr;
    3e3e:	e9 e4       	ldi	r30, 0x49	; 73
    3e40:	fb e1       	ldi	r31, 0x1B	; 27
    3e42:	80 81       	ld	r24, Z
    3e44:	91 81       	ldd	r25, Z+1	; 0x01
    3e46:	9a 87       	std	Y+10, r25	; 0x0a
    3e48:	89 87       	std	Y+9, r24	; 0x09
  header->macSeq = ++nwkIb.macSeqNum;
    3e4a:	85 81       	ldd	r24, Z+5	; 0x05
    3e4c:	8f 5f       	subi	r24, 0xFF	; 255
    3e4e:	85 83       	std	Z+5, r24	; 0x05
    3e50:	8c 83       	std	Y+4, r24	; 0x04

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
    3e52:	8f 81       	ldd	r24, Y+7	; 0x07
    3e54:	98 85       	ldd	r25, Y+8	; 0x08
    3e56:	01 96       	adiw	r24, 0x01	; 1
    3e58:	69 f4       	brne	.+26     	; 0x3e74 <nwkTxFrame+0x8e>
  {
    header->macFcf = 0x8841;
    3e5a:	81 e4       	ldi	r24, 0x41	; 65
    3e5c:	98 e8       	ldi	r25, 0x88	; 136
    3e5e:	9b 83       	std	Y+3, r25	; 0x03
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    3e60:	8a 83       	std	Y+2, r24	; 0x02
    3e62:	2a d4       	rcall	.+2132   	; 0x46b8 <rand>
    3e64:	87 70       	andi	r24, 0x07	; 7
    3e66:	99 27       	eor	r25, r25
    3e68:	01 96       	adiw	r24, 0x01	; 1
    3e6a:	cc 57       	subi	r28, 0x7C	; 124
    3e6c:	df 4f       	sbci	r29, 0xFF	; 255
    3e6e:	99 83       	std	Y+1, r25	; 0x01
    3e70:	88 83       	st	Y, r24
    3e72:	08 c0       	rjmp	.+16     	; 0x3e84 <nwkTxFrame+0x9e>
  }
  else
  {
    header->macFcf = 0x8861;
    3e74:	81 e6       	ldi	r24, 0x61	; 97
    3e76:	98 e8       	ldi	r25, 0x88	; 136
    3e78:	9b 83       	std	Y+3, r25	; 0x03
    3e7a:	8a 83       	std	Y+2, r24	; 0x02
    frame->tx.timeout = 0;
    3e7c:	cc 57       	subi	r28, 0x7C	; 124
    3e7e:	df 4f       	sbci	r29, 0xFF	; 255
    3e80:	19 82       	std	Y+1, r1	; 0x01
    3e82:	18 82       	st	Y, r1
  }
}
    3e84:	df 91       	pop	r29
    3e86:	cf 91       	pop	r28
    3e88:	08 95       	ret

00003e8a <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    3e8a:	0f 93       	push	r16
    3e8c:	1f 93       	push	r17
    3e8e:	cf 93       	push	r28
    3e90:	df 93       	push	r29
    3e92:	8c 01       	movw	r16, r24
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    3e94:	61 da       	rcall	.-2878   	; 0x3358 <nwkFrameAlloc>
    3e96:	ec 01       	movw	r28, r24
    3e98:	89 2b       	or	r24, r25
    3e9a:	a9 f1       	breq	.+106    	; 0x3f06 <nwkTxBroadcastFrame+0x7c>
    return;

  newFrame->state = NWK_TX_STATE_DELAY;
    3e9c:	82 e1       	ldi	r24, 0x12	; 18
    3e9e:	88 83       	st	Y, r24
  newFrame->size = frame->size;
    3ea0:	f8 01       	movw	r30, r16
    3ea2:	81 81       	ldd	r24, Z+1	; 0x01
    3ea4:	89 83       	std	Y+1, r24	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	ed 57       	subi	r30, 0x7D	; 125
    3eaa:	ff 4f       	sbci	r31, 0xFF	; 255
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    3eac:	10 82       	st	Z, r1
    3eae:	04 d4       	rcall	.+2056   	; 0x46b8 <rand>
    3eb0:	87 70       	andi	r24, 0x07	; 7
    3eb2:	99 27       	eor	r25, r25
    3eb4:	01 96       	adiw	r24, 0x01	; 1
    3eb6:	fe 01       	movw	r30, r28
    3eb8:	ec 57       	subi	r30, 0x7C	; 124
    3eba:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebc:	91 83       	std	Z+1, r25	; 0x01
    3ebe:	80 83       	st	Z, r24
  newFrame->tx.confirm = NULL;
    3ec0:	33 96       	adiw	r30, 0x03	; 3
    3ec2:	11 82       	std	Z+1, r1	; 0x01
    3ec4:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    3ec6:	f8 01       	movw	r30, r16
    3ec8:	41 81       	ldd	r20, Z+1	; 0x01
    3eca:	b8 01       	movw	r22, r16
    3ecc:	6e 5f       	subi	r22, 0xFE	; 254
    3ece:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed0:	50 e0       	ldi	r21, 0x00	; 0
    3ed2:	ce 01       	movw	r24, r28
    3ed4:	02 96       	adiw	r24, 0x02	; 2
    3ed6:	fe d3       	rcall	.+2044   	; 0x46d4 <memcpy>

  newFrame->header.macFcf = 0x8841;
    3ed8:	81 e4       	ldi	r24, 0x41	; 65
    3eda:	98 e8       	ldi	r25, 0x88	; 136
    3edc:	9b 83       	std	Y+3, r25	; 0x03
    3ede:	8a 83       	std	Y+2, r24	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    3ee0:	8f ef       	ldi	r24, 0xFF	; 255
    3ee2:	9f ef       	ldi	r25, 0xFF	; 255
    3ee4:	98 87       	std	Y+8, r25	; 0x08
    3ee6:	8f 83       	std	Y+7, r24	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    3ee8:	f8 01       	movw	r30, r16
    3eea:	85 81       	ldd	r24, Z+5	; 0x05
    3eec:	96 81       	ldd	r25, Z+6	; 0x06
    3eee:	9e 83       	std	Y+6, r25	; 0x06
    3ef0:	8d 83       	std	Y+5, r24	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    3ef2:	e9 e4       	ldi	r30, 0x49	; 73
    3ef4:	fb e1       	ldi	r31, 0x1B	; 27
    3ef6:	80 81       	ld	r24, Z
    3ef8:	91 81       	ldd	r25, Z+1	; 0x01
    3efa:	9a 87       	std	Y+10, r25	; 0x0a
    3efc:	89 87       	std	Y+9, r24	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    3efe:	85 81       	ldd	r24, Z+5	; 0x05
    3f00:	8f 5f       	subi	r24, 0xFF	; 255
    3f02:	85 83       	std	Z+5, r24	; 0x05
    3f04:	8c 83       	std	Y+4, r24	; 0x04
}
    3f06:	df 91       	pop	r29
    3f08:	cf 91       	pop	r28
    3f0a:	1f 91       	pop	r17
    3f0c:	0f 91       	pop	r16
    3f0e:	08 95       	ret

00003f10 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    3f10:	cf 93       	push	r28
    3f12:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    3f14:	fc 01       	movw	r30, r24
    3f16:	c7 81       	ldd	r28, Z+7	; 0x07
    3f18:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    3f1a:	81 85       	ldd	r24, Z+9	; 0x09
    3f1c:	83 30       	cpi	r24, 0x03	; 3
    3f1e:	c1 f4       	brne	.+48     	; 0x3f50 <nwkTxAckReceived+0x40>
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	10 c0       	rjmp	.+32     	; 0x3f46 <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    3f26:	fc 01       	movw	r30, r24
    3f28:	20 81       	ld	r18, Z
    3f2a:	26 31       	cpi	r18, 0x16	; 22
    3f2c:	61 f4       	brne	.+24     	; 0x3f46 <nwkTxAckReceived+0x36>
    3f2e:	34 85       	ldd	r19, Z+12	; 0x0c
    3f30:	29 81       	ldd	r18, Y+1	; 0x01
    3f32:	32 13       	cpse	r19, r18
    3f34:	08 c0       	rjmp	.+16     	; 0x3f46 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    3f36:	27 e1       	ldi	r18, 0x17	; 23
    3f38:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    3f3a:	2a 81       	ldd	r18, Y+2	; 0x02
    3f3c:	ea 57       	subi	r30, 0x7A	; 122
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	20 83       	st	Z, r18
      return true;
    3f42:	81 e0       	ldi	r24, 0x01	; 1
    3f44:	06 c0       	rjmp	.+12     	; 0x3f52 <nwkTxAckReceived+0x42>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    3f46:	43 da       	rcall	.-2938   	; 0x33ce <nwkFrameNext>
    3f48:	00 97       	sbiw	r24, 0x00	; 0
    3f4a:	69 f7       	brne	.-38     	; 0x3f26 <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	01 c0       	rjmp	.+2      	; 0x3f52 <nwkTxAckReceived+0x42>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    3f50:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    3f52:	df 91       	pop	r29
    3f54:	cf 91       	pop	r28
    3f56:	08 95       	ret

00003f58 <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    3f58:	27 e1       	ldi	r18, 0x17	; 23
    3f5a:	fc 01       	movw	r30, r24
    3f5c:	20 83       	st	Z, r18
  frame->tx.status = status;
    3f5e:	ed 57       	subi	r30, 0x7D	; 125
    3f60:	ff 4f       	sbci	r31, 0xFF	; 255
    3f62:	60 83       	st	Z, r22
    3f64:	08 95       	ret

00003f66 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    3f66:	ef 92       	push	r14
    3f68:	ff 92       	push	r15
    3f6a:	1f 93       	push	r17
    3f6c:	cf 93       	push	r28
    3f6e:	df 93       	push	r29
    3f70:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    3f72:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    3f74:	c0 e0       	ldi	r28, 0x00	; 0
    3f76:	d0 e0       	ldi	r29, 0x00	; 0
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    3f78:	13 c0       	rjmp	.+38     	; 0x3fa0 <nwkTxAckWaitTimerHandler+0x3a>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    3f7a:	88 81       	ld	r24, Y
    3f7c:	86 31       	cpi	r24, 0x16	; 22
    3f7e:	81 f4       	brne	.+32     	; 0x3fa0 <nwkTxAckWaitTimerHandler+0x3a>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    3f80:	fe 01       	movw	r30, r28
    3f82:	ec 57       	subi	r30, 0x7C	; 124
    3f84:	ff 4f       	sbci	r31, 0xFF	; 255
    3f86:	80 81       	ld	r24, Z
    3f88:	91 81       	ldd	r25, Z+1	; 0x01
    3f8a:	01 97       	sbiw	r24, 0x01	; 1
    3f8c:	91 83       	std	Z+1, r25	; 0x01
    3f8e:	80 83       	st	Z, r24
    3f90:	89 2b       	or	r24, r25
    3f92:	29 f4       	brne	.+10     	; 0x3f9e <nwkTxAckWaitTimerHandler+0x38>
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    3f94:	60 e1       	ldi	r22, 0x10	; 16
    3f96:	ce 01       	movw	r24, r28
    3f98:	df df       	rcall	.-66     	; 0x3f58 <nwkTxConfirm>

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    3f9a:	11 e0       	ldi	r17, 0x01	; 1
    3f9c:	01 c0       	rjmp	.+2      	; 0x3fa0 <nwkTxAckWaitTimerHandler+0x3a>
    3f9e:	11 e0       	ldi	r17, 0x01	; 1
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    3fa0:	ce 01       	movw	r24, r28
    3fa2:	15 da       	rcall	.-3030   	; 0x33ce <nwkFrameNext>
    3fa4:	ec 01       	movw	r28, r24
    3fa6:	89 2b       	or	r24, r25
    3fa8:	41 f7       	brne	.-48     	; 0x3f7a <nwkTxAckWaitTimerHandler+0x14>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    3faa:	11 23       	and	r17, r17
    SYS_TimerStart(timer);
    3fac:	11 f0       	breq	.+4      	; 0x3fb2 <nwkTxAckWaitTimerHandler+0x4c>
    3fae:	c7 01       	movw	r24, r14
    3fb0:	6b d2       	rcall	.+1238   	; 0x4488 <SYS_TimerStart>
}
    3fb2:	df 91       	pop	r29
    3fb4:	cf 91       	pop	r28
    3fb6:	1f 91       	pop	r17
    3fb8:	ff 90       	pop	r15
    3fba:	ef 90       	pop	r14
    3fbc:	08 95       	ret

00003fbe <PHY_DataConf>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
    3fbe:	cf 93       	push	r28
    3fc0:	df 93       	push	r29
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    3fc2:	c0 91 2c 18 	lds	r28, 0x182C	; 0x80182c <nwkTxPhyActiveFrame>
    3fc6:	d0 91 2d 18 	lds	r29, 0x182D	; 0x80182d <nwkTxPhyActiveFrame+0x1>
    3fca:	b5 de       	rcall	.-662    	; 0x3d36 <nwkTxConvertPhyStatus>
    3fcc:	fe 01       	movw	r30, r28
    3fce:	ed 57       	subi	r30, 0x7D	; 125
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    3fd4:	85 e1       	ldi	r24, 0x15	; 21
    3fd6:	88 83       	st	Y, r24
  nwkTxPhyActiveFrame = NULL;
    3fd8:	10 92 2d 18 	sts	0x182D, r1	; 0x80182d <nwkTxPhyActiveFrame+0x1>
    3fdc:	10 92 2c 18 	sts	0x182C, r1	; 0x80182c <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    3fe0:	e9 e4       	ldi	r30, 0x49	; 73
    3fe2:	fb e1       	ldi	r31, 0x1B	; 27
    3fe4:	86 a1       	ldd	r24, Z+38	; 0x26
    3fe6:	97 a1       	ldd	r25, Z+39	; 0x27
    3fe8:	01 97       	sbiw	r24, 0x01	; 1
    3fea:	97 a3       	std	Z+39, r25	; 0x27
    3fec:	86 a3       	std	Z+38, r24	; 0x26
}
    3fee:	df 91       	pop	r29
    3ff0:	cf 91       	pop	r28
    3ff2:	08 95       	ret

00003ff4 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    3ff4:	cf 93       	push	r28
    3ff6:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    3ff8:	c0 e0       	ldi	r28, 0x00	; 0
    3ffa:	d0 e0       	ldi	r29, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
    3ffc:	68 c0       	rjmp	.+208    	; 0x40ce <nwkTxTaskHandler+0xda>
  {
    switch (frame->state)
    3ffe:	88 81       	ld	r24, Y
    4000:	83 31       	cpi	r24, 0x13	; 19
    4002:	d1 f0       	breq	.+52     	; 0x4038 <nwkTxTaskHandler+0x44>
    4004:	18 f4       	brcc	.+6      	; 0x400c <nwkTxTaskHandler+0x18>
    4006:	82 31       	cpi	r24, 0x12	; 18
    4008:	39 f0       	breq	.+14     	; 0x4018 <nwkTxTaskHandler+0x24>
    400a:	61 c0       	rjmp	.+194    	; 0x40ce <nwkTxTaskHandler+0xda>
    400c:	85 31       	cpi	r24, 0x15	; 21
    400e:	69 f1       	breq	.+90     	; 0x406a <nwkTxTaskHandler+0x76>
    4010:	87 31       	cpi	r24, 0x17	; 23
    4012:	09 f4       	brne	.+2      	; 0x4016 <nwkTxTaskHandler+0x22>
    4014:	4d c0       	rjmp	.+154    	; 0x40b0 <nwkTxTaskHandler+0xbc>
    4016:	5b c0       	rjmp	.+182    	; 0x40ce <nwkTxTaskHandler+0xda>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    4018:	fe 01       	movw	r30, r28
    401a:	ec 57       	subi	r30, 0x7C	; 124
    401c:	ff 4f       	sbci	r31, 0xFF	; 255
    401e:	80 81       	ld	r24, Z
    4020:	91 81       	ldd	r25, Z+1	; 0x01
    4022:	89 2b       	or	r24, r25
    4024:	31 f0       	breq	.+12     	; 0x4032 <nwkTxTaskHandler+0x3e>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    4026:	81 e1       	ldi	r24, 0x11	; 17
    4028:	88 83       	st	Y, r24
          SYS_TimerStart(&nwkTxDelayTimer);
    402a:	82 e1       	ldi	r24, 0x12	; 18
    402c:	98 e1       	ldi	r25, 0x18	; 24
    402e:	2c d2       	rcall	.+1112   	; 0x4488 <SYS_TimerStart>
    4030:	4e c0       	rjmp	.+156    	; 0x40ce <nwkTxTaskHandler+0xda>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    4032:	83 e1       	ldi	r24, 0x13	; 19
    4034:	88 83       	st	Y, r24
    4036:	4b c0       	rjmp	.+150    	; 0x40ce <nwkTxTaskHandler+0xda>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    4038:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <nwkTxPhyActiveFrame>
    403c:	90 91 2d 18 	lds	r25, 0x182D	; 0x80182d <nwkTxPhyActiveFrame+0x1>
    4040:	89 2b       	or	r24, r25
    4042:	09 f0       	breq	.+2      	; 0x4046 <nwkTxTaskHandler+0x52>
    4044:	44 c0       	rjmp	.+136    	; 0x40ce <nwkTxTaskHandler+0xda>
        {
          nwkTxPhyActiveFrame = frame;
    4046:	d0 93 2d 18 	sts	0x182D, r29	; 0x80182d <nwkTxPhyActiveFrame+0x1>
    404a:	c0 93 2c 18 	sts	0x182C, r28	; 0x80182c <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    404e:	84 e1       	ldi	r24, 0x14	; 20
    4050:	88 83       	st	Y, r24
          PHY_DataReq(frame->data, frame->size);
    4052:	69 81       	ldd	r22, Y+1	; 0x01
    4054:	ce 01       	movw	r24, r28
    4056:	02 96       	adiw	r24, 0x02	; 2
    4058:	c5 d0       	rcall	.+394    	; 0x41e4 <PHY_DataReq>
          nwkIb.lock++;
    405a:	e9 e4       	ldi	r30, 0x49	; 73
    405c:	fb e1       	ldi	r31, 0x1B	; 27
    405e:	86 a1       	ldd	r24, Z+38	; 0x26
    4060:	97 a1       	ldd	r25, Z+39	; 0x27
    4062:	01 96       	adiw	r24, 0x01	; 1
    4064:	97 a3       	std	Z+39, r25	; 0x27
    4066:	86 a3       	std	Z+38, r24	; 0x26
    4068:	32 c0       	rjmp	.+100    	; 0x40ce <nwkTxTaskHandler+0xda>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    406a:	fe 01       	movw	r30, r28
    406c:	ed 57       	subi	r30, 0x7D	; 125
    406e:	ff 4f       	sbci	r31, 0xFF	; 255
    4070:	80 81       	ld	r24, Z
    4072:	81 11       	cpse	r24, r1
    4074:	1a c0       	rjmp	.+52     	; 0x40aa <nwkTxTaskHandler+0xb6>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    4076:	2d 85       	ldd	r18, Y+13	; 0x0d
    4078:	3e 85       	ldd	r19, Y+14	; 0x0e
    407a:	80 91 49 1b 	lds	r24, 0x1B49	; 0x801b49 <nwkIb>
    407e:	90 91 4a 1b 	lds	r25, 0x1B4A	; 0x801b4a <nwkIb+0x1>
    4082:	28 17       	cp	r18, r24
    4084:	39 07       	cpc	r19, r25
    4086:	71 f4       	brne	.+28     	; 0x40a4 <nwkTxTaskHandler+0xb0>
    4088:	8b 85       	ldd	r24, Y+11	; 0x0b
    408a:	80 ff       	sbrs	r24, 0
    408c:	0b c0       	rjmp	.+22     	; 0x40a4 <nwkTxTaskHandler+0xb0>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    408e:	86 e1       	ldi	r24, 0x16	; 22
    4090:	88 83       	st	Y, r24
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    4092:	89 e2       	ldi	r24, 0x29	; 41
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	31 96       	adiw	r30, 0x01	; 1
    4098:	91 83       	std	Z+1, r25	; 0x01
    409a:	80 83       	st	Z, r24
            SYS_TimerStart(&nwkTxAckWaitTimer);
    409c:	8f e1       	ldi	r24, 0x1F	; 31
    409e:	98 e1       	ldi	r25, 0x18	; 24
    40a0:	f3 d1       	rcall	.+998    	; 0x4488 <SYS_TimerStart>
    40a2:	15 c0       	rjmp	.+42     	; 0x40ce <nwkTxTaskHandler+0xda>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    40a4:	87 e1       	ldi	r24, 0x17	; 23
    40a6:	88 83       	st	Y, r24
    40a8:	12 c0       	rjmp	.+36     	; 0x40ce <nwkTxTaskHandler+0xda>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    40aa:	87 e1       	ldi	r24, 0x17	; 23
    40ac:	88 83       	st	Y, r24
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    40ae:	0f c0       	rjmp	.+30     	; 0x40ce <nwkTxTaskHandler+0xda>
    40b0:	ce 01       	movw	r24, r28
    40b2:	f0 da       	rcall	.-2592   	; 0x3694 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    40b4:	fe 01       	movw	r30, r28
    40b6:	e9 57       	subi	r30, 0x79	; 121
    40b8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ba:	01 90       	ld	r0, Z+
    40bc:	f0 81       	ld	r31, Z
    40be:	e0 2d       	mov	r30, r0
    40c0:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    40c2:	19 f4       	brne	.+6      	; 0x40ca <nwkTxTaskHandler+0xd6>
    40c4:	ce 01       	movw	r24, r28
    40c6:	79 d9       	rcall	.-3342   	; 0x33ba <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    40c8:	02 c0       	rjmp	.+4      	; 0x40ce <nwkTxTaskHandler+0xda>
    40ca:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    40cc:	19 95       	eicall
    40ce:	ce 01       	movw	r24, r28
    40d0:	7e d9       	rcall	.-3332   	; 0x33ce <nwkFrameNext>
    40d2:	ec 01       	movw	r28, r24
    40d4:	89 2b       	or	r24, r25
    40d6:	09 f0       	breq	.+2      	; 0x40da <nwkTxTaskHandler+0xe6>
    40d8:	92 cf       	rjmp	.-220    	; 0x3ffe <nwkTxTaskHandler+0xa>

      default:
        break;
    };
  }
}
    40da:	df 91       	pop	r29
    40dc:	cf 91       	pop	r28
    40de:	08 95       	ret

000040e0 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    40e0:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <phyBand>
    40e4:	98 2f       	mov	r25, r24
    40e6:	9f 70       	andi	r25, 0x0F	; 15
    40e8:	e4 e5       	ldi	r30, 0x54	; 84
    40ea:	f1 e0       	ldi	r31, 0x01	; 1
    40ec:	80 81       	ld	r24, Z
    40ee:	80 7f       	andi	r24, 0xF0	; 240
    40f0:	89 2b       	or	r24, r25
    40f2:	80 83       	st	Z, r24
    40f4:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <phyBand>
    40f8:	88 23       	and	r24, r24
    40fa:	29 f0       	breq	.+10     	; 0x4106 <phySetChannel+0x26>
    40fc:	80 91 2f 18 	lds	r24, 0x182F	; 0x80182f <phyChannel>
    4100:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    4104:	08 95       	ret
    4106:	80 91 2f 18 	lds	r24, 0x182F	; 0x80182f <phyChannel>
    410a:	98 2f       	mov	r25, r24
    410c:	9f 71       	andi	r25, 0x1F	; 31
    410e:	e8 e4       	ldi	r30, 0x48	; 72
    4110:	f1 e0       	ldi	r31, 0x01	; 1
    4112:	80 81       	ld	r24, Z
    4114:	80 7e       	andi	r24, 0xE0	; 224
    4116:	89 2b       	or	r24, r25
    4118:	80 83       	st	Z, r24
    411a:	08 95       	ret

0000411c <phyTrxSetState>:
    411c:	93 e0       	ldi	r25, 0x03	; 3
    411e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    4122:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    4126:	9f 71       	andi	r25, 0x1F	; 31
    4128:	98 30       	cpi	r25, 0x08	; 8
    412a:	d9 f7       	brne	.-10     	; 0x4122 <phyTrxSetState+0x6>
    412c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    4130:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    4134:	9f 71       	andi	r25, 0x1F	; 31
    4136:	89 13       	cpse	r24, r25
    4138:	fb cf       	rjmp	.-10     	; 0x4130 <phyTrxSetState+0x14>
    413a:	08 95       	ret

0000413c <phySetRxState>:
    413c:	88 e0       	ldi	r24, 0x08	; 8
    413e:	ee df       	rcall	.-36     	; 0x411c <phyTrxSetState>
    4140:	8f ef       	ldi	r24, 0xFF	; 255
    4142:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    4146:	80 91 30 18 	lds	r24, 0x1830	; 0x801830 <phyRxState>
    414a:	88 23       	and	r24, r24
    414c:	11 f0       	breq	.+4      	; 0x4152 <phySetRxState+0x16>
    414e:	86 e1       	ldi	r24, 0x16	; 22
    4150:	e5 cf       	rjmp	.-54     	; 0x411c <phyTrxSetState>
    4152:	08 95       	ret

00004154 <PHY_Init>:
    4154:	e9 e3       	ldi	r30, 0x39	; 57
    4156:	f1 e0       	ldi	r31, 0x01	; 1
    4158:	80 81       	ld	r24, Z
    415a:	81 60       	ori	r24, 0x01	; 1
    415c:	80 83       	st	Z, r24
    415e:	10 92 30 18 	sts	0x1830, r1	; 0x801830 <phyRxState>
    4162:	10 92 2e 18 	sts	0x182E, r1	; 0x80182e <phyBand>
    4166:	81 e0       	ldi	r24, 0x01	; 1
    4168:	80 93 b1 18 	sts	0x18B1, r24	; 0x8018b1 <phyState>
    416c:	88 e0       	ldi	r24, 0x08	; 8
    416e:	d6 df       	rcall	.-84     	; 0x411c <phyTrxSetState>
    4170:	8b ee       	ldi	r24, 0xEB	; 235
    4172:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    4176:	ec e4       	ldi	r30, 0x4C	; 76
    4178:	f1 e0       	ldi	r31, 0x01	; 1
    417a:	80 81       	ld	r24, Z
    417c:	80 68       	ori	r24, 0x80	; 128
    417e:	80 83       	st	Z, r24
    4180:	08 95       	ret

00004182 <PHY_SetRxState>:
    4182:	80 93 30 18 	sts	0x1830, r24	; 0x801830 <phyRxState>
    4186:	da cf       	rjmp	.-76     	; 0x413c <phySetRxState>
    4188:	08 95       	ret

0000418a <PHY_SetChannel>:
    418a:	80 93 2f 18 	sts	0x182F, r24	; 0x80182f <phyChannel>
    418e:	a8 cf       	rjmp	.-176    	; 0x40e0 <phySetChannel>
    4190:	08 95       	ret

00004192 <PHY_SetPanId>:
    4192:	cf 93       	push	r28
    4194:	df 93       	push	r29
    4196:	1f 92       	push	r1
    4198:	1f 92       	push	r1
    419a:	cd b7       	in	r28, 0x3d	; 61
    419c:	de b7       	in	r29, 0x3e	; 62
    419e:	9a 83       	std	Y+2, r25	; 0x02
    41a0:	89 83       	std	Y+1, r24	; 0x01
    41a2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    41a6:	8a 81       	ldd	r24, Y+2	; 0x02
    41a8:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    41ac:	0f 90       	pop	r0
    41ae:	0f 90       	pop	r0
    41b0:	df 91       	pop	r29
    41b2:	cf 91       	pop	r28
    41b4:	08 95       	ret

000041b6 <PHY_SetShortAddr>:
    41b6:	cf 93       	push	r28
    41b8:	df 93       	push	r29
    41ba:	1f 92       	push	r1
    41bc:	1f 92       	push	r1
    41be:	cd b7       	in	r28, 0x3d	; 61
    41c0:	de b7       	in	r29, 0x3e	; 62
    41c2:	9a 83       	std	Y+2, r25	; 0x02
    41c4:	89 83       	std	Y+1, r24	; 0x01
    41c6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    41ca:	8a 81       	ldd	r24, Y+2	; 0x02
    41cc:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    41d0:	99 81       	ldd	r25, Y+1	; 0x01
    41d2:	8a 81       	ldd	r24, Y+2	; 0x02
    41d4:	89 0f       	add	r24, r25
    41d6:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    41da:	0f 90       	pop	r0
    41dc:	0f 90       	pop	r0
    41de:	df 91       	pop	r29
    41e0:	cf 91       	pop	r28
    41e2:	08 95       	ret

000041e4 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    41e4:	0f 93       	push	r16
    41e6:	1f 93       	push	r17
    41e8:	cf 93       	push	r28
    41ea:	8c 01       	movw	r16, r24
    41ec:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    41ee:	89 e1       	ldi	r24, 0x19	; 25
    41f0:	95 df       	rcall	.-214    	; 0x411c <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    41f2:	8f ef       	ldi	r24, 0xFF	; 255
    41f4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    41f8:	82 e0       	ldi	r24, 0x02	; 2
    41fa:	8c 0f       	add	r24, r28
    41fc:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	0b c0       	rjmp	.+22     	; 0x421a <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];
    4204:	82 2f       	mov	r24, r18
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	fc 01       	movw	r30, r24
    420a:	ef 57       	subi	r30, 0x7F	; 127
    420c:	fe 4f       	sbci	r31, 0xFE	; 254
    420e:	d8 01       	movw	r26, r16
    4210:	a8 0f       	add	r26, r24
    4212:	b9 1f       	adc	r27, r25
    4214:	8c 91       	ld	r24, X
    4216:	80 83       	st	Z, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    4218:	2f 5f       	subi	r18, 0xFF	; 255
    421a:	2c 17       	cp	r18, r28
    421c:	98 f3       	brcs	.-26     	; 0x4204 <PHY_DataReq+0x20>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    421e:	83 e0       	ldi	r24, 0x03	; 3
    4220:	80 93 b1 18 	sts	0x18B1, r24	; 0x8018b1 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    4224:	82 e0       	ldi	r24, 0x02	; 2
    4226:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    422a:	cf 91       	pop	r28
    422c:	1f 91       	pop	r17
    422e:	0f 91       	pop	r16
    4230:	08 95       	ret

00004232 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    4232:	1f 93       	push	r17
    4234:	cf 93       	push	r28
    4236:	df 93       	push	r29
    4238:	00 d0       	rcall	.+0      	; 0x423a <PHY_TaskHandler+0x8>
    423a:	1f 92       	push	r1
    423c:	1f 92       	push	r1
    423e:	cd b7       	in	r28, 0x3d	; 61
    4240:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    4242:	80 91 b1 18 	lds	r24, 0x18B1	; 0x8018b1 <phyState>
    4246:	82 30       	cpi	r24, 0x02	; 2
    4248:	09 f4       	brne	.+2      	; 0x424c <PHY_TaskHandler+0x1a>
    424a:	63 c0       	rjmp	.+198    	; 0x4312 <PHY_TaskHandler+0xe0>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    424c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    4250:	83 ff       	sbrs	r24, 3
    4252:	3c c0       	rjmp	.+120    	; 0x42cc <PHY_TaskHandler+0x9a>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    4254:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	09 c0       	rjmp	.+18     	; 0x426e <PHY_TaskHandler+0x3c>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    425c:	fc 01       	movw	r30, r24
    425e:	e0 58       	subi	r30, 0x80	; 128
    4260:	fe 4f       	sbci	r31, 0xFE	; 254
    4262:	30 81       	ld	r19, Z
    4264:	fc 01       	movw	r30, r24
    4266:	ef 5c       	subi	r30, 0xCF	; 207
    4268:	f7 4e       	sbci	r31, 0xE7	; 231
    426a:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    426c:	2f 5f       	subi	r18, 0xFF	; 255
    426e:	82 2f       	mov	r24, r18
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	4a 2f       	mov	r20, r26
    4274:	50 e0       	ldi	r21, 0x00	; 0
    4276:	ba 01       	movw	r22, r20
    4278:	6f 5f       	subi	r22, 0xFF	; 255
    427a:	7f 4f       	sbci	r23, 0xFF	; 255
    427c:	86 17       	cp	r24, r22
    427e:	97 07       	cpc	r25, r23
    4280:	6c f3       	brlt	.-38     	; 0x425c <PHY_TaskHandler+0x2a>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    4282:	81 e3       	ldi	r24, 0x31	; 49
    4284:	98 e1       	ldi	r25, 0x18	; 24
    4286:	9a 83       	std	Y+2, r25	; 0x02
    4288:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    428a:	a2 50       	subi	r26, 0x02	; 2
    428c:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    428e:	fa 01       	movw	r30, r20
    4290:	ef 5c       	subi	r30, 0xCF	; 207
    4292:	f7 4e       	sbci	r31, 0xE7	; 231
    4294:	80 81       	ld	r24, Z
    4296:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    4298:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    429c:	8a 55       	subi	r24, 0x5A	; 90
    429e:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    42a0:	ce 01       	movw	r24, r28
    42a2:	01 96       	adiw	r24, 0x01	; 1
    42a4:	f8 dc       	rcall	.-1552   	; 0x3c96 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    42a6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    42aa:	8f 71       	andi	r24, 0x1F	; 31
    42ac:	86 31       	cpi	r24, 0x16	; 22
    42ae:	d9 f7       	brne	.-10     	; 0x42a6 <PHY_TaskHandler+0x74>

    IRQ_STATUS_REG_s.rxEnd = 1;
    42b0:	ef e4       	ldi	r30, 0x4F	; 79
    42b2:	f1 e0       	ldi	r31, 0x01	; 1
    42b4:	80 81       	ld	r24, Z
    42b6:	88 60       	ori	r24, 0x08	; 8
    42b8:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    42ba:	ec e4       	ldi	r30, 0x4C	; 76
    42bc:	f1 e0       	ldi	r31, 0x01	; 1
    42be:	80 81       	ld	r24, Z
    42c0:	8f 77       	andi	r24, 0x7F	; 127
    42c2:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    42c4:	80 81       	ld	r24, Z
    42c6:	80 68       	ori	r24, 0x80	; 128
    42c8:	80 83       	st	Z, r24
    42ca:	23 c0       	rjmp	.+70     	; 0x4312 <PHY_TaskHandler+0xe0>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    42cc:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    42d0:	86 ff       	sbrs	r24, 6
    42d2:	1f c0       	rjmp	.+62     	; 0x4312 <PHY_TaskHandler+0xe0>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    42d4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    42d8:	8f 71       	andi	r24, 0x1F	; 31
    42da:	89 31       	cpi	r24, 0x19	; 25
    42dc:	a9 f4       	brne	.+42     	; 0x4308 <PHY_TaskHandler+0xd6>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    42de:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    42e2:	12 95       	swap	r17
    42e4:	16 95       	lsr	r17
    42e6:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    42e8:	49 f0       	breq	.+18     	; 0x42fc <PHY_TaskHandler+0xca>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    42ea:	13 30       	cpi	r17, 0x03	; 3
    42ec:	21 f0       	breq	.+8      	; 0x42f6 <PHY_TaskHandler+0xc4>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    42ee:	15 30       	cpi	r17, 0x05	; 5
    42f0:	21 f4       	brne	.+8      	; 0x42fa <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_NO_ACK;
    42f2:	12 e0       	ldi	r17, 0x02	; 2
    42f4:	03 c0       	rjmp	.+6      	; 0x42fc <PHY_TaskHandler+0xca>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    42f6:	11 e0       	ldi	r17, 0x01	; 1
    42f8:	01 c0       	rjmp	.+2      	; 0x42fc <PHY_TaskHandler+0xca>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    42fa:	13 e0       	ldi	r17, 0x03	; 3
    42fc:	1f df       	rcall	.-450    	; 0x413c <phySetRxState>
      phyState = PHY_STATE_IDLE;
    42fe:	81 e0       	ldi	r24, 0x01	; 1
    4300:	80 93 b1 18 	sts	0x18B1, r24	; 0x8018b1 <phyState>

      PHY_DataConf(status);
    4304:	81 2f       	mov	r24, r17
    4306:	5b de       	rcall	.-842    	; 0x3fbe <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    4308:	ef e4       	ldi	r30, 0x4F	; 79
    430a:	f1 e0       	ldi	r31, 0x01	; 1
    430c:	80 81       	ld	r24, Z
    430e:	80 64       	ori	r24, 0x40	; 64
    4310:	80 83       	st	Z, r24
  }
}
    4312:	0f 90       	pop	r0
    4314:	0f 90       	pop	r0
    4316:	0f 90       	pop	r0
    4318:	0f 90       	pop	r0
    431a:	0f 90       	pop	r0
    431c:	df 91       	pop	r29
    431e:	cf 91       	pop	r28
    4320:	1f 91       	pop	r17
    4322:	08 95       	ret

00004324 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    4324:	0e 94 34 17 	call	0x2e68	; 0x2e68 <HAL_Init>
  SYS_TimerInit();
    4328:	60 d0       	rcall	.+192    	; 0x43ea <SYS_TimerInit>
  PHY_Init();
    432a:	14 df       	rcall	.-472    	; 0x4154 <PHY_Init>
    432c:	0c 94 80 18 	jmp	0x3100	; 0x3100 <NWK_Init>
  NWK_Init();
    4330:	08 95       	ret

00004332 <SYS_TaskHandler>:
    4332:	7f df       	rcall	.-258    	; 0x4232 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    4334:	0e 94 b4 18 	call	0x3168	; 0x3168 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    4338:	b2 c0       	rjmp	.+356    	; 0x449e <SYS_TimerTaskHandler>
    433a:	08 95       	ret

0000433c <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    433c:	0f 93       	push	r16
    433e:	1f 93       	push	r17
    4340:	cf 93       	push	r28
    4342:	df 93       	push	r29
    4344:	ec 01       	movw	r28, r24
  if (timers)
    4346:	80 91 b2 18 	lds	r24, 0x18B2	; 0x8018b2 <timers>
    434a:	90 91 b3 18 	lds	r25, 0x18B3	; 0x8018b3 <timers+0x1>
    434e:	00 97       	sbiw	r24, 0x00	; 0
    4350:	c9 f1       	breq	.+114    	; 0x43c4 <placeTimer+0x88>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    4352:	4e 81       	ldd	r20, Y+6	; 0x06
    4354:	5f 81       	ldd	r21, Y+7	; 0x07
    4356:	68 85       	ldd	r22, Y+8	; 0x08
    4358:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    435a:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    435c:	a0 e0       	ldi	r26, 0x00	; 0
    435e:	b0 e0       	ldi	r27, 0x00	; 0
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    4360:	1a c0       	rjmp	.+52     	; 0x4396 <placeTimer+0x5a>
    {
      if (timeout < t->timeout)
    4362:	02 81       	ldd	r16, Z+2	; 0x02
    4364:	13 81       	ldd	r17, Z+3	; 0x03
    4366:	24 81       	ldd	r18, Z+4	; 0x04
    4368:	35 81       	ldd	r19, Z+5	; 0x05
    436a:	40 17       	cp	r20, r16
    436c:	51 07       	cpc	r21, r17
    436e:	62 07       	cpc	r22, r18
    4370:	73 07       	cpc	r23, r19
    4372:	48 f4       	brcc	.+18     	; 0x4386 <placeTimer+0x4a>
      {
         t->timeout -= timeout;
    4374:	04 1b       	sub	r16, r20
    4376:	15 0b       	sbc	r17, r21
    4378:	26 0b       	sbc	r18, r22
    437a:	37 0b       	sbc	r19, r23
    437c:	02 83       	std	Z+2, r16	; 0x02
    437e:	13 83       	std	Z+3, r17	; 0x03
    4380:	24 83       	std	Z+4, r18	; 0x04
    4382:	35 83       	std	Z+5, r19	; 0x05
         break;
    4384:	0a c0       	rjmp	.+20     	; 0x439a <placeTimer+0x5e>
      }
      else
        timeout -= t->timeout;
    4386:	40 1b       	sub	r20, r16
    4388:	51 0b       	sbc	r21, r17
    438a:	62 0b       	sbc	r22, r18
    438c:	73 0b       	sbc	r23, r19

      prev = t;
    438e:	df 01       	movw	r26, r30
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    4390:	01 90       	ld	r0, Z+
    4392:	f0 81       	ld	r31, Z
    4394:	e0 2d       	mov	r30, r0
    4396:	30 97       	sbiw	r30, 0x00	; 0
    4398:	21 f7       	brne	.-56     	; 0x4362 <placeTimer+0x26>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    439a:	4a 83       	std	Y+2, r20	; 0x02
    439c:	5b 83       	std	Y+3, r21	; 0x03
    439e:	6c 83       	std	Y+4, r22	; 0x04
    43a0:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    43a2:	10 97       	sbiw	r26, 0x00	; 0
    43a4:	41 f0       	breq	.+16     	; 0x43b6 <placeTimer+0x7a>
    {
      timer->next = prev->next;
    43a6:	8d 91       	ld	r24, X+
    43a8:	9c 91       	ld	r25, X
    43aa:	11 97       	sbiw	r26, 0x01	; 1
    43ac:	99 83       	std	Y+1, r25	; 0x01
    43ae:	88 83       	st	Y, r24
      prev->next = timer;
    43b0:	cd 93       	st	X+, r28
    43b2:	dc 93       	st	X, r29
    43b4:	15 c0       	rjmp	.+42     	; 0x43e0 <placeTimer+0xa4>
    }
    else
    {
      timer->next = timers;
    43b6:	99 83       	std	Y+1, r25	; 0x01
    43b8:	88 83       	st	Y, r24
      timers = timer;
    43ba:	d0 93 b3 18 	sts	0x18B3, r29	; 0x8018b3 <timers+0x1>
    43be:	c0 93 b2 18 	sts	0x18B2, r28	; 0x8018b2 <timers>
    43c2:	0e c0       	rjmp	.+28     	; 0x43e0 <placeTimer+0xa4>
    }
  }
  else
  {
    timer->next = NULL;
    43c4:	19 82       	std	Y+1, r1	; 0x01
    43c6:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    43c8:	8e 81       	ldd	r24, Y+6	; 0x06
    43ca:	9f 81       	ldd	r25, Y+7	; 0x07
    43cc:	a8 85       	ldd	r26, Y+8	; 0x08
    43ce:	b9 85       	ldd	r27, Y+9	; 0x09
    43d0:	8a 83       	std	Y+2, r24	; 0x02
    43d2:	9b 83       	std	Y+3, r25	; 0x03
    43d4:	ac 83       	std	Y+4, r26	; 0x04
    43d6:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    43d8:	d0 93 b3 18 	sts	0x18B3, r29	; 0x8018b3 <timers+0x1>
    43dc:	c0 93 b2 18 	sts	0x18B2, r28	; 0x8018b2 <timers>
  }
}
    43e0:	df 91       	pop	r29
    43e2:	cf 91       	pop	r28
    43e4:	1f 91       	pop	r17
    43e6:	0f 91       	pop	r16
    43e8:	08 95       	ret

000043ea <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    43ea:	10 92 b3 18 	sts	0x18B3, r1	; 0x8018b3 <timers+0x1>
    43ee:	10 92 b2 18 	sts	0x18B2, r1	; 0x8018b2 <timers>
    43f2:	08 95       	ret

000043f4 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    43f4:	cf 93       	push	r28
    43f6:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    43f8:	e0 91 b2 18 	lds	r30, 0x18B2	; 0x8018b2 <timers>
    43fc:	f0 91 b3 18 	lds	r31, 0x18B3	; 0x8018b3 <timers+0x1>

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;
    4400:	a0 e0       	ldi	r26, 0x00	; 0
    4402:	b0 e0       	ldi	r27, 0x00	; 0

  for (SYS_Timer_t *t = timers; t; t = t->next)
    4404:	2b c0       	rjmp	.+86     	; 0x445c <SYS_TimerStop+0x68>
  {
    if (t == timer)
    4406:	e8 17       	cp	r30, r24
    4408:	f9 07       	cpc	r31, r25
    440a:	21 f5       	brne	.+72     	; 0x4454 <SYS_TimerStop+0x60>
    {
      if (prev)
    440c:	10 97       	sbiw	r26, 0x00	; 0
    440e:	29 f0       	breq	.+10     	; 0x441a <SYS_TimerStop+0x26>
        prev->next = t->next;
    4410:	20 81       	ld	r18, Z
    4412:	31 81       	ldd	r19, Z+1	; 0x01
    4414:	2d 93       	st	X+, r18
    4416:	3c 93       	st	X, r19
    4418:	06 c0       	rjmp	.+12     	; 0x4426 <SYS_TimerStop+0x32>
      else
        timers = t->next;
    441a:	20 81       	ld	r18, Z
    441c:	31 81       	ldd	r19, Z+1	; 0x01
    441e:	30 93 b3 18 	sts	0x18B3, r19	; 0x8018b3 <timers+0x1>
    4422:	20 93 b2 18 	sts	0x18B2, r18	; 0x8018b2 <timers>

      if (t->next)
    4426:	01 90       	ld	r0, Z+
    4428:	f0 81       	ld	r31, Z
    442a:	e0 2d       	mov	r30, r0
    442c:	30 97       	sbiw	r30, 0x00	; 0
    442e:	c1 f0       	breq	.+48     	; 0x4460 <SYS_TimerStop+0x6c>
        t->next->timeout += timer->timeout;
    4430:	ec 01       	movw	r28, r24
    4432:	8a 81       	ldd	r24, Y+2	; 0x02
    4434:	9b 81       	ldd	r25, Y+3	; 0x03
    4436:	ac 81       	ldd	r26, Y+4	; 0x04
    4438:	bd 81       	ldd	r27, Y+5	; 0x05
    443a:	42 81       	ldd	r20, Z+2	; 0x02
    443c:	53 81       	ldd	r21, Z+3	; 0x03
    443e:	64 81       	ldd	r22, Z+4	; 0x04
    4440:	75 81       	ldd	r23, Z+5	; 0x05
    4442:	84 0f       	add	r24, r20
    4444:	95 1f       	adc	r25, r21
    4446:	a6 1f       	adc	r26, r22
    4448:	b7 1f       	adc	r27, r23
    444a:	82 83       	std	Z+2, r24	; 0x02
    444c:	93 83       	std	Z+3, r25	; 0x03
    444e:	a4 83       	std	Z+4, r26	; 0x04
    4450:	b5 83       	std	Z+5, r27	; 0x05
    4452:	06 c0       	rjmp	.+12     	; 0x4460 <SYS_TimerStop+0x6c>

      break;
    }
    prev = t;
    4454:	df 01       	movw	r26, r30
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    4456:	01 90       	ld	r0, Z+
    4458:	f0 81       	ld	r31, Z
    445a:	e0 2d       	mov	r30, r0
    445c:	30 97       	sbiw	r30, 0x00	; 0
    445e:	99 f6       	brne	.-90     	; 0x4406 <SYS_TimerStop+0x12>

      break;
    }
    prev = t;
  }
}
    4460:	df 91       	pop	r29
    4462:	cf 91       	pop	r28
    4464:	08 95       	ret

00004466 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    4466:	e0 91 b2 18 	lds	r30, 0x18B2	; 0x8018b2 <timers>
    446a:	f0 91 b3 18 	lds	r31, 0x18B3	; 0x8018b3 <timers+0x1>
    446e:	06 c0       	rjmp	.+12     	; 0x447c <SYS_TimerStarted+0x16>
    if (t == timer)
    4470:	e8 17       	cp	r30, r24
    4472:	f9 07       	cpc	r31, r25
    4474:	39 f0       	breq	.+14     	; 0x4484 <SYS_TimerStarted+0x1e>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    4476:	01 90       	ld	r0, Z+
    4478:	f0 81       	ld	r31, Z
    447a:	e0 2d       	mov	r30, r0
    447c:	30 97       	sbiw	r30, 0x00	; 0
    447e:	c1 f7       	brne	.-16     	; 0x4470 <SYS_TimerStarted+0xa>
    if (t == timer)
      return true;
  return false;
    4480:	80 e0       	ldi	r24, 0x00	; 0
    4482:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    4484:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    4486:	08 95       	ret

00004488 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    4488:	cf 93       	push	r28
    448a:	df 93       	push	r29
    448c:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    448e:	eb df       	rcall	.-42     	; 0x4466 <SYS_TimerStarted>
    4490:	81 11       	cpse	r24, r1
    4492:	02 c0       	rjmp	.+4      	; 0x4498 <SYS_TimerStart+0x10>
    placeTimer(timer);
    4494:	ce 01       	movw	r24, r28
    4496:	52 df       	rcall	.-348    	; 0x433c <placeTimer>
}
    4498:	df 91       	pop	r29
    449a:	cf 91       	pop	r28
    449c:	08 95       	ret

0000449e <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    449e:	cf 92       	push	r12
    44a0:	df 92       	push	r13
    44a2:	ef 92       	push	r14
    44a4:	ff 92       	push	r15
    44a6:	cf 93       	push	r28
    44a8:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    44aa:	80 91 48 1b 	lds	r24, 0x1B48	; 0x801b48 <halTimerIrqCount>
    44ae:	88 23       	and	r24, r24
    44b0:	09 f4       	brne	.+2      	; 0x44b4 <SYS_TimerTaskHandler+0x16>
    44b2:	4d c0       	rjmp	.+154    	; 0x454e <SYS_TimerTaskHandler+0xb0>
    return;

  ATOMIC_SECTION_ENTER
    44b4:	8f b7       	in	r24, 0x3f	; 63
    44b6:	f8 94       	cli
    cnt = halTimerIrqCount;
    44b8:	c0 90 48 1b 	lds	r12, 0x1B48	; 0x801b48 <halTimerIrqCount>
    halTimerIrqCount = 0;
    44bc:	10 92 48 1b 	sts	0x1B48, r1	; 0x801b48 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    44c0:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    44c2:	d1 2c       	mov	r13, r1
    44c4:	e1 2c       	mov	r14, r1
    44c6:	f1 2c       	mov	r15, r1
    44c8:	cc 0c       	add	r12, r12
    44ca:	dd 1c       	adc	r13, r13
    44cc:	ee 1c       	adc	r14, r14
    44ce:	ff 1c       	adc	r15, r15
    44d0:	d7 01       	movw	r26, r14
    44d2:	c6 01       	movw	r24, r12
    44d4:	88 0f       	add	r24, r24
    44d6:	99 1f       	adc	r25, r25
    44d8:	aa 1f       	adc	r26, r26
    44da:	bb 1f       	adc	r27, r27
    44dc:	88 0f       	add	r24, r24
    44de:	99 1f       	adc	r25, r25
    44e0:	aa 1f       	adc	r26, r26
    44e2:	bb 1f       	adc	r27, r27
    44e4:	c8 0e       	add	r12, r24
    44e6:	d9 1e       	adc	r13, r25
    44e8:	ea 1e       	adc	r14, r26
    44ea:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    44ec:	13 c0       	rjmp	.+38     	; 0x4514 <SYS_TimerTaskHandler+0x76>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    44ee:	c8 1a       	sub	r12, r24
    44f0:	d9 0a       	sbc	r13, r25
    44f2:	ea 0a       	sbc	r14, r26
    44f4:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    44f6:	88 81       	ld	r24, Y
    44f8:	99 81       	ldd	r25, Y+1	; 0x01
    44fa:	90 93 b3 18 	sts	0x18B3, r25	; 0x8018b3 <timers+0x1>
    44fe:	80 93 b2 18 	sts	0x18B2, r24	; 0x8018b2 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    4502:	8a 85       	ldd	r24, Y+10	; 0x0a
    4504:	81 30       	cpi	r24, 0x01	; 1
    4506:	11 f4       	brne	.+4      	; 0x450c <SYS_TimerTaskHandler+0x6e>
      placeTimer(timer);
    4508:	ce 01       	movw	r24, r28
    450a:	18 df       	rcall	.-464    	; 0x433c <placeTimer>
    timer->handler(timer);
    450c:	eb 85       	ldd	r30, Y+11	; 0x0b
    450e:	fc 85       	ldd	r31, Y+12	; 0x0c
    4510:	ce 01       	movw	r24, r28
    4512:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    4514:	c0 91 b2 18 	lds	r28, 0x18B2	; 0x8018b2 <timers>
    4518:	d0 91 b3 18 	lds	r29, 0x18B3	; 0x8018b3 <timers+0x1>
    451c:	20 97       	sbiw	r28, 0x00	; 0
    451e:	49 f0       	breq	.+18     	; 0x4532 <SYS_TimerTaskHandler+0x94>
    4520:	8a 81       	ldd	r24, Y+2	; 0x02
    4522:	9b 81       	ldd	r25, Y+3	; 0x03
    4524:	ac 81       	ldd	r26, Y+4	; 0x04
    4526:	bd 81       	ldd	r27, Y+5	; 0x05
    4528:	c8 16       	cp	r12, r24
    452a:	d9 06       	cpc	r13, r25
    452c:	ea 06       	cpc	r14, r26
    452e:	fb 06       	cpc	r15, r27
    4530:	f0 f6       	brcc	.-68     	; 0x44ee <SYS_TimerTaskHandler+0x50>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    4532:	20 97       	sbiw	r28, 0x00	; 0
    4534:	61 f0       	breq	.+24     	; 0x454e <SYS_TimerTaskHandler+0xb0>
    timers->timeout -= elapsed;
    4536:	8a 81       	ldd	r24, Y+2	; 0x02
    4538:	9b 81       	ldd	r25, Y+3	; 0x03
    453a:	ac 81       	ldd	r26, Y+4	; 0x04
    453c:	bd 81       	ldd	r27, Y+5	; 0x05
    453e:	8c 19       	sub	r24, r12
    4540:	9d 09       	sbc	r25, r13
    4542:	ae 09       	sbc	r26, r14
    4544:	bf 09       	sbc	r27, r15
    4546:	8a 83       	std	Y+2, r24	; 0x02
    4548:	9b 83       	std	Y+3, r25	; 0x03
    454a:	ac 83       	std	Y+4, r26	; 0x04
    454c:	bd 83       	std	Y+5, r27	; 0x05
}
    454e:	df 91       	pop	r29
    4550:	cf 91       	pop	r28
    4552:	ff 90       	pop	r15
    4554:	ef 90       	pop	r14
    4556:	df 90       	pop	r13
    4558:	cf 90       	pop	r12
    455a:	08 95       	ret

0000455c <UART_init>:
}

uint8_t UART_GetChar(void){
	while (!tbi_(UCSR1A,RXC1));
	return UDR1;
}
    455c:	9c 01       	movw	r18, r24
    455e:	40 e0       	ldi	r20, 0x00	; 0
    4560:	50 e0       	ldi	r21, 0x00	; 0
    4562:	60 e2       	ldi	r22, 0x20	; 32
    4564:	71 ea       	ldi	r23, 0xA1	; 161
    4566:	87 e0       	ldi	r24, 0x07	; 7
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	3b d0       	rcall	.+118    	; 0x45e2 <__divmodsi4>
    456c:	21 50       	subi	r18, 0x01	; 1
    456e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
    4572:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    4576:	e9 ec       	ldi	r30, 0xC9	; 201
    4578:	f0 e0       	ldi	r31, 0x00	; 0
    457a:	88 e1       	ldi	r24, 0x18	; 24
    457c:	80 83       	st	Z, r24
    457e:	86 e0       	ldi	r24, 0x06	; 6
    4580:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
    4584:	80 81       	ld	r24, Z
    4586:	80 68       	ori	r24, 0x80	; 128
    4588:	80 83       	st	Z, r24
    458a:	08 95       	ret

0000458c <printCHAR>:
int printCHAR(char character, FILE *stream)
{
	while ((UCSR1A & (1 << UDRE1)) == 0) {};
    458c:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    4590:	95 ff       	sbrs	r25, 5
    4592:	fc cf       	rjmp	.-8      	; 0x458c <printCHAR>

	UDR1 = character;
    4594:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

	return 0;
    4598:	80 e0       	ldi	r24, 0x00	; 0
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	08 95       	ret

0000459e <__udivmodsi4>:
    459e:	a1 e2       	ldi	r26, 0x21	; 33
    45a0:	1a 2e       	mov	r1, r26
    45a2:	aa 1b       	sub	r26, r26
    45a4:	bb 1b       	sub	r27, r27
    45a6:	fd 01       	movw	r30, r26
    45a8:	0d c0       	rjmp	.+26     	; 0x45c4 <__udivmodsi4_ep>

000045aa <__udivmodsi4_loop>:
    45aa:	aa 1f       	adc	r26, r26
    45ac:	bb 1f       	adc	r27, r27
    45ae:	ee 1f       	adc	r30, r30
    45b0:	ff 1f       	adc	r31, r31
    45b2:	a2 17       	cp	r26, r18
    45b4:	b3 07       	cpc	r27, r19
    45b6:	e4 07       	cpc	r30, r20
    45b8:	f5 07       	cpc	r31, r21
    45ba:	20 f0       	brcs	.+8      	; 0x45c4 <__udivmodsi4_ep>
    45bc:	a2 1b       	sub	r26, r18
    45be:	b3 0b       	sbc	r27, r19
    45c0:	e4 0b       	sbc	r30, r20
    45c2:	f5 0b       	sbc	r31, r21

000045c4 <__udivmodsi4_ep>:
    45c4:	66 1f       	adc	r22, r22
    45c6:	77 1f       	adc	r23, r23
    45c8:	88 1f       	adc	r24, r24
    45ca:	99 1f       	adc	r25, r25
    45cc:	1a 94       	dec	r1
    45ce:	69 f7       	brne	.-38     	; 0x45aa <__udivmodsi4_loop>
    45d0:	60 95       	com	r22
    45d2:	70 95       	com	r23
    45d4:	80 95       	com	r24
    45d6:	90 95       	com	r25
    45d8:	9b 01       	movw	r18, r22
    45da:	ac 01       	movw	r20, r24
    45dc:	bd 01       	movw	r22, r26
    45de:	cf 01       	movw	r24, r30
    45e0:	08 95       	ret

000045e2 <__divmodsi4>:
    45e2:	05 2e       	mov	r0, r21
    45e4:	97 fb       	bst	r25, 7
    45e6:	16 f4       	brtc	.+4      	; 0x45ec <__divmodsi4+0xa>
    45e8:	00 94       	com	r0
    45ea:	0f d0       	rcall	.+30     	; 0x460a <__negsi2>
    45ec:	57 fd       	sbrc	r21, 7
    45ee:	05 d0       	rcall	.+10     	; 0x45fa <__divmodsi4_neg2>
    45f0:	d6 df       	rcall	.-84     	; 0x459e <__udivmodsi4>
    45f2:	07 fc       	sbrc	r0, 7
    45f4:	02 d0       	rcall	.+4      	; 0x45fa <__divmodsi4_neg2>
    45f6:	46 f4       	brtc	.+16     	; 0x4608 <__divmodsi4_exit>
    45f8:	08 c0       	rjmp	.+16     	; 0x460a <__negsi2>

000045fa <__divmodsi4_neg2>:
    45fa:	50 95       	com	r21
    45fc:	40 95       	com	r20
    45fe:	30 95       	com	r19
    4600:	21 95       	neg	r18
    4602:	3f 4f       	sbci	r19, 0xFF	; 255
    4604:	4f 4f       	sbci	r20, 0xFF	; 255
    4606:	5f 4f       	sbci	r21, 0xFF	; 255

00004608 <__divmodsi4_exit>:
    4608:	08 95       	ret

0000460a <__negsi2>:
    460a:	90 95       	com	r25
    460c:	80 95       	com	r24
    460e:	70 95       	com	r23
    4610:	61 95       	neg	r22
    4612:	7f 4f       	sbci	r23, 0xFF	; 255
    4614:	8f 4f       	sbci	r24, 0xFF	; 255
    4616:	9f 4f       	sbci	r25, 0xFF	; 255
    4618:	08 95       	ret

0000461a <__tablejump2__>:
    461a:	ee 0f       	add	r30, r30
    461c:	ff 1f       	adc	r31, r31
    461e:	88 1f       	adc	r24, r24
    4620:	8b bf       	out	0x3b, r24	; 59
    4622:	07 90       	elpm	r0, Z+
    4624:	f6 91       	elpm	r31, Z
    4626:	e0 2d       	mov	r30, r0
    4628:	19 94       	eijmp

0000462a <do_rand>:
    462a:	8f 92       	push	r8
    462c:	9f 92       	push	r9
    462e:	af 92       	push	r10
    4630:	bf 92       	push	r11
    4632:	cf 92       	push	r12
    4634:	df 92       	push	r13
    4636:	ef 92       	push	r14
    4638:	ff 92       	push	r15
    463a:	cf 93       	push	r28
    463c:	df 93       	push	r29
    463e:	ec 01       	movw	r28, r24
    4640:	68 81       	ld	r22, Y
    4642:	79 81       	ldd	r23, Y+1	; 0x01
    4644:	8a 81       	ldd	r24, Y+2	; 0x02
    4646:	9b 81       	ldd	r25, Y+3	; 0x03
    4648:	61 15       	cp	r22, r1
    464a:	71 05       	cpc	r23, r1
    464c:	81 05       	cpc	r24, r1
    464e:	91 05       	cpc	r25, r1
    4650:	21 f4       	brne	.+8      	; 0x465a <do_rand+0x30>
    4652:	64 e2       	ldi	r22, 0x24	; 36
    4654:	79 ed       	ldi	r23, 0xD9	; 217
    4656:	8b e5       	ldi	r24, 0x5B	; 91
    4658:	97 e0       	ldi	r25, 0x07	; 7
    465a:	2d e1       	ldi	r18, 0x1D	; 29
    465c:	33 ef       	ldi	r19, 0xF3	; 243
    465e:	41 e0       	ldi	r20, 0x01	; 1
    4660:	50 e0       	ldi	r21, 0x00	; 0
    4662:	bf df       	rcall	.-130    	; 0x45e2 <__divmodsi4>
    4664:	49 01       	movw	r8, r18
    4666:	5a 01       	movw	r10, r20
    4668:	9b 01       	movw	r18, r22
    466a:	ac 01       	movw	r20, r24
    466c:	a7 ea       	ldi	r26, 0xA7	; 167
    466e:	b1 e4       	ldi	r27, 0x41	; 65
    4670:	21 d3       	rcall	.+1602   	; 0x4cb4 <__muluhisi3>
    4672:	6b 01       	movw	r12, r22
    4674:	7c 01       	movw	r14, r24
    4676:	ac ee       	ldi	r26, 0xEC	; 236
    4678:	b4 ef       	ldi	r27, 0xF4	; 244
    467a:	a5 01       	movw	r20, r10
    467c:	94 01       	movw	r18, r8
    467e:	26 d3       	rcall	.+1612   	; 0x4ccc <__mulohisi3>
    4680:	dc 01       	movw	r26, r24
    4682:	cb 01       	movw	r24, r22
    4684:	8c 0d       	add	r24, r12
    4686:	9d 1d       	adc	r25, r13
    4688:	ae 1d       	adc	r26, r14
    468a:	bf 1d       	adc	r27, r15
    468c:	b7 ff       	sbrs	r27, 7
    468e:	03 c0       	rjmp	.+6      	; 0x4696 <do_rand+0x6c>
    4690:	01 97       	sbiw	r24, 0x01	; 1
    4692:	a1 09       	sbc	r26, r1
    4694:	b0 48       	sbci	r27, 0x80	; 128
    4696:	88 83       	st	Y, r24
    4698:	99 83       	std	Y+1, r25	; 0x01
    469a:	aa 83       	std	Y+2, r26	; 0x02
    469c:	bb 83       	std	Y+3, r27	; 0x03
    469e:	9f 77       	andi	r25, 0x7F	; 127
    46a0:	df 91       	pop	r29
    46a2:	cf 91       	pop	r28
    46a4:	ff 90       	pop	r15
    46a6:	ef 90       	pop	r14
    46a8:	df 90       	pop	r13
    46aa:	cf 90       	pop	r12
    46ac:	bf 90       	pop	r11
    46ae:	af 90       	pop	r10
    46b0:	9f 90       	pop	r9
    46b2:	8f 90       	pop	r8
    46b4:	08 95       	ret

000046b6 <rand_r>:
    46b6:	b9 cf       	rjmp	.-142    	; 0x462a <do_rand>

000046b8 <rand>:
    46b8:	80 e0       	ldi	r24, 0x00	; 0
    46ba:	92 e0       	ldi	r25, 0x02	; 2
    46bc:	b6 cf       	rjmp	.-148    	; 0x462a <do_rand>

000046be <srand>:
    46be:	a0 e0       	ldi	r26, 0x00	; 0
    46c0:	b0 e0       	ldi	r27, 0x00	; 0
    46c2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    46c6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    46ca:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    46ce:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    46d2:	08 95       	ret

000046d4 <memcpy>:
    46d4:	fb 01       	movw	r30, r22
    46d6:	dc 01       	movw	r26, r24
    46d8:	02 c0       	rjmp	.+4      	; 0x46de <memcpy+0xa>
    46da:	01 90       	ld	r0, Z+
    46dc:	0d 92       	st	X+, r0
    46de:	41 50       	subi	r20, 0x01	; 1
    46e0:	50 40       	sbci	r21, 0x00	; 0
    46e2:	d8 f7       	brcc	.-10     	; 0x46da <memcpy+0x6>
    46e4:	08 95       	ret

000046e6 <printf>:
    46e6:	cf 93       	push	r28
    46e8:	df 93       	push	r29
    46ea:	cd b7       	in	r28, 0x3d	; 61
    46ec:	de b7       	in	r29, 0x3e	; 62
    46ee:	ae 01       	movw	r20, r28
    46f0:	4a 5f       	subi	r20, 0xFA	; 250
    46f2:	5f 4f       	sbci	r21, 0xFF	; 255
    46f4:	fa 01       	movw	r30, r20
    46f6:	61 91       	ld	r22, Z+
    46f8:	71 91       	ld	r23, Z+
    46fa:	af 01       	movw	r20, r30
    46fc:	80 91 77 1b 	lds	r24, 0x1B77	; 0x801b77 <__iob+0x2>
    4700:	90 91 78 1b 	lds	r25, 0x1B78	; 0x801b78 <__iob+0x3>
    4704:	2a d0       	rcall	.+84     	; 0x475a <vfprintf>
    4706:	df 91       	pop	r29
    4708:	cf 91       	pop	r28
    470a:	08 95       	ret

0000470c <printf_P>:
    470c:	0f 93       	push	r16
    470e:	1f 93       	push	r17
    4710:	cf 93       	push	r28
    4712:	df 93       	push	r29
    4714:	cd b7       	in	r28, 0x3d	; 61
    4716:	de b7       	in	r29, 0x3e	; 62
    4718:	ae 01       	movw	r20, r28
    471a:	48 5f       	subi	r20, 0xF8	; 248
    471c:	5f 4f       	sbci	r21, 0xFF	; 255
    471e:	da 01       	movw	r26, r20
    4720:	6d 91       	ld	r22, X+
    4722:	7d 91       	ld	r23, X+
    4724:	ad 01       	movw	r20, r26
    4726:	05 e7       	ldi	r16, 0x75	; 117
    4728:	1b e1       	ldi	r17, 0x1B	; 27
    472a:	f8 01       	movw	r30, r16
    472c:	82 81       	ldd	r24, Z+2	; 0x02
    472e:	93 81       	ldd	r25, Z+3	; 0x03
    4730:	dc 01       	movw	r26, r24
    4732:	13 96       	adiw	r26, 0x03	; 3
    4734:	2c 91       	ld	r18, X
    4736:	13 97       	sbiw	r26, 0x03	; 3
    4738:	28 60       	ori	r18, 0x08	; 8
    473a:	13 96       	adiw	r26, 0x03	; 3
    473c:	2c 93       	st	X, r18
    473e:	0d d0       	rcall	.+26     	; 0x475a <vfprintf>
    4740:	d8 01       	movw	r26, r16
    4742:	12 96       	adiw	r26, 0x02	; 2
    4744:	ed 91       	ld	r30, X+
    4746:	fc 91       	ld	r31, X
    4748:	13 97       	sbiw	r26, 0x03	; 3
    474a:	23 81       	ldd	r18, Z+3	; 0x03
    474c:	27 7f       	andi	r18, 0xF7	; 247
    474e:	23 83       	std	Z+3, r18	; 0x03
    4750:	df 91       	pop	r29
    4752:	cf 91       	pop	r28
    4754:	1f 91       	pop	r17
    4756:	0f 91       	pop	r16
    4758:	08 95       	ret

0000475a <vfprintf>:
    475a:	2f 92       	push	r2
    475c:	3f 92       	push	r3
    475e:	4f 92       	push	r4
    4760:	5f 92       	push	r5
    4762:	6f 92       	push	r6
    4764:	7f 92       	push	r7
    4766:	8f 92       	push	r8
    4768:	9f 92       	push	r9
    476a:	af 92       	push	r10
    476c:	bf 92       	push	r11
    476e:	cf 92       	push	r12
    4770:	df 92       	push	r13
    4772:	ef 92       	push	r14
    4774:	ff 92       	push	r15
    4776:	0f 93       	push	r16
    4778:	1f 93       	push	r17
    477a:	cf 93       	push	r28
    477c:	df 93       	push	r29
    477e:	cd b7       	in	r28, 0x3d	; 61
    4780:	de b7       	in	r29, 0x3e	; 62
    4782:	2b 97       	sbiw	r28, 0x0b	; 11
    4784:	0f b6       	in	r0, 0x3f	; 63
    4786:	f8 94       	cli
    4788:	de bf       	out	0x3e, r29	; 62
    478a:	0f be       	out	0x3f, r0	; 63
    478c:	cd bf       	out	0x3d, r28	; 61
    478e:	6c 01       	movw	r12, r24
    4790:	7b 01       	movw	r14, r22
    4792:	8a 01       	movw	r16, r20
    4794:	fc 01       	movw	r30, r24
    4796:	17 82       	std	Z+7, r1	; 0x07
    4798:	16 82       	std	Z+6, r1	; 0x06
    479a:	83 81       	ldd	r24, Z+3	; 0x03
    479c:	81 ff       	sbrs	r24, 1
    479e:	bf c1       	rjmp	.+894    	; 0x4b1e <vfprintf+0x3c4>
    47a0:	ce 01       	movw	r24, r28
    47a2:	01 96       	adiw	r24, 0x01	; 1
    47a4:	3c 01       	movw	r6, r24
    47a6:	f6 01       	movw	r30, r12
    47a8:	93 81       	ldd	r25, Z+3	; 0x03
    47aa:	f7 01       	movw	r30, r14
    47ac:	93 fd       	sbrc	r25, 3
    47ae:	85 91       	lpm	r24, Z+
    47b0:	93 ff       	sbrs	r25, 3
    47b2:	81 91       	ld	r24, Z+
    47b4:	7f 01       	movw	r14, r30
    47b6:	88 23       	and	r24, r24
    47b8:	09 f4       	brne	.+2      	; 0x47bc <vfprintf+0x62>
    47ba:	ad c1       	rjmp	.+858    	; 0x4b16 <vfprintf+0x3bc>
    47bc:	85 32       	cpi	r24, 0x25	; 37
    47be:	39 f4       	brne	.+14     	; 0x47ce <vfprintf+0x74>
    47c0:	93 fd       	sbrc	r25, 3
    47c2:	85 91       	lpm	r24, Z+
    47c4:	93 ff       	sbrs	r25, 3
    47c6:	81 91       	ld	r24, Z+
    47c8:	7f 01       	movw	r14, r30
    47ca:	85 32       	cpi	r24, 0x25	; 37
    47cc:	21 f4       	brne	.+8      	; 0x47d6 <vfprintf+0x7c>
    47ce:	b6 01       	movw	r22, r12
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	d6 d1       	rcall	.+940    	; 0x4b80 <fputc>
    47d4:	e8 cf       	rjmp	.-48     	; 0x47a6 <vfprintf+0x4c>
    47d6:	91 2c       	mov	r9, r1
    47d8:	21 2c       	mov	r2, r1
    47da:	31 2c       	mov	r3, r1
    47dc:	ff e1       	ldi	r31, 0x1F	; 31
    47de:	f3 15       	cp	r31, r3
    47e0:	d8 f0       	brcs	.+54     	; 0x4818 <vfprintf+0xbe>
    47e2:	8b 32       	cpi	r24, 0x2B	; 43
    47e4:	79 f0       	breq	.+30     	; 0x4804 <vfprintf+0xaa>
    47e6:	38 f4       	brcc	.+14     	; 0x47f6 <vfprintf+0x9c>
    47e8:	80 32       	cpi	r24, 0x20	; 32
    47ea:	79 f0       	breq	.+30     	; 0x480a <vfprintf+0xb0>
    47ec:	83 32       	cpi	r24, 0x23	; 35
    47ee:	a1 f4       	brne	.+40     	; 0x4818 <vfprintf+0xbe>
    47f0:	23 2d       	mov	r18, r3
    47f2:	20 61       	ori	r18, 0x10	; 16
    47f4:	1d c0       	rjmp	.+58     	; 0x4830 <vfprintf+0xd6>
    47f6:	8d 32       	cpi	r24, 0x2D	; 45
    47f8:	61 f0       	breq	.+24     	; 0x4812 <vfprintf+0xb8>
    47fa:	80 33       	cpi	r24, 0x30	; 48
    47fc:	69 f4       	brne	.+26     	; 0x4818 <vfprintf+0xbe>
    47fe:	23 2d       	mov	r18, r3
    4800:	21 60       	ori	r18, 0x01	; 1
    4802:	16 c0       	rjmp	.+44     	; 0x4830 <vfprintf+0xd6>
    4804:	83 2d       	mov	r24, r3
    4806:	82 60       	ori	r24, 0x02	; 2
    4808:	38 2e       	mov	r3, r24
    480a:	e3 2d       	mov	r30, r3
    480c:	e4 60       	ori	r30, 0x04	; 4
    480e:	3e 2e       	mov	r3, r30
    4810:	2a c0       	rjmp	.+84     	; 0x4866 <vfprintf+0x10c>
    4812:	f3 2d       	mov	r31, r3
    4814:	f8 60       	ori	r31, 0x08	; 8
    4816:	1d c0       	rjmp	.+58     	; 0x4852 <vfprintf+0xf8>
    4818:	37 fc       	sbrc	r3, 7
    481a:	2d c0       	rjmp	.+90     	; 0x4876 <vfprintf+0x11c>
    481c:	20 ed       	ldi	r18, 0xD0	; 208
    481e:	28 0f       	add	r18, r24
    4820:	2a 30       	cpi	r18, 0x0A	; 10
    4822:	40 f0       	brcs	.+16     	; 0x4834 <vfprintf+0xda>
    4824:	8e 32       	cpi	r24, 0x2E	; 46
    4826:	b9 f4       	brne	.+46     	; 0x4856 <vfprintf+0xfc>
    4828:	36 fc       	sbrc	r3, 6
    482a:	75 c1       	rjmp	.+746    	; 0x4b16 <vfprintf+0x3bc>
    482c:	23 2d       	mov	r18, r3
    482e:	20 64       	ori	r18, 0x40	; 64
    4830:	32 2e       	mov	r3, r18
    4832:	19 c0       	rjmp	.+50     	; 0x4866 <vfprintf+0x10c>
    4834:	36 fe       	sbrs	r3, 6
    4836:	06 c0       	rjmp	.+12     	; 0x4844 <vfprintf+0xea>
    4838:	8a e0       	ldi	r24, 0x0A	; 10
    483a:	98 9e       	mul	r9, r24
    483c:	20 0d       	add	r18, r0
    483e:	11 24       	eor	r1, r1
    4840:	92 2e       	mov	r9, r18
    4842:	11 c0       	rjmp	.+34     	; 0x4866 <vfprintf+0x10c>
    4844:	ea e0       	ldi	r30, 0x0A	; 10
    4846:	2e 9e       	mul	r2, r30
    4848:	20 0d       	add	r18, r0
    484a:	11 24       	eor	r1, r1
    484c:	22 2e       	mov	r2, r18
    484e:	f3 2d       	mov	r31, r3
    4850:	f0 62       	ori	r31, 0x20	; 32
    4852:	3f 2e       	mov	r3, r31
    4854:	08 c0       	rjmp	.+16     	; 0x4866 <vfprintf+0x10c>
    4856:	8c 36       	cpi	r24, 0x6C	; 108
    4858:	21 f4       	brne	.+8      	; 0x4862 <vfprintf+0x108>
    485a:	83 2d       	mov	r24, r3
    485c:	80 68       	ori	r24, 0x80	; 128
    485e:	38 2e       	mov	r3, r24
    4860:	02 c0       	rjmp	.+4      	; 0x4866 <vfprintf+0x10c>
    4862:	88 36       	cpi	r24, 0x68	; 104
    4864:	41 f4       	brne	.+16     	; 0x4876 <vfprintf+0x11c>
    4866:	f7 01       	movw	r30, r14
    4868:	93 fd       	sbrc	r25, 3
    486a:	85 91       	lpm	r24, Z+
    486c:	93 ff       	sbrs	r25, 3
    486e:	81 91       	ld	r24, Z+
    4870:	7f 01       	movw	r14, r30
    4872:	81 11       	cpse	r24, r1
    4874:	b3 cf       	rjmp	.-154    	; 0x47dc <vfprintf+0x82>
    4876:	98 2f       	mov	r25, r24
    4878:	9f 7d       	andi	r25, 0xDF	; 223
    487a:	95 54       	subi	r25, 0x45	; 69
    487c:	93 30       	cpi	r25, 0x03	; 3
    487e:	28 f4       	brcc	.+10     	; 0x488a <vfprintf+0x130>
    4880:	0c 5f       	subi	r16, 0xFC	; 252
    4882:	1f 4f       	sbci	r17, 0xFF	; 255
    4884:	9f e3       	ldi	r25, 0x3F	; 63
    4886:	99 83       	std	Y+1, r25	; 0x01
    4888:	0d c0       	rjmp	.+26     	; 0x48a4 <vfprintf+0x14a>
    488a:	83 36       	cpi	r24, 0x63	; 99
    488c:	31 f0       	breq	.+12     	; 0x489a <vfprintf+0x140>
    488e:	83 37       	cpi	r24, 0x73	; 115
    4890:	71 f0       	breq	.+28     	; 0x48ae <vfprintf+0x154>
    4892:	83 35       	cpi	r24, 0x53	; 83
    4894:	09 f0       	breq	.+2      	; 0x4898 <vfprintf+0x13e>
    4896:	55 c0       	rjmp	.+170    	; 0x4942 <vfprintf+0x1e8>
    4898:	20 c0       	rjmp	.+64     	; 0x48da <vfprintf+0x180>
    489a:	f8 01       	movw	r30, r16
    489c:	80 81       	ld	r24, Z
    489e:	89 83       	std	Y+1, r24	; 0x01
    48a0:	0e 5f       	subi	r16, 0xFE	; 254
    48a2:	1f 4f       	sbci	r17, 0xFF	; 255
    48a4:	88 24       	eor	r8, r8
    48a6:	83 94       	inc	r8
    48a8:	91 2c       	mov	r9, r1
    48aa:	53 01       	movw	r10, r6
    48ac:	12 c0       	rjmp	.+36     	; 0x48d2 <vfprintf+0x178>
    48ae:	28 01       	movw	r4, r16
    48b0:	f2 e0       	ldi	r31, 0x02	; 2
    48b2:	4f 0e       	add	r4, r31
    48b4:	51 1c       	adc	r5, r1
    48b6:	f8 01       	movw	r30, r16
    48b8:	a0 80       	ld	r10, Z
    48ba:	b1 80       	ldd	r11, Z+1	; 0x01
    48bc:	36 fe       	sbrs	r3, 6
    48be:	03 c0       	rjmp	.+6      	; 0x48c6 <vfprintf+0x16c>
    48c0:	69 2d       	mov	r22, r9
    48c2:	70 e0       	ldi	r23, 0x00	; 0
    48c4:	02 c0       	rjmp	.+4      	; 0x48ca <vfprintf+0x170>
    48c6:	6f ef       	ldi	r22, 0xFF	; 255
    48c8:	7f ef       	ldi	r23, 0xFF	; 255
    48ca:	c5 01       	movw	r24, r10
    48cc:	4e d1       	rcall	.+668    	; 0x4b6a <strnlen>
    48ce:	4c 01       	movw	r8, r24
    48d0:	82 01       	movw	r16, r4
    48d2:	f3 2d       	mov	r31, r3
    48d4:	ff 77       	andi	r31, 0x7F	; 127
    48d6:	3f 2e       	mov	r3, r31
    48d8:	15 c0       	rjmp	.+42     	; 0x4904 <vfprintf+0x1aa>
    48da:	28 01       	movw	r4, r16
    48dc:	22 e0       	ldi	r18, 0x02	; 2
    48de:	42 0e       	add	r4, r18
    48e0:	51 1c       	adc	r5, r1
    48e2:	f8 01       	movw	r30, r16
    48e4:	a0 80       	ld	r10, Z
    48e6:	b1 80       	ldd	r11, Z+1	; 0x01
    48e8:	36 fe       	sbrs	r3, 6
    48ea:	03 c0       	rjmp	.+6      	; 0x48f2 <vfprintf+0x198>
    48ec:	69 2d       	mov	r22, r9
    48ee:	70 e0       	ldi	r23, 0x00	; 0
    48f0:	02 c0       	rjmp	.+4      	; 0x48f6 <vfprintf+0x19c>
    48f2:	6f ef       	ldi	r22, 0xFF	; 255
    48f4:	7f ef       	ldi	r23, 0xFF	; 255
    48f6:	c5 01       	movw	r24, r10
    48f8:	2d d1       	rcall	.+602    	; 0x4b54 <strnlen_P>
    48fa:	4c 01       	movw	r8, r24
    48fc:	f3 2d       	mov	r31, r3
    48fe:	f0 68       	ori	r31, 0x80	; 128
    4900:	3f 2e       	mov	r3, r31
    4902:	82 01       	movw	r16, r4
    4904:	33 fc       	sbrc	r3, 3
    4906:	19 c0       	rjmp	.+50     	; 0x493a <vfprintf+0x1e0>
    4908:	82 2d       	mov	r24, r2
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	88 16       	cp	r8, r24
    490e:	99 06       	cpc	r9, r25
    4910:	a0 f4       	brcc	.+40     	; 0x493a <vfprintf+0x1e0>
    4912:	b6 01       	movw	r22, r12
    4914:	80 e2       	ldi	r24, 0x20	; 32
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	33 d1       	rcall	.+614    	; 0x4b80 <fputc>
    491a:	2a 94       	dec	r2
    491c:	f5 cf       	rjmp	.-22     	; 0x4908 <vfprintf+0x1ae>
    491e:	f5 01       	movw	r30, r10
    4920:	37 fc       	sbrc	r3, 7
    4922:	85 91       	lpm	r24, Z+
    4924:	37 fe       	sbrs	r3, 7
    4926:	81 91       	ld	r24, Z+
    4928:	5f 01       	movw	r10, r30
    492a:	b6 01       	movw	r22, r12
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	28 d1       	rcall	.+592    	; 0x4b80 <fputc>
    4930:	21 10       	cpse	r2, r1
    4932:	2a 94       	dec	r2
    4934:	21 e0       	ldi	r18, 0x01	; 1
    4936:	82 1a       	sub	r8, r18
    4938:	91 08       	sbc	r9, r1
    493a:	81 14       	cp	r8, r1
    493c:	91 04       	cpc	r9, r1
    493e:	79 f7       	brne	.-34     	; 0x491e <vfprintf+0x1c4>
    4940:	e1 c0       	rjmp	.+450    	; 0x4b04 <vfprintf+0x3aa>
    4942:	84 36       	cpi	r24, 0x64	; 100
    4944:	11 f0       	breq	.+4      	; 0x494a <vfprintf+0x1f0>
    4946:	89 36       	cpi	r24, 0x69	; 105
    4948:	39 f5       	brne	.+78     	; 0x4998 <vfprintf+0x23e>
    494a:	f8 01       	movw	r30, r16
    494c:	37 fe       	sbrs	r3, 7
    494e:	07 c0       	rjmp	.+14     	; 0x495e <vfprintf+0x204>
    4950:	60 81       	ld	r22, Z
    4952:	71 81       	ldd	r23, Z+1	; 0x01
    4954:	82 81       	ldd	r24, Z+2	; 0x02
    4956:	93 81       	ldd	r25, Z+3	; 0x03
    4958:	0c 5f       	subi	r16, 0xFC	; 252
    495a:	1f 4f       	sbci	r17, 0xFF	; 255
    495c:	08 c0       	rjmp	.+16     	; 0x496e <vfprintf+0x214>
    495e:	60 81       	ld	r22, Z
    4960:	71 81       	ldd	r23, Z+1	; 0x01
    4962:	07 2e       	mov	r0, r23
    4964:	00 0c       	add	r0, r0
    4966:	88 0b       	sbc	r24, r24
    4968:	99 0b       	sbc	r25, r25
    496a:	0e 5f       	subi	r16, 0xFE	; 254
    496c:	1f 4f       	sbci	r17, 0xFF	; 255
    496e:	f3 2d       	mov	r31, r3
    4970:	ff 76       	andi	r31, 0x6F	; 111
    4972:	3f 2e       	mov	r3, r31
    4974:	97 ff       	sbrs	r25, 7
    4976:	09 c0       	rjmp	.+18     	; 0x498a <vfprintf+0x230>
    4978:	90 95       	com	r25
    497a:	80 95       	com	r24
    497c:	70 95       	com	r23
    497e:	61 95       	neg	r22
    4980:	7f 4f       	sbci	r23, 0xFF	; 255
    4982:	8f 4f       	sbci	r24, 0xFF	; 255
    4984:	9f 4f       	sbci	r25, 0xFF	; 255
    4986:	f0 68       	ori	r31, 0x80	; 128
    4988:	3f 2e       	mov	r3, r31
    498a:	2a e0       	ldi	r18, 0x0A	; 10
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	a3 01       	movw	r20, r6
    4990:	33 d1       	rcall	.+614    	; 0x4bf8 <__ultoa_invert>
    4992:	88 2e       	mov	r8, r24
    4994:	86 18       	sub	r8, r6
    4996:	44 c0       	rjmp	.+136    	; 0x4a20 <vfprintf+0x2c6>
    4998:	85 37       	cpi	r24, 0x75	; 117
    499a:	31 f4       	brne	.+12     	; 0x49a8 <vfprintf+0x24e>
    499c:	23 2d       	mov	r18, r3
    499e:	2f 7e       	andi	r18, 0xEF	; 239
    49a0:	b2 2e       	mov	r11, r18
    49a2:	2a e0       	ldi	r18, 0x0A	; 10
    49a4:	30 e0       	ldi	r19, 0x00	; 0
    49a6:	25 c0       	rjmp	.+74     	; 0x49f2 <vfprintf+0x298>
    49a8:	93 2d       	mov	r25, r3
    49aa:	99 7f       	andi	r25, 0xF9	; 249
    49ac:	b9 2e       	mov	r11, r25
    49ae:	8f 36       	cpi	r24, 0x6F	; 111
    49b0:	c1 f0       	breq	.+48     	; 0x49e2 <vfprintf+0x288>
    49b2:	18 f4       	brcc	.+6      	; 0x49ba <vfprintf+0x260>
    49b4:	88 35       	cpi	r24, 0x58	; 88
    49b6:	79 f0       	breq	.+30     	; 0x49d6 <vfprintf+0x27c>
    49b8:	ae c0       	rjmp	.+348    	; 0x4b16 <vfprintf+0x3bc>
    49ba:	80 37       	cpi	r24, 0x70	; 112
    49bc:	19 f0       	breq	.+6      	; 0x49c4 <vfprintf+0x26a>
    49be:	88 37       	cpi	r24, 0x78	; 120
    49c0:	21 f0       	breq	.+8      	; 0x49ca <vfprintf+0x270>
    49c2:	a9 c0       	rjmp	.+338    	; 0x4b16 <vfprintf+0x3bc>
    49c4:	e9 2f       	mov	r30, r25
    49c6:	e0 61       	ori	r30, 0x10	; 16
    49c8:	be 2e       	mov	r11, r30
    49ca:	b4 fe       	sbrs	r11, 4
    49cc:	0d c0       	rjmp	.+26     	; 0x49e8 <vfprintf+0x28e>
    49ce:	fb 2d       	mov	r31, r11
    49d0:	f4 60       	ori	r31, 0x04	; 4
    49d2:	bf 2e       	mov	r11, r31
    49d4:	09 c0       	rjmp	.+18     	; 0x49e8 <vfprintf+0x28e>
    49d6:	34 fe       	sbrs	r3, 4
    49d8:	0a c0       	rjmp	.+20     	; 0x49ee <vfprintf+0x294>
    49da:	29 2f       	mov	r18, r25
    49dc:	26 60       	ori	r18, 0x06	; 6
    49de:	b2 2e       	mov	r11, r18
    49e0:	06 c0       	rjmp	.+12     	; 0x49ee <vfprintf+0x294>
    49e2:	28 e0       	ldi	r18, 0x08	; 8
    49e4:	30 e0       	ldi	r19, 0x00	; 0
    49e6:	05 c0       	rjmp	.+10     	; 0x49f2 <vfprintf+0x298>
    49e8:	20 e1       	ldi	r18, 0x10	; 16
    49ea:	30 e0       	ldi	r19, 0x00	; 0
    49ec:	02 c0       	rjmp	.+4      	; 0x49f2 <vfprintf+0x298>
    49ee:	20 e1       	ldi	r18, 0x10	; 16
    49f0:	32 e0       	ldi	r19, 0x02	; 2
    49f2:	f8 01       	movw	r30, r16
    49f4:	b7 fe       	sbrs	r11, 7
    49f6:	07 c0       	rjmp	.+14     	; 0x4a06 <vfprintf+0x2ac>
    49f8:	60 81       	ld	r22, Z
    49fa:	71 81       	ldd	r23, Z+1	; 0x01
    49fc:	82 81       	ldd	r24, Z+2	; 0x02
    49fe:	93 81       	ldd	r25, Z+3	; 0x03
    4a00:	0c 5f       	subi	r16, 0xFC	; 252
    4a02:	1f 4f       	sbci	r17, 0xFF	; 255
    4a04:	06 c0       	rjmp	.+12     	; 0x4a12 <vfprintf+0x2b8>
    4a06:	60 81       	ld	r22, Z
    4a08:	71 81       	ldd	r23, Z+1	; 0x01
    4a0a:	80 e0       	ldi	r24, 0x00	; 0
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	0e 5f       	subi	r16, 0xFE	; 254
    4a10:	1f 4f       	sbci	r17, 0xFF	; 255
    4a12:	a3 01       	movw	r20, r6
    4a14:	f1 d0       	rcall	.+482    	; 0x4bf8 <__ultoa_invert>
    4a16:	88 2e       	mov	r8, r24
    4a18:	86 18       	sub	r8, r6
    4a1a:	fb 2d       	mov	r31, r11
    4a1c:	ff 77       	andi	r31, 0x7F	; 127
    4a1e:	3f 2e       	mov	r3, r31
    4a20:	36 fe       	sbrs	r3, 6
    4a22:	0d c0       	rjmp	.+26     	; 0x4a3e <vfprintf+0x2e4>
    4a24:	23 2d       	mov	r18, r3
    4a26:	2e 7f       	andi	r18, 0xFE	; 254
    4a28:	a2 2e       	mov	r10, r18
    4a2a:	89 14       	cp	r8, r9
    4a2c:	58 f4       	brcc	.+22     	; 0x4a44 <vfprintf+0x2ea>
    4a2e:	34 fe       	sbrs	r3, 4
    4a30:	0b c0       	rjmp	.+22     	; 0x4a48 <vfprintf+0x2ee>
    4a32:	32 fc       	sbrc	r3, 2
    4a34:	09 c0       	rjmp	.+18     	; 0x4a48 <vfprintf+0x2ee>
    4a36:	83 2d       	mov	r24, r3
    4a38:	8e 7e       	andi	r24, 0xEE	; 238
    4a3a:	a8 2e       	mov	r10, r24
    4a3c:	05 c0       	rjmp	.+10     	; 0x4a48 <vfprintf+0x2ee>
    4a3e:	b8 2c       	mov	r11, r8
    4a40:	a3 2c       	mov	r10, r3
    4a42:	03 c0       	rjmp	.+6      	; 0x4a4a <vfprintf+0x2f0>
    4a44:	b8 2c       	mov	r11, r8
    4a46:	01 c0       	rjmp	.+2      	; 0x4a4a <vfprintf+0x2f0>
    4a48:	b9 2c       	mov	r11, r9
    4a4a:	a4 fe       	sbrs	r10, 4
    4a4c:	0f c0       	rjmp	.+30     	; 0x4a6c <vfprintf+0x312>
    4a4e:	fe 01       	movw	r30, r28
    4a50:	e8 0d       	add	r30, r8
    4a52:	f1 1d       	adc	r31, r1
    4a54:	80 81       	ld	r24, Z
    4a56:	80 33       	cpi	r24, 0x30	; 48
    4a58:	21 f4       	brne	.+8      	; 0x4a62 <vfprintf+0x308>
    4a5a:	9a 2d       	mov	r25, r10
    4a5c:	99 7e       	andi	r25, 0xE9	; 233
    4a5e:	a9 2e       	mov	r10, r25
    4a60:	09 c0       	rjmp	.+18     	; 0x4a74 <vfprintf+0x31a>
    4a62:	a2 fe       	sbrs	r10, 2
    4a64:	06 c0       	rjmp	.+12     	; 0x4a72 <vfprintf+0x318>
    4a66:	b3 94       	inc	r11
    4a68:	b3 94       	inc	r11
    4a6a:	04 c0       	rjmp	.+8      	; 0x4a74 <vfprintf+0x31a>
    4a6c:	8a 2d       	mov	r24, r10
    4a6e:	86 78       	andi	r24, 0x86	; 134
    4a70:	09 f0       	breq	.+2      	; 0x4a74 <vfprintf+0x31a>
    4a72:	b3 94       	inc	r11
    4a74:	a3 fc       	sbrc	r10, 3
    4a76:	10 c0       	rjmp	.+32     	; 0x4a98 <vfprintf+0x33e>
    4a78:	a0 fe       	sbrs	r10, 0
    4a7a:	06 c0       	rjmp	.+12     	; 0x4a88 <vfprintf+0x32e>
    4a7c:	b2 14       	cp	r11, r2
    4a7e:	80 f4       	brcc	.+32     	; 0x4aa0 <vfprintf+0x346>
    4a80:	28 0c       	add	r2, r8
    4a82:	92 2c       	mov	r9, r2
    4a84:	9b 18       	sub	r9, r11
    4a86:	0d c0       	rjmp	.+26     	; 0x4aa2 <vfprintf+0x348>
    4a88:	b2 14       	cp	r11, r2
    4a8a:	58 f4       	brcc	.+22     	; 0x4aa2 <vfprintf+0x348>
    4a8c:	b6 01       	movw	r22, r12
    4a8e:	80 e2       	ldi	r24, 0x20	; 32
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	76 d0       	rcall	.+236    	; 0x4b80 <fputc>
    4a94:	b3 94       	inc	r11
    4a96:	f8 cf       	rjmp	.-16     	; 0x4a88 <vfprintf+0x32e>
    4a98:	b2 14       	cp	r11, r2
    4a9a:	18 f4       	brcc	.+6      	; 0x4aa2 <vfprintf+0x348>
    4a9c:	2b 18       	sub	r2, r11
    4a9e:	02 c0       	rjmp	.+4      	; 0x4aa4 <vfprintf+0x34a>
    4aa0:	98 2c       	mov	r9, r8
    4aa2:	21 2c       	mov	r2, r1
    4aa4:	a4 fe       	sbrs	r10, 4
    4aa6:	0f c0       	rjmp	.+30     	; 0x4ac6 <vfprintf+0x36c>
    4aa8:	b6 01       	movw	r22, r12
    4aaa:	80 e3       	ldi	r24, 0x30	; 48
    4aac:	90 e0       	ldi	r25, 0x00	; 0
    4aae:	68 d0       	rcall	.+208    	; 0x4b80 <fputc>
    4ab0:	a2 fe       	sbrs	r10, 2
    4ab2:	16 c0       	rjmp	.+44     	; 0x4ae0 <vfprintf+0x386>
    4ab4:	a1 fc       	sbrc	r10, 1
    4ab6:	03 c0       	rjmp	.+6      	; 0x4abe <vfprintf+0x364>
    4ab8:	88 e7       	ldi	r24, 0x78	; 120
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	02 c0       	rjmp	.+4      	; 0x4ac2 <vfprintf+0x368>
    4abe:	88 e5       	ldi	r24, 0x58	; 88
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	b6 01       	movw	r22, r12
    4ac4:	0c c0       	rjmp	.+24     	; 0x4ade <vfprintf+0x384>
    4ac6:	8a 2d       	mov	r24, r10
    4ac8:	86 78       	andi	r24, 0x86	; 134
    4aca:	51 f0       	breq	.+20     	; 0x4ae0 <vfprintf+0x386>
    4acc:	a1 fe       	sbrs	r10, 1
    4ace:	02 c0       	rjmp	.+4      	; 0x4ad4 <vfprintf+0x37a>
    4ad0:	8b e2       	ldi	r24, 0x2B	; 43
    4ad2:	01 c0       	rjmp	.+2      	; 0x4ad6 <vfprintf+0x37c>
    4ad4:	80 e2       	ldi	r24, 0x20	; 32
    4ad6:	a7 fc       	sbrc	r10, 7
    4ad8:	8d e2       	ldi	r24, 0x2D	; 45
    4ada:	b6 01       	movw	r22, r12
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	50 d0       	rcall	.+160    	; 0x4b80 <fputc>
    4ae0:	89 14       	cp	r8, r9
    4ae2:	30 f4       	brcc	.+12     	; 0x4af0 <vfprintf+0x396>
    4ae4:	b6 01       	movw	r22, r12
    4ae6:	80 e3       	ldi	r24, 0x30	; 48
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	4a d0       	rcall	.+148    	; 0x4b80 <fputc>
    4aec:	9a 94       	dec	r9
    4aee:	f8 cf       	rjmp	.-16     	; 0x4ae0 <vfprintf+0x386>
    4af0:	8a 94       	dec	r8
    4af2:	f3 01       	movw	r30, r6
    4af4:	e8 0d       	add	r30, r8
    4af6:	f1 1d       	adc	r31, r1
    4af8:	80 81       	ld	r24, Z
    4afa:	b6 01       	movw	r22, r12
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	40 d0       	rcall	.+128    	; 0x4b80 <fputc>
    4b00:	81 10       	cpse	r8, r1
    4b02:	f6 cf       	rjmp	.-20     	; 0x4af0 <vfprintf+0x396>
    4b04:	22 20       	and	r2, r2
    4b06:	09 f4       	brne	.+2      	; 0x4b0a <vfprintf+0x3b0>
    4b08:	4e ce       	rjmp	.-868    	; 0x47a6 <vfprintf+0x4c>
    4b0a:	b6 01       	movw	r22, r12
    4b0c:	80 e2       	ldi	r24, 0x20	; 32
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	37 d0       	rcall	.+110    	; 0x4b80 <fputc>
    4b12:	2a 94       	dec	r2
    4b14:	f7 cf       	rjmp	.-18     	; 0x4b04 <vfprintf+0x3aa>
    4b16:	f6 01       	movw	r30, r12
    4b18:	86 81       	ldd	r24, Z+6	; 0x06
    4b1a:	97 81       	ldd	r25, Z+7	; 0x07
    4b1c:	02 c0       	rjmp	.+4      	; 0x4b22 <vfprintf+0x3c8>
    4b1e:	8f ef       	ldi	r24, 0xFF	; 255
    4b20:	9f ef       	ldi	r25, 0xFF	; 255
    4b22:	2b 96       	adiw	r28, 0x0b	; 11
    4b24:	0f b6       	in	r0, 0x3f	; 63
    4b26:	f8 94       	cli
    4b28:	de bf       	out	0x3e, r29	; 62
    4b2a:	0f be       	out	0x3f, r0	; 63
    4b2c:	cd bf       	out	0x3d, r28	; 61
    4b2e:	df 91       	pop	r29
    4b30:	cf 91       	pop	r28
    4b32:	1f 91       	pop	r17
    4b34:	0f 91       	pop	r16
    4b36:	ff 90       	pop	r15
    4b38:	ef 90       	pop	r14
    4b3a:	df 90       	pop	r13
    4b3c:	cf 90       	pop	r12
    4b3e:	bf 90       	pop	r11
    4b40:	af 90       	pop	r10
    4b42:	9f 90       	pop	r9
    4b44:	8f 90       	pop	r8
    4b46:	7f 90       	pop	r7
    4b48:	6f 90       	pop	r6
    4b4a:	5f 90       	pop	r5
    4b4c:	4f 90       	pop	r4
    4b4e:	3f 90       	pop	r3
    4b50:	2f 90       	pop	r2
    4b52:	08 95       	ret

00004b54 <strnlen_P>:
    4b54:	fc 01       	movw	r30, r24
    4b56:	05 90       	lpm	r0, Z+
    4b58:	61 50       	subi	r22, 0x01	; 1
    4b5a:	70 40       	sbci	r23, 0x00	; 0
    4b5c:	01 10       	cpse	r0, r1
    4b5e:	d8 f7       	brcc	.-10     	; 0x4b56 <strnlen_P+0x2>
    4b60:	80 95       	com	r24
    4b62:	90 95       	com	r25
    4b64:	8e 0f       	add	r24, r30
    4b66:	9f 1f       	adc	r25, r31
    4b68:	08 95       	ret

00004b6a <strnlen>:
    4b6a:	fc 01       	movw	r30, r24
    4b6c:	61 50       	subi	r22, 0x01	; 1
    4b6e:	70 40       	sbci	r23, 0x00	; 0
    4b70:	01 90       	ld	r0, Z+
    4b72:	01 10       	cpse	r0, r1
    4b74:	d8 f7       	brcc	.-10     	; 0x4b6c <strnlen+0x2>
    4b76:	80 95       	com	r24
    4b78:	90 95       	com	r25
    4b7a:	8e 0f       	add	r24, r30
    4b7c:	9f 1f       	adc	r25, r31
    4b7e:	08 95       	ret

00004b80 <fputc>:
    4b80:	0f 93       	push	r16
    4b82:	1f 93       	push	r17
    4b84:	cf 93       	push	r28
    4b86:	df 93       	push	r29
    4b88:	fb 01       	movw	r30, r22
    4b8a:	23 81       	ldd	r18, Z+3	; 0x03
    4b8c:	21 fd       	sbrc	r18, 1
    4b8e:	03 c0       	rjmp	.+6      	; 0x4b96 <fputc+0x16>
    4b90:	8f ef       	ldi	r24, 0xFF	; 255
    4b92:	9f ef       	ldi	r25, 0xFF	; 255
    4b94:	2c c0       	rjmp	.+88     	; 0x4bee <fputc+0x6e>
    4b96:	22 ff       	sbrs	r18, 2
    4b98:	16 c0       	rjmp	.+44     	; 0x4bc6 <fputc+0x46>
    4b9a:	46 81       	ldd	r20, Z+6	; 0x06
    4b9c:	57 81       	ldd	r21, Z+7	; 0x07
    4b9e:	24 81       	ldd	r18, Z+4	; 0x04
    4ba0:	35 81       	ldd	r19, Z+5	; 0x05
    4ba2:	42 17       	cp	r20, r18
    4ba4:	53 07       	cpc	r21, r19
    4ba6:	44 f4       	brge	.+16     	; 0x4bb8 <fputc+0x38>
    4ba8:	a0 81       	ld	r26, Z
    4baa:	b1 81       	ldd	r27, Z+1	; 0x01
    4bac:	9d 01       	movw	r18, r26
    4bae:	2f 5f       	subi	r18, 0xFF	; 255
    4bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    4bb2:	31 83       	std	Z+1, r19	; 0x01
    4bb4:	20 83       	st	Z, r18
    4bb6:	8c 93       	st	X, r24
    4bb8:	26 81       	ldd	r18, Z+6	; 0x06
    4bba:	37 81       	ldd	r19, Z+7	; 0x07
    4bbc:	2f 5f       	subi	r18, 0xFF	; 255
    4bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    4bc0:	37 83       	std	Z+7, r19	; 0x07
    4bc2:	26 83       	std	Z+6, r18	; 0x06
    4bc4:	14 c0       	rjmp	.+40     	; 0x4bee <fputc+0x6e>
    4bc6:	8b 01       	movw	r16, r22
    4bc8:	ec 01       	movw	r28, r24
    4bca:	fb 01       	movw	r30, r22
    4bcc:	00 84       	ldd	r0, Z+8	; 0x08
    4bce:	f1 85       	ldd	r31, Z+9	; 0x09
    4bd0:	e0 2d       	mov	r30, r0
    4bd2:	19 95       	eicall
    4bd4:	89 2b       	or	r24, r25
    4bd6:	e1 f6       	brne	.-72     	; 0x4b90 <fputc+0x10>
    4bd8:	d8 01       	movw	r26, r16
    4bda:	16 96       	adiw	r26, 0x06	; 6
    4bdc:	8d 91       	ld	r24, X+
    4bde:	9c 91       	ld	r25, X
    4be0:	17 97       	sbiw	r26, 0x07	; 7
    4be2:	01 96       	adiw	r24, 0x01	; 1
    4be4:	17 96       	adiw	r26, 0x07	; 7
    4be6:	9c 93       	st	X, r25
    4be8:	8e 93       	st	-X, r24
    4bea:	16 97       	sbiw	r26, 0x06	; 6
    4bec:	ce 01       	movw	r24, r28
    4bee:	df 91       	pop	r29
    4bf0:	cf 91       	pop	r28
    4bf2:	1f 91       	pop	r17
    4bf4:	0f 91       	pop	r16
    4bf6:	08 95       	ret

00004bf8 <__ultoa_invert>:
    4bf8:	fa 01       	movw	r30, r20
    4bfa:	aa 27       	eor	r26, r26
    4bfc:	28 30       	cpi	r18, 0x08	; 8
    4bfe:	51 f1       	breq	.+84     	; 0x4c54 <__ultoa_invert+0x5c>
    4c00:	20 31       	cpi	r18, 0x10	; 16
    4c02:	81 f1       	breq	.+96     	; 0x4c64 <__ultoa_invert+0x6c>
    4c04:	e8 94       	clt
    4c06:	6f 93       	push	r22
    4c08:	6e 7f       	andi	r22, 0xFE	; 254
    4c0a:	6e 5f       	subi	r22, 0xFE	; 254
    4c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c0e:	8f 4f       	sbci	r24, 0xFF	; 255
    4c10:	9f 4f       	sbci	r25, 0xFF	; 255
    4c12:	af 4f       	sbci	r26, 0xFF	; 255
    4c14:	b1 e0       	ldi	r27, 0x01	; 1
    4c16:	3e d0       	rcall	.+124    	; 0x4c94 <__ultoa_invert+0x9c>
    4c18:	b4 e0       	ldi	r27, 0x04	; 4
    4c1a:	3c d0       	rcall	.+120    	; 0x4c94 <__ultoa_invert+0x9c>
    4c1c:	67 0f       	add	r22, r23
    4c1e:	78 1f       	adc	r23, r24
    4c20:	89 1f       	adc	r24, r25
    4c22:	9a 1f       	adc	r25, r26
    4c24:	a1 1d       	adc	r26, r1
    4c26:	68 0f       	add	r22, r24
    4c28:	79 1f       	adc	r23, r25
    4c2a:	8a 1f       	adc	r24, r26
    4c2c:	91 1d       	adc	r25, r1
    4c2e:	a1 1d       	adc	r26, r1
    4c30:	6a 0f       	add	r22, r26
    4c32:	71 1d       	adc	r23, r1
    4c34:	81 1d       	adc	r24, r1
    4c36:	91 1d       	adc	r25, r1
    4c38:	a1 1d       	adc	r26, r1
    4c3a:	20 d0       	rcall	.+64     	; 0x4c7c <__ultoa_invert+0x84>
    4c3c:	09 f4       	brne	.+2      	; 0x4c40 <__ultoa_invert+0x48>
    4c3e:	68 94       	set
    4c40:	3f 91       	pop	r19
    4c42:	2a e0       	ldi	r18, 0x0A	; 10
    4c44:	26 9f       	mul	r18, r22
    4c46:	11 24       	eor	r1, r1
    4c48:	30 19       	sub	r19, r0
    4c4a:	30 5d       	subi	r19, 0xD0	; 208
    4c4c:	31 93       	st	Z+, r19
    4c4e:	de f6       	brtc	.-74     	; 0x4c06 <__ultoa_invert+0xe>
    4c50:	cf 01       	movw	r24, r30
    4c52:	08 95       	ret
    4c54:	46 2f       	mov	r20, r22
    4c56:	47 70       	andi	r20, 0x07	; 7
    4c58:	40 5d       	subi	r20, 0xD0	; 208
    4c5a:	41 93       	st	Z+, r20
    4c5c:	b3 e0       	ldi	r27, 0x03	; 3
    4c5e:	0f d0       	rcall	.+30     	; 0x4c7e <__ultoa_invert+0x86>
    4c60:	c9 f7       	brne	.-14     	; 0x4c54 <__ultoa_invert+0x5c>
    4c62:	f6 cf       	rjmp	.-20     	; 0x4c50 <__ultoa_invert+0x58>
    4c64:	46 2f       	mov	r20, r22
    4c66:	4f 70       	andi	r20, 0x0F	; 15
    4c68:	40 5d       	subi	r20, 0xD0	; 208
    4c6a:	4a 33       	cpi	r20, 0x3A	; 58
    4c6c:	18 f0       	brcs	.+6      	; 0x4c74 <__ultoa_invert+0x7c>
    4c6e:	49 5d       	subi	r20, 0xD9	; 217
    4c70:	31 fd       	sbrc	r19, 1
    4c72:	40 52       	subi	r20, 0x20	; 32
    4c74:	41 93       	st	Z+, r20
    4c76:	02 d0       	rcall	.+4      	; 0x4c7c <__ultoa_invert+0x84>
    4c78:	a9 f7       	brne	.-22     	; 0x4c64 <__ultoa_invert+0x6c>
    4c7a:	ea cf       	rjmp	.-44     	; 0x4c50 <__ultoa_invert+0x58>
    4c7c:	b4 e0       	ldi	r27, 0x04	; 4
    4c7e:	a6 95       	lsr	r26
    4c80:	97 95       	ror	r25
    4c82:	87 95       	ror	r24
    4c84:	77 95       	ror	r23
    4c86:	67 95       	ror	r22
    4c88:	ba 95       	dec	r27
    4c8a:	c9 f7       	brne	.-14     	; 0x4c7e <__ultoa_invert+0x86>
    4c8c:	00 97       	sbiw	r24, 0x00	; 0
    4c8e:	61 05       	cpc	r22, r1
    4c90:	71 05       	cpc	r23, r1
    4c92:	08 95       	ret
    4c94:	9b 01       	movw	r18, r22
    4c96:	ac 01       	movw	r20, r24
    4c98:	0a 2e       	mov	r0, r26
    4c9a:	06 94       	lsr	r0
    4c9c:	57 95       	ror	r21
    4c9e:	47 95       	ror	r20
    4ca0:	37 95       	ror	r19
    4ca2:	27 95       	ror	r18
    4ca4:	ba 95       	dec	r27
    4ca6:	c9 f7       	brne	.-14     	; 0x4c9a <__ultoa_invert+0xa2>
    4ca8:	62 0f       	add	r22, r18
    4caa:	73 1f       	adc	r23, r19
    4cac:	84 1f       	adc	r24, r20
    4cae:	95 1f       	adc	r25, r21
    4cb0:	a0 1d       	adc	r26, r0
    4cb2:	08 95       	ret

00004cb4 <__muluhisi3>:
    4cb4:	0f d0       	rcall	.+30     	; 0x4cd4 <__umulhisi3>
    4cb6:	a5 9f       	mul	r26, r21
    4cb8:	90 0d       	add	r25, r0
    4cba:	b4 9f       	mul	r27, r20
    4cbc:	90 0d       	add	r25, r0
    4cbe:	a4 9f       	mul	r26, r20
    4cc0:	80 0d       	add	r24, r0
    4cc2:	91 1d       	adc	r25, r1
    4cc4:	11 24       	eor	r1, r1
    4cc6:	08 95       	ret

00004cc8 <__mulshisi3>:
    4cc8:	b7 ff       	sbrs	r27, 7
    4cca:	f4 cf       	rjmp	.-24     	; 0x4cb4 <__muluhisi3>

00004ccc <__mulohisi3>:
    4ccc:	f3 df       	rcall	.-26     	; 0x4cb4 <__muluhisi3>
    4cce:	82 1b       	sub	r24, r18
    4cd0:	93 0b       	sbc	r25, r19
    4cd2:	08 95       	ret

00004cd4 <__umulhisi3>:
    4cd4:	a2 9f       	mul	r26, r18
    4cd6:	b0 01       	movw	r22, r0
    4cd8:	b3 9f       	mul	r27, r19
    4cda:	c0 01       	movw	r24, r0
    4cdc:	a3 9f       	mul	r26, r19
    4cde:	70 0d       	add	r23, r0
    4ce0:	81 1d       	adc	r24, r1
    4ce2:	11 24       	eor	r1, r1
    4ce4:	91 1d       	adc	r25, r1
    4ce6:	b2 9f       	mul	r27, r18
    4ce8:	70 0d       	add	r23, r0
    4cea:	81 1d       	adc	r24, r1
    4cec:	11 24       	eor	r1, r1
    4cee:	91 1d       	adc	r25, r1
    4cf0:	08 95       	ret

00004cf2 <_exit>:
    4cf2:	f8 94       	cli

00004cf4 <__stop_program>:
    4cf4:	ff cf       	rjmp	.-2      	; 0x4cf4 <__stop_program>
