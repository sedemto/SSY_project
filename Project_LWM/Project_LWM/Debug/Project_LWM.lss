
Project_LWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000b6c  00800200  00007360  000073f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007360  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001a3f  00800d6c  00800d6c  00007f60  2**0
                  ALLOC
  3 .noinit       00000001  008027ab  008027ab  00007f60  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00007f60  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007fbc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000b08  00000000  00000000  00007ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00010824  00000000  00000000  00008b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004ce0  00000000  00000000  00019328  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000070d0  00000000  00000000  0001e008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002828  00000000  00000000  000250d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003ac4  00000000  00000000  00027900  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ca38  00000000  00000000  0002b3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000aa0  00000000  00000000  00037dfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fb c1       	rjmp	.+1014   	; 0x3f8 <__ctors_end>
       2:	00 00       	nop
       4:	29 c2       	rjmp	.+1106   	; 0x458 <__bad_interrupt>
       6:	00 00       	nop
       8:	27 c2       	rjmp	.+1102   	; 0x458 <__bad_interrupt>
       a:	00 00       	nop
       c:	25 c2       	rjmp	.+1098   	; 0x458 <__bad_interrupt>
       e:	00 00       	nop
      10:	23 c2       	rjmp	.+1094   	; 0x458 <__bad_interrupt>
      12:	00 00       	nop
      14:	21 c2       	rjmp	.+1090   	; 0x458 <__bad_interrupt>
      16:	00 00       	nop
      18:	1f c2       	rjmp	.+1086   	; 0x458 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1d c2       	rjmp	.+1082   	; 0x458 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1b c2       	rjmp	.+1078   	; 0x458 <__bad_interrupt>
      22:	00 00       	nop
      24:	19 c2       	rjmp	.+1074   	; 0x458 <__bad_interrupt>
      26:	00 00       	nop
      28:	17 c2       	rjmp	.+1070   	; 0x458 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	15 c2       	rjmp	.+1066   	; 0x458 <__bad_interrupt>
      2e:	00 00       	nop
      30:	13 c2       	rjmp	.+1062   	; 0x458 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 b0 27 	jmp	0x4f60	; 0x4f60 <__vector_13>
      38:	0f c2       	rjmp	.+1054   	; 0x458 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0d c2       	rjmp	.+1050   	; 0x458 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0b c2       	rjmp	.+1046   	; 0x458 <__bad_interrupt>
      42:	00 00       	nop
      44:	09 c2       	rjmp	.+1042   	; 0x458 <__bad_interrupt>
      46:	00 00       	nop
      48:	07 c2       	rjmp	.+1038   	; 0x458 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	05 c2       	rjmp	.+1034   	; 0x458 <__bad_interrupt>
      4e:	00 00       	nop
      50:	03 c2       	rjmp	.+1030   	; 0x458 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__vector_21>
      58:	ff c1       	rjmp	.+1022   	; 0x458 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fd c1       	rjmp	.+1018   	; 0x458 <__bad_interrupt>
      5e:	00 00       	nop
      60:	fb c1       	rjmp	.+1014   	; 0x458 <__bad_interrupt>
      62:	00 00       	nop
      64:	f9 c1       	rjmp	.+1010   	; 0x458 <__bad_interrupt>
      66:	00 00       	nop
      68:	f7 c1       	rjmp	.+1006   	; 0x458 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f5 c1       	rjmp	.+1002   	; 0x458 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f3 c1       	rjmp	.+998    	; 0x458 <__bad_interrupt>
      72:	00 00       	nop
      74:	f1 c1       	rjmp	.+994    	; 0x458 <__bad_interrupt>
      76:	00 00       	nop
      78:	ef c1       	rjmp	.+990    	; 0x458 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ed c1       	rjmp	.+986    	; 0x458 <__bad_interrupt>
      7e:	00 00       	nop
      80:	eb c1       	rjmp	.+982    	; 0x458 <__bad_interrupt>
      82:	00 00       	nop
      84:	e9 c1       	rjmp	.+978    	; 0x458 <__bad_interrupt>
      86:	00 00       	nop
      88:	e7 c1       	rjmp	.+974    	; 0x458 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e5 c1       	rjmp	.+970    	; 0x458 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 01 28 	jmp	0x5002	; 0x5002 <__vector_36>
      94:	0c 94 e5 27 	jmp	0x4fca	; 0x4fca <__vector_37>
      98:	df c1       	rjmp	.+958    	; 0x458 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	dd c1       	rjmp	.+954    	; 0x458 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	db c1       	rjmp	.+950    	; 0x458 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d9 c1       	rjmp	.+946    	; 0x458 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 9f 27 	jmp	0x4f3e	; 0x4f3e <__vector_42>
      ac:	d5 c1       	rjmp	.+938    	; 0x458 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d3 c1       	rjmp	.+934    	; 0x458 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d1 c1       	rjmp	.+930    	; 0x458 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cf c1       	rjmp	.+926    	; 0x458 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cd c1       	rjmp	.+922    	; 0x458 <__bad_interrupt>
      be:	00 00       	nop
      c0:	cb c1       	rjmp	.+918    	; 0x458 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c9 c1       	rjmp	.+914    	; 0x458 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c7 c1       	rjmp	.+910    	; 0x458 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c5 c1       	rjmp	.+906    	; 0x458 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c3 c1       	rjmp	.+902    	; 0x458 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c1 c1       	rjmp	.+898    	; 0x458 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	bf c1       	rjmp	.+894    	; 0x458 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bd c1       	rjmp	.+890    	; 0x458 <__bad_interrupt>
      de:	00 00       	nop
      e0:	bb c1       	rjmp	.+886    	; 0x458 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b9 c1       	rjmp	.+882    	; 0x458 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b7 c1       	rjmp	.+878    	; 0x458 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b5 c1       	rjmp	.+874    	; 0x458 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b3 c1       	rjmp	.+870    	; 0x458 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b1 c1       	rjmp	.+866    	; 0x458 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	af c1       	rjmp	.+862    	; 0x458 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ad c1       	rjmp	.+858    	; 0x458 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ab c1       	rjmp	.+854    	; 0x458 <__bad_interrupt>
     102:	00 00       	nop
     104:	a9 c1       	rjmp	.+850    	; 0x458 <__bad_interrupt>
     106:	00 00       	nop
     108:	a7 c1       	rjmp	.+846    	; 0x458 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a5 c1       	rjmp	.+842    	; 0x458 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a3 c1       	rjmp	.+838    	; 0x458 <__bad_interrupt>
     112:	00 00       	nop
     114:	a1 c1       	rjmp	.+834    	; 0x458 <__bad_interrupt>
     116:	00 00       	nop
     118:	9f c1       	rjmp	.+830    	; 0x458 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9d c1       	rjmp	.+826    	; 0x458 <__bad_interrupt>
     11e:	00 00       	nop
     120:	9b c1       	rjmp	.+822    	; 0x458 <__bad_interrupt>
     122:	00 00       	nop
     124:	99 c1       	rjmp	.+818    	; 0x458 <__bad_interrupt>
     126:	00 00       	nop
     128:	97 c1       	rjmp	.+814    	; 0x458 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	95 c1       	rjmp	.+810    	; 0x458 <__bad_interrupt>
     12e:	00 00       	nop
     130:	93 c1       	rjmp	.+806    	; 0x458 <__bad_interrupt>
     132:	00 00       	nop
     134:	9f 0c       	add	r9, r15
     136:	a2 0c       	add	r10, r2
     138:	b1 0c       	add	r11, r1
     13a:	ac 0c       	add	r10, r12
     13c:	b6 0c       	add	r11, r6
     13e:	bb 0c       	add	r11, r11
     140:	c0 0c       	add	r12, r0
     142:	ce 0c       	add	r12, r14
     144:	e2 0c       	add	r14, r2
     146:	f1 0c       	add	r15, r1
     148:	f4 0c       	add	r15, r4
     14a:	f8 0c       	add	r15, r8
     14c:	0b 0d       	add	r16, r11
     14e:	fc 0c       	add	r15, r12
     150:	ff 0c       	add	r15, r15
     152:	05 0d       	add	r16, r5

00000154 <__trampolines_end>:
     154:	6e 61       	ori	r22, 0x1E	; 30
     156:	6e 00       	.word	0x006e	; ????

00000158 <__c.2332>:
     158:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     168:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     178:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     188:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     198:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     208:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     218:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     228:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     238:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     248:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000256 <__c.3752>:
     256:	44 48 43 50 20 49 50 0d 0a 00                       DHCP IP...

00000260 <__c.3750>:
     260:	53 54 41 54 49 43 20 49 50 0d 0a 00                 STATIC IP...

0000026c <__c.3747>:
     26c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     27c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     28c:	3d 3d 3d 3d 3d 3d 3d 0d 0a 00                       =======...

00000296 <__c.3745>:
     296:	20 57 49 5a 6e 65 74 20 63 68 69 70 3a 20 20 25      WIZnet chip:  %
     2a6:	73 20 0d 0a 00                                      s ...

000002ab <__c.3743>:
     2ab:	0d 0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ..==============
     2bb:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     2cb:	3d 3d 3d 3d 3d 3d 3d 3d 3d 0d 0a 00                 =========...

000002d7 <__c.3730>:
     2d7:	43 41 41 41 41 55 0a 0d 00                          CAAAAU...

000002e0 <__c.3722>:
     2e0:	2d 2d 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64     --MQTT Connected
     2f0:	20 45 52 52 4f 52 3a 20 25 6c 64 0d 0a 00            ERROR: %ld...

000002fe <__c.3726>:
     2fe:	53 75 62 73 63 72 69 62 65 64 20 28 25 73 29 20     Subscribed (%s) 
     30e:	25 64 0d 0a 00                                      %d...

00000313 <__c.3720>:
     313:	2b 2b 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64     ++MQTT Connected
     323:	20 53 55 43 43 45 53 53 3a 20 25 6c 64 0d 0a 00      SUCCESS: %ld...

00000333 <__c.3717>:
     333:	3e 3e 54 72 79 69 6e 67 20 63 6f 6e 6e 65 63 74     >>Trying connect
     343:	20 74 6f 20 4d 51 54 54 20 62 72 6f 6b 65 72 3a      to MQTT broker:
     353:	20 25 64 2e 25 64 2e 25 64 2e 25 64 20 2e 2e 0d      %d.%d.%d.%d ...
     363:	0a 00                                               ..

00000365 <__c.3707>:
     365:	3e 3e 20 46 72 65 65 20 52 41 4d 20 69 73 3a 20     >> Free RAM is: 
     375:	25 64 20 62 79 74 65 73 0d 0a 00                    %d bytes...

00000380 <__c.3584>:
     380:	43 6f 6e 6e 65 63 74 69 6f 6e 20 77 69 74 68 20     Connection with 
     390:	4d 51 54 54 20 42 72 6f 6b 65 72 20 77 61 73 20     MQTT Broker was 
     3a0:	6c 6f 73 74 21 21 0d 0a 52 65 62 6f 6f 74 20 74     lost!!..Reboot t
     3b0:	68 65 20 62 6f 61 72 64 2e 2e 0d 0a 00              he board.....

000003bd <__c.3582>:
     3bd:	20 2d 20 45 52 52 4f 52 0d 0a 00                     - ERROR...

000003c8 <__c.3580>:
     3c8:	20 2d 20 4f 4b 0d 0a 00                              - OK...

000003d0 <__c.3577>:
     3d0:	3e 3e 4d 51 54 54 20 70 75 62 20 6d 73 67 20 25     >>MQTT pub msg %
     3e0:	6c 75 20 00                                         lu .

000003e4 <__c.3566>:
     3e4:	3c 3c 4d 51 54 54 20 53 75 62 3a 20 5b 25 73 5d     <<MQTT Sub: [%s]
     3f4:	20 25 73 00                                          %s.

000003f8 <__ctors_end>:
     3f8:	11 24       	eor	r1, r1
     3fa:	1f be       	out	0x3f, r1	; 63
     3fc:	cf ef       	ldi	r28, 0xFF	; 255
     3fe:	d1 e8       	ldi	r29, 0x81	; 129
     400:	de bf       	out	0x3e, r29	; 62
     402:	cd bf       	out	0x3d, r28	; 61
     404:	00 e0       	ldi	r16, 0x00	; 0
     406:	0c bf       	out	0x3c, r16	; 60

00000408 <get_mcusr>:
void get_mcusr(void) \
  __attribute__((naked)) \
  __attribute__((section(".init3")));
void get_mcusr(void)
{
  mcucsr_mirror = MCUSR;
     408:	84 b7       	in	r24, 0x34	; 52
     40a:	80 93 ab 27 	sts	0x27AB, r24	; 0x8027ab <__bss_end>
  MCUSR = 0;
     40e:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	a8 95       	wdr
     416:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     41a:	88 61       	ori	r24, 0x18	; 24
     41c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     420:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     424:	0f be       	out	0x3f, r0	; 63

00000426 <__do_copy_data>:
     426:	1d e0       	ldi	r17, 0x0D	; 13
     428:	a0 e0       	ldi	r26, 0x00	; 0
     42a:	b2 e0       	ldi	r27, 0x02	; 2
     42c:	e0 e6       	ldi	r30, 0x60	; 96
     42e:	f3 e7       	ldi	r31, 0x73	; 115
     430:	00 e0       	ldi	r16, 0x00	; 0
     432:	0b bf       	out	0x3b, r16	; 59
     434:	02 c0       	rjmp	.+4      	; 0x43a <__do_copy_data+0x14>
     436:	07 90       	elpm	r0, Z+
     438:	0d 92       	st	X+, r0
     43a:	ac 36       	cpi	r26, 0x6C	; 108
     43c:	b1 07       	cpc	r27, r17
     43e:	d9 f7       	brne	.-10     	; 0x436 <__do_copy_data+0x10>

00000440 <__do_clear_bss>:
     440:	27 e2       	ldi	r18, 0x27	; 39
     442:	ac e6       	ldi	r26, 0x6C	; 108
     444:	bd e0       	ldi	r27, 0x0D	; 13
     446:	01 c0       	rjmp	.+2      	; 0x44a <.do_clear_bss_start>

00000448 <.do_clear_bss_loop>:
     448:	1d 92       	st	X+, r1

0000044a <.do_clear_bss_start>:
     44a:	ab 3a       	cpi	r26, 0xAB	; 171
     44c:	b2 07       	cpc	r27, r18
     44e:	e1 f7       	brne	.-8      	; 0x448 <.do_clear_bss_loop>
     450:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <main>
     454:	0c 94 ae 39 	jmp	0x735c	; 0x735c <_exit>

00000458 <__bad_interrupt>:
     458:	d3 cd       	rjmp	.-1114   	; 0x0 <__vectors>

0000045a <close>:
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
}
     45a:	bf 92       	push	r11
     45c:	cf 92       	push	r12
     45e:	df 92       	push	r13
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	89 30       	cpi	r24, 0x09	; 9
     46e:	08 f0       	brcs	.+2      	; 0x472 <close+0x18>
     470:	59 c0       	rjmp	.+178    	; 0x524 <close+0xca>
     472:	b8 2e       	mov	r11, r24
     474:	08 2f       	mov	r16, r24
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	e8 01       	movw	r28, r16
     47a:	cc 0f       	add	r28, r28
     47c:	dd 1f       	adc	r29, r29
     47e:	cc 0f       	add	r28, r28
     480:	dd 1f       	adc	r29, r29
     482:	21 96       	adiw	r28, 0x01	; 1
     484:	cc 0f       	add	r28, r28
     486:	dd 1f       	adc	r29, r29
     488:	cc 0f       	add	r28, r28
     48a:	dd 1f       	adc	r29, r29
     48c:	cc 0f       	add	r28, r28
     48e:	dd 1f       	adc	r29, r29
     490:	6e 01       	movw	r12, r28
     492:	d3 94       	inc	r13
     494:	0d 2c       	mov	r0, r13
     496:	00 0c       	add	r0, r0
     498:	ee 08       	sbc	r14, r14
     49a:	ff 08       	sbc	r15, r15
     49c:	40 e1       	ldi	r20, 0x10	; 16
     49e:	c7 01       	movw	r24, r14
     4a0:	b6 01       	movw	r22, r12
     4a2:	c8 d4       	rcall	.+2448   	; 0xe34 <WIZCHIP_WRITE>
     4a4:	c7 01       	movw	r24, r14
     4a6:	b6 01       	movw	r22, r12
     4a8:	5e d4       	rcall	.+2236   	; 0xd66 <WIZCHIP_READ>
     4aa:	81 11       	cpse	r24, r1
     4ac:	fb cf       	rjmp	.-10     	; 0x4a4 <close+0x4a>
     4ae:	be 01       	movw	r22, r28
     4b0:	7e 5f       	subi	r23, 0xFE	; 254
     4b2:	07 2e       	mov	r0, r23
     4b4:	00 0c       	add	r0, r0
     4b6:	88 0b       	sbc	r24, r24
     4b8:	99 0b       	sbc	r25, r25
     4ba:	4f e1       	ldi	r20, 0x1F	; 31
     4bc:	bb d4       	rcall	.+2422   	; 0xe34 <WIZCHIP_WRITE>
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <close+0x6e>
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	ba 94       	dec	r11
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <close+0x6a>
     4cc:	80 95       	com	r24
     4ce:	90 95       	com	r25
     4d0:	20 91 86 0d 	lds	r18, 0x0D86	; 0x800d86 <sock_io_mode>
     4d4:	30 91 87 0d 	lds	r19, 0x0D87	; 0x800d87 <sock_io_mode+0x1>
     4d8:	28 23       	and	r18, r24
     4da:	39 23       	and	r19, r25
     4dc:	30 93 87 0d 	sts	0x0D87, r19	; 0x800d87 <sock_io_mode+0x1>
     4e0:	20 93 86 0d 	sts	0x0D86, r18	; 0x800d86 <sock_io_mode>
     4e4:	20 91 84 0d 	lds	r18, 0x0D84	; 0x800d84 <sock_is_sending>
     4e8:	30 91 85 0d 	lds	r19, 0x0D85	; 0x800d85 <sock_is_sending+0x1>
     4ec:	82 23       	and	r24, r18
     4ee:	93 23       	and	r25, r19
     4f0:	90 93 85 0d 	sts	0x0D85, r25	; 0x800d85 <sock_is_sending+0x1>
     4f4:	80 93 84 0d 	sts	0x0D84, r24	; 0x800d84 <sock_is_sending>
     4f8:	f8 01       	movw	r30, r16
     4fa:	ee 0f       	add	r30, r30
     4fc:	ff 1f       	adc	r31, r31
     4fe:	ec 58       	subi	r30, 0x8C	; 140
     500:	f2 4f       	sbci	r31, 0xF2	; 242
     502:	11 82       	std	Z+1, r1	; 0x01
     504:	10 82       	st	Z, r1
     506:	f8 01       	movw	r30, r16
     508:	e4 59       	subi	r30, 0x94	; 148
     50a:	f2 4f       	sbci	r31, 0xF2	; 242
     50c:	10 82       	st	Z, r1
     50e:	be 01       	movw	r22, r28
     510:	7d 5f       	subi	r23, 0xFD	; 253
     512:	07 2e       	mov	r0, r23
     514:	00 0c       	add	r0, r0
     516:	88 0b       	sbc	r24, r24
     518:	99 0b       	sbc	r25, r25
     51a:	25 d4       	rcall	.+2122   	; 0xd66 <WIZCHIP_READ>
     51c:	81 11       	cpse	r24, r1
     51e:	f7 cf       	rjmp	.-18     	; 0x50e <close+0xb4>
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	01 c0       	rjmp	.+2      	; 0x526 <close+0xcc>
     524:	8f ef       	ldi	r24, 0xFF	; 255
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	df 90       	pop	r13
     534:	cf 90       	pop	r12
     536:	bf 90       	pop	r11
     538:	08 95       	ret

0000053a <socket>:
     53a:	4f 92       	push	r4
     53c:	5f 92       	push	r5
     53e:	6f 92       	push	r6
     540:	7f 92       	push	r7
     542:	af 92       	push	r10
     544:	bf 92       	push	r11
     546:	cf 92       	push	r12
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	00 d0       	rcall	.+0      	; 0x558 <socket+0x1e>
     558:	1f 92       	push	r1
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
     55e:	f8 2e       	mov	r15, r24
     560:	56 2e       	mov	r5, r22
     562:	3a 01       	movw	r6, r20
     564:	e2 2e       	mov	r14, r18
     566:	28 e0       	ldi	r18, 0x08	; 8
     568:	28 17       	cp	r18, r24
     56a:	08 f4       	brcc	.+2      	; 0x56e <socket+0x34>
     56c:	c5 c0       	rjmp	.+394    	; 0x6f8 <socket+0x1be>
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	68 17       	cp	r22, r24
     572:	39 f0       	breq	.+14     	; 0x582 <socket+0x48>
     574:	68 17       	cp	r22, r24
     576:	08 f4       	brcc	.+2      	; 0x57a <socket+0x40>
     578:	c1 c0       	rjmp	.+386    	; 0x6fc <socket+0x1c2>
     57a:	24 e0       	ldi	r18, 0x04	; 4
     57c:	26 17       	cp	r18, r22
     57e:	a8 f4       	brcc	.+42     	; 0x5aa <socket+0x70>
     580:	bd c0       	rjmp	.+378    	; 0x6fc <socket+0x1c2>
     582:	24 e0       	ldi	r18, 0x04	; 4
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	ae 01       	movw	r20, r28
     588:	4f 5f       	subi	r20, 0xFF	; 255
     58a:	5f 4f       	sbci	r21, 0xFF	; 255
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	7f e0       	ldi	r23, 0x0F	; 15
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	c1 d4       	rcall	.+2434   	; 0xf18 <WIZCHIP_READ_BUF>
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	9a 81       	ldd	r25, Y+2	; 0x02
     59a:	ab 81       	ldd	r26, Y+3	; 0x03
     59c:	bc 81       	ldd	r27, Y+4	; 0x04
     59e:	89 2b       	or	r24, r25
     5a0:	8a 2b       	or	r24, r26
     5a2:	8b 2b       	or	r24, r27
     5a4:	11 f4       	brne	.+4      	; 0x5aa <socket+0x70>
     5a6:	8d ef       	ldi	r24, 0xFD	; 253
     5a8:	b2 c0       	rjmp	.+356    	; 0x70e <socket+0x1d4>
     5aa:	e2 fc       	sbrc	r14, 2
     5ac:	a9 c0       	rjmp	.+338    	; 0x700 <socket+0x1c6>
     5ae:	ee 20       	and	r14, r14
     5b0:	a9 f0       	breq	.+42     	; 0x5dc <socket+0xa2>
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	58 16       	cp	r5, r24
     5b6:	21 f0       	breq	.+8      	; 0x5c0 <socket+0x86>
     5b8:	22 e0       	ldi	r18, 0x02	; 2
     5ba:	52 16       	cp	r5, r18
     5bc:	29 f0       	breq	.+10     	; 0x5c8 <socket+0x8e>
     5be:	0e c0       	rjmp	.+28     	; 0x5dc <socket+0xa2>
     5c0:	8e 2d       	mov	r24, r14
     5c2:	81 72       	andi	r24, 0x21	; 33
     5c4:	59 f4       	brne	.+22     	; 0x5dc <socket+0xa2>
     5c6:	9e c0       	rjmp	.+316    	; 0x704 <socket+0x1ca>
     5c8:	e5 fe       	sbrs	r14, 5
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <socket+0x98>
     5cc:	ee 20       	and	r14, r14
     5ce:	0c f0       	brlt	.+2      	; 0x5d2 <socket+0x98>
     5d0:	9b c0       	rjmp	.+310    	; 0x708 <socket+0x1ce>
     5d2:	e4 fe       	sbrs	r14, 4
     5d4:	03 c0       	rjmp	.+6      	; 0x5dc <socket+0xa2>
     5d6:	ee 20       	and	r14, r14
     5d8:	0c f0       	brlt	.+2      	; 0x5dc <socket+0xa2>
     5da:	98 c0       	rjmp	.+304    	; 0x70c <socket+0x1d2>
     5dc:	8f 2d       	mov	r24, r15
     5de:	3d df       	rcall	.-390    	; 0x45a <close>
     5e0:	cf 2c       	mov	r12, r15
     5e2:	d1 2c       	mov	r13, r1
     5e4:	86 01       	movw	r16, r12
     5e6:	00 0f       	add	r16, r16
     5e8:	11 1f       	adc	r17, r17
     5ea:	00 0f       	add	r16, r16
     5ec:	11 1f       	adc	r17, r17
     5ee:	0f 5f       	subi	r16, 0xFF	; 255
     5f0:	1f 4f       	sbci	r17, 0xFF	; 255
     5f2:	00 0f       	add	r16, r16
     5f4:	11 1f       	adc	r17, r17
     5f6:	00 0f       	add	r16, r16
     5f8:	11 1f       	adc	r17, r17
     5fa:	00 0f       	add	r16, r16
     5fc:	11 1f       	adc	r17, r17
     5fe:	4e 2d       	mov	r20, r14
     600:	40 7f       	andi	r20, 0xF0	; 240
     602:	45 29       	or	r20, r5
     604:	b8 01       	movw	r22, r16
     606:	01 2e       	mov	r0, r17
     608:	00 0c       	add	r0, r0
     60a:	88 0b       	sbc	r24, r24
     60c:	99 0b       	sbc	r25, r25
     60e:	12 d4       	rcall	.+2084   	; 0xe34 <WIZCHIP_WRITE>
     610:	61 14       	cp	r6, r1
     612:	71 04       	cpc	r7, r1
     614:	91 f4       	brne	.+36     	; 0x63a <socket+0x100>
     616:	60 90 04 02 	lds	r6, 0x0204	; 0x800204 <sock_any_port>
     61a:	70 90 05 02 	lds	r7, 0x0205	; 0x800205 <sock_any_port+0x1>
     61e:	c3 01       	movw	r24, r6
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sock_any_port+0x1>
     626:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sock_any_port>
     62a:	40 96       	adiw	r24, 0x10	; 16
     62c:	31 f4       	brne	.+12     	; 0x63a <socket+0x100>
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 ec       	ldi	r25, 0xC0	; 192
     632:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sock_any_port+0x1>
     636:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sock_any_port>
     63a:	b8 01       	movw	r22, r16
     63c:	7c 5f       	subi	r23, 0xFC	; 252
     63e:	07 2e       	mov	r0, r23
     640:	00 0c       	add	r0, r0
     642:	88 0b       	sbc	r24, r24
     644:	99 0b       	sbc	r25, r25
     646:	47 2d       	mov	r20, r7
     648:	f5 d3       	rcall	.+2026   	; 0xe34 <WIZCHIP_WRITE>
     64a:	b8 01       	movw	r22, r16
     64c:	7b 5f       	subi	r23, 0xFB	; 251
     64e:	07 2e       	mov	r0, r23
     650:	00 0c       	add	r0, r0
     652:	88 0b       	sbc	r24, r24
     654:	99 0b       	sbc	r25, r25
     656:	46 2d       	mov	r20, r6
     658:	ed d3       	rcall	.+2010   	; 0xe34 <WIZCHIP_WRITE>
     65a:	28 01       	movw	r4, r16
     65c:	53 94       	inc	r5
     65e:	05 2c       	mov	r0, r5
     660:	00 0c       	add	r0, r0
     662:	66 08       	sbc	r6, r6
     664:	77 08       	sbc	r7, r7
     666:	41 e0       	ldi	r20, 0x01	; 1
     668:	c3 01       	movw	r24, r6
     66a:	b2 01       	movw	r22, r4
     66c:	e3 d3       	rcall	.+1990   	; 0xe34 <WIZCHIP_WRITE>
     66e:	c3 01       	movw	r24, r6
     670:	b2 01       	movw	r22, r4
     672:	79 d3       	rcall	.+1778   	; 0xd66 <WIZCHIP_READ>
     674:	81 11       	cpse	r24, r1
     676:	fb cf       	rjmp	.-10     	; 0x66e <socket+0x134>
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0f 2c       	mov	r0, r15
     67e:	02 c0       	rjmp	.+4      	; 0x684 <socket+0x14a>
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	0a 94       	dec	r0
     686:	e2 f7       	brpl	.-8      	; 0x680 <socket+0x146>
     688:	80 95       	com	r24
     68a:	90 95       	com	r25
     68c:	20 91 86 0d 	lds	r18, 0x0D86	; 0x800d86 <sock_io_mode>
     690:	30 91 87 0d 	lds	r19, 0x0D87	; 0x800d87 <sock_io_mode+0x1>
     694:	28 23       	and	r18, r24
     696:	39 23       	and	r19, r25
     698:	e0 fa       	bst	r14, 0
     69a:	aa 24       	eor	r10, r10
     69c:	a0 f8       	bld	r10, 0
     69e:	b1 2c       	mov	r11, r1
     6a0:	0f 2c       	mov	r0, r15
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <socket+0x16e>
     6a4:	aa 0c       	add	r10, r10
     6a6:	bb 1c       	adc	r11, r11
     6a8:	0a 94       	dec	r0
     6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <socket+0x16a>
     6ac:	a2 2a       	or	r10, r18
     6ae:	b3 2a       	or	r11, r19
     6b0:	b0 92 87 0d 	sts	0x0D87, r11	; 0x800d87 <sock_io_mode+0x1>
     6b4:	a0 92 86 0d 	sts	0x0D86, r10	; 0x800d86 <sock_io_mode>
     6b8:	20 91 84 0d 	lds	r18, 0x0D84	; 0x800d84 <sock_is_sending>
     6bc:	30 91 85 0d 	lds	r19, 0x0D85	; 0x800d85 <sock_is_sending+0x1>
     6c0:	82 23       	and	r24, r18
     6c2:	93 23       	and	r25, r19
     6c4:	90 93 85 0d 	sts	0x0D85, r25	; 0x800d85 <sock_is_sending+0x1>
     6c8:	80 93 84 0d 	sts	0x0D84, r24	; 0x800d84 <sock_is_sending>
     6cc:	f6 01       	movw	r30, r12
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	ec 58       	subi	r30, 0x8C	; 140
     6d4:	f2 4f       	sbci	r31, 0xF2	; 242
     6d6:	11 82       	std	Z+1, r1	; 0x01
     6d8:	10 82       	st	Z, r1
     6da:	f6 01       	movw	r30, r12
     6dc:	e4 59       	subi	r30, 0x94	; 148
     6de:	f2 4f       	sbci	r31, 0xF2	; 242
     6e0:	10 82       	st	Z, r1
     6e2:	b8 01       	movw	r22, r16
     6e4:	7d 5f       	subi	r23, 0xFD	; 253
     6e6:	07 2e       	mov	r0, r23
     6e8:	00 0c       	add	r0, r0
     6ea:	88 0b       	sbc	r24, r24
     6ec:	99 0b       	sbc	r25, r25
     6ee:	3b d3       	rcall	.+1654   	; 0xd66 <WIZCHIP_READ>
     6f0:	88 23       	and	r24, r24
     6f2:	b9 f3       	breq	.-18     	; 0x6e2 <socket+0x1a8>
     6f4:	8f 2d       	mov	r24, r15
     6f6:	0b c0       	rjmp	.+22     	; 0x70e <socket+0x1d4>
     6f8:	8f ef       	ldi	r24, 0xFF	; 255
     6fa:	09 c0       	rjmp	.+18     	; 0x70e <socket+0x1d4>
     6fc:	8b ef       	ldi	r24, 0xFB	; 251
     6fe:	07 c0       	rjmp	.+14     	; 0x70e <socket+0x1d4>
     700:	8a ef       	ldi	r24, 0xFA	; 250
     702:	05 c0       	rjmp	.+10     	; 0x70e <socket+0x1d4>
     704:	8a ef       	ldi	r24, 0xFA	; 250
     706:	03 c0       	rjmp	.+6      	; 0x70e <socket+0x1d4>
     708:	8a ef       	ldi	r24, 0xFA	; 250
     70a:	01 c0       	rjmp	.+2      	; 0x70e <socket+0x1d4>
     70c:	8a ef       	ldi	r24, 0xFA	; 250
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	7f 90       	pop	r7
     72c:	6f 90       	pop	r6
     72e:	5f 90       	pop	r5
     730:	4f 90       	pop	r4
     732:	08 95       	ret

00000734 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
     734:	8f 92       	push	r8
     736:	9f 92       	push	r9
     738:	af 92       	push	r10
     73a:	bf 92       	push	r11
     73c:	cf 92       	push	r12
     73e:	df 92       	push	r13
     740:	ef 92       	push	r14
     742:	ff 92       	push	r15
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
   CHECK_SOCKNUM();
     74a:	89 30       	cpi	r24, 0x09	; 9
     74c:	08 f0       	brcs	.+2      	; 0x750 <connect+0x1c>
     74e:	ac c0       	rjmp	.+344    	; 0x8a8 <connect+0x174>
     750:	6a 01       	movw	r12, r20
     752:	7b 01       	movw	r14, r22
     754:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     756:	c8 2f       	mov	r28, r24
     758:	d0 e0       	ldi	r29, 0x00	; 0
     75a:	cc 0f       	add	r28, r28
     75c:	dd 1f       	adc	r29, r29
     75e:	cc 0f       	add	r28, r28
     760:	dd 1f       	adc	r29, r29
     762:	21 96       	adiw	r28, 0x01	; 1
     764:	cc 0f       	add	r28, r28
     766:	dd 1f       	adc	r29, r29
     768:	cc 0f       	add	r28, r28
     76a:	dd 1f       	adc	r29, r29
     76c:	cc 0f       	add	r28, r28
     76e:	dd 1f       	adc	r29, r29
     770:	be 01       	movw	r22, r28
     772:	0d 2e       	mov	r0, r29
     774:	00 0c       	add	r0, r0
     776:	88 0b       	sbc	r24, r24
     778:	99 0b       	sbc	r25, r25
     77a:	f5 d2       	rcall	.+1514   	; 0xd66 <WIZCHIP_READ>
     77c:	8f 70       	andi	r24, 0x0F	; 15
     77e:	81 30       	cpi	r24, 0x01	; 1
     780:	09 f0       	breq	.+2      	; 0x784 <connect+0x50>
     782:	94 c0       	rjmp	.+296    	; 0x8ac <connect+0x178>
   CHECK_SOCKINIT();
     784:	4e 01       	movw	r8, r28
     786:	8d ef       	ldi	r24, 0xFD	; 253
     788:	98 1a       	sub	r9, r24
     78a:	09 2c       	mov	r0, r9
     78c:	00 0c       	add	r0, r0
     78e:	aa 08       	sbc	r10, r10
     790:	bb 08       	sbc	r11, r11
     792:	c5 01       	movw	r24, r10
     794:	b4 01       	movw	r22, r8
     796:	e7 d2       	rcall	.+1486   	; 0xd66 <WIZCHIP_READ>
     798:	83 31       	cpi	r24, 0x13	; 19
     79a:	09 f0       	breq	.+2      	; 0x79e <connect+0x6a>
     79c:	89 c0       	rjmp	.+274    	; 0x8b0 <connect+0x17c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
     79e:	f7 01       	movw	r30, r14
     7a0:	40 81       	ld	r20, Z
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	70 e0       	ldi	r23, 0x00	; 0
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
     7a8:	76 2f       	mov	r23, r22
     7aa:	65 2f       	mov	r22, r21
     7ac:	54 2f       	mov	r21, r20
     7ae:	44 27       	eor	r20, r20
     7b0:	81 81       	ldd	r24, Z+1	; 0x01
     7b2:	48 0f       	add	r20, r24
     7b4:	51 1d       	adc	r21, r1
     7b6:	61 1d       	adc	r22, r1
     7b8:	71 1d       	adc	r23, r1
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
     7ba:	76 2f       	mov	r23, r22
     7bc:	65 2f       	mov	r22, r21
     7be:	54 2f       	mov	r21, r20
     7c0:	44 27       	eor	r20, r20
     7c2:	82 81       	ldd	r24, Z+2	; 0x02
     7c4:	48 0f       	add	r20, r24
     7c6:	51 1d       	adc	r21, r1
     7c8:	61 1d       	adc	r22, r1
     7ca:	71 1d       	adc	r23, r1
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
     7cc:	76 2f       	mov	r23, r22
     7ce:	65 2f       	mov	r22, r21
     7d0:	54 2f       	mov	r21, r20
     7d2:	44 27       	eor	r20, r20
     7d4:	83 81       	ldd	r24, Z+3	; 0x03
     7d6:	48 0f       	add	r20, r24
     7d8:	51 1d       	adc	r21, r1
     7da:	61 1d       	adc	r22, r1
     7dc:	71 1d       	adc	r23, r1
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
     7de:	41 50       	subi	r20, 0x01	; 1
     7e0:	51 09       	sbc	r21, r1
     7e2:	61 09       	sbc	r22, r1
     7e4:	71 09       	sbc	r23, r1
     7e6:	4e 3f       	cpi	r20, 0xFE	; 254
     7e8:	5f 4f       	sbci	r21, 0xFF	; 255
     7ea:	6f 4f       	sbci	r22, 0xFF	; 255
     7ec:	7f 4f       	sbci	r23, 0xFF	; 255
     7ee:	08 f0       	brcs	.+2      	; 0x7f2 <connect+0xbe>
     7f0:	61 c0       	rjmp	.+194    	; 0x8b4 <connect+0x180>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
     7f2:	c1 14       	cp	r12, r1
     7f4:	d1 04       	cpc	r13, r1
     7f6:	09 f4       	brne	.+2      	; 0x7fa <connect+0xc6>
     7f8:	5f c0       	rjmp	.+190    	; 0x8b8 <connect+0x184>
	setSn_DIPR(sn,addr);
     7fa:	be 01       	movw	r22, r28
     7fc:	74 5f       	subi	r23, 0xF4	; 244
     7fe:	07 2e       	mov	r0, r23
     800:	00 0c       	add	r0, r0
     802:	88 0b       	sbc	r24, r24
     804:	99 0b       	sbc	r25, r25
     806:	24 e0       	ldi	r18, 0x04	; 4
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	a7 01       	movw	r20, r14
     80c:	07 d4       	rcall	.+2062   	; 0x101c <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
     80e:	be 01       	movw	r22, r28
     810:	70 5f       	subi	r23, 0xF0	; 240
     812:	07 2e       	mov	r0, r23
     814:	00 0c       	add	r0, r0
     816:	88 0b       	sbc	r24, r24
     818:	99 0b       	sbc	r25, r25
     81a:	4d 2d       	mov	r20, r13
     81c:	0b d3       	rcall	.+1558   	; 0xe34 <WIZCHIP_WRITE>
     81e:	be 01       	movw	r22, r28
     820:	7f 5e       	subi	r23, 0xEF	; 239
     822:	07 2e       	mov	r0, r23
     824:	00 0c       	add	r0, r0
     826:	88 0b       	sbc	r24, r24
     828:	99 0b       	sbc	r25, r25
     82a:	4c 2d       	mov	r20, r12
     82c:	03 d3       	rcall	.+1542   	; 0xe34 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
     82e:	6e 01       	movw	r12, r28
     830:	d3 94       	inc	r13
     832:	0d 2c       	mov	r0, r13
     834:	00 0c       	add	r0, r0
     836:	ee 08       	sbc	r14, r14
     838:	ff 08       	sbc	r15, r15
     83a:	44 e0       	ldi	r20, 0x04	; 4
     83c:	c7 01       	movw	r24, r14
     83e:	b6 01       	movw	r22, r12
   while(getSn_CR(sn));
     840:	f9 d2       	rcall	.+1522   	; 0xe34 <WIZCHIP_WRITE>
     842:	c7 01       	movw	r24, r14
     844:	b6 01       	movw	r22, r12
     846:	8f d2       	rcall	.+1310   	; 0xd66 <WIZCHIP_READ>
     848:	81 11       	cpse	r24, r1
     84a:	fb cf       	rjmp	.-10     	; 0x842 <connect+0x10e>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	02 c0       	rjmp	.+4      	; 0x856 <connect+0x122>
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	1a 95       	dec	r17
     858:	e2 f7       	brpl	.-8      	; 0x852 <connect+0x11e>
     85a:	20 91 86 0d 	lds	r18, 0x0D86	; 0x800d86 <sock_io_mode>
     85e:	30 91 87 0d 	lds	r19, 0x0D87	; 0x800d87 <sock_io_mode+0x1>
     862:	82 23       	and	r24, r18
     864:	93 23       	and	r25, r19
     866:	89 2b       	or	r24, r25
     868:	c1 f0       	breq	.+48     	; 0x89a <connect+0x166>
     86a:	28 c0       	rjmp	.+80     	; 0x8bc <connect+0x188>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
     86c:	6e 01       	movw	r12, r28
     86e:	ee ef       	ldi	r30, 0xFE	; 254
     870:	de 1a       	sub	r13, r30
     872:	0d 2c       	mov	r0, r13
     874:	00 0c       	add	r0, r0
     876:	ee 08       	sbc	r14, r14
     878:	ff 08       	sbc	r15, r15
     87a:	c7 01       	movw	r24, r14
     87c:	b6 01       	movw	r22, r12
     87e:	73 d2       	rcall	.+1254   	; 0xd66 <WIZCHIP_READ>
     880:	83 ff       	sbrs	r24, 3
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
     882:	06 c0       	rjmp	.+12     	; 0x890 <connect+0x15c>
     884:	48 e0       	ldi	r20, 0x08	; 8
     886:	c7 01       	movw	r24, r14
     888:	b6 01       	movw	r22, r12
            return SOCKERR_TIMEOUT;
     88a:	d4 d2       	rcall	.+1448   	; 0xe34 <WIZCHIP_WRITE>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
     88c:	83 ef       	ldi	r24, 0xF3	; 243
     88e:	19 c0       	rjmp	.+50     	; 0x8c2 <connect+0x18e>
     890:	c5 01       	movw	r24, r10
     892:	b4 01       	movw	r22, r8
     894:	68 d2       	rcall	.+1232   	; 0xd66 <WIZCHIP_READ>
     896:	88 23       	and	r24, r24
	setSn_DIPR(sn,addr);
	setSn_DPORT(sn,port);
	setSn_CR(sn,Sn_CR_CONNECT);
   while(getSn_CR(sn));
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
     898:	99 f0       	breq	.+38     	; 0x8c0 <connect+0x18c>
     89a:	c5 01       	movw	r24, r10
     89c:	b4 01       	movw	r22, r8
     89e:	63 d2       	rcall	.+1222   	; 0xd66 <WIZCHIP_READ>
     8a0:	87 31       	cpi	r24, 0x17	; 23
     8a2:	21 f7       	brne	.-56     	; 0x86c <connect+0x138>
		{
			return SOCKERR_SOCKCLOSED;
		}
	}
   
   return SOCK_OK;
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	0d c0       	rjmp	.+26     	; 0x8c2 <connect+0x18e>
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
   CHECK_SOCKNUM();
     8a8:	8f ef       	ldi	r24, 0xFF	; 255
     8aa:	0b c0       	rjmp	.+22     	; 0x8c2 <connect+0x18e>
   CHECK_SOCKMODE(Sn_MR_TCP);
     8ac:	8b ef       	ldi	r24, 0xFB	; 251
     8ae:	09 c0       	rjmp	.+18     	; 0x8c2 <connect+0x18e>
   CHECK_SOCKINIT();
     8b0:	8d ef       	ldi	r24, 0xFD	; 253
     8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <connect+0x18e>
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
     8b4:	84 ef       	ldi	r24, 0xF4	; 244
     8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <connect+0x18e>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
     8b8:	85 ef       	ldi	r24, 0xF5	; 245
     8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <connect+0x18e>
	setSn_DIPR(sn,addr);
	setSn_DPORT(sn,port);
	setSn_CR(sn,Sn_CR_CONNECT);
   while(getSn_CR(sn));
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <connect+0x18e>
            return SOCKERR_TIMEOUT;
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
		{
			return SOCKERR_SOCKCLOSED;
     8c0:	8c ef       	ldi	r24, 0xFC	; 252
		}
	}
   
   return SOCK_OK;
}
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	bf 90       	pop	r11
     8d2:	af 90       	pop	r10
     8d4:	9f 90       	pop	r9
     8d6:	8f 90       	pop	r8
     8d8:	08 95       	ret

000008da <disconnect>:

int8_t disconnect(uint8_t sn)
{
     8da:	cf 92       	push	r12
     8dc:	df 92       	push	r13
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
   CHECK_SOCKNUM();
     8e8:	89 30       	cpi	r24, 0x09	; 9
     8ea:	08 f0       	brcs	.+2      	; 0x8ee <disconnect+0x14>
     8ec:	5d c0       	rjmp	.+186    	; 0x9a8 <disconnect+0xce>
     8ee:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     8f0:	c8 2f       	mov	r28, r24
     8f2:	d0 e0       	ldi	r29, 0x00	; 0
     8f4:	cc 0f       	add	r28, r28
     8f6:	dd 1f       	adc	r29, r29
     8f8:	cc 0f       	add	r28, r28
     8fa:	dd 1f       	adc	r29, r29
     8fc:	21 96       	adiw	r28, 0x01	; 1
     8fe:	cc 0f       	add	r28, r28
     900:	dd 1f       	adc	r29, r29
     902:	cc 0f       	add	r28, r28
     904:	dd 1f       	adc	r29, r29
     906:	cc 0f       	add	r28, r28
     908:	dd 1f       	adc	r29, r29
     90a:	be 01       	movw	r22, r28
     90c:	0d 2e       	mov	r0, r29
     90e:	00 0c       	add	r0, r0
     910:	88 0b       	sbc	r24, r24
     912:	99 0b       	sbc	r25, r25
     914:	28 d2       	rcall	.+1104   	; 0xd66 <WIZCHIP_READ>
     916:	8f 70       	andi	r24, 0x0F	; 15
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	09 f0       	breq	.+2      	; 0x91e <disconnect+0x44>
     91c:	47 c0       	rjmp	.+142    	; 0x9ac <disconnect+0xd2>
	setSn_CR(sn,Sn_CR_DISCON);
     91e:	6e 01       	movw	r12, r28
     920:	d3 94       	inc	r13
     922:	0d 2c       	mov	r0, r13
     924:	00 0c       	add	r0, r0
     926:	ee 08       	sbc	r14, r14
     928:	ff 08       	sbc	r15, r15
     92a:	48 e0       	ldi	r20, 0x08	; 8
     92c:	c7 01       	movw	r24, r14
     92e:	b6 01       	movw	r22, r12
     930:	81 d2       	rcall	.+1282   	; 0xe34 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
     932:	c7 01       	movw	r24, r14
     934:	b6 01       	movw	r22, r12
     936:	17 d2       	rcall	.+1070   	; 0xd66 <WIZCHIP_READ>
     938:	81 11       	cpse	r24, r1
     93a:	fb cf       	rjmp	.-10     	; 0x932 <disconnect+0x58>
	sock_is_sending &= ~(1<<sn);
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	01 2e       	mov	r0, r17
     942:	02 c0       	rjmp	.+4      	; 0x948 <disconnect+0x6e>
     944:	88 0f       	add	r24, r24
     946:	99 1f       	adc	r25, r25
     948:	0a 94       	dec	r0
     94a:	e2 f7       	brpl	.-8      	; 0x944 <disconnect+0x6a>
     94c:	9c 01       	movw	r18, r24
     94e:	20 95       	com	r18
     950:	30 95       	com	r19
     952:	40 91 84 0d 	lds	r20, 0x0D84	; 0x800d84 <sock_is_sending>
     956:	50 91 85 0d 	lds	r21, 0x0D85	; 0x800d85 <sock_is_sending+0x1>
     95a:	24 23       	and	r18, r20
     95c:	35 23       	and	r19, r21
     95e:	30 93 85 0d 	sts	0x0D85, r19	; 0x800d85 <sock_is_sending+0x1>
     962:	20 93 84 0d 	sts	0x0D84, r18	; 0x800d84 <sock_is_sending>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     966:	20 91 86 0d 	lds	r18, 0x0D86	; 0x800d86 <sock_io_mode>
     96a:	30 91 87 0d 	lds	r19, 0x0D87	; 0x800d87 <sock_io_mode+0x1>
     96e:	82 23       	and	r24, r18
     970:	93 23       	and	r25, r19
     972:	89 2b       	or	r24, r25
     974:	71 f0       	breq	.+28     	; 0x992 <disconnect+0xb8>
     976:	1c c0       	rjmp	.+56     	; 0x9b0 <disconnect+0xd6>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
     978:	be 01       	movw	r22, r28
     97a:	7e 5f       	subi	r23, 0xFE	; 254
     97c:	07 2e       	mov	r0, r23
     97e:	00 0c       	add	r0, r0
     980:	88 0b       	sbc	r24, r24
     982:	99 0b       	sbc	r25, r25
     984:	f0 d1       	rcall	.+992    	; 0xd66 <WIZCHIP_READ>
     986:	83 ff       	sbrs	r24, 3
	   {
	      close(sn);
     988:	04 c0       	rjmp	.+8      	; 0x992 <disconnect+0xb8>
     98a:	81 2f       	mov	r24, r17
     98c:	66 dd       	rcall	.-1332   	; 0x45a <close>
	      return SOCKERR_TIMEOUT;
     98e:	83 ef       	ldi	r24, 0xF3	; 243
     990:	10 c0       	rjmp	.+32     	; 0x9b2 <disconnect+0xd8>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
	while(getSn_SR(sn) != SOCK_CLOSED)
     992:	be 01       	movw	r22, r28
     994:	7d 5f       	subi	r23, 0xFD	; 253
     996:	07 2e       	mov	r0, r23
     998:	00 0c       	add	r0, r0
     99a:	88 0b       	sbc	r24, r24
     99c:	99 0b       	sbc	r25, r25
     99e:	e3 d1       	rcall	.+966    	; 0xd66 <WIZCHIP_READ>
     9a0:	81 11       	cpse	r24, r1
     9a2:	ea cf       	rjmp	.-44     	; 0x978 <disconnect+0x9e>
	   {
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <disconnect+0xd8>
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
     9a8:	8f ef       	ldi	r24, 0xFF	; 255
     9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <disconnect+0xd8>
   CHECK_SOCKMODE(Sn_MR_TCP);
     9ac:	8b ef       	ldi	r24, 0xFB	; 251
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <disconnect+0xd8>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     9b0:	80 e0       	ldi	r24, 0x00	; 0
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	df 90       	pop	r13
     9be:	cf 90       	pop	r12
     9c0:	08 95       	ret

000009c2 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
     9c2:	2f 92       	push	r2
     9c4:	3f 92       	push	r3
     9c6:	4f 92       	push	r4
     9c8:	5f 92       	push	r5
     9ca:	6f 92       	push	r6
     9cc:	7f 92       	push	r7
     9ce:	8f 92       	push	r8
     9d0:	9f 92       	push	r9
     9d2:	af 92       	push	r10
     9d4:	bf 92       	push	r11
     9d6:	cf 92       	push	r12
     9d8:	df 92       	push	r13
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	00 d0       	rcall	.+0      	; 0x9e8 <send+0x26>
     9e8:	00 d0       	rcall	.+0      	; 0x9ea <send+0x28>
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     9ee:	89 30       	cpi	r24, 0x09	; 9
     9f0:	08 f0       	brcs	.+2      	; 0x9f4 <send+0x32>
     9f2:	c7 c0       	rjmp	.+398    	; 0xb82 <send+0x1c0>
     9f4:	5e 83       	std	Y+6, r21	; 0x06
     9f6:	4d 83       	std	Y+5, r20	; 0x05
     9f8:	1b 01       	movw	r2, r22
     9fa:	f8 2e       	mov	r15, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     9fc:	c8 2e       	mov	r12, r24
     9fe:	d1 2c       	mov	r13, r1
     a00:	cc 0c       	add	r12, r12
     a02:	dd 1c       	adc	r13, r13
     a04:	cc 0c       	add	r12, r12
     a06:	dd 1c       	adc	r13, r13
     a08:	2f ef       	ldi	r18, 0xFF	; 255
     a0a:	c2 1a       	sub	r12, r18
     a0c:	d2 0a       	sbc	r13, r18
     a0e:	cc 0c       	add	r12, r12
     a10:	dd 1c       	adc	r13, r13
     a12:	cc 0c       	add	r12, r12
     a14:	dd 1c       	adc	r13, r13
     a16:	cc 0c       	add	r12, r12
     a18:	dd 1c       	adc	r13, r13
     a1a:	b6 01       	movw	r22, r12
     a1c:	0d 2c       	mov	r0, r13
     a1e:	00 0c       	add	r0, r0
     a20:	88 0b       	sbc	r24, r24
     a22:	99 0b       	sbc	r25, r25
     a24:	a0 d1       	rcall	.+832    	; 0xd66 <WIZCHIP_READ>
     a26:	8f 70       	andi	r24, 0x0F	; 15
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	09 f0       	breq	.+2      	; 0xa2e <send+0x6c>
     a2c:	ae c0       	rjmp	.+348    	; 0xb8a <send+0x1c8>
   CHECK_SOCKDATA();
     a2e:	4d 81       	ldd	r20, Y+5	; 0x05
     a30:	5e 81       	ldd	r21, Y+6	; 0x06
     a32:	45 2b       	or	r20, r21
     a34:	09 f4       	brne	.+2      	; 0xa38 <send+0x76>
     a36:	ae c0       	rjmp	.+348    	; 0xb94 <send+0x1d2>
   tmp = getSn_SR(sn);
     a38:	26 01       	movw	r4, r12
     a3a:	5d ef       	ldi	r21, 0xFD	; 253
     a3c:	55 1a       	sub	r5, r21
     a3e:	05 2c       	mov	r0, r5
     a40:	00 0c       	add	r0, r0
     a42:	66 08       	sbc	r6, r6
     a44:	77 08       	sbc	r7, r7
     a46:	c3 01       	movw	r24, r6
     a48:	b2 01       	movw	r22, r4
     a4a:	8d d1       	rcall	.+794    	; 0xd66 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     a4c:	87 31       	cpi	r24, 0x17	; 23
     a4e:	19 f0       	breq	.+6      	; 0xa56 <send+0x94>
     a50:	8c 31       	cpi	r24, 0x1C	; 28
     a52:	09 f0       	breq	.+2      	; 0xa56 <send+0x94>
     a54:	a4 c0       	rjmp	.+328    	; 0xb9e <send+0x1dc>
   if( sock_is_sending & (1<<sn) )
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	4c 01       	movw	r8, r24
     a5c:	0f 2c       	mov	r0, r15
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <send+0xa2>
     a60:	88 0c       	add	r8, r8
     a62:	99 1c       	adc	r9, r9
     a64:	0a 94       	dec	r0
     a66:	e2 f7       	brpl	.-8      	; 0xa60 <send+0x9e>
     a68:	54 01       	movw	r10, r8
     a6a:	80 91 84 0d 	lds	r24, 0x0D84	; 0x800d84 <sock_is_sending>
     a6e:	90 91 85 0d 	lds	r25, 0x0D85	; 0x800d85 <sock_is_sending+0x1>
     a72:	88 21       	and	r24, r8
     a74:	99 21       	and	r25, r9
     a76:	89 2b       	or	r24, r25
     a78:	61 f1       	breq	.+88     	; 0xad2 <send+0x110>
   {
      tmp = getSn_IR(sn);
     a7a:	c6 01       	movw	r24, r12
     a7c:	9e 5f       	subi	r25, 0xFE	; 254
     a7e:	9c 01       	movw	r18, r24
     a80:	99 0f       	add	r25, r25
     a82:	44 0b       	sbc	r20, r20
     a84:	55 0b       	sbc	r21, r21
     a86:	29 83       	std	Y+1, r18	; 0x01
     a88:	3a 83       	std	Y+2, r19	; 0x02
     a8a:	4b 83       	std	Y+3, r20	; 0x03
     a8c:	5c 83       	std	Y+4, r21	; 0x04
     a8e:	ca 01       	movw	r24, r20
     a90:	b9 01       	movw	r22, r18
     a92:	69 d1       	rcall	.+722    	; 0xd66 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
     a94:	84 ff       	sbrs	r24, 4
     a96:	14 c0       	rjmp	.+40     	; 0xac0 <send+0xfe>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
     a98:	40 e1       	ldi	r20, 0x10	; 16
     a9a:	69 81       	ldd	r22, Y+1	; 0x01
     a9c:	7a 81       	ldd	r23, Y+2	; 0x02
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	9c 81       	ldd	r25, Y+4	; 0x04
     aa2:	c8 d1       	rcall	.+912    	; 0xe34 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
     aa4:	20 91 84 0d 	lds	r18, 0x0D84	; 0x800d84 <sock_is_sending>
     aa8:	30 91 85 0d 	lds	r19, 0x0D85	; 0x800d85 <sock_is_sending+0x1>
     aac:	c4 01       	movw	r24, r8
     aae:	80 95       	com	r24
     ab0:	90 95       	com	r25
     ab2:	82 23       	and	r24, r18
     ab4:	93 23       	and	r25, r19
     ab6:	90 93 85 0d 	sts	0x0D85, r25	; 0x800d85 <sock_is_sending+0x1>
     aba:	80 93 84 0d 	sts	0x0D84, r24	; 0x800d84 <sock_is_sending>
      }
      else if(tmp & Sn_IR_TIMEOUT)
     abe:	09 c0       	rjmp	.+18     	; 0xad2 <send+0x110>
     ac0:	83 ff       	sbrs	r24, 3
      {
         close(sn);
     ac2:	72 c0       	rjmp	.+228    	; 0xba8 <send+0x1e6>
     ac4:	8f 2d       	mov	r24, r15
     ac6:	c9 dc       	rcall	.-1646   	; 0x45a <close>
         return SOCKERR_TIMEOUT;
     ac8:	63 ef       	ldi	r22, 0xF3	; 243
     aca:	7f ef       	ldi	r23, 0xFF	; 255
     acc:	8f ef       	ldi	r24, 0xFF	; 255
     ace:	9f ef       	ldi	r25, 0xFF	; 255
     ad0:	72 c0       	rjmp	.+228    	; 0xbb6 <send+0x1f4>
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
     ad2:	b6 01       	movw	r22, r12
     ad4:	71 5e       	subi	r23, 0xE1	; 225
     ad6:	07 2e       	mov	r0, r23
     ad8:	00 0c       	add	r0, r0
     ada:	88 0b       	sbc	r24, r24
     adc:	99 0b       	sbc	r25, r25
     ade:	43 d1       	rcall	.+646    	; 0xd66 <WIZCHIP_READ>
     ae0:	08 2f       	mov	r16, r24
     ae2:	10 e0       	ldi	r17, 0x00	; 0
     ae4:	10 2f       	mov	r17, r16
     ae6:	00 27       	eor	r16, r16
     ae8:	11 0f       	add	r17, r17
     aea:	11 0f       	add	r17, r17
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
     aec:	4d 81       	ldd	r20, Y+5	; 0x05
     aee:	5e 81       	ldd	r21, Y+6	; 0x06
     af0:	04 17       	cp	r16, r20
     af2:	15 07       	cpc	r17, r21
     af4:	08 f0       	brcs	.+2      	; 0xaf8 <send+0x136>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
     af6:	8a 01       	movw	r16, r20
     af8:	8f 2d       	mov	r24, r15
     afa:	17 d3       	rcall	.+1582   	; 0x112a <getSn_TX_FSR>
     afc:	9a 83       	std	Y+2, r25	; 0x02
      tmp = getSn_SR(sn);
     afe:	89 83       	std	Y+1, r24	; 0x01
     b00:	c3 01       	movw	r24, r6
     b02:	b2 01       	movw	r22, r4
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
     b04:	30 d1       	rcall	.+608    	; 0xd66 <WIZCHIP_READ>
     b06:	87 31       	cpi	r24, 0x17	; 23
     b08:	49 f0       	breq	.+18     	; 0xb1c <send+0x15a>
     b0a:	8c 31       	cpi	r24, 0x1C	; 28
      {
         close(sn);
     b0c:	39 f0       	breq	.+14     	; 0xb1c <send+0x15a>
     b0e:	8f 2d       	mov	r24, r15
     b10:	a4 dc       	rcall	.-1720   	; 0x45a <close>
         return SOCKERR_SOCKSTATUS;
     b12:	69 ef       	ldi	r22, 0xF9	; 249
     b14:	7f ef       	ldi	r23, 0xFF	; 255
     b16:	8f ef       	ldi	r24, 0xFF	; 255
     b18:	9f ef       	ldi	r25, 0xFF	; 255
     b1a:	4d c0       	rjmp	.+154    	; 0xbb6 <send+0x1f4>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     b1c:	80 91 86 0d 	lds	r24, 0x0D86	; 0x800d86 <sock_io_mode>
     b20:	90 91 87 0d 	lds	r25, 0x0D87	; 0x800d87 <sock_io_mode+0x1>
     b24:	8a 21       	and	r24, r10
     b26:	9b 21       	and	r25, r11
     b28:	89 2b       	or	r24, r25
     b2a:	31 f0       	breq	.+12     	; 0xb38 <send+0x176>
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	9a 81       	ldd	r25, Y+2	; 0x02
     b30:	80 17       	cp	r24, r16
     b32:	91 07       	cpc	r25, r17
     b34:	08 f4       	brcc	.+2      	; 0xb38 <send+0x176>
      if(len <= freesize) break;
     b36:	3c c0       	rjmp	.+120    	; 0xbb0 <send+0x1ee>
     b38:	29 81       	ldd	r18, Y+1	; 0x01
     b3a:	3a 81       	ldd	r19, Y+2	; 0x02
     b3c:	20 17       	cp	r18, r16
     b3e:	31 07       	cpc	r19, r17
   }
   wiz_send_data(sn, buf, len);
     b40:	d8 f2       	brcs	.-74     	; 0xaf8 <send+0x136>
     b42:	a8 01       	movw	r20, r16
     b44:	b1 01       	movw	r22, r2
     b46:	8f 2d       	mov	r24, r15

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
     b48:	a0 d3       	rcall	.+1856   	; 0x128a <wiz_send_data>
     b4a:	d3 94       	inc	r13
     b4c:	0d 2c       	mov	r0, r13
     b4e:	00 0c       	add	r0, r0
     b50:	ee 08       	sbc	r14, r14
     b52:	ff 08       	sbc	r15, r15
     b54:	40 e2       	ldi	r20, 0x20	; 32
     b56:	c7 01       	movw	r24, r14
     b58:	b6 01       	movw	r22, r12
   /* wait to process the command... */
   while(getSn_CR(sn));
     b5a:	6c d1       	rcall	.+728    	; 0xe34 <WIZCHIP_WRITE>
     b5c:	c7 01       	movw	r24, r14
     b5e:	b6 01       	movw	r22, r12
     b60:	02 d1       	rcall	.+516    	; 0xd66 <WIZCHIP_READ>
     b62:	81 11       	cpse	r24, r1
     b64:	fb cf       	rjmp	.-10     	; 0xb5c <send+0x19a>
   sock_is_sending |= (1 << sn);
     b66:	80 91 84 0d 	lds	r24, 0x0D84	; 0x800d84 <sock_is_sending>
     b6a:	90 91 85 0d 	lds	r25, 0x0D85	; 0x800d85 <sock_is_sending+0x1>
     b6e:	88 2a       	or	r8, r24
     b70:	99 2a       	or	r9, r25
     b72:	90 92 85 0d 	sts	0x0D85, r9	; 0x800d85 <sock_is_sending+0x1>
     b76:	80 92 84 0d 	sts	0x0D84, r8	; 0x800d84 <sock_is_sending>
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     b7a:	b8 01       	movw	r22, r16
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	1a c0       	rjmp	.+52     	; 0xbb6 <send+0x1f4>
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     b82:	6f ef       	ldi	r22, 0xFF	; 255
     b84:	7f ef       	ldi	r23, 0xFF	; 255
     b86:	cb 01       	movw	r24, r22
     b88:	16 c0       	rjmp	.+44     	; 0xbb6 <send+0x1f4>
   CHECK_SOCKMODE(Sn_MR_TCP);
     b8a:	6b ef       	ldi	r22, 0xFB	; 251
     b8c:	7f ef       	ldi	r23, 0xFF	; 255
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	9f ef       	ldi	r25, 0xFF	; 255
     b92:	11 c0       	rjmp	.+34     	; 0xbb6 <send+0x1f4>
   CHECK_SOCKDATA();
     b94:	62 ef       	ldi	r22, 0xF2	; 242
     b96:	7f ef       	ldi	r23, 0xFF	; 255
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	9f ef       	ldi	r25, 0xFF	; 255
     b9c:	0c c0       	rjmp	.+24     	; 0xbb6 <send+0x1f4>
   tmp = getSn_SR(sn);
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     b9e:	69 ef       	ldi	r22, 0xF9	; 249
     ba0:	7f ef       	ldi	r23, 0xFF	; 255
     ba2:	8f ef       	ldi	r24, 0xFF	; 255
     ba4:	9f ef       	ldi	r25, 0xFF	; 255
     ba6:	07 c0       	rjmp	.+14     	; 0xbb6 <send+0x1f4>
      else if(tmp & Sn_IR_TIMEOUT)
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	cb 01       	movw	r24, r22
     bae:	03 c0       	rjmp	.+6      	; 0xbb6 <send+0x1f4>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	cb 01       	movw	r24, r22
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     bb6:	26 96       	adiw	r28, 0x06	; 6
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	df 90       	pop	r13
     bd0:	cf 90       	pop	r12
     bd2:	bf 90       	pop	r11
     bd4:	af 90       	pop	r10
     bd6:	9f 90       	pop	r9
     bd8:	8f 90       	pop	r8
     bda:	7f 90       	pop	r7
     bdc:	6f 90       	pop	r6
     bde:	5f 90       	pop	r5
     be0:	4f 90       	pop	r4
     be2:	3f 90       	pop	r3
     be4:	2f 90       	pop	r2
     be6:	08 95       	ret

00000be8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
     be8:	7f 92       	push	r7
     bea:	8f 92       	push	r8
     bec:	9f 92       	push	r9
     bee:	af 92       	push	r10
     bf0:	bf 92       	push	r11
     bf2:	cf 92       	push	r12
     bf4:	df 92       	push	r13
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
     c02:	89 30       	cpi	r24, 0x09	; 9
     c04:	08 f0       	brcs	.+2      	; 0xc08 <recv+0x20>
     c06:	90 c0       	rjmp	.+288    	; 0xd28 <recv+0x140>
     c08:	ea 01       	movw	r28, r20
     c0a:	4b 01       	movw	r8, r22
     c0c:	78 2e       	mov	r7, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     c0e:	c8 2e       	mov	r12, r24
     c10:	d1 2c       	mov	r13, r1
     c12:	86 01       	movw	r16, r12
     c14:	00 0f       	add	r16, r16
     c16:	11 1f       	adc	r17, r17
     c18:	00 0f       	add	r16, r16
     c1a:	11 1f       	adc	r17, r17
     c1c:	0f 5f       	subi	r16, 0xFF	; 255
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
     c20:	00 0f       	add	r16, r16
     c22:	11 1f       	adc	r17, r17
     c24:	00 0f       	add	r16, r16
     c26:	11 1f       	adc	r17, r17
     c28:	00 0f       	add	r16, r16
     c2a:	11 1f       	adc	r17, r17
     c2c:	b8 01       	movw	r22, r16
     c2e:	01 2e       	mov	r0, r17
     c30:	00 0c       	add	r0, r0
     c32:	88 0b       	sbc	r24, r24
     c34:	99 0b       	sbc	r25, r25
     c36:	97 d0       	rcall	.+302    	; 0xd66 <WIZCHIP_READ>
     c38:	8f 70       	andi	r24, 0x0F	; 15
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	09 f0       	breq	.+2      	; 0xc40 <recv+0x58>
     c3e:	78 c0       	rjmp	.+240    	; 0xd30 <recv+0x148>
   CHECK_SOCKDATA();
     c40:	20 97       	sbiw	r28, 0x00	; 0
     c42:	09 f4       	brne	.+2      	; 0xc46 <recv+0x5e>
     c44:	7a c0       	rjmp	.+244    	; 0xd3a <recv+0x152>
   
   recvsize = getSn_RxMAX(sn);
     c46:	b8 01       	movw	r22, r16
     c48:	72 5e       	subi	r23, 0xE2	; 226
     c4a:	07 2e       	mov	r0, r23
     c4c:	00 0c       	add	r0, r0
     c4e:	88 0b       	sbc	r24, r24
     c50:	99 0b       	sbc	r25, r25
     c52:	89 d0       	rcall	.+274    	; 0xd66 <WIZCHIP_READ>
     c54:	a8 2e       	mov	r10, r24
     c56:	b1 2c       	mov	r11, r1
     c58:	ba 2c       	mov	r11, r10
     c5a:	aa 24       	eor	r10, r10
     c5c:	bb 0c       	add	r11, r11
     c5e:	bb 0c       	add	r11, r11
   if(recvsize < len) len = recvsize;
     c60:	ac 16       	cp	r10, r28
     c62:	bd 06       	cpc	r11, r29
     c64:	08 f0       	brcs	.+2      	; 0xc68 <recv+0x80>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
     c66:	5e 01       	movw	r10, r28
     c68:	87 2d       	mov	r24, r7
     c6a:	b7 d2       	rcall	.+1390   	; 0x11da <getSn_RX_RSR>
     c6c:	ec 01       	movw	r28, r24
         tmp = getSn_SR(sn);
     c6e:	b8 01       	movw	r22, r16
     c70:	7d 5f       	subi	r23, 0xFD	; 253
     c72:	07 2e       	mov	r0, r23
     c74:	00 0c       	add	r0, r0
     c76:	88 0b       	sbc	r24, r24
     c78:	99 0b       	sbc	r25, r25
     c7a:	75 d0       	rcall	.+234    	; 0xd66 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
     c7c:	87 31       	cpi	r24, 0x17	; 23
     c7e:	21 f1       	breq	.+72     	; 0xcc8 <recv+0xe0>
         {
            if(tmp == SOCK_CLOSE_WAIT)
     c80:	8c 31       	cpi	r24, 0x1C	; 28
            {
               if(recvsize != 0) break;
     c82:	d9 f4       	brne	.+54     	; 0xcba <recv+0xd2>
     c84:	20 97       	sbiw	r28, 0x00	; 0
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
     c86:	a9 f5       	brne	.+106    	; 0xcf2 <recv+0x10a>
     c88:	87 2d       	mov	r24, r7
     c8a:	4f d2       	rcall	.+1182   	; 0x112a <getSn_TX_FSR>
     c8c:	7c 01       	movw	r14, r24
     c8e:	b8 01       	movw	r22, r16
     c90:	71 5e       	subi	r23, 0xE1	; 225
     c92:	07 2e       	mov	r0, r23
     c94:	00 0c       	add	r0, r0
     c96:	88 0b       	sbc	r24, r24
     c98:	99 0b       	sbc	r25, r25
     c9a:	65 d0       	rcall	.+202    	; 0xd66 <WIZCHIP_READ>
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	98 2f       	mov	r25, r24
     ca0:	88 27       	eor	r24, r24
     ca2:	99 0f       	add	r25, r25
     ca4:	99 0f       	add	r25, r25
     ca6:	e8 16       	cp	r14, r24
     ca8:	f9 06       	cpc	r15, r25
               {
                  close(sn);
     caa:	71 f4       	brne	.+28     	; 0xcc8 <recv+0xe0>
     cac:	87 2d       	mov	r24, r7
                  return SOCKERR_SOCKSTATUS;
     cae:	d5 db       	rcall	.-2134   	; 0x45a <close>
     cb0:	69 ef       	ldi	r22, 0xF9	; 249
     cb2:	7f ef       	ldi	r23, 0xFF	; 255
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	9f ef       	ldi	r25, 0xFF	; 255
               }
            }
            else
            {
               close(sn);
     cb8:	48 c0       	rjmp	.+144    	; 0xd4a <recv+0x162>
     cba:	87 2d       	mov	r24, r7
     cbc:	ce db       	rcall	.-2148   	; 0x45a <close>
               return SOCKERR_SOCKSTATUS;
     cbe:	69 ef       	ldi	r22, 0xF9	; 249
     cc0:	7f ef       	ldi	r23, 0xFF	; 255
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	9f ef       	ldi	r25, 0xFF	; 255
     cc6:	41 c0       	rjmp	.+130    	; 0xd4a <recv+0x162>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0c 2c       	mov	r0, r12
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <recv+0xec>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	0a 94       	dec	r0
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <recv+0xe8>
     cd8:	20 91 86 0d 	lds	r18, 0x0D86	; 0x800d86 <sock_io_mode>
     cdc:	30 91 87 0d 	lds	r19, 0x0D87	; 0x800d87 <sock_io_mode+0x1>
     ce0:	82 23       	and	r24, r18
     ce2:	93 23       	and	r25, r19
     ce4:	89 2b       	or	r24, r25
     ce6:	11 f0       	breq	.+4      	; 0xcec <recv+0x104>
     ce8:	20 97       	sbiw	r28, 0x00	; 0
     cea:	61 f1       	breq	.+88     	; 0xd44 <recv+0x15c>
         if(recvsize != 0) break;
     cec:	20 97       	sbiw	r28, 0x00	; 0
     cee:	09 f4       	brne	.+2      	; 0xcf2 <recv+0x10a>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
     cf0:	bb cf       	rjmp	.-138    	; 0xc68 <recv+0x80>
     cf2:	ca 15       	cp	r28, r10
     cf4:	db 05       	cpc	r29, r11
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <recv+0x112>
   wiz_recv_data(sn, buf, len);
     cf8:	e5 01       	movw	r28, r10
     cfa:	ae 01       	movw	r20, r28
     cfc:	b4 01       	movw	r22, r8
     cfe:	87 2d       	mov	r24, r7
     d00:	4b d3       	rcall	.+1686   	; 0x1398 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
     d02:	68 01       	movw	r12, r16
     d04:	d3 94       	inc	r13
     d06:	0d 2c       	mov	r0, r13
     d08:	00 0c       	add	r0, r0
     d0a:	ee 08       	sbc	r14, r14
     d0c:	ff 08       	sbc	r15, r15
     d0e:	40 e4       	ldi	r20, 0x40	; 64
     d10:	c7 01       	movw	r24, r14
     d12:	b6 01       	movw	r22, r12
   while(getSn_CR(sn));
     d14:	8f d0       	rcall	.+286    	; 0xe34 <WIZCHIP_WRITE>
     d16:	c7 01       	movw	r24, r14
     d18:	b6 01       	movw	r22, r12
     d1a:	25 d0       	rcall	.+74     	; 0xd66 <WIZCHIP_READ>
     d1c:	81 11       	cpse	r24, r1
     d1e:	fb cf       	rjmp	.-10     	; 0xd16 <recv+0x12e>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     d20:	be 01       	movw	r22, r28
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	11 c0       	rjmp	.+34     	; 0xd4a <recv+0x162>
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
     d28:	6f ef       	ldi	r22, 0xFF	; 255
     d2a:	7f ef       	ldi	r23, 0xFF	; 255
     d2c:	cb 01       	movw	r24, r22
     d2e:	0d c0       	rjmp	.+26     	; 0xd4a <recv+0x162>
   CHECK_SOCKMODE(Sn_MR_TCP);
     d30:	6b ef       	ldi	r22, 0xFB	; 251
     d32:	7f ef       	ldi	r23, 0xFF	; 255
     d34:	8f ef       	ldi	r24, 0xFF	; 255
     d36:	9f ef       	ldi	r25, 0xFF	; 255
     d38:	08 c0       	rjmp	.+16     	; 0xd4a <recv+0x162>
   CHECK_SOCKDATA();
     d3a:	62 ef       	ldi	r22, 0xF2	; 242
     d3c:	7f ef       	ldi	r23, 0xFF	; 255
     d3e:	8f ef       	ldi	r24, 0xFF	; 255
     d40:	9f ef       	ldi	r25, 0xFF	; 255
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <recv+0x162>
            {
               close(sn);
               return SOCKERR_SOCKSTATUS;
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	cb 01       	movw	r24, r22
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	bf 90       	pop	r11
     d5c:	af 90       	pop	r10
     d5e:	9f 90       	pop	r9
     d60:	8f 90       	pop	r8
     d62:	7f 90       	pop	r7
     d64:	08 95       	ret

00000d66 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
     d66:	df 92       	push	r13
     d68:	ef 92       	push	r14
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	00 d0       	rcall	.+0      	; 0xd76 <WIZCHIP_READ+0x10>
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	f6 2e       	mov	r15, r22
     d7c:	e7 2e       	mov	r14, r23
     d7e:	d8 2e       	mov	r13, r24
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
     d80:	06 e0       	ldi	r16, 0x06	; 6
     d82:	12 e0       	ldi	r17, 0x02	; 2
     d84:	d8 01       	movw	r26, r16
     d86:	18 96       	adiw	r26, 0x08	; 8
     d88:	ed 91       	ld	r30, X+
     d8a:	fc 91       	ld	r31, X
     d8c:	19 97       	sbiw	r26, 0x09	; 9
     d8e:	19 95       	eicall
   WIZCHIP.CS._select();
     d90:	d8 01       	movw	r26, r16
     d92:	1c 96       	adiw	r26, 0x0c	; 12
     d94:	ed 91       	ld	r30, X+
     d96:	fc 91       	ld	r31, X
     d98:	1d 97       	sbiw	r26, 0x0d	; 13
     d9a:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
     d9c:	f8 01       	movw	r30, r16
     d9e:	84 89       	ldd	r24, Z+20	; 0x14
     da0:	95 89       	ldd	r25, Z+21	; 0x15
     da2:	89 2b       	or	r24, r25
     da4:	31 f0       	breq	.+12     	; 0xdb2 <WIZCHIP_READ+0x4c>
     da6:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
     daa:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
     dae:	30 97       	sbiw	r30, 0x00	; 0
     db0:	c1 f4       	brne	.+48     	; 0xde2 <WIZCHIP_READ+0x7c>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     db2:	06 e0       	ldi	r16, 0x06	; 6
     db4:	12 e0       	ldi	r17, 0x02	; 2
     db6:	d8 01       	movw	r26, r16
     db8:	52 96       	adiw	r26, 0x12	; 18
     dba:	ed 91       	ld	r30, X+
     dbc:	fc 91       	ld	r31, X
     dbe:	53 97       	sbiw	r26, 0x13	; 19
     dc0:	8d 2d       	mov	r24, r13
     dc2:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     dc4:	d8 01       	movw	r26, r16
     dc6:	52 96       	adiw	r26, 0x12	; 18
     dc8:	ed 91       	ld	r30, X+
     dca:	fc 91       	ld	r31, X
     dcc:	53 97       	sbiw	r26, 0x13	; 19
     dce:	8e 2d       	mov	r24, r14
     dd0:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     dd2:	d8 01       	movw	r26, r16
     dd4:	52 96       	adiw	r26, 0x12	; 18
     dd6:	ed 91       	ld	r30, X+
     dd8:	fc 91       	ld	r31, X
     dda:	53 97       	sbiw	r26, 0x13	; 19
     ddc:	8f 2d       	mov	r24, r15
     dde:	19 95       	eicall
     de0:	08 c0       	rjmp	.+16     	; 0xdf2 <WIZCHIP_READ+0x8c>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
     de2:	d9 82       	std	Y+1, r13	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
     de4:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
     de6:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
     de8:	63 e0       	ldi	r22, 0x03	; 3
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	ce 01       	movw	r24, r28
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	19 95       	eicall
   }
   ret = WIZCHIP.IF.SPI._read_byte();
     df2:	06 e0       	ldi	r16, 0x06	; 6
     df4:	12 e0       	ldi	r17, 0x02	; 2
     df6:	d8 01       	movw	r26, r16
     df8:	50 96       	adiw	r26, 0x10	; 16
     dfa:	ed 91       	ld	r30, X+
     dfc:	fc 91       	ld	r31, X
     dfe:	51 97       	sbiw	r26, 0x11	; 17
     e00:	19 95       	eicall
     e02:	f8 2e       	mov	r15, r24

   WIZCHIP.CS._deselect();
     e04:	d8 01       	movw	r26, r16
     e06:	1e 96       	adiw	r26, 0x0e	; 14
     e08:	ed 91       	ld	r30, X+
     e0a:	fc 91       	ld	r31, X
     e0c:	1f 97       	sbiw	r26, 0x0f	; 15
     e0e:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
     e10:	d8 01       	movw	r26, r16
     e12:	1a 96       	adiw	r26, 0x0a	; 10
     e14:	ed 91       	ld	r30, X+
     e16:	fc 91       	ld	r31, X
     e18:	1b 97       	sbiw	r26, 0x0b	; 11
     e1a:	19 95       	eicall
   return ret;
}
     e1c:	8f 2d       	mov	r24, r15
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	df 90       	pop	r13
     e32:	08 95       	ret

00000e34 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
     e34:	4f 92       	push	r4
     e36:	5f 92       	push	r5
     e38:	6f 92       	push	r6
     e3a:	7f 92       	push	r7
     e3c:	bf 92       	push	r11
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <WIZCHIP_WRITE+0x1c>
     e50:	1f 92       	push	r1
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	6b 01       	movw	r12, r22
     e58:	7c 01       	movw	r14, r24
     e5a:	b4 2e       	mov	r11, r20
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
     e5c:	06 e0       	ldi	r16, 0x06	; 6
     e5e:	12 e0       	ldi	r17, 0x02	; 2
     e60:	d8 01       	movw	r26, r16
     e62:	18 96       	adiw	r26, 0x08	; 8
     e64:	ed 91       	ld	r30, X+
     e66:	fc 91       	ld	r31, X
     e68:	19 97       	sbiw	r26, 0x09	; 9
     e6a:	19 95       	eicall
   WIZCHIP.CS._select();
     e6c:	d8 01       	movw	r26, r16
     e6e:	1c 96       	adiw	r26, 0x0c	; 12
     e70:	ed 91       	ld	r30, X+
     e72:	fc 91       	ld	r31, X
     e74:	1d 97       	sbiw	r26, 0x0d	; 13
     e76:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
     e78:	26 01       	movw	r4, r12
     e7a:	37 01       	movw	r6, r14
     e7c:	68 94       	set
     e7e:	42 f8       	bld	r4, 2

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
     e80:	d8 01       	movw	r26, r16
     e82:	56 96       	adiw	r26, 0x16	; 22
     e84:	ed 91       	ld	r30, X+
     e86:	fc 91       	ld	r31, X
     e88:	57 97       	sbiw	r26, 0x17	; 23
     e8a:	30 97       	sbiw	r30, 0x00	; 0
     e8c:	e1 f4       	brne	.+56     	; 0xec6 <WIZCHIP_WRITE+0x92>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     e8e:	52 96       	adiw	r26, 0x12	; 18
     e90:	ed 91       	ld	r30, X+
     e92:	fc 91       	ld	r31, X
     e94:	53 97       	sbiw	r26, 0x13	; 19
     e96:	8e 2d       	mov	r24, r14
     e98:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     e9a:	d8 01       	movw	r26, r16
     e9c:	52 96       	adiw	r26, 0x12	; 18
     e9e:	ed 91       	ld	r30, X+
     ea0:	fc 91       	ld	r31, X
     ea2:	53 97       	sbiw	r26, 0x13	; 19
     ea4:	8d 2d       	mov	r24, r13
     ea6:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     ea8:	d8 01       	movw	r26, r16
     eaa:	52 96       	adiw	r26, 0x12	; 18
     eac:	ed 91       	ld	r30, X+
     eae:	fc 91       	ld	r31, X
     eb0:	53 97       	sbiw	r26, 0x13	; 19
     eb2:	84 2d       	mov	r24, r4
     eb4:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte(wb);
     eb6:	d8 01       	movw	r26, r16
     eb8:	52 96       	adiw	r26, 0x12	; 18
     eba:	ed 91       	ld	r30, X+
     ebc:	fc 91       	ld	r31, X
     ebe:	53 97       	sbiw	r26, 0x13	; 19
     ec0:	8b 2d       	mov	r24, r11
     ec2:	19 95       	eicall
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <WIZCHIP_WRITE+0xa4>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
     ec6:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
     ec8:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
     eca:	4b 82       	std	Y+3, r4	; 0x03
		spi_data[3] = wb;
     ecc:	bc 82       	std	Y+4, r11	; 0x04
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
     ece:	64 e0       	ldi	r22, 0x04	; 4
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	ce 01       	movw	r24, r28
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
     ed8:	06 e0       	ldi	r16, 0x06	; 6
     eda:	12 e0       	ldi	r17, 0x02	; 2
     edc:	d8 01       	movw	r26, r16
     ede:	1e 96       	adiw	r26, 0x0e	; 14
     ee0:	ed 91       	ld	r30, X+
     ee2:	fc 91       	ld	r31, X
     ee4:	1f 97       	sbiw	r26, 0x0f	; 15
     ee6:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
     ee8:	d8 01       	movw	r26, r16
     eea:	1a 96       	adiw	r26, 0x0a	; 10
     eec:	ed 91       	ld	r30, X+
     eee:	fc 91       	ld	r31, X
     ef0:	1b 97       	sbiw	r26, 0x0b	; 11
     ef2:	19 95       	eicall
}
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	ff 90       	pop	r15
     f06:	ef 90       	pop	r14
     f08:	df 90       	pop	r13
     f0a:	cf 90       	pop	r12
     f0c:	bf 90       	pop	r11
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	08 95       	ret

00000f18 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
     f18:	9f 92       	push	r9
     f1a:	af 92       	push	r10
     f1c:	bf 92       	push	r11
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <WIZCHIP_READ_BUF+0x18>
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	f6 2e       	mov	r15, r22
     f36:	e7 2e       	mov	r14, r23
     f38:	98 2e       	mov	r9, r24
     f3a:	5a 01       	movw	r10, r20
     f3c:	69 01       	movw	r12, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
     f3e:	06 e0       	ldi	r16, 0x06	; 6
     f40:	12 e0       	ldi	r17, 0x02	; 2
     f42:	d8 01       	movw	r26, r16
     f44:	18 96       	adiw	r26, 0x08	; 8
     f46:	ed 91       	ld	r30, X+
     f48:	fc 91       	ld	r31, X
     f4a:	19 97       	sbiw	r26, 0x09	; 9
     f4c:	19 95       	eicall
   WIZCHIP.CS._select();
     f4e:	d8 01       	movw	r26, r16
     f50:	1c 96       	adiw	r26, 0x0c	; 12
     f52:	ed 91       	ld	r30, X+
     f54:	fc 91       	ld	r31, X
     f56:	1d 97       	sbiw	r26, 0x0d	; 13
     f58:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
     f5a:	f8 01       	movw	r30, r16
     f5c:	84 89       	ldd	r24, Z+20	; 0x14
     f5e:	95 89       	ldd	r25, Z+21	; 0x15
     f60:	89 2b       	or	r24, r25
     f62:	31 f0       	breq	.+12     	; 0xf70 <WIZCHIP_READ_BUF+0x58>
     f64:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
     f68:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
     f6c:	30 97       	sbiw	r30, 0x00	; 0
     f6e:	51 f5       	brne	.+84     	; 0xfc4 <WIZCHIP_READ_BUF+0xac>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     f70:	06 e0       	ldi	r16, 0x06	; 6
     f72:	12 e0       	ldi	r17, 0x02	; 2
     f74:	d8 01       	movw	r26, r16
     f76:	52 96       	adiw	r26, 0x12	; 18
     f78:	ed 91       	ld	r30, X+
     f7a:	fc 91       	ld	r31, X
     f7c:	53 97       	sbiw	r26, 0x13	; 19
     f7e:	89 2d       	mov	r24, r9
     f80:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     f82:	d8 01       	movw	r26, r16
     f84:	52 96       	adiw	r26, 0x12	; 18
     f86:	ed 91       	ld	r30, X+
     f88:	fc 91       	ld	r31, X
     f8a:	53 97       	sbiw	r26, 0x13	; 19
     f8c:	8e 2d       	mov	r24, r14
     f8e:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     f90:	d8 01       	movw	r26, r16
     f92:	52 96       	adiw	r26, 0x12	; 18
     f94:	ed 91       	ld	r30, X+
     f96:	fc 91       	ld	r31, X
     f98:	53 97       	sbiw	r26, 0x13	; 19
     f9a:	8f 2d       	mov	r24, r15
     f9c:	19 95       	eicall
		for(i = 0; i < len; i++)
     f9e:	00 e0       	ldi	r16, 0x00	; 0
     fa0:	10 e0       	ldi	r17, 0x00	; 0
     fa2:	0c c0       	rjmp	.+24     	; 0xfbc <WIZCHIP_READ_BUF+0xa4>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
     fa4:	75 01       	movw	r14, r10
     fa6:	e0 0e       	add	r14, r16
     fa8:	f1 1e       	adc	r15, r17
     faa:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <WIZCHIP+0x10>
     fae:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <WIZCHIP+0x11>
     fb2:	19 95       	eicall
     fb4:	f7 01       	movw	r30, r14
     fb6:	80 83       	st	Z, r24
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
     fb8:	0f 5f       	subi	r16, 0xFF	; 255
     fba:	1f 4f       	sbci	r17, 0xFF	; 255
     fbc:	0c 15       	cp	r16, r12
     fbe:	1d 05       	cpc	r17, r13
     fc0:	88 f3       	brcs	.-30     	; 0xfa4 <WIZCHIP_READ_BUF+0x8c>
     fc2:	0f c0       	rjmp	.+30     	; 0xfe2 <WIZCHIP_READ_BUF+0xca>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
     fc4:	99 82       	std	Y+1, r9	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
     fc6:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
     fc8:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
     fca:	63 e0       	ldi	r22, 0x03	; 3
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	ce 01       	movw	r24, r28
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	19 95       	eicall
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
     fd4:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <WIZCHIP+0x14>
     fd8:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <WIZCHIP+0x15>
     fdc:	b6 01       	movw	r22, r12
     fde:	c5 01       	movw	r24, r10
     fe0:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
     fe2:	06 e0       	ldi	r16, 0x06	; 6
     fe4:	12 e0       	ldi	r17, 0x02	; 2
     fe6:	d8 01       	movw	r26, r16
     fe8:	1e 96       	adiw	r26, 0x0e	; 14
     fea:	ed 91       	ld	r30, X+
     fec:	fc 91       	ld	r31, X
     fee:	1f 97       	sbiw	r26, 0x0f	; 15
     ff0:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
     ff2:	d8 01       	movw	r26, r16
     ff4:	1a 96       	adiw	r26, 0x0a	; 10
     ff6:	ed 91       	ld	r30, X+
     ff8:	fc 91       	ld	r31, X
     ffa:	1b 97       	sbiw	r26, 0x0b	; 11
     ffc:	19 95       	eicall
}
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	df 90       	pop	r13
    1012:	cf 90       	pop	r12
    1014:	bf 90       	pop	r11
    1016:	af 90       	pop	r10
    1018:	9f 90       	pop	r9
    101a:	08 95       	ret

0000101c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    101c:	4f 92       	push	r4
    101e:	5f 92       	push	r5
    1020:	6f 92       	push	r6
    1022:	7f 92       	push	r7
    1024:	8f 92       	push	r8
    1026:	9f 92       	push	r9
    1028:	af 92       	push	r10
    102a:	bf 92       	push	r11
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	00 d0       	rcall	.+0      	; 0x103e <WIZCHIP_WRITE_BUF+0x22>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	6b 01       	movw	r12, r22
    1044:	7c 01       	movw	r14, r24
    1046:	4a 01       	movw	r8, r20
    1048:	59 01       	movw	r10, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    104a:	06 e0       	ldi	r16, 0x06	; 6
    104c:	12 e0       	ldi	r17, 0x02	; 2
    104e:	d8 01       	movw	r26, r16
    1050:	18 96       	adiw	r26, 0x08	; 8
    1052:	ed 91       	ld	r30, X+
    1054:	fc 91       	ld	r31, X
    1056:	19 97       	sbiw	r26, 0x09	; 9
    1058:	19 95       	eicall
   WIZCHIP.CS._select();
    105a:	d8 01       	movw	r26, r16
    105c:	1c 96       	adiw	r26, 0x0c	; 12
    105e:	ed 91       	ld	r30, X+
    1060:	fc 91       	ld	r31, X
    1062:	1d 97       	sbiw	r26, 0x0d	; 13
    1064:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    1066:	26 01       	movw	r4, r12
    1068:	37 01       	movw	r6, r14
    106a:	68 94       	set
    106c:	42 f8       	bld	r4, 2

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    106e:	d8 01       	movw	r26, r16
    1070:	56 96       	adiw	r26, 0x16	; 22
    1072:	ed 91       	ld	r30, X+
    1074:	fc 91       	ld	r31, X
    1076:	57 97       	sbiw	r26, 0x17	; 23
    1078:	30 97       	sbiw	r30, 0x00	; 0
    107a:	31 f5       	brne	.+76     	; 0x10c8 <WIZCHIP_WRITE_BUF+0xac>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    107c:	52 96       	adiw	r26, 0x12	; 18
    107e:	ed 91       	ld	r30, X+
    1080:	fc 91       	ld	r31, X
    1082:	53 97       	sbiw	r26, 0x13	; 19
    1084:	8e 2d       	mov	r24, r14
    1086:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1088:	d8 01       	movw	r26, r16
    108a:	52 96       	adiw	r26, 0x12	; 18
    108c:	ed 91       	ld	r30, X+
    108e:	fc 91       	ld	r31, X
    1090:	53 97       	sbiw	r26, 0x13	; 19
    1092:	8d 2d       	mov	r24, r13
    1094:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1096:	d8 01       	movw	r26, r16
    1098:	52 96       	adiw	r26, 0x12	; 18
    109a:	ed 91       	ld	r30, X+
    109c:	fc 91       	ld	r31, X
    109e:	53 97       	sbiw	r26, 0x13	; 19
    10a0:	84 2d       	mov	r24, r4
    10a2:	19 95       	eicall
		for(i = 0; i < len; i++)
    10a4:	00 e0       	ldi	r16, 0x00	; 0
    10a6:	10 e0       	ldi	r17, 0x00	; 0
    10a8:	0b c0       	rjmp	.+22     	; 0x10c0 <WIZCHIP_WRITE_BUF+0xa4>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    10aa:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <WIZCHIP+0x12>
    10ae:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <WIZCHIP+0x13>
    10b2:	d4 01       	movw	r26, r8
    10b4:	a0 0f       	add	r26, r16
    10b6:	b1 1f       	adc	r27, r17
    10b8:	8c 91       	ld	r24, X
    10ba:	19 95       	eicall
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    10bc:	0f 5f       	subi	r16, 0xFF	; 255
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
    10c0:	0a 15       	cp	r16, r10
    10c2:	1b 05       	cpc	r17, r11
    10c4:	90 f3       	brcs	.-28     	; 0x10aa <WIZCHIP_WRITE_BUF+0x8e>
    10c6:	0f c0       	rjmp	.+30     	; 0x10e6 <WIZCHIP_WRITE_BUF+0xca>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    10c8:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    10ca:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    10cc:	4b 82       	std	Y+3, r4	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    10ce:	63 e0       	ldi	r22, 0x03	; 3
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	ce 01       	movw	r24, r28
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	19 95       	eicall
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    10d8:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    10dc:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    10e0:	b5 01       	movw	r22, r10
    10e2:	c4 01       	movw	r24, r8
    10e4:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    10e6:	06 e0       	ldi	r16, 0x06	; 6
    10e8:	12 e0       	ldi	r17, 0x02	; 2
    10ea:	d8 01       	movw	r26, r16
    10ec:	1e 96       	adiw	r26, 0x0e	; 14
    10ee:	ed 91       	ld	r30, X+
    10f0:	fc 91       	ld	r31, X
    10f2:	1f 97       	sbiw	r26, 0x0f	; 15
    10f4:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    10f6:	d8 01       	movw	r26, r16
    10f8:	1a 96       	adiw	r26, 0x0a	; 10
    10fa:	ed 91       	ld	r30, X+
    10fc:	fc 91       	ld	r31, X
    10fe:	1b 97       	sbiw	r26, 0x0b	; 11
    1100:	19 95       	eicall
}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	df 90       	pop	r13
    1116:	cf 90       	pop	r12
    1118:	bf 90       	pop	r11
    111a:	af 90       	pop	r10
    111c:	9f 90       	pop	r9
    111e:	8f 90       	pop	r8
    1120:	7f 90       	pop	r7
    1122:	6f 90       	pop	r6
    1124:	5f 90       	pop	r5
    1126:	4f 90       	pop	r4
    1128:	08 95       	ret

0000112a <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
    112a:	7f 92       	push	r7
    112c:	8f 92       	push	r8
    112e:	9f 92       	push	r9
    1130:	af 92       	push	r10
    1132:	bf 92       	push	r11
    1134:	cf 92       	push	r12
    1136:	df 92       	push	r13
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	78 2e       	mov	r7, r24
   uint16_t val=0,val1=0;
    1146:	00 e0       	ldi	r16, 0x00	; 0
    1148:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    114a:	c7 2c       	mov	r12, r7
    114c:	d1 2c       	mov	r13, r1
    114e:	cc 0c       	add	r12, r12
    1150:	dd 1c       	adc	r13, r13
    1152:	cc 0c       	add	r12, r12
    1154:	dd 1c       	adc	r13, r13
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    1158:	c8 1a       	sub	r12, r24
    115a:	d8 0a       	sbc	r13, r24
    115c:	cc 0c       	add	r12, r12
    115e:	dd 1c       	adc	r13, r13
    1160:	cc 0c       	add	r12, r12
    1162:	dd 1c       	adc	r13, r13
    1164:	cc 0c       	add	r12, r12
    1166:	dd 1c       	adc	r13, r13
    1168:	46 01       	movw	r8, r12
    116a:	80 ee       	ldi	r24, 0xE0	; 224
    116c:	98 1a       	sub	r9, r24
    116e:	09 2c       	mov	r0, r9
    1170:	00 0c       	add	r0, r0
    1172:	aa 08       	sbc	r10, r10
    1174:	bb 08       	sbc	r11, r11
    1176:	c5 01       	movw	r24, r10
    1178:	b4 01       	movw	r22, r8
    117a:	f5 dd       	rcall	.-1046   	; 0xd66 <WIZCHIP_READ>
    117c:	c8 2f       	mov	r28, r24
    117e:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    1180:	dc 2f       	mov	r29, r28
    1182:	cc 27       	eor	r28, r28
    1184:	8f ed       	ldi	r24, 0xDF	; 223
    1186:	d8 1a       	sub	r13, r24
    1188:	0d 2c       	mov	r0, r13
    118a:	00 0c       	add	r0, r0
    118c:	ee 08       	sbc	r14, r14
    118e:	ff 08       	sbc	r15, r15
    1190:	c7 01       	movw	r24, r14
    1192:	b6 01       	movw	r22, r12
    1194:	e8 dd       	rcall	.-1072   	; 0xd66 <WIZCHIP_READ>
    1196:	c8 0f       	add	r28, r24
    1198:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    119a:	20 97       	sbiw	r28, 0x00	; 0
    119c:	61 f0       	breq	.+24     	; 0x11b6 <getSn_TX_FSR+0x8c>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    119e:	c5 01       	movw	r24, r10
    11a0:	b4 01       	movw	r22, r8
    11a2:	e1 dd       	rcall	.-1086   	; 0xd66 <WIZCHIP_READ>
    11a4:	08 2f       	mov	r16, r24
    11a6:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    11a8:	10 2f       	mov	r17, r16
    11aa:	00 27       	eor	r16, r16
    11ac:	c7 01       	movw	r24, r14
    11ae:	b6 01       	movw	r22, r12
    11b0:	da dd       	rcall	.-1100   	; 0xd66 <WIZCHIP_READ>
    11b2:	08 0f       	add	r16, r24
    11b4:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    11b6:	0c 17       	cp	r16, r28
    11b8:	1d 07       	cpc	r17, r29
    11ba:	39 f6       	brne	.-114    	; 0x114a <getSn_TX_FSR+0x20>
   return val;
}
    11bc:	c8 01       	movw	r24, r16
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	df 90       	pop	r13
    11cc:	cf 90       	pop	r12
    11ce:	bf 90       	pop	r11
    11d0:	af 90       	pop	r10
    11d2:	9f 90       	pop	r9
    11d4:	8f 90       	pop	r8
    11d6:	7f 90       	pop	r7
    11d8:	08 95       	ret

000011da <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    11da:	7f 92       	push	r7
    11dc:	8f 92       	push	r8
    11de:	9f 92       	push	r9
    11e0:	af 92       	push	r10
    11e2:	bf 92       	push	r11
    11e4:	cf 92       	push	r12
    11e6:	df 92       	push	r13
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	78 2e       	mov	r7, r24
   uint16_t val=0,val1=0;
    11f6:	00 e0       	ldi	r16, 0x00	; 0
    11f8:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    11fa:	c7 2c       	mov	r12, r7
    11fc:	d1 2c       	mov	r13, r1
    11fe:	cc 0c       	add	r12, r12
    1200:	dd 1c       	adc	r13, r13
    1202:	cc 0c       	add	r12, r12
    1204:	dd 1c       	adc	r13, r13
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	c8 1a       	sub	r12, r24
    120a:	d8 0a       	sbc	r13, r24
    120c:	cc 0c       	add	r12, r12
    120e:	dd 1c       	adc	r13, r13
    1210:	cc 0c       	add	r12, r12
    1212:	dd 1c       	adc	r13, r13
    1214:	cc 0c       	add	r12, r12
    1216:	dd 1c       	adc	r13, r13
    1218:	46 01       	movw	r8, r12
    121a:	8a ed       	ldi	r24, 0xDA	; 218
    121c:	98 1a       	sub	r9, r24
    121e:	09 2c       	mov	r0, r9
    1220:	00 0c       	add	r0, r0
    1222:	aa 08       	sbc	r10, r10
    1224:	bb 08       	sbc	r11, r11
    1226:	c5 01       	movw	r24, r10
    1228:	b4 01       	movw	r22, r8
    122a:	9d dd       	rcall	.-1222   	; 0xd66 <WIZCHIP_READ>
    122c:	c8 2f       	mov	r28, r24
    122e:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    1230:	dc 2f       	mov	r29, r28
    1232:	cc 27       	eor	r28, r28
    1234:	89 ed       	ldi	r24, 0xD9	; 217
    1236:	d8 1a       	sub	r13, r24
    1238:	0d 2c       	mov	r0, r13
    123a:	00 0c       	add	r0, r0
    123c:	ee 08       	sbc	r14, r14
    123e:	ff 08       	sbc	r15, r15
    1240:	c7 01       	movw	r24, r14
    1242:	b6 01       	movw	r22, r12
    1244:	90 dd       	rcall	.-1248   	; 0xd66 <WIZCHIP_READ>
    1246:	c8 0f       	add	r28, r24
    1248:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    124a:	20 97       	sbiw	r28, 0x00	; 0
    124c:	61 f0       	breq	.+24     	; 0x1266 <getSn_RX_RSR+0x8c>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    124e:	c5 01       	movw	r24, r10
    1250:	b4 01       	movw	r22, r8
    1252:	89 dd       	rcall	.-1262   	; 0xd66 <WIZCHIP_READ>
    1254:	08 2f       	mov	r16, r24
    1256:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    1258:	10 2f       	mov	r17, r16
    125a:	00 27       	eor	r16, r16
    125c:	c7 01       	movw	r24, r14
    125e:	b6 01       	movw	r22, r12
    1260:	82 dd       	rcall	.-1276   	; 0xd66 <WIZCHIP_READ>
    1262:	08 0f       	add	r16, r24
    1264:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    1266:	0c 17       	cp	r16, r28
    1268:	1d 07       	cpc	r17, r29
    126a:	39 f6       	brne	.-114    	; 0x11fa <getSn_RX_RSR+0x20>
   return val;
}
    126c:	c8 01       	movw	r24, r16
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	ff 90       	pop	r15
    1278:	ef 90       	pop	r14
    127a:	df 90       	pop	r13
    127c:	cf 90       	pop	r12
    127e:	bf 90       	pop	r11
    1280:	af 90       	pop	r10
    1282:	9f 90       	pop	r9
    1284:	8f 90       	pop	r8
    1286:	7f 90       	pop	r7
    1288:	08 95       	ret

0000128a <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    128a:	2f 92       	push	r2
    128c:	3f 92       	push	r3
    128e:	4f 92       	push	r4
    1290:	5f 92       	push	r5
    1292:	6f 92       	push	r6
    1294:	7f 92       	push	r7
    1296:	8f 92       	push	r8
    1298:	9f 92       	push	r9
    129a:	af 92       	push	r10
    129c:	bf 92       	push	r11
    129e:	cf 92       	push	r12
    12a0:	df 92       	push	r13
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <wiz_send_data+0x26>
    12b0:	1f 92       	push	r1
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
    12b6:	41 15       	cp	r20, r1
    12b8:	51 05       	cpc	r21, r1
    12ba:	09 f4       	brne	.+2      	; 0x12be <wiz_send_data+0x34>
    12bc:	56 c0       	rjmp	.+172    	; 0x136a <wiz_send_data+0xe0>
    12be:	3a 01       	movw	r6, r20
    12c0:	7a 83       	std	Y+2, r23	; 0x02
    12c2:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_TX_WR(sn);
    12c4:	28 2e       	mov	r2, r24
    12c6:	31 2c       	mov	r3, r1
    12c8:	22 0c       	add	r2, r2
    12ca:	33 1c       	adc	r3, r3
    12cc:	22 0c       	add	r2, r2
    12ce:	33 1c       	adc	r3, r3
    12d0:	61 01       	movw	r12, r2
    12d2:	2f ef       	ldi	r18, 0xFF	; 255
    12d4:	c2 1a       	sub	r12, r18
    12d6:	d2 0a       	sbc	r13, r18
    12d8:	cc 0c       	add	r12, r12
    12da:	dd 1c       	adc	r13, r13
    12dc:	cc 0c       	add	r12, r12
    12de:	dd 1c       	adc	r13, r13
    12e0:	cc 0c       	add	r12, r12
    12e2:	dd 1c       	adc	r13, r13
    12e4:	46 01       	movw	r8, r12
    12e6:	3c ed       	ldi	r19, 0xDC	; 220
    12e8:	93 1a       	sub	r9, r19
    12ea:	09 2c       	mov	r0, r9
    12ec:	00 0c       	add	r0, r0
    12ee:	aa 08       	sbc	r10, r10
    12f0:	bb 08       	sbc	r11, r11
    12f2:	c5 01       	movw	r24, r10
    12f4:	b4 01       	movw	r22, r8
    12f6:	37 dd       	rcall	.-1426   	; 0xd66 <WIZCHIP_READ>
    12f8:	08 2f       	mov	r16, r24
    12fa:	10 e0       	ldi	r17, 0x00	; 0
    12fc:	10 2f       	mov	r17, r16
    12fe:	00 27       	eor	r16, r16
    1300:	8b ed       	ldi	r24, 0xDB	; 219
    1302:	d8 1a       	sub	r13, r24
    1304:	0d 2c       	mov	r0, r13
    1306:	00 0c       	add	r0, r0
    1308:	ee 08       	sbc	r14, r14
    130a:	ff 08       	sbc	r15, r15
    130c:	c7 01       	movw	r24, r14
    130e:	b6 01       	movw	r22, r12
    1310:	2a dd       	rcall	.-1452   	; 0xd66 <WIZCHIP_READ>
    1312:	08 0f       	add	r16, r24
    1314:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
    1316:	c8 01       	movw	r24, r16
    1318:	a0 e0       	ldi	r26, 0x00	; 0
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	44 27       	eor	r20, r20
    131e:	58 2f       	mov	r21, r24
    1320:	69 2f       	mov	r22, r25
    1322:	7a 2f       	mov	r23, r26
    1324:	c1 01       	movw	r24, r2
    1326:	02 96       	adiw	r24, 0x02	; 2
    1328:	1c 01       	movw	r2, r24
    132a:	22 0c       	add	r2, r2
    132c:	33 1c       	adc	r3, r3
    132e:	22 0c       	add	r2, r2
    1330:	33 1c       	adc	r3, r3
    1332:	22 0c       	add	r2, r2
    1334:	33 1c       	adc	r3, r3
    1336:	c1 01       	movw	r24, r2
    1338:	33 0c       	add	r3, r3
    133a:	aa 0b       	sbc	r26, r26
    133c:	bb 0b       	sbc	r27, r27
    133e:	1a 01       	movw	r2, r20
    1340:	2b 01       	movw	r4, r22
    1342:	28 0e       	add	r2, r24
    1344:	39 1e       	adc	r3, r25
    1346:	4a 1e       	adc	r4, r26
    1348:	5b 1e       	adc	r5, r27
    134a:	c2 01       	movw	r24, r4
    134c:	b1 01       	movw	r22, r2
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    134e:	93 01       	movw	r18, r6
    1350:	49 81       	ldd	r20, Y+1	; 0x01
    1352:	5a 81       	ldd	r21, Y+2	; 0x02
    1354:	63 de       	rcall	.-826    	; 0x101c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
    1356:	06 0d       	add	r16, r6
    1358:	17 1d       	adc	r17, r7
   setSn_TX_WR(sn,ptr);
    135a:	41 2f       	mov	r20, r17
    135c:	c5 01       	movw	r24, r10
    135e:	b4 01       	movw	r22, r8
    1360:	69 dd       	rcall	.-1326   	; 0xe34 <WIZCHIP_WRITE>
    1362:	40 2f       	mov	r20, r16
    1364:	c7 01       	movw	r24, r14
    1366:	b6 01       	movw	r22, r12
    1368:	65 dd       	rcall	.-1334   	; 0xe34 <WIZCHIP_WRITE>
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	df 90       	pop	r13
    1380:	cf 90       	pop	r12
    1382:	bf 90       	pop	r11
    1384:	af 90       	pop	r10
    1386:	9f 90       	pop	r9
    1388:	8f 90       	pop	r8
    138a:	7f 90       	pop	r7
    138c:	6f 90       	pop	r6
    138e:	5f 90       	pop	r5
    1390:	4f 90       	pop	r4
    1392:	3f 90       	pop	r3
    1394:	2f 90       	pop	r2
    1396:	08 95       	ret

00001398 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    1398:	2f 92       	push	r2
    139a:	3f 92       	push	r3
    139c:	4f 92       	push	r4
    139e:	5f 92       	push	r5
    13a0:	6f 92       	push	r6
    13a2:	7f 92       	push	r7
    13a4:	8f 92       	push	r8
    13a6:	9f 92       	push	r9
    13a8:	af 92       	push	r10
    13aa:	bf 92       	push	r11
    13ac:	cf 92       	push	r12
    13ae:	df 92       	push	r13
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	00 d0       	rcall	.+0      	; 0x13be <wiz_recv_data+0x26>
    13be:	1f 92       	push	r1
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
    13c4:	41 15       	cp	r20, r1
    13c6:	51 05       	cpc	r21, r1
    13c8:	09 f4       	brne	.+2      	; 0x13cc <wiz_recv_data+0x34>
    13ca:	56 c0       	rjmp	.+172    	; 0x1478 <wiz_recv_data+0xe0>
    13cc:	3a 01       	movw	r6, r20
    13ce:	7a 83       	std	Y+2, r23	; 0x02
    13d0:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_RX_RD(sn);
    13d2:	28 2e       	mov	r2, r24
    13d4:	31 2c       	mov	r3, r1
    13d6:	22 0c       	add	r2, r2
    13d8:	33 1c       	adc	r3, r3
    13da:	22 0c       	add	r2, r2
    13dc:	33 1c       	adc	r3, r3
    13de:	61 01       	movw	r12, r2
    13e0:	2f ef       	ldi	r18, 0xFF	; 255
    13e2:	c2 1a       	sub	r12, r18
    13e4:	d2 0a       	sbc	r13, r18
    13e6:	cc 0c       	add	r12, r12
    13e8:	dd 1c       	adc	r13, r13
    13ea:	cc 0c       	add	r12, r12
    13ec:	dd 1c       	adc	r13, r13
    13ee:	cc 0c       	add	r12, r12
    13f0:	dd 1c       	adc	r13, r13
    13f2:	46 01       	movw	r8, r12
    13f4:	38 ed       	ldi	r19, 0xD8	; 216
    13f6:	93 1a       	sub	r9, r19
    13f8:	09 2c       	mov	r0, r9
    13fa:	00 0c       	add	r0, r0
    13fc:	aa 08       	sbc	r10, r10
    13fe:	bb 08       	sbc	r11, r11
    1400:	c5 01       	movw	r24, r10
    1402:	b4 01       	movw	r22, r8
    1404:	b0 dc       	rcall	.-1696   	; 0xd66 <WIZCHIP_READ>
    1406:	08 2f       	mov	r16, r24
    1408:	10 e0       	ldi	r17, 0x00	; 0
    140a:	10 2f       	mov	r17, r16
    140c:	00 27       	eor	r16, r16
    140e:	87 ed       	ldi	r24, 0xD7	; 215
    1410:	d8 1a       	sub	r13, r24
    1412:	0d 2c       	mov	r0, r13
    1414:	00 0c       	add	r0, r0
    1416:	ee 08       	sbc	r14, r14
    1418:	ff 08       	sbc	r15, r15
    141a:	c7 01       	movw	r24, r14
    141c:	b6 01       	movw	r22, r12
    141e:	a3 dc       	rcall	.-1722   	; 0xd66 <WIZCHIP_READ>
    1420:	08 0f       	add	r16, r24
    1422:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
    1424:	c8 01       	movw	r24, r16
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	44 27       	eor	r20, r20
    142c:	58 2f       	mov	r21, r24
    142e:	69 2f       	mov	r22, r25
    1430:	7a 2f       	mov	r23, r26
    1432:	c1 01       	movw	r24, r2
    1434:	03 96       	adiw	r24, 0x03	; 3
    1436:	1c 01       	movw	r2, r24
    1438:	22 0c       	add	r2, r2
    143a:	33 1c       	adc	r3, r3
    143c:	22 0c       	add	r2, r2
    143e:	33 1c       	adc	r3, r3
    1440:	22 0c       	add	r2, r2
    1442:	33 1c       	adc	r3, r3
    1444:	c1 01       	movw	r24, r2
    1446:	33 0c       	add	r3, r3
    1448:	aa 0b       	sbc	r26, r26
    144a:	bb 0b       	sbc	r27, r27
    144c:	1a 01       	movw	r2, r20
    144e:	2b 01       	movw	r4, r22
    1450:	28 0e       	add	r2, r24
    1452:	39 1e       	adc	r3, r25
    1454:	4a 1e       	adc	r4, r26
    1456:	5b 1e       	adc	r5, r27
    1458:	c2 01       	movw	r24, r4
    145a:	b1 01       	movw	r22, r2
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    145c:	93 01       	movw	r18, r6
    145e:	49 81       	ldd	r20, Y+1	; 0x01
    1460:	5a 81       	ldd	r21, Y+2	; 0x02
    1462:	5a dd       	rcall	.-1356   	; 0xf18 <WIZCHIP_READ_BUF>
   ptr += len;
    1464:	06 0d       	add	r16, r6
    1466:	17 1d       	adc	r17, r7
   
   setSn_RX_RD(sn,ptr);
    1468:	41 2f       	mov	r20, r17
    146a:	c5 01       	movw	r24, r10
    146c:	b4 01       	movw	r22, r8
    146e:	e2 dc       	rcall	.-1596   	; 0xe34 <WIZCHIP_WRITE>
    1470:	40 2f       	mov	r20, r16
    1472:	c7 01       	movw	r24, r14
    1474:	b6 01       	movw	r22, r12
    1476:	de dc       	rcall	.-1604   	; 0xe34 <WIZCHIP_WRITE>
}
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	ff 90       	pop	r15
    148a:	ef 90       	pop	r14
    148c:	df 90       	pop	r13
    148e:	cf 90       	pop	r12
    1490:	bf 90       	pop	r11
    1492:	af 90       	pop	r10
    1494:	9f 90       	pop	r9
    1496:	8f 90       	pop	r8
    1498:	7f 90       	pop	r7
    149a:	6f 90       	pop	r6
    149c:	5f 90       	pop	r5
    149e:	4f 90       	pop	r4
    14a0:	3f 90       	pop	r3
    14a2:	2f 90       	pop	r2
    14a4:	08 95       	ret

000014a6 <wizchip_cris_enter>:
void wizphy_getphystat(wiz_PhyConf* phyconf)
{
   uint8_t tmp = getPHYCFGR();
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}
    14a6:	08 95       	ret

000014a8 <wizchip_cris_exit>:
    14a8:	08 95       	ret

000014aa <wizchip_cs_select>:
    14aa:	08 95       	ret

000014ac <wizchip_cs_deselect>:
    14ac:	08 95       	ret

000014ae <wizchip_bus_readdata>:
    14ae:	fb 01       	movw	r30, r22
    14b0:	80 81       	ld	r24, Z
    14b2:	08 95       	ret

000014b4 <wizchip_bus_writedata>:
    14b4:	fb 01       	movw	r30, r22
    14b6:	40 83       	st	Z, r20
    14b8:	08 95       	ret

000014ba <wizchip_spi_readbyte>:
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	08 95       	ret

000014be <wizchip_spi_writebyte>:
    14be:	08 95       	ret

000014c0 <wizchip_spi_readburst>:
    14c0:	08 95       	ret

000014c2 <wizchip_spi_writeburst>:
    14c2:	08 95       	ret

000014c4 <reg_wizchip_cs_cbfunc>:
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	19 f0       	breq	.+6      	; 0x14ce <reg_wizchip_cs_cbfunc+0xa>
    14c8:	61 15       	cp	r22, r1
    14ca:	71 05       	cpc	r23, r1
    14cc:	59 f4       	brne	.+22     	; 0x14e4 <reg_wizchip_cs_cbfunc+0x20>
    14ce:	e6 e0       	ldi	r30, 0x06	; 6
    14d0:	f2 e0       	ldi	r31, 0x02	; 2
    14d2:	85 e5       	ldi	r24, 0x55	; 85
    14d4:	9a e0       	ldi	r25, 0x0A	; 10
    14d6:	95 87       	std	Z+13, r25	; 0x0d
    14d8:	84 87       	std	Z+12, r24	; 0x0c
    14da:	86 e5       	ldi	r24, 0x56	; 86
    14dc:	9a e0       	ldi	r25, 0x0A	; 10
    14de:	97 87       	std	Z+15, r25	; 0x0f
    14e0:	86 87       	std	Z+14, r24	; 0x0e
    14e2:	08 95       	ret
    14e4:	e6 e0       	ldi	r30, 0x06	; 6
    14e6:	f2 e0       	ldi	r31, 0x02	; 2
    14e8:	95 87       	std	Z+13, r25	; 0x0d
    14ea:	84 87       	std	Z+12, r24	; 0x0c
    14ec:	77 87       	std	Z+15, r23	; 0x0f
    14ee:	66 87       	std	Z+14, r22	; 0x0e
    14f0:	08 95       	ret

000014f2 <reg_wizchip_spi_cbfunc>:
    14f2:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <WIZCHIP>
    14f6:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <WIZCHIP+0x1>
    14fa:	31 ff       	sbrs	r19, 1
    14fc:	fa cf       	rjmp	.-12     	; 0x14f2 <reg_wizchip_spi_cbfunc>
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	19 f0       	breq	.+6      	; 0x1508 <reg_wizchip_spi_cbfunc+0x16>
    1502:	61 15       	cp	r22, r1
    1504:	71 05       	cpc	r23, r1
    1506:	59 f4       	brne	.+22     	; 0x151e <reg_wizchip_spi_cbfunc+0x2c>
    1508:	e6 e0       	ldi	r30, 0x06	; 6
    150a:	f2 e0       	ldi	r31, 0x02	; 2
    150c:	8d e5       	ldi	r24, 0x5D	; 93
    150e:	9a e0       	ldi	r25, 0x0A	; 10
    1510:	91 8b       	std	Z+17, r25	; 0x11
    1512:	80 8b       	std	Z+16, r24	; 0x10
    1514:	8f e5       	ldi	r24, 0x5F	; 95
    1516:	9a e0       	ldi	r25, 0x0A	; 10
    1518:	93 8b       	std	Z+19, r25	; 0x13
    151a:	82 8b       	std	Z+18, r24	; 0x12
    151c:	08 95       	ret
    151e:	e6 e0       	ldi	r30, 0x06	; 6
    1520:	f2 e0       	ldi	r31, 0x02	; 2
    1522:	91 8b       	std	Z+17, r25	; 0x11
    1524:	80 8b       	std	Z+16, r24	; 0x10
    1526:	73 8b       	std	Z+19, r23	; 0x13
    1528:	62 8b       	std	Z+18, r22	; 0x12
    152a:	08 95       	ret

0000152c <reg_wizchip_spiburst_cbfunc>:
    152c:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <WIZCHIP>
    1530:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <WIZCHIP+0x1>
    1534:	31 ff       	sbrs	r19, 1
    1536:	fa cf       	rjmp	.-12     	; 0x152c <reg_wizchip_spiburst_cbfunc>
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	19 f0       	breq	.+6      	; 0x1542 <reg_wizchip_spiburst_cbfunc+0x16>
    153c:	61 15       	cp	r22, r1
    153e:	71 05       	cpc	r23, r1
    1540:	59 f4       	brne	.+22     	; 0x1558 <reg_wizchip_spiburst_cbfunc+0x2c>
    1542:	e6 e0       	ldi	r30, 0x06	; 6
    1544:	f2 e0       	ldi	r31, 0x02	; 2
    1546:	80 e6       	ldi	r24, 0x60	; 96
    1548:	9a e0       	ldi	r25, 0x0A	; 10
    154a:	95 8b       	std	Z+21, r25	; 0x15
    154c:	84 8b       	std	Z+20, r24	; 0x14
    154e:	81 e6       	ldi	r24, 0x61	; 97
    1550:	9a e0       	ldi	r25, 0x0A	; 10
    1552:	97 8b       	std	Z+23, r25	; 0x17
    1554:	86 8b       	std	Z+22, r24	; 0x16
    1556:	08 95       	ret
    1558:	e6 e0       	ldi	r30, 0x06	; 6
    155a:	f2 e0       	ldi	r31, 0x02	; 2
    155c:	95 8b       	std	Z+21, r25	; 0x15
    155e:	84 8b       	std	Z+20, r24	; 0x14
    1560:	77 8b       	std	Z+23, r23	; 0x17
    1562:	66 8b       	std	Z+22, r22	; 0x16
    1564:	08 95       	ret

00001566 <wizchip_sw_reset>:
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	62 97       	sbiw	r28, 0x12	; 18
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	26 e0       	ldi	r18, 0x06	; 6
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	ae 01       	movw	r20, r28
    1580:	43 5f       	subi	r20, 0xF3	; 243
    1582:	5f 4f       	sbci	r21, 0xFF	; 255
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	79 e0       	ldi	r23, 0x09	; 9
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	c5 dc       	rcall	.-1654   	; 0xf18 <WIZCHIP_READ_BUF>
    158e:	24 e0       	ldi	r18, 0x04	; 4
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	ae 01       	movw	r20, r28
    1594:	4f 5f       	subi	r20, 0xFF	; 255
    1596:	5f 4f       	sbci	r21, 0xFF	; 255
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	71 e0       	ldi	r23, 0x01	; 1
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	bb dc       	rcall	.-1674   	; 0xf18 <WIZCHIP_READ_BUF>
    15a2:	24 e0       	ldi	r18, 0x04	; 4
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	ae 01       	movw	r20, r28
    15a8:	4b 5f       	subi	r20, 0xFB	; 251
    15aa:	5f 4f       	sbci	r21, 0xFF	; 255
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	75 e0       	ldi	r23, 0x05	; 5
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	b1 dc       	rcall	.-1694   	; 0xf18 <WIZCHIP_READ_BUF>
    15b6:	24 e0       	ldi	r18, 0x04	; 4
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	ae 01       	movw	r20, r28
    15bc:	47 5f       	subi	r20, 0xF7	; 247
    15be:	5f 4f       	sbci	r21, 0xFF	; 255
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	7f e0       	ldi	r23, 0x0F	; 15
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a7 dc       	rcall	.-1714   	; 0xf18 <WIZCHIP_READ_BUF>
    15ca:	40 e8       	ldi	r20, 0x80	; 128
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	cb 01       	movw	r24, r22
    15d2:	30 dc       	rcall	.-1952   	; 0xe34 <WIZCHIP_WRITE>
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	cb 01       	movw	r24, r22
    15da:	c5 db       	rcall	.-2166   	; 0xd66 <WIZCHIP_READ>
    15dc:	26 e0       	ldi	r18, 0x06	; 6
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	ae 01       	movw	r20, r28
    15e2:	43 5f       	subi	r20, 0xF3	; 243
    15e4:	5f 4f       	sbci	r21, 0xFF	; 255
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	79 e0       	ldi	r23, 0x09	; 9
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	16 dd       	rcall	.-1492   	; 0x101c <WIZCHIP_WRITE_BUF>
    15f0:	24 e0       	ldi	r18, 0x04	; 4
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	ae 01       	movw	r20, r28
    15f6:	4f 5f       	subi	r20, 0xFF	; 255
    15f8:	5f 4f       	sbci	r21, 0xFF	; 255
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	71 e0       	ldi	r23, 0x01	; 1
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0c dd       	rcall	.-1512   	; 0x101c <WIZCHIP_WRITE_BUF>
    1604:	24 e0       	ldi	r18, 0x04	; 4
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	ae 01       	movw	r20, r28
    160a:	4b 5f       	subi	r20, 0xFB	; 251
    160c:	5f 4f       	sbci	r21, 0xFF	; 255
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	75 e0       	ldi	r23, 0x05	; 5
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 dd       	rcall	.-1532   	; 0x101c <WIZCHIP_WRITE_BUF>
    1618:	24 e0       	ldi	r18, 0x04	; 4
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	ae 01       	movw	r20, r28
    161e:	47 5f       	subi	r20, 0xF7	; 247
    1620:	5f 4f       	sbci	r21, 0xFF	; 255
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	7f e0       	ldi	r23, 0x0F	; 15
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	f8 dc       	rcall	.-1552   	; 0x101c <WIZCHIP_WRITE_BUF>
    162c:	62 96       	adiw	r28, 0x12	; 18
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <wizchip_init>:
    163e:	ff 92       	push	r15
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	ec 01       	movw	r28, r24
    164a:	8b 01       	movw	r16, r22
    164c:	8c df       	rcall	.-232    	; 0x1566 <wizchip_sw_reset>
    164e:	20 97       	sbiw	r28, 0x00	; 0
    1650:	69 f4       	brne	.+26     	; 0x166c <wizchip_init+0x2e>
    1652:	30 c0       	rjmp	.+96     	; 0x16b4 <wizchip_init+0x76>
    1654:	fe 01       	movw	r30, r28
    1656:	e8 0f       	add	r30, r24
    1658:	f1 1d       	adc	r31, r1
    165a:	87 fd       	sbrc	r24, 7
    165c:	fa 95       	dec	r31
    165e:	20 81       	ld	r18, Z
    1660:	92 0f       	add	r25, r18
    1662:	91 31       	cpi	r25, 0x11	; 17
    1664:	0c f0       	brlt	.+2      	; 0x1668 <wizchip_init+0x2a>
    1666:	5b c0       	rjmp	.+182    	; 0x171e <wizchip_init+0xe0>
    1668:	8f 5f       	subi	r24, 0xFF	; 255
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <wizchip_init+0x32>
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	88 30       	cpi	r24, 0x08	; 8
    1672:	84 f3       	brlt	.-32     	; 0x1654 <wizchip_init+0x16>
    1674:	f1 2c       	mov	r15, r1
    1676:	1b c0       	rjmp	.+54     	; 0x16ae <wizchip_init+0x70>
    1678:	6f 2d       	mov	r22, r15
    167a:	0f 2c       	mov	r0, r15
    167c:	00 0c       	add	r0, r0
    167e:	77 0b       	sbc	r23, r23
    1680:	fe 01       	movw	r30, r28
    1682:	e6 0f       	add	r30, r22
    1684:	f7 1f       	adc	r31, r23
    1686:	66 0f       	add	r22, r22
    1688:	77 1f       	adc	r23, r23
    168a:	66 0f       	add	r22, r22
    168c:	77 1f       	adc	r23, r23
    168e:	6f 5f       	subi	r22, 0xFF	; 255
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	66 0f       	add	r22, r22
    1694:	77 1f       	adc	r23, r23
    1696:	66 0f       	add	r22, r22
    1698:	77 1f       	adc	r23, r23
    169a:	66 0f       	add	r22, r22
    169c:	77 1f       	adc	r23, r23
    169e:	71 5e       	subi	r23, 0xE1	; 225
    16a0:	07 2e       	mov	r0, r23
    16a2:	00 0c       	add	r0, r0
    16a4:	88 0b       	sbc	r24, r24
    16a6:	99 0b       	sbc	r25, r25
    16a8:	40 81       	ld	r20, Z
    16aa:	c4 db       	rcall	.-2168   	; 0xe34 <WIZCHIP_WRITE>
    16ac:	f3 94       	inc	r15
    16ae:	87 e0       	ldi	r24, 0x07	; 7
    16b0:	8f 15       	cp	r24, r15
    16b2:	14 f7       	brge	.-60     	; 0x1678 <wizchip_init+0x3a>
    16b4:	01 15       	cp	r16, r1
    16b6:	11 05       	cpc	r17, r1
    16b8:	69 f4       	brne	.+26     	; 0x16d4 <wizchip_init+0x96>
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	33 c0       	rjmp	.+102    	; 0x1724 <wizchip_init+0xe6>
    16be:	f8 01       	movw	r30, r16
    16c0:	e8 0f       	add	r30, r24
    16c2:	f1 1d       	adc	r31, r1
    16c4:	87 fd       	sbrc	r24, 7
    16c6:	fa 95       	dec	r31
    16c8:	20 81       	ld	r18, Z
    16ca:	92 0f       	add	r25, r18
    16cc:	91 31       	cpi	r25, 0x11	; 17
    16ce:	4c f5       	brge	.+82     	; 0x1722 <wizchip_init+0xe4>
    16d0:	8f 5f       	subi	r24, 0xFF	; 255
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <wizchip_init+0x9a>
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	88 30       	cpi	r24, 0x08	; 8
    16da:	8c f3       	brlt	.-30     	; 0x16be <wizchip_init+0x80>
    16dc:	c0 e0       	ldi	r28, 0x00	; 0
    16de:	1b c0       	rjmp	.+54     	; 0x1716 <wizchip_init+0xd8>
    16e0:	6c 2f       	mov	r22, r28
    16e2:	0c 2e       	mov	r0, r28
    16e4:	00 0c       	add	r0, r0
    16e6:	77 0b       	sbc	r23, r23
    16e8:	f8 01       	movw	r30, r16
    16ea:	e6 0f       	add	r30, r22
    16ec:	f7 1f       	adc	r31, r23
    16ee:	66 0f       	add	r22, r22
    16f0:	77 1f       	adc	r23, r23
    16f2:	66 0f       	add	r22, r22
    16f4:	77 1f       	adc	r23, r23
    16f6:	6f 5f       	subi	r22, 0xFF	; 255
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	66 0f       	add	r22, r22
    16fc:	77 1f       	adc	r23, r23
    16fe:	66 0f       	add	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	66 0f       	add	r22, r22
    1704:	77 1f       	adc	r23, r23
    1706:	72 5e       	subi	r23, 0xE2	; 226
    1708:	07 2e       	mov	r0, r23
    170a:	00 0c       	add	r0, r0
    170c:	88 0b       	sbc	r24, r24
    170e:	99 0b       	sbc	r25, r25
    1710:	40 81       	ld	r20, Z
    1712:	90 db       	rcall	.-2272   	; 0xe34 <WIZCHIP_WRITE>
    1714:	cf 5f       	subi	r28, 0xFF	; 255
    1716:	c8 30       	cpi	r28, 0x08	; 8
    1718:	1c f3       	brlt	.-58     	; 0x16e0 <wizchip_init+0xa2>
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <wizchip_init+0xe6>
    171e:	8f ef       	ldi	r24, 0xFF	; 255
    1720:	01 c0       	rjmp	.+2      	; 0x1724 <wizchip_init+0xe6>
    1722:	8f ef       	ldi	r24, 0xFF	; 255
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	08 95       	ret

00001730 <wizchip_clrinterrupt>:
    1730:	cf 93       	push	r28
    1732:	c9 2f       	mov	r28, r25
    1734:	48 2f       	mov	r20, r24
    1736:	40 7f       	andi	r20, 0xF0	; 240
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	75 e1       	ldi	r23, 0x15	; 21
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	79 db       	rcall	.-2318   	; 0xe34 <WIZCHIP_WRITE>
    1742:	4c 2f       	mov	r20, r28
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	77 e1       	ldi	r23, 0x17	; 23
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	73 db       	rcall	.-2330   	; 0xe34 <WIZCHIP_WRITE>
    174e:	cf 91       	pop	r28
    1750:	08 95       	ret

00001752 <wizchip_getinterrupt>:
    1752:	cf 93       	push	r28
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	75 e1       	ldi	r23, 0x15	; 21
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	04 db       	rcall	.-2552   	; 0xd66 <WIZCHIP_READ>
    175e:	c8 2f       	mov	r28, r24
    1760:	c0 7f       	andi	r28, 0xF0	; 240
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	77 e1       	ldi	r23, 0x17	; 23
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	fd da       	rcall	.-2566   	; 0xd66 <WIZCHIP_READ>
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	98 2f       	mov	r25, r24
    1770:	88 27       	eor	r24, r24
    1772:	8c 0f       	add	r24, r28
    1774:	91 1d       	adc	r25, r1
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <wizchip_setinterruptmask>:
    177a:	cf 93       	push	r28
    177c:	c9 2f       	mov	r28, r25
    177e:	48 2f       	mov	r20, r24
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	76 e1       	ldi	r23, 0x16	; 22
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	55 db       	rcall	.-2390   	; 0xe34 <WIZCHIP_WRITE>
    178a:	4c 2f       	mov	r20, r28
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	78 e1       	ldi	r23, 0x18	; 24
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	4f db       	rcall	.-2402   	; 0xe34 <WIZCHIP_WRITE>
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <wizchip_getinterruptmask>:
    179a:	cf 93       	push	r28
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	76 e1       	ldi	r23, 0x16	; 22
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	e0 da       	rcall	.-2624   	; 0xd66 <WIZCHIP_READ>
    17a6:	c8 2f       	mov	r28, r24
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	78 e1       	ldi	r23, 0x18	; 24
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	da da       	rcall	.-2636   	; 0xd66 <WIZCHIP_READ>
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	98 2f       	mov	r25, r24
    17b6:	88 27       	eor	r24, r24
    17b8:	8c 0f       	add	r24, r28
    17ba:	91 1d       	adc	r25, r1
    17bc:	cf 91       	pop	r28
    17be:	08 95       	ret

000017c0 <wizphy_getphylink>:
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	7e e2       	ldi	r23, 0x2E	; 46
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	ce da       	rcall	.-2660   	; 0xd66 <WIZCHIP_READ>
    17ca:	80 fd       	sbrc	r24, 0
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <wizphy_getphylink+0x12>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	08 95       	ret
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	08 95       	ret

000017d6 <wizphy_getphypmode>:
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	7e e2       	ldi	r23, 0x2E	; 46
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	c3 da       	rcall	.-2682   	; 0xd66 <WIZCHIP_READ>
    17e0:	88 73       	andi	r24, 0x38	; 56
    17e2:	80 33       	cpi	r24, 0x30	; 48
    17e4:	11 f4       	brne	.+4      	; 0x17ea <wizphy_getphypmode+0x14>
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	08 95       	ret
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	08 95       	ret

000017ee <wizphy_reset>:
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	7e e2       	ldi	r23, 0x2E	; 46
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	b7 da       	rcall	.-2706   	; 0xd66 <WIZCHIP_READ>
    17f8:	48 2f       	mov	r20, r24
    17fa:	4f 77       	andi	r20, 0x7F	; 127
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	7e e2       	ldi	r23, 0x2E	; 46
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	17 db       	rcall	.-2514   	; 0xe34 <WIZCHIP_WRITE>
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	7e e2       	ldi	r23, 0x2E	; 46
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	ab da       	rcall	.-2730   	; 0xd66 <WIZCHIP_READ>
    1810:	48 2f       	mov	r20, r24
    1812:	40 68       	ori	r20, 0x80	; 128
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	7e e2       	ldi	r23, 0x2E	; 46
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0b cb       	rjmp	.-2538   	; 0xe34 <WIZCHIP_WRITE>
    181e:	08 95       	ret

00001820 <wizphy_setphyconf>:
    1820:	fc 01       	movw	r30, r24
    1822:	80 81       	ld	r24, Z
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	11 f4       	brne	.+4      	; 0x182c <wizphy_setphyconf+0xc>
    1828:	40 e4       	ldi	r20, 0x40	; 64
    182a:	01 c0       	rjmp	.+2      	; 0x182e <wizphy_setphyconf+0xe>
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	81 81       	ldd	r24, Z+1	; 0x01
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	11 f4       	brne	.+4      	; 0x1838 <wizphy_setphyconf+0x18>
    1834:	48 63       	ori	r20, 0x38	; 56
    1836:	0e c0       	rjmp	.+28     	; 0x1854 <wizphy_setphyconf+0x34>
    1838:	83 81       	ldd	r24, Z+3	; 0x03
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	39 f4       	brne	.+14     	; 0x184c <wizphy_setphyconf+0x2c>
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	11 f4       	brne	.+4      	; 0x1848 <wizphy_setphyconf+0x28>
    1844:	48 61       	ori	r20, 0x18	; 24
    1846:	06 c0       	rjmp	.+12     	; 0x1854 <wizphy_setphyconf+0x34>
    1848:	48 60       	ori	r20, 0x08	; 8
    184a:	04 c0       	rjmp	.+8      	; 0x1854 <wizphy_setphyconf+0x34>
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	09 f4       	brne	.+2      	; 0x1854 <wizphy_setphyconf+0x34>
    1852:	40 61       	ori	r20, 0x10	; 16
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	7e e2       	ldi	r23, 0x2E	; 46
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	eb da       	rcall	.-2602   	; 0xe34 <WIZCHIP_WRITE>
    185e:	c7 cf       	rjmp	.-114    	; 0x17ee <wizphy_reset>
    1860:	08 95       	ret

00001862 <wizphy_getphyconf>:
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	ec 01       	movw	r28, r24
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	7e e2       	ldi	r23, 0x2E	; 46
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	7a da       	rcall	.-2828   	; 0xd66 <WIZCHIP_READ>
    1872:	86 fb       	bst	r24, 6
    1874:	99 27       	eor	r25, r25
    1876:	90 f9       	bld	r25, 0
    1878:	98 83       	st	Y, r25
    187a:	88 73       	andi	r24, 0x38	; 56
    187c:	80 32       	cpi	r24, 0x20	; 32
    187e:	11 f0       	breq	.+4      	; 0x1884 <wizphy_getphyconf+0x22>
    1880:	88 33       	cpi	r24, 0x38	; 56
    1882:	19 f4       	brne	.+6      	; 0x188a <wizphy_getphyconf+0x28>
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	99 83       	std	Y+1, r25	; 0x01
    1888:	01 c0       	rjmp	.+2      	; 0x188c <wizphy_getphyconf+0x2a>
    188a:	19 82       	std	Y+1, r1	; 0x01
    188c:	88 31       	cpi	r24, 0x18	; 24
    188e:	21 f0       	breq	.+8      	; 0x1898 <wizphy_getphyconf+0x36>
    1890:	80 32       	cpi	r24, 0x20	; 32
    1892:	11 f0       	breq	.+4      	; 0x1898 <wizphy_getphyconf+0x36>
    1894:	80 31       	cpi	r24, 0x10	; 16
    1896:	19 f4       	brne	.+6      	; 0x189e <wizphy_getphyconf+0x3c>
    1898:	91 e0       	ldi	r25, 0x01	; 1
    189a:	9a 83       	std	Y+2, r25	; 0x02
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <wizphy_getphyconf+0x3e>
    189e:	1a 82       	std	Y+2, r1	; 0x02
    18a0:	88 31       	cpi	r24, 0x18	; 24
    18a2:	21 f0       	breq	.+8      	; 0x18ac <wizphy_getphyconf+0x4a>
    18a4:	80 32       	cpi	r24, 0x20	; 32
    18a6:	11 f0       	breq	.+4      	; 0x18ac <wizphy_getphyconf+0x4a>
    18a8:	88 30       	cpi	r24, 0x08	; 8
    18aa:	19 f4       	brne	.+6      	; 0x18b2 <wizphy_getphyconf+0x50>
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	8b 83       	std	Y+3, r24	; 0x03
    18b0:	01 c0       	rjmp	.+2      	; 0x18b4 <wizphy_getphyconf+0x52>
    18b2:	1b 82       	std	Y+3, r1	; 0x03
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	08 95       	ret

000018ba <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
    18ba:	cf 93       	push	r28
    18bc:	c8 2f       	mov	r28, r24
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	7e e2       	ldi	r23, 0x2E	; 46
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	4f da       	rcall	.-2914   	; 0xd66 <WIZCHIP_READ>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    18c8:	86 ff       	sbrs	r24, 6
    18ca:	1d c0       	rjmp	.+58     	; 0x1906 <wizphy_setphypmode+0x4c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
    18cc:	87 7c       	andi	r24, 0xC7	; 199
   if( pmode == PHY_POWER_DOWN)
    18ce:	c1 30       	cpi	r28, 0x01	; 1
    18d0:	19 f4       	brne	.+6      	; 0x18d8 <wizphy_setphypmode+0x1e>
      tmp |= PHYCFGR_OPMDC_PDOWN;
    18d2:	48 2f       	mov	r20, r24
    18d4:	40 63       	ori	r20, 0x30	; 48
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <wizphy_setphypmode+0x22>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
    18d8:	48 2f       	mov	r20, r24
    18da:	48 63       	ori	r20, 0x38	; 56
   setPHYCFGR(tmp);
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	7e e2       	ldi	r23, 0x2E	; 46
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
   wizphy_reset();
    18e4:	a7 da       	rcall	.-2738   	; 0xe34 <WIZCHIP_WRITE>
    18e6:	83 df       	rcall	.-250    	; 0x17ee <wizphy_reset>
   tmp = getPHYCFGR();
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	7e e2       	ldi	r23, 0x2E	; 46
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	3a da       	rcall	.-2956   	; 0xd66 <WIZCHIP_READ>
   if( pmode == PHY_POWER_DOWN)
    18f2:	c1 30       	cpi	r28, 0x01	; 1
    18f4:	21 f4       	brne	.+8      	; 0x18fe <wizphy_setphypmode+0x44>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    18f6:	80 73       	andi	r24, 0x30	; 48
    18f8:	41 f4       	brne	.+16     	; 0x190a <wizphy_setphypmode+0x50>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
   }
   return -1;
    18fa:	8f ef       	ldi	r24, 0xFF	; 255
    18fc:	09 c0       	rjmp	.+18     	; 0x1910 <wizphy_setphypmode+0x56>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    18fe:	88 73       	andi	r24, 0x38	; 56
    1900:	31 f4       	brne	.+12     	; 0x190e <wizphy_setphypmode+0x54>
   }
   return -1;
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	05 c0       	rjmp	.+10     	; 0x1910 <wizphy_setphypmode+0x56>

int8_t wizphy_setphypmode(uint8_t pmode)
{
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    1906:	8f ef       	ldi	r24, 0xFF	; 255
    1908:	03 c0       	rjmp	.+6      	; 0x1910 <wizphy_setphypmode+0x56>
   setPHYCFGR(tmp);
   wizphy_reset();
   tmp = getPHYCFGR();
   if( pmode == PHY_POWER_DOWN)
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <wizphy_setphypmode+0x56>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    190e:	80 e0       	ldi	r24, 0x00	; 0
   }
   return -1;
}
    1910:	cf 91       	pop	r28
    1912:	08 95       	ret

00001914 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
    191c:	00 e0       	ldi	r16, 0x00	; 0
    191e:	10 e0       	ldi	r17, 0x00	; 0
    1920:	98 01       	movw	r18, r16
   switch(cwtype)
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	80 31       	cpi	r24, 0x10	; 16
    1926:	91 05       	cpc	r25, r1
    1928:	40 f4       	brcc	.+16     	; 0x193a <ctlwizchip+0x26>
    192a:	eb 01       	movw	r28, r22
    192c:	fc 01       	movw	r30, r24
    192e:	88 27       	eor	r24, r24
    1930:	e6 56       	subi	r30, 0x66	; 102
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	8f 4f       	sbci	r24, 0xFF	; 255
    1936:	0c 94 b3 36 	jmp	0x6d66	; 0x6d66 <__tablejump2__>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	71 c0       	rjmp	.+226    	; 0x1a20 <ctlwizchip+0x10c>
#endif
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
    193e:	13 de       	rcall	.-986    	; 0x1566 <wizchip_sw_reset>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    1940:	80 e0       	ldi	r24, 0x00	; 0
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
         break;
    1942:	6e c0       	rjmp	.+220    	; 0x1a20 <ctlwizchip+0x10c>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
    1944:	cd 2b       	or	r28, r29
    1946:	21 f0       	breq	.+8      	; 0x1950 <ctlwizchip+0x3c>
         {
            ptmp[0] = (uint8_t*)arg;
    1948:	8b 01       	movw	r16, r22
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
    194a:	9b 01       	movw	r18, r22
    194c:	28 5f       	subi	r18, 0xF8	; 248
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
         }
         return wizchip_init(ptmp[0], ptmp[1]);
    1950:	b9 01       	movw	r22, r18
    1952:	c8 01       	movw	r24, r16
    1954:	74 de       	rcall	.-792    	; 0x163e <wizchip_init>
    1956:	64 c0       	rjmp	.+200    	; 0x1a20 <ctlwizchip+0x10c>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
    1958:	88 81       	ld	r24, Y
    195a:	99 81       	ldd	r25, Y+1	; 0x01
    195c:	e9 de       	rcall	.-558    	; 0x1730 <wizchip_clrinterrupt>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    195e:	80 e0       	ldi	r24, 0x00	; 0
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
         }
         return wizchip_init(ptmp[0], ptmp[1]);
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
         break;
    1960:	5f c0       	rjmp	.+190    	; 0x1a20 <ctlwizchip+0x10c>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
    1962:	f7 de       	rcall	.-530    	; 0x1752 <wizchip_getinterrupt>
    1964:	99 83       	std	Y+1, r25	; 0x01
    1966:	88 83       	st	Y, r24
    1968:	80 e0       	ldi	r24, 0x00	; 0
         break;
    196a:	5a c0       	rjmp	.+180    	; 0x1a20 <ctlwizchip+0x10c>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
    196c:	88 81       	ld	r24, Y
    196e:	99 81       	ldd	r25, Y+1	; 0x01
    1970:	04 df       	rcall	.-504    	; 0x177a <wizchip_setinterruptmask>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    1972:	80 e0       	ldi	r24, 0x00	; 0
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
         break;
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
         break;         
    1974:	55 c0       	rjmp	.+170    	; 0x1a20 <ctlwizchip+0x10c>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
    1976:	11 df       	rcall	.-478    	; 0x179a <wizchip_getinterruptmask>
    1978:	99 83       	std	Y+1, r25	; 0x01
    197a:	88 83       	st	Y, r24
    197c:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    197e:	50 c0       	rjmp	.+160    	; 0x1a20 <ctlwizchip+0x10c>
         break;
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
    1980:	49 81       	ldd	r20, Y+1	; 0x01
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	73 e1       	ldi	r23, 0x13	; 19
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	54 da       	rcall	.-2904   	; 0xe34 <WIZCHIP_WRITE>
    198c:	48 81       	ld	r20, Y
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	74 e1       	ldi	r23, 0x14	; 20
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	4e da       	rcall	.-2916   	; 0xe34 <WIZCHIP_WRITE>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    1998:	80 e0       	ldi	r24, 0x00	; 0
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
         break;
    199a:	42 c0       	rjmp	.+132    	; 0x1a20 <ctlwizchip+0x10c>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	73 e1       	ldi	r23, 0x13	; 19
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	e0 d9       	rcall	.-3136   	; 0xd66 <WIZCHIP_READ>
    19a6:	08 2f       	mov	r16, r24
    19a8:	10 e0       	ldi	r17, 0x00	; 0
    19aa:	10 2f       	mov	r17, r16
    19ac:	00 27       	eor	r16, r16
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	74 e1       	ldi	r23, 0x14	; 20
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	d7 d9       	rcall	.-3154   	; 0xd66 <WIZCHIP_READ>
    19b8:	08 0f       	add	r16, r24
    19ba:	11 1d       	adc	r17, r1
    19bc:	19 83       	std	Y+1, r17	; 0x01
    19be:	08 83       	st	Y, r16
    19c0:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    19c2:	2e c0       	rjmp	.+92     	; 0x1a20 <ctlwizchip+0x10c>
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
         break;
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
    19c4:	e6 e0       	ldi	r30, 0x06	; 6
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
    19c6:	f2 e0       	ldi	r31, 0x02	; 2
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	88 83       	st	Y, r24
    19cc:	83 81       	ldd	r24, Z+3	; 0x03
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
    19ce:	89 83       	std	Y+1, r24	; 0x01
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
    19d0:	84 81       	ldd	r24, Z+4	; 0x04
    19d2:	8a 83       	std	Y+2, r24	; 0x02
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
    19d4:	85 81       	ldd	r24, Z+5	; 0x05
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
    19d6:	8b 83       	std	Y+3, r24	; 0x03
    19d8:	86 81       	ldd	r24, Z+6	; 0x06
         ((uint8_t*)arg)[5] = 0;
    19da:	8c 83       	std	Y+4, r24	; 0x04
         break;
    19dc:	1d 82       	std	Y+5, r1	; 0x05
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	1f c0       	rjmp	.+62     	; 0x1a20 <ctlwizchip+0x10c>
         break;
    19e2:	05 df       	rcall	.-502    	; 0x17ee <wizphy_reset>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	1c c0       	rjmp	.+56     	; 0x1a20 <ctlwizchip+0x10c>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    19e8:	cb 01       	movw	r24, r22
      case CW_RESET_PHY:
         wizphy_reset();
         break;
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
         break;
    19ea:	1a df       	rcall	.-460    	; 0x1820 <wizphy_setphyconf>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	18 c0       	rjmp	.+48     	; 0x1a20 <ctlwizchip+0x10c>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    19f0:	cb 01       	movw	r24, r22
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
         break;
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
         break;
    19f2:	37 df       	rcall	.-402    	; 0x1862 <wizphy_getphyconf>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	14 c0       	rjmp	.+40     	; 0x1a20 <ctlwizchip+0x10c>
    19f8:	88 81       	ld	r24, Y
    19fa:	5f df       	rcall	.-322    	; 0x18ba <wizphy_setphypmode>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
    19fc:	11 c0       	rjmp	.+34     	; 0x1a20 <ctlwizchip+0x10c>
    19fe:	eb de       	rcall	.-554    	; 0x17d6 <wizphy_getphypmode>
         if((int8_t)tmp == -1) return -1;
    1a00:	8f 3f       	cpi	r24, 0xFF	; 255
    1a02:	59 f0       	breq	.+22     	; 0x1a1a <ctlwizchip+0x106>
         *(uint8_t*)arg = tmp;
    1a04:	88 83       	st	Y, r24
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    1a06:	80 e0       	ldi	r24, 0x00	; 0
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
    1a08:	0b c0       	rjmp	.+22     	; 0x1a20 <ctlwizchip+0x10c>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
    1a0a:	da de       	rcall	.-588    	; 0x17c0 <wizphy_getphylink>
    1a0c:	8f 3f       	cpi	r24, 0xFF	; 255
         if((int8_t)tmp == -1) return -1;
    1a0e:	39 f0       	breq	.+14     	; 0x1a1e <ctlwizchip+0x10a>
    1a10:	88 83       	st	Y, r24
         *(uint8_t*)arg = tmp;
    1a12:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    1a14:	05 c0       	rjmp	.+10     	; 0x1a20 <ctlwizchip+0x10c>
         break;
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
    1a16:	80 e0       	ldi	r24, 0x00	; 0
   #endif      
      default:
         return -1;
   }
   return 0;
    1a18:	03 c0       	rjmp	.+6      	; 0x1a20 <ctlwizchip+0x10c>
    1a1a:	8f ef       	ldi	r24, 0xFF	; 255
         return wizphy_setphypmode(*(uint8_t*)arg);
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
         if((int8_t)tmp == -1) return -1;
    1a1c:	01 c0       	rjmp	.+2      	; 0x1a20 <ctlwizchip+0x10c>
    1a1e:	8f ef       	ldi	r24, 0xFF	; 255
         *(uint8_t*)arg = tmp;
         break;
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
         if((int8_t)tmp == -1) return -1;
    1a20:	df 91       	pop	r29
   #endif      
      default:
         return -1;
   }
   return 0;
}
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	08 95       	ret

00001a2a <wizchip_setnetinfo>:
    1a2a:	cf 93       	push	r28
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    1a2c:	df 93       	push	r29
    1a2e:	ec 01       	movw	r28, r24
   setSHAR(pnetinfo->mac);
    1a30:	26 e0       	ldi	r18, 0x06	; 6
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	ac 01       	movw	r20, r24
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	79 e0       	ldi	r23, 0x09	; 9
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	ee da       	rcall	.-2596   	; 0x101c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
    1a40:	ae 01       	movw	r20, r28
    1a42:	42 5f       	subi	r20, 0xF2	; 242
    1a44:	5f 4f       	sbci	r21, 0xFF	; 255
    1a46:	24 e0       	ldi	r18, 0x04	; 4
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	71 e0       	ldi	r23, 0x01	; 1
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	e4 da       	rcall	.-2616   	; 0x101c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
    1a54:	ae 01       	movw	r20, r28
    1a56:	46 5f       	subi	r20, 0xF6	; 246
    1a58:	5f 4f       	sbci	r21, 0xFF	; 255
    1a5a:	24 e0       	ldi	r18, 0x04	; 4
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	75 e0       	ldi	r23, 0x05	; 5
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	da da       	rcall	.-2636   	; 0x101c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
    1a68:	ae 01       	movw	r20, r28
    1a6a:	4a 5f       	subi	r20, 0xFA	; 250
    1a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6e:	24 e0       	ldi	r18, 0x04	; 4
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	7f e0       	ldi	r23, 0x0F	; 15
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	d0 da       	rcall	.-2656   	; 0x101c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
    1a7c:	8a 89       	ldd	r24, Y+18	; 0x12
    1a7e:	e9 e8       	ldi	r30, 0x89	; 137
    1a80:	fd e0       	ldi	r31, 0x0D	; 13
    1a82:	80 83       	st	Z, r24
   _DNS_[1] = pnetinfo->dns[1];
    1a84:	8b 89       	ldd	r24, Y+19	; 0x13
    1a86:	81 83       	std	Z+1, r24	; 0x01
   _DNS_[2] = pnetinfo->dns[2];
    1a88:	8c 89       	ldd	r24, Y+20	; 0x14
    1a8a:	82 83       	std	Z+2, r24	; 0x02
   _DNS_[3] = pnetinfo->dns[3];
    1a8c:	8d 89       	ldd	r24, Y+21	; 0x15
    1a8e:	83 83       	std	Z+3, r24	; 0x03
   _DHCP_   = pnetinfo->dhcp;
    1a90:	8e 89       	ldd	r24, Y+22	; 0x16
    1a92:	80 93 88 0d 	sts	0x0D88, r24	; 0x800d88 <_DHCP_>
}
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	08 95       	ret

00001a9c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	ec 01       	movw	r28, r24
   getSHAR(pnetinfo->mac);
    1aa2:	26 e0       	ldi	r18, 0x06	; 6
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	ac 01       	movw	r20, r24
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	79 e0       	ldi	r23, 0x09	; 9
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	33 da       	rcall	.-2970   	; 0xf18 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
    1ab2:	ae 01       	movw	r20, r28
    1ab4:	42 5f       	subi	r20, 0xF2	; 242
    1ab6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab8:	24 e0       	ldi	r18, 0x04	; 4
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	71 e0       	ldi	r23, 0x01	; 1
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	29 da       	rcall	.-2990   	; 0xf18 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
    1ac6:	ae 01       	movw	r20, r28
    1ac8:	46 5f       	subi	r20, 0xF6	; 246
    1aca:	5f 4f       	sbci	r21, 0xFF	; 255
    1acc:	24 e0       	ldi	r18, 0x04	; 4
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	75 e0       	ldi	r23, 0x05	; 5
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	1f da       	rcall	.-3010   	; 0xf18 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
    1ada:	ae 01       	movw	r20, r28
    1adc:	4a 5f       	subi	r20, 0xFA	; 250
    1ade:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae0:	24 e0       	ldi	r18, 0x04	; 4
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	7f e0       	ldi	r23, 0x0F	; 15
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	15 da       	rcall	.-3030   	; 0xf18 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
    1aee:	e9 e8       	ldi	r30, 0x89	; 137
    1af0:	fd e0       	ldi	r31, 0x0D	; 13
    1af2:	80 81       	ld	r24, Z
    1af4:	8a 8b       	std	Y+18, r24	; 0x12
   pnetinfo->dns[1]= _DNS_[1];
    1af6:	81 81       	ldd	r24, Z+1	; 0x01
    1af8:	8b 8b       	std	Y+19, r24	; 0x13
   pnetinfo->dns[2]= _DNS_[2];
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	8c 8b       	std	Y+20, r24	; 0x14
   pnetinfo->dns[3]= _DNS_[3];
    1afe:	83 81       	ldd	r24, Z+3	; 0x03
    1b00:	8d 8b       	std	Y+21, r24	; 0x15
   pnetinfo->dhcp  = _DHCP_;
    1b02:	80 91 88 0d 	lds	r24, 0x0D88	; 0x800d88 <_DHCP_>
    1b06:	8e 8b       	std	Y+22, r24	; 0x16
}
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	08 95       	ret

00001b0e <NewMessageData>:
  else
    rc = FAILURE;
    
exit:
  return rc;
}
    1b0e:	fc 01       	movw	r30, r24
    1b10:	73 83       	std	Z+3, r23	; 0x03
    1b12:	62 83       	std	Z+2, r22	; 0x02
    1b14:	51 83       	std	Z+1, r21	; 0x01
    1b16:	40 83       	st	Z, r20
    1b18:	08 95       	ret

00001b1a <getNextPacketId>:
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	80 81       	ld	r24, Z
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	a2 81       	ldd	r26, Z+2	; 0x02
    1b22:	b3 81       	ldd	r27, Z+3	; 0x03
    1b24:	8f 3f       	cpi	r24, 0xFF	; 255
    1b26:	2f ef       	ldi	r18, 0xFF	; 255
    1b28:	92 07       	cpc	r25, r18
    1b2a:	a1 05       	cpc	r26, r1
    1b2c:	b1 05       	cpc	r27, r1
    1b2e:	39 f0       	breq	.+14     	; 0x1b3e <getNextPacketId+0x24>
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	6f 5f       	subi	r22, 0xFF	; 255
    1b36:	7f 4f       	sbci	r23, 0xFF	; 255
    1b38:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3c:	04 c0       	rjmp	.+8      	; 0x1b46 <getNextPacketId+0x2c>
    1b3e:	61 e0       	ldi	r22, 0x01	; 1
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	60 83       	st	Z, r22
    1b48:	71 83       	std	Z+1, r23	; 0x01
    1b4a:	82 83       	std	Z+2, r24	; 0x02
    1b4c:	93 83       	std	Z+3, r25	; 0x03
    1b4e:	08 95       	ret

00001b50 <sendPacket>:
    1b50:	2f 92       	push	r2
    1b52:	3f 92       	push	r3
    1b54:	4f 92       	push	r4
    1b56:	5f 92       	push	r5
    1b58:	6f 92       	push	r6
    1b5a:	7f 92       	push	r7
    1b5c:	8f 92       	push	r8
    1b5e:	9f 92       	push	r9
    1b60:	af 92       	push	r10
    1b62:	bf 92       	push	r11
    1b64:	cf 92       	push	r12
    1b66:	df 92       	push	r13
    1b68:	ef 92       	push	r14
    1b6a:	ff 92       	push	r15
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	ec 01       	movw	r28, r24
    1b76:	2a 01       	movw	r4, r20
    1b78:	3b 01       	movw	r6, r22
    1b7a:	19 01       	movw	r2, r18
    1b7c:	81 2c       	mov	r8, r1
    1b7e:	91 2c       	mov	r9, r1
    1b80:	54 01       	movw	r10, r8
    1b82:	1a c0       	rjmp	.+52     	; 0x1bb8 <sendPacket+0x68>
    1b84:	ef a5       	ldd	r30, Y+47	; 0x2f
    1b86:	f8 a9       	ldd	r31, Y+48	; 0x30
    1b88:	c6 80       	ldd	r12, Z+6	; 0x06
    1b8a:	d7 80       	ldd	r13, Z+7	; 0x07
    1b8c:	c1 01       	movw	r24, r2
    1b8e:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <left_ms>
    1b92:	7b 01       	movw	r14, r22
    1b94:	8c 01       	movw	r16, r24
    1b96:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b98:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	68 0d       	add	r22, r8
    1b9e:	79 1d       	adc	r23, r9
    1ba0:	a3 01       	movw	r20, r6
    1ba2:	92 01       	movw	r18, r4
    1ba4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba8:	f6 01       	movw	r30, r12
    1baa:	19 95       	eicall
    1bac:	99 23       	and	r25, r25
    1bae:	74 f0       	brlt	.+28     	; 0x1bcc <sendPacket+0x7c>
    1bb0:	86 0e       	add	r8, r22
    1bb2:	97 1e       	adc	r9, r23
    1bb4:	a8 1e       	adc	r10, r24
    1bb6:	b9 1e       	adc	r11, r25
    1bb8:	84 14       	cp	r8, r4
    1bba:	95 04       	cpc	r9, r5
    1bbc:	a6 04       	cpc	r10, r6
    1bbe:	b7 04       	cpc	r11, r7
    1bc0:	2c f4       	brge	.+10     	; 0x1bcc <sendPacket+0x7c>
    1bc2:	c1 01       	movw	r24, r2
    1bc4:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <expired>
    1bc8:	88 23       	and	r24, r24
    1bca:	e1 f2       	breq	.-72     	; 0x1b84 <sendPacket+0x34>
    1bcc:	84 14       	cp	r8, r4
    1bce:	95 04       	cpc	r9, r5
    1bd0:	a6 04       	cpc	r10, r6
    1bd2:	b7 04       	cpc	r11, r7
    1bd4:	61 f4       	brne	.+24     	; 0x1bee <sendPacket+0x9e>
    1bd6:	48 89       	ldd	r20, Y+16	; 0x10
    1bd8:	59 89       	ldd	r21, Y+17	; 0x11
    1bda:	6a 89       	ldd	r22, Y+18	; 0x12
    1bdc:	7b 89       	ldd	r23, Y+19	; 0x13
    1bde:	ce 01       	movw	r24, r28
    1be0:	c1 96       	adiw	r24, 0x31	; 49
    1be2:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <countdown>
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	cb 01       	movw	r24, r22
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <sendPacket+0xa4>
    1bee:	6f ef       	ldi	r22, 0xFF	; 255
    1bf0:	7f ef       	ldi	r23, 0xFF	; 255
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	1f 91       	pop	r17
    1bfa:	0f 91       	pop	r16
    1bfc:	ff 90       	pop	r15
    1bfe:	ef 90       	pop	r14
    1c00:	df 90       	pop	r13
    1c02:	cf 90       	pop	r12
    1c04:	bf 90       	pop	r11
    1c06:	af 90       	pop	r10
    1c08:	9f 90       	pop	r9
    1c0a:	8f 90       	pop	r8
    1c0c:	7f 90       	pop	r7
    1c0e:	6f 90       	pop	r6
    1c10:	5f 90       	pop	r5
    1c12:	4f 90       	pop	r4
    1c14:	3f 90       	pop	r3
    1c16:	2f 90       	pop	r2
    1c18:	08 95       	ret

00001c1a <MQTTClient>:
    1c1a:	4f 92       	push	r4
    1c1c:	5f 92       	push	r5
    1c1e:	6f 92       	push	r6
    1c20:	7f 92       	push	r7
    1c22:	af 92       	push	r10
    1c24:	bf 92       	push	r11
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	dc 01       	movw	r26, r24
    1c34:	d0 96       	adiw	r26, 0x30	; 48
    1c36:	7c 93       	st	X, r23
    1c38:	6e 93       	st	-X, r22
    1c3a:	9f 97       	sbiw	r26, 0x2f	; 47
    1c3c:	41 2c       	mov	r4, r1
    1c3e:	51 2c       	mov	r5, r1
    1c40:	32 01       	movw	r6, r4
    1c42:	0e c0       	rjmp	.+28     	; 0x1c60 <MQTTClient+0x46>
    1c44:	f2 01       	movw	r30, r4
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	ea 0f       	add	r30, r26
    1c50:	fb 1f       	adc	r31, r27
    1c52:	12 8e       	std	Z+26, r1	; 0x1a
    1c54:	11 8e       	std	Z+25, r1	; 0x19
    1c56:	8f ef       	ldi	r24, 0xFF	; 255
    1c58:	48 1a       	sub	r4, r24
    1c5a:	58 0a       	sbc	r5, r24
    1c5c:	68 0a       	sbc	r6, r24
    1c5e:	78 0a       	sbc	r7, r24
    1c60:	85 e0       	ldi	r24, 0x05	; 5
    1c62:	48 16       	cp	r4, r24
    1c64:	51 04       	cpc	r5, r1
    1c66:	61 04       	cpc	r6, r1
    1c68:	71 04       	cpc	r7, r1
    1c6a:	64 f3       	brlt	.-40     	; 0x1c44 <MQTTClient+0x2a>
    1c6c:	14 96       	adiw	r26, 0x04	; 4
    1c6e:	2d 93       	st	X+, r18
    1c70:	3d 93       	st	X+, r19
    1c72:	4d 93       	st	X+, r20
    1c74:	5c 93       	st	X, r21
    1c76:	17 97       	sbiw	r26, 0x07	; 7
    1c78:	1d 96       	adiw	r26, 0x0d	; 13
    1c7a:	1c 93       	st	X, r17
    1c7c:	0e 93       	st	-X, r16
    1c7e:	1c 97       	sbiw	r26, 0x0c	; 12
    1c80:	19 96       	adiw	r26, 0x09	; 9
    1c82:	fc 92       	st	X, r15
    1c84:	ee 92       	st	-X, r14
    1c86:	18 97       	sbiw	r26, 0x08	; 8
    1c88:	1f 96       	adiw	r26, 0x0f	; 15
    1c8a:	dc 92       	st	X, r13
    1c8c:	ce 92       	st	-X, r12
    1c8e:	1e 97       	sbiw	r26, 0x0e	; 14
    1c90:	1b 96       	adiw	r26, 0x0b	; 11
    1c92:	bc 92       	st	X, r11
    1c94:	ae 92       	st	-X, r10
    1c96:	1a 97       	sbiw	r26, 0x0a	; 10
    1c98:	55 96       	adiw	r26, 0x15	; 21
    1c9a:	1d 92       	st	X+, r1
    1c9c:	1d 92       	st	X+, r1
    1c9e:	1d 92       	st	X+, r1
    1ca0:	1c 92       	st	X, r1
    1ca2:	58 97       	sbiw	r26, 0x18	; 24
    1ca4:	54 96       	adiw	r26, 0x14	; 20
    1ca6:	1c 92       	st	X, r1
    1ca8:	54 97       	sbiw	r26, 0x14	; 20
    1caa:	9e 96       	adiw	r26, 0x2e	; 46
    1cac:	1c 92       	st	X, r1
    1cae:	1e 92       	st	-X, r1
    1cb0:	9d 97       	sbiw	r26, 0x2d	; 45
    1cb2:	cd 01       	movw	r24, r26
    1cb4:	c1 96       	adiw	r24, 0x31	; 49
    1cb6:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <InitTimer>
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	ff 90       	pop	r15
    1cc0:	ef 90       	pop	r14
    1cc2:	df 90       	pop	r13
    1cc4:	cf 90       	pop	r12
    1cc6:	bf 90       	pop	r11
    1cc8:	af 90       	pop	r10
    1cca:	7f 90       	pop	r7
    1ccc:	6f 90       	pop	r6
    1cce:	5f 90       	pop	r5
    1cd0:	4f 90       	pop	r4
    1cd2:	08 95       	ret

00001cd4 <decodePacket>:
    1cd4:	2f 92       	push	r2
    1cd6:	3f 92       	push	r3
    1cd8:	4f 92       	push	r4
    1cda:	5f 92       	push	r5
    1cdc:	6f 92       	push	r6
    1cde:	7f 92       	push	r7
    1ce0:	8f 92       	push	r8
    1ce2:	9f 92       	push	r9
    1ce4:	af 92       	push	r10
    1ce6:	bf 92       	push	r11
    1ce8:	cf 92       	push	r12
    1cea:	df 92       	push	r13
    1cec:	ef 92       	push	r14
    1cee:	ff 92       	push	r15
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <decodePacket+0x26>
    1cfa:	1f 92       	push	r1
    1cfc:	1f 92       	push	r1
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	1c 01       	movw	r2, r24
    1d04:	6b 01       	movw	r12, r22
    1d06:	2a 83       	std	Y+2, r18	; 0x02
    1d08:	3b 83       	std	Y+3, r19	; 0x03
    1d0a:	4c 83       	std	Y+4, r20	; 0x04
    1d0c:	5d 83       	std	Y+5, r21	; 0x05
    1d0e:	db 01       	movw	r26, r22
    1d10:	1d 92       	st	X+, r1
    1d12:	1d 92       	st	X+, r1
    1d14:	1d 92       	st	X+, r1
    1d16:	1c 92       	st	X, r1
    1d18:	13 97       	sbiw	r26, 0x03	; 3
    1d1a:	41 2c       	mov	r4, r1
    1d1c:	51 2c       	mov	r5, r1
    1d1e:	32 01       	movw	r6, r4
    1d20:	81 2c       	mov	r8, r1
    1d22:	91 2c       	mov	r9, r1
    1d24:	54 01       	movw	r10, r8
    1d26:	83 94       	inc	r8
    1d28:	bf ef       	ldi	r27, 0xFF	; 255
    1d2a:	4b 1a       	sub	r4, r27
    1d2c:	5b 0a       	sbc	r5, r27
    1d2e:	6b 0a       	sbc	r6, r27
    1d30:	7b 0a       	sbc	r7, r27
    1d32:	e5 e0       	ldi	r30, 0x05	; 5
    1d34:	4e 16       	cp	r4, r30
    1d36:	51 04       	cpc	r5, r1
    1d38:	61 04       	cpc	r6, r1
    1d3a:	71 04       	cpc	r7, r1
    1d3c:	0c f0       	brlt	.+2      	; 0x1d40 <decodePacket+0x6c>
    1d3e:	51 c0       	rjmp	.+162    	; 0x1de2 <decodePacket+0x10e>
    1d40:	d1 01       	movw	r26, r2
    1d42:	9f 96       	adiw	r26, 0x2f	; 47
    1d44:	8d 91       	ld	r24, X+
    1d46:	9c 91       	ld	r25, X
    1d48:	d0 97       	sbiw	r26, 0x30	; 48
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	14 96       	adiw	r26, 0x04	; 4
    1d4e:	ed 91       	ld	r30, X+
    1d50:	fc 91       	ld	r31, X
    1d52:	15 97       	sbiw	r26, 0x05	; 5
    1d54:	ea 80       	ldd	r14, Y+2	; 0x02
    1d56:	fb 80       	ldd	r15, Y+3	; 0x03
    1d58:	0c 81       	ldd	r16, Y+4	; 0x04
    1d5a:	1d 81       	ldd	r17, Y+5	; 0x05
    1d5c:	21 e0       	ldi	r18, 0x01	; 1
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	50 e0       	ldi	r21, 0x00	; 0
    1d64:	be 01       	movw	r22, r28
    1d66:	6f 5f       	subi	r22, 0xFF	; 255
    1d68:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6a:	19 95       	eicall
    1d6c:	61 30       	cpi	r22, 0x01	; 1
    1d6e:	71 05       	cpc	r23, r1
    1d70:	81 05       	cpc	r24, r1
    1d72:	91 05       	cpc	r25, r1
    1d74:	b1 f5       	brne	.+108    	; 0x1de2 <decodePacket+0x10e>
    1d76:	f9 80       	ldd	r15, Y+1	; 0x01
    1d78:	af 2d       	mov	r26, r15
    1d7a:	af 77       	andi	r26, 0x7F	; 127
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	a5 01       	movw	r20, r10
    1d80:	94 01       	movw	r18, r8
    1d82:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <__muluhisi3>
    1d86:	f6 01       	movw	r30, r12
    1d88:	00 81       	ld	r16, Z
    1d8a:	11 81       	ldd	r17, Z+1	; 0x01
    1d8c:	22 81       	ldd	r18, Z+2	; 0x02
    1d8e:	33 81       	ldd	r19, Z+3	; 0x03
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	80 0f       	add	r24, r16
    1d96:	91 1f       	adc	r25, r17
    1d98:	a2 1f       	adc	r26, r18
    1d9a:	b3 1f       	adc	r27, r19
    1d9c:	80 83       	st	Z, r24
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	a2 83       	std	Z+2, r26	; 0x02
    1da2:	b3 83       	std	Z+3, r27	; 0x03
    1da4:	88 0c       	add	r8, r8
    1da6:	99 1c       	adc	r9, r9
    1da8:	aa 1c       	adc	r10, r10
    1daa:	bb 1c       	adc	r11, r11
    1dac:	88 0c       	add	r8, r8
    1dae:	99 1c       	adc	r9, r9
    1db0:	aa 1c       	adc	r10, r10
    1db2:	bb 1c       	adc	r11, r11
    1db4:	88 0c       	add	r8, r8
    1db6:	99 1c       	adc	r9, r9
    1db8:	aa 1c       	adc	r10, r10
    1dba:	bb 1c       	adc	r11, r11
    1dbc:	88 0c       	add	r8, r8
    1dbe:	99 1c       	adc	r9, r9
    1dc0:	aa 1c       	adc	r10, r10
    1dc2:	bb 1c       	adc	r11, r11
    1dc4:	88 0c       	add	r8, r8
    1dc6:	99 1c       	adc	r9, r9
    1dc8:	aa 1c       	adc	r10, r10
    1dca:	bb 1c       	adc	r11, r11
    1dcc:	88 0c       	add	r8, r8
    1dce:	99 1c       	adc	r9, r9
    1dd0:	aa 1c       	adc	r10, r10
    1dd2:	bb 1c       	adc	r11, r11
    1dd4:	88 0c       	add	r8, r8
    1dd6:	99 1c       	adc	r9, r9
    1dd8:	aa 1c       	adc	r10, r10
    1dda:	bb 1c       	adc	r11, r11
    1ddc:	ff 20       	and	r15, r15
    1dde:	0c f4       	brge	.+2      	; 0x1de2 <decodePacket+0x10e>
    1de0:	a3 cf       	rjmp	.-186    	; 0x1d28 <decodePacket+0x54>
    1de2:	c3 01       	movw	r24, r6
    1de4:	b2 01       	movw	r22, r4
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	df 90       	pop	r13
    1dfe:	cf 90       	pop	r12
    1e00:	bf 90       	pop	r11
    1e02:	af 90       	pop	r10
    1e04:	9f 90       	pop	r9
    1e06:	8f 90       	pop	r8
    1e08:	7f 90       	pop	r7
    1e0a:	6f 90       	pop	r6
    1e0c:	5f 90       	pop	r5
    1e0e:	4f 90       	pop	r4
    1e10:	3f 90       	pop	r3
    1e12:	2f 90       	pop	r2
    1e14:	08 95       	ret

00001e16 <readPacket>:
    1e16:	4f 92       	push	r4
    1e18:	5f 92       	push	r5
    1e1a:	6f 92       	push	r6
    1e1c:	7f 92       	push	r7
    1e1e:	8f 92       	push	r8
    1e20:	9f 92       	push	r9
    1e22:	af 92       	push	r10
    1e24:	bf 92       	push	r11
    1e26:	cf 92       	push	r12
    1e28:	df 92       	push	r13
    1e2a:	ef 92       	push	r14
    1e2c:	ff 92       	push	r15
    1e2e:	0f 93       	push	r16
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <readPacket+0x22>
    1e38:	1f 92       	push	r1
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	6c 01       	movw	r12, r24
    1e40:	5b 01       	movw	r10, r22
    1e42:	19 82       	std	Y+1, r1	; 0x01
    1e44:	1a 82       	std	Y+2, r1	; 0x02
    1e46:	1b 82       	std	Y+3, r1	; 0x03
    1e48:	1c 82       	std	Y+4, r1	; 0x04
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	9f 96       	adiw	r26, 0x2f	; 47
    1e4e:	ed 91       	ld	r30, X+
    1e50:	fc 91       	ld	r31, X
    1e52:	d0 97       	sbiw	r26, 0x30	; 48
    1e54:	84 80       	ldd	r8, Z+4	; 0x04
    1e56:	95 80       	ldd	r9, Z+5	; 0x05
    1e58:	cb 01       	movw	r24, r22
    1e5a:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <left_ms>
    1e5e:	7b 01       	movw	r14, r22
    1e60:	8c 01       	movw	r16, r24
    1e62:	f6 01       	movw	r30, r12
    1e64:	66 85       	ldd	r22, Z+14	; 0x0e
    1e66:	77 85       	ldd	r23, Z+15	; 0x0f
    1e68:	21 e0       	ldi	r18, 0x01	; 1
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	87 a5       	ldd	r24, Z+47	; 0x2f
    1e72:	90 a9       	ldd	r25, Z+48	; 0x30
    1e74:	f4 01       	movw	r30, r8
    1e76:	19 95       	eicall
    1e78:	61 30       	cpi	r22, 0x01	; 1
    1e7a:	71 05       	cpc	r23, r1
    1e7c:	81 05       	cpc	r24, r1
    1e7e:	91 05       	cpc	r25, r1
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <readPacket+0x6e>
    1e82:	55 c0       	rjmp	.+170    	; 0x1f2e <readPacket+0x118>
    1e84:	c5 01       	movw	r24, r10
    1e86:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <left_ms>
    1e8a:	9b 01       	movw	r18, r22
    1e8c:	ac 01       	movw	r20, r24
    1e8e:	be 01       	movw	r22, r28
    1e90:	6f 5f       	subi	r22, 0xFF	; 255
    1e92:	7f 4f       	sbci	r23, 0xFF	; 255
    1e94:	c6 01       	movw	r24, r12
    1e96:	1e df       	rcall	.-452    	; 0x1cd4 <decodePacket>
    1e98:	d6 01       	movw	r26, r12
    1e9a:	1e 96       	adiw	r26, 0x0e	; 14
    1e9c:	8d 91       	ld	r24, X+
    1e9e:	9c 91       	ld	r25, X
    1ea0:	1f 97       	sbiw	r26, 0x0f	; 15
    1ea2:	49 81       	ldd	r20, Y+1	; 0x01
    1ea4:	5a 81       	ldd	r21, Y+2	; 0x02
    1ea6:	6b 81       	ldd	r22, Y+3	; 0x03
    1ea8:	7c 81       	ldd	r23, Y+4	; 0x04
    1eaa:	01 96       	adiw	r24, 0x01	; 1
    1eac:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <MQTTPacket_encode>
    1eb0:	2b 01       	movw	r4, r22
    1eb2:	3c 01       	movw	r6, r24
    1eb4:	bf ef       	ldi	r27, 0xFF	; 255
    1eb6:	4b 1a       	sub	r4, r27
    1eb8:	5b 0a       	sbc	r5, r27
    1eba:	6b 0a       	sbc	r6, r27
    1ebc:	7b 0a       	sbc	r7, r27
    1ebe:	49 81       	ldd	r20, Y+1	; 0x01
    1ec0:	5a 81       	ldd	r21, Y+2	; 0x02
    1ec2:	6b 81       	ldd	r22, Y+3	; 0x03
    1ec4:	7c 81       	ldd	r23, Y+4	; 0x04
    1ec6:	14 16       	cp	r1, r20
    1ec8:	15 06       	cpc	r1, r21
    1eca:	16 06       	cpc	r1, r22
    1ecc:	17 06       	cpc	r1, r23
    1ece:	1c f5       	brge	.+70     	; 0x1f16 <readPacket+0x100>
    1ed0:	d6 01       	movw	r26, r12
    1ed2:	9f 96       	adiw	r26, 0x2f	; 47
    1ed4:	ed 91       	ld	r30, X+
    1ed6:	fc 91       	ld	r31, X
    1ed8:	d0 97       	sbiw	r26, 0x30	; 48
    1eda:	84 80       	ldd	r8, Z+4	; 0x04
    1edc:	95 80       	ldd	r9, Z+5	; 0x05
    1ede:	c5 01       	movw	r24, r10
    1ee0:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <left_ms>
    1ee4:	7b 01       	movw	r14, r22
    1ee6:	8c 01       	movw	r16, r24
    1ee8:	f6 01       	movw	r30, r12
    1eea:	86 85       	ldd	r24, Z+14	; 0x0e
    1eec:	97 85       	ldd	r25, Z+15	; 0x0f
    1eee:	29 81       	ldd	r18, Y+1	; 0x01
    1ef0:	3a 81       	ldd	r19, Y+2	; 0x02
    1ef2:	4b 81       	ldd	r20, Y+3	; 0x03
    1ef4:	5c 81       	ldd	r21, Y+4	; 0x04
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	64 0d       	add	r22, r4
    1efa:	75 1d       	adc	r23, r5
    1efc:	87 a5       	ldd	r24, Z+47	; 0x2f
    1efe:	90 a9       	ldd	r25, Z+48	; 0x30
    1f00:	f4 01       	movw	r30, r8
    1f02:	19 95       	eicall
    1f04:	09 81       	ldd	r16, Y+1	; 0x01
    1f06:	1a 81       	ldd	r17, Y+2	; 0x02
    1f08:	2b 81       	ldd	r18, Y+3	; 0x03
    1f0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f0c:	60 17       	cp	r22, r16
    1f0e:	71 07       	cpc	r23, r17
    1f10:	82 07       	cpc	r24, r18
    1f12:	93 07       	cpc	r25, r19
    1f14:	81 f4       	brne	.+32     	; 0x1f36 <readPacket+0x120>
    1f16:	d6 01       	movw	r26, r12
    1f18:	1e 96       	adiw	r26, 0x0e	; 14
    1f1a:	ed 91       	ld	r30, X+
    1f1c:	fc 91       	ld	r31, X
    1f1e:	1f 97       	sbiw	r26, 0x0f	; 15
    1f20:	60 81       	ld	r22, Z
    1f22:	62 95       	swap	r22
    1f24:	6f 70       	andi	r22, 0x0F	; 15
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	07 c0       	rjmp	.+14     	; 0x1f3c <readPacket+0x126>
    1f2e:	6f ef       	ldi	r22, 0xFF	; 255
    1f30:	7f ef       	ldi	r23, 0xFF	; 255
    1f32:	cb 01       	movw	r24, r22
    1f34:	03 c0       	rjmp	.+6      	; 0x1f3c <readPacket+0x126>
    1f36:	6f ef       	ldi	r22, 0xFF	; 255
    1f38:	7f ef       	ldi	r23, 0xFF	; 255
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	1f 91       	pop	r17
    1f4a:	0f 91       	pop	r16
    1f4c:	ff 90       	pop	r15
    1f4e:	ef 90       	pop	r14
    1f50:	df 90       	pop	r13
    1f52:	cf 90       	pop	r12
    1f54:	bf 90       	pop	r11
    1f56:	af 90       	pop	r10
    1f58:	9f 90       	pop	r9
    1f5a:	8f 90       	pop	r8
    1f5c:	7f 90       	pop	r7
    1f5e:	6f 90       	pop	r6
    1f60:	5f 90       	pop	r5
    1f62:	4f 90       	pop	r4
    1f64:	08 95       	ret

00001f66 <isTopicMatched>:
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	ec 01       	movw	r28, r24
    1f6c:	db 01       	movw	r26, r22
    1f6e:	16 96       	adiw	r26, 0x06	; 6
    1f70:	ed 91       	ld	r30, X+
    1f72:	fc 91       	ld	r31, X
    1f74:	17 97       	sbiw	r26, 0x07	; 7
    1f76:	12 96       	adiw	r26, 0x02	; 2
    1f78:	4d 91       	ld	r20, X+
    1f7a:	5d 91       	ld	r21, X+
    1f7c:	6d 91       	ld	r22, X+
    1f7e:	7c 91       	ld	r23, X
    1f80:	15 97       	sbiw	r26, 0x05	; 5
    1f82:	4e 0f       	add	r20, r30
    1f84:	5f 1f       	adc	r21, r31
    1f86:	20 c0       	rjmp	.+64     	; 0x1fc8 <isTopicMatched+0x62>
    1f88:	80 81       	ld	r24, Z
    1f8a:	8f 32       	cpi	r24, 0x2F	; 47
    1f8c:	11 f4       	brne	.+4      	; 0x1f92 <isTopicMatched+0x2c>
    1f8e:	9f 32       	cpi	r25, 0x2F	; 47
    1f90:	09 f5       	brne	.+66     	; 0x1fd4 <isTopicMatched+0x6e>
    1f92:	9b 32       	cpi	r25, 0x2B	; 43
    1f94:	21 f0       	breq	.+8      	; 0x1f9e <isTopicMatched+0x38>
    1f96:	93 32       	cpi	r25, 0x23	; 35
    1f98:	11 f0       	breq	.+4      	; 0x1f9e <isTopicMatched+0x38>
    1f9a:	98 13       	cpse	r25, r24
    1f9c:	1b c0       	rjmp	.+54     	; 0x1fd4 <isTopicMatched+0x6e>
    1f9e:	9b 32       	cpi	r25, 0x2B	; 43
    1fa0:	69 f4       	brne	.+26     	; 0x1fbc <isTopicMatched+0x56>
    1fa2:	df 01       	movw	r26, r30
    1fa4:	11 96       	adiw	r26, 0x01	; 1
    1fa6:	03 c0       	rjmp	.+6      	; 0x1fae <isTopicMatched+0x48>
    1fa8:	31 96       	adiw	r30, 0x01	; 1
    1faa:	df 01       	movw	r26, r30
    1fac:	11 96       	adiw	r26, 0x01	; 1
    1fae:	a4 17       	cp	r26, r20
    1fb0:	b5 07       	cpc	r27, r21
    1fb2:	40 f4       	brcc	.+16     	; 0x1fc4 <isTopicMatched+0x5e>
    1fb4:	9c 91       	ld	r25, X
    1fb6:	9f 32       	cpi	r25, 0x2F	; 47
    1fb8:	b9 f7       	brne	.-18     	; 0x1fa8 <isTopicMatched+0x42>
    1fba:	04 c0       	rjmp	.+8      	; 0x1fc4 <isTopicMatched+0x5e>
    1fbc:	93 32       	cpi	r25, 0x23	; 35
    1fbe:	11 f4       	brne	.+4      	; 0x1fc4 <isTopicMatched+0x5e>
    1fc0:	fa 01       	movw	r30, r20
    1fc2:	31 97       	sbiw	r30, 0x01	; 1
    1fc4:	21 96       	adiw	r28, 0x01	; 1
    1fc6:	31 96       	adiw	r30, 0x01	; 1
    1fc8:	98 81       	ld	r25, Y
    1fca:	99 23       	and	r25, r25
    1fcc:	19 f0       	breq	.+6      	; 0x1fd4 <isTopicMatched+0x6e>
    1fce:	e4 17       	cp	r30, r20
    1fd0:	f5 07       	cpc	r31, r21
    1fd2:	d0 f2       	brcs	.-76     	; 0x1f88 <isTopicMatched+0x22>
    1fd4:	e4 17       	cp	r30, r20
    1fd6:	f5 07       	cpc	r31, r21
    1fd8:	21 f4       	brne	.+8      	; 0x1fe2 <isTopicMatched+0x7c>
    1fda:	99 23       	and	r25, r25
    1fdc:	21 f0       	breq	.+8      	; 0x1fe6 <isTopicMatched+0x80>
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	03 c0       	rjmp	.+6      	; 0x1fe8 <isTopicMatched+0x82>
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	01 c0       	rjmp	.+2      	; 0x1fe8 <isTopicMatched+0x82>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	df 91       	pop	r29
    1fea:	cf 91       	pop	r28
    1fec:	08 95       	ret

00001fee <deliverMessage>:
    1fee:	4f 92       	push	r4
    1ff0:	5f 92       	push	r5
    1ff2:	6f 92       	push	r6
    1ff4:	7f 92       	push	r7
    1ff6:	8f 92       	push	r8
    1ff8:	9f 92       	push	r9
    1ffa:	af 92       	push	r10
    1ffc:	bf 92       	push	r11
    1ffe:	cf 92       	push	r12
    2000:	df 92       	push	r13
    2002:	ef 92       	push	r14
    2004:	ff 92       	push	r15
    2006:	0f 93       	push	r16
    2008:	1f 93       	push	r17
    200a:	cf 93       	push	r28
    200c:	df 93       	push	r29
    200e:	00 d0       	rcall	.+0      	; 0x2010 <__EEPROM_REGION_LENGTH__+0x10>
    2010:	1f 92       	push	r1
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	8c 01       	movw	r16, r24
    2018:	7b 01       	movw	r14, r22
    201a:	6a 01       	movw	r12, r20
    201c:	41 2c       	mov	r4, r1
    201e:	51 2c       	mov	r5, r1
    2020:	32 01       	movw	r6, r4
    2022:	88 24       	eor	r8, r8
    2024:	8a 94       	dec	r8
    2026:	98 2c       	mov	r9, r8
    2028:	54 01       	movw	r10, r8
    202a:	45 c0       	rjmp	.+138    	; 0x20b6 <__EEPROM_REGION_LENGTH__+0xb6>
    202c:	f2 01       	movw	r30, r4
    202e:	ee 0f       	add	r30, r30
    2030:	ff 1f       	adc	r31, r31
    2032:	ee 0f       	add	r30, r30
    2034:	ff 1f       	adc	r31, r31
    2036:	e0 0f       	add	r30, r16
    2038:	f1 1f       	adc	r31, r17
    203a:	61 8d       	ldd	r22, Z+25	; 0x19
    203c:	72 8d       	ldd	r23, Z+26	; 0x1a
    203e:	61 15       	cp	r22, r1
    2040:	71 05       	cpc	r23, r1
    2042:	a1 f1       	breq	.+104    	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>
    2044:	c7 01       	movw	r24, r14
    2046:	0e 94 b8 1a 	call	0x3570	; 0x3570 <MQTTPacket_equals>
    204a:	67 2b       	or	r22, r23
    204c:	68 2b       	or	r22, r24
    204e:	69 2b       	or	r22, r25
    2050:	69 f4       	brne	.+26     	; 0x206c <__EEPROM_REGION_LENGTH__+0x6c>
    2052:	f2 01       	movw	r30, r4
    2054:	ee 0f       	add	r30, r30
    2056:	ff 1f       	adc	r31, r31
    2058:	ee 0f       	add	r30, r30
    205a:	ff 1f       	adc	r31, r31
    205c:	e0 0f       	add	r30, r16
    205e:	f1 1f       	adc	r31, r17
    2060:	b7 01       	movw	r22, r14
    2062:	81 8d       	ldd	r24, Z+25	; 0x19
    2064:	92 8d       	ldd	r25, Z+26	; 0x1a
    2066:	7f df       	rcall	.-258    	; 0x1f66 <isTopicMatched>
    2068:	88 23       	and	r24, r24
    206a:	01 f1       	breq	.+64     	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>
    206c:	f2 01       	movw	r30, r4
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	e0 0f       	add	r30, r16
    2078:	f1 1f       	adc	r31, r17
    207a:	83 8d       	ldd	r24, Z+27	; 0x1b
    207c:	94 8d       	ldd	r25, Z+28	; 0x1c
    207e:	89 2b       	or	r24, r25
    2080:	a9 f0       	breq	.+42     	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>
    2082:	a6 01       	movw	r20, r12
    2084:	b7 01       	movw	r22, r14
    2086:	ce 01       	movw	r24, r28
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	41 dd       	rcall	.-1406   	; 0x1b0e <NewMessageData>
    208c:	f2 01       	movw	r30, r4
    208e:	ee 0f       	add	r30, r30
    2090:	ff 1f       	adc	r31, r31
    2092:	ee 0f       	add	r30, r30
    2094:	ff 1f       	adc	r31, r31
    2096:	e0 0f       	add	r30, r16
    2098:	f1 1f       	adc	r31, r17
    209a:	03 8c       	ldd	r0, Z+27	; 0x1b
    209c:	f4 8d       	ldd	r31, Z+28	; 0x1c
    209e:	e0 2d       	mov	r30, r0
    20a0:	ce 01       	movw	r24, r28
    20a2:	01 96       	adiw	r24, 0x01	; 1
    20a4:	19 95       	eicall
    20a6:	81 2c       	mov	r8, r1
    20a8:	91 2c       	mov	r9, r1
    20aa:	54 01       	movw	r10, r8
    20ac:	8f ef       	ldi	r24, 0xFF	; 255
    20ae:	48 1a       	sub	r4, r24
    20b0:	58 0a       	sbc	r5, r24
    20b2:	68 0a       	sbc	r6, r24
    20b4:	78 0a       	sbc	r7, r24
    20b6:	a5 e0       	ldi	r26, 0x05	; 5
    20b8:	4a 16       	cp	r4, r26
    20ba:	51 04       	cpc	r5, r1
    20bc:	61 04       	cpc	r6, r1
    20be:	71 04       	cpc	r7, r1
    20c0:	0c f4       	brge	.+2      	; 0x20c4 <__EEPROM_REGION_LENGTH__+0xc4>
    20c2:	b4 cf       	rjmp	.-152    	; 0x202c <__EEPROM_REGION_LENGTH__+0x2c>
    20c4:	bf ef       	ldi	r27, 0xFF	; 255
    20c6:	8b 16       	cp	r8, r27
    20c8:	9b 06       	cpc	r9, r27
    20ca:	ab 06       	cpc	r10, r27
    20cc:	bb 06       	cpc	r11, r27
    20ce:	a9 f4       	brne	.+42     	; 0x20fa <__EEPROM_REGION_LENGTH__+0xfa>
    20d0:	f8 01       	movw	r30, r16
    20d2:	85 a5       	ldd	r24, Z+45	; 0x2d
    20d4:	96 a5       	ldd	r25, Z+46	; 0x2e
    20d6:	89 2b       	or	r24, r25
    20d8:	81 f0       	breq	.+32     	; 0x20fa <__EEPROM_REGION_LENGTH__+0xfa>
    20da:	a6 01       	movw	r20, r12
    20dc:	b7 01       	movw	r22, r14
    20de:	ce 01       	movw	r24, r28
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	15 dd       	rcall	.-1494   	; 0x1b0e <NewMessageData>
    20e4:	d8 01       	movw	r26, r16
    20e6:	9d 96       	adiw	r26, 0x2d	; 45
    20e8:	ed 91       	ld	r30, X+
    20ea:	fc 91       	ld	r31, X
    20ec:	9e 97       	sbiw	r26, 0x2e	; 46
    20ee:	ce 01       	movw	r24, r28
    20f0:	01 96       	adiw	r24, 0x01	; 1
    20f2:	19 95       	eicall
    20f4:	81 2c       	mov	r8, r1
    20f6:	91 2c       	mov	r9, r1
    20f8:	54 01       	movw	r10, r8
    20fa:	c5 01       	movw	r24, r10
    20fc:	b4 01       	movw	r22, r8
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	ff 90       	pop	r15
    2110:	ef 90       	pop	r14
    2112:	df 90       	pop	r13
    2114:	cf 90       	pop	r12
    2116:	bf 90       	pop	r11
    2118:	af 90       	pop	r10
    211a:	9f 90       	pop	r9
    211c:	8f 90       	pop	r8
    211e:	7f 90       	pop	r7
    2120:	6f 90       	pop	r6
    2122:	5f 90       	pop	r5
    2124:	4f 90       	pop	r4
    2126:	08 95       	ret

00002128 <keepalive>:
    2128:	0f 93       	push	r16
    212a:	1f 93       	push	r17
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	28 97       	sbiw	r28, 0x08	; 8
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	fc 01       	movw	r30, r24
    2142:	40 89       	ldd	r20, Z+16	; 0x10
    2144:	51 89       	ldd	r21, Z+17	; 0x11
    2146:	62 89       	ldd	r22, Z+18	; 0x12
    2148:	73 89       	ldd	r23, Z+19	; 0x13
    214a:	45 2b       	or	r20, r21
    214c:	46 2b       	or	r20, r22
    214e:	47 2b       	or	r20, r23
    2150:	b9 f1       	breq	.+110    	; 0x21c0 <keepalive+0x98>
    2152:	8c 01       	movw	r16, r24
    2154:	c1 96       	adiw	r24, 0x31	; 49
    2156:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <expired>
    215a:	88 23       	and	r24, r24
    215c:	a9 f1       	breq	.+106    	; 0x21c8 <keepalive+0xa0>
    215e:	f8 01       	movw	r30, r16
    2160:	84 89       	ldd	r24, Z+20	; 0x14
    2162:	81 11       	cpse	r24, r1
    2164:	35 c0       	rjmp	.+106    	; 0x21d0 <keepalive+0xa8>
    2166:	ce 01       	movw	r24, r28
    2168:	01 96       	adiw	r24, 0x01	; 1
    216a:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <InitTimer>
    216e:	48 ee       	ldi	r20, 0xE8	; 232
    2170:	53 e0       	ldi	r21, 0x03	; 3
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	70 e0       	ldi	r23, 0x00	; 0
    2176:	ce 01       	movw	r24, r28
    2178:	01 96       	adiw	r24, 0x01	; 1
    217a:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <countdown_ms>
    217e:	f8 01       	movw	r30, r16
    2180:	40 85       	ldd	r20, Z+8	; 0x08
    2182:	51 85       	ldd	r21, Z+9	; 0x09
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	84 85       	ldd	r24, Z+12	; 0x0c
    218a:	95 85       	ldd	r25, Z+13	; 0x0d
    218c:	97 d6       	rcall	.+3374   	; 0x2ebc <MQTTSerialize_pingreq>
    218e:	16 16       	cp	r1, r22
    2190:	17 06       	cpc	r1, r23
    2192:	18 06       	cpc	r1, r24
    2194:	19 06       	cpc	r1, r25
    2196:	84 f4       	brge	.+32     	; 0x21b8 <keepalive+0x90>
    2198:	9e 01       	movw	r18, r28
    219a:	2f 5f       	subi	r18, 0xFF	; 255
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	ab 01       	movw	r20, r22
    21a0:	bc 01       	movw	r22, r24
    21a2:	c8 01       	movw	r24, r16
    21a4:	d5 dc       	rcall	.-1622   	; 0x1b50 <sendPacket>
    21a6:	61 15       	cp	r22, r1
    21a8:	71 05       	cpc	r23, r1
    21aa:	81 05       	cpc	r24, r1
    21ac:	91 05       	cpc	r25, r1
    21ae:	99 f4       	brne	.+38     	; 0x21d6 <keepalive+0xae>
    21b0:	21 e0       	ldi	r18, 0x01	; 1
    21b2:	f8 01       	movw	r30, r16
    21b4:	24 8b       	std	Z+20, r18	; 0x14
    21b6:	0f c0       	rjmp	.+30     	; 0x21d6 <keepalive+0xae>
    21b8:	6f ef       	ldi	r22, 0xFF	; 255
    21ba:	7f ef       	ldi	r23, 0xFF	; 255
    21bc:	cb 01       	movw	r24, r22
    21be:	0b c0       	rjmp	.+22     	; 0x21d6 <keepalive+0xae>
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	cb 01       	movw	r24, r22
    21c6:	07 c0       	rjmp	.+14     	; 0x21d6 <keepalive+0xae>
    21c8:	6f ef       	ldi	r22, 0xFF	; 255
    21ca:	7f ef       	ldi	r23, 0xFF	; 255
    21cc:	cb 01       	movw	r24, r22
    21ce:	03 c0       	rjmp	.+6      	; 0x21d6 <keepalive+0xae>
    21d0:	6f ef       	ldi	r22, 0xFF	; 255
    21d2:	7f ef       	ldi	r23, 0xFF	; 255
    21d4:	cb 01       	movw	r24, r22
    21d6:	28 96       	adiw	r28, 0x08	; 8
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	cd bf       	out	0x3d, r28	; 61
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	08 95       	ret

000021ec <cycle>:
    21ec:	2f 92       	push	r2
    21ee:	3f 92       	push	r3
    21f0:	4f 92       	push	r4
    21f2:	5f 92       	push	r5
    21f4:	6f 92       	push	r6
    21f6:	7f 92       	push	r7
    21f8:	8f 92       	push	r8
    21fa:	9f 92       	push	r9
    21fc:	af 92       	push	r10
    21fe:	bf 92       	push	r11
    2200:	cf 92       	push	r12
    2202:	df 92       	push	r13
    2204:	ef 92       	push	r14
    2206:	ff 92       	push	r15
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	62 97       	sbiw	r28, 0x12	; 18
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	4c 01       	movw	r8, r24
    2222:	1b 01       	movw	r2, r22
    2224:	f8 dd       	rcall	.-1040   	; 0x1e16 <readPacket>
    2226:	2b 01       	movw	r4, r22
    2228:	3c 01       	movw	r6, r24
    222a:	65 30       	cpi	r22, 0x05	; 5
    222c:	71 05       	cpc	r23, r1
    222e:	09 f4       	brne	.+2      	; 0x2232 <cycle+0x46>
    2230:	80 c0       	rjmp	.+256    	; 0x2332 <cycle+0x146>
    2232:	6d 30       	cpi	r22, 0x0D	; 13
    2234:	71 05       	cpc	r23, r1
    2236:	09 f4       	brne	.+2      	; 0x223a <cycle+0x4e>
    2238:	c4 c0       	rjmp	.+392    	; 0x23c2 <cycle+0x1d6>
    223a:	63 30       	cpi	r22, 0x03	; 3
    223c:	71 05       	cpc	r23, r1
    223e:	09 f0       	breq	.+2      	; 0x2242 <cycle+0x56>
    2240:	c6 c0       	rjmp	.+396    	; 0x23ce <cycle+0x1e2>
    2242:	f4 01       	movw	r30, r8
    2244:	82 85       	ldd	r24, Z+10	; 0x0a
    2246:	93 85       	ldd	r25, Z+11	; 0x0b
    2248:	a6 84       	ldd	r10, Z+14	; 0x0e
    224a:	b7 84       	ldd	r11, Z+15	; 0x0f
    224c:	1f 92       	push	r1
    224e:	1f 92       	push	r1
    2250:	9f 93       	push	r25
    2252:	8f 93       	push	r24
    2254:	ce 01       	movw	r24, r28
    2256:	08 96       	adiw	r24, 0x08	; 8
    2258:	6c 01       	movw	r12, r24
    225a:	fe 01       	movw	r30, r28
    225c:	36 96       	adiw	r30, 0x06	; 6
    225e:	7f 01       	movw	r14, r30
    2260:	8e 01       	movw	r16, r28
    2262:	06 5f       	subi	r16, 0xF6	; 246
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
    2266:	9e 01       	movw	r18, r28
    2268:	2c 5f       	subi	r18, 0xFC	; 252
    226a:	3f 4f       	sbci	r19, 0xFF	; 255
    226c:	ae 01       	movw	r20, r28
    226e:	4e 5f       	subi	r20, 0xFE	; 254
    2270:	5f 4f       	sbci	r21, 0xFF	; 255
    2272:	be 01       	movw	r22, r28
    2274:	6f 5f       	subi	r22, 0xFF	; 255
    2276:	7f 4f       	sbci	r23, 0xFF	; 255
    2278:	05 97       	sbiw	r24, 0x05	; 5
    227a:	23 d6       	rcall	.+3142   	; 0x2ec2 <MQTTDeserialize_publish>
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	61 30       	cpi	r22, 0x01	; 1
    2286:	71 05       	cpc	r23, r1
    2288:	81 05       	cpc	r24, r1
    228a:	91 05       	cpc	r25, r1
    228c:	09 f0       	breq	.+2      	; 0x2290 <cycle+0xa4>
    228e:	49 c0       	rjmp	.+146    	; 0x2322 <cycle+0x136>
    2290:	00 00       	nop
    2292:	ae 01       	movw	r20, r28
    2294:	4f 5f       	subi	r20, 0xFF	; 255
    2296:	5f 4f       	sbci	r21, 0xFF	; 255
    2298:	b8 01       	movw	r22, r16
    229a:	c4 01       	movw	r24, r8
    229c:	a8 de       	rcall	.-688    	; 0x1fee <deliverMessage>
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	88 23       	and	r24, r24
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <cycle+0xba>
    22a4:	42 c0       	rjmp	.+132    	; 0x232a <cycle+0x13e>
    22a6:	81 30       	cpi	r24, 0x01	; 1
    22a8:	81 f4       	brne	.+32     	; 0x22ca <cycle+0xde>
    22aa:	ec 80       	ldd	r14, Y+4	; 0x04
    22ac:	fd 80       	ldd	r15, Y+5	; 0x05
    22ae:	f4 01       	movw	r30, r8
    22b0:	40 85       	ldd	r20, Z+8	; 0x08
    22b2:	51 85       	ldd	r21, Z+9	; 0x09
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	00 e0       	ldi	r16, 0x00	; 0
    22ba:	24 e0       	ldi	r18, 0x04	; 4
    22bc:	84 85       	ldd	r24, Z+12	; 0x0c
    22be:	95 85       	ldd	r25, Z+13	; 0x0d
    22c0:	0e 94 cc 1b 	call	0x3798	; 0x3798 <MQTTSerialize_ack>
    22c4:	ab 01       	movw	r20, r22
    22c6:	bc 01       	movw	r22, r24
    22c8:	15 c0       	rjmp	.+42     	; 0x22f4 <cycle+0x108>
    22ca:	82 30       	cpi	r24, 0x02	; 2
    22cc:	81 f4       	brne	.+32     	; 0x22ee <cycle+0x102>
    22ce:	ec 80       	ldd	r14, Y+4	; 0x04
    22d0:	fd 80       	ldd	r15, Y+5	; 0x05
    22d2:	f4 01       	movw	r30, r8
    22d4:	40 85       	ldd	r20, Z+8	; 0x08
    22d6:	51 85       	ldd	r21, Z+9	; 0x09
    22d8:	60 e0       	ldi	r22, 0x00	; 0
    22da:	70 e0       	ldi	r23, 0x00	; 0
    22dc:	00 e0       	ldi	r16, 0x00	; 0
    22de:	25 e0       	ldi	r18, 0x05	; 5
    22e0:	84 85       	ldd	r24, Z+12	; 0x0c
    22e2:	95 85       	ldd	r25, Z+13	; 0x0d
    22e4:	0e 94 cc 1b 	call	0x3798	; 0x3798 <MQTTSerialize_ack>
    22e8:	ab 01       	movw	r20, r22
    22ea:	bc 01       	movw	r22, r24
    22ec:	03 c0       	rjmp	.+6      	; 0x22f4 <cycle+0x108>
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	ba 01       	movw	r22, r20
    22f4:	14 16       	cp	r1, r20
    22f6:	15 06       	cpc	r1, r21
    22f8:	16 06       	cpc	r1, r22
    22fa:	17 06       	cpc	r1, r23
    22fc:	34 f4       	brge	.+12     	; 0x230a <cycle+0x11e>
    22fe:	91 01       	movw	r18, r2
    2300:	c4 01       	movw	r24, r8
    2302:	26 dc       	rcall	.-1972   	; 0x1b50 <sendPacket>
    2304:	6b 01       	movw	r12, r22
    2306:	7c 01       	movw	r14, r24
    2308:	04 c0       	rjmp	.+8      	; 0x2312 <cycle+0x126>
    230a:	cc 24       	eor	r12, r12
    230c:	ca 94       	dec	r12
    230e:	dc 2c       	mov	r13, r12
    2310:	76 01       	movw	r14, r12
    2312:	ff ef       	ldi	r31, 0xFF	; 255
    2314:	cf 16       	cp	r12, r31
    2316:	df 06       	cpc	r13, r31
    2318:	ef 06       	cpc	r14, r31
    231a:	ff 06       	cpc	r15, r31
    231c:	09 f0       	breq	.+2      	; 0x2320 <cycle+0x134>
    231e:	5a c0       	rjmp	.+180    	; 0x23d4 <cycle+0x1e8>
    2320:	5b c0       	rjmp	.+182    	; 0x23d8 <cycle+0x1ec>
    2322:	c1 2c       	mov	r12, r1
    2324:	d1 2c       	mov	r13, r1
    2326:	76 01       	movw	r14, r12
    2328:	57 c0       	rjmp	.+174    	; 0x23d8 <cycle+0x1ec>
    232a:	c1 2c       	mov	r12, r1
    232c:	d1 2c       	mov	r13, r1
    232e:	76 01       	movw	r14, r12
    2330:	51 c0       	rjmp	.+162    	; 0x23d4 <cycle+0x1e8>
    2332:	f4 01       	movw	r30, r8
    2334:	e2 84       	ldd	r14, Z+10	; 0x0a
    2336:	f3 84       	ldd	r15, Z+11	; 0x0b
    2338:	00 e0       	ldi	r16, 0x00	; 0
    233a:	10 e0       	ldi	r17, 0x00	; 0
    233c:	26 85       	ldd	r18, Z+14	; 0x0e
    233e:	37 85       	ldd	r19, Z+15	; 0x0f
    2340:	ae 01       	movw	r20, r28
    2342:	4f 5f       	subi	r20, 0xFF	; 255
    2344:	5f 4f       	sbci	r21, 0xFF	; 255
    2346:	be 01       	movw	r22, r28
    2348:	6e 5e       	subi	r22, 0xEE	; 238
    234a:	7f 4f       	sbci	r23, 0xFF	; 255
    234c:	ce 01       	movw	r24, r28
    234e:	0a 96       	adiw	r24, 0x0a	; 10
    2350:	55 d6       	rcall	.+3242   	; 0x2ffc <MQTTDeserialize_ack>
    2352:	61 30       	cpi	r22, 0x01	; 1
    2354:	71 05       	cpc	r23, r1
    2356:	81 05       	cpc	r24, r1
    2358:	91 05       	cpc	r25, r1
    235a:	f1 f4       	brne	.+60     	; 0x2398 <cycle+0x1ac>
    235c:	e9 80       	ldd	r14, Y+1	; 0x01
    235e:	fa 80       	ldd	r15, Y+2	; 0x02
    2360:	f4 01       	movw	r30, r8
    2362:	40 85       	ldd	r20, Z+8	; 0x08
    2364:	51 85       	ldd	r21, Z+9	; 0x09
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	00 e0       	ldi	r16, 0x00	; 0
    236c:	26 e0       	ldi	r18, 0x06	; 6
    236e:	84 85       	ldd	r24, Z+12	; 0x0c
    2370:	95 85       	ldd	r25, Z+13	; 0x0d
    2372:	0e 94 cc 1b 	call	0x3798	; 0x3798 <MQTTSerialize_ack>
    2376:	16 16       	cp	r1, r22
    2378:	17 06       	cpc	r1, r23
    237a:	18 06       	cpc	r1, r24
    237c:	19 06       	cpc	r1, r25
    237e:	8c f4       	brge	.+34     	; 0x23a2 <cycle+0x1b6>
    2380:	91 01       	movw	r18, r2
    2382:	ab 01       	movw	r20, r22
    2384:	bc 01       	movw	r22, r24
    2386:	c4 01       	movw	r24, r8
    2388:	e3 db       	rcall	.-2106   	; 0x1b50 <sendPacket>
    238a:	6b 01       	movw	r12, r22
    238c:	7c 01       	movw	r14, r24
    238e:	67 2b       	or	r22, r23
    2390:	68 2b       	or	r22, r24
    2392:	69 2b       	or	r22, r25
    2394:	59 f4       	brne	.+22     	; 0x23ac <cycle+0x1c0>
    2396:	0e c0       	rjmp	.+28     	; 0x23b4 <cycle+0x1c8>
    2398:	cc 24       	eor	r12, r12
    239a:	ca 94       	dec	r12
    239c:	dc 2c       	mov	r13, r12
    239e:	76 01       	movw	r14, r12
    23a0:	09 c0       	rjmp	.+18     	; 0x23b4 <cycle+0x1c8>
    23a2:	cc 24       	eor	r12, r12
    23a4:	ca 94       	dec	r12
    23a6:	dc 2c       	mov	r13, r12
    23a8:	76 01       	movw	r14, r12
    23aa:	04 c0       	rjmp	.+8      	; 0x23b4 <cycle+0x1c8>
    23ac:	cc 24       	eor	r12, r12
    23ae:	ca 94       	dec	r12
    23b0:	dc 2c       	mov	r13, r12
    23b2:	76 01       	movw	r14, r12
    23b4:	ff ef       	ldi	r31, 0xFF	; 255
    23b6:	cf 16       	cp	r12, r31
    23b8:	df 06       	cpc	r13, r31
    23ba:	ef 06       	cpc	r14, r31
    23bc:	ff 06       	cpc	r15, r31
    23be:	51 f4       	brne	.+20     	; 0x23d4 <cycle+0x1e8>
    23c0:	0b c0       	rjmp	.+22     	; 0x23d8 <cycle+0x1ec>
    23c2:	f4 01       	movw	r30, r8
    23c4:	14 8a       	std	Z+20, r1	; 0x14
    23c6:	c1 2c       	mov	r12, r1
    23c8:	d1 2c       	mov	r13, r1
    23ca:	76 01       	movw	r14, r12
    23cc:	03 c0       	rjmp	.+6      	; 0x23d4 <cycle+0x1e8>
    23ce:	c1 2c       	mov	r12, r1
    23d0:	d1 2c       	mov	r13, r1
    23d2:	76 01       	movw	r14, r12
    23d4:	c4 01       	movw	r24, r8
    23d6:	a8 de       	rcall	.-688    	; 0x2128 <keepalive>
    23d8:	c1 14       	cp	r12, r1
    23da:	d1 04       	cpc	r13, r1
    23dc:	e1 04       	cpc	r14, r1
    23de:	f1 04       	cpc	r15, r1
    23e0:	21 f4       	brne	.+8      	; 0x23ea <cycle+0x1fe>
    23e2:	73 01       	movw	r14, r6
    23e4:	62 01       	movw	r12, r4
    23e6:	ee 24       	eor	r14, r14
    23e8:	ff 24       	eor	r15, r15
    23ea:	ff ef       	ldi	r31, 0xFF	; 255
    23ec:	cf 16       	cp	r12, r31
    23ee:	df 06       	cpc	r13, r31
    23f0:	e1 04       	cpc	r14, r1
    23f2:	f1 04       	cpc	r15, r1
    23f4:	21 f4       	brne	.+8      	; 0x23fe <cycle+0x212>
    23f6:	cc 24       	eor	r12, r12
    23f8:	ca 94       	dec	r12
    23fa:	dc 2c       	mov	r13, r12
    23fc:	76 01       	movw	r14, r12
    23fe:	c7 01       	movw	r24, r14
    2400:	b6 01       	movw	r22, r12
    2402:	62 96       	adiw	r28, 0x12	; 18
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	ff 90       	pop	r15
    2418:	ef 90       	pop	r14
    241a:	df 90       	pop	r13
    241c:	cf 90       	pop	r12
    241e:	bf 90       	pop	r11
    2420:	af 90       	pop	r10
    2422:	9f 90       	pop	r9
    2424:	8f 90       	pop	r8
    2426:	7f 90       	pop	r7
    2428:	6f 90       	pop	r6
    242a:	5f 90       	pop	r5
    242c:	4f 90       	pop	r4
    242e:	3f 90       	pop	r3
    2430:	2f 90       	pop	r2
    2432:	08 95       	ret

00002434 <MQTTYield>:
    2434:	cf 92       	push	r12
    2436:	df 92       	push	r13
    2438:	ef 92       	push	r14
    243a:	ff 92       	push	r15
    243c:	0f 93       	push	r16
    243e:	1f 93       	push	r17
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	28 97       	sbiw	r28, 0x08	; 8
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	8c 01       	movw	r16, r24
    2456:	6a 01       	movw	r12, r20
    2458:	7b 01       	movw	r14, r22
    245a:	ce 01       	movw	r24, r28
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <InitTimer>
    2462:	b7 01       	movw	r22, r14
    2464:	a6 01       	movw	r20, r12
    2466:	ce 01       	movw	r24, r28
    2468:	01 96       	adiw	r24, 0x01	; 1
    246a:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <countdown_ms>
    246e:	0a c0       	rjmp	.+20     	; 0x2484 <MQTTYield+0x50>
    2470:	be 01       	movw	r22, r28
    2472:	6f 5f       	subi	r22, 0xFF	; 255
    2474:	7f 4f       	sbci	r23, 0xFF	; 255
    2476:	c8 01       	movw	r24, r16
    2478:	b9 de       	rcall	.-654    	; 0x21ec <cycle>
    247a:	6f 3f       	cpi	r22, 0xFF	; 255
    247c:	7f 4f       	sbci	r23, 0xFF	; 255
    247e:	8f 4f       	sbci	r24, 0xFF	; 255
    2480:	9f 4f       	sbci	r25, 0xFF	; 255
    2482:	51 f0       	breq	.+20     	; 0x2498 <MQTTYield+0x64>
    2484:	ce 01       	movw	r24, r28
    2486:	01 96       	adiw	r24, 0x01	; 1
    2488:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <expired>
    248c:	88 23       	and	r24, r24
    248e:	81 f3       	breq	.-32     	; 0x2470 <MQTTYield+0x3c>
    2490:	60 e0       	ldi	r22, 0x00	; 0
    2492:	70 e0       	ldi	r23, 0x00	; 0
    2494:	cb 01       	movw	r24, r22
    2496:	03 c0       	rjmp	.+6      	; 0x249e <MQTTYield+0x6a>
    2498:	6f ef       	ldi	r22, 0xFF	; 255
    249a:	7f ef       	ldi	r23, 0xFF	; 255
    249c:	cb 01       	movw	r24, r22
    249e:	28 96       	adiw	r28, 0x08	; 8
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	1f 91       	pop	r17
    24b0:	0f 91       	pop	r16
    24b2:	ff 90       	pop	r15
    24b4:	ef 90       	pop	r14
    24b6:	df 90       	pop	r13
    24b8:	cf 90       	pop	r12
    24ba:	08 95       	ret

000024bc <waitfor>:
    24bc:	8f 92       	push	r8
    24be:	9f 92       	push	r9
    24c0:	af 92       	push	r10
    24c2:	bf 92       	push	r11
    24c4:	cf 92       	push	r12
    24c6:	df 92       	push	r13
    24c8:	ef 92       	push	r14
    24ca:	ff 92       	push	r15
    24cc:	0f 93       	push	r16
    24ce:	1f 93       	push	r17
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	8c 01       	movw	r16, r24
    24d6:	4a 01       	movw	r8, r20
    24d8:	5b 01       	movw	r10, r22
    24da:	e9 01       	movw	r28, r18
    24dc:	cc 24       	eor	r12, r12
    24de:	ca 94       	dec	r12
    24e0:	dc 2c       	mov	r13, r12
    24e2:	76 01       	movw	r14, r12
    24e4:	ce 01       	movw	r24, r28
    24e6:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <expired>
    24ea:	81 11       	cpse	r24, r1
    24ec:	0a c0       	rjmp	.+20     	; 0x2502 <waitfor+0x46>
    24ee:	be 01       	movw	r22, r28
    24f0:	c8 01       	movw	r24, r16
    24f2:	7c de       	rcall	.-776    	; 0x21ec <cycle>
    24f4:	6b 01       	movw	r12, r22
    24f6:	7c 01       	movw	r14, r24
    24f8:	68 15       	cp	r22, r8
    24fa:	79 05       	cpc	r23, r9
    24fc:	8a 05       	cpc	r24, r10
    24fe:	9b 05       	cpc	r25, r11
    2500:	89 f7       	brne	.-30     	; 0x24e4 <waitfor+0x28>
    2502:	c7 01       	movw	r24, r14
    2504:	b6 01       	movw	r22, r12
    2506:	df 91       	pop	r29
    2508:	cf 91       	pop	r28
    250a:	1f 91       	pop	r17
    250c:	0f 91       	pop	r16
    250e:	ff 90       	pop	r15
    2510:	ef 90       	pop	r14
    2512:	df 90       	pop	r13
    2514:	cf 90       	pop	r12
    2516:	bf 90       	pop	r11
    2518:	af 90       	pop	r10
    251a:	9f 90       	pop	r9
    251c:	8f 90       	pop	r8
    251e:	08 95       	ret

00002520 <MQTTConnect>:
    2520:	ef 92       	push	r14
    2522:	ff 92       	push	r15
    2524:	0f 93       	push	r16
    2526:	1f 93       	push	r17
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	c5 54       	subi	r28, 0x45	; 69
    2532:	d1 09       	sbc	r29, r1
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	7c 01       	movw	r14, r24
    2540:	8b 01       	movw	r16, r22
    2542:	8b e3       	ldi	r24, 0x3B	; 59
    2544:	ee e1       	ldi	r30, 0x1E	; 30
    2546:	fa e0       	ldi	r31, 0x0A	; 10
    2548:	de 01       	movw	r26, r28
    254a:	19 96       	adiw	r26, 0x09	; 9
    254c:	01 90       	ld	r0, Z+
    254e:	0d 92       	st	X+, r0
    2550:	8a 95       	dec	r24
    2552:	e1 f7       	brne	.-8      	; 0x254c <MQTTConnect+0x2c>
    2554:	ce 01       	movw	r24, r28
    2556:	01 96       	adiw	r24, 0x01	; 1
    2558:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <InitTimer>
    255c:	f7 01       	movw	r30, r14
    255e:	44 81       	ldd	r20, Z+4	; 0x04
    2560:	55 81       	ldd	r21, Z+5	; 0x05
    2562:	66 81       	ldd	r22, Z+6	; 0x06
    2564:	77 81       	ldd	r23, Z+7	; 0x07
    2566:	ce 01       	movw	r24, r28
    2568:	01 96       	adiw	r24, 0x01	; 1
    256a:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <countdown_ms>
    256e:	f7 01       	movw	r30, r14
    2570:	85 89       	ldd	r24, Z+21	; 0x15
    2572:	96 89       	ldd	r25, Z+22	; 0x16
    2574:	a7 89       	ldd	r26, Z+23	; 0x17
    2576:	b0 8d       	ldd	r27, Z+24	; 0x18
    2578:	89 2b       	or	r24, r25
    257a:	8a 2b       	or	r24, r26
    257c:	8b 2b       	or	r24, r27
    257e:	09 f0       	breq	.+2      	; 0x2582 <MQTTConnect+0x62>
    2580:	63 c0       	rjmp	.+198    	; 0x2648 <MQTTConnect+0x128>
    2582:	01 15       	cp	r16, r1
    2584:	11 05       	cpc	r17, r1
    2586:	19 f4       	brne	.+6      	; 0x258e <MQTTConnect+0x6e>
    2588:	8e 01       	movw	r16, r28
    258a:	07 5f       	subi	r16, 0xF7	; 247
    258c:	1f 4f       	sbci	r17, 0xFF	; 255
    258e:	f8 01       	movw	r30, r16
    2590:	47 85       	ldd	r20, Z+15	; 0x0f
    2592:	50 89       	ldd	r21, Z+16	; 0x10
    2594:	60 e0       	ldi	r22, 0x00	; 0
    2596:	70 e0       	ldi	r23, 0x00	; 0
    2598:	f7 01       	movw	r30, r14
    259a:	40 8b       	std	Z+16, r20	; 0x10
    259c:	51 8b       	std	Z+17, r21	; 0x11
    259e:	62 8b       	std	Z+18, r22	; 0x12
    25a0:	73 8b       	std	Z+19, r23	; 0x13
    25a2:	c7 01       	movw	r24, r14
    25a4:	c1 96       	adiw	r24, 0x31	; 49
    25a6:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <countdown>
    25aa:	f7 01       	movw	r30, r14
    25ac:	40 85       	ldd	r20, Z+8	; 0x08
    25ae:	51 85       	ldd	r21, Z+9	; 0x09
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	98 01       	movw	r18, r16
    25b6:	84 85       	ldd	r24, Z+12	; 0x0c
    25b8:	95 85       	ldd	r25, Z+13	; 0x0d
    25ba:	19 d3       	rcall	.+1586   	; 0x2bee <MQTTSerialize_connect>
    25bc:	ab 01       	movw	r20, r22
    25be:	bc 01       	movw	r22, r24
    25c0:	14 16       	cp	r1, r20
    25c2:	15 06       	cpc	r1, r21
    25c4:	16 06       	cpc	r1, r22
    25c6:	17 06       	cpc	r1, r23
    25c8:	0c f0       	brlt	.+2      	; 0x25cc <MQTTConnect+0xac>
    25ca:	42 c0       	rjmp	.+132    	; 0x2650 <MQTTConnect+0x130>
    25cc:	9e 01       	movw	r18, r28
    25ce:	2f 5f       	subi	r18, 0xFF	; 255
    25d0:	3f 4f       	sbci	r19, 0xFF	; 255
    25d2:	c7 01       	movw	r24, r14
    25d4:	bd da       	rcall	.-2694   	; 0x1b50 <sendPacket>
    25d6:	61 15       	cp	r22, r1
    25d8:	71 05       	cpc	r23, r1
    25da:	81 05       	cpc	r24, r1
    25dc:	91 05       	cpc	r25, r1
    25de:	09 f0       	breq	.+2      	; 0x25e2 <MQTTConnect+0xc2>
    25e0:	3e c0       	rjmp	.+124    	; 0x265e <MQTTConnect+0x13e>
    25e2:	9e 01       	movw	r18, r28
    25e4:	2f 5f       	subi	r18, 0xFF	; 255
    25e6:	3f 4f       	sbci	r19, 0xFF	; 255
    25e8:	42 e0       	ldi	r20, 0x02	; 2
    25ea:	50 e0       	ldi	r21, 0x00	; 0
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	70 e0       	ldi	r23, 0x00	; 0
    25f0:	c7 01       	movw	r24, r14
    25f2:	64 df       	rcall	.-312    	; 0x24bc <waitfor>
    25f4:	62 30       	cpi	r22, 0x02	; 2
    25f6:	71 05       	cpc	r23, r1
    25f8:	81 05       	cpc	r24, r1
    25fa:	91 05       	cpc	r25, r1
    25fc:	69 f5       	brne	.+90     	; 0x2658 <MQTTConnect+0x138>
    25fe:	8f ef       	ldi	r24, 0xFF	; 255
    2600:	26 96       	adiw	r28, 0x06	; 6
    2602:	8f af       	std	Y+63, r24	; 0x3f
    2604:	26 97       	sbiw	r28, 0x06	; 6
    2606:	25 96       	adiw	r28, 0x05	; 5
    2608:	1f ae       	std	Y+63, r1	; 0x3f
    260a:	25 97       	sbiw	r28, 0x05	; 5
    260c:	f7 01       	movw	r30, r14
    260e:	02 85       	ldd	r16, Z+10	; 0x0a
    2610:	13 85       	ldd	r17, Z+11	; 0x0b
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	46 85       	ldd	r20, Z+14	; 0x0e
    2618:	57 85       	ldd	r21, Z+15	; 0x0f
    261a:	be 01       	movw	r22, r28
    261c:	6b 5b       	subi	r22, 0xBB	; 187
    261e:	7f 4f       	sbci	r23, 0xFF	; 255
    2620:	ce 01       	movw	r24, r28
    2622:	8c 5b       	subi	r24, 0xBC	; 188
    2624:	9f 4f       	sbci	r25, 0xFF	; 255
    2626:	d1 d3       	rcall	.+1954   	; 0x2dca <MQTTDeserialize_connack>
    2628:	61 30       	cpi	r22, 0x01	; 1
    262a:	71 05       	cpc	r23, r1
    262c:	81 05       	cpc	r24, r1
    262e:	91 05       	cpc	r25, r1
    2630:	39 f4       	brne	.+14     	; 0x2640 <MQTTConnect+0x120>
    2632:	26 96       	adiw	r28, 0x06	; 6
    2634:	6f ad       	ldd	r22, Y+63	; 0x3f
    2636:	26 97       	sbiw	r28, 0x06	; 6
    2638:	70 e0       	ldi	r23, 0x00	; 0
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	0f c0       	rjmp	.+30     	; 0x265e <MQTTConnect+0x13e>
    2640:	6f ef       	ldi	r22, 0xFF	; 255
    2642:	7f ef       	ldi	r23, 0xFF	; 255
    2644:	cb 01       	movw	r24, r22
    2646:	0b c0       	rjmp	.+22     	; 0x265e <MQTTConnect+0x13e>
    2648:	6f ef       	ldi	r22, 0xFF	; 255
    264a:	7f ef       	ldi	r23, 0xFF	; 255
    264c:	cb 01       	movw	r24, r22
    264e:	07 c0       	rjmp	.+14     	; 0x265e <MQTTConnect+0x13e>
    2650:	6f ef       	ldi	r22, 0xFF	; 255
    2652:	7f ef       	ldi	r23, 0xFF	; 255
    2654:	cb 01       	movw	r24, r22
    2656:	03 c0       	rjmp	.+6      	; 0x265e <MQTTConnect+0x13e>
    2658:	6f ef       	ldi	r22, 0xFF	; 255
    265a:	7f ef       	ldi	r23, 0xFF	; 255
    265c:	cb 01       	movw	r24, r22
    265e:	61 15       	cp	r22, r1
    2660:	71 05       	cpc	r23, r1
    2662:	81 05       	cpc	r24, r1
    2664:	91 05       	cpc	r25, r1
    2666:	49 f4       	brne	.+18     	; 0x267a <MQTTConnect+0x15a>
    2668:	01 e0       	ldi	r16, 0x01	; 1
    266a:	10 e0       	ldi	r17, 0x00	; 0
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	f7 01       	movw	r30, r14
    2672:	05 8b       	std	Z+21, r16	; 0x15
    2674:	16 8b       	std	Z+22, r17	; 0x16
    2676:	27 8b       	std	Z+23, r18	; 0x17
    2678:	30 8f       	std	Z+24, r19	; 0x18
    267a:	cb 5b       	subi	r28, 0xBB	; 187
    267c:	df 4f       	sbci	r29, 0xFF	; 255
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	ff 90       	pop	r15
    2692:	ef 90       	pop	r14
    2694:	08 95       	ret

00002696 <MQTTSubscribe>:
    2696:	2f 92       	push	r2
    2698:	3f 92       	push	r3
    269a:	4f 92       	push	r4
    269c:	5f 92       	push	r5
    269e:	6f 92       	push	r6
    26a0:	7f 92       	push	r7
    26a2:	8f 92       	push	r8
    26a4:	9f 92       	push	r9
    26a6:	af 92       	push	r10
    26a8:	bf 92       	push	r11
    26aa:	cf 92       	push	r12
    26ac:	df 92       	push	r13
    26ae:	ef 92       	push	r14
    26b0:	ff 92       	push	r15
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	6f 97       	sbiw	r28, 0x1f	; 31
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	3c 01       	movw	r6, r24
    26cc:	7d 8f       	std	Y+29, r23	; 0x1d
    26ce:	6c 8f       	std	Y+28, r22	; 0x1c
    26d0:	4b 8f       	std	Y+27, r20	; 0x1b
    26d2:	3f 8f       	std	Y+31, r19	; 0x1f
    26d4:	2e 8f       	std	Y+30, r18	; 0x1e
    26d6:	1b 86       	std	Y+11, r1	; 0x0b
    26d8:	1c 86       	std	Y+12, r1	; 0x0c
    26da:	1d 86       	std	Y+13, r1	; 0x0d
    26dc:	1e 86       	std	Y+14, r1	; 0x0e
    26de:	18 8a       	std	Y+16, r1	; 0x10
    26e0:	1f 86       	std	Y+15, r1	; 0x0f
    26e2:	7a 87       	std	Y+10, r23	; 0x0a
    26e4:	69 87       	std	Y+9, r22	; 0x09
    26e6:	ce 01       	movw	r24, r28
    26e8:	01 96       	adiw	r24, 0x01	; 1
    26ea:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <InitTimer>
    26ee:	f3 01       	movw	r30, r6
    26f0:	44 81       	ldd	r20, Z+4	; 0x04
    26f2:	55 81       	ldd	r21, Z+5	; 0x05
    26f4:	66 81       	ldd	r22, Z+6	; 0x06
    26f6:	77 81       	ldd	r23, Z+7	; 0x07
    26f8:	ce 01       	movw	r24, r28
    26fa:	01 96       	adiw	r24, 0x01	; 1
    26fc:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <countdown_ms>
    2700:	f3 01       	movw	r30, r6
    2702:	85 89       	ldd	r24, Z+21	; 0x15
    2704:	96 89       	ldd	r25, Z+22	; 0x16
    2706:	a7 89       	ldd	r26, Z+23	; 0x17
    2708:	b0 8d       	ldd	r27, Z+24	; 0x18
    270a:	89 2b       	or	r24, r25
    270c:	8a 2b       	or	r24, r26
    270e:	8b 2b       	or	r24, r27
    2710:	09 f4       	brne	.+2      	; 0x2714 <MQTTSubscribe+0x7e>
    2712:	9a c0       	rjmp	.+308    	; 0x2848 <MQTTSubscribe+0x1b2>
    2714:	c3 01       	movw	r24, r6
    2716:	01 da       	rcall	.-3070   	; 0x1b1a <getNextPacketId>
    2718:	8b 01       	movw	r16, r22
    271a:	9c 01       	movw	r18, r24
    271c:	f3 01       	movw	r30, r6
    271e:	40 85       	ldd	r20, Z+8	; 0x08
    2720:	51 85       	ldd	r21, Z+9	; 0x09
    2722:	60 e0       	ldi	r22, 0x00	; 0
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	ce 01       	movw	r24, r28
    2728:	4b 96       	adiw	r24, 0x1b	; 27
    272a:	4c 01       	movw	r8, r24
    272c:	fe 01       	movw	r30, r28
    272e:	39 96       	adiw	r30, 0x09	; 9
    2730:	5f 01       	movw	r10, r30
    2732:	c1 2c       	mov	r12, r1
    2734:	d1 2c       	mov	r13, r1
    2736:	76 01       	movw	r14, r12
    2738:	c3 94       	inc	r12
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	f3 01       	movw	r30, r6
    273e:	84 85       	ldd	r24, Z+12	; 0x0c
    2740:	95 85       	ldd	r25, Z+13	; 0x0d
    2742:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <MQTTSerialize_subscribe>
    2746:	ab 01       	movw	r20, r22
    2748:	bc 01       	movw	r22, r24
    274a:	14 16       	cp	r1, r20
    274c:	15 06       	cpc	r1, r21
    274e:	16 06       	cpc	r1, r22
    2750:	17 06       	cpc	r1, r23
    2752:	0c f0       	brlt	.+2      	; 0x2756 <MQTTSubscribe+0xc0>
    2754:	7e c0       	rjmp	.+252    	; 0x2852 <MQTTSubscribe+0x1bc>
    2756:	9e 01       	movw	r18, r28
    2758:	2f 5f       	subi	r18, 0xFF	; 255
    275a:	3f 4f       	sbci	r19, 0xFF	; 255
    275c:	c3 01       	movw	r24, r6
    275e:	f8 d9       	rcall	.-3088   	; 0x1b50 <sendPacket>
    2760:	1b 01       	movw	r2, r22
    2762:	2c 01       	movw	r4, r24
    2764:	67 2b       	or	r22, r23
    2766:	68 2b       	or	r22, r24
    2768:	69 2b       	or	r22, r25
    276a:	09 f0       	breq	.+2      	; 0x276e <MQTTSubscribe+0xd8>
    276c:	7b c0       	rjmp	.+246    	; 0x2864 <MQTTSubscribe+0x1ce>
    276e:	9e 01       	movw	r18, r28
    2770:	2f 5f       	subi	r18, 0xFF	; 255
    2772:	3f 4f       	sbci	r19, 0xFF	; 255
    2774:	49 e0       	ldi	r20, 0x09	; 9
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	70 e0       	ldi	r23, 0x00	; 0
    277c:	c3 01       	movw	r24, r6
    277e:	9e de       	rcall	.-708    	; 0x24bc <waitfor>
    2780:	69 30       	cpi	r22, 0x09	; 9
    2782:	71 05       	cpc	r23, r1
    2784:	81 05       	cpc	r24, r1
    2786:	91 05       	cpc	r25, r1
    2788:	09 f0       	breq	.+2      	; 0x278c <MQTTSubscribe+0xf6>
    278a:	68 c0       	rjmp	.+208    	; 0x285c <MQTTSubscribe+0x1c6>
    278c:	1d 8a       	std	Y+21, r1	; 0x15
    278e:	1e 8a       	std	Y+22, r1	; 0x16
    2790:	1f 8a       	std	Y+23, r1	; 0x17
    2792:	18 8e       	std	Y+24, r1	; 0x18
    2794:	8f ef       	ldi	r24, 0xFF	; 255
    2796:	9f ef       	ldi	r25, 0xFF	; 255
    2798:	dc 01       	movw	r26, r24
    279a:	89 8b       	std	Y+17, r24	; 0x11
    279c:	9a 8b       	std	Y+18, r25	; 0x12
    279e:	ab 8b       	std	Y+19, r26	; 0x13
    27a0:	bc 8b       	std	Y+20, r27	; 0x14
    27a2:	f3 01       	movw	r30, r6
    27a4:	a2 84       	ldd	r10, Z+10	; 0x0a
    27a6:	b3 84       	ldd	r11, Z+11	; 0x0b
    27a8:	c1 2c       	mov	r12, r1
    27aa:	d1 2c       	mov	r13, r1
    27ac:	e6 84       	ldd	r14, Z+14	; 0x0e
    27ae:	f7 84       	ldd	r15, Z+15	; 0x0f
    27b0:	8e 01       	movw	r16, r28
    27b2:	0f 5e       	subi	r16, 0xEF	; 239
    27b4:	1f 4f       	sbci	r17, 0xFF	; 255
    27b6:	9e 01       	movw	r18, r28
    27b8:	2b 5e       	subi	r18, 0xEB	; 235
    27ba:	3f 4f       	sbci	r19, 0xFF	; 255
    27bc:	41 e0       	ldi	r20, 0x01	; 1
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	60 e0       	ldi	r22, 0x00	; 0
    27c2:	70 e0       	ldi	r23, 0x00	; 0
    27c4:	ce 01       	movw	r24, r28
    27c6:	49 96       	adiw	r24, 0x19	; 25
    27c8:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <MQTTDeserialize_suback>
    27cc:	61 30       	cpi	r22, 0x01	; 1
    27ce:	71 05       	cpc	r23, r1
    27d0:	81 05       	cpc	r24, r1
    27d2:	91 05       	cpc	r25, r1
    27d4:	29 f4       	brne	.+10     	; 0x27e0 <MQTTSubscribe+0x14a>
    27d6:	49 89       	ldd	r20, Y+17	; 0x11
    27d8:	5a 89       	ldd	r21, Y+18	; 0x12
    27da:	6b 89       	ldd	r22, Y+19	; 0x13
    27dc:	7c 89       	ldd	r23, Y+20	; 0x14
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <MQTTSubscribe+0x14e>
    27e0:	b2 01       	movw	r22, r4
    27e2:	a1 01       	movw	r20, r2
    27e4:	40 38       	cpi	r20, 0x80	; 128
    27e6:	51 05       	cpc	r21, r1
    27e8:	61 05       	cpc	r22, r1
    27ea:	71 05       	cpc	r23, r1
    27ec:	11 f5       	brne	.+68     	; 0x2832 <MQTTSubscribe+0x19c>
    27ee:	29 c0       	rjmp	.+82     	; 0x2842 <MQTTSubscribe+0x1ac>
    27f0:	fc 01       	movw	r30, r24
    27f2:	ee 0f       	add	r30, r30
    27f4:	ff 1f       	adc	r31, r31
    27f6:	ee 0f       	add	r30, r30
    27f8:	ff 1f       	adc	r31, r31
    27fa:	e6 0d       	add	r30, r6
    27fc:	f7 1d       	adc	r31, r7
    27fe:	21 8d       	ldd	r18, Z+25	; 0x19
    2800:	32 8d       	ldd	r19, Z+26	; 0x1a
    2802:	23 2b       	or	r18, r19
    2804:	91 f4       	brne	.+36     	; 0x282a <MQTTSubscribe+0x194>
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	88 0f       	add	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	f3 01       	movw	r30, r6
    2810:	e8 0f       	add	r30, r24
    2812:	f9 1f       	adc	r31, r25
    2814:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2816:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2818:	92 8f       	std	Z+26, r25	; 0x1a
    281a:	81 8f       	std	Z+25, r24	; 0x19
    281c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    281e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2820:	94 8f       	std	Z+28, r25	; 0x1c
    2822:	83 8f       	std	Z+27, r24	; 0x1b
    2824:	b2 01       	movw	r22, r4
    2826:	a1 01       	movw	r20, r2
    2828:	0c c0       	rjmp	.+24     	; 0x2842 <MQTTSubscribe+0x1ac>
    282a:	01 96       	adiw	r24, 0x01	; 1
    282c:	a1 1d       	adc	r26, r1
    282e:	b1 1d       	adc	r27, r1
    2830:	03 c0       	rjmp	.+6      	; 0x2838 <MQTTSubscribe+0x1a2>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	dc 01       	movw	r26, r24
    2838:	85 30       	cpi	r24, 0x05	; 5
    283a:	91 05       	cpc	r25, r1
    283c:	a1 05       	cpc	r26, r1
    283e:	b1 05       	cpc	r27, r1
    2840:	bc f2       	brlt	.-82     	; 0x27f0 <MQTTSubscribe+0x15a>
    2842:	1a 01       	movw	r2, r20
    2844:	2b 01       	movw	r4, r22
    2846:	0e c0       	rjmp	.+28     	; 0x2864 <MQTTSubscribe+0x1ce>
    2848:	22 24       	eor	r2, r2
    284a:	2a 94       	dec	r2
    284c:	32 2c       	mov	r3, r2
    284e:	21 01       	movw	r4, r2
    2850:	09 c0       	rjmp	.+18     	; 0x2864 <MQTTSubscribe+0x1ce>
    2852:	22 24       	eor	r2, r2
    2854:	2a 94       	dec	r2
    2856:	32 2c       	mov	r3, r2
    2858:	21 01       	movw	r4, r2
    285a:	04 c0       	rjmp	.+8      	; 0x2864 <MQTTSubscribe+0x1ce>
    285c:	22 24       	eor	r2, r2
    285e:	2a 94       	dec	r2
    2860:	32 2c       	mov	r3, r2
    2862:	21 01       	movw	r4, r2
    2864:	c2 01       	movw	r24, r4
    2866:	b1 01       	movw	r22, r2
    2868:	6f 96       	adiw	r28, 0x1f	; 31
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	1f 91       	pop	r17
    287a:	0f 91       	pop	r16
    287c:	ff 90       	pop	r15
    287e:	ef 90       	pop	r14
    2880:	df 90       	pop	r13
    2882:	cf 90       	pop	r12
    2884:	bf 90       	pop	r11
    2886:	af 90       	pop	r10
    2888:	9f 90       	pop	r9
    288a:	8f 90       	pop	r8
    288c:	7f 90       	pop	r7
    288e:	6f 90       	pop	r6
    2890:	5f 90       	pop	r5
    2892:	4f 90       	pop	r4
    2894:	3f 90       	pop	r3
    2896:	2f 90       	pop	r2
    2898:	08 95       	ret

0000289a <MQTTPublish>:

int32_t MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)
{
    289a:	4f 92       	push	r4
    289c:	5f 92       	push	r5
    289e:	6f 92       	push	r6
    28a0:	7f 92       	push	r7
    28a2:	8f 92       	push	r8
    28a4:	9f 92       	push	r9
    28a6:	af 92       	push	r10
    28a8:	bf 92       	push	r11
    28aa:	cf 92       	push	r12
    28ac:	df 92       	push	r13
    28ae:	ef 92       	push	r14
    28b0:	ff 92       	push	r15
    28b2:	0f 93       	push	r16
    28b4:	1f 93       	push	r17
    28b6:	cf 93       	push	r28
    28b8:	df 93       	push	r29
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	64 97       	sbiw	r28, 0x14	; 20
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	4c 01       	movw	r8, r24
    28cc:	5a 01       	movw	r10, r20
  int32_t rc = FAILURE;
  Timer timer;   
  MQTTString topic = MQTTString_initializer;
    28ce:	1b 86       	std	Y+11, r1	; 0x0b
    28d0:	1c 86       	std	Y+12, r1	; 0x0c
    28d2:	1d 86       	std	Y+13, r1	; 0x0d
    28d4:	1e 86       	std	Y+14, r1	; 0x0e
    28d6:	18 8a       	std	Y+16, r1	; 0x10
    28d8:	1f 86       	std	Y+15, r1	; 0x0f
  topic.cstring = (char *)topicName;
    28da:	7a 87       	std	Y+10, r23	; 0x0a
    28dc:	69 87       	std	Y+9, r22	; 0x09
  int32_t len = 0;

  InitTimer(&timer);
    28de:	ce 01       	movw	r24, r28
    28e0:	01 96       	adiw	r24, 0x01	; 1
    28e2:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <InitTimer>
  countdown_ms(&timer, c->command_timeout_ms);
    28e6:	f4 01       	movw	r30, r8
    28e8:	44 81       	ldd	r20, Z+4	; 0x04
    28ea:	55 81       	ldd	r21, Z+5	; 0x05
    28ec:	66 81       	ldd	r22, Z+6	; 0x06
    28ee:	77 81       	ldd	r23, Z+7	; 0x07
    28f0:	ce 01       	movw	r24, r28
    28f2:	01 96       	adiw	r24, 0x01	; 1
    28f4:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <countdown_ms>
    
  if (!c->isconnected)
    28f8:	f4 01       	movw	r30, r8
    28fa:	85 89       	ldd	r24, Z+21	; 0x15
    28fc:	96 89       	ldd	r25, Z+22	; 0x16
    28fe:	a7 89       	ldd	r26, Z+23	; 0x17
    2900:	b0 8d       	ldd	r27, Z+24	; 0x18
    2902:	89 2b       	or	r24, r25
    2904:	8a 2b       	or	r24, r26
    2906:	8b 2b       	or	r24, r27
    2908:	09 f4       	brne	.+2      	; 0x290c <MQTTPublish+0x72>
    290a:	a6 c0       	rjmp	.+332    	; 0x2a58 <MQTTPublish+0x1be>
    goto exit;

  if (message->qos == QOS1 || message->qos == QOS2)
    290c:	f5 01       	movw	r30, r10
    290e:	80 81       	ld	r24, Z
    2910:	81 50       	subi	r24, 0x01	; 1
    2912:	82 30       	cpi	r24, 0x02	; 2
    2914:	28 f4       	brcc	.+10     	; 0x2920 <MQTTPublish+0x86>
    message->id = getNextPacketId(c);
    2916:	c4 01       	movw	r24, r8
    2918:	00 d9       	rcall	.-3584   	; 0x1b1a <getNextPacketId>
    291a:	f5 01       	movw	r30, r10
    291c:	74 83       	std	Z+4, r23	; 0x04
    291e:	63 83       	std	Z+3, r22	; 0x03
    
  len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
        topic, (uint8_t*)message->payload, message->payloadlen);
    2920:	f5 01       	movw	r30, r10
    2922:	47 80       	ldd	r4, Z+7	; 0x07
    2924:	50 84       	ldd	r5, Z+8	; 0x08
    2926:	25 81       	ldd	r18, Z+5	; 0x05
    2928:	36 81       	ldd	r19, Z+6	; 0x06
    goto exit;

  if (message->qos == QOS1 || message->qos == QOS2)
    message->id = getNextPacketId(c);
    
  len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
    292a:	c3 80       	ldd	r12, Z+3	; 0x03
    292c:	d4 80       	ldd	r13, Z+4	; 0x04
    292e:	e1 80       	ldd	r14, Z+1	; 0x01
    2930:	00 81       	ld	r16, Z
    2932:	f4 01       	movw	r30, r8
    2934:	40 85       	ldd	r20, Z+8	; 0x08
    2936:	51 85       	ldd	r21, Z+9	; 0x09
    2938:	60 e0       	ldi	r22, 0x00	; 0
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	84 85       	ldd	r24, Z+12	; 0x0c
    293e:	95 85       	ldd	r25, Z+13	; 0x0d
    2940:	1f 92       	push	r1
    2942:	1f 92       	push	r1
    2944:	5f 92       	push	r5
    2946:	4f 92       	push	r4
    2948:	3f 93       	push	r19
    294a:	2f 93       	push	r18
    294c:	2d b7       	in	r18, 0x3d	; 61
    294e:	3e b7       	in	r19, 0x3e	; 62
    2950:	28 50       	subi	r18, 0x08	; 8
    2952:	31 09       	sbc	r19, r1
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	3e bf       	out	0x3e, r19	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	2d bf       	out	0x3d, r18	; 61
    295e:	ad b7       	in	r26, 0x3d	; 61
    2960:	be b7       	in	r27, 0x3e	; 62
    2962:	11 96       	adiw	r26, 0x01	; 1
    2964:	28 e0       	ldi	r18, 0x08	; 8
    2966:	fe 01       	movw	r30, r28
    2968:	39 96       	adiw	r30, 0x09	; 9
    296a:	01 90       	ld	r0, Z+
    296c:	0d 92       	st	X+, r0
    296e:	2a 95       	dec	r18
    2970:	e1 f7       	brne	.-8      	; 0x296a <MQTTPublish+0xd0>
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	7f d6       	rcall	.+3326   	; 0x3674 <MQTTSerialize_publish>
    2976:	ab 01       	movw	r20, r22
    2978:	bc 01       	movw	r22, r24
        topic, (uint8_t*)message->payload, message->payloadlen);
    
  if (len <= 0)
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	14 16       	cp	r1, r20
    2986:	15 06       	cpc	r1, r21
    2988:	16 06       	cpc	r1, r22
    298a:	17 06       	cpc	r1, r23
    298c:	0c f0       	brlt	.+2      	; 0x2990 <MQTTPublish+0xf6>
    298e:	69 c0       	rjmp	.+210    	; 0x2a62 <MQTTPublish+0x1c8>
    goto exit;
  
  if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
    2990:	9e 01       	movw	r18, r28
    2992:	2f 5f       	subi	r18, 0xFF	; 255
    2994:	3f 4f       	sbci	r19, 0xFF	; 255
    2996:	c4 01       	movw	r24, r8
    2998:	db d8       	rcall	.-3658   	; 0x1b50 <sendPacket>
    299a:	2b 01       	movw	r4, r22
    299c:	3c 01       	movw	r6, r24
    299e:	67 2b       	or	r22, r23
    29a0:	68 2b       	or	r22, r24
    29a2:	69 2b       	or	r22, r25
    29a4:	09 f0       	breq	.+2      	; 0x29a8 <MQTTPublish+0x10e>
    29a6:	6b c0       	rjmp	.+214    	; 0x2a7e <MQTTPublish+0x1e4>
    goto exit; // there was a problem
    
  if (message->qos == QOS1)
    29a8:	f5 01       	movw	r30, r10
    29aa:	80 81       	ld	r24, Z
    29ac:	81 30       	cpi	r24, 0x01	; 1
    29ae:	51 f5       	brne	.+84     	; 0x2a04 <MQTTPublish+0x16a>
  {
    if (waitfor(c, PUBACK, &timer) == PUBACK)
    29b0:	9e 01       	movw	r18, r28
    29b2:	2f 5f       	subi	r18, 0xFF	; 255
    29b4:	3f 4f       	sbci	r19, 0xFF	; 255
    29b6:	44 e0       	ldi	r20, 0x04	; 4
    29b8:	50 e0       	ldi	r21, 0x00	; 0
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	c4 01       	movw	r24, r8
    29c0:	7d dd       	rcall	.-1286   	; 0x24bc <waitfor>
    29c2:	64 30       	cpi	r22, 0x04	; 4
    29c4:	71 05       	cpc	r23, r1
    29c6:	81 05       	cpc	r24, r1
    29c8:	91 05       	cpc	r25, r1
    29ca:	09 f0       	breq	.+2      	; 0x29ce <MQTTPublish+0x134>
    29cc:	4f c0       	rjmp	.+158    	; 0x2a6c <MQTTPublish+0x1d2>
    {
      uint16_t mypacketid;
      uint8_t dup, type;

      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    29ce:	f4 01       	movw	r30, r8
    29d0:	e2 84       	ldd	r14, Z+10	; 0x0a
    29d2:	f3 84       	ldd	r15, Z+11	; 0x0b
    29d4:	00 e0       	ldi	r16, 0x00	; 0
    29d6:	10 e0       	ldi	r17, 0x00	; 0
    29d8:	26 85       	ldd	r18, Z+14	; 0x0e
    29da:	37 85       	ldd	r19, Z+15	; 0x0f
    29dc:	ae 01       	movw	r20, r28
    29de:	4f 5e       	subi	r20, 0xEF	; 239
    29e0:	5f 4f       	sbci	r21, 0xFF	; 255
    29e2:	be 01       	movw	r22, r28
    29e4:	6c 5e       	subi	r22, 0xEC	; 236
    29e6:	7f 4f       	sbci	r23, 0xFF	; 255
    29e8:	ce 01       	movw	r24, r28
    29ea:	43 96       	adiw	r24, 0x13	; 19
    29ec:	07 d3       	rcall	.+1550   	; 0x2ffc <MQTTDeserialize_ack>
    29ee:	61 30       	cpi	r22, 0x01	; 1
    29f0:	71 05       	cpc	r23, r1
    29f2:	81 05       	cpc	r24, r1
    29f4:	91 05       	cpc	r25, r1
    29f6:	09 f4       	brne	.+2      	; 0x29fa <MQTTPublish+0x160>
    29f8:	42 c0       	rjmp	.+132    	; 0x2a7e <MQTTPublish+0x1e4>
        rc = FAILURE;
    29fa:	44 24       	eor	r4, r4
    29fc:	4a 94       	dec	r4
    29fe:	54 2c       	mov	r5, r4
    2a00:	32 01       	movw	r6, r4
    2a02:	3d c0       	rjmp	.+122    	; 0x2a7e <MQTTPublish+0x1e4>
    }
    else
      rc = FAILURE;
  }
  else if (message->qos == QOS2)
    2a04:	82 30       	cpi	r24, 0x02	; 2
    2a06:	d9 f5       	brne	.+118    	; 0x2a7e <MQTTPublish+0x1e4>
  {
    if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
    2a08:	9e 01       	movw	r18, r28
    2a0a:	2f 5f       	subi	r18, 0xFF	; 255
    2a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0e:	47 e0       	ldi	r20, 0x07	; 7
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	60 e0       	ldi	r22, 0x00	; 0
    2a14:	70 e0       	ldi	r23, 0x00	; 0
    2a16:	c4 01       	movw	r24, r8
    2a18:	51 dd       	rcall	.-1374   	; 0x24bc <waitfor>
    2a1a:	67 30       	cpi	r22, 0x07	; 7
    2a1c:	71 05       	cpc	r23, r1
    2a1e:	81 05       	cpc	r24, r1
    2a20:	91 05       	cpc	r25, r1
    2a22:	49 f5       	brne	.+82     	; 0x2a76 <MQTTPublish+0x1dc>
    {
      uint16_t mypacketid;
      uint8_t dup, type;
    
      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    2a24:	f4 01       	movw	r30, r8
    2a26:	e2 84       	ldd	r14, Z+10	; 0x0a
    2a28:	f3 84       	ldd	r15, Z+11	; 0x0b
    2a2a:	00 e0       	ldi	r16, 0x00	; 0
    2a2c:	10 e0       	ldi	r17, 0x00	; 0
    2a2e:	26 85       	ldd	r18, Z+14	; 0x0e
    2a30:	37 85       	ldd	r19, Z+15	; 0x0f
    2a32:	ae 01       	movw	r20, r28
    2a34:	4f 5e       	subi	r20, 0xEF	; 239
    2a36:	5f 4f       	sbci	r21, 0xFF	; 255
    2a38:	be 01       	movw	r22, r28
    2a3a:	6c 5e       	subi	r22, 0xEC	; 236
    2a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3e:	ce 01       	movw	r24, r28
    2a40:	43 96       	adiw	r24, 0x13	; 19
    2a42:	dc d2       	rcall	.+1464   	; 0x2ffc <MQTTDeserialize_ack>
    2a44:	61 30       	cpi	r22, 0x01	; 1
    2a46:	71 05       	cpc	r23, r1
    2a48:	81 05       	cpc	r24, r1
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	c1 f0       	breq	.+48     	; 0x2a7e <MQTTPublish+0x1e4>
        rc = FAILURE;
    2a4e:	44 24       	eor	r4, r4
    2a50:	4a 94       	dec	r4
    2a52:	54 2c       	mov	r5, r4
    2a54:	32 01       	movw	r6, r4
    2a56:	13 c0       	rjmp	.+38     	; 0x2a7e <MQTTPublish+0x1e4>
  return rc;
}

int32_t MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)
{
  int32_t rc = FAILURE;
    2a58:	44 24       	eor	r4, r4
    2a5a:	4a 94       	dec	r4
    2a5c:	54 2c       	mov	r5, r4
    2a5e:	32 01       	movw	r6, r4
    2a60:	0e c0       	rjmp	.+28     	; 0x2a7e <MQTTPublish+0x1e4>
    2a62:	44 24       	eor	r4, r4
    2a64:	4a 94       	dec	r4
    2a66:	54 2c       	mov	r5, r4
    2a68:	32 01       	movw	r6, r4
    2a6a:	09 c0       	rjmp	.+18     	; 0x2a7e <MQTTPublish+0x1e4>

      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
        rc = FAILURE;
    }
    else
      rc = FAILURE;
    2a6c:	44 24       	eor	r4, r4
    2a6e:	4a 94       	dec	r4
    2a70:	54 2c       	mov	r5, r4
    2a72:	32 01       	movw	r6, r4
    2a74:	04 c0       	rjmp	.+8      	; 0x2a7e <MQTTPublish+0x1e4>
    
      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
        rc = FAILURE;
    }
    else
      rc = FAILURE;
    2a76:	44 24       	eor	r4, r4
    2a78:	4a 94       	dec	r4
    2a7a:	54 2c       	mov	r5, r4
    2a7c:	32 01       	movw	r6, r4
  }
    
exit:
  return rc;
}
    2a7e:	c3 01       	movw	r24, r6
    2a80:	b2 01       	movw	r22, r4
    2a82:	64 96       	adiw	r28, 0x14	; 20
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	ff 90       	pop	r15
    2a98:	ef 90       	pop	r14
    2a9a:	df 90       	pop	r13
    2a9c:	cf 90       	pop	r12
    2a9e:	bf 90       	pop	r11
    2aa0:	af 90       	pop	r10
    2aa2:	9f 90       	pop	r9
    2aa4:	8f 90       	pop	r8
    2aa6:	7f 90       	pop	r7
    2aa8:	6f 90       	pop	r6
    2aaa:	5f 90       	pop	r5
    2aac:	4f 90       	pop	r4
    2aae:	08 95       	ret

00002ab0 <MQTTSerialize_connectLength>:
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_disconnect(uint8_t* buf, int32_t buflen)
{
  return MQTTSerialize_zero(buf, buflen, DISCONNECT);
}
    2ab0:	8f 92       	push	r8
    2ab2:	9f 92       	push	r9
    2ab4:	af 92       	push	r10
    2ab6:	bf 92       	push	r11
    2ab8:	cf 92       	push	r12
    2aba:	df 92       	push	r13
    2abc:	ef 92       	push	r14
    2abe:	ff 92       	push	r15
    2ac0:	cf 93       	push	r28
    2ac2:	df 93       	push	r29
    2ac4:	ec 01       	movw	r28, r24
    2ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac8:	83 30       	cpi	r24, 0x03	; 3
    2aca:	31 f0       	breq	.+12     	; 0x2ad8 <MQTTSerialize_connectLength+0x28>
    2acc:	84 30       	cpi	r24, 0x04	; 4
    2ace:	61 f0       	breq	.+24     	; 0x2ae8 <MQTTSerialize_connectLength+0x38>
    2ad0:	c1 2c       	mov	r12, r1
    2ad2:	d1 2c       	mov	r13, r1
    2ad4:	76 01       	movw	r14, r12
    2ad6:	0f c0       	rjmp	.+30     	; 0x2af6 <MQTTSerialize_connectLength+0x46>
    2ad8:	0f 2e       	mov	r0, r31
    2ada:	fc e0       	ldi	r31, 0x0C	; 12
    2adc:	cf 2e       	mov	r12, r31
    2ade:	d1 2c       	mov	r13, r1
    2ae0:	e1 2c       	mov	r14, r1
    2ae2:	f1 2c       	mov	r15, r1
    2ae4:	f0 2d       	mov	r31, r0
    2ae6:	07 c0       	rjmp	.+14     	; 0x2af6 <MQTTSerialize_connectLength+0x46>
    2ae8:	0f 2e       	mov	r0, r31
    2aea:	fa e0       	ldi	r31, 0x0A	; 10
    2aec:	cf 2e       	mov	r12, r31
    2aee:	d1 2c       	mov	r13, r1
    2af0:	e1 2c       	mov	r14, r1
    2af2:	f1 2c       	mov	r15, r1
    2af4:	f0 2d       	mov	r31, r0
    2af6:	2f 81       	ldd	r18, Y+7	; 0x07
    2af8:	38 85       	ldd	r19, Y+8	; 0x08
    2afa:	49 85       	ldd	r20, Y+9	; 0x09
    2afc:	5a 85       	ldd	r21, Y+10	; 0x0a
    2afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b06:	06 d5       	rcall	.+2572   	; 0x3514 <MQTTstrlen>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	02 96       	adiw	r24, 0x02	; 2
    2b0e:	a1 1d       	adc	r26, r1
    2b10:	b1 1d       	adc	r27, r1
    2b12:	c8 0e       	add	r12, r24
    2b14:	d9 1e       	adc	r13, r25
    2b16:	ea 1e       	adc	r14, r26
    2b18:	fb 1e       	adc	r15, r27
    2b1a:	8a 89       	ldd	r24, Y+18	; 0x12
    2b1c:	88 23       	and	r24, r24
    2b1e:	31 f1       	breq	.+76     	; 0x2b6c <MQTTSerialize_connectLength+0xbc>
    2b20:	29 8d       	ldd	r18, Y+25	; 0x19
    2b22:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2b24:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2b26:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2b28:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2b2a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2b2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b2e:	98 a1       	ldd	r25, Y+32	; 0x20
    2b30:	f1 d4       	rcall	.+2530   	; 0x3514 <MQTTstrlen>
    2b32:	4b 01       	movw	r8, r22
    2b34:	5c 01       	movw	r10, r24
    2b36:	22 e0       	ldi	r18, 0x02	; 2
    2b38:	82 0e       	add	r8, r18
    2b3a:	91 1c       	adc	r9, r1
    2b3c:	a1 1c       	adc	r10, r1
    2b3e:	b1 1c       	adc	r11, r1
    2b40:	29 a1       	ldd	r18, Y+33	; 0x21
    2b42:	3a a1       	ldd	r19, Y+34	; 0x22
    2b44:	4b a1       	ldd	r20, Y+35	; 0x23
    2b46:	5c a1       	ldd	r21, Y+36	; 0x24
    2b48:	6d a1       	ldd	r22, Y+37	; 0x25
    2b4a:	7e a1       	ldd	r23, Y+38	; 0x26
    2b4c:	8f a1       	ldd	r24, Y+39	; 0x27
    2b4e:	98 a5       	ldd	r25, Y+40	; 0x28
    2b50:	e1 d4       	rcall	.+2498   	; 0x3514 <MQTTstrlen>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	88 0d       	add	r24, r8
    2b58:	99 1d       	adc	r25, r9
    2b5a:	aa 1d       	adc	r26, r10
    2b5c:	bb 1d       	adc	r27, r11
    2b5e:	02 96       	adiw	r24, 0x02	; 2
    2b60:	a1 1d       	adc	r26, r1
    2b62:	b1 1d       	adc	r27, r1
    2b64:	c8 0e       	add	r12, r24
    2b66:	d9 1e       	adc	r13, r25
    2b68:	ea 1e       	adc	r14, r26
    2b6a:	fb 1e       	adc	r15, r27
    2b6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b70:	89 2b       	or	r24, r25
    2b72:	21 f4       	brne	.+8      	; 0x2b7c <MQTTSerialize_connectLength+0xcc>
    2b74:	89 a9       	ldd	r24, Y+49	; 0x31
    2b76:	9a a9       	ldd	r25, Y+50	; 0x32
    2b78:	89 2b       	or	r24, r25
    2b7a:	91 f0       	breq	.+36     	; 0x2ba0 <MQTTSerialize_connectLength+0xf0>
    2b7c:	2b a5       	ldd	r18, Y+43	; 0x2b
    2b7e:	3c a5       	ldd	r19, Y+44	; 0x2c
    2b80:	4d a5       	ldd	r20, Y+45	; 0x2d
    2b82:	5e a5       	ldd	r21, Y+46	; 0x2e
    2b84:	6f a5       	ldd	r22, Y+47	; 0x2f
    2b86:	78 a9       	ldd	r23, Y+48	; 0x30
    2b88:	89 a9       	ldd	r24, Y+49	; 0x31
    2b8a:	9a a9       	ldd	r25, Y+50	; 0x32
    2b8c:	c3 d4       	rcall	.+2438   	; 0x3514 <MQTTstrlen>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	02 96       	adiw	r24, 0x02	; 2
    2b94:	a1 1d       	adc	r26, r1
    2b96:	b1 1d       	adc	r27, r1
    2b98:	c8 0e       	add	r12, r24
    2b9a:	d9 1e       	adc	r13, r25
    2b9c:	ea 1e       	adc	r14, r26
    2b9e:	fb 1e       	adc	r15, r27
    2ba0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ba2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ba4:	89 2b       	or	r24, r25
    2ba6:	21 f4       	brne	.+8      	; 0x2bb0 <MQTTSerialize_connectLength+0x100>
    2ba8:	89 ad       	ldd	r24, Y+57	; 0x39
    2baa:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bac:	89 2b       	or	r24, r25
    2bae:	91 f0       	breq	.+36     	; 0x2bd4 <MQTTSerialize_connectLength+0x124>
    2bb0:	2b a9       	ldd	r18, Y+51	; 0x33
    2bb2:	3c a9       	ldd	r19, Y+52	; 0x34
    2bb4:	4d a9       	ldd	r20, Y+53	; 0x35
    2bb6:	5e a9       	ldd	r21, Y+54	; 0x36
    2bb8:	6f a9       	ldd	r22, Y+55	; 0x37
    2bba:	78 ad       	ldd	r23, Y+56	; 0x38
    2bbc:	89 ad       	ldd	r24, Y+57	; 0x39
    2bbe:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bc0:	a9 d4       	rcall	.+2386   	; 0x3514 <MQTTstrlen>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	02 96       	adiw	r24, 0x02	; 2
    2bc8:	a1 1d       	adc	r26, r1
    2bca:	b1 1d       	adc	r27, r1
    2bcc:	c8 0e       	add	r12, r24
    2bce:	d9 1e       	adc	r13, r25
    2bd0:	ea 1e       	adc	r14, r26
    2bd2:	fb 1e       	adc	r15, r27
    2bd4:	c7 01       	movw	r24, r14
    2bd6:	b6 01       	movw	r22, r12
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	ff 90       	pop	r15
    2bde:	ef 90       	pop	r14
    2be0:	df 90       	pop	r13
    2be2:	cf 90       	pop	r12
    2be4:	bf 90       	pop	r11
    2be6:	af 90       	pop	r10
    2be8:	9f 90       	pop	r9
    2bea:	8f 90       	pop	r8
    2bec:	08 95       	ret

00002bee <MQTTSerialize_connect>:
    2bee:	4f 92       	push	r4
    2bf0:	5f 92       	push	r5
    2bf2:	6f 92       	push	r6
    2bf4:	7f 92       	push	r7
    2bf6:	af 92       	push	r10
    2bf8:	bf 92       	push	r11
    2bfa:	df 92       	push	r13
    2bfc:	ef 92       	push	r14
    2bfe:	ff 92       	push	r15
    2c00:	0f 93       	push	r16
    2c02:	1f 93       	push	r17
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	00 d0       	rcall	.+0      	; 0x2c0a <MQTTSerialize_connect+0x1c>
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <MQTTSerialize_connect+0x1e>
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	5c 01       	movw	r10, r24
    2c12:	2a 01       	movw	r4, r20
    2c14:	3b 01       	movw	r6, r22
    2c16:	79 01       	movw	r14, r18
    2c18:	9a 83       	std	Y+2, r25	; 0x02
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    2c1c:	c9 01       	movw	r24, r18
    2c1e:	48 df       	rcall	.-368    	; 0x2ab0 <MQTTSerialize_connectLength>
    2c20:	6b 83       	std	Y+3, r22	; 0x03
    2c22:	7c 83       	std	Y+4, r23	; 0x04
    2c24:	8d 83       	std	Y+5, r24	; 0x05
    2c26:	9e 83       	std	Y+6, r25	; 0x06
    2c28:	33 d3       	rcall	.+1638   	; 0x3290 <MQTTPacket_len>
    2c2a:	46 16       	cp	r4, r22
    2c2c:	57 06       	cpc	r5, r23
    2c2e:	68 06       	cpc	r6, r24
    2c30:	79 06       	cpc	r7, r25
    2c32:	0c f4       	brge	.+2      	; 0x2c36 <MQTTSerialize_connect+0x48>
    2c34:	b2 c0       	rjmp	.+356    	; 0x2d9a <MQTTSerialize_connect+0x1ac>
    2c36:	60 e1       	ldi	r22, 0x10	; 16
    2c38:	ce 01       	movw	r24, r28
    2c3a:	01 96       	adiw	r24, 0x01	; 1
    2c3c:	7a d3       	rcall	.+1780   	; 0x3332 <writeChar>
    2c3e:	4b 81       	ldd	r20, Y+3	; 0x03
    2c40:	5c 81       	ldd	r21, Y+4	; 0x04
    2c42:	6d 81       	ldd	r22, Y+5	; 0x05
    2c44:	7e 81       	ldd	r23, Y+6	; 0x06
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4a:	44 d2       	rcall	.+1160   	; 0x30d4 <MQTTPacket_encode>
    2c4c:	29 81       	ldd	r18, Y+1	; 0x01
    2c4e:	3a 81       	ldd	r19, Y+2	; 0x02
    2c50:	62 0f       	add	r22, r18
    2c52:	73 1f       	adc	r23, r19
    2c54:	7a 83       	std	Y+2, r23	; 0x02
    2c56:	69 83       	std	Y+1, r22	; 0x01
    2c58:	f7 01       	movw	r30, r14
    2c5a:	86 81       	ldd	r24, Z+6	; 0x06
    2c5c:	84 30       	cpi	r24, 0x04	; 4
    2c5e:	51 f4       	brne	.+20     	; 0x2c74 <MQTTSerialize_connect+0x86>
    2c60:	6e ed       	ldi	r22, 0xDE	; 222
    2c62:	7a e0       	ldi	r23, 0x0A	; 10
    2c64:	ce 01       	movw	r24, r28
    2c66:	01 96       	adiw	r24, 0x01	; 1
    2c68:	9c d3       	rcall	.+1848   	; 0x33a2 <writeCString>
    2c6a:	64 e0       	ldi	r22, 0x04	; 4
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	01 96       	adiw	r24, 0x01	; 1
    2c70:	60 d3       	rcall	.+1728   	; 0x3332 <writeChar>
    2c72:	09 c0       	rjmp	.+18     	; 0x2c86 <MQTTSerialize_connect+0x98>
    2c74:	63 ee       	ldi	r22, 0xE3	; 227
    2c76:	7a e0       	ldi	r23, 0x0A	; 10
    2c78:	ce 01       	movw	r24, r28
    2c7a:	01 96       	adiw	r24, 0x01	; 1
    2c7c:	92 d3       	rcall	.+1828   	; 0x33a2 <writeCString>
    2c7e:	63 e0       	ldi	r22, 0x03	; 3
    2c80:	ce 01       	movw	r24, r28
    2c82:	01 96       	adiw	r24, 0x01	; 1
    2c84:	56 d3       	rcall	.+1708   	; 0x3332 <writeChar>
    2c86:	d1 2c       	mov	r13, r1
    2c88:	f7 01       	movw	r30, r14
    2c8a:	81 89       	ldd	r24, Z+17	; 0x11
    2c8c:	80 fb       	bst	r24, 0
    2c8e:	d1 f8       	bld	r13, 1
    2c90:	92 89       	ldd	r25, Z+18	; 0x12
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	91 11       	cpse	r25, r1
    2c96:	01 c0       	rjmp	.+2      	; 0x2c9a <MQTTSerialize_connect+0xac>
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	80 fb       	bst	r24, 0
    2c9c:	d2 f8       	bld	r13, 2
    2c9e:	d2 fe       	sbrs	r13, 2
    2ca0:	0d c0       	rjmp	.+26     	; 0x2cbc <MQTTSerialize_connect+0xce>
    2ca2:	f7 01       	movw	r30, r14
    2ca4:	82 a5       	ldd	r24, Z+42	; 0x2a
    2ca6:	83 70       	andi	r24, 0x03	; 3
    2ca8:	88 0f       	add	r24, r24
    2caa:	88 0f       	add	r24, r24
    2cac:	88 0f       	add	r24, r24
    2cae:	9d 2d       	mov	r25, r13
    2cb0:	97 7e       	andi	r25, 0xE7	; 231
    2cb2:	d9 2e       	mov	r13, r25
    2cb4:	d8 2a       	or	r13, r24
    2cb6:	81 a5       	ldd	r24, Z+41	; 0x29
    2cb8:	80 fb       	bst	r24, 0
    2cba:	d5 f8       	bld	r13, 5
    2cbc:	f7 01       	movw	r30, r14
    2cbe:	83 a5       	ldd	r24, Z+43	; 0x2b
    2cc0:	94 a5       	ldd	r25, Z+44	; 0x2c
    2cc2:	89 2b       	or	r24, r25
    2cc4:	21 f4       	brne	.+8      	; 0x2cce <MQTTSerialize_connect+0xe0>
    2cc6:	81 a9       	ldd	r24, Z+49	; 0x31
    2cc8:	92 a9       	ldd	r25, Z+50	; 0x32
    2cca:	89 2b       	or	r24, r25
    2ccc:	11 f0       	breq	.+4      	; 0x2cd2 <MQTTSerialize_connect+0xe4>
    2cce:	68 94       	set
    2cd0:	d7 f8       	bld	r13, 7
    2cd2:	f7 01       	movw	r30, r14
    2cd4:	83 a9       	ldd	r24, Z+51	; 0x33
    2cd6:	94 a9       	ldd	r25, Z+52	; 0x34
    2cd8:	89 2b       	or	r24, r25
    2cda:	21 f4       	brne	.+8      	; 0x2ce4 <MQTTSerialize_connect+0xf6>
    2cdc:	81 ad       	ldd	r24, Z+57	; 0x39
    2cde:	92 ad       	ldd	r25, Z+58	; 0x3a
    2ce0:	89 2b       	or	r24, r25
    2ce2:	11 f0       	breq	.+4      	; 0x2ce8 <MQTTSerialize_connect+0xfa>
    2ce4:	68 94       	set
    2ce6:	d6 f8       	bld	r13, 6
    2ce8:	6d 2d       	mov	r22, r13
    2cea:	ce 01       	movw	r24, r28
    2cec:	01 96       	adiw	r24, 0x01	; 1
    2cee:	21 d3       	rcall	.+1602   	; 0x3332 <writeChar>
    2cf0:	f7 01       	movw	r30, r14
    2cf2:	47 85       	ldd	r20, Z+15	; 0x0f
    2cf4:	50 89       	ldd	r21, Z+16	; 0x10
    2cf6:	60 e0       	ldi	r22, 0x00	; 0
    2cf8:	70 e0       	ldi	r23, 0x00	; 0
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	01 96       	adiw	r24, 0x01	; 1
    2cfe:	23 d3       	rcall	.+1606   	; 0x3346 <writeInt>
    2d00:	f7 01       	movw	r30, r14
    2d02:	07 81       	ldd	r16, Z+7	; 0x07
    2d04:	10 85       	ldd	r17, Z+8	; 0x08
    2d06:	21 85       	ldd	r18, Z+9	; 0x09
    2d08:	32 85       	ldd	r19, Z+10	; 0x0a
    2d0a:	43 85       	ldd	r20, Z+11	; 0x0b
    2d0c:	54 85       	ldd	r21, Z+12	; 0x0c
    2d0e:	65 85       	ldd	r22, Z+13	; 0x0d
    2d10:	76 85       	ldd	r23, Z+14	; 0x0e
    2d12:	ce 01       	movw	r24, r28
    2d14:	01 96       	adiw	r24, 0x01	; 1
    2d16:	6d d3       	rcall	.+1754   	; 0x33f2 <writeMQTTString>
    2d18:	f7 01       	movw	r30, r14
    2d1a:	82 89       	ldd	r24, Z+18	; 0x12
    2d1c:	88 23       	and	r24, r24
    2d1e:	b9 f0       	breq	.+46     	; 0x2d4e <MQTTSerialize_connect+0x160>
    2d20:	01 8d       	ldd	r16, Z+25	; 0x19
    2d22:	12 8d       	ldd	r17, Z+26	; 0x1a
    2d24:	23 8d       	ldd	r18, Z+27	; 0x1b
    2d26:	34 8d       	ldd	r19, Z+28	; 0x1c
    2d28:	45 8d       	ldd	r20, Z+29	; 0x1d
    2d2a:	56 8d       	ldd	r21, Z+30	; 0x1e
    2d2c:	67 8d       	ldd	r22, Z+31	; 0x1f
    2d2e:	70 a1       	ldd	r23, Z+32	; 0x20
    2d30:	ce 01       	movw	r24, r28
    2d32:	01 96       	adiw	r24, 0x01	; 1
    2d34:	5e d3       	rcall	.+1724   	; 0x33f2 <writeMQTTString>
    2d36:	f7 01       	movw	r30, r14
    2d38:	01 a1       	ldd	r16, Z+33	; 0x21
    2d3a:	12 a1       	ldd	r17, Z+34	; 0x22
    2d3c:	23 a1       	ldd	r18, Z+35	; 0x23
    2d3e:	34 a1       	ldd	r19, Z+36	; 0x24
    2d40:	45 a1       	ldd	r20, Z+37	; 0x25
    2d42:	56 a1       	ldd	r21, Z+38	; 0x26
    2d44:	67 a1       	ldd	r22, Z+39	; 0x27
    2d46:	70 a5       	ldd	r23, Z+40	; 0x28
    2d48:	ce 01       	movw	r24, r28
    2d4a:	01 96       	adiw	r24, 0x01	; 1
    2d4c:	52 d3       	rcall	.+1700   	; 0x33f2 <writeMQTTString>
    2d4e:	7d 2c       	mov	r7, r13
    2d50:	dd 20       	and	r13, r13
    2d52:	64 f4       	brge	.+24     	; 0x2d6c <MQTTSerialize_connect+0x17e>
    2d54:	f7 01       	movw	r30, r14
    2d56:	03 a5       	ldd	r16, Z+43	; 0x2b
    2d58:	14 a5       	ldd	r17, Z+44	; 0x2c
    2d5a:	25 a5       	ldd	r18, Z+45	; 0x2d
    2d5c:	36 a5       	ldd	r19, Z+46	; 0x2e
    2d5e:	47 a5       	ldd	r20, Z+47	; 0x2f
    2d60:	50 a9       	ldd	r21, Z+48	; 0x30
    2d62:	61 a9       	ldd	r22, Z+49	; 0x31
    2d64:	72 a9       	ldd	r23, Z+50	; 0x32
    2d66:	ce 01       	movw	r24, r28
    2d68:	01 96       	adiw	r24, 0x01	; 1
    2d6a:	43 d3       	rcall	.+1670   	; 0x33f2 <writeMQTTString>
    2d6c:	76 fe       	sbrs	r7, 6
    2d6e:	0c c0       	rjmp	.+24     	; 0x2d88 <MQTTSerialize_connect+0x19a>
    2d70:	f7 01       	movw	r30, r14
    2d72:	03 a9       	ldd	r16, Z+51	; 0x33
    2d74:	14 a9       	ldd	r17, Z+52	; 0x34
    2d76:	25 a9       	ldd	r18, Z+53	; 0x35
    2d78:	36 a9       	ldd	r19, Z+54	; 0x36
    2d7a:	47 a9       	ldd	r20, Z+55	; 0x37
    2d7c:	50 ad       	ldd	r21, Z+56	; 0x38
    2d7e:	61 ad       	ldd	r22, Z+57	; 0x39
    2d80:	72 ad       	ldd	r23, Z+58	; 0x3a
    2d82:	ce 01       	movw	r24, r28
    2d84:	01 96       	adiw	r24, 0x01	; 1
    2d86:	35 d3       	rcall	.+1642   	; 0x33f2 <writeMQTTString>
    2d88:	69 81       	ldd	r22, Y+1	; 0x01
    2d8a:	7a 81       	ldd	r23, Y+2	; 0x02
    2d8c:	6a 19       	sub	r22, r10
    2d8e:	7b 09       	sbc	r23, r11
    2d90:	07 2e       	mov	r0, r23
    2d92:	00 0c       	add	r0, r0
    2d94:	88 0b       	sbc	r24, r24
    2d96:	99 0b       	sbc	r25, r25
    2d98:	04 c0       	rjmp	.+8      	; 0x2da2 <MQTTSerialize_connect+0x1b4>
    2d9a:	6e ef       	ldi	r22, 0xFE	; 254
    2d9c:	7f ef       	ldi	r23, 0xFF	; 255
    2d9e:	8f ef       	ldi	r24, 0xFF	; 255
    2da0:	9f ef       	ldi	r25, 0xFF	; 255
    2da2:	26 96       	adiw	r28, 0x06	; 6
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	df 91       	pop	r29
    2db0:	cf 91       	pop	r28
    2db2:	1f 91       	pop	r17
    2db4:	0f 91       	pop	r16
    2db6:	ff 90       	pop	r15
    2db8:	ef 90       	pop	r14
    2dba:	df 90       	pop	r13
    2dbc:	bf 90       	pop	r11
    2dbe:	af 90       	pop	r10
    2dc0:	7f 90       	pop	r7
    2dc2:	6f 90       	pop	r6
    2dc4:	5f 90       	pop	r5
    2dc6:	4f 90       	pop	r4
    2dc8:	08 95       	ret

00002dca <MQTTDeserialize_connack>:
    2dca:	ef 92       	push	r14
    2dcc:	ff 92       	push	r15
    2dce:	0f 93       	push	r16
    2dd0:	1f 93       	push	r17
    2dd2:	cf 93       	push	r28
    2dd4:	df 93       	push	r29
    2dd6:	00 d0       	rcall	.+0      	; 0x2dd8 <MQTTDeserialize_connack+0xe>
    2dd8:	00 d0       	rcall	.+0      	; 0x2dda <MQTTDeserialize_connack+0x10>
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	7c 01       	movw	r14, r24
    2de0:	8b 01       	movw	r16, r22
    2de2:	5a 83       	std	Y+2, r21	; 0x02
    2de4:	49 83       	std	Y+1, r20	; 0x01
    2de6:	ce 01       	movw	r24, r28
    2de8:	01 96       	adiw	r24, 0x01	; 1
    2dea:	9b d2       	rcall	.+1334   	; 0x3322 <readChar>
    2dec:	80 7f       	andi	r24, 0xF0	; 240
    2dee:	80 32       	cpi	r24, 0x20	; 32
    2df0:	19 f5       	brne	.+70     	; 0x2e38 <MQTTDeserialize_connack+0x6e>
    2df2:	be 01       	movw	r22, r28
    2df4:	6d 5f       	subi	r22, 0xFD	; 253
    2df6:	7f 4f       	sbci	r23, 0xFF	; 255
    2df8:	89 81       	ldd	r24, Y+1	; 0x01
    2dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfc:	77 d2       	rcall	.+1262   	; 0x32ec <MQTTPacket_decodeBuf>
    2dfe:	29 81       	ldd	r18, Y+1	; 0x01
    2e00:	3a 81       	ldd	r19, Y+2	; 0x02
    2e02:	26 0f       	add	r18, r22
    2e04:	37 1f       	adc	r19, r23
    2e06:	3a 83       	std	Y+2, r19	; 0x02
    2e08:	29 83       	std	Y+1, r18	; 0x01
    2e0a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e0c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e0e:	22 30       	cpi	r18, 0x02	; 2
    2e10:	31 05       	cpc	r19, r1
    2e12:	ac f0       	brlt	.+42     	; 0x2e3e <MQTTDeserialize_connack+0x74>
    2e14:	ce 01       	movw	r24, r28
    2e16:	01 96       	adiw	r24, 0x01	; 1
    2e18:	84 d2       	rcall	.+1288   	; 0x3322 <readChar>
    2e1a:	87 fb       	bst	r24, 7
    2e1c:	88 27       	eor	r24, r24
    2e1e:	80 f9       	bld	r24, 0
    2e20:	f7 01       	movw	r30, r14
    2e22:	80 83       	st	Z, r24
    2e24:	ce 01       	movw	r24, r28
    2e26:	01 96       	adiw	r24, 0x01	; 1
    2e28:	7c d2       	rcall	.+1272   	; 0x3322 <readChar>
    2e2a:	f8 01       	movw	r30, r16
    2e2c:	80 83       	st	Z, r24
    2e2e:	61 e0       	ldi	r22, 0x01	; 1
    2e30:	70 e0       	ldi	r23, 0x00	; 0
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	03 c0       	rjmp	.+6      	; 0x2e3e <MQTTDeserialize_connack+0x74>
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	70 e0       	ldi	r23, 0x00	; 0
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	26 96       	adiw	r28, 0x06	; 6
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	df 91       	pop	r29
    2e4c:	cf 91       	pop	r28
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
    2e52:	ff 90       	pop	r15
    2e54:	ef 90       	pop	r14
    2e56:	08 95       	ret

00002e58 <MQTTSerialize_zero>:
    2e58:	0f 93       	push	r16
    2e5a:	1f 93       	push	r17
    2e5c:	cf 93       	push	r28
    2e5e:	df 93       	push	r29
    2e60:	1f 92       	push	r1
    2e62:	1f 92       	push	r1
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	9a 83       	std	Y+2, r25	; 0x02
    2e6a:	89 83       	std	Y+1, r24	; 0x01
    2e6c:	42 30       	cpi	r20, 0x02	; 2
    2e6e:	51 05       	cpc	r21, r1
    2e70:	61 05       	cpc	r22, r1
    2e72:	71 05       	cpc	r23, r1
    2e74:	c4 f0       	brlt	.+48     	; 0x2ea6 <MQTTSerialize_zero+0x4e>
    2e76:	8c 01       	movw	r16, r24
    2e78:	62 2f       	mov	r22, r18
    2e7a:	62 95       	swap	r22
    2e7c:	60 7f       	andi	r22, 0xF0	; 240
    2e7e:	ce 01       	movw	r24, r28
    2e80:	01 96       	adiw	r24, 0x01	; 1
    2e82:	57 d2       	rcall	.+1198   	; 0x3332 <writeChar>
    2e84:	40 e0       	ldi	r20, 0x00	; 0
    2e86:	50 e0       	ldi	r21, 0x00	; 0
    2e88:	ba 01       	movw	r22, r20
    2e8a:	89 81       	ldd	r24, Y+1	; 0x01
    2e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8e:	22 d1       	rcall	.+580    	; 0x30d4 <MQTTPacket_encode>
    2e90:	29 81       	ldd	r18, Y+1	; 0x01
    2e92:	3a 81       	ldd	r19, Y+2	; 0x02
    2e94:	62 0f       	add	r22, r18
    2e96:	73 1f       	adc	r23, r19
    2e98:	60 1b       	sub	r22, r16
    2e9a:	71 0b       	sbc	r23, r17
    2e9c:	07 2e       	mov	r0, r23
    2e9e:	00 0c       	add	r0, r0
    2ea0:	88 0b       	sbc	r24, r24
    2ea2:	99 0b       	sbc	r25, r25
    2ea4:	04 c0       	rjmp	.+8      	; 0x2eae <MQTTSerialize_zero+0x56>
    2ea6:	6e ef       	ldi	r22, 0xFE	; 254
    2ea8:	7f ef       	ldi	r23, 0xFF	; 255
    2eaa:	8f ef       	ldi	r24, 0xFF	; 255
    2eac:	9f ef       	ldi	r25, 0xFF	; 255
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	1f 91       	pop	r17
    2eb8:	0f 91       	pop	r16
    2eba:	08 95       	ret

00002ebc <MQTTSerialize_pingreq>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_pingreq(uint8_t* buf, int32_t buflen)
{
  return MQTTSerialize_zero(buf, buflen, PINGREQ);
    2ebc:	2c e0       	ldi	r18, 0x0C	; 12
    2ebe:	cc cf       	rjmp	.-104    	; 0x2e58 <MQTTSerialize_zero>
}
    2ec0:	08 95       	ret

00002ec2 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int32_t MQTTDeserialize_publish(uint8_t* dup, uint8_t* qos, uint8_t* retained, uint16_t* packetid, MQTTString* topicName,
		uint8_t** payload, int32_t* payloadlen, uint8_t* buf, int32_t buflen)
{
    2ec2:	2f 92       	push	r2
    2ec4:	3f 92       	push	r3
    2ec6:	4f 92       	push	r4
    2ec8:	5f 92       	push	r5
    2eca:	6f 92       	push	r6
    2ecc:	7f 92       	push	r7
    2ece:	8f 92       	push	r8
    2ed0:	9f 92       	push	r9
    2ed2:	af 92       	push	r10
    2ed4:	bf 92       	push	r11
    2ed6:	cf 92       	push	r12
    2ed8:	df 92       	push	r13
    2eda:	ef 92       	push	r14
    2edc:	ff 92       	push	r15
    2ede:	0f 93       	push	r16
    2ee0:	1f 93       	push	r17
    2ee2:	cf 93       	push	r28
    2ee4:	df 93       	push	r29
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	28 97       	sbiw	r28, 0x08	; 8
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	3c 01       	movw	r6, r24
    2ef8:	1b 01       	movw	r2, r22
    2efa:	2a 01       	movw	r4, r20
    2efc:	38 87       	std	Y+8, r19	; 0x08
    2efe:	2f 83       	std	Y+7, r18	; 0x07
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    2f00:	ba 82       	std	Y+2, r11	; 0x02
    2f02:	a9 82       	std	Y+1, r10	; 0x01
  uint8_t* enddata = NULL;
  int32_t rc = 0;
  int32_t mylen = 0;
    2f04:	1b 82       	std	Y+3, r1	; 0x03
    2f06:	1c 82       	std	Y+4, r1	; 0x04
    2f08:	1d 82       	std	Y+5, r1	; 0x05
    2f0a:	1e 82       	std	Y+6, r1	; 0x06

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
    2f0c:	ce 01       	movw	r24, r28
    2f0e:	01 96       	adiw	r24, 0x01	; 1
    2f10:	08 d2       	rcall	.+1040   	; 0x3322 <readChar>

  if (header.bits.type != PUBLISH)
    2f12:	98 2f       	mov	r25, r24
    2f14:	90 7f       	andi	r25, 0xF0	; 240
    2f16:	90 33       	cpi	r25, 0x30	; 48
    2f18:	09 f0       	breq	.+2      	; 0x2f1c <MQTTDeserialize_publish+0x5a>
    2f1a:	52 c0       	rjmp	.+164    	; 0x2fc0 <MQTTDeserialize_publish+0xfe>
    goto exit;
	
  *dup = header.bits.dup;
    2f1c:	83 fb       	bst	r24, 3
    2f1e:	99 27       	eor	r25, r25
    2f20:	90 f9       	bld	r25, 0
    2f22:	f3 01       	movw	r30, r6
    2f24:	90 83       	st	Z, r25
  *qos = header.bits.qos;
    2f26:	98 2f       	mov	r25, r24
    2f28:	96 95       	lsr	r25
    2f2a:	93 70       	andi	r25, 0x03	; 3
    2f2c:	f1 01       	movw	r30, r2
    2f2e:	90 83       	st	Z, r25
  *retained = header.bits.retain;
    2f30:	81 70       	andi	r24, 0x01	; 1
    2f32:	f2 01       	movw	r30, r4
    2f34:	80 83       	st	Z, r24

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    2f36:	be 01       	movw	r22, r28
    2f38:	6d 5f       	subi	r22, 0xFD	; 253
    2f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f40:	d5 d1       	rcall	.+938    	; 0x32ec <MQTTPacket_decodeBuf>
    2f42:	4b 01       	movw	r8, r22
    2f44:	5c 01       	movw	r10, r24
    2f46:	69 80       	ldd	r6, Y+1	; 0x01
    2f48:	7a 80       	ldd	r7, Y+2	; 0x02
    2f4a:	66 0e       	add	r6, r22
    2f4c:	77 1e       	adc	r7, r23
    2f4e:	7a 82       	std	Y+2, r7	; 0x02
    2f50:	69 82       	std	Y+1, r6	; 0x01
  enddata = curdata + mylen;
    2f52:	8b 81       	ldd	r24, Y+3	; 0x03
    2f54:	9c 81       	ldd	r25, Y+4	; 0x04
    2f56:	68 0e       	add	r6, r24
    2f58:	79 1e       	adc	r7, r25

  /* do we have enough data to read the protocol version byte? */
  if (!readMQTTLenString(topicName, &curdata, enddata) || enddata - curdata < 0)
    2f5a:	a3 01       	movw	r20, r6
    2f5c:	be 01       	movw	r22, r28
    2f5e:	6f 5f       	subi	r22, 0xFF	; 255
    2f60:	7f 4f       	sbci	r23, 0xFF	; 255
    2f62:	c8 01       	movw	r24, r16
    2f64:	99 d2       	rcall	.+1330   	; 0x3498 <readMQTTLenString>
    2f66:	67 2b       	or	r22, r23
    2f68:	68 2b       	or	r22, r24
    2f6a:	69 2b       	or	r22, r25
    2f6c:	61 f1       	breq	.+88     	; 0x2fc6 <MQTTDeserialize_publish+0x104>
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	9a 81       	ldd	r25, Y+2	; 0x02
    2f72:	93 01       	movw	r18, r6
    2f74:	28 1b       	sub	r18, r24
    2f76:	39 0b       	sbc	r19, r25
    2f78:	c9 01       	movw	r24, r18
    2f7a:	99 23       	and	r25, r25
    2f7c:	24 f1       	brlt	.+72     	; 0x2fc6 <MQTTDeserialize_publish+0x104>
    goto exit;

  if (*qos > 0)
    2f7e:	f1 01       	movw	r30, r2
    2f80:	80 81       	ld	r24, Z
    2f82:	88 23       	and	r24, r24
    *packetid = readInt(&curdata);
    2f84:	39 f0       	breq	.+14     	; 0x2f94 <MQTTDeserialize_publish+0xd2>
    2f86:	ce 01       	movw	r24, r28
    2f88:	01 96       	adiw	r24, 0x01	; 1
    2f8a:	b8 d1       	rcall	.+880    	; 0x32fc <readInt>
    2f8c:	ef 81       	ldd	r30, Y+7	; 0x07
    2f8e:	f8 85       	ldd	r31, Y+8	; 0x08
    2f90:	71 83       	std	Z+1, r23	; 0x01
    2f92:	60 83       	st	Z, r22

  *payloadlen = enddata - curdata;
    2f94:	29 81       	ldd	r18, Y+1	; 0x01
    2f96:	3a 81       	ldd	r19, Y+2	; 0x02
    2f98:	c3 01       	movw	r24, r6
    2f9a:	82 1b       	sub	r24, r18
    2f9c:	93 0b       	sbc	r25, r19
    2f9e:	09 2e       	mov	r0, r25
    2fa0:	00 0c       	add	r0, r0
    2fa2:	aa 0b       	sbc	r26, r26
    2fa4:	bb 0b       	sbc	r27, r27
    2fa6:	f6 01       	movw	r30, r12
    2fa8:	80 83       	st	Z, r24
    2faa:	91 83       	std	Z+1, r25	; 0x01
    2fac:	a2 83       	std	Z+2, r26	; 0x02
    2fae:	b3 83       	std	Z+3, r27	; 0x03
  *payload = curdata;
    2fb0:	f7 01       	movw	r30, r14
    2fb2:	31 83       	std	Z+1, r19	; 0x01
    2fb4:	20 83       	st	Z, r18
  rc = 1;
    2fb6:	81 2c       	mov	r8, r1
    2fb8:	91 2c       	mov	r9, r1
    2fba:	54 01       	movw	r10, r8
    2fbc:	83 94       	inc	r8
    2fbe:	03 c0       	rjmp	.+6      	; 0x2fc6 <MQTTDeserialize_publish+0x104>
		uint8_t** payload, int32_t* payloadlen, uint8_t* buf, int32_t buflen)
{
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
  uint8_t* enddata = NULL;
  int32_t rc = 0;
    2fc0:	81 2c       	mov	r8, r1
    2fc2:	91 2c       	mov	r9, r1
    2fc4:	54 01       	movw	r10, r8
  *payload = curdata;
  rc = 1;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    2fc6:	c5 01       	movw	r24, r10
    2fc8:	b4 01       	movw	r22, r8
    2fca:	28 96       	adiw	r28, 0x08	; 8
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	0f 91       	pop	r16
    2fde:	ff 90       	pop	r15
    2fe0:	ef 90       	pop	r14
    2fe2:	df 90       	pop	r13
    2fe4:	cf 90       	pop	r12
    2fe6:	bf 90       	pop	r11
    2fe8:	af 90       	pop	r10
    2fea:	9f 90       	pop	r9
    2fec:	8f 90       	pop	r8
    2fee:	7f 90       	pop	r7
    2ff0:	6f 90       	pop	r6
    2ff2:	5f 90       	pop	r5
    2ff4:	4f 90       	pop	r4
    2ff6:	3f 90       	pop	r3
    2ff8:	2f 90       	pop	r2
    2ffa:	08 95       	ret

00002ffc <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_ack(uint8_t* packettype, uint8_t* dup, uint16_t* packetid, uint8_t* buf, int32_t buflen)
{
    2ffc:	cf 92       	push	r12
    2ffe:	df 92       	push	r13
    3000:	ef 92       	push	r14
    3002:	ff 92       	push	r15
    3004:	0f 93       	push	r16
    3006:	1f 93       	push	r17
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	00 d0       	rcall	.+0      	; 0x300e <MQTTDeserialize_ack+0x12>
    300e:	00 d0       	rcall	.+0      	; 0x3010 <MQTTDeserialize_ack+0x14>
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	7c 01       	movw	r14, r24
    3016:	6b 01       	movw	r12, r22
    3018:	8a 01       	movw	r16, r20
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    301a:	3a 83       	std	Y+2, r19	; 0x02
    301c:	29 83       	std	Y+1, r18	; 0x01
  uint8_t* enddata = NULL;
  int32_t rc = 0;
  int32_t mylen;

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
    301e:	ce 01       	movw	r24, r28
    3020:	01 96       	adiw	r24, 0x01	; 1
    3022:	7f d1       	rcall	.+766    	; 0x3322 <readChar>
  *dup = header.bits.dup;
    3024:	83 fb       	bst	r24, 3
    3026:	99 27       	eor	r25, r25
    3028:	90 f9       	bld	r25, 0
    302a:	f6 01       	movw	r30, r12
    302c:	90 83       	st	Z, r25
  *packettype = header.bits.type;
    302e:	82 95       	swap	r24
    3030:	8f 70       	andi	r24, 0x0F	; 15
    3032:	f7 01       	movw	r30, r14
    3034:	80 83       	st	Z, r24

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    3036:	be 01       	movw	r22, r28
    3038:	6d 5f       	subi	r22, 0xFD	; 253
    303a:	7f 4f       	sbci	r23, 0xFF	; 255
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	9a 81       	ldd	r25, Y+2	; 0x02
    3040:	55 d1       	rcall	.+682    	; 0x32ec <MQTTPacket_decodeBuf>
    3042:	29 81       	ldd	r18, Y+1	; 0x01
    3044:	3a 81       	ldd	r19, Y+2	; 0x02
    3046:	26 0f       	add	r18, r22
    3048:	37 1f       	adc	r19, r23
    304a:	3a 83       	std	Y+2, r19	; 0x02
    304c:	29 83       	std	Y+1, r18	; 0x01
  enddata = curdata + mylen;

  if (enddata - curdata < 2)
    304e:	2b 81       	ldd	r18, Y+3	; 0x03
    3050:	3c 81       	ldd	r19, Y+4	; 0x04
    3052:	22 30       	cpi	r18, 0x02	; 2
    3054:	31 05       	cpc	r19, r1
    3056:	54 f0       	brlt	.+20     	; 0x306c <MQTTDeserialize_ack+0x70>
    goto exit;
	
  *packetid = readInt(&curdata);
    3058:	ce 01       	movw	r24, r28
    305a:	01 96       	adiw	r24, 0x01	; 1
    305c:	4f d1       	rcall	.+670    	; 0x32fc <readInt>
    305e:	f8 01       	movw	r30, r16
    3060:	71 83       	std	Z+1, r23	; 0x01
    3062:	60 83       	st	Z, r22

  rc = 1;
    3064:	61 e0       	ldi	r22, 0x01	; 1
    3066:	70 e0       	ldi	r23, 0x00	; 0
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    306c:	26 96       	adiw	r28, 0x06	; 6
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	ff 90       	pop	r15
    3082:	ef 90       	pop	r14
    3084:	df 90       	pop	r13
    3086:	cf 90       	pop	r12
    3088:	08 95       	ret

0000308a <bufchar>:

int32_t getLenStringLen(char* ptr)
{
  int32_t len = 256*((uint8_t)(*ptr)) + (uint8_t)(*(ptr+1));
  return len;
}
    308a:	0f 93       	push	r16
    308c:	1f 93       	push	r17
    308e:	cf 93       	push	r28
    3090:	df 93       	push	r29
    3092:	ec 01       	movw	r28, r24
    3094:	00 e0       	ldi	r16, 0x00	; 0
    3096:	10 e0       	ldi	r17, 0x00	; 0
    3098:	98 01       	movw	r18, r16
    309a:	10 c0       	rjmp	.+32     	; 0x30bc <bufchar+0x32>
    309c:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <bufptr>
    30a0:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <bufptr+0x1>
    30a4:	df 01       	movw	r26, r30
    30a6:	11 96       	adiw	r26, 0x01	; 1
    30a8:	b0 93 8e 0d 	sts	0x0D8E, r27	; 0x800d8e <bufptr+0x1>
    30ac:	a0 93 8d 0d 	sts	0x0D8D, r26	; 0x800d8d <bufptr>
    30b0:	90 81       	ld	r25, Z
    30b2:	98 83       	st	Y, r25
    30b4:	0f 5f       	subi	r16, 0xFF	; 255
    30b6:	1f 4f       	sbci	r17, 0xFF	; 255
    30b8:	2f 4f       	sbci	r18, 0xFF	; 255
    30ba:	3f 4f       	sbci	r19, 0xFF	; 255
    30bc:	04 17       	cp	r16, r20
    30be:	15 07       	cpc	r17, r21
    30c0:	26 07       	cpc	r18, r22
    30c2:	37 07       	cpc	r19, r23
    30c4:	5c f3       	brlt	.-42     	; 0x309c <bufchar+0x12>
    30c6:	cb 01       	movw	r24, r22
    30c8:	ba 01       	movw	r22, r20
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	1f 91       	pop	r17
    30d0:	0f 91       	pop	r16
    30d2:	08 95       	ret

000030d4 <MQTTPacket_encode>:
    30d4:	8f 92       	push	r8
    30d6:	9f 92       	push	r9
    30d8:	af 92       	push	r10
    30da:	bf 92       	push	r11
    30dc:	cf 92       	push	r12
    30de:	df 92       	push	r13
    30e0:	ef 92       	push	r14
    30e2:	ff 92       	push	r15
    30e4:	0f 93       	push	r16
    30e6:	1f 93       	push	r17
    30e8:	c1 2c       	mov	r12, r1
    30ea:	d1 2c       	mov	r13, r1
    30ec:	76 01       	movw	r14, r12
    30ee:	02 c0       	rjmp	.+4      	; 0x30f4 <MQTTPacket_encode+0x20>
    30f0:	75 01       	movw	r14, r10
    30f2:	64 01       	movw	r12, r8
    30f4:	8a 01       	movw	r16, r20
    30f6:	9b 01       	movw	r18, r22
    30f8:	0f 77       	andi	r16, 0x7F	; 127
    30fa:	11 27       	eor	r17, r17
    30fc:	22 27       	eor	r18, r18
    30fe:	30 78       	andi	r19, 0x80	; 128
    3100:	33 23       	and	r19, r19
    3102:	64 f4       	brge	.+24     	; 0x311c <MQTTPacket_encode+0x48>
    3104:	01 50       	subi	r16, 0x01	; 1
    3106:	11 09       	sbc	r17, r1
    3108:	21 09       	sbc	r18, r1
    310a:	31 09       	sbc	r19, r1
    310c:	00 68       	ori	r16, 0x80	; 128
    310e:	1f 6f       	ori	r17, 0xFF	; 255
    3110:	2f 6f       	ori	r18, 0xFF	; 255
    3112:	3f 6f       	ori	r19, 0xFF	; 255
    3114:	0f 5f       	subi	r16, 0xFF	; 255
    3116:	1f 4f       	sbci	r17, 0xFF	; 255
    3118:	2f 4f       	sbci	r18, 0xFF	; 255
    311a:	3f 4f       	sbci	r19, 0xFF	; 255
    311c:	4a 01       	movw	r8, r20
    311e:	5b 01       	movw	r10, r22
    3120:	77 23       	and	r23, r23
    3122:	2c f4       	brge	.+10     	; 0x312e <MQTTPacket_encode+0x5a>
    3124:	2f e7       	ldi	r18, 0x7F	; 127
    3126:	82 0e       	add	r8, r18
    3128:	91 1c       	adc	r9, r1
    312a:	a1 1c       	adc	r10, r1
    312c:	b1 1c       	adc	r11, r1
    312e:	b5 01       	movw	r22, r10
    3130:	a4 01       	movw	r20, r8
    3132:	68 94       	set
    3134:	16 f8       	bld	r1, 6
    3136:	75 95       	asr	r23
    3138:	67 95       	ror	r22
    313a:	57 95       	ror	r21
    313c:	47 95       	ror	r20
    313e:	16 94       	lsr	r1
    3140:	d1 f7       	brne	.-12     	; 0x3136 <MQTTPacket_encode+0x62>
    3142:	14 16       	cp	r1, r20
    3144:	15 06       	cpc	r1, r21
    3146:	16 06       	cpc	r1, r22
    3148:	17 06       	cpc	r1, r23
    314a:	0c f4       	brge	.+2      	; 0x314e <MQTTPacket_encode+0x7a>
    314c:	00 68       	ori	r16, 0x80	; 128
    314e:	46 01       	movw	r8, r12
    3150:	57 01       	movw	r10, r14
    3152:	2f ef       	ldi	r18, 0xFF	; 255
    3154:	82 1a       	sub	r8, r18
    3156:	92 0a       	sbc	r9, r18
    3158:	a2 0a       	sbc	r10, r18
    315a:	b2 0a       	sbc	r11, r18
    315c:	fc 01       	movw	r30, r24
    315e:	ec 0d       	add	r30, r12
    3160:	fd 1d       	adc	r31, r13
    3162:	00 83       	st	Z, r16
    3164:	14 16       	cp	r1, r20
    3166:	15 06       	cpc	r1, r21
    3168:	16 06       	cpc	r1, r22
    316a:	17 06       	cpc	r1, r23
    316c:	0c f2       	brlt	.-126    	; 0x30f0 <MQTTPacket_encode+0x1c>
    316e:	c5 01       	movw	r24, r10
    3170:	b4 01       	movw	r22, r8
    3172:	1f 91       	pop	r17
    3174:	0f 91       	pop	r16
    3176:	ff 90       	pop	r15
    3178:	ef 90       	pop	r14
    317a:	df 90       	pop	r13
    317c:	cf 90       	pop	r12
    317e:	bf 90       	pop	r11
    3180:	af 90       	pop	r10
    3182:	9f 90       	pop	r9
    3184:	8f 90       	pop	r8
    3186:	08 95       	ret

00003188 <MQTTPacket_decode>:
    3188:	4f 92       	push	r4
    318a:	5f 92       	push	r5
    318c:	6f 92       	push	r6
    318e:	7f 92       	push	r7
    3190:	9f 92       	push	r9
    3192:	af 92       	push	r10
    3194:	bf 92       	push	r11
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	0f 93       	push	r16
    31a0:	1f 93       	push	r17
    31a2:	cf 93       	push	r28
    31a4:	df 93       	push	r29
    31a6:	1f 92       	push	r1
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    31ac:	5c 01       	movw	r10, r24
    31ae:	8b 01       	movw	r16, r22
    31b0:	db 01       	movw	r26, r22
    31b2:	1d 92       	st	X+, r1
    31b4:	1d 92       	st	X+, r1
    31b6:	1d 92       	st	X+, r1
    31b8:	1c 92       	st	X, r1
    31ba:	13 97       	sbiw	r26, 0x03	; 3
    31bc:	41 2c       	mov	r4, r1
    31be:	51 2c       	mov	r5, r1
    31c0:	32 01       	movw	r6, r4
    31c2:	c1 2c       	mov	r12, r1
    31c4:	d1 2c       	mov	r13, r1
    31c6:	76 01       	movw	r14, r12
    31c8:	c3 94       	inc	r12
    31ca:	bf ef       	ldi	r27, 0xFF	; 255
    31cc:	4b 1a       	sub	r4, r27
    31ce:	5b 0a       	sbc	r5, r27
    31d0:	6b 0a       	sbc	r6, r27
    31d2:	7b 0a       	sbc	r7, r27
    31d4:	e5 e0       	ldi	r30, 0x05	; 5
    31d6:	4e 16       	cp	r4, r30
    31d8:	51 04       	cpc	r5, r1
    31da:	61 04       	cpc	r6, r1
    31dc:	71 04       	cpc	r7, r1
    31de:	0c f0       	brlt	.+2      	; 0x31e2 <MQTTPacket_decode+0x5a>
    31e0:	44 c0       	rjmp	.+136    	; 0x326a <MQTTPacket_decode+0xe2>
    31e2:	41 e0       	ldi	r20, 0x01	; 1
    31e4:	50 e0       	ldi	r21, 0x00	; 0
    31e6:	60 e0       	ldi	r22, 0x00	; 0
    31e8:	70 e0       	ldi	r23, 0x00	; 0
    31ea:	ce 01       	movw	r24, r28
    31ec:	01 96       	adiw	r24, 0x01	; 1
    31ee:	f5 01       	movw	r30, r10
    31f0:	19 95       	eicall
    31f2:	61 30       	cpi	r22, 0x01	; 1
    31f4:	71 05       	cpc	r23, r1
    31f6:	81 05       	cpc	r24, r1
    31f8:	91 05       	cpc	r25, r1
    31fa:	b9 f5       	brne	.+110    	; 0x326a <MQTTPacket_decode+0xe2>
    31fc:	99 80       	ldd	r9, Y+1	; 0x01
    31fe:	a9 2d       	mov	r26, r9
    3200:	af 77       	andi	r26, 0x7F	; 127
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	a7 01       	movw	r20, r14
    3206:	96 01       	movw	r18, r12
    3208:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <__muluhisi3>
    320c:	d8 01       	movw	r26, r16
    320e:	2d 91       	ld	r18, X+
    3210:	3d 91       	ld	r19, X+
    3212:	4d 91       	ld	r20, X+
    3214:	5c 91       	ld	r21, X
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	82 0f       	add	r24, r18
    321c:	93 1f       	adc	r25, r19
    321e:	a4 1f       	adc	r26, r20
    3220:	b5 1f       	adc	r27, r21
    3222:	f8 01       	movw	r30, r16
    3224:	80 83       	st	Z, r24
    3226:	91 83       	std	Z+1, r25	; 0x01
    3228:	a2 83       	std	Z+2, r26	; 0x02
    322a:	b3 83       	std	Z+3, r27	; 0x03
    322c:	cc 0c       	add	r12, r12
    322e:	dd 1c       	adc	r13, r13
    3230:	ee 1c       	adc	r14, r14
    3232:	ff 1c       	adc	r15, r15
    3234:	cc 0c       	add	r12, r12
    3236:	dd 1c       	adc	r13, r13
    3238:	ee 1c       	adc	r14, r14
    323a:	ff 1c       	adc	r15, r15
    323c:	cc 0c       	add	r12, r12
    323e:	dd 1c       	adc	r13, r13
    3240:	ee 1c       	adc	r14, r14
    3242:	ff 1c       	adc	r15, r15
    3244:	cc 0c       	add	r12, r12
    3246:	dd 1c       	adc	r13, r13
    3248:	ee 1c       	adc	r14, r14
    324a:	ff 1c       	adc	r15, r15
    324c:	cc 0c       	add	r12, r12
    324e:	dd 1c       	adc	r13, r13
    3250:	ee 1c       	adc	r14, r14
    3252:	ff 1c       	adc	r15, r15
    3254:	cc 0c       	add	r12, r12
    3256:	dd 1c       	adc	r13, r13
    3258:	ee 1c       	adc	r14, r14
    325a:	ff 1c       	adc	r15, r15
    325c:	cc 0c       	add	r12, r12
    325e:	dd 1c       	adc	r13, r13
    3260:	ee 1c       	adc	r14, r14
    3262:	ff 1c       	adc	r15, r15
    3264:	99 20       	and	r9, r9
    3266:	0c f4       	brge	.+2      	; 0x326a <MQTTPacket_decode+0xe2>
    3268:	b0 cf       	rjmp	.-160    	; 0x31ca <MQTTPacket_decode+0x42>
    326a:	c3 01       	movw	r24, r6
    326c:	b2 01       	movw	r22, r4
    326e:	0f 90       	pop	r0
    3270:	df 91       	pop	r29
    3272:	cf 91       	pop	r28
    3274:	1f 91       	pop	r17
    3276:	0f 91       	pop	r16
    3278:	ff 90       	pop	r15
    327a:	ef 90       	pop	r14
    327c:	df 90       	pop	r13
    327e:	cf 90       	pop	r12
    3280:	bf 90       	pop	r11
    3282:	af 90       	pop	r10
    3284:	9f 90       	pop	r9
    3286:	7f 90       	pop	r7
    3288:	6f 90       	pop	r6
    328a:	5f 90       	pop	r5
    328c:	4f 90       	pop	r4
    328e:	08 95       	ret

00003290 <MQTTPacket_len>:
    3290:	0f 93       	push	r16
    3292:	1f 93       	push	r17
    3294:	8b 01       	movw	r16, r22
    3296:	9c 01       	movw	r18, r24
    3298:	0f 5f       	subi	r16, 0xFF	; 255
    329a:	1f 4f       	sbci	r17, 0xFF	; 255
    329c:	2f 4f       	sbci	r18, 0xFF	; 255
    329e:	3f 4f       	sbci	r19, 0xFF	; 255
    32a0:	00 38       	cpi	r16, 0x80	; 128
    32a2:	11 05       	cpc	r17, r1
    32a4:	21 05       	cpc	r18, r1
    32a6:	31 05       	cpc	r19, r1
    32a8:	2c f4       	brge	.+10     	; 0x32b4 <MQTTPacket_len+0x24>
    32aa:	6e 5f       	subi	r22, 0xFE	; 254
    32ac:	7f 4f       	sbci	r23, 0xFF	; 255
    32ae:	8f 4f       	sbci	r24, 0xFF	; 255
    32b0:	9f 4f       	sbci	r25, 0xFF	; 255
    32b2:	19 c0       	rjmp	.+50     	; 0x32e6 <MQTTPacket_len+0x56>
    32b4:	01 15       	cp	r16, r1
    32b6:	40 e4       	ldi	r20, 0x40	; 64
    32b8:	14 07       	cpc	r17, r20
    32ba:	21 05       	cpc	r18, r1
    32bc:	31 05       	cpc	r19, r1
    32be:	2c f4       	brge	.+10     	; 0x32ca <MQTTPacket_len+0x3a>
    32c0:	6d 5f       	subi	r22, 0xFD	; 253
    32c2:	7f 4f       	sbci	r23, 0xFF	; 255
    32c4:	8f 4f       	sbci	r24, 0xFF	; 255
    32c6:	9f 4f       	sbci	r25, 0xFF	; 255
    32c8:	0e c0       	rjmp	.+28     	; 0x32e6 <MQTTPacket_len+0x56>
    32ca:	0f 3f       	cpi	r16, 0xFF	; 255
    32cc:	1f 4f       	sbci	r17, 0xFF	; 255
    32ce:	2f 41       	sbci	r18, 0x1F	; 31
    32d0:	31 05       	cpc	r19, r1
    32d2:	2c f4       	brge	.+10     	; 0x32de <MQTTPacket_len+0x4e>
    32d4:	6c 5f       	subi	r22, 0xFC	; 252
    32d6:	7f 4f       	sbci	r23, 0xFF	; 255
    32d8:	8f 4f       	sbci	r24, 0xFF	; 255
    32da:	9f 4f       	sbci	r25, 0xFF	; 255
    32dc:	04 c0       	rjmp	.+8      	; 0x32e6 <MQTTPacket_len+0x56>
    32de:	6b 5f       	subi	r22, 0xFB	; 251
    32e0:	7f 4f       	sbci	r23, 0xFF	; 255
    32e2:	8f 4f       	sbci	r24, 0xFF	; 255
    32e4:	9f 4f       	sbci	r25, 0xFF	; 255
    32e6:	1f 91       	pop	r17
    32e8:	0f 91       	pop	r16
    32ea:	08 95       	ret

000032ec <MQTTPacket_decodeBuf>:
    32ec:	90 93 8e 0d 	sts	0x0D8E, r25	; 0x800d8e <bufptr+0x1>
    32f0:	80 93 8d 0d 	sts	0x0D8D, r24	; 0x800d8d <bufptr>
    32f4:	85 e4       	ldi	r24, 0x45	; 69
    32f6:	98 e1       	ldi	r25, 0x18	; 24
    32f8:	47 cf       	rjmp	.-370    	; 0x3188 <MQTTPacket_decode>
    32fa:	08 95       	ret

000032fc <readInt>:
    32fc:	dc 01       	movw	r26, r24
    32fe:	ed 91       	ld	r30, X+
    3300:	fc 91       	ld	r31, X
    3302:	11 97       	sbiw	r26, 0x01	; 1
    3304:	60 81       	ld	r22, Z
    3306:	70 e0       	ldi	r23, 0x00	; 0
    3308:	76 2f       	mov	r23, r22
    330a:	66 27       	eor	r22, r22
    330c:	81 81       	ldd	r24, Z+1	; 0x01
    330e:	68 0f       	add	r22, r24
    3310:	71 1d       	adc	r23, r1
    3312:	07 2e       	mov	r0, r23
    3314:	00 0c       	add	r0, r0
    3316:	88 0b       	sbc	r24, r24
    3318:	99 0b       	sbc	r25, r25
    331a:	32 96       	adiw	r30, 0x02	; 2
    331c:	ed 93       	st	X+, r30
    331e:	fc 93       	st	X, r31
    3320:	08 95       	ret

00003322 <readChar>:
    3322:	dc 01       	movw	r26, r24
    3324:	ed 91       	ld	r30, X+
    3326:	fc 91       	ld	r31, X
    3328:	11 97       	sbiw	r26, 0x01	; 1
    332a:	81 91       	ld	r24, Z+
    332c:	ed 93       	st	X+, r30
    332e:	fc 93       	st	X, r31
    3330:	08 95       	ret

00003332 <writeChar>:
    3332:	fc 01       	movw	r30, r24
    3334:	a0 81       	ld	r26, Z
    3336:	b1 81       	ldd	r27, Z+1	; 0x01
    3338:	6c 93       	st	X, r22
    333a:	80 81       	ld	r24, Z
    333c:	91 81       	ldd	r25, Z+1	; 0x01
    333e:	01 96       	adiw	r24, 0x01	; 1
    3340:	91 83       	std	Z+1, r25	; 0x01
    3342:	80 83       	st	Z, r24
    3344:	08 95       	ret

00003346 <writeInt>:
    3346:	cf 93       	push	r28
    3348:	df 93       	push	r29
    334a:	fc 01       	movw	r30, r24
    334c:	c0 81       	ld	r28, Z
    334e:	d1 81       	ldd	r29, Z+1	; 0x01
    3350:	db 01       	movw	r26, r22
    3352:	ca 01       	movw	r24, r20
    3354:	77 23       	and	r23, r23
    3356:	24 f4       	brge	.+8      	; 0x3360 <writeInt+0x1a>
    3358:	81 50       	subi	r24, 0x01	; 1
    335a:	9f 4f       	sbci	r25, 0xFF	; 255
    335c:	af 4f       	sbci	r26, 0xFF	; 255
    335e:	bf 4f       	sbci	r27, 0xFF	; 255
    3360:	98 83       	st	Y, r25
    3362:	a0 81       	ld	r26, Z
    3364:	b1 81       	ldd	r27, Z+1	; 0x01
    3366:	cd 01       	movw	r24, r26
    3368:	01 96       	adiw	r24, 0x01	; 1
    336a:	91 83       	std	Z+1, r25	; 0x01
    336c:	80 83       	st	Z, r24
    336e:	55 27       	eor	r21, r21
    3370:	66 27       	eor	r22, r22
    3372:	70 78       	andi	r23, 0x80	; 128
    3374:	77 23       	and	r23, r23
    3376:	5c f4       	brge	.+22     	; 0x338e <writeInt+0x48>
    3378:	41 50       	subi	r20, 0x01	; 1
    337a:	51 09       	sbc	r21, r1
    337c:	61 09       	sbc	r22, r1
    337e:	71 09       	sbc	r23, r1
    3380:	5f 6f       	ori	r21, 0xFF	; 255
    3382:	6f 6f       	ori	r22, 0xFF	; 255
    3384:	7f 6f       	ori	r23, 0xFF	; 255
    3386:	4f 5f       	subi	r20, 0xFF	; 255
    3388:	5f 4f       	sbci	r21, 0xFF	; 255
    338a:	6f 4f       	sbci	r22, 0xFF	; 255
    338c:	7f 4f       	sbci	r23, 0xFF	; 255
    338e:	11 96       	adiw	r26, 0x01	; 1
    3390:	4c 93       	st	X, r20
    3392:	80 81       	ld	r24, Z
    3394:	91 81       	ldd	r25, Z+1	; 0x01
    3396:	01 96       	adiw	r24, 0x01	; 1
    3398:	91 83       	std	Z+1, r25	; 0x01
    339a:	80 83       	st	Z, r24
    339c:	df 91       	pop	r29
    339e:	cf 91       	pop	r28
    33a0:	08 95       	ret

000033a2 <writeCString>:
    33a2:	ef 92       	push	r14
    33a4:	ff 92       	push	r15
    33a6:	0f 93       	push	r16
    33a8:	1f 93       	push	r17
    33aa:	cf 93       	push	r28
    33ac:	df 93       	push	r29
    33ae:	8c 01       	movw	r16, r24
    33b0:	7b 01       	movw	r14, r22
    33b2:	eb 01       	movw	r28, r22
    33b4:	09 90       	ld	r0, Y+
    33b6:	00 20       	and	r0, r0
    33b8:	e9 f7       	brne	.-6      	; 0x33b4 <writeCString+0x12>
    33ba:	21 97       	sbiw	r28, 0x01	; 1
    33bc:	c6 1b       	sub	r28, r22
    33be:	d7 0b       	sbc	r29, r23
    33c0:	ae 01       	movw	r20, r28
    33c2:	60 e0       	ldi	r22, 0x00	; 0
    33c4:	70 e0       	ldi	r23, 0x00	; 0
    33c6:	bf df       	rcall	.-130    	; 0x3346 <writeInt>
    33c8:	ae 01       	movw	r20, r28
    33ca:	b7 01       	movw	r22, r14
    33cc:	f8 01       	movw	r30, r16
    33ce:	80 81       	ld	r24, Z
    33d0:	91 81       	ldd	r25, Z+1	; 0x01
    33d2:	0e 94 29 38 	call	0x7052	; 0x7052 <memcpy>
    33d6:	f8 01       	movw	r30, r16
    33d8:	80 81       	ld	r24, Z
    33da:	91 81       	ldd	r25, Z+1	; 0x01
    33dc:	c8 0f       	add	r28, r24
    33de:	d9 1f       	adc	r29, r25
    33e0:	d1 83       	std	Z+1, r29	; 0x01
    33e2:	c0 83       	st	Z, r28
    33e4:	df 91       	pop	r29
    33e6:	cf 91       	pop	r28
    33e8:	1f 91       	pop	r17
    33ea:	0f 91       	pop	r16
    33ec:	ff 90       	pop	r15
    33ee:	ef 90       	pop	r14
    33f0:	08 95       	ret

000033f2 <writeMQTTString>:


void writeMQTTString(uint8_t** pptr, MQTTString mqttstring)
{
    33f2:	af 92       	push	r10
    33f4:	bf 92       	push	r11
    33f6:	cf 92       	push	r12
    33f8:	df 92       	push	r13
    33fa:	ef 92       	push	r14
    33fc:	ff 92       	push	r15
    33fe:	0f 93       	push	r16
    3400:	1f 93       	push	r17
    3402:	cf 93       	push	r28
    3404:	df 93       	push	r29
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	28 97       	sbiw	r28, 0x08	; 8
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	de bf       	out	0x3e, r29	; 62
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	cd bf       	out	0x3d, r28	; 61
    3416:	5c 01       	movw	r10, r24
    3418:	09 83       	std	Y+1, r16	; 0x01
    341a:	1a 83       	std	Y+2, r17	; 0x02
    341c:	2b 83       	std	Y+3, r18	; 0x03
    341e:	3c 83       	std	Y+4, r19	; 0x04
    3420:	4d 83       	std	Y+5, r20	; 0x05
    3422:	5e 83       	std	Y+6, r21	; 0x06
    3424:	6f 83       	std	Y+7, r22	; 0x07
    3426:	78 87       	std	Y+8, r23	; 0x08
  if (mqttstring.lenstring.len > 0)
    3428:	cb 80       	ldd	r12, Y+3	; 0x03
    342a:	dc 80       	ldd	r13, Y+4	; 0x04
    342c:	ed 80       	ldd	r14, Y+5	; 0x05
    342e:	fe 80       	ldd	r15, Y+6	; 0x06
    3430:	1c 14       	cp	r1, r12
    3432:	1d 04       	cpc	r1, r13
    3434:	1e 04       	cpc	r1, r14
    3436:	1f 04       	cpc	r1, r15
    3438:	9c f4       	brge	.+38     	; 0x3460 <writeMQTTString+0x6e>
  {
    writeInt(pptr, mqttstring.lenstring.len);
    343a:	b7 01       	movw	r22, r14
    343c:	a6 01       	movw	r20, r12
    343e:	83 df       	rcall	.-250    	; 0x3346 <writeInt>
    memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
    3440:	6f 81       	ldd	r22, Y+7	; 0x07
    3442:	78 85       	ldd	r23, Y+8	; 0x08
    3444:	a6 01       	movw	r20, r12
    3446:	f5 01       	movw	r30, r10
    3448:	80 81       	ld	r24, Z
    344a:	91 81       	ldd	r25, Z+1	; 0x01
    344c:	0e 94 29 38 	call	0x7052	; 0x7052 <memcpy>
    *pptr += mqttstring.lenstring.len;
    3450:	f5 01       	movw	r30, r10
    3452:	80 81       	ld	r24, Z
    3454:	91 81       	ldd	r25, Z+1	; 0x01
    3456:	c8 0e       	add	r12, r24
    3458:	d9 1e       	adc	r13, r25
    345a:	d1 82       	std	Z+1, r13	; 0x01
    345c:	c0 82       	st	Z, r12
    345e:	0b c0       	rjmp	.+22     	; 0x3476 <writeMQTTString+0x84>
  }
  else if (mqttstring.cstring)
    3460:	69 81       	ldd	r22, Y+1	; 0x01
    3462:	7a 81       	ldd	r23, Y+2	; 0x02
    3464:	61 15       	cp	r22, r1
    3466:	71 05       	cpc	r23, r1
    writeCString(pptr, mqttstring.cstring);
    3468:	11 f0       	breq	.+4      	; 0x346e <writeMQTTString+0x7c>
    346a:	9b df       	rcall	.-202    	; 0x33a2 <writeCString>
    346c:	04 c0       	rjmp	.+8      	; 0x3476 <writeMQTTString+0x84>
  else
    writeInt(pptr, 0);
    346e:	40 e0       	ldi	r20, 0x00	; 0
    3470:	50 e0       	ldi	r21, 0x00	; 0
    3472:	ba 01       	movw	r22, r20
    3474:	68 df       	rcall	.-304    	; 0x3346 <writeInt>
}
    3476:	28 96       	adiw	r28, 0x08	; 8
    3478:	0f b6       	in	r0, 0x3f	; 63
    347a:	f8 94       	cli
    347c:	de bf       	out	0x3e, r29	; 62
    347e:	0f be       	out	0x3f, r0	; 63
    3480:	cd bf       	out	0x3d, r28	; 61
    3482:	df 91       	pop	r29
    3484:	cf 91       	pop	r28
    3486:	1f 91       	pop	r17
    3488:	0f 91       	pop	r16
    348a:	ff 90       	pop	r15
    348c:	ef 90       	pop	r14
    348e:	df 90       	pop	r13
    3490:	cf 90       	pop	r12
    3492:	bf 90       	pop	r11
    3494:	af 90       	pop	r10
    3496:	08 95       	ret

00003498 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int32_t readMQTTLenString(MQTTString* mqttstring, uint8_t** pptr, uint8_t* enddata)
{
    3498:	ef 92       	push	r14
    349a:	ff 92       	push	r15
    349c:	0f 93       	push	r16
    349e:	1f 93       	push	r17
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	8c 01       	movw	r16, r24
    34a6:	eb 01       	movw	r28, r22
    34a8:	7a 01       	movw	r14, r20
  int32_t rc = 0;

  FUNC_ENTRY;

  /* the first two bytes are the length of the string */
  if (enddata - (*pptr) > 1) /* enough length to read the integer? */
    34aa:	88 81       	ld	r24, Y
    34ac:	99 81       	ldd	r25, Y+1	; 0x01
    34ae:	9a 01       	movw	r18, r20
    34b0:	28 1b       	sub	r18, r24
    34b2:	39 0b       	sbc	r19, r25
    34b4:	22 30       	cpi	r18, 0x02	; 2
    34b6:	31 05       	cpc	r19, r1
    34b8:	e4 f0       	brlt	.+56     	; 0x34f2 <readMQTTLenString+0x5a>
  {
    mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
    34ba:	cb 01       	movw	r24, r22
    34bc:	1f df       	rcall	.-450    	; 0x32fc <readInt>
    34be:	f8 01       	movw	r30, r16
    34c0:	62 83       	std	Z+2, r22	; 0x02
    34c2:	73 83       	std	Z+3, r23	; 0x03
    34c4:	84 83       	std	Z+4, r24	; 0x04
    34c6:	95 83       	std	Z+5, r25	; 0x05
	
    if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    34c8:	28 81       	ld	r18, Y
    34ca:	39 81       	ldd	r19, Y+1	; 0x01
    34cc:	a9 01       	movw	r20, r18
    34ce:	46 0f       	add	r20, r22
    34d0:	57 1f       	adc	r21, r23
    34d2:	e4 16       	cp	r14, r20
    34d4:	f5 06       	cpc	r15, r21
    34d6:	88 f0       	brcs	.+34     	; 0x34fa <readMQTTLenString+0x62>
    {
      mqttstring->lenstring.data = (char*)*pptr;
    34d8:	37 83       	std	Z+7, r19	; 0x07
    34da:	26 83       	std	Z+6, r18	; 0x06
      *pptr += mqttstring->lenstring.len;
    34dc:	28 81       	ld	r18, Y
    34de:	39 81       	ldd	r19, Y+1	; 0x01
    34e0:	62 0f       	add	r22, r18
    34e2:	73 1f       	adc	r23, r19
    34e4:	79 83       	std	Y+1, r23	; 0x01
    34e6:	68 83       	st	Y, r22
      rc = 1;
    34e8:	61 e0       	ldi	r22, 0x01	; 1
    34ea:	70 e0       	ldi	r23, 0x00	; 0
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	07 c0       	rjmp	.+14     	; 0x3500 <readMQTTLenString+0x68>
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int32_t readMQTTLenString(MQTTString* mqttstring, uint8_t** pptr, uint8_t* enddata)
{
  int32_t rc = 0;
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	70 e0       	ldi	r23, 0x00	; 0
    34f6:	cb 01       	movw	r24, r22
    34f8:	03 c0       	rjmp	.+6      	; 0x3500 <readMQTTLenString+0x68>
    34fa:	60 e0       	ldi	r22, 0x00	; 0
    34fc:	70 e0       	ldi	r23, 0x00	; 0
    34fe:	cb 01       	movw	r24, r22
      *pptr += mqttstring->lenstring.len;
      rc = 1;
    }
  }

  mqttstring->cstring = NULL;
    3500:	f8 01       	movw	r30, r16
    3502:	11 82       	std	Z+1, r1	; 0x01
    3504:	10 82       	st	Z, r1
  FUNC_EXIT_RC(rc);
  return rc;
}
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	1f 91       	pop	r17
    350c:	0f 91       	pop	r16
    350e:	ff 90       	pop	r15
    3510:	ef 90       	pop	r14
    3512:	08 95       	ret

00003514 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int32_t MQTTstrlen(MQTTString mqttstring)
{
    3514:	cf 93       	push	r28
    3516:	df 93       	push	r29
    3518:	cd b7       	in	r28, 0x3d	; 61
    351a:	de b7       	in	r29, 0x3e	; 62
    351c:	28 97       	sbiw	r28, 0x08	; 8
    351e:	0f b6       	in	r0, 0x3f	; 63
    3520:	f8 94       	cli
    3522:	de bf       	out	0x3e, r29	; 62
    3524:	0f be       	out	0x3f, r0	; 63
    3526:	cd bf       	out	0x3d, r28	; 61
    3528:	29 83       	std	Y+1, r18	; 0x01
    352a:	3a 83       	std	Y+2, r19	; 0x02
    352c:	4b 83       	std	Y+3, r20	; 0x03
    352e:	5c 83       	std	Y+4, r21	; 0x04
    3530:	6d 83       	std	Y+5, r22	; 0x05
    3532:	7e 83       	std	Y+6, r23	; 0x06
    3534:	8f 83       	std	Y+7, r24	; 0x07
    3536:	98 87       	std	Y+8, r25	; 0x08
  int rc = 0;

  if (mqttstring.cstring)
    3538:	e9 81       	ldd	r30, Y+1	; 0x01
    353a:	fa 81       	ldd	r31, Y+2	; 0x02
    353c:	30 97       	sbiw	r30, 0x00	; 0
    353e:	49 f0       	breq	.+18     	; 0x3552 <MQTTstrlen+0x3e>
    rc = strlen(mqttstring.cstring);
    3540:	df 01       	movw	r26, r30
    3542:	0d 90       	ld	r0, X+
    3544:	00 20       	and	r0, r0
    3546:	e9 f7       	brne	.-6      	; 0x3542 <MQTTstrlen+0x2e>
    3548:	11 97       	sbiw	r26, 0x01	; 1
    354a:	bd 01       	movw	r22, r26
    354c:	6e 1b       	sub	r22, r30
    354e:	7f 0b       	sbc	r23, r31
    3550:	02 c0       	rjmp	.+4      	; 0x3556 <MQTTstrlen+0x42>
  else
    rc = mqttstring.lenstring.len;
    3552:	6b 81       	ldd	r22, Y+3	; 0x03
    3554:	7c 81       	ldd	r23, Y+4	; 0x04
	
  return rc;
    3556:	07 2e       	mov	r0, r23
    3558:	00 0c       	add	r0, r0
    355a:	88 0b       	sbc	r24, r24
    355c:	99 0b       	sbc	r25, r25
}
    355e:	28 96       	adiw	r28, 0x08	; 8
    3560:	0f b6       	in	r0, 0x3f	; 63
    3562:	f8 94       	cli
    3564:	de bf       	out	0x3e, r29	; 62
    3566:	0f be       	out	0x3f, r0	; 63
    3568:	cd bf       	out	0x3d, r28	; 61
    356a:	df 91       	pop	r29
    356c:	cf 91       	pop	r28
    356e:	08 95       	ret

00003570 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int32_t MQTTPacket_equals(MQTTString* a, char* bptr)
{
    3570:	0f 93       	push	r16
    3572:	1f 93       	push	r17
    3574:	cf 93       	push	r28
    3576:	df 93       	push	r29
    3578:	eb 01       	movw	r28, r22
  int32_t alen = 0, blen = 0;
  char *aptr;
	
  if (a->cstring)
    357a:	fc 01       	movw	r30, r24
    357c:	a0 81       	ld	r26, Z
    357e:	b1 81       	ldd	r27, Z+1	; 0x01
    3580:	10 97       	sbiw	r26, 0x00	; 0
    3582:	59 f0       	breq	.+22     	; 0x359a <MQTTPacket_equals+0x2a>
  {
    aptr = a->cstring;
    alen = strlen(a->cstring);
    3584:	fd 01       	movw	r30, r26
    3586:	01 90       	ld	r0, Z+
    3588:	00 20       	and	r0, r0
    358a:	e9 f7       	brne	.-6      	; 0x3586 <MQTTPacket_equals+0x16>
    358c:	31 97       	sbiw	r30, 0x01	; 1
    358e:	af 01       	movw	r20, r30
    3590:	4a 1b       	sub	r20, r26
    3592:	5b 0b       	sbc	r21, r27
    3594:	60 e0       	ldi	r22, 0x00	; 0
    3596:	70 e0       	ldi	r23, 0x00	; 0
    3598:	07 c0       	rjmp	.+14     	; 0x35a8 <MQTTPacket_equals+0x38>
  }
  else
  {
    aptr = a->lenstring.data;
    359a:	fc 01       	movw	r30, r24
    359c:	a6 81       	ldd	r26, Z+6	; 0x06
    359e:	b7 81       	ldd	r27, Z+7	; 0x07
    alen = a->lenstring.len;
    35a0:	42 81       	ldd	r20, Z+2	; 0x02
    35a2:	53 81       	ldd	r21, Z+3	; 0x03
    35a4:	64 81       	ldd	r22, Z+4	; 0x04
    35a6:	75 81       	ldd	r23, Z+5	; 0x05
  }

  blen = strlen(bptr);
    35a8:	fe 01       	movw	r30, r28
    35aa:	01 90       	ld	r0, Z+
    35ac:	00 20       	and	r0, r0
    35ae:	e9 f7       	brne	.-6      	; 0x35aa <MQTTPacket_equals+0x3a>
    35b0:	31 97       	sbiw	r30, 0x01	; 1
    35b2:	8f 01       	movw	r16, r30
    35b4:	0c 1b       	sub	r16, r28
    35b6:	1d 0b       	sbc	r17, r29
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
	
  return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    35bc:	40 17       	cp	r20, r16
    35be:	51 07       	cpc	r21, r17
    35c0:	62 07       	cpc	r22, r18
    35c2:	73 07       	cpc	r23, r19
    35c4:	49 f4       	brne	.+18     	; 0x35d8 <MQTTPacket_equals+0x68>
    35c6:	be 01       	movw	r22, r28
    35c8:	cd 01       	movw	r24, r26
    35ca:	0e 94 46 38 	call	0x708c	; 0x708c <strncmp>
    35ce:	89 2b       	or	r24, r25
    35d0:	31 f0       	breq	.+12     	; 0x35de <MQTTPacket_equals+0x6e>
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	70 e0       	ldi	r23, 0x00	; 0
    35d6:	05 c0       	rjmp	.+10     	; 0x35e2 <MQTTPacket_equals+0x72>
    35d8:	60 e0       	ldi	r22, 0x00	; 0
    35da:	70 e0       	ldi	r23, 0x00	; 0
    35dc:	02 c0       	rjmp	.+4      	; 0x35e2 <MQTTPacket_equals+0x72>
    35de:	61 e0       	ldi	r22, 0x01	; 1
    35e0:	70 e0       	ldi	r23, 0x00	; 0
    35e2:	07 2e       	mov	r0, r23
    35e4:	00 0c       	add	r0, r0
    35e6:	88 0b       	sbc	r24, r24
    35e8:	99 0b       	sbc	r25, r25
}
    35ea:	df 91       	pop	r29
    35ec:	cf 91       	pop	r28
    35ee:	1f 91       	pop	r17
    35f0:	0f 91       	pop	r16
    35f2:	08 95       	ret

000035f4 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_publishLength(uint8_t qos, MQTTString topicName, int32_t payloadlen)
{
    35f4:	bf 92       	push	r11
    35f6:	cf 92       	push	r12
    35f8:	df 92       	push	r13
    35fa:	ef 92       	push	r14
    35fc:	ff 92       	push	r15
    35fe:	0f 93       	push	r16
    3600:	1f 93       	push	r17
    3602:	cf 93       	push	r28
    3604:	df 93       	push	r29
    3606:	cd b7       	in	r28, 0x3d	; 61
    3608:	de b7       	in	r29, 0x3e	; 62
    360a:	28 97       	sbiw	r28, 0x08	; 8
    360c:	0f b6       	in	r0, 0x3f	; 63
    360e:	f8 94       	cli
    3610:	de bf       	out	0x3e, r29	; 62
    3612:	0f be       	out	0x3f, r0	; 63
    3614:	cd bf       	out	0x3d, r28	; 61
    3616:	b8 2e       	mov	r11, r24
    3618:	b2 2f       	mov	r27, r18
    361a:	a3 2f       	mov	r26, r19
    361c:	f4 2f       	mov	r31, r20
    361e:	e5 2f       	mov	r30, r21
    3620:	86 2f       	mov	r24, r22
    3622:	97 2f       	mov	r25, r23
  int32_t len = 2 + MQTTstrlen(topicName) + payloadlen;
    3624:	20 2f       	mov	r18, r16
    3626:	31 2f       	mov	r19, r17
    3628:	4b 2f       	mov	r20, r27
    362a:	5a 2f       	mov	r21, r26
    362c:	6f 2f       	mov	r22, r31
    362e:	7e 2f       	mov	r23, r30
    3630:	71 df       	rcall	.-286    	; 0x3514 <MQTTstrlen>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	02 96       	adiw	r24, 0x02	; 2
    3638:	a1 1d       	adc	r26, r1
    363a:	b1 1d       	adc	r27, r1
    363c:	bc 01       	movw	r22, r24
    363e:	cd 01       	movw	r24, r26
    3640:	6c 0d       	add	r22, r12
    3642:	7d 1d       	adc	r23, r13
    3644:	8e 1d       	adc	r24, r14
    3646:	9f 1d       	adc	r25, r15
  
  if (qos > 0)
    3648:	bb 20       	and	r11, r11
    364a:	21 f0       	breq	.+8      	; 0x3654 <MQTTSerialize_publishLength+0x60>
    len += 2; /* packetid */
    364c:	6e 5f       	subi	r22, 0xFE	; 254
    364e:	7f 4f       	sbci	r23, 0xFF	; 255
    3650:	8f 4f       	sbci	r24, 0xFF	; 255
    3652:	9f 4f       	sbci	r25, 0xFF	; 255
	
  return len;
}
    3654:	28 96       	adiw	r28, 0x08	; 8
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	df 91       	pop	r29
    3662:	cf 91       	pop	r28
    3664:	1f 91       	pop	r17
    3666:	0f 91       	pop	r16
    3668:	ff 90       	pop	r15
    366a:	ef 90       	pop	r14
    366c:	df 90       	pop	r13
    366e:	cf 90       	pop	r12
    3670:	bf 90       	pop	r11
    3672:	08 95       	ret

00003674 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int32_t MQTTSerialize_publish(uint8_t* buf, int32_t buflen, uint8_t dup, uint8_t qos, uint8_t retained, uint16_t packetid,
		MQTTString topicName, uint8_t* payload, int32_t payloadlen)
{
    3674:	3f 92       	push	r3
    3676:	4f 92       	push	r4
    3678:	5f 92       	push	r5
    367a:	6f 92       	push	r6
    367c:	7f 92       	push	r7
    367e:	8f 92       	push	r8
    3680:	9f 92       	push	r9
    3682:	af 92       	push	r10
    3684:	bf 92       	push	r11
    3686:	cf 92       	push	r12
    3688:	df 92       	push	r13
    368a:	ef 92       	push	r14
    368c:	ff 92       	push	r15
    368e:	0f 93       	push	r16
    3690:	1f 93       	push	r17
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29
    3696:	00 d0       	rcall	.+0      	; 0x3698 <MQTTSerialize_publish+0x24>
    3698:	1f 92       	push	r1
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
    369e:	4c 01       	movw	r8, r24
    36a0:	2a 01       	movw	r4, r20
    36a2:	3b 01       	movw	r6, r22
    36a4:	32 2e       	mov	r3, r18
    36a6:	b0 2e       	mov	r11, r16
    36a8:	ae 2c       	mov	r10, r14
    36aa:	dc 82       	std	Y+4, r13	; 0x04
    36ac:	cb 82       	std	Y+3, r12	; 0x03
  uint8_t *ptr = buf;
    36ae:	9a 83       	std	Y+2, r25	; 0x02
    36b0:	89 83       	std	Y+1, r24	; 0x01
  int32_t rem_len = 0;
  int32_t rc = 0;

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    36b2:	cb a0       	ldd	r12, Y+35	; 0x23
    36b4:	dc a0       	ldd	r13, Y+36	; 0x24
    36b6:	ed a0       	ldd	r14, Y+37	; 0x25
    36b8:	fe a0       	ldd	r15, Y+38	; 0x26
    36ba:	09 8d       	ldd	r16, Y+25	; 0x19
    36bc:	1a 8d       	ldd	r17, Y+26	; 0x1a
    36be:	2b 8d       	ldd	r18, Y+27	; 0x1b
    36c0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    36c2:	4d 8d       	ldd	r20, Y+29	; 0x1d
    36c4:	5e 8d       	ldd	r21, Y+30	; 0x1e
    36c6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    36c8:	78 a1       	ldd	r23, Y+32	; 0x20
    36ca:	8b 2d       	mov	r24, r11
    36cc:	93 df       	rcall	.-218    	; 0x35f4 <MQTTSerialize_publishLength>
    36ce:	6b 01       	movw	r12, r22
    36d0:	7c 01       	movw	r14, r24
    36d2:	de dd       	rcall	.-1092   	; 0x3290 <MQTTPacket_len>
    36d4:	46 16       	cp	r4, r22
    36d6:	57 06       	cpc	r5, r23
    36d8:	68 06       	cpc	r6, r24
    36da:	79 06       	cpc	r7, r25
    36dc:	0c f4       	brge	.+2      	; 0x36e0 <MQTTSerialize_publish+0x6c>
    36de:	42 c0       	rjmp	.+132    	; 0x3764 <MQTTSerialize_publish+0xf0>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.bits.type = PUBLISH;
    36e0:	60 e3       	ldi	r22, 0x30	; 48
  header.bits.dup = dup;
    36e2:	30 fa       	bst	r3, 0
    36e4:	63 f9       	bld	r22, 3
  header.bits.qos = qos;
    36e6:	8b 2d       	mov	r24, r11
    36e8:	83 70       	andi	r24, 0x03	; 3
    36ea:	88 0f       	add	r24, r24
    36ec:	69 7f       	andi	r22, 0xF9	; 249
    36ee:	68 2b       	or	r22, r24
  header.bits.retain = retained;
    36f0:	a0 fa       	bst	r10, 0
    36f2:	60 f9       	bld	r22, 0
  writeChar(&ptr, header.byte); /* write header */
    36f4:	ce 01       	movw	r24, r28
    36f6:	01 96       	adiw	r24, 0x01	; 1
    36f8:	1c de       	rcall	.-968    	; 0x3332 <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    36fa:	b7 01       	movw	r22, r14
    36fc:	a6 01       	movw	r20, r12
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	9a 81       	ldd	r25, Y+2	; 0x02
    3702:	e8 dc       	rcall	.-1584   	; 0x30d4 <MQTTPacket_encode>
    3704:	29 81       	ldd	r18, Y+1	; 0x01
    3706:	3a 81       	ldd	r19, Y+2	; 0x02
    3708:	62 0f       	add	r22, r18
    370a:	73 1f       	adc	r23, r19
    370c:	7a 83       	std	Y+2, r23	; 0x02
    370e:	69 83       	std	Y+1, r22	; 0x01

  writeMQTTString(&ptr, topicName);
    3710:	09 8d       	ldd	r16, Y+25	; 0x19
    3712:	1a 8d       	ldd	r17, Y+26	; 0x1a
    3714:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3716:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3718:	4d 8d       	ldd	r20, Y+29	; 0x1d
    371a:	5e 8d       	ldd	r21, Y+30	; 0x1e
    371c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    371e:	78 a1       	ldd	r23, Y+32	; 0x20
    3720:	ce 01       	movw	r24, r28
    3722:	01 96       	adiw	r24, 0x01	; 1
    3724:	66 de       	rcall	.-820    	; 0x33f2 <writeMQTTString>

  if (qos > 0)
    3726:	bb 20       	and	r11, r11
    3728:	41 f0       	breq	.+16     	; 0x373a <MQTTSerialize_publish+0xc6>
    writeInt(&ptr, packetid);
    372a:	8b 81       	ldd	r24, Y+3	; 0x03
    372c:	9c 81       	ldd	r25, Y+4	; 0x04
    372e:	ac 01       	movw	r20, r24
    3730:	60 e0       	ldi	r22, 0x00	; 0
    3732:	70 e0       	ldi	r23, 0x00	; 0
    3734:	ce 01       	movw	r24, r28
    3736:	01 96       	adiw	r24, 0x01	; 1
    3738:	06 de       	rcall	.-1012   	; 0x3346 <writeInt>

  memcpy(ptr, payload, payloadlen);
    373a:	4b a1       	ldd	r20, Y+35	; 0x23
    373c:	5c a1       	ldd	r21, Y+36	; 0x24
    373e:	69 a1       	ldd	r22, Y+33	; 0x21
    3740:	7a a1       	ldd	r23, Y+34	; 0x22
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	9a 81       	ldd	r25, Y+2	; 0x02
    3746:	0e 94 29 38 	call	0x7052	; 0x7052 <memcpy>
  ptr += payloadlen;
    374a:	69 81       	ldd	r22, Y+1	; 0x01
    374c:	7a 81       	ldd	r23, Y+2	; 0x02
    374e:	8b a1       	ldd	r24, Y+35	; 0x23
    3750:	9c a1       	ldd	r25, Y+36	; 0x24
    3752:	68 0f       	add	r22, r24
    3754:	79 1f       	adc	r23, r25

  rc = ptr - buf;
    3756:	68 19       	sub	r22, r8
    3758:	79 09       	sbc	r23, r9
    375a:	07 2e       	mov	r0, r23
    375c:	00 0c       	add	r0, r0
    375e:	88 0b       	sbc	r24, r24
    3760:	99 0b       	sbc	r25, r25
    3762:	04 c0       	rjmp	.+8      	; 0x376c <MQTTSerialize_publish+0xf8>

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    3764:	6e ef       	ldi	r22, 0xFE	; 254
    3766:	7f ef       	ldi	r23, 0xFF	; 255
    3768:	8f ef       	ldi	r24, 0xFF	; 255
    376a:	9f ef       	ldi	r25, 0xFF	; 255

  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	0f 90       	pop	r0
    3772:	0f 90       	pop	r0
    3774:	df 91       	pop	r29
    3776:	cf 91       	pop	r28
    3778:	1f 91       	pop	r17
    377a:	0f 91       	pop	r16
    377c:	ff 90       	pop	r15
    377e:	ef 90       	pop	r14
    3780:	df 90       	pop	r13
    3782:	cf 90       	pop	r12
    3784:	bf 90       	pop	r11
    3786:	af 90       	pop	r10
    3788:	9f 90       	pop	r9
    378a:	8f 90       	pop	r8
    378c:	7f 90       	pop	r7
    378e:	6f 90       	pop	r6
    3790:	5f 90       	pop	r5
    3792:	4f 90       	pop	r4
    3794:	3f 90       	pop	r3
    3796:	08 95       	ret

00003798 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_ack(uint8_t* buf, int32_t buflen, uint8_t packettype, uint8_t dup, uint16_t packetid)
{
    3798:	ef 92       	push	r14
    379a:	ff 92       	push	r15
    379c:	0f 93       	push	r16
    379e:	1f 93       	push	r17
    37a0:	cf 93       	push	r28
    37a2:	df 93       	push	r29
    37a4:	1f 92       	push	r1
    37a6:	1f 92       	push	r1
    37a8:	cd b7       	in	r28, 0x3d	; 61
    37aa:	de b7       	in	r29, 0x3e	; 62
    37ac:	fc 01       	movw	r30, r24
  MQTTHeader header = {0};
  int32_t rc = 0;
  uint8_t *ptr = buf;
    37ae:	fa 83       	std	Y+2, r31	; 0x02
    37b0:	e9 83       	std	Y+1, r30	; 0x01

  FUNC_ENTRY;

  if (buflen < 4)
    37b2:	44 30       	cpi	r20, 0x04	; 4
    37b4:	51 05       	cpc	r21, r1
    37b6:	61 05       	cpc	r22, r1
    37b8:	71 05       	cpc	r23, r1
    37ba:	7c f1       	brlt	.+94     	; 0x381a <MQTTSerialize_ack+0x82>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.bits.type = packettype;
    37bc:	82 2f       	mov	r24, r18
    37be:	82 95       	swap	r24
    37c0:	80 7f       	andi	r24, 0xF0	; 240
  header.bits.dup = dup;
    37c2:	00 fb       	bst	r16, 0
    37c4:	83 f9       	bld	r24, 3
  header.bits.qos = (packettype == PUBREL) ? 1 : 0;
    37c6:	91 e0       	ldi	r25, 0x01	; 1
    37c8:	26 30       	cpi	r18, 0x06	; 6
    37ca:	09 f0       	breq	.+2      	; 0x37ce <MQTTSerialize_ack+0x36>
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	8f 01       	movw	r16, r30
    37d0:	99 0f       	add	r25, r25
    37d2:	68 2f       	mov	r22, r24
    37d4:	69 7f       	andi	r22, 0xF9	; 249
    37d6:	86 2f       	mov	r24, r22
    37d8:	89 2b       	or	r24, r25
  writeChar(&ptr, header.byte); /* write header */
    37da:	68 2f       	mov	r22, r24
    37dc:	ce 01       	movw	r24, r28
    37de:	01 96       	adiw	r24, 0x01	; 1
    37e0:	a8 dd       	rcall	.-1200   	; 0x3332 <writeChar>

  ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
    37e2:	42 e0       	ldi	r20, 0x02	; 2
    37e4:	50 e0       	ldi	r21, 0x00	; 0
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	70 e0       	ldi	r23, 0x00	; 0
    37ea:	89 81       	ldd	r24, Y+1	; 0x01
    37ec:	9a 81       	ldd	r25, Y+2	; 0x02
    37ee:	72 dc       	rcall	.-1820   	; 0x30d4 <MQTTPacket_encode>
    37f0:	29 81       	ldd	r18, Y+1	; 0x01
    37f2:	3a 81       	ldd	r19, Y+2	; 0x02
    37f4:	62 0f       	add	r22, r18
    37f6:	73 1f       	adc	r23, r19
    37f8:	7a 83       	std	Y+2, r23	; 0x02
    37fa:	69 83       	std	Y+1, r22	; 0x01
  writeInt(&ptr, packetid);
    37fc:	a7 01       	movw	r20, r14
    37fe:	60 e0       	ldi	r22, 0x00	; 0
    3800:	70 e0       	ldi	r23, 0x00	; 0
    3802:	ce 01       	movw	r24, r28
    3804:	01 96       	adiw	r24, 0x01	; 1
    3806:	9f dd       	rcall	.-1218   	; 0x3346 <writeInt>
  rc = ptr - buf;
    3808:	69 81       	ldd	r22, Y+1	; 0x01
    380a:	7a 81       	ldd	r23, Y+2	; 0x02
    380c:	60 1b       	sub	r22, r16
    380e:	71 0b       	sbc	r23, r17
    3810:	07 2e       	mov	r0, r23
    3812:	00 0c       	add	r0, r0
    3814:	88 0b       	sbc	r24, r24
    3816:	99 0b       	sbc	r25, r25
    3818:	04 c0       	rjmp	.+8      	; 0x3822 <MQTTSerialize_ack+0x8a>

  FUNC_ENTRY;

  if (buflen < 4)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    381a:	6e ef       	ldi	r22, 0xFE	; 254
    381c:	7f ef       	ldi	r23, 0xFF	; 255
    381e:	8f ef       	ldi	r24, 0xFF	; 255
    3820:	9f ef       	ldi	r25, 0xFF	; 255
  writeInt(&ptr, packetid);
  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    3822:	0f 90       	pop	r0
    3824:	0f 90       	pop	r0
    3826:	df 91       	pop	r29
    3828:	cf 91       	pop	r28
    382a:	1f 91       	pop	r17
    382c:	0f 91       	pop	r16
    382e:	ff 90       	pop	r15
    3830:	ef 90       	pop	r14
    3832:	08 95       	ret

00003834 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
    3834:	4f 92       	push	r4
    3836:	5f 92       	push	r5
    3838:	6f 92       	push	r6
    383a:	7f 92       	push	r7
    383c:	8f 92       	push	r8
    383e:	9f 92       	push	r9
    3840:	af 92       	push	r10
    3842:	bf 92       	push	r11
    3844:	cf 92       	push	r12
    3846:	df 92       	push	r13
    3848:	ef 92       	push	r14
    384a:	ff 92       	push	r15
    384c:	cf 93       	push	r28
    384e:	df 93       	push	r29
    3850:	2b 01       	movw	r4, r22
    3852:	3c 01       	movw	r6, r24
    3854:	ea 01       	movw	r28, r20
  int32_t len = 2; /* packetid */

  for (int32_t i = 0; i < count; ++i)
    3856:	c1 2c       	mov	r12, r1
    3858:	d1 2c       	mov	r13, r1
    385a:	76 01       	movw	r14, r12
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
  int32_t len = 2; /* packetid */
    385c:	81 2c       	mov	r8, r1
    385e:	91 2c       	mov	r9, r1
    3860:	54 01       	movw	r10, r8
    3862:	68 94       	set
    3864:	81 f8       	bld	r8, 1

  for (int32_t i = 0; i < count; ++i)
    3866:	20 c0       	rjmp	.+64     	; 0x38a8 <MQTTSerialize_subscribeLength+0x74>
    len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
    3868:	f6 01       	movw	r30, r12
    386a:	ee 0f       	add	r30, r30
    386c:	ff 1f       	adc	r31, r31
    386e:	ee 0f       	add	r30, r30
    3870:	ff 1f       	adc	r31, r31
    3872:	ee 0f       	add	r30, r30
    3874:	ff 1f       	adc	r31, r31
    3876:	ec 0f       	add	r30, r28
    3878:	fd 1f       	adc	r31, r29
    387a:	20 81       	ld	r18, Z
    387c:	31 81       	ldd	r19, Z+1	; 0x01
    387e:	42 81       	ldd	r20, Z+2	; 0x02
    3880:	53 81       	ldd	r21, Z+3	; 0x03
    3882:	64 81       	ldd	r22, Z+4	; 0x04
    3884:	75 81       	ldd	r23, Z+5	; 0x05
    3886:	86 81       	ldd	r24, Z+6	; 0x06
    3888:	97 81       	ldd	r25, Z+7	; 0x07
    388a:	44 de       	rcall	.-888    	; 0x3514 <MQTTstrlen>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	03 96       	adiw	r24, 0x03	; 3
    3892:	a1 1d       	adc	r26, r1
    3894:	b1 1d       	adc	r27, r1
    3896:	88 0e       	add	r8, r24
    3898:	99 1e       	adc	r9, r25
    389a:	aa 1e       	adc	r10, r26
    389c:	bb 1e       	adc	r11, r27
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
  int32_t len = 2; /* packetid */

  for (int32_t i = 0; i < count; ++i)
    389e:	8f ef       	ldi	r24, 0xFF	; 255
    38a0:	c8 1a       	sub	r12, r24
    38a2:	d8 0a       	sbc	r13, r24
    38a4:	e8 0a       	sbc	r14, r24
    38a6:	f8 0a       	sbc	r15, r24
    38a8:	c4 14       	cp	r12, r4
    38aa:	d5 04       	cpc	r13, r5
    38ac:	e6 04       	cpc	r14, r6
    38ae:	f7 04       	cpc	r15, r7
    38b0:	dc f2       	brlt	.-74     	; 0x3868 <MQTTSerialize_subscribeLength+0x34>
    len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
	
  return len;
}
    38b2:	c5 01       	movw	r24, r10
    38b4:	b4 01       	movw	r22, r8
    38b6:	df 91       	pop	r29
    38b8:	cf 91       	pop	r28
    38ba:	ff 90       	pop	r15
    38bc:	ef 90       	pop	r14
    38be:	df 90       	pop	r13
    38c0:	cf 90       	pop	r12
    38c2:	bf 90       	pop	r11
    38c4:	af 90       	pop	r10
    38c6:	9f 90       	pop	r9
    38c8:	8f 90       	pop	r8
    38ca:	7f 90       	pop	r7
    38cc:	6f 90       	pop	r6
    38ce:	5f 90       	pop	r5
    38d0:	4f 90       	pop	r4
    38d2:	08 95       	ret

000038d4 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int32_t MQTTSerialize_subscribe(uint8_t* buf, int32_t buflen, uint8_t dup, uint16_t packetid, int32_t count,
		MQTTString topicFilters[], int32_t requestedQoSs[])
{
    38d4:	2f 92       	push	r2
    38d6:	3f 92       	push	r3
    38d8:	4f 92       	push	r4
    38da:	5f 92       	push	r5
    38dc:	6f 92       	push	r6
    38de:	7f 92       	push	r7
    38e0:	8f 92       	push	r8
    38e2:	9f 92       	push	r9
    38e4:	af 92       	push	r10
    38e6:	bf 92       	push	r11
    38e8:	cf 92       	push	r12
    38ea:	df 92       	push	r13
    38ec:	ef 92       	push	r14
    38ee:	ff 92       	push	r15
    38f0:	0f 93       	push	r16
    38f2:	1f 93       	push	r17
    38f4:	cf 93       	push	r28
    38f6:	df 93       	push	r29
    38f8:	cd b7       	in	r28, 0x3d	; 61
    38fa:	de b7       	in	r29, 0x3e	; 62
    38fc:	27 97       	sbiw	r28, 0x07	; 7
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	1c 01       	movw	r2, r24
    390a:	2a 01       	movw	r4, r20
    390c:	3b 01       	movw	r6, r22
    390e:	2f 83       	std	Y+7, r18	; 0x07
  uint8_t *ptr = buf;
    3910:	9a 83       	std	Y+2, r25	; 0x02
    3912:	89 83       	std	Y+1, r24	; 0x01
  int32_t rem_len = 0;
  int32_t rc = 0;

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
    3914:	a5 01       	movw	r20, r10
    3916:	c7 01       	movw	r24, r14
    3918:	b6 01       	movw	r22, r12
    391a:	8c df       	rcall	.-232    	; 0x3834 <MQTTSerialize_subscribeLength>
    391c:	6b 83       	std	Y+3, r22	; 0x03
    391e:	7c 83       	std	Y+4, r23	; 0x04
    3920:	8d 83       	std	Y+5, r24	; 0x05
    3922:	9e 83       	std	Y+6, r25	; 0x06
    3924:	b5 dc       	rcall	.-1686   	; 0x3290 <MQTTPacket_len>
    3926:	46 16       	cp	r4, r22
    3928:	57 06       	cpc	r5, r23
    392a:	68 06       	cpc	r6, r24
    392c:	79 06       	cpc	r7, r25
    392e:	0c f4       	brge	.+2      	; 0x3932 <MQTTSerialize_subscribe+0x5e>
    3930:	52 c0       	rjmp	.+164    	; 0x39d6 <MQTTSerialize_subscribe+0x102>
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.byte = 0;
  header.bits.type = SUBSCRIBE;
    3932:	60 e8       	ldi	r22, 0x80	; 128
  header.bits.dup = dup;
    3934:	8f 81       	ldd	r24, Y+7	; 0x07
    3936:	80 fb       	bst	r24, 0
    3938:	63 f9       	bld	r22, 3
  header.bits.qos = 1;
    393a:	69 7f       	andi	r22, 0xF9	; 249
    393c:	62 60       	ori	r22, 0x02	; 2
  writeChar(&ptr, header.byte); /* write header */
    393e:	ce 01       	movw	r24, r28
    3940:	01 96       	adiw	r24, 0x01	; 1
    3942:	f7 dc       	rcall	.-1554   	; 0x3332 <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    3944:	4b 81       	ldd	r20, Y+3	; 0x03
    3946:	5c 81       	ldd	r21, Y+4	; 0x04
    3948:	6d 81       	ldd	r22, Y+5	; 0x05
    394a:	7e 81       	ldd	r23, Y+6	; 0x06
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	9a 81       	ldd	r25, Y+2	; 0x02
    3950:	c1 db       	rcall	.-2174   	; 0x30d4 <MQTTPacket_encode>
    3952:	29 81       	ldd	r18, Y+1	; 0x01
    3954:	3a 81       	ldd	r19, Y+2	; 0x02
    3956:	62 0f       	add	r22, r18
    3958:	73 1f       	adc	r23, r19
    395a:	7a 83       	std	Y+2, r23	; 0x02
    395c:	69 83       	std	Y+1, r22	; 0x01

  writeInt(&ptr, packetid);
    395e:	a8 01       	movw	r20, r16
    3960:	60 e0       	ldi	r22, 0x00	; 0
    3962:	70 e0       	ldi	r23, 0x00	; 0
    3964:	ce 01       	movw	r24, r28
    3966:	01 96       	adiw	r24, 0x01	; 1
    3968:	ee dc       	rcall	.-1572   	; 0x3346 <writeInt>

  for (int32_t i = 0; i < count; ++i)
    396a:	41 2c       	mov	r4, r1
    396c:	51 2c       	mov	r5, r1
    396e:	32 01       	movw	r6, r4
    3970:	24 c0       	rjmp	.+72     	; 0x39ba <MQTTSerialize_subscribe+0xe6>
  {
    writeMQTTString(&ptr, topicFilters[i]);
    3972:	f2 01       	movw	r30, r4
    3974:	ee 0f       	add	r30, r30
    3976:	ff 1f       	adc	r31, r31
    3978:	ee 0f       	add	r30, r30
    397a:	ff 1f       	adc	r31, r31
    397c:	ee 0f       	add	r30, r30
    397e:	ff 1f       	adc	r31, r31
    3980:	ea 0d       	add	r30, r10
    3982:	fb 1d       	adc	r31, r11
    3984:	00 81       	ld	r16, Z
    3986:	11 81       	ldd	r17, Z+1	; 0x01
    3988:	22 81       	ldd	r18, Z+2	; 0x02
    398a:	33 81       	ldd	r19, Z+3	; 0x03
    398c:	44 81       	ldd	r20, Z+4	; 0x04
    398e:	55 81       	ldd	r21, Z+5	; 0x05
    3990:	66 81       	ldd	r22, Z+6	; 0x06
    3992:	77 81       	ldd	r23, Z+7	; 0x07
    3994:	ce 01       	movw	r24, r28
    3996:	01 96       	adiw	r24, 0x01	; 1
    3998:	2c dd       	rcall	.-1448   	; 0x33f2 <writeMQTTString>
    writeChar(&ptr, requestedQoSs[i]);
    399a:	f2 01       	movw	r30, r4
    399c:	ee 0f       	add	r30, r30
    399e:	ff 1f       	adc	r31, r31
    39a0:	ee 0f       	add	r30, r30
    39a2:	ff 1f       	adc	r31, r31
    39a4:	e8 0d       	add	r30, r8
    39a6:	f9 1d       	adc	r31, r9
    39a8:	60 81       	ld	r22, Z
    39aa:	ce 01       	movw	r24, r28
    39ac:	01 96       	adiw	r24, 0x01	; 1
    39ae:	c1 dc       	rcall	.-1662   	; 0x3332 <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;

  writeInt(&ptr, packetid);

  for (int32_t i = 0; i < count; ++i)
    39b0:	8f ef       	ldi	r24, 0xFF	; 255
    39b2:	48 1a       	sub	r4, r24
    39b4:	58 0a       	sbc	r5, r24
    39b6:	68 0a       	sbc	r6, r24
    39b8:	78 0a       	sbc	r7, r24
    39ba:	4c 14       	cp	r4, r12
    39bc:	5d 04       	cpc	r5, r13
    39be:	6e 04       	cpc	r6, r14
    39c0:	7f 04       	cpc	r7, r15
    39c2:	bc f2       	brlt	.-82     	; 0x3972 <MQTTSerialize_subscribe+0x9e>
  {
    writeMQTTString(&ptr, topicFilters[i]);
    writeChar(&ptr, requestedQoSs[i]);
  }

  rc = ptr - buf;
    39c4:	69 81       	ldd	r22, Y+1	; 0x01
    39c6:	7a 81       	ldd	r23, Y+2	; 0x02
    39c8:	62 19       	sub	r22, r2
    39ca:	73 09       	sbc	r23, r3
    39cc:	07 2e       	mov	r0, r23
    39ce:	00 0c       	add	r0, r0
    39d0:	88 0b       	sbc	r24, r24
    39d2:	99 0b       	sbc	r25, r25
    39d4:	04 c0       	rjmp	.+8      	; 0x39de <MQTTSerialize_subscribe+0x10a>

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    39d6:	6e ef       	ldi	r22, 0xFE	; 254
    39d8:	7f ef       	ldi	r23, 0xFF	; 255
    39da:	8f ef       	ldi	r24, 0xFF	; 255
    39dc:	9f ef       	ldi	r25, 0xFF	; 255

  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    39de:	27 96       	adiw	r28, 0x07	; 7
    39e0:	0f b6       	in	r0, 0x3f	; 63
    39e2:	f8 94       	cli
    39e4:	de bf       	out	0x3e, r29	; 62
    39e6:	0f be       	out	0x3f, r0	; 63
    39e8:	cd bf       	out	0x3d, r28	; 61
    39ea:	df 91       	pop	r29
    39ec:	cf 91       	pop	r28
    39ee:	1f 91       	pop	r17
    39f0:	0f 91       	pop	r16
    39f2:	ff 90       	pop	r15
    39f4:	ef 90       	pop	r14
    39f6:	df 90       	pop	r13
    39f8:	cf 90       	pop	r12
    39fa:	bf 90       	pop	r11
    39fc:	af 90       	pop	r10
    39fe:	9f 90       	pop	r9
    3a00:	8f 90       	pop	r8
    3a02:	7f 90       	pop	r7
    3a04:	6f 90       	pop	r6
    3a06:	5f 90       	pop	r5
    3a08:	4f 90       	pop	r4
    3a0a:	3f 90       	pop	r3
    3a0c:	2f 90       	pop	r2
    3a0e:	08 95       	ret

00003a10 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_suback(uint16_t* packetid, int32_t maxcount, int32_t* count, int32_t grantedQoSs[], uint8_t* buf, int32_t buflen)
{
    3a10:	4f 92       	push	r4
    3a12:	5f 92       	push	r5
    3a14:	6f 92       	push	r6
    3a16:	7f 92       	push	r7
    3a18:	8f 92       	push	r8
    3a1a:	9f 92       	push	r9
    3a1c:	af 92       	push	r10
    3a1e:	bf 92       	push	r11
    3a20:	cf 92       	push	r12
    3a22:	df 92       	push	r13
    3a24:	ef 92       	push	r14
    3a26:	ff 92       	push	r15
    3a28:	0f 93       	push	r16
    3a2a:	1f 93       	push	r17
    3a2c:	cf 93       	push	r28
    3a2e:	df 93       	push	r29
    3a30:	00 d0       	rcall	.+0      	; 0x3a32 <MQTTDeserialize_suback+0x22>
    3a32:	00 d0       	rcall	.+0      	; 0x3a34 <MQTTDeserialize_suback+0x24>
    3a34:	cd b7       	in	r28, 0x3d	; 61
    3a36:	de b7       	in	r29, 0x3e	; 62
    3a38:	4c 01       	movw	r8, r24
    3a3a:	2a 01       	movw	r4, r20
    3a3c:	3b 01       	movw	r6, r22
    3a3e:	69 01       	movw	r12, r18
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    3a40:	fa 82       	std	Y+2, r15	; 0x02
    3a42:	e9 82       	std	Y+1, r14	; 0x01
  int32_t rc = 0;
  int32_t mylen;

  FUNC_ENTRY;

  header.byte = readChar(&curdata);
    3a44:	ce 01       	movw	r24, r28
    3a46:	01 96       	adiw	r24, 0x01	; 1
    3a48:	6c dc       	rcall	.-1832   	; 0x3322 <readChar>
  if (header.bits.type != SUBACK)
    3a4a:	80 7f       	andi	r24, 0xF0	; 240
    3a4c:	80 39       	cpi	r24, 0x90	; 144
    3a4e:	09 f0       	breq	.+2      	; 0x3a52 <MQTTDeserialize_suback+0x42>
    3a50:	53 c0       	rjmp	.+166    	; 0x3af8 <MQTTDeserialize_suback+0xe8>
    goto exit;

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    3a52:	be 01       	movw	r22, r28
    3a54:	6d 5f       	subi	r22, 0xFD	; 253
    3a56:	7f 4f       	sbci	r23, 0xFF	; 255
    3a58:	89 81       	ldd	r24, Y+1	; 0x01
    3a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5c:	47 dc       	rcall	.-1906   	; 0x32ec <MQTTPacket_decodeBuf>
    3a5e:	29 81       	ldd	r18, Y+1	; 0x01
    3a60:	3a 81       	ldd	r19, Y+2	; 0x02
    3a62:	26 0f       	add	r18, r22
    3a64:	37 1f       	adc	r19, r23
    3a66:	3a 83       	std	Y+2, r19	; 0x02
    3a68:	29 83       	std	Y+1, r18	; 0x01
  enddata = curdata + mylen;
    3a6a:	ab 80       	ldd	r10, Y+3	; 0x03
    3a6c:	bc 80       	ldd	r11, Y+4	; 0x04
    3a6e:	a2 0e       	add	r10, r18
    3a70:	b3 1e       	adc	r11, r19

  if (enddata - curdata < 2)
    3a72:	a5 01       	movw	r20, r10
    3a74:	42 1b       	sub	r20, r18
    3a76:	53 0b       	sbc	r21, r19
    3a78:	42 30       	cpi	r20, 0x02	; 2
    3a7a:	51 05       	cpc	r21, r1
    3a7c:	0c f4       	brge	.+2      	; 0x3a80 <MQTTDeserialize_suback+0x70>
    3a7e:	43 c0       	rjmp	.+134    	; 0x3b06 <MQTTDeserialize_suback+0xf6>
    goto exit;

  *packetid = readInt(&curdata);
    3a80:	ce 01       	movw	r24, r28
    3a82:	01 96       	adiw	r24, 0x01	; 1
    3a84:	3b dc       	rcall	.-1930   	; 0x32fc <readInt>
    3a86:	f4 01       	movw	r30, r8
    3a88:	71 83       	std	Z+1, r23	; 0x01
    3a8a:	60 83       	st	Z, r22

  *count = 0;
    3a8c:	f6 01       	movw	r30, r12
    3a8e:	10 82       	st	Z, r1
    3a90:	11 82       	std	Z+1, r1	; 0x01
    3a92:	12 82       	std	Z+2, r1	; 0x02
    3a94:	13 82       	std	Z+3, r1	; 0x03

  while (curdata < enddata)
    3a96:	26 c0       	rjmp	.+76     	; 0x3ae4 <MQTTDeserialize_suback+0xd4>
  {
    if (*count > maxcount)
    3a98:	f6 01       	movw	r30, r12
    3a9a:	80 81       	ld	r24, Z
    3a9c:	91 81       	ldd	r25, Z+1	; 0x01
    3a9e:	a2 81       	ldd	r26, Z+2	; 0x02
    3aa0:	b3 81       	ldd	r27, Z+3	; 0x03
    3aa2:	48 16       	cp	r4, r24
    3aa4:	59 06       	cpc	r5, r25
    3aa6:	6a 06       	cpc	r6, r26
    3aa8:	7b 06       	cpc	r7, r27
    3aaa:	54 f1       	brlt	.+84     	; 0x3b00 <MQTTDeserialize_suback+0xf0>
    {
      rc = -1;
      goto exit;
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
    3aac:	ac 01       	movw	r20, r24
    3aae:	bd 01       	movw	r22, r26
    3ab0:	4f 5f       	subi	r20, 0xFF	; 255
    3ab2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ab4:	6f 4f       	sbci	r22, 0xFF	; 255
    3ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab8:	40 83       	st	Z, r20
    3aba:	51 83       	std	Z+1, r21	; 0x01
    3abc:	62 83       	std	Z+2, r22	; 0x02
    3abe:	73 83       	std	Z+3, r23	; 0x03
    3ac0:	88 0f       	add	r24, r24
    3ac2:	99 1f       	adc	r25, r25
    3ac4:	88 0f       	add	r24, r24
    3ac6:	99 1f       	adc	r25, r25
    3ac8:	78 01       	movw	r14, r16
    3aca:	e8 0e       	add	r14, r24
    3acc:	f9 1e       	adc	r15, r25
    3ace:	ce 01       	movw	r24, r28
    3ad0:	01 96       	adiw	r24, 0x01	; 1
    3ad2:	27 dc       	rcall	.-1970   	; 0x3322 <readChar>
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	a0 e0       	ldi	r26, 0x00	; 0
    3ad8:	b0 e0       	ldi	r27, 0x00	; 0
    3ada:	f7 01       	movw	r30, r14
    3adc:	80 83       	st	Z, r24
    3ade:	91 83       	std	Z+1, r25	; 0x01
    3ae0:	a2 83       	std	Z+2, r26	; 0x02
    3ae2:	b3 83       	std	Z+3, r27	; 0x03

  *packetid = readInt(&curdata);

  *count = 0;

  while (curdata < enddata)
    3ae4:	89 81       	ldd	r24, Y+1	; 0x01
    3ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae8:	8a 15       	cp	r24, r10
    3aea:	9b 05       	cpc	r25, r11
    3aec:	a8 f2       	brcs	.-86     	; 0x3a98 <MQTTDeserialize_suback+0x88>
      goto exit;
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
  }

  rc = 1;
    3aee:	61 e0       	ldi	r22, 0x01	; 1
    3af0:	70 e0       	ldi	r23, 0x00	; 0
    3af2:	80 e0       	ldi	r24, 0x00	; 0
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	07 c0       	rjmp	.+14     	; 0x3b06 <MQTTDeserialize_suback+0xf6>
int32_t MQTTDeserialize_suback(uint16_t* packetid, int32_t maxcount, int32_t* count, int32_t grantedQoSs[], uint8_t* buf, int32_t buflen)
{
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
  uint8_t* enddata = NULL;
  int32_t rc = 0;
    3af8:	60 e0       	ldi	r22, 0x00	; 0
    3afa:	70 e0       	ldi	r23, 0x00	; 0
    3afc:	cb 01       	movw	r24, r22
    3afe:	03 c0       	rjmp	.+6      	; 0x3b06 <MQTTDeserialize_suback+0xf6>

  while (curdata < enddata)
  {
    if (*count > maxcount)
    {
      rc = -1;
    3b00:	6f ef       	ldi	r22, 0xFF	; 255
    3b02:	7f ef       	ldi	r23, 0xFF	; 255
    3b04:	cb 01       	movw	r24, r22

  rc = 1;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    3b06:	26 96       	adiw	r28, 0x06	; 6
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	de bf       	out	0x3e, r29	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	cd bf       	out	0x3d, r28	; 61
    3b12:	df 91       	pop	r29
    3b14:	cf 91       	pop	r28
    3b16:	1f 91       	pop	r17
    3b18:	0f 91       	pop	r16
    3b1a:	ff 90       	pop	r15
    3b1c:	ef 90       	pop	r14
    3b1e:	df 90       	pop	r13
    3b20:	cf 90       	pop	r12
    3b22:	bf 90       	pop	r11
    3b24:	af 90       	pop	r10
    3b26:	9f 90       	pop	r9
    3b28:	8f 90       	pop	r8
    3b2a:	7f 90       	pop	r7
    3b2c:	6f 90       	pop	r6
    3b2e:	5f 90       	pop	r5
    3b30:	4f 90       	pop	r4
    3b32:	08 95       	ret

00003b34 <w5500_read>:
  n->mqttwrite = w5500_write;
  n->disconnect = w5500_disconnect;
}

int32_t w5500_read(Network* n, uint8_t* buffer, int32_t len, int32_t timeout_ms)
{
    3b34:	cf 92       	push	r12
    3b36:	df 92       	push	r13
    3b38:	ef 92       	push	r14
    3b3a:	ff 92       	push	r15
    3b3c:	0f 93       	push	r16
    3b3e:	1f 93       	push	r17
    3b40:	cf 93       	push	r28
    3b42:	df 93       	push	r29
    3b44:	ec 01       	movw	r28, r24
    3b46:	8b 01       	movw	r16, r22
    3b48:	69 01       	movw	r12, r18
    3b4a:	7a 01       	movw	r14, r20
  if ((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket) > 0))
    3b4c:	88 81       	ld	r24, Y
    3b4e:	99 81       	ldd	r25, Y+1	; 0x01
    3b50:	aa 81       	ldd	r26, Y+2	; 0x02
    3b52:	bb 81       	ldd	r27, Y+3	; 0x03
    3b54:	88 0f       	add	r24, r24
    3b56:	99 1f       	adc	r25, r25
    3b58:	aa 1f       	adc	r26, r26
    3b5a:	bb 1f       	adc	r27, r27
    3b5c:	88 0f       	add	r24, r24
    3b5e:	99 1f       	adc	r25, r25
    3b60:	aa 1f       	adc	r26, r26
    3b62:	bb 1f       	adc	r27, r27
    3b64:	01 96       	adiw	r24, 0x01	; 1
    3b66:	a1 1d       	adc	r26, r1
    3b68:	b1 1d       	adc	r27, r1
    3b6a:	88 0f       	add	r24, r24
    3b6c:	99 1f       	adc	r25, r25
    3b6e:	aa 1f       	adc	r26, r26
    3b70:	bb 1f       	adc	r27, r27
    3b72:	88 0f       	add	r24, r24
    3b74:	99 1f       	adc	r25, r25
    3b76:	aa 1f       	adc	r26, r26
    3b78:	bb 1f       	adc	r27, r27
    3b7a:	88 0f       	add	r24, r24
    3b7c:	99 1f       	adc	r25, r25
    3b7e:	aa 1f       	adc	r26, r26
    3b80:	bb 1f       	adc	r27, r27
    3b82:	bc 01       	movw	r22, r24
    3b84:	cd 01       	movw	r24, r26
    3b86:	7d 5f       	subi	r23, 0xFD	; 253
    3b88:	8f 4f       	sbci	r24, 0xFF	; 255
    3b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b8c:	0e 94 b3 06 	call	0xd66	; 0xd66 <WIZCHIP_READ>
    3b90:	87 31       	cpi	r24, 0x17	; 23
    3b92:	59 f4       	brne	.+22     	; 0x3baa <w5500_read+0x76>
    3b94:	88 81       	ld	r24, Y
    3b96:	0e 94 ed 08 	call	0x11da	; 0x11da <getSn_RX_RSR>
    3b9a:	89 2b       	or	r24, r25
    3b9c:	51 f0       	breq	.+20     	; 0x3bb2 <w5500_read+0x7e>
    return recv(n->my_socket, buffer, len);
    3b9e:	a6 01       	movw	r20, r12
    3ba0:	b8 01       	movw	r22, r16
    3ba2:	88 81       	ld	r24, Y
    3ba4:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <recv>
    3ba8:	07 c0       	rjmp	.+14     	; 0x3bb8 <w5500_read+0x84>
  
  return 0;
    3baa:	60 e0       	ldi	r22, 0x00	; 0
    3bac:	70 e0       	ldi	r23, 0x00	; 0
    3bae:	cb 01       	movw	r24, r22
    3bb0:	03 c0       	rjmp	.+6      	; 0x3bb8 <w5500_read+0x84>
    3bb2:	60 e0       	ldi	r22, 0x00	; 0
    3bb4:	70 e0       	ldi	r23, 0x00	; 0
    3bb6:	cb 01       	movw	r24, r22
}
    3bb8:	df 91       	pop	r29
    3bba:	cf 91       	pop	r28
    3bbc:	1f 91       	pop	r17
    3bbe:	0f 91       	pop	r16
    3bc0:	ff 90       	pop	r15
    3bc2:	ef 90       	pop	r14
    3bc4:	df 90       	pop	r13
    3bc6:	cf 90       	pop	r12
    3bc8:	08 95       	ret

00003bca <w5500_write>:

int32_t w5500_write(Network* n, uint8_t* buffer, int32_t len, int32_t timeout_ms)
{
    3bca:	cf 92       	push	r12
    3bcc:	df 92       	push	r13
    3bce:	ef 92       	push	r14
    3bd0:	ff 92       	push	r15
    3bd2:	0f 93       	push	r16
    3bd4:	1f 93       	push	r17
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
    3bda:	ec 01       	movw	r28, r24
    3bdc:	8b 01       	movw	r16, r22
    3bde:	69 01       	movw	r12, r18
    3be0:	7a 01       	movw	r14, r20
  if (getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
    3be2:	88 81       	ld	r24, Y
    3be4:	99 81       	ldd	r25, Y+1	; 0x01
    3be6:	aa 81       	ldd	r26, Y+2	; 0x02
    3be8:	bb 81       	ldd	r27, Y+3	; 0x03
    3bea:	88 0f       	add	r24, r24
    3bec:	99 1f       	adc	r25, r25
    3bee:	aa 1f       	adc	r26, r26
    3bf0:	bb 1f       	adc	r27, r27
    3bf2:	88 0f       	add	r24, r24
    3bf4:	99 1f       	adc	r25, r25
    3bf6:	aa 1f       	adc	r26, r26
    3bf8:	bb 1f       	adc	r27, r27
    3bfa:	01 96       	adiw	r24, 0x01	; 1
    3bfc:	a1 1d       	adc	r26, r1
    3bfe:	b1 1d       	adc	r27, r1
    3c00:	88 0f       	add	r24, r24
    3c02:	99 1f       	adc	r25, r25
    3c04:	aa 1f       	adc	r26, r26
    3c06:	bb 1f       	adc	r27, r27
    3c08:	88 0f       	add	r24, r24
    3c0a:	99 1f       	adc	r25, r25
    3c0c:	aa 1f       	adc	r26, r26
    3c0e:	bb 1f       	adc	r27, r27
    3c10:	88 0f       	add	r24, r24
    3c12:	99 1f       	adc	r25, r25
    3c14:	aa 1f       	adc	r26, r26
    3c16:	bb 1f       	adc	r27, r27
    3c18:	bc 01       	movw	r22, r24
    3c1a:	cd 01       	movw	r24, r26
    3c1c:	7d 5f       	subi	r23, 0xFD	; 253
    3c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c20:	9f 4f       	sbci	r25, 0xFF	; 255
    3c22:	0e 94 b3 06 	call	0xd66	; 0xd66 <WIZCHIP_READ>
    3c26:	87 31       	cpi	r24, 0x17	; 23
    3c28:	31 f4       	brne	.+12     	; 0x3c36 <w5500_write+0x6c>
    return send(n->my_socket, buffer, len);
    3c2a:	a6 01       	movw	r20, r12
    3c2c:	b8 01       	movw	r22, r16
    3c2e:	88 81       	ld	r24, Y
    3c30:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <send>
    3c34:	03 c0       	rjmp	.+6      	; 0x3c3c <w5500_write+0x72>
  
  return 0;
    3c36:	60 e0       	ldi	r22, 0x00	; 0
    3c38:	70 e0       	ldi	r23, 0x00	; 0
    3c3a:	cb 01       	movw	r24, r22
}
    3c3c:	df 91       	pop	r29
    3c3e:	cf 91       	pop	r28
    3c40:	1f 91       	pop	r17
    3c42:	0f 91       	pop	r16
    3c44:	ff 90       	pop	r15
    3c46:	ef 90       	pop	r14
    3c48:	df 90       	pop	r13
    3c4a:	cf 90       	pop	r12
    3c4c:	08 95       	ret

00003c4e <w5500_disconnect>:

void w5500_disconnect(Network* n)
{
  disconnect(n->my_socket);
    3c4e:	fc 01       	movw	r30, r24
    3c50:	80 81       	ld	r24, Z
    3c52:	0c 94 6d 04 	jmp	0x8da	; 0x8da <disconnect>
    3c56:	08 95       	ret

00003c58 <expired>:
  MilliTimer++;
}
*/

int8_t expired(Timer* timer)
{
    3c58:	cf 92       	push	r12
    3c5a:	df 92       	push	r13
    3c5c:	ef 92       	push	r14
    3c5e:	ff 92       	push	r15
	int32_t left = (timer->end_time) - millis();
    3c60:	fc 01       	movw	r30, r24
    3c62:	c4 80       	ldd	r12, Z+4	; 0x04
    3c64:	d5 80       	ldd	r13, Z+5	; 0x05
    3c66:	e6 80       	ldd	r14, Z+6	; 0x06
    3c68:	f7 80       	ldd	r15, Z+7	; 0x07
    3c6a:	46 d5       	rcall	.+2700   	; 0x46f8 <millis>
    3c6c:	09 2e       	mov	r0, r25
    3c6e:	00 0c       	add	r0, r0
    3c70:	aa 0b       	sbc	r26, r26
    3c72:	bb 0b       	sbc	r27, r27
    3c74:	a7 01       	movw	r20, r14
    3c76:	96 01       	movw	r18, r12
    3c78:	28 1b       	sub	r18, r24
    3c7a:	39 0b       	sbc	r19, r25
    3c7c:	4a 0b       	sbc	r20, r26
    3c7e:	5b 0b       	sbc	r21, r27
    3c80:	da 01       	movw	r26, r20
    3c82:	c9 01       	movw	r24, r18
	return (left < 0);
    3c84:	88 27       	eor	r24, r24
    3c86:	b7 fd       	sbrc	r27, 7
    3c88:	83 95       	inc	r24
    3c8a:	99 27       	eor	r25, r25
    3c8c:	aa 27       	eor	r26, r26
    3c8e:	bb 27       	eor	r27, r27
}
    3c90:	ff 90       	pop	r15
    3c92:	ef 90       	pop	r14
    3c94:	df 90       	pop	r13
    3c96:	cf 90       	pop	r12
    3c98:	08 95       	ret

00003c9a <countdown_ms>:

void countdown_ms(Timer* timer, uint32_t timeout)
{
    3c9a:	cf 92       	push	r12
    3c9c:	df 92       	push	r13
    3c9e:	ef 92       	push	r14
    3ca0:	ff 92       	push	r15
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	ec 01       	movw	r28, r24
    3ca8:	6a 01       	movw	r12, r20
    3caa:	7b 01       	movw	r14, r22
	timer->end_time = millis() + timeout;
    3cac:	25 d5       	rcall	.+2634   	; 0x46f8 <millis>
    3cae:	09 2e       	mov	r0, r25
    3cb0:	00 0c       	add	r0, r0
    3cb2:	aa 0b       	sbc	r26, r26
    3cb4:	bb 0b       	sbc	r27, r27
    3cb6:	c8 0e       	add	r12, r24
    3cb8:	d9 1e       	adc	r13, r25
    3cba:	ea 1e       	adc	r14, r26
    3cbc:	fb 1e       	adc	r15, r27
    3cbe:	cc 82       	std	Y+4, r12	; 0x04
    3cc0:	dd 82       	std	Y+5, r13	; 0x05
    3cc2:	ee 82       	std	Y+6, r14	; 0x06
    3cc4:	ff 82       	std	Y+7, r15	; 0x07
}
    3cc6:	df 91       	pop	r29
    3cc8:	cf 91       	pop	r28
    3cca:	ff 90       	pop	r15
    3ccc:	ef 90       	pop	r14
    3cce:	df 90       	pop	r13
    3cd0:	cf 90       	pop	r12
    3cd2:	08 95       	ret

00003cd4 <countdown>:

void countdown(Timer* timer, uint32_t timeout)
{
    3cd4:	cf 92       	push	r12
    3cd6:	df 92       	push	r13
    3cd8:	ef 92       	push	r14
    3cda:	ff 92       	push	r15
    3cdc:	0f 93       	push	r16
    3cde:	1f 93       	push	r17
    3ce0:	cf 93       	push	r28
    3ce2:	df 93       	push	r29
    3ce4:	ec 01       	movw	r28, r24
    3ce6:	6a 01       	movw	r12, r20
    3ce8:	7b 01       	movw	r14, r22
  timer->end_time = millis() + (timeout * 1000UL);
    3cea:	06 d5       	rcall	.+2572   	; 0x46f8 <millis>
    3cec:	8c 01       	movw	r16, r24
    3cee:	a8 ee       	ldi	r26, 0xE8	; 232
    3cf0:	b3 e0       	ldi	r27, 0x03	; 3
    3cf2:	a7 01       	movw	r20, r14
    3cf4:	96 01       	movw	r18, r12
    3cf6:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <__muluhisi3>
    3cfa:	01 2e       	mov	r0, r17
    3cfc:	00 0c       	add	r0, r0
    3cfe:	22 0b       	sbc	r18, r18
    3d00:	33 0b       	sbc	r19, r19
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	80 0f       	add	r24, r16
    3d08:	91 1f       	adc	r25, r17
    3d0a:	a2 1f       	adc	r26, r18
    3d0c:	b3 1f       	adc	r27, r19
    3d0e:	8c 83       	std	Y+4, r24	; 0x04
    3d10:	9d 83       	std	Y+5, r25	; 0x05
    3d12:	ae 83       	std	Y+6, r26	; 0x06
    3d14:	bf 83       	std	Y+7, r27	; 0x07
}
    3d16:	df 91       	pop	r29
    3d18:	cf 91       	pop	r28
    3d1a:	1f 91       	pop	r17
    3d1c:	0f 91       	pop	r16
    3d1e:	ff 90       	pop	r15
    3d20:	ef 90       	pop	r14
    3d22:	df 90       	pop	r13
    3d24:	cf 90       	pop	r12
    3d26:	08 95       	ret

00003d28 <left_ms>:

int32_t left_ms(Timer* timer)
{
    3d28:	cf 92       	push	r12
    3d2a:	df 92       	push	r13
    3d2c:	ef 92       	push	r14
    3d2e:	ff 92       	push	r15
  int32_t left = timer->end_time - millis();
    3d30:	fc 01       	movw	r30, r24
    3d32:	c4 80       	ldd	r12, Z+4	; 0x04
    3d34:	d5 80       	ldd	r13, Z+5	; 0x05
    3d36:	e6 80       	ldd	r14, Z+6	; 0x06
    3d38:	f7 80       	ldd	r15, Z+7	; 0x07
    3d3a:	de d4       	rcall	.+2492   	; 0x46f8 <millis>
    3d3c:	09 2e       	mov	r0, r25
    3d3e:	00 0c       	add	r0, r0
    3d40:	aa 0b       	sbc	r26, r26
    3d42:	bb 0b       	sbc	r27, r27
  return (left < 0) ? 0 : left;
    3d44:	a7 01       	movw	r20, r14
    3d46:	96 01       	movw	r18, r12
    3d48:	28 1b       	sub	r18, r24
    3d4a:	39 0b       	sbc	r19, r25
    3d4c:	4a 0b       	sbc	r20, r26
    3d4e:	5b 0b       	sbc	r21, r27
    3d50:	ca 01       	movw	r24, r20
    3d52:	b9 01       	movw	r22, r18
    3d54:	1a f4       	brpl	.+6      	; 0x3d5c <left_ms+0x34>
    3d56:	60 e0       	ldi	r22, 0x00	; 0
    3d58:	70 e0       	ldi	r23, 0x00	; 0
    3d5a:	cb 01       	movw	r24, r22
}
    3d5c:	ff 90       	pop	r15
    3d5e:	ef 90       	pop	r14
    3d60:	df 90       	pop	r13
    3d62:	cf 90       	pop	r12
    3d64:	08 95       	ret

00003d66 <InitTimer>:

void InitTimer(Timer* timer)
{
  timer->end_time = 0;
    3d66:	fc 01       	movw	r30, r24
    3d68:	14 82       	std	Z+4, r1	; 0x04
    3d6a:	15 82       	std	Z+5, r1	; 0x05
    3d6c:	16 82       	std	Z+6, r1	; 0x06
    3d6e:	17 82       	std	Z+7, r1	; 0x07
    3d70:	08 95       	ret

00003d72 <NewNetwork>:
}


void NewNetwork(Network* n)
{
    3d72:	fc 01       	movw	r30, r24
  //n->my_socket = 0; //initialized outside actually..
  n->mqttread = w5500_read;
    3d74:	8a e9       	ldi	r24, 0x9A	; 154
    3d76:	9d e1       	ldi	r25, 0x1D	; 29
    3d78:	95 83       	std	Z+5, r25	; 0x05
    3d7a:	84 83       	std	Z+4, r24	; 0x04
  n->mqttwrite = w5500_write;
    3d7c:	85 ee       	ldi	r24, 0xE5	; 229
    3d7e:	9d e1       	ldi	r25, 0x1D	; 29
    3d80:	97 83       	std	Z+7, r25	; 0x07
    3d82:	86 83       	std	Z+6, r24	; 0x06
  n->disconnect = w5500_disconnect;
    3d84:	87 e2       	ldi	r24, 0x27	; 39
    3d86:	9e e1       	ldi	r25, 0x1E	; 30
    3d88:	91 87       	std	Z+9, r25	; 0x09
    3d8a:	80 87       	std	Z+8, r24	; 0x08
    3d8c:	08 95       	ret

00003d8e <ConnectNetwork>:
{
  disconnect(n->my_socket);
}

int32_t ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
    3d8e:	ef 92       	push	r14
    3d90:	ff 92       	push	r15
    3d92:	0f 93       	push	r16
    3d94:	1f 93       	push	r17
    3d96:	cf 93       	push	r28
    3d98:	df 93       	push	r29
    3d9a:	ec 01       	movw	r28, r24
    3d9c:	8b 01       	movw	r16, r22
    3d9e:	7a 01       	movw	r14, r20
  socket(n->my_socket, Sn_MR_TCP, 12345, 0);
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	49 e3       	ldi	r20, 0x39	; 57
    3da4:	50 e3       	ldi	r21, 0x30	; 48
    3da6:	61 e0       	ldi	r22, 0x01	; 1
    3da8:	88 81       	ld	r24, Y
    3daa:	0e 94 9d 02 	call	0x53a	; 0x53a <socket>
  connect(n->my_socket, ip, port);
    3dae:	a7 01       	movw	r20, r14
    3db0:	b8 01       	movw	r22, r16
    3db2:	88 81       	ld	r24, Y
    3db4:	0e 94 9a 03 	call	0x734	; 0x734 <connect>

  return 0;
}
    3db8:	60 e0       	ldi	r22, 0x00	; 0
    3dba:	70 e0       	ldi	r23, 0x00	; 0
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	1f 91       	pop	r17
    3dc4:	0f 91       	pop	r16
    3dc6:	ff 90       	pop	r15
    3dc8:	ef 90       	pop	r14
    3dca:	08 95       	ret

00003dcc <JSON_DECODER_getRoot>:
        }
        current = current->h;
    } while (current != NULL);

    return JSON_DECODER_KEY_NOT_FOUND;
}
    3dcc:	2b e7       	ldi	r18, 0x7B	; 123
    3dce:	32 e2       	ldi	r19, 0x22	; 34
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	31 83       	std	Z+1, r19	; 0x01
    3dd4:	20 83       	st	Z, r18
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	08 95       	ret

00003dda <JSON_DECODER_getNumber>:

jsonDecoderStatus_t JSON_DECODER_getNumber(jsonNode_t *current, char *key, int *pVal)
{
    3dda:	ef 92       	push	r14
    3ddc:	ff 92       	push	r15
    3dde:	0f 93       	push	r16
    3de0:	1f 93       	push	r17
    3de2:	cf 93       	push	r28
    3de4:	df 93       	push	r29
    3de6:	ec 01       	movw	r28, r24
    3de8:	8b 01       	movw	r16, r22
    3dea:	7a 01       	movw	r14, r20
    do
    {
        if (strcmp(current->key, key) == 0)
    3dec:	b8 01       	movw	r22, r16
    3dee:	88 81       	ld	r24, Y
    3df0:	99 81       	ldd	r25, Y+1	; 0x01
    3df2:	0e 94 3d 38 	call	0x707a	; 0x707a <strcmp>
    3df6:	89 2b       	or	r24, r25
    3df8:	39 f4       	brne	.+14     	; 0x3e08 <JSON_DECODER_getNumber+0x2e>
        {
            *pVal = current->value.num;
    3dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfe:	f7 01       	movw	r30, r14
    3e00:	91 83       	std	Z+1, r25	; 0x01
    3e02:	80 83       	st	Z, r24
            return JSON_DECODER_OK;
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	06 c0       	rjmp	.+12     	; 0x3e14 <JSON_DECODER_getNumber+0x3a>
        }
        current = current->h;
    3e08:	0d 80       	ldd	r0, Y+5	; 0x05
    3e0a:	de 81       	ldd	r29, Y+6	; 0x06
    3e0c:	c0 2d       	mov	r28, r0
    } while (current != NULL);
    3e0e:	20 97       	sbiw	r28, 0x00	; 0
    3e10:	69 f7       	brne	.-38     	; 0x3dec <JSON_DECODER_getNumber+0x12>

    return JSON_DECODER_KEY_NOT_FOUND;
    3e12:	82 e0       	ldi	r24, 0x02	; 2
}
    3e14:	df 91       	pop	r29
    3e16:	cf 91       	pop	r28
    3e18:	1f 91       	pop	r17
    3e1a:	0f 91       	pop	r16
    3e1c:	ff 90       	pop	r15
    3e1e:	ef 90       	pop	r14
    3e20:	08 95       	ret

00003e22 <JSON_DECODER_fromString>:

jsonDecoderStatus_t JSON_DECODER_fromString(char *str)
{
    3e22:	cf 93       	push	r28
    3e24:	df 93       	push	r29
    3e26:	ec 01       	movw	r28, r24
    MEM_MODEL_init();
    3e28:	ef d0       	rcall	.+478    	; 0x4008 <MEM_MODEL_init>
    LEXER_init(str);
    3e2a:	ce 01       	movw	r24, r28

    if (PARSER_OK != PARSER_parseTokens())
    3e2c:	e8 d0       	rcall	.+464    	; 0x3ffe <LEXER_init>
    3e2e:	07 d1       	rcall	.+526    	; 0x403e <PARSER_parseTokens>
    3e30:	88 23       	and	r24, r24
    3e32:	11 f0       	breq	.+4      	; 0x3e38 <JSON_DECODER_fromString+0x16>
    {
        return JSON_DECODER_BAD_FORMAT;
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	01 c0       	rjmp	.+2      	; 0x3e3a <JSON_DECODER_fromString+0x18>
    }

    return JSON_DECODER_OK;
    3e38:	80 e0       	ldi	r24, 0x00	; 0
    3e3a:	df 91       	pop	r29
    3e3c:	cf 91       	pop	r28
    3e3e:	08 95       	ret

00003e40 <lex_string>:
    FOUND,
    NOT_FOUND,
} partialLexStatus_t;

static partialLexStatus_t lex_string(jsonToken_t *token)
{
    3e40:	cf 93       	push	r28
    3e42:	df 93       	push	r29
    3e44:	ec 01       	movw	r28, r24
    if (*current_possition == '"')
    3e46:	a0 91 8f 0d 	lds	r26, 0x0D8F	; 0x800d8f <current_possition>
    3e4a:	b0 91 90 0d 	lds	r27, 0x0D90	; 0x800d90 <current_possition+0x1>
    3e4e:	9c 91       	ld	r25, X
    3e50:	92 32       	cpi	r25, 0x22	; 34
    3e52:	59 f5       	brne	.+86     	; 0x3eaa <lex_string+0x6a>
    {
        current_possition = current_possition + 1;
    3e54:	11 96       	adiw	r26, 0x01	; 1
    3e56:	b0 93 90 0d 	sts	0x0D90, r27	; 0x800d90 <current_possition+0x1>
    3e5a:	a0 93 8f 0d 	sts	0x0D8F, r26	; 0x800d8f <current_possition>
    else
    {
        return NOT_FOUND;
    }

    for (uint8_t i = 0; i < strlen(current_possition); i++)
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	16 c0       	rjmp	.+44     	; 0x3e8e <lex_string+0x4e>
    {
        if (current_possition[i] == '"')
    3e62:	fd 01       	movw	r30, r26
    3e64:	e2 0f       	add	r30, r18
    3e66:	f3 1f       	adc	r31, r19
    3e68:	40 81       	ld	r20, Z
    3e6a:	42 32       	cpi	r20, 0x22	; 34
    3e6c:	79 f4       	brne	.+30     	; 0x3e8c <lex_string+0x4c>
        {
            token->type = STRING;
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	88 83       	st	Y, r24
            token->value.str = current_possition;
    3e72:	ba 83       	std	Y+2, r27	; 0x02
    3e74:	a9 83       	std	Y+1, r26	; 0x01

            current_possition[i] = 0;
    3e76:	10 82       	st	Z, r1
            current_possition = current_possition + i + 1;
    3e78:	2f 5f       	subi	r18, 0xFF	; 255
    3e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e7c:	a2 0f       	add	r26, r18
    3e7e:	b3 1f       	adc	r27, r19
    3e80:	b0 93 90 0d 	sts	0x0D90, r27	; 0x800d90 <current_possition+0x1>
    3e84:	a0 93 8f 0d 	sts	0x0D8F, r26	; 0x800d8f <current_possition>
            return LEXER_OK;
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	10 c0       	rjmp	.+32     	; 0x3eac <lex_string+0x6c>
    else
    {
        return NOT_FOUND;
    }

    for (uint8_t i = 0; i < strlen(current_possition); i++)
    3e8c:	9f 5f       	subi	r25, 0xFF	; 255
    3e8e:	29 2f       	mov	r18, r25
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	fd 01       	movw	r30, r26
    3e94:	01 90       	ld	r0, Z+
    3e96:	00 20       	and	r0, r0
    3e98:	e9 f7       	brne	.-6      	; 0x3e94 <lex_string+0x54>
    3e9a:	31 97       	sbiw	r30, 0x01	; 1
    3e9c:	ea 1b       	sub	r30, r26
    3e9e:	fb 0b       	sbc	r31, r27
    3ea0:	2e 17       	cp	r18, r30
    3ea2:	3f 07       	cpc	r19, r31
    3ea4:	f0 f2       	brcs	.-68     	; 0x3e62 <lex_string+0x22>
            current_possition = current_possition + i + 1;
            return LEXER_OK;
        }
    }

    return NOT_FOUND;
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	01 c0       	rjmp	.+2      	; 0x3eac <lex_string+0x6c>
    {
        current_possition = current_possition + 1;
    }
    else
    {
        return NOT_FOUND;
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
            return LEXER_OK;
        }
    }

    return NOT_FOUND;
}
    3eac:	df 91       	pop	r29
    3eae:	cf 91       	pop	r28
    3eb0:	08 95       	ret

00003eb2 <lex_number>:

static partialLexStatus_t lex_number(jsonToken_t *token)
{
    3eb2:	df 92       	push	r13
    3eb4:	ef 92       	push	r14
    3eb6:	ff 92       	push	r15
    3eb8:	0f 93       	push	r16
    3eba:	1f 93       	push	r17
    3ebc:	cf 93       	push	r28
    3ebe:	df 93       	push	r29
    3ec0:	8c 01       	movw	r16, r24
    char *numEnd = current_possition;
    3ec2:	e0 90 8f 0d 	lds	r14, 0x0D8F	; 0x800d8f <current_possition>
    3ec6:	f0 90 90 0d 	lds	r15, 0x0D90	; 0x800d90 <current_possition+0x1>
    3eca:	e7 01       	movw	r28, r14
    char temp;

    for (uint8_t i = 0; i < strlen(current_possition); i++)
    3ecc:	d1 2c       	mov	r13, r1
    3ece:	0d c0       	rjmp	.+26     	; 0x3eea <lex_number+0x38>
    {
        if (!strchr(NUMBER_CHARACTERS, current_possition[i]))
    3ed0:	f7 01       	movw	r30, r14
    3ed2:	e8 0f       	add	r30, r24
    3ed4:	f9 1f       	adc	r31, r25
    3ed6:	60 81       	ld	r22, Z
    3ed8:	70 e0       	ldi	r23, 0x00	; 0
    3eda:	8a ee       	ldi	r24, 0xEA	; 234
    3edc:	9a e0       	ldi	r25, 0x0A	; 10
    3ede:	0e 94 32 38 	call	0x7064	; 0x7064 <strchr>
    3ee2:	89 2b       	or	r24, r25
    3ee4:	71 f0       	breq	.+28     	; 0x3f02 <lex_number+0x50>
        {
            break;
        }
        numEnd = numEnd + 1;
    3ee6:	21 96       	adiw	r28, 0x01	; 1
static partialLexStatus_t lex_number(jsonToken_t *token)
{
    char *numEnd = current_possition;
    char temp;

    for (uint8_t i = 0; i < strlen(current_possition); i++)
    3ee8:	d3 94       	inc	r13
    3eea:	8d 2d       	mov	r24, r13
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	f7 01       	movw	r30, r14
    3ef0:	01 90       	ld	r0, Z+
    3ef2:	00 20       	and	r0, r0
    3ef4:	e9 f7       	brne	.-6      	; 0x3ef0 <lex_number+0x3e>
    3ef6:	31 97       	sbiw	r30, 0x01	; 1
    3ef8:	ee 19       	sub	r30, r14
    3efa:	ff 09       	sbc	r31, r15
    3efc:	8e 17       	cp	r24, r30
    3efe:	9f 07       	cpc	r25, r31
    3f00:	38 f3       	brcs	.-50     	; 0x3ed0 <lex_number+0x1e>
        numEnd = numEnd + 1;
    }

    // Only decimal numbers allowed

    if (numEnd - current_possition >= 1)
    3f02:	ce 01       	movw	r24, r28
    3f04:	8e 19       	sub	r24, r14
    3f06:	9f 09       	sbc	r25, r15
    3f08:	18 16       	cp	r1, r24
    3f0a:	19 06       	cpc	r1, r25
    3f0c:	94 f4       	brge	.+36     	; 0x3f32 <lex_number+0x80>
    {
        temp = *numEnd;
    3f0e:	d8 80       	ld	r13, Y
        *numEnd = 0;
    3f10:	18 82       	st	Y, r1

        token->type = NUMBER;
    3f12:	82 e0       	ldi	r24, 0x02	; 2
    3f14:	f8 01       	movw	r30, r16
    3f16:	80 83       	st	Z, r24
        token->value.num = atoi(current_possition);
    3f18:	c7 01       	movw	r24, r14
    3f1a:	0e 94 29 37 	call	0x6e52	; 0x6e52 <atoi>
    3f1e:	f8 01       	movw	r30, r16
    3f20:	92 83       	std	Z+2, r25	; 0x02
    3f22:	81 83       	std	Z+1, r24	; 0x01

        *numEnd = temp;
    3f24:	d8 82       	st	Y, r13
        current_possition = numEnd;
    3f26:	d0 93 90 0d 	sts	0x0D90, r29	; 0x800d90 <current_possition+0x1>
    3f2a:	c0 93 8f 0d 	sts	0x0D8F, r28	; 0x800d8f <current_possition>

        return LEXER_OK;
    3f2e:	80 e0       	ldi	r24, 0x00	; 0
    3f30:	01 c0       	rjmp	.+2      	; 0x3f34 <lex_number+0x82>
    }

    return NOT_FOUND;
    3f32:	81 e0       	ldi	r24, 0x01	; 1
}
    3f34:	df 91       	pop	r29
    3f36:	cf 91       	pop	r28
    3f38:	1f 91       	pop	r17
    3f3a:	0f 91       	pop	r16
    3f3c:	ff 90       	pop	r15
    3f3e:	ef 90       	pop	r14
    3f40:	df 90       	pop	r13
    3f42:	08 95       	ret

00003f44 <lex_core>:

static lexStatus_t lex_core(jsonToken_t *token)
{
    3f44:	cf 93       	push	r28
    3f46:	df 93       	push	r29
    3f48:	9c 01       	movw	r18, r24
    partialLexStatus_t ret;

    if (strlen(current_possition))
    3f4a:	e0 91 8f 0d 	lds	r30, 0x0D8F	; 0x800d8f <current_possition>
    3f4e:	f0 91 90 0d 	lds	r31, 0x0D90	; 0x800d90 <current_possition+0x1>
    3f52:	90 81       	ld	r25, Z
    3f54:	99 23       	and	r25, r25
    3f56:	c9 f1       	breq	.+114    	; 0x3fca <lex_core+0x86>
    3f58:	e9 01       	movw	r28, r18
    {
        ret = lex_string(token);
    3f5a:	c9 01       	movw	r24, r18
    3f5c:	71 df       	rcall	.-286    	; 0x3e40 <lex_string>
        if (FOUND == ret)
    3f5e:	88 23       	and	r24, r24
    3f60:	b1 f1       	breq	.+108    	; 0x3fce <lex_core+0x8a>
        {
            return LEXER_OK;
        }
        else if (ret != NOT_FOUND)
    3f62:	81 30       	cpi	r24, 0x01	; 1
    3f64:	b1 f5       	brne	.+108    	; 0x3fd2 <lex_core+0x8e>
        {
            return LEXER_BAD_FORMAT;
        }

        ret = lex_number(token);
    3f66:	ce 01       	movw	r24, r28
    3f68:	a4 df       	rcall	.-184    	; 0x3eb2 <lex_number>
        if (FOUND == ret)
    3f6a:	88 23       	and	r24, r24
    3f6c:	a1 f1       	breq	.+104    	; 0x3fd6 <lex_core+0x92>
        {
            return LEXER_OK;
        }
        else if (ret != NOT_FOUND)
    3f6e:	81 30       	cpi	r24, 0x01	; 1
    3f70:	a1 f5       	brne	.+104    	; 0x3fda <lex_core+0x96>
        {
            return LEXER_BAD_FORMAT;
        }

        switch (current_possition[0])
    3f72:	e0 91 8f 0d 	lds	r30, 0x0D8F	; 0x800d8f <current_possition>
    3f76:	f0 91 90 0d 	lds	r31, 0x0D90	; 0x800d90 <current_possition+0x1>
    3f7a:	80 81       	ld	r24, Z
    3f7c:	8a 33       	cpi	r24, 0x3A	; 58
    3f7e:	e1 f0       	breq	.+56     	; 0x3fb8 <lex_core+0x74>
    3f80:	28 f4       	brcc	.+10     	; 0x3f8c <lex_core+0x48>
    3f82:	80 32       	cpi	r24, 0x20	; 32
    3f84:	49 f0       	breq	.+18     	; 0x3f98 <lex_core+0x54>
    3f86:	8c 32       	cpi	r24, 0x2C	; 44
    3f88:	a1 f0       	breq	.+40     	; 0x3fb2 <lex_core+0x6e>
    3f8a:	29 c0       	rjmp	.+82     	; 0x3fde <lex_core+0x9a>
    3f8c:	8b 37       	cpi	r24, 0x7B	; 123
    3f8e:	59 f0       	breq	.+22     	; 0x3fa6 <lex_core+0x62>
    3f90:	8d 37       	cpi	r24, 0x7D	; 125
    3f92:	61 f0       	breq	.+24     	; 0x3fac <lex_core+0x68>
    3f94:	8c 35       	cpi	r24, 0x5C	; 92
    3f96:	19 f5       	brne	.+70     	; 0x3fde <lex_core+0x9a>
        {
            case ' ': // intended fall through
            case '\\':
                current_possition = current_possition + 1;
    3f98:	31 96       	adiw	r30, 0x01	; 1
    3f9a:	f0 93 90 0d 	sts	0x0D90, r31	; 0x800d90 <current_possition+0x1>
    3f9e:	e0 93 8f 0d 	sts	0x0D8F, r30	; 0x800d8f <current_possition>
                return LEXER_SKIP;
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	1d c0       	rjmp	.+58     	; 0x3fe0 <lex_core+0x9c>

                break;

            case '{':
                token->type = LEFT_BRACE;
    3fa6:	83 e0       	ldi	r24, 0x03	; 3
    3fa8:	88 83       	st	Y, r24
                break;
    3faa:	08 c0       	rjmp	.+16     	; 0x3fbc <lex_core+0x78>

            case '}':
                token->type = RIGHT_BRACE;
    3fac:	84 e0       	ldi	r24, 0x04	; 4
    3fae:	88 83       	st	Y, r24
                break;
    3fb0:	05 c0       	rjmp	.+10     	; 0x3fbc <lex_core+0x78>

            case ',':
                token->type = COMMA;
    3fb2:	86 e0       	ldi	r24, 0x06	; 6
    3fb4:	88 83       	st	Y, r24
                break;
    3fb6:	02 c0       	rjmp	.+4      	; 0x3fbc <lex_core+0x78>

            case ':':
                token->type = COLON;
    3fb8:	85 e0       	ldi	r24, 0x05	; 5
    3fba:	88 83       	st	Y, r24

            default:
                return LEXER_BAD_FORMAT;
        }

        current_possition = current_possition + 1;
    3fbc:	31 96       	adiw	r30, 0x01	; 1
    3fbe:	f0 93 90 0d 	sts	0x0D90, r31	; 0x800d90 <current_possition+0x1>
    3fc2:	e0 93 8f 0d 	sts	0x0D8F, r30	; 0x800d8f <current_possition>

        return LEXER_OK;
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	0b c0       	rjmp	.+22     	; 0x3fe0 <lex_core+0x9c>
    }

    return LEXER_NO_MORE_TOKENS;
    3fca:	82 e0       	ldi	r24, 0x02	; 2
    3fcc:	09 c0       	rjmp	.+18     	; 0x3fe0 <lex_core+0x9c>
    if (strlen(current_possition))
    {
        ret = lex_string(token);
        if (FOUND == ret)
        {
            return LEXER_OK;
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	07 c0       	rjmp	.+14     	; 0x3fe0 <lex_core+0x9c>
        }
        else if (ret != NOT_FOUND)
        {
            return LEXER_BAD_FORMAT;
    3fd2:	83 e0       	ldi	r24, 0x03	; 3
    3fd4:	05 c0       	rjmp	.+10     	; 0x3fe0 <lex_core+0x9c>
        }

        ret = lex_number(token);
        if (FOUND == ret)
        {
            return LEXER_OK;
    3fd6:	80 e0       	ldi	r24, 0x00	; 0
    3fd8:	03 c0       	rjmp	.+6      	; 0x3fe0 <lex_core+0x9c>
        }
        else if (ret != NOT_FOUND)
        {
            return LEXER_BAD_FORMAT;
    3fda:	83 e0       	ldi	r24, 0x03	; 3
    3fdc:	01 c0       	rjmp	.+2      	; 0x3fe0 <lex_core+0x9c>
            case ':':
                token->type = COLON;
                break;

            default:
                return LEXER_BAD_FORMAT;
    3fde:	83 e0       	ldi	r24, 0x03	; 3

        return LEXER_OK;
    }

    return LEXER_NO_MORE_TOKENS;
}
    3fe0:	df 91       	pop	r29
    3fe2:	cf 91       	pop	r28
    3fe4:	08 95       	ret

00003fe6 <LEXER_nextToken>:

lexStatus_t LEXER_nextToken(jsonToken_t *token)
{
    3fe6:	cf 93       	push	r28
    3fe8:	df 93       	push	r29
    3fea:	ec 01       	movw	r28, r24
    lexStatus_t ret;
    ret = lex_core(token);
    3fec:	ab df       	rcall	.-170    	; 0x3f44 <lex_core>

    while (LEXER_SKIP == ret)
    3fee:	02 c0       	rjmp	.+4      	; 0x3ff4 <LEXER_nextToken+0xe>
    {
        ret = lex_core(token);
    3ff0:	ce 01       	movw	r24, r28
    3ff2:	a8 df       	rcall	.-176    	; 0x3f44 <lex_core>
lexStatus_t LEXER_nextToken(jsonToken_t *token)
{
    lexStatus_t ret;
    ret = lex_core(token);

    while (LEXER_SKIP == ret)
    3ff4:	81 30       	cpi	r24, 0x01	; 1
    3ff6:	e1 f3       	breq	.-8      	; 0x3ff0 <LEXER_nextToken+0xa>
    {
        ret = lex_core(token);
    }

    return ret;
}
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
    3ffc:	08 95       	ret

00003ffe <LEXER_init>:

void LEXER_init(char *str)
{
    current_possition = str;
    3ffe:	90 93 90 0d 	sts	0x0D90, r25	; 0x800d90 <current_possition+0x1>
    4002:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <current_possition>
    4006:	08 95       	ret

00004008 <MEM_MODEL_init>:

static uint8_t theJsonTop;

void MEM_MODEL_init(void)
{
    theJsonTop = 0;
    4008:	10 92 91 0d 	sts	0x0D91, r1	; 0x800d91 <theJsonTop>
    400c:	08 95       	ret

0000400e <MEM_MODEL_allocNode>:
}

jsonNode_t* MEM_MODEL_allocNode(void)
{
    if (theJsonTop < JSON_MAX_KEYS)
    400e:	20 91 91 0d 	lds	r18, 0x0D91	; 0x800d91 <theJsonTop>
    4012:	2a 30       	cpi	r18, 0x0A	; 10
    4014:	88 f4       	brcc	.+34     	; 0x4038 <MEM_MODEL_allocNode+0x2a>
    {
        jsonNode_t *node = &theJson[theJsonTop];
    4016:	82 2f       	mov	r24, r18
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	ac 01       	movw	r20, r24
    401c:	44 0f       	add	r20, r20
    401e:	55 1f       	adc	r21, r21
    4020:	44 0f       	add	r20, r20
    4022:	55 1f       	adc	r21, r21
    4024:	44 0f       	add	r20, r20
    4026:	55 1f       	adc	r21, r21
    4028:	84 0f       	add	r24, r20
    402a:	95 1f       	adc	r25, r21
        theJsonTop = theJsonTop + 1;
    402c:	2f 5f       	subi	r18, 0xFF	; 255
    402e:	20 93 91 0d 	sts	0x0D91, r18	; 0x800d91 <theJsonTop>
        return node;
    4032:	85 58       	subi	r24, 0x85	; 133
    4034:	9d 4d       	sbci	r25, 0xDD	; 221
    4036:	08 95       	ret
    }
    else
    {
        return 0;
    4038:	80 e0       	ldi	r24, 0x00	; 0
    403a:	90 e0       	ldi	r25, 0x00	; 0
    }
    403c:	08 95       	ret

0000403e <PARSER_parseTokens>:

static recursionStack_t STACK[SOFT_STACK_SIZE];
static uint8_t stackTop;

parserStatus_t PARSER_parseTokens(void)
{
    403e:	6f 92       	push	r6
    4040:	7f 92       	push	r7
    4042:	8f 92       	push	r8
    4044:	9f 92       	push	r9
    4046:	af 92       	push	r10
    4048:	bf 92       	push	r11
    404a:	cf 92       	push	r12
    404c:	ef 92       	push	r14
    404e:	ff 92       	push	r15
    4050:	1f 93       	push	r17
    4052:	cf 93       	push	r28
    4054:	df 93       	push	r29
    4056:	00 d0       	rcall	.+0      	; 0x4058 <PARSER_parseTokens+0x1a>
    4058:	cd b7       	in	r28, 0x3d	; 61
    405a:	de b7       	in	r29, 0x3e	; 62

    jsonToken_t nextToken;
    jsonNode_t *currentNode = NULL;
    jsonNode_t *previousNode = NULL;

    ASSERT_AVAILABLE_SOFT_STACK;
    405c:	e0 91 92 0d 	lds	r30, 0x0D92	; 0x800d92 <stackTop>
    4060:	ea 30       	cpi	r30, 0x0A	; 10
    4062:	08 f0       	brcs	.+2      	; 0x4066 <PARSER_parseTokens+0x28>
    4064:	0e c1       	rjmp	.+540    	; 0x4282 <PARSER_parseTokens+0x244>
    STACK[stackTop++] = (recursionStack_t){
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	8e 0f       	add	r24, r30
    406a:	80 93 92 0d 	sts	0x0D92, r24	; 0x800d92 <stackTop>
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	ee 0f       	add	r30, r30
    4072:	ff 1f       	adc	r31, r31
    4074:	ee 0f       	add	r30, r30
    4076:	ff 1f       	adc	r31, r31
    4078:	ed 56       	subi	r30, 0x6D	; 109
    407a:	f2 4f       	sbci	r31, 0xF2	; 242
    407c:	10 82       	st	Z, r1
    407e:	11 82       	std	Z+1, r1	; 0x01
    4080:	12 82       	std	Z+2, r1	; 0x02
    4082:	13 82       	std	Z+3, r1	; 0x03
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	81 83       	std	Z+1, r24	; 0x01
{
    parserStatus_t retVal = PARSER_OK;

    jsonToken_t nextToken;
    jsonNode_t *currentNode = NULL;
    jsonNode_t *previousNode = NULL;
    4088:	e1 2c       	mov	r14, r1
    408a:	f1 2c       	mov	r15, r1
parserStatus_t PARSER_parseTokens(void)
{
    parserStatus_t retVal = PARSER_OK;

    jsonToken_t nextToken;
    jsonNode_t *currentNode = NULL;
    408c:	61 2c       	mov	r6, r1
    408e:	71 2c       	mov	r7, r1
static recursionStack_t STACK[SOFT_STACK_SIZE];
static uint8_t stackTop;

parserStatus_t PARSER_parseTokens(void)
{
    parserStatus_t retVal = PARSER_OK;
    4090:	10 e0       	ldi	r17, 0x00	; 0
        {
            .root = 1,
        }
    };

    while (stackTop > 0)
    4092:	f1 c0       	rjmp	.+482    	; 0x4276 <PARSER_parseTokens+0x238>
    {
        recursionStack_t pop = STACK[--stackTop];
    4094:	e1 50       	subi	r30, 0x01	; 1
    4096:	e0 93 92 0d 	sts	0x0D92, r30	; 0x800d92 <stackTop>
    409a:	f0 e0       	ldi	r31, 0x00	; 0
    409c:	ee 0f       	add	r30, r30
    409e:	ff 1f       	adc	r31, r31
    40a0:	ee 0f       	add	r30, r30
    40a2:	ff 1f       	adc	r31, r31
    40a4:	ed 56       	subi	r30, 0x6D	; 109
    40a6:	f2 4f       	sbci	r31, 0xF2	; 242
    40a8:	c1 80       	ldd	r12, Z+1	; 0x01
    40aa:	a2 80       	ldd	r10, Z+2	; 0x02
    40ac:	b3 80       	ldd	r11, Z+3	; 0x03

        switch (pop.type)
    40ae:	90 81       	ld	r25, Z
    40b0:	91 30       	cpi	r25, 0x01	; 1
    40b2:	09 f4       	brne	.+2      	; 0x40b6 <PARSER_parseTokens+0x78>
    40b4:	41 c0       	rjmp	.+130    	; 0x4138 <PARSER_parseTokens+0xfa>
    40b6:	20 f0       	brcs	.+8      	; 0x40c0 <PARSER_parseTokens+0x82>
    40b8:	92 30       	cpi	r25, 0x02	; 2
    40ba:	09 f4       	brne	.+2      	; 0x40be <PARSER_parseTokens+0x80>
    40bc:	7c c0       	rjmp	.+248    	; 0x41b6 <PARSER_parseTokens+0x178>
    40be:	db c0       	rjmp	.+438    	; 0x4276 <PARSER_parseTokens+0x238>
        {
            case CALL:
                ASSERT_TOKEN(&nextToken);
    40c0:	ce 01       	movw	r24, r28
    40c2:	01 96       	adiw	r24, 0x01	; 1
    40c4:	90 df       	rcall	.-224    	; 0x3fe6 <LEXER_nextToken>
    40c6:	81 11       	cpse	r24, r1
    40c8:	b1 c0       	rjmp	.+354    	; 0x422c <PARSER_parseTokens+0x1ee>
                if (pop.data.root && nextToken.type != LEFT_BRACE)
    40ca:	cc 20       	and	r12, r12
    40cc:	21 f0       	breq	.+8      	; 0x40d6 <PARSER_parseTokens+0x98>
    40ce:	89 81       	ldd	r24, Y+1	; 0x01
    40d0:	83 30       	cpi	r24, 0x03	; 3
    40d2:	09 f0       	breq	.+2      	; 0x40d6 <PARSER_parseTokens+0x98>
    40d4:	c1 c0       	rjmp	.+386    	; 0x4258 <PARSER_parseTokens+0x21a>
                {
                    retVal = PARSER_BAD_FORMAT; //Root must be an object
                    continue;
                }

                if (nextToken.type == LEFT_BRACE)
    40d6:	89 81       	ldd	r24, Y+1	; 0x01
    40d8:	83 30       	cpi	r24, 0x03	; 3
    40da:	09 f0       	breq	.+2      	; 0x40de <PARSER_parseTokens+0xa0>
                {
                    ASSERT_NODE_ALLOC(currentNode);
    40dc:	bf c0       	rjmp	.+382    	; 0x425c <PARSER_parseTokens+0x21e>
    40de:	97 df       	rcall	.-210    	; 0x400e <MEM_MODEL_allocNode>
    40e0:	3c 01       	movw	r6, r24
    40e2:	89 2b       	or	r24, r25
    40e4:	09 f4       	brne	.+2      	; 0x40e8 <PARSER_parseTokens+0xaa>
    40e6:	a4 c0       	rjmp	.+328    	; 0x4230 <PARSER_parseTokens+0x1f2>

                    if (previousNode != NULL)
    40e8:	e1 14       	cp	r14, r1
    40ea:	f1 04       	cpc	r15, r1
    40ec:	29 f0       	breq	.+10     	; 0x40f8 <PARSER_parseTokens+0xba>
                    {
                        previousNode->type = OBJECT;
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	f7 01       	movw	r30, r14
    40f2:	82 83       	std	Z+2, r24	; 0x02
                        previousNode->v = currentNode;
    40f4:	70 86       	std	Z+8, r7	; 0x08
    40f6:	67 82       	std	Z+7, r6	; 0x07
                    }

                    ASSERT_TOKEN(&nextToken);
    40f8:	ce 01       	movw	r24, r28
    40fa:	01 96       	adiw	r24, 0x01	; 1
    40fc:	74 df       	rcall	.-280    	; 0x3fe6 <LEXER_nextToken>
    40fe:	81 11       	cpse	r24, r1
    4100:	99 c0       	rjmp	.+306    	; 0x4234 <PARSER_parseTokens+0x1f6>
                    if (RIGHT_BRACE == nextToken.type)
    4102:	89 81       	ldd	r24, Y+1	; 0x01
    4104:	84 30       	cpi	r24, 0x04	; 4
    4106:	09 f4       	brne	.+2      	; 0x410a <PARSER_parseTokens+0xcc>
    4108:	ab c0       	rjmp	.+342    	; 0x4260 <PARSER_parseTokens+0x222>
                    {
                        retVal = PARSER_OK;
                        continue;
                    }

                    ASSERT_AVAILABLE_SOFT_STACK;
    410a:	e0 91 92 0d 	lds	r30, 0x0D92	; 0x800d92 <stackTop>
    410e:	ea 30       	cpi	r30, 0x0A	; 10
    4110:	08 f0       	brcs	.+2      	; 0x4114 <PARSER_parseTokens+0xd6>
    4112:	92 c0       	rjmp	.+292    	; 0x4238 <PARSER_parseTokens+0x1fa>
                    STACK[stackTop++] = (recursionStack_t){
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	8e 0f       	add	r24, r30
    4118:	80 93 92 0d 	sts	0x0D92, r24	; 0x800d92 <stackTop>
    411c:	f0 e0       	ldi	r31, 0x00	; 0
    411e:	ee 0f       	add	r30, r30
    4120:	ff 1f       	adc	r31, r31
    4122:	ee 0f       	add	r30, r30
    4124:	ff 1f       	adc	r31, r31
    4126:	ed 56       	subi	r30, 0x6D	; 109
    4128:	f2 4f       	sbci	r31, 0xF2	; 242
    412a:	10 82       	st	Z, r1
    412c:	11 82       	std	Z+1, r1	; 0x01
    412e:	12 82       	std	Z+2, r1	; 0x02
    4130:	13 82       	std	Z+3, r1	; 0x03
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	80 83       	st	Z, r24
                {
                    retVal = LEAF_TOKEN;
                    continue;
                }

                break;
    4136:	9f c0       	rjmp	.+318    	; 0x4276 <PARSER_parseTokens+0x238>

            case CALL_LOOP:

                if (STRING != nextToken.type)
    4138:	89 81       	ldd	r24, Y+1	; 0x01
    413a:	81 30       	cpi	r24, 0x01	; 1
    413c:	09 f0       	breq	.+2      	; 0x4140 <PARSER_parseTokens+0x102>
    413e:	92 c0       	rjmp	.+292    	; 0x4264 <PARSER_parseTokens+0x226>
                {
                    retVal = PARSER_BAD_FORMAT; // key must be string
                    continue;
                }
                currentNode->key = nextToken.value.str;
    4140:	8a 81       	ldd	r24, Y+2	; 0x02
    4142:	9b 81       	ldd	r25, Y+3	; 0x03
    4144:	f3 01       	movw	r30, r6
    4146:	91 83       	std	Z+1, r25	; 0x01

                ASSERT_TOKEN(&nextToken);
    4148:	80 83       	st	Z, r24
    414a:	ce 01       	movw	r24, r28
    414c:	01 96       	adiw	r24, 0x01	; 1
    414e:	4b df       	rcall	.-362    	; 0x3fe6 <LEXER_nextToken>
    4150:	81 11       	cpse	r24, r1
    4152:	74 c0       	rjmp	.+232    	; 0x423c <PARSER_parseTokens+0x1fe>
                if (COLON != nextToken.type)
    4154:	89 81       	ldd	r24, Y+1	; 0x01
    4156:	85 30       	cpi	r24, 0x05	; 5
    4158:	09 f0       	breq	.+2      	; 0x415c <PARSER_parseTokens+0x11e>
    415a:	86 c0       	rjmp	.+268    	; 0x4268 <PARSER_parseTokens+0x22a>
                    continue;
                }

                previousNode = currentNode;

                ASSERT_AVAILABLE_SOFT_STACK;
    415c:	e0 91 92 0d 	lds	r30, 0x0D92	; 0x800d92 <stackTop>
    4160:	ea 30       	cpi	r30, 0x0A	; 10
    4162:	08 f0       	brcs	.+2      	; 0x4166 <PARSER_parseTokens+0x128>
    4164:	6d c0       	rjmp	.+218    	; 0x4240 <PARSER_parseTokens+0x202>
                STACK[stackTop++] = (recursionStack_t){
    4166:	81 e0       	ldi	r24, 0x01	; 1
    4168:	8e 0f       	add	r24, r30
    416a:	80 93 92 0d 	sts	0x0D92, r24	; 0x800d92 <stackTop>
    416e:	f0 e0       	ldi	r31, 0x00	; 0
    4170:	ee 0f       	add	r30, r30
    4172:	ff 1f       	adc	r31, r31
    4174:	ee 0f       	add	r30, r30
    4176:	ff 1f       	adc	r31, r31
    4178:	ed 56       	subi	r30, 0x6D	; 109
    417a:	f2 4f       	sbci	r31, 0xF2	; 242
    417c:	10 82       	st	Z, r1
    417e:	11 82       	std	Z+1, r1	; 0x01
    4180:	12 82       	std	Z+2, r1	; 0x02
    4182:	13 82       	std	Z+3, r1	; 0x03
    4184:	92 e0       	ldi	r25, 0x02	; 2
    4186:	90 83       	st	Z, r25
    4188:	73 82       	std	Z+3, r7	; 0x03
    418a:	62 82       	std	Z+2, r6	; 0x02
                    {
                        .currentNode = currentNode
                    }
                };

                ASSERT_AVAILABLE_SOFT_STACK;
    418c:	8a 30       	cpi	r24, 0x0A	; 10
    418e:	08 f0       	brcs	.+2      	; 0x4192 <PARSER_parseTokens+0x154>
    4190:	59 c0       	rjmp	.+178    	; 0x4244 <PARSER_parseTokens+0x206>
                STACK[stackTop++] = (recursionStack_t){
    4192:	91 e0       	ldi	r25, 0x01	; 1
    4194:	98 0f       	add	r25, r24
    4196:	90 93 92 0d 	sts	0x0D92, r25	; 0x800d92 <stackTop>
    419a:	e8 2f       	mov	r30, r24
    419c:	f0 e0       	ldi	r31, 0x00	; 0
    419e:	ee 0f       	add	r30, r30
    41a0:	ff 1f       	adc	r31, r31
    41a2:	ee 0f       	add	r30, r30
    41a4:	ff 1f       	adc	r31, r31
    41a6:	ed 56       	subi	r30, 0x6D	; 109
    41a8:	f2 4f       	sbci	r31, 0xF2	; 242
    41aa:	10 82       	st	Z, r1
    41ac:	11 82       	std	Z+1, r1	; 0x01
    41ae:	12 82       	std	Z+2, r1	; 0x02
    41b0:	13 82       	std	Z+3, r1	; 0x03
                {
                    retVal = PARSER_BAD_FORMAT; // expecting colon after key
                    continue;
                }

                previousNode = currentNode;
    41b2:	73 01       	movw	r14, r6
                    {
                        .root = 0,
                    }
                };

                break;
    41b4:	60 c0       	rjmp	.+192    	; 0x4276 <PARSER_parseTokens+0x238>

            case RESUME_LOOP:
                if (retVal == LEAF_TOKEN)
    41b6:	13 30       	cpi	r17, 0x03	; 3
    41b8:	31 f4       	brne	.+12     	; 0x41c6 <PARSER_parseTokens+0x188>
                {
                    memcpy(&currentNode->value, &nextToken.value, sizeof (currentNode->value));
    41ba:	8a 81       	ldd	r24, Y+2	; 0x02
    41bc:	9b 81       	ldd	r25, Y+3	; 0x03
    41be:	f3 01       	movw	r30, r6
    41c0:	94 83       	std	Z+4, r25	; 0x04
    41c2:	83 83       	std	Z+3, r24	; 0x03
    41c4:	02 c0       	rjmp	.+4      	; 0x41ca <PARSER_parseTokens+0x18c>
                }
                else if (retVal != PARSER_OK)
    41c6:	11 11       	cpse	r17, r1
                {
                    retVal = PARSER_BAD_FORMAT;
                    continue;
                }

                ASSERT_TOKEN(&nextToken);
    41c8:	51 c0       	rjmp	.+162    	; 0x426c <PARSER_parseTokens+0x22e>
    41ca:	ce 01       	movw	r24, r28
    41cc:	01 96       	adiw	r24, 0x01	; 1
    41ce:	0b df       	rcall	.-490    	; 0x3fe6 <LEXER_nextToken>
    41d0:	81 11       	cpse	r24, r1
    41d2:	3a c0       	rjmp	.+116    	; 0x4248 <PARSER_parseTokens+0x20a>
                if (RIGHT_BRACE == nextToken.type)
    41d4:	89 81       	ldd	r24, Y+1	; 0x01
    41d6:	84 30       	cpi	r24, 0x04	; 4
    41d8:	09 f4       	brne	.+2      	; 0x41dc <PARSER_parseTokens+0x19e>
    41da:	4a c0       	rjmp	.+148    	; 0x4270 <PARSER_parseTokens+0x232>
                {
                    retVal = PARSER_OK;
                    continue;
                }
                else if (COMMA != nextToken.type)
    41dc:	86 30       	cpi	r24, 0x06	; 6
    41de:	09 f0       	breq	.+2      	; 0x41e2 <PARSER_parseTokens+0x1a4>
                {
                    retVal = PARSER_BAD_FORMAT; // expecting comma
                    continue;
                }

                ASSERT_NODE_ALLOC(pop.data.currentNode->h);
    41e0:	49 c0       	rjmp	.+146    	; 0x4274 <PARSER_parseTokens+0x236>
    41e2:	8a 2c       	mov	r8, r10
    41e4:	9b 2c       	mov	r9, r11
    41e6:	74 01       	movw	r14, r8
    41e8:	12 df       	rcall	.-476    	; 0x400e <MEM_MODEL_allocNode>
    41ea:	3c 01       	movw	r6, r24
    41ec:	f4 01       	movw	r30, r8
    41ee:	96 83       	std	Z+6, r25	; 0x06
    41f0:	85 83       	std	Z+5, r24	; 0x05
    41f2:	89 2b       	or	r24, r25
                previousNode = pop.data.currentNode;
                currentNode = pop.data.currentNode->h;

                ASSERT_TOKEN(&nextToken);
    41f4:	59 f1       	breq	.+86     	; 0x424c <PARSER_parseTokens+0x20e>
    41f6:	ce 01       	movw	r24, r28
    41f8:	01 96       	adiw	r24, 0x01	; 1
    41fa:	f5 de       	rcall	.-534    	; 0x3fe6 <LEXER_nextToken>
    41fc:	81 11       	cpse	r24, r1
    41fe:	28 c0       	rjmp	.+80     	; 0x4250 <PARSER_parseTokens+0x212>

                ASSERT_AVAILABLE_SOFT_STACK;
    4200:	e0 91 92 0d 	lds	r30, 0x0D92	; 0x800d92 <stackTop>
    4204:	ea 30       	cpi	r30, 0x0A	; 10
    4206:	30 f5       	brcc	.+76     	; 0x4254 <PARSER_parseTokens+0x216>
                STACK[stackTop++] = (recursionStack_t){
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	8e 0f       	add	r24, r30
    420c:	80 93 92 0d 	sts	0x0D92, r24	; 0x800d92 <stackTop>
    4210:	f0 e0       	ldi	r31, 0x00	; 0
    4212:	ee 0f       	add	r30, r30
    4214:	ff 1f       	adc	r31, r31
    4216:	ee 0f       	add	r30, r30
    4218:	ff 1f       	adc	r31, r31
    421a:	ed 56       	subi	r30, 0x6D	; 109
    421c:	f2 4f       	sbci	r31, 0xF2	; 242
    421e:	10 82       	st	Z, r1
    4220:	11 82       	std	Z+1, r1	; 0x01
    4222:	12 82       	std	Z+2, r1	; 0x02
    4224:	13 82       	std	Z+3, r1	; 0x03
    4226:	81 e0       	ldi	r24, 0x01	; 1
    4228:	80 83       	st	Z, r24
                    .type = CALL_LOOP
                };

                break;
    422a:	25 c0       	rjmp	.+74     	; 0x4276 <PARSER_parseTokens+0x238>
        recursionStack_t pop = STACK[--stackTop];

        switch (pop.type)
        {
            case CALL:
                ASSERT_TOKEN(&nextToken);
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	2a c0       	rjmp	.+84     	; 0x4284 <PARSER_parseTokens+0x246>
                    continue;
                }

                if (nextToken.type == LEFT_BRACE)
                {
                    ASSERT_NODE_ALLOC(currentNode);
    4230:	82 e0       	ldi	r24, 0x02	; 2
    4232:	28 c0       	rjmp	.+80     	; 0x4284 <PARSER_parseTokens+0x246>
                    {
                        previousNode->type = OBJECT;
                        previousNode->v = currentNode;
                    }

                    ASSERT_TOKEN(&nextToken);
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	26 c0       	rjmp	.+76     	; 0x4284 <PARSER_parseTokens+0x246>
                    {
                        retVal = PARSER_OK;
                        continue;
                    }

                    ASSERT_AVAILABLE_SOFT_STACK;
    4238:	82 e0       	ldi	r24, 0x02	; 2
    423a:	24 c0       	rjmp	.+72     	; 0x4284 <PARSER_parseTokens+0x246>
                    retVal = PARSER_BAD_FORMAT; // key must be string
                    continue;
                }
                currentNode->key = nextToken.value.str;

                ASSERT_TOKEN(&nextToken);
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	22 c0       	rjmp	.+68     	; 0x4284 <PARSER_parseTokens+0x246>
                    continue;
                }

                previousNode = currentNode;

                ASSERT_AVAILABLE_SOFT_STACK;
    4240:	82 e0       	ldi	r24, 0x02	; 2
    4242:	20 c0       	rjmp	.+64     	; 0x4284 <PARSER_parseTokens+0x246>
                    {
                        .currentNode = currentNode
                    }
                };

                ASSERT_AVAILABLE_SOFT_STACK;
    4244:	82 e0       	ldi	r24, 0x02	; 2
    4246:	1e c0       	rjmp	.+60     	; 0x4284 <PARSER_parseTokens+0x246>
                {
                    retVal = PARSER_BAD_FORMAT;
                    continue;
                }

                ASSERT_TOKEN(&nextToken);
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	1c c0       	rjmp	.+56     	; 0x4284 <PARSER_parseTokens+0x246>
                {
                    retVal = PARSER_BAD_FORMAT; // expecting comma
                    continue;
                }

                ASSERT_NODE_ALLOC(pop.data.currentNode->h);
    424c:	82 e0       	ldi	r24, 0x02	; 2
    424e:	1a c0       	rjmp	.+52     	; 0x4284 <PARSER_parseTokens+0x246>
                previousNode = pop.data.currentNode;
                currentNode = pop.data.currentNode->h;

                ASSERT_TOKEN(&nextToken);
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	18 c0       	rjmp	.+48     	; 0x4284 <PARSER_parseTokens+0x246>

                ASSERT_AVAILABLE_SOFT_STACK;
    4254:	82 e0       	ldi	r24, 0x02	; 2
    4256:	16 c0       	rjmp	.+44     	; 0x4284 <PARSER_parseTokens+0x246>
        {
            case CALL:
                ASSERT_TOKEN(&nextToken);
                if (pop.data.root && nextToken.type != LEFT_BRACE)
                {
                    retVal = PARSER_BAD_FORMAT; //Root must be an object
    4258:	11 e0       	ldi	r17, 0x01	; 1
    425a:	0d c0       	rjmp	.+26     	; 0x4276 <PARSER_parseTokens+0x238>
                        }
                    };
                }
                else
                {
                    retVal = LEAF_TOKEN;
    425c:	13 e0       	ldi	r17, 0x03	; 3
    425e:	0b c0       	rjmp	.+22     	; 0x4276 <PARSER_parseTokens+0x238>
                    }

                    ASSERT_TOKEN(&nextToken);
                    if (RIGHT_BRACE == nextToken.type)
                    {
                        retVal = PARSER_OK;
    4260:	10 e0       	ldi	r17, 0x00	; 0
    4262:	09 c0       	rjmp	.+18     	; 0x4276 <PARSER_parseTokens+0x238>

            case CALL_LOOP:

                if (STRING != nextToken.type)
                {
                    retVal = PARSER_BAD_FORMAT; // key must be string
    4264:	11 e0       	ldi	r17, 0x01	; 1
    4266:	07 c0       	rjmp	.+14     	; 0x4276 <PARSER_parseTokens+0x238>
                currentNode->key = nextToken.value.str;

                ASSERT_TOKEN(&nextToken);
                if (COLON != nextToken.type)
                {
                    retVal = PARSER_BAD_FORMAT; // expecting colon after key
    4268:	11 e0       	ldi	r17, 0x01	; 1
    426a:	05 c0       	rjmp	.+10     	; 0x4276 <PARSER_parseTokens+0x238>
                {
                    memcpy(&currentNode->value, &nextToken.value, sizeof (currentNode->value));
                }
                else if (retVal != PARSER_OK)
                {
                    retVal = PARSER_BAD_FORMAT;
    426c:	11 e0       	ldi	r17, 0x01	; 1
    426e:	03 c0       	rjmp	.+6      	; 0x4276 <PARSER_parseTokens+0x238>
                }

                ASSERT_TOKEN(&nextToken);
                if (RIGHT_BRACE == nextToken.type)
                {
                    retVal = PARSER_OK;
    4270:	10 e0       	ldi	r17, 0x00	; 0
    4272:	01 c0       	rjmp	.+2      	; 0x4276 <PARSER_parseTokens+0x238>
                    continue;
                }
                else if (COMMA != nextToken.type)
                {
                    retVal = PARSER_BAD_FORMAT; // expecting comma
    4274:	11 e0       	ldi	r17, 0x01	; 1
        {
            .root = 1,
        }
    };

    while (stackTop > 0)
    4276:	e0 91 92 0d 	lds	r30, 0x0D92	; 0x800d92 <stackTop>
    427a:	e1 11       	cpse	r30, r1
    427c:	0b cf       	rjmp	.-490    	; 0x4094 <PARSER_parseTokens+0x56>
            default:
                break;
        }
    }

    return retVal;
    427e:	81 2f       	mov	r24, r17
    4280:	01 c0       	rjmp	.+2      	; 0x4284 <PARSER_parseTokens+0x246>

    jsonToken_t nextToken;
    jsonNode_t *currentNode = NULL;
    jsonNode_t *previousNode = NULL;

    ASSERT_AVAILABLE_SOFT_STACK;
    4282:	82 e0       	ldi	r24, 0x02	; 2
                break;
        }
    }

    return retVal;
    4284:	0f 90       	pop	r0
    4286:	0f 90       	pop	r0
    4288:	0f 90       	pop	r0
    428a:	df 91       	pop	r29
    428c:	cf 91       	pop	r28
    428e:	1f 91       	pop	r17
    4290:	ff 90       	pop	r15
    4292:	ef 90       	pop	r14
    4294:	cf 90       	pop	r12
    4296:	bf 90       	pop	r11
    4298:	af 90       	pop	r10
    429a:	9f 90       	pop	r9
    429c:	8f 90       	pop	r8
    429e:	7f 90       	pop	r7
    42a0:	6f 90       	pop	r6
    42a2:	08 95       	ret

000042a4 <appDataConf>:
{
	for (uint8_t i = 0; i < ind->size; i++)
		HAL_UartWriteByte(ind->data[i]);
	
	return true;
}
    42a4:	10 92 29 0e 	sts	0x0E29, r1	; 0x800e29 <appDataReqBusy>
    42a8:	08 95       	ret

000042aa <appTimerHandler>:
    42aa:	08 95       	ret

000042ac <appAddrInd>:
    42ac:	cf 93       	push	r28
    42ae:	df 93       	push	r29
    42b0:	ec 01       	movw	r28, r24
    42b2:	85 ef       	ldi	r24, 0xF5	; 245
    42b4:	9a e0       	ldi	r25, 0x0A	; 10
    42b6:	9f 93       	push	r25
    42b8:	8f 93       	push	r24
    42ba:	0e 94 b2 38 	call	0x7164	; 0x7164 <printf>
    42be:	ef 81       	ldd	r30, Y+7	; 0x07
    42c0:	f8 85       	ldd	r31, Y+8	; 0x08
    42c2:	86 81       	ldd	r24, Z+6	; 0x06
    42c4:	80 93 76 27 	sts	0x2776, r24	; 0x802776 <clusterID>
    42c8:	10 92 77 27 	sts	0x2777, r1	; 0x802777 <clusterID+0x1>
    42cc:	0f 90       	pop	r0
    42ce:	0f 90       	pop	r0
    42d0:	df 91       	pop	r29
    42d2:	cf 91       	pop	r28
    42d4:	08 95       	ret

000042d6 <sendOK>:
    42d6:	20 91 29 0e 	lds	r18, 0x0E29	; 0x800e29 <appDataReqBusy>
    42da:	21 11       	cpse	r18, r1
    42dc:	20 c0       	rjmp	.+64     	; 0x431e <sendOK+0x48>
    42de:	2c e6       	ldi	r18, 0x6C	; 108
    42e0:	ee e1       	ldi	r30, 0x1E	; 30
    42e2:	f2 e0       	ldi	r31, 0x02	; 2
    42e4:	ac eb       	ldi	r26, 0xBC	; 188
    42e6:	bd e0       	ldi	r27, 0x0D	; 13
    42e8:	01 90       	ld	r0, Z+
    42ea:	0d 92       	st	X+, r0
    42ec:	2a 95       	dec	r18
    42ee:	e1 f7       	brne	.-8      	; 0x42e8 <sendOK+0x12>
    42f0:	ea e2       	ldi	r30, 0x2A	; 42
    42f2:	fe e0       	ldi	r31, 0x0E	; 14
    42f4:	96 83       	std	Z+6, r25	; 0x06
    42f6:	85 83       	std	Z+5, r24	; 0x05
    42f8:	82 e0       	ldi	r24, 0x02	; 2
    42fa:	87 83       	std	Z+7, r24	; 0x07
    42fc:	80 87       	std	Z+8, r24	; 0x08
    42fe:	81 87       	std	Z+9, r24	; 0x09
    4300:	8c eb       	ldi	r24, 0xBC	; 188
    4302:	9d e0       	ldi	r25, 0x0D	; 13
    4304:	93 87       	std	Z+11, r25	; 0x0b
    4306:	82 87       	std	Z+10, r24	; 0x0a
    4308:	84 e0       	ldi	r24, 0x04	; 4
    430a:	84 87       	std	Z+12, r24	; 0x0c
    430c:	82 e5       	ldi	r24, 0x52	; 82
    430e:	91 e2       	ldi	r25, 0x21	; 33
    4310:	96 87       	std	Z+14, r25	; 0x0e
    4312:	85 87       	std	Z+13, r24	; 0x0d
    4314:	cf 01       	movw	r24, r30
    4316:	f3 d7       	rcall	.+4070   	; 0x52fe <NWK_DataReq>
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	80 93 29 0e 	sts	0x0E29, r24	; 0x800e29 <appDataReqBusy>
    431e:	08 95       	ret

00004320 <appDataInd>:
    4320:	fc 01       	movw	r30, r24
    4322:	a7 81       	ldd	r26, Z+7	; 0x07
    4324:	b0 85       	ldd	r27, Z+8	; 0x08
    4326:	82 85       	ldd	r24, Z+10	; 0x0a
    4328:	59 96       	adiw	r26, 0x19	; 25
    432a:	8c 93       	st	X, r24
    432c:	59 97       	sbiw	r26, 0x19	; 25
    432e:	83 85       	ldd	r24, Z+11	; 0x0b
    4330:	5a 96       	adiw	r26, 0x1a	; 26
    4332:	8c 93       	st	X, r24
    4334:	5a 97       	sbiw	r26, 0x1a	; 26
    4336:	5c 96       	adiw	r26, 0x1c	; 28
    4338:	8d 91       	ld	r24, X+
    433a:	9c 91       	ld	r25, X
    433c:	5d 97       	sbiw	r26, 0x1d	; 29
    433e:	90 93 75 26 	sts	0x2675, r25	; 0x802675 <buffer_data+0x1>
    4342:	80 93 74 26 	sts	0x2674, r24	; 0x802674 <buffer_data>
    4346:	5b 96       	adiw	r26, 0x1b	; 27
    4348:	8c 91       	ld	r24, X
    434a:	80 93 73 26 	sts	0x2673, r24	; 0x802673 <buffer_mask>
    434e:	80 81       	ld	r24, Z
    4350:	91 81       	ldd	r25, Z+1	; 0x01
    4352:	c1 df       	rcall	.-126    	; 0x42d6 <sendOK>
    4354:	81 e0       	ldi	r24, 0x01	; 1
    4356:	80 93 b5 0e 	sts	0x0EB5, r24	; 0x800eb5 <data_ready>
    435a:	08 95       	ret

0000435c <HAL_UartBytesReceived>:
    435c:	0f 93       	push	r16
    435e:	1f 93       	push	r17
    4360:	cf 93       	push	r28
    4362:	df 93       	push	r29
    4364:	8c 01       	movw	r16, r24
    4366:	c0 e0       	ldi	r28, 0x00	; 0
    4368:	d0 e0       	ldi	r29, 0x00	; 0
    436a:	10 c0       	rjmp	.+32     	; 0x438c <HAL_UartBytesReceived+0x30>
    436c:	08 d6       	rcall	.+3088   	; 0x4f7e <HAL_UartReadByte>
    436e:	80 91 bb 0d 	lds	r24, 0x0DBB	; 0x800dbb <appUartBufferPtr>
    4372:	8d 36       	cpi	r24, 0x6D	; 109
    4374:	19 f4       	brne	.+6      	; 0x437c <HAL_UartBytesReceived+0x20>
    4376:	81 e0       	ldi	r24, 0x01	; 1
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	ad df       	rcall	.-166    	; 0x42d6 <sendOK>
    437c:	80 91 bb 0d 	lds	r24, 0x0DBB	; 0x800dbb <appUartBufferPtr>
    4380:	8d 36       	cpi	r24, 0x6D	; 109
    4382:	18 f4       	brcc	.+6      	; 0x438a <HAL_UartBytesReceived+0x2e>
    4384:	8f 5f       	subi	r24, 0xFF	; 255
    4386:	80 93 bb 0d 	sts	0x0DBB, r24	; 0x800dbb <appUartBufferPtr>
    438a:	21 96       	adiw	r28, 0x01	; 1
    438c:	c0 17       	cp	r28, r16
    438e:	d1 07       	cpc	r29, r17
    4390:	68 f3       	brcs	.-38     	; 0x436c <HAL_UartBytesReceived+0x10>
    4392:	8b e3       	ldi	r24, 0x3B	; 59
    4394:	9e e0       	ldi	r25, 0x0E	; 14
    4396:	0e 94 17 32 	call	0x642e	; 0x642e <SYS_TimerStop>
    439a:	8b e3       	ldi	r24, 0x3B	; 59
    439c:	9e e0       	ldi	r25, 0x0E	; 14
    439e:	0e 94 61 32 	call	0x64c2	; 0x64c2 <SYS_TimerStart>
    43a2:	df 91       	pop	r29
    43a4:	cf 91       	pop	r28
    43a6:	1f 91       	pop	r17
    43a8:	0f 91       	pop	r16
    43aa:	08 95       	ret

000043ac <appInit>:
	printf("Address message \n\r");
	AppAddress_t *addr_msg = (AppAddress_t *)ind->data;
	clusterID = addr_msg->clusterID>>8;
}
void appInit(void){
	NWK_SetAddr(APP_ADDR);
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	de d6       	rcall	.+3516   	; 0x516e <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
    43b2:	85 e3       	ldi	r24, 0x35	; 53
    43b4:	92 e1       	ldi	r25, 0x12	; 18
    43b6:	e2 d6       	rcall	.+3524   	; 0x517c <NWK_SetPanId>
	PHY_SetChannel(APP_CHANNEL);
    43b8:	8f e0       	ldi	r24, 0x0F	; 15
    43ba:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <PHY_SetChannel>
	#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
	#endif
	PHY_SetRxState(true);
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	0e 94 de 30 	call	0x61bc	; 0x61bc <PHY_SetRxState>

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    43c4:	60 e9       	ldi	r22, 0x90	; 144
    43c6:	71 e2       	ldi	r23, 0x21	; 33
    43c8:	81 e0       	ldi	r24, 0x01	; 1
    43ca:	df d6       	rcall	.+3518   	; 0x518a <NWK_OpenEndpoint>
	NWK_OpenEndpoint(APP_ENDPOINT_ACK, appAddrInd);
    43cc:	66 e5       	ldi	r22, 0x56	; 86
    43ce:	71 e2       	ldi	r23, 0x21	; 33
    43d0:	82 e0       	ldi	r24, 0x02	; 2
    43d2:	db d6       	rcall	.+3510   	; 0x518a <NWK_OpenEndpoint>

	HAL_BoardInit();

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    43d4:	eb e3       	ldi	r30, 0x3B	; 59
    43d6:	fe e0       	ldi	r31, 0x0E	; 14
    43d8:	84 e1       	ldi	r24, 0x14	; 20
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	a0 e0       	ldi	r26, 0x00	; 0
    43de:	b0 e0       	ldi	r27, 0x00	; 0
    43e0:	86 83       	std	Z+6, r24	; 0x06
    43e2:	97 83       	std	Z+7, r25	; 0x07
    43e4:	a0 87       	std	Z+8, r26	; 0x08
    43e6:	b1 87       	std	Z+9, r27	; 0x09
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
    43e8:	12 86       	std	Z+10, r1	; 0x0a
	appTimer.handler = appTimerHandler;
    43ea:	85 e5       	ldi	r24, 0x55	; 85
    43ec:	91 e2       	ldi	r25, 0x21	; 33
    43ee:	94 87       	std	Z+12, r25	; 0x0c
    43f0:	83 87       	std	Z+11, r24	; 0x0b
    43f2:	08 95       	ret

000043f4 <APP_TaskHandler>:
}
void APP_TaskHandler(void){
	switch(appState){
    43f4:	80 91 48 0e 	lds	r24, 0x0E48	; 0x800e48 <appState>
    43f8:	81 11       	cpse	r24, r1
    43fa:	04 c0       	rjmp	.+8      	; 0x4404 <APP_TaskHandler+0x10>
	case APP_STATE_INITIAL:
	{
		appInit();
    43fc:	d7 df       	rcall	.-82     	; 0x43ac <appInit>
		appState = APP_STATE_IDLE;
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	80 93 48 0e 	sts	0x0E48, r24	; 0x800e48 <appState>
    4404:	08 95       	ret

00004406 <freeRam>:
//Wiznet FUNC headers
void print_network_information(void);

// RAM Memory usage test
static int freeRam (void)
{
    4406:	cf 93       	push	r28
    4408:	df 93       	push	r29
    440a:	1f 92       	push	r1
    440c:	1f 92       	push	r1
    440e:	cd b7       	in	r28, 0x3d	; 61
    4410:	de b7       	in	r29, 0x3e	; 62
	extern int __heap_start, *__brkval;
	int v;
	int _res = (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
    4412:	80 91 a1 27 	lds	r24, 0x27A1	; 0x8027a1 <__brkval>
    4416:	90 91 a2 27 	lds	r25, 0x27A2	; 0x8027a2 <__brkval+0x1>
    441a:	00 97       	sbiw	r24, 0x00	; 0
    441c:	11 f0       	breq	.+4      	; 0x4422 <freeRam+0x1c>
    441e:	9c 01       	movw	r18, r24
    4420:	02 c0       	rjmp	.+4      	; 0x4426 <freeRam+0x20>
    4422:	2c ea       	ldi	r18, 0xAC	; 172
    4424:	37 e2       	ldi	r19, 0x27	; 39
	return _res;
}
    4426:	ce 01       	movw	r24, r28
    4428:	01 96       	adiw	r24, 0x01	; 1
    442a:	82 1b       	sub	r24, r18
    442c:	93 0b       	sbc	r25, r19
    442e:	0f 90       	pop	r0
    4430:	0f 90       	pop	r0
    4432:	df 91       	pop	r29
    4434:	cf 91       	pop	r28
    4436:	08 95       	ret

00004438 <cs_sel>:

unsigned char ethBuf0[ETH_MAX_BUF_SIZE];
unsigned char ethBuf1[ETH_MAX_BUF_SIZE];

void cs_sel() {
	SPI_WIZNET_ENABLE();
    4438:	8b b1       	in	r24, 0x0b	; 11
    443a:	8f 7e       	andi	r24, 0xEF	; 239
    443c:	8b b9       	out	0x0b, r24	; 11
    443e:	08 95       	ret

00004440 <cs_desel>:
}

void cs_desel() {
	SPI_WIZNET_DISABLE();
    4440:	8b b1       	in	r24, 0x0b	; 11
    4442:	80 61       	ori	r24, 0x10	; 16
    4444:	8b b9       	out	0x0b, r24	; 11
    4446:	08 95       	ret

00004448 <spi_rb>:
}

uint8_t spi_rb(void) {
	uint8_t rbuf;
	SPI_READ(rbuf);
    4448:	1e bc       	out	0x2e, r1	; 46
    444a:	0d b4       	in	r0, 0x2d	; 45
    444c:	07 fe       	sbrs	r0, 7
    444e:	fd cf       	rjmp	.-6      	; 0x444a <spi_rb+0x2>
    4450:	8e b5       	in	r24, 0x2e	; 46
	return rbuf;
}
    4452:	08 95       	ret

00004454 <spi_wb>:

void spi_wb(uint8_t b) {
	SPI_WRITE(b);
    4454:	8e bd       	out	0x2e, r24	; 46
    4456:	0d b4       	in	r0, 0x2d	; 45
    4458:	07 fe       	sbrs	r0, 7
    445a:	fd cf       	rjmp	.-6      	; 0x4456 <spi_wb+0x2>
}
    445c:	08 95       	ret

0000445e <spi_rb_burst>:

void spi_rb_burst(uint8_t *buf, uint16_t len) {
    445e:	fc 01       	movw	r30, r24
	for (uint16_t var = 0; var < len; var++) {
    4460:	20 e0       	ldi	r18, 0x00	; 0
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	09 c0       	rjmp	.+18     	; 0x4478 <spi_rb_burst+0x1a>
		SPI_READ(*buf++);
    4466:	1e bc       	out	0x2e, r1	; 46
    4468:	0d b4       	in	r0, 0x2d	; 45
    446a:	07 fe       	sbrs	r0, 7
    446c:	fd cf       	rjmp	.-6      	; 0x4468 <spi_rb_burst+0xa>
    446e:	8e b5       	in	r24, 0x2e	; 46
    4470:	80 83       	st	Z, r24
void spi_wb(uint8_t b) {
	SPI_WRITE(b);
}

void spi_rb_burst(uint8_t *buf, uint16_t len) {
	for (uint16_t var = 0; var < len; var++) {
    4472:	2f 5f       	subi	r18, 0xFF	; 255
    4474:	3f 4f       	sbci	r19, 0xFF	; 255
		SPI_READ(*buf++);
    4476:	31 96       	adiw	r30, 0x01	; 1
void spi_wb(uint8_t b) {
	SPI_WRITE(b);
}

void spi_rb_burst(uint8_t *buf, uint16_t len) {
	for (uint16_t var = 0; var < len; var++) {
    4478:	26 17       	cp	r18, r22
    447a:	37 07       	cpc	r19, r23
    447c:	a0 f3       	brcs	.-24     	; 0x4466 <spi_rb_burst+0x8>
		SPI_READ(*buf++);
	}
}
    447e:	08 95       	ret

00004480 <spi_wb_burst>:

void spi_wb_burst(uint8_t *buf, uint16_t len) {
    4480:	fc 01       	movw	r30, r24
	for (uint16_t var = 0; var < len; var++) {
    4482:	20 e0       	ldi	r18, 0x00	; 0
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	0a c0       	rjmp	.+20     	; 0x449c <spi_wb_burst+0x1c>
		SPI_WRITE(*buf++);
    4488:	cf 01       	movw	r24, r30
    448a:	01 96       	adiw	r24, 0x01	; 1
    448c:	40 81       	ld	r20, Z
    448e:	4e bd       	out	0x2e, r20	; 46
    4490:	0d b4       	in	r0, 0x2d	; 45
    4492:	07 fe       	sbrs	r0, 7
    4494:	fd cf       	rjmp	.-6      	; 0x4490 <spi_wb_burst+0x10>
		SPI_READ(*buf++);
	}
}

void spi_wb_burst(uint8_t *buf, uint16_t len) {
	for (uint16_t var = 0; var < len; var++) {
    4496:	2f 5f       	subi	r18, 0xFF	; 255
    4498:	3f 4f       	sbci	r19, 0xFF	; 255
		SPI_WRITE(*buf++);
    449a:	fc 01       	movw	r30, r24
		SPI_READ(*buf++);
	}
}

void spi_wb_burst(uint8_t *buf, uint16_t len) {
	for (uint16_t var = 0; var < len; var++) {
    449c:	26 17       	cp	r18, r22
    449e:	37 07       	cpc	r19, r23
    44a0:	98 f3       	brcs	.-26     	; 0x4488 <spi_wb_burst+0x8>
		SPI_WRITE(*buf++);
	}
}
    44a2:	08 95       	ret

000044a4 <messageArrived>:
#define PUBLISH_CONFIG_0         "/ssy/test/config"
#define PUBLISH_TEPLOTA_0         "/ssy/test/teplota"
//#define PUBLISH_AVR_DEBUG         "/w5500_avr_dbg"
//MQTT subscribe call-back is here
void messageArrived(MessageData* md)
{
    44a4:	0f 93       	push	r16
    44a6:	1f 93       	push	r17
    44a8:	cf 93       	push	r28
    44aa:	df 93       	push	r29
    44ac:	cd b7       	in	r28, 0x3d	; 61
    44ae:	de b7       	in	r29, 0x3e	; 62
    44b0:	c0 5c       	subi	r28, 0xC0	; 192
    44b2:	d1 09       	sbc	r29, r1
    44b4:	0f b6       	in	r0, 0x3f	; 63
    44b6:	f8 94       	cli
    44b8:	de bf       	out	0x3e, r29	; 62
    44ba:	0f be       	out	0x3f, r0	; 63
    44bc:	cd bf       	out	0x3d, r28	; 61
	char _topic_name[64] = "\0";
    44be:	20 91 59 0a 	lds	r18, 0x0A59	; 0x800a59 <mqtt_target+0x3f>
    44c2:	30 91 5a 0a 	lds	r19, 0x0A5A	; 0x800a5a <mqtt_target+0x40>
    44c6:	3a 83       	std	Y+2, r19	; 0x02
    44c8:	29 83       	std	Y+1, r18	; 0x01
    44ca:	fe 01       	movw	r30, r28
    44cc:	33 96       	adiw	r30, 0x03	; 3
    44ce:	4e e3       	ldi	r20, 0x3E	; 62
    44d0:	df 01       	movw	r26, r30
    44d2:	1d 92       	st	X+, r1
    44d4:	4a 95       	dec	r20
    44d6:	e9 f7       	brne	.-6      	; 0x44d2 <messageArrived+0x2e>
	char _message[128] = "\0";
    44d8:	23 96       	adiw	r28, 0x03	; 3
    44da:	3f af       	std	Y+63, r19	; 0x3f
    44dc:	2e af       	std	Y+62, r18	; 0x3e
    44de:	23 97       	sbiw	r28, 0x03	; 3
    44e0:	e0 5c       	subi	r30, 0xC0	; 192
    44e2:	ff 4f       	sbci	r31, 0xFF	; 255
    44e4:	2e e7       	ldi	r18, 0x7E	; 126
    44e6:	df 01       	movw	r26, r30
    44e8:	1d 92       	st	X+, r1
    44ea:	2a 95       	dec	r18
    44ec:	e9 f7       	brne	.-6      	; 0x44e8 <messageArrived+0x44>

	MQTTMessage* message = md->message;
    44ee:	fc 01       	movw	r30, r24
    44f0:	00 81       	ld	r16, Z
    44f2:	11 81       	ldd	r17, Z+1	; 0x01
	
	MQTTString* topic = md->topicName;
    44f4:	02 80       	ldd	r0, Z+2	; 0x02
    44f6:	f3 81       	ldd	r31, Z+3	; 0x03
    44f8:	e0 2d       	mov	r30, r0
	strncpy(_topic_name, topic->lenstring.data, topic->lenstring.len);
    44fa:	42 81       	ldd	r20, Z+2	; 0x02
    44fc:	53 81       	ldd	r21, Z+3	; 0x03
    44fe:	64 81       	ldd	r22, Z+4	; 0x04
    4500:	75 81       	ldd	r23, Z+5	; 0x05
    4502:	86 81       	ldd	r24, Z+6	; 0x06
    4504:	97 81       	ldd	r25, Z+7	; 0x07
    4506:	bc 01       	movw	r22, r24
    4508:	ce 01       	movw	r24, r28
    450a:	01 96       	adiw	r24, 0x01	; 1
    450c:	0e 94 54 38 	call	0x70a8	; 0x70a8 <strncpy>
	strncpy(_message, message->payload, message->payloadlen);
    4510:	d8 01       	movw	r26, r16
    4512:	15 96       	adiw	r26, 0x05	; 5
    4514:	6d 91       	ld	r22, X+
    4516:	7c 91       	ld	r23, X
    4518:	16 97       	sbiw	r26, 0x06	; 6
    451a:	17 96       	adiw	r26, 0x07	; 7
    451c:	4d 91       	ld	r20, X+
    451e:	5c 91       	ld	r21, X
    4520:	18 97       	sbiw	r26, 0x08	; 8
    4522:	ce 01       	movw	r24, r28
    4524:	8f 5b       	subi	r24, 0xBF	; 191
    4526:	9f 4f       	sbci	r25, 0xFF	; 255
    4528:	0e 94 54 38 	call	0x70a8	; 0x70a8 <strncpy>
	
	if(!strcmp(_topic_name,"/ssy/test/config")){
    452c:	68 e0       	ldi	r22, 0x08	; 8
    452e:	7b e0       	ldi	r23, 0x0B	; 11
    4530:	ce 01       	movw	r24, r28
    4532:	01 96       	adiw	r24, 0x01	; 1
    4534:	0e 94 3d 38 	call	0x707a	; 0x707a <strcmp>
    4538:	89 2b       	or	r24, r25
    453a:	61 f4       	brne	.+24     	; 0x4554 <messageArrived+0xb0>
		json_config_ready = 1;
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	80 93 50 0e 	sts	0x0E50, r24	; 0x800e50 <json_config_ready>
		strncpy(json_buffer, message->payload, message->payloadlen);
    4542:	f8 01       	movw	r30, r16
    4544:	65 81       	ldd	r22, Z+5	; 0x05
    4546:	76 81       	ldd	r23, Z+6	; 0x06
    4548:	47 81       	ldd	r20, Z+7	; 0x07
    454a:	50 85       	ldd	r21, Z+8	; 0x08
    454c:	81 e5       	ldi	r24, 0x51	; 81
    454e:	9e e0       	ldi	r25, 0x0E	; 14
    4550:	0e 94 54 38 	call	0x70a8	; 0x70a8 <strncpy>

	}
	PRINTF("<<MQTT Sub: [%s] %s", _topic_name , _message);
    4554:	ce 01       	movw	r24, r28
    4556:	8f 5b       	subi	r24, 0xBF	; 191
    4558:	9f 4f       	sbci	r25, 0xFF	; 255
    455a:	9f 93       	push	r25
    455c:	8f 93       	push	r24
    455e:	80 54       	subi	r24, 0x40	; 64
    4560:	91 09       	sbc	r25, r1
    4562:	9f 93       	push	r25
    4564:	8f 93       	push	r24
    4566:	84 ee       	ldi	r24, 0xE4	; 228
    4568:	93 e0       	ldi	r25, 0x03	; 3
    456a:	9f 93       	push	r25
    456c:	8f 93       	push	r24
    456e:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
}
    4572:	0f 90       	pop	r0
    4574:	0f 90       	pop	r0
    4576:	0f 90       	pop	r0
    4578:	0f 90       	pop	r0
    457a:	0f 90       	pop	r0
    457c:	0f 90       	pop	r0
    457e:	c0 54       	subi	r28, 0x40	; 64
    4580:	df 4f       	sbci	r29, 0xFF	; 255
    4582:	0f b6       	in	r0, 0x3f	; 63
    4584:	f8 94       	cli
    4586:	de bf       	out	0x3e, r29	; 62
    4588:	0f be       	out	0x3f, r0	; 63
    458a:	cd bf       	out	0x3d, r28	; 61
    458c:	df 91       	pop	r29
    458e:	cf 91       	pop	r28
    4590:	1f 91       	pop	r17
    4592:	0f 91       	pop	r16
    4594:	08 95       	ret

00004596 <mqtt_pub>:

void mqtt_pub(Client* mqtt_client, char * mqtt_topic, char * mqtt_msg, int mqtt_msg_len)
{
    4596:	af 92       	push	r10
    4598:	bf 92       	push	r11
    459a:	cf 92       	push	r12
    459c:	df 92       	push	r13
    459e:	ef 92       	push	r14
    45a0:	ff 92       	push	r15
    45a2:	0f 93       	push	r16
    45a4:	1f 93       	push	r17
    45a6:	cf 93       	push	r28
    45a8:	df 93       	push	r29
    45aa:	cd b7       	in	r28, 0x3d	; 61
    45ac:	de b7       	in	r29, 0x3e	; 62
    45ae:	29 97       	sbiw	r28, 0x09	; 9
    45b0:	0f b6       	in	r0, 0x3f	; 63
    45b2:	f8 94       	cli
    45b4:	de bf       	out	0x3e, r29	; 62
    45b6:	0f be       	out	0x3f, r0	; 63
    45b8:	cd bf       	out	0x3d, r28	; 61
    45ba:	8c 01       	movw	r16, r24
    45bc:	7b 01       	movw	r14, r22
    45be:	6a 01       	movw	r12, r20
    45c0:	59 01       	movw	r10, r18
	static uint32_t mqtt_pub_count = 0;
	static uint8_t mqtt_err_cnt = 0;
	int32_t mqtt_rc;

	wdt_reset();
    45c2:	a8 95       	wdr
	//wdt_disable();
	PRINTF(">>MQTT pub msg %lu ", ++mqtt_pub_count);
    45c4:	80 91 4a 0e 	lds	r24, 0x0E4A	; 0x800e4a <mqtt_pub_count.3574>
    45c8:	90 91 4b 0e 	lds	r25, 0x0E4B	; 0x800e4b <mqtt_pub_count.3574+0x1>
    45cc:	a0 91 4c 0e 	lds	r26, 0x0E4C	; 0x800e4c <mqtt_pub_count.3574+0x2>
    45d0:	b0 91 4d 0e 	lds	r27, 0x0E4D	; 0x800e4d <mqtt_pub_count.3574+0x3>
    45d4:	01 96       	adiw	r24, 0x01	; 1
    45d6:	a1 1d       	adc	r26, r1
    45d8:	b1 1d       	adc	r27, r1
    45da:	80 93 4a 0e 	sts	0x0E4A, r24	; 0x800e4a <mqtt_pub_count.3574>
    45de:	90 93 4b 0e 	sts	0x0E4B, r25	; 0x800e4b <mqtt_pub_count.3574+0x1>
    45e2:	a0 93 4c 0e 	sts	0x0E4C, r26	; 0x800e4c <mqtt_pub_count.3574+0x2>
    45e6:	b0 93 4d 0e 	sts	0x0E4D, r27	; 0x800e4d <mqtt_pub_count.3574+0x3>
    45ea:	bf 93       	push	r27
    45ec:	af 93       	push	r26
    45ee:	9f 93       	push	r25
    45f0:	8f 93       	push	r24
    45f2:	80 ed       	ldi	r24, 0xD0	; 208
    45f4:	93 e0       	ldi	r25, 0x03	; 3
    45f6:	9f 93       	push	r25
    45f8:	8f 93       	push	r24
    45fa:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
	MQTTMessage pubMessage;
	pubMessage.qos = QOS0;
    45fe:	19 82       	std	Y+1, r1	; 0x01
	pubMessage.id = mes_id++;
    4600:	80 91 71 26 	lds	r24, 0x2671	; 0x802671 <mes_id>
    4604:	90 91 72 26 	lds	r25, 0x2672	; 0x802672 <mes_id+0x1>
    4608:	9c 01       	movw	r18, r24
    460a:	2f 5f       	subi	r18, 0xFF	; 255
    460c:	3f 4f       	sbci	r19, 0xFF	; 255
    460e:	30 93 72 26 	sts	0x2672, r19	; 0x802672 <mes_id+0x1>
    4612:	20 93 71 26 	sts	0x2671, r18	; 0x802671 <mes_id>
    4616:	9d 83       	std	Y+5, r25	; 0x05
    4618:	8c 83       	std	Y+4, r24	; 0x04
	pubMessage.payloadlen = (size_t)mqtt_msg_len;
    461a:	b9 86       	std	Y+9, r11	; 0x09
    461c:	a8 86       	std	Y+8, r10	; 0x08
	pubMessage.payload = mqtt_msg;
    461e:	df 82       	std	Y+7, r13	; 0x07
    4620:	ce 82       	std	Y+6, r12	; 0x06
	
	
	mqtt_rc = MQTTPublish(mqtt_client, mqtt_topic , &pubMessage);
    4622:	ae 01       	movw	r20, r28
    4624:	4f 5f       	subi	r20, 0xFF	; 255
    4626:	5f 4f       	sbci	r21, 0xFF	; 255
    4628:	b7 01       	movw	r22, r14
    462a:	c8 01       	movw	r24, r16
    462c:	0e 94 4d 14 	call	0x289a	; 0x289a <MQTTPublish>
	//Analize MQTT publish result (for MQTT failover mode)
	if (mqtt_rc == SUCCESSS)
    4630:	0f 90       	pop	r0
    4632:	0f 90       	pop	r0
    4634:	0f 90       	pop	r0
    4636:	0f 90       	pop	r0
    4638:	0f 90       	pop	r0
    463a:	0f 90       	pop	r0
    463c:	67 2b       	or	r22, r23
    463e:	68 2b       	or	r22, r24
    4640:	69 2b       	or	r22, r25
    4642:	59 f4       	brne	.+22     	; 0x465a <mqtt_pub+0xc4>
	{
		mqtt_err_cnt  = 0;
    4644:	10 92 49 0e 	sts	0x0E49, r1	; 0x800e49 <mqtt_err_cnt.3575>
		PRINTF(" - OK\r\n");
    4648:	88 ec       	ldi	r24, 0xC8	; 200
    464a:	93 e0       	ldi	r25, 0x03	; 3
    464c:	9f 93       	push	r25
    464e:	8f 93       	push	r24
    4650:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
    4654:	0f 90       	pop	r0
    4656:	0f 90       	pop	r0
    4658:	19 c0       	rjmp	.+50     	; 0x468c <mqtt_pub+0xf6>
	}
	else
	{
		PRINTF(" - ERROR\r\n");
    465a:	8d eb       	ldi	r24, 0xBD	; 189
    465c:	93 e0       	ldi	r25, 0x03	; 3
    465e:	9f 93       	push	r25
    4660:	8f 93       	push	r24
    4662:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
		//Reboot device after 20 continuous errors (~ 20sec)
		if(mqtt_err_cnt++ > 20)
    4666:	80 91 49 0e 	lds	r24, 0x0E49	; 0x800e49 <mqtt_err_cnt.3575>
    466a:	91 e0       	ldi	r25, 0x01	; 1
    466c:	98 0f       	add	r25, r24
    466e:	90 93 49 0e 	sts	0x0E49, r25	; 0x800e49 <mqtt_err_cnt.3575>
    4672:	0f 90       	pop	r0
    4674:	0f 90       	pop	r0
    4676:	85 31       	cpi	r24, 0x15	; 21
    4678:	48 f0       	brcs	.+18     	; 0x468c <mqtt_pub+0xf6>
		{
			PRINTF("Connection with MQTT Broker was lost!!\r\nReboot the board..\r\n");
    467a:	80 e8       	ldi	r24, 0x80	; 128
    467c:	93 e0       	ldi	r25, 0x03	; 3
    467e:	9f 93       	push	r25
    4680:	8f 93       	push	r24
    4682:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
    4686:	0f 90       	pop	r0
    4688:	0f 90       	pop	r0
    468a:	ff cf       	rjmp	.-2      	; 0x468a <mqtt_pub+0xf4>
			while(1);
		}
	}
}
    468c:	29 96       	adiw	r28, 0x09	; 9
    468e:	0f b6       	in	r0, 0x3f	; 63
    4690:	f8 94       	cli
    4692:	de bf       	out	0x3e, r29	; 62
    4694:	0f be       	out	0x3f, r0	; 63
    4696:	cd bf       	out	0x3d, r28	; 61
    4698:	df 91       	pop	r29
    469a:	cf 91       	pop	r28
    469c:	1f 91       	pop	r17
    469e:	0f 91       	pop	r16
    46a0:	ff 90       	pop	r15
    46a2:	ef 90       	pop	r14
    46a4:	df 90       	pop	r13
    46a6:	cf 90       	pop	r12
    46a8:	bf 90       	pop	r11
    46aa:	af 90       	pop	r10
    46ac:	08 95       	ret

000046ae <__vector_21>:
}


//******************* MILLIS ENGINE: BEGIN
ISR (TIMER0_COMPA_vect)
{
    46ae:	1f 92       	push	r1
    46b0:	0f 92       	push	r0
    46b2:	0f b6       	in	r0, 0x3f	; 63
    46b4:	0f 92       	push	r0
    46b6:	11 24       	eor	r1, r1
    46b8:	8f 93       	push	r24
    46ba:	9f 93       	push	r25
    46bc:	af 93       	push	r26
    46be:	bf 93       	push	r27
	// Compare match Timer0
	// Here every 1ms
	_millis++; // INC millis tick
    46c0:	80 91 6d 24 	lds	r24, 0x246D	; 0x80246d <_millis>
    46c4:	90 91 6e 24 	lds	r25, 0x246E	; 0x80246e <_millis+0x1>
    46c8:	a0 91 6f 24 	lds	r26, 0x246F	; 0x80246f <_millis+0x2>
    46cc:	b0 91 70 24 	lds	r27, 0x2470	; 0x802470 <_millis+0x3>
    46d0:	01 96       	adiw	r24, 0x01	; 1
    46d2:	a1 1d       	adc	r26, r1
    46d4:	b1 1d       	adc	r27, r1
    46d6:	80 93 6d 24 	sts	0x246D, r24	; 0x80246d <_millis>
    46da:	90 93 6e 24 	sts	0x246E, r25	; 0x80246e <_millis+0x1>
    46de:	a0 93 6f 24 	sts	0x246F, r26	; 0x80246f <_millis+0x2>
    46e2:	b0 93 70 24 	sts	0x2470, r27	; 0x802470 <_millis+0x3>
}
    46e6:	bf 91       	pop	r27
    46e8:	af 91       	pop	r26
    46ea:	9f 91       	pop	r25
    46ec:	8f 91       	pop	r24
    46ee:	0f 90       	pop	r0
    46f0:	0f be       	out	0x3f, r0	; 63
    46f2:	0f 90       	pop	r0
    46f4:	1f 90       	pop	r1
    46f6:	18 95       	reti

000046f8 <millis>:

unsigned long millis(void)
{
	unsigned long i;
	cli();
    46f8:	f8 94       	cli
	// Atomic tick reading
	i = _millis;
    46fa:	60 91 6d 24 	lds	r22, 0x246D	; 0x80246d <_millis>
    46fe:	70 91 6e 24 	lds	r23, 0x246E	; 0x80246e <_millis+0x1>
    4702:	80 91 6f 24 	lds	r24, 0x246F	; 0x80246f <_millis+0x2>
    4706:	90 91 70 24 	lds	r25, 0x2470	; 0x802470 <_millis+0x3>
	sei();
    470a:	78 94       	sei
	return i;
}
    470c:	08 95       	ret

0000470e <index_mask>:
char digital1[8][50] = {"Pritomnost osob", "Detekcia pohybu", "Mag kontakt", "Pritomnost alko", "Detekcia ohna", "Detekcia koure", "Priblizenie", "Zaplaveni"};

// set index based on mask
int index_mask(int mask){
	int index = 0;
	switch(mask){
    470e:	80 31       	cpi	r24, 0x10	; 16
    4710:	91 05       	cpc	r25, r1
    4712:	d9 f0       	breq	.+54     	; 0x474a <index_mask+0x3c>
    4714:	4c f4       	brge	.+18     	; 0x4728 <index_mask+0x1a>
    4716:	84 30       	cpi	r24, 0x04	; 4
    4718:	91 05       	cpc	r25, r1
    471a:	89 f0       	breq	.+34     	; 0x473e <index_mask+0x30>
    471c:	88 30       	cpi	r24, 0x08	; 8
    471e:	91 05       	cpc	r25, r1
    4720:	89 f0       	breq	.+34     	; 0x4744 <index_mask+0x36>
    4722:	02 97       	sbiw	r24, 0x02	; 2
    4724:	49 f4       	brne	.+18     	; 0x4738 <index_mask+0x2a>
    4726:	1d c0       	rjmp	.+58     	; 0x4762 <index_mask+0x54>
    4728:	80 34       	cpi	r24, 0x40	; 64
    472a:	91 05       	cpc	r25, r1
    472c:	a1 f0       	breq	.+40     	; 0x4756 <index_mask+0x48>
    472e:	80 38       	cpi	r24, 0x80	; 128
    4730:	91 05       	cpc	r25, r1
    4732:	a1 f0       	breq	.+40     	; 0x475c <index_mask+0x4e>
    4734:	80 97       	sbiw	r24, 0x20	; 32
    4736:	61 f0       	breq	.+24     	; 0x4750 <index_mask+0x42>
char analog3[8][50] = {"Vzdialenost", "Mag pole", "Ionizacni zareni", "Koncetrace CO %", "Barva R", "Barva G", "Barva B", "Rezerva"};
char digital1[8][50] = {"Pritomnost osob", "Detekcia pohybu", "Mag kontakt", "Pritomnost alko", "Detekcia ohna", "Detekcia koure", "Priblizenie", "Zaplaveni"};

// set index based on mask
int index_mask(int mask){
	int index = 0;
    4738:	80 e0       	ldi	r24, 0x00	; 0
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	08 95       	ret
			break;
		case 2:
			index = 1;
			break;
		case 4:
			index = 2;
    473e:	82 e0       	ldi	r24, 0x02	; 2
    4740:	90 e0       	ldi	r25, 0x00	; 0
			break;
    4742:	08 95       	ret
		case 8:
			index = 3;
    4744:	83 e0       	ldi	r24, 0x03	; 3
    4746:	90 e0       	ldi	r25, 0x00	; 0
			break;
    4748:	08 95       	ret
		case 16:
			index = 4;
    474a:	84 e0       	ldi	r24, 0x04	; 4
    474c:	90 e0       	ldi	r25, 0x00	; 0
			break;
    474e:	08 95       	ret
		case 32:
			index = 5;
    4750:	85 e0       	ldi	r24, 0x05	; 5
    4752:	90 e0       	ldi	r25, 0x00	; 0
			break;
    4754:	08 95       	ret
		case 64:
			index = 6;
    4756:	86 e0       	ldi	r24, 0x06	; 6
    4758:	90 e0       	ldi	r25, 0x00	; 0
			break;
    475a:	08 95       	ret
		case 128:
			index = 7;
    475c:	87 e0       	ldi	r24, 0x07	; 7
    475e:	90 e0       	ldi	r25, 0x00	; 0
			break;
    4760:	08 95       	ret
	switch(mask){
		case 1:
			index = 0;
			break;
		case 2:
			index = 1;
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	90 e0       	ldi	r25, 0x00	; 0
			index = 7;
			break;
		
	}
	return index;
}
    4766:	08 95       	ret

00004768 <create_json>:
		vypis_cau = cislo_vypis;
	}
}

static void create_json()
{
    4768:	cf 93       	push	r28
    476a:	df 93       	push	r29
	wdt_reset();
    476c:	a8 95       	wdr
	info.final_json[100] = "\0";
    476e:	89 e9       	ldi	r24, 0x99	; 153
    4770:	9a e0       	ldi	r25, 0x0A	; 10
    4772:	80 93 39 23 	sts	0x2339, r24	; 0x802339 <info+0x64>
	char* json_string = "\0";
	// set sensor based on clusterID and sent data received
	switch(clusterID){
    4776:	80 91 76 27 	lds	r24, 0x2776	; 0x802776 <clusterID>
    477a:	90 91 77 27 	lds	r25, 0x2777	; 0x802777 <clusterID+0x1>
    477e:	84 30       	cpi	r24, 0x04	; 4
    4780:	91 05       	cpc	r25, r1
    4782:	09 f4       	brne	.+2      	; 0x4786 <create_json+0x1e>
    4784:	3e c0       	rjmp	.+124    	; 0x4802 <create_json+0x9a>
    4786:	58 f4       	brcc	.+22     	; 0x479e <create_json+0x36>
    4788:	81 30       	cpi	r24, 0x01	; 1
    478a:	91 05       	cpc	r25, r1
    478c:	b1 f0       	breq	.+44     	; 0x47ba <create_json+0x52>
    478e:	08 f4       	brcc	.+2      	; 0x4792 <create_json+0x2a>
    4790:	80 c0       	rjmp	.+256    	; 0x4892 <create_json+0x12a>
    4792:	82 30       	cpi	r24, 0x02	; 2
    4794:	91 05       	cpc	r25, r1
    4796:	e9 f0       	breq	.+58     	; 0x47d2 <create_json+0x6a>
    4798:	03 97       	sbiw	r24, 0x03	; 3
    479a:	39 f1       	breq	.+78     	; 0x47ea <create_json+0x82>
    479c:	86 c0       	rjmp	.+268    	; 0x48aa <create_json+0x142>
    479e:	86 30       	cpi	r24, 0x06	; 6
    47a0:	91 05       	cpc	r25, r1
    47a2:	09 f4       	brne	.+2      	; 0x47a6 <create_json+0x3e>
    47a4:	49 c0       	rjmp	.+146    	; 0x4838 <create_json+0xd0>
    47a6:	c8 f1       	brcs	.+114    	; 0x481a <create_json+0xb2>
    47a8:	87 30       	cpi	r24, 0x07	; 7
    47aa:	91 05       	cpc	r25, r1
    47ac:	09 f4       	brne	.+2      	; 0x47b0 <create_json+0x48>
    47ae:	53 c0       	rjmp	.+166    	; 0x4856 <create_json+0xee>
    47b0:	81 38       	cpi	r24, 0x81	; 129
    47b2:	91 05       	cpc	r25, r1
    47b4:	09 f4       	brne	.+2      	; 0x47b8 <create_json+0x50>
    47b6:	5e c0       	rjmp	.+188    	; 0x4874 <create_json+0x10c>
    47b8:	78 c0       	rjmp	.+240    	; 0x48aa <create_json+0x142>
		case 1:
			json_string = meteorologicke[index_mask(buffer_mask)];
    47ba:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <buffer_mask>
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	a6 df       	rcall	.-180    	; 0x470e <index_mask>
    47c2:	88 0f       	add	r24, r24
    47c4:	99 1f       	adc	r25, r25
    47c6:	fc 01       	movw	r30, r24
    47c8:	e1 57       	subi	r30, 0x71	; 113
    47ca:	f6 4f       	sbci	r31, 0xF6	; 246
    47cc:	c0 81       	ld	r28, Z
    47ce:	d1 81       	ldd	r29, Z+1	; 0x01
			break;
    47d0:	6e c0       	rjmp	.+220    	; 0x48ae <create_json+0x146>
		case 2:
			json_string = analog2[index_mask(buffer_mask)];
    47d2:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <buffer_mask>
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	9a df       	rcall	.-204    	; 0x470e <index_mask>
    47da:	88 0f       	add	r24, r24
    47dc:	99 1f       	adc	r25, r25
    47de:	fc 01       	movw	r30, r24
    47e0:	e5 5d       	subi	r30, 0xD5	; 213
    47e2:	f6 4f       	sbci	r31, 0xF6	; 246
    47e4:	c0 81       	ld	r28, Z
    47e6:	d1 81       	ldd	r29, Z+1	; 0x01
			break;
    47e8:	62 c0       	rjmp	.+196    	; 0x48ae <create_json+0x146>
		case 3:
			json_string = zdravotni[index_mask(buffer_mask)];
    47ea:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <buffer_mask>
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	8e df       	rcall	.-228    	; 0x470e <index_mask>
    47f2:	88 0f       	add	r24, r24
    47f4:	99 1f       	adc	r25, r25
    47f6:	fc 01       	movw	r30, r24
    47f8:	e9 53       	subi	r30, 0x39	; 57
    47fa:	f7 4f       	sbci	r31, 0xF7	; 247
    47fc:	c0 81       	ld	r28, Z
    47fe:	d1 81       	ldd	r29, Z+1	; 0x01
			break;
    4800:	56 c0       	rjmp	.+172    	; 0x48ae <create_json+0x146>
		case 4:
			json_string = analog_2[index_mask(buffer_mask)];
    4802:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <buffer_mask>
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	82 df       	rcall	.-252    	; 0x470e <index_mask>
    480a:	88 0f       	add	r24, r24
    480c:	99 1f       	adc	r25, r25
    480e:	fc 01       	movw	r30, r24
    4810:	ed 59       	subi	r30, 0x9D	; 157
    4812:	f7 4f       	sbci	r31, 0xF7	; 247
    4814:	c0 81       	ld	r28, Z
    4816:	d1 81       	ldd	r29, Z+1	; 0x01
			break;
		case 5:
			json_string = analog3[index_mask(buffer_mask)];
    4818:	4a c0       	rjmp	.+148    	; 0x48ae <create_json+0x146>
    481a:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <buffer_mask>
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	76 df       	rcall	.-276    	; 0x470e <index_mask>
    4822:	22 e3       	ldi	r18, 0x32	; 50
    4824:	ac 01       	movw	r20, r24
    4826:	24 9f       	mul	r18, r20
    4828:	c0 01       	movw	r24, r0
    482a:	25 9f       	mul	r18, r21
    482c:	90 0d       	add	r25, r0
    482e:	11 24       	eor	r1, r1
    4830:	ec 01       	movw	r28, r24
    4832:	cd 54       	subi	r28, 0x4D	; 77
			break;
    4834:	dc 4f       	sbci	r29, 0xFC	; 252
		case 6:
			json_string = active[index_mask(buffer_mask)];
    4836:	3b c0       	rjmp	.+118    	; 0x48ae <create_json+0x146>
    4838:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <buffer_mask>
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	67 df       	rcall	.-306    	; 0x470e <index_mask>
    4840:	22 e3       	ldi	r18, 0x32	; 50
    4842:	ac 01       	movw	r20, r24
    4844:	24 9f       	mul	r18, r20
    4846:	c0 01       	movw	r24, r0
    4848:	25 9f       	mul	r18, r21
    484a:	90 0d       	add	r25, r0
    484c:	11 24       	eor	r1, r1
    484e:	ec 01       	movw	r28, r24
    4850:	cd 5b       	subi	r28, 0xBD	; 189
			break;
    4852:	da 4f       	sbci	r29, 0xFA	; 250
		case 7:
			json_string = pasive[index_mask(buffer_mask)];
    4854:	2c c0       	rjmp	.+88     	; 0x48ae <create_json+0x146>
    4856:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <buffer_mask>
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	58 df       	rcall	.-336    	; 0x470e <index_mask>
    485e:	22 e3       	ldi	r18, 0x32	; 50
    4860:	ac 01       	movw	r20, r24
    4862:	24 9f       	mul	r18, r20
    4864:	c0 01       	movw	r24, r0
    4866:	25 9f       	mul	r18, r21
    4868:	90 0d       	add	r25, r0
    486a:	11 24       	eor	r1, r1
    486c:	ec 01       	movw	r28, r24
    486e:	cd 52       	subi	r28, 0x2D	; 45
			break;
    4870:	d9 4f       	sbci	r29, 0xF9	; 249
		case 129:
			json_string = digital1[index_mask(buffer_mask)];
    4872:	1d c0       	rjmp	.+58     	; 0x48ae <create_json+0x146>
    4874:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <buffer_mask>
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	49 df       	rcall	.-366    	; 0x470e <index_mask>
    487c:	22 e3       	ldi	r18, 0x32	; 50
    487e:	ac 01       	movw	r20, r24
    4880:	24 9f       	mul	r18, r20
    4882:	c0 01       	movw	r24, r0
    4884:	25 9f       	mul	r18, r21
    4886:	90 0d       	add	r25, r0
    4888:	11 24       	eor	r1, r1
    488a:	ec 01       	movw	r28, r24
    488c:	cd 5d       	subi	r28, 0xDD	; 221
			break;
    488e:	dd 4f       	sbci	r29, 0xFD	; 253
// 			break;
// 		case 131:
// 			json_string = meteorologicke[index_mask(buffer_mask)];
// 			break;
		case 0:
			json_string = meteorologicke[index_mask(buffer_mask)];
    4890:	0e c0       	rjmp	.+28     	; 0x48ae <create_json+0x146>
    4892:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <buffer_mask>
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	3a df       	rcall	.-396    	; 0x470e <index_mask>
    489a:	88 0f       	add	r24, r24
    489c:	99 1f       	adc	r25, r25
    489e:	fc 01       	movw	r30, r24
    48a0:	e1 57       	subi	r30, 0x71	; 113
    48a2:	f6 4f       	sbci	r31, 0xF6	; 246
    48a4:	c0 81       	ld	r28, Z
    48a6:	d1 81       	ldd	r29, Z+1	; 0x01
			break;
    48a8:	02 c0       	rjmp	.+4      	; 0x48ae <create_json+0x146>

static void create_json()
{
	wdt_reset();
	info.final_json[100] = "\0";
	char* json_string = "\0";
    48aa:	c9 e9       	ldi	r28, 0x99	; 153
    48ac:	da e0       	ldi	r29, 0x0A	; 10
		case 0:
			json_string = meteorologicke[index_mask(buffer_mask)];
			break;
	}
	// setting topic based on received data
	sprintf(info.topic,"/ssy/test/%s",json_string);
    48ae:	df 93       	push	r29
    48b0:	cf 93       	push	r28
    48b2:	89 e1       	ldi	r24, 0x19	; 25
    48b4:	9b e0       	ldi	r25, 0x0B	; 11
    48b6:	9f 93       	push	r25
    48b8:	8f 93       	push	r24
    48ba:	89 e3       	ldi	r24, 0x39	; 57
    48bc:	93 e2       	ldi	r25, 0x23	; 35
    48be:	9f 93       	push	r25
    48c0:	8f 93       	push	r24
    48c2:	0e 94 1c 39 	call	0x7238	; 0x7238 <sprintf>
	// setting info abount json file -- data (final_json) and length (len_json)
	info.len_json = sprintf(info.final_json, "{\"%s\":%d}",json_string,buffer_data);
    48c6:	80 91 75 26 	lds	r24, 0x2675	; 0x802675 <buffer_data+0x1>
    48ca:	8f 93       	push	r24
    48cc:	80 91 74 26 	lds	r24, 0x2674	; 0x802674 <buffer_data>
    48d0:	8f 93       	push	r24
    48d2:	df 93       	push	r29
    48d4:	cf 93       	push	r28
    48d6:	86 e2       	ldi	r24, 0x26	; 38
    48d8:	9b e0       	ldi	r25, 0x0B	; 11
    48da:	9f 93       	push	r25
    48dc:	8f 93       	push	r24
    48de:	85 ed       	ldi	r24, 0xD5	; 213
    48e0:	92 e2       	ldi	r25, 0x22	; 34
    48e2:	9f 93       	push	r25
    48e4:	8f 93       	push	r24
    48e6:	0e 94 1c 39 	call	0x7238	; 0x7238 <sprintf>
    48ea:	90 93 6c 23 	sts	0x236C, r25	; 0x80236c <info+0x97>
    48ee:	80 93 6b 23 	sts	0x236B, r24	; 0x80236b <info+0x96>
	
	
}
    48f2:	8d b7       	in	r24, 0x3d	; 61
    48f4:	9e b7       	in	r25, 0x3e	; 62
    48f6:	0e 96       	adiw	r24, 0x0e	; 14
    48f8:	0f b6       	in	r0, 0x3f	; 63
    48fa:	f8 94       	cli
    48fc:	9e bf       	out	0x3e, r25	; 62
    48fe:	0f be       	out	0x3f, r0	; 63
    4900:	8d bf       	out	0x3d, r24	; 61
    4902:	df 91       	pop	r29
    4904:	cf 91       	pop	r28
    4906:	08 95       	ret

00004908 <executeCommand>:
	}
	return index;
}

void executeCommand(char *command)
{
    4908:	cf 93       	push	r28
    490a:	df 93       	push	r29
    490c:	00 d0       	rcall	.+0      	; 0x490e <executeCommand+0x6>
    490e:	00 d0       	rcall	.+0      	; 0x4910 <executeCommand+0x8>
    4910:	cd b7       	in	r28, 0x3d	; 61
    4912:	de b7       	in	r29, 0x3e	; 62
	jsonNode_t *root = 0;
    4914:	1a 82       	std	Y+2, r1	; 0x02
    4916:	19 82       	std	Y+1, r1	; 0x01
	jsonDecoderStatus_t ret;

	int cislo_timer;
	int cislo_vypis;

	ret = JSON_DECODER_fromString(command);
    4918:	84 da       	rcall	.-2808   	; 0x3e22 <JSON_DECODER_fromString>
	if(JSON_DECODER_OK != ret)
    491a:	88 23       	and	r24, r24
    491c:	21 f0       	breq	.+8      	; 0x4926 <executeCommand+0x1e>
	{
		printf("Invalid JSON string.\r\n");
    491e:	80 e3       	ldi	r24, 0x30	; 48
    4920:	9b e0       	ldi	r25, 0x0B	; 11
    4922:	0e 94 ec 38 	call	0x71d8	; 0x71d8 <puts>
	}

	JSON_DECODER_getRoot(&root);
    4926:	ce 01       	movw	r24, r28
    4928:	01 96       	adiw	r24, 0x01	; 1
    492a:	50 da       	rcall	.-2912   	; 0x3dcc <JSON_DECODER_getRoot>
	// setting variables based on configuration info
	ret = JSON_DECODER_getNumber(root, "mqtt_timer", &cislo_timer);
    492c:	ae 01       	movw	r20, r28
    492e:	4d 5f       	subi	r20, 0xFD	; 253
    4930:	5f 4f       	sbci	r21, 0xFF	; 255
    4932:	66 e4       	ldi	r22, 0x46	; 70
    4934:	7b e0       	ldi	r23, 0x0B	; 11
    4936:	89 81       	ldd	r24, Y+1	; 0x01
    4938:	9a 81       	ldd	r25, Y+2	; 0x02
    493a:	4f da       	rcall	.-2914   	; 0x3dda <JSON_DECODER_getNumber>
	if(JSON_DECODER_OK == ret)
    493c:	81 11       	cpse	r24, r1
    493e:	06 c0       	rjmp	.+12     	; 0x494c <executeCommand+0x44>
	{
		mqtt_timer = cislo_timer;
    4940:	8b 81       	ldd	r24, Y+3	; 0x03
    4942:	9c 81       	ldd	r25, Y+4	; 0x04
    4944:	90 93 02 0a 	sts	0x0A02, r25	; 0x800a02 <mqtt_timer+0x1>
    4948:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <mqtt_timer>
	}

	ret = JSON_DECODER_getNumber(root, "vypis_cau", &cislo_vypis);
    494c:	ae 01       	movw	r20, r28
    494e:	4b 5f       	subi	r20, 0xFB	; 251
    4950:	5f 4f       	sbci	r21, 0xFF	; 255
    4952:	61 e5       	ldi	r22, 0x51	; 81
    4954:	7b e0       	ldi	r23, 0x0B	; 11
    4956:	89 81       	ldd	r24, Y+1	; 0x01
    4958:	9a 81       	ldd	r25, Y+2	; 0x02
    495a:	3f da       	rcall	.-2946   	; 0x3dda <JSON_DECODER_getNumber>
	if(JSON_DECODER_OK == ret)
    495c:	81 11       	cpse	r24, r1
    495e:	06 c0       	rjmp	.+12     	; 0x496c <executeCommand+0x64>
	{
		vypis_cau = cislo_vypis;
    4960:	8d 81       	ldd	r24, Y+5	; 0x05
    4962:	9e 81       	ldd	r25, Y+6	; 0x06
    4964:	90 93 4f 0e 	sts	0x0E4F, r25	; 0x800e4f <vypis_cau+0x1>
    4968:	80 93 4e 0e 	sts	0x0E4E, r24	; 0x800e4e <vypis_cau>
	}
}
    496c:	26 96       	adiw	r28, 0x06	; 6
    496e:	0f b6       	in	r0, 0x3f	; 63
    4970:	f8 94       	cli
    4972:	de bf       	out	0x3e, r29	; 62
    4974:	0f be       	out	0x3f, r0	; 63
    4976:	cd bf       	out	0x3d, r28	; 61
    4978:	df 91       	pop	r29
    497a:	cf 91       	pop	r28
    497c:	08 95       	ret

0000497e <IO_LIBRARY_Init>:
	for (uint16_t var = 0; var < len; var++) {
		SPI_WRITE(*buf++);
	}
}

void IO_LIBRARY_Init(void) {
    497e:	cf 93       	push	r28
    4980:	df 93       	push	r29
    4982:	cd b7       	in	r28, 0x3d	; 61
    4984:	de b7       	in	r29, 0x3e	; 62
    4986:	28 97       	sbiw	r28, 0x08	; 8
    4988:	0f b6       	in	r0, 0x3f	; 63
    498a:	f8 94       	cli
    498c:	de bf       	out	0x3e, r29	; 62
    498e:	0f be       	out	0x3f, r0	; 63
    4990:	cd bf       	out	0x3d, r28	; 61
	uint8_t bufSize[] = {2, 2, 2, 2, 2, 2, 2, 2};
    4992:	88 e0       	ldi	r24, 0x08	; 8
    4994:	eb e9       	ldi	r30, 0x9B	; 155
    4996:	fa e0       	ldi	r31, 0x0A	; 10
    4998:	de 01       	movw	r26, r28
    499a:	11 96       	adiw	r26, 0x01	; 1
    499c:	01 90       	ld	r0, Z+
    499e:	0d 92       	st	X+, r0
    49a0:	8a 95       	dec	r24
    49a2:	e1 f7       	brne	.-8      	; 0x499c <IO_LIBRARY_Init+0x1e>

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
    49a4:	60 e2       	ldi	r22, 0x20	; 32
    49a6:	72 e2       	ldi	r23, 0x22	; 34
    49a8:	8c e1       	ldi	r24, 0x1C	; 28
    49aa:	92 e2       	ldi	r25, 0x22	; 34
    49ac:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
    49b0:	6a e2       	ldi	r22, 0x2A	; 42
    49b2:	72 e2       	ldi	r23, 0x22	; 34
    49b4:	84 e2       	ldi	r24, 0x24	; 36
    49b6:	92 e2       	ldi	r25, 0x22	; 34
    49b8:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(spi_rb_burst, spi_wb_burst);
    49bc:	60 e4       	ldi	r22, 0x40	; 64
    49be:	72 e2       	ldi	r23, 0x22	; 34
    49c0:	8f e2       	ldi	r24, 0x2F	; 47
    49c2:	92 e2       	ldi	r25, 0x22	; 34
    49c4:	0e 94 96 0a 	call	0x152c	; 0x152c <reg_wizchip_spiburst_cbfunc>

	wizchip_init(bufSize, bufSize);
    49c8:	be 01       	movw	r22, r28
    49ca:	6f 5f       	subi	r22, 0xFF	; 255
    49cc:	7f 4f       	sbci	r23, 0xFF	; 255
    49ce:	cb 01       	movw	r24, r22
    49d0:	0e 94 1f 0b 	call	0x163e	; 0x163e <wizchip_init>
	wizchip_setnetinfo(&netInfo);
    49d4:	83 e0       	ldi	r24, 0x03	; 3
    49d6:	9a e0       	ldi	r25, 0x0A	; 10
    49d8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <wizchip_setnetinfo>
	//wizchip_setinterruptmask(IK_SOCK_0);
}
    49dc:	28 96       	adiw	r28, 0x08	; 8
    49de:	0f b6       	in	r0, 0x3f	; 63
    49e0:	f8 94       	cli
    49e2:	de bf       	out	0x3e, r29	; 62
    49e4:	0f be       	out	0x3f, r0	; 63
    49e6:	cd bf       	out	0x3d, r28	; 61
    49e8:	df 91       	pop	r29
    49ea:	cf 91       	pop	r28
    49ec:	08 95       	ret

000049ee <timer0_init>:
	TCCR0 = (1<<CS02)|(1<<WGM01); //TIMER0 SET-UP: CTC MODE & PS 1:64
	OCR0 = 249; // 1ms reach for clear (16mz:64=>250kHz:250-=>1kHz)
	TIMSK |= 1<<OCIE0;	 //IRQ on TIMER0 output compare
	 */
	//For M664p
	cli();
    49ee:	f8 94       	cli
	TCCR0A = 0; TCCR0B = 0; TIMSK0 =  0;
    49f0:	14 bc       	out	0x24, r1	; 36
    49f2:	15 bc       	out	0x25, r1	; 37
    49f4:	ee e6       	ldi	r30, 0x6E	; 110
    49f6:	f0 e0       	ldi	r31, 0x00	; 0
    49f8:	10 82       	st	Z, r1
	
	TCCR0A = (1<<WGM01); //TIMER0 SET-UP: CTC MODE
    49fa:	82 e0       	ldi	r24, 0x02	; 2
    49fc:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00); // PS 1:64
    49fe:	83 e0       	ldi	r24, 0x03	; 3
    4a00:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249; // 1ms reach for clear (16mz:64=>250kHz:250-=>1kHz)
    4a02:	89 ef       	ldi	r24, 0xF9	; 249
    4a04:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= 1<<OCIE0A;	 //IRQ on TIMER0 output compareA
    4a06:	80 81       	ld	r24, Z
    4a08:	82 60       	ori	r24, 0x02	; 2
    4a0a:	80 83       	st	Z, r24
	sei();
    4a0c:	78 94       	sei
    4a0e:	08 95       	ret

00004a10 <avr_init>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    4a10:	99 e2       	ldi	r25, 0x29	; 41
    4a12:	88 e1       	ldi	r24, 0x18	; 24
    4a14:	0f b6       	in	r0, 0x3f	; 63
    4a16:	f8 94       	cli
    4a18:	a8 95       	wdr
    4a1a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    4a1e:	0f be       	out	0x3f, r0	; 63
    4a20:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
static void avr_init(void)
{
	// Initialize device here.
	// WatchDog INIT
	wdt_enable(WDTO_8S);  // set up wdt reset interval 2 second
	wdt_reset(); // wdt reset ~ every <2000ms
    4a24:	a8 95       	wdr

	timer0_init();// Timer0 millis engine init
    4a26:	e3 df       	rcall	.-58     	; 0x49ee <timer0_init>
	 *  uart1_BAUD_SELECT() (normal speed mode )
	 *  or
	 *  uart1_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
	 */

	UART_init( UART_BAUD_RATE );
    4a28:	80 e0       	ldi	r24, 0x00	; 0
    4a2a:	96 e9       	ldi	r25, 0x96	; 150
    4a2c:	0e 94 cb 32 	call	0x6596	; 0x6596 <UART_init>
	// Define Output/Input Stream
	stdout = &uart_str;
    4a30:	83 ef       	ldi	r24, 0xF3	; 243
    4a32:	99 e0       	ldi	r25, 0x09	; 9
    4a34:	90 93 a8 27 	sts	0x27A8, r25	; 0x8027a8 <__iob+0x3>
    4a38:	80 93 a7 27 	sts	0x27A7, r24	; 0x8027a7 <__iob+0x2>
	sei(); //re-enable global interrupts
    4a3c:	78 94       	sei
    4a3e:	08 95       	ret

00004a40 <print_network_information>:

	return;
}

void print_network_information(void)
{
    4a40:	0f 93       	push	r16
    4a42:	1f 93       	push	r17
    4a44:	cf 93       	push	r28
    4a46:	df 93       	push	r29
    4a48:	cd b7       	in	r28, 0x3d	; 61
    4a4a:	de b7       	in	r29, 0x3e	; 62
    4a4c:	6d 97       	sbiw	r28, 0x1d	; 29
    4a4e:	0f b6       	in	r0, 0x3f	; 63
    4a50:	f8 94       	cli
    4a52:	de bf       	out	0x3e, r29	; 62
    4a54:	0f be       	out	0x3f, r0	; 63
    4a56:	cd bf       	out	0x3d, r28	; 61

	uint8_t tmpstr[6] = {0,};
    4a58:	8e 01       	movw	r16, r28
    4a5a:	0f 5f       	subi	r16, 0xFF	; 255
    4a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a5e:	86 e0       	ldi	r24, 0x06	; 6
    4a60:	f8 01       	movw	r30, r16
    4a62:	11 92       	st	Z+, r1
    4a64:	8a 95       	dec	r24
    4a66:	e9 f7       	brne	.-6      	; 0x4a62 <print_network_information+0x22>
	ctlwizchip(CW_GET_ID,(void*)tmpstr); // Get WIZCHIP name
    4a68:	b8 01       	movw	r22, r16
    4a6a:	88 e0       	ldi	r24, 0x08	; 8
    4a6c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <ctlwizchip>
    PRINTF("\r\n=======================================\r\n");
    4a70:	8b ea       	ldi	r24, 0xAB	; 171
    4a72:	92 e0       	ldi	r25, 0x02	; 2
    4a74:	9f 93       	push	r25
    4a76:	8f 93       	push	r24
    4a78:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
    PRINTF(" WIZnet chip:  %s \r\n", tmpstr);
    4a7c:	1f 93       	push	r17
    4a7e:	0f 93       	push	r16
    4a80:	86 e9       	ldi	r24, 0x96	; 150
    4a82:	92 e0       	ldi	r25, 0x02	; 2
    4a84:	9f 93       	push	r25
    4a86:	8f 93       	push	r24
    4a88:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
    PRINTF("=======================================\r\n");
    4a8c:	8c e6       	ldi	r24, 0x6C	; 108
    4a8e:	92 e0       	ldi	r25, 0x02	; 2
    4a90:	9f 93       	push	r25
    4a92:	8f 93       	push	r24
    4a94:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>

	wiz_NetInfo gWIZNETINFO;
	wizchip_getnetinfo(&gWIZNETINFO);
    4a98:	ce 01       	movw	r24, r28
    4a9a:	07 96       	adiw	r24, 0x07	; 7
    4a9c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <wizchip_getnetinfo>
	if (gWIZNETINFO.dhcp == NETINFO_STATIC)
    4aa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4aa2:	0f b6       	in	r0, 0x3f	; 63
    4aa4:	f8 94       	cli
    4aa6:	de bf       	out	0x3e, r29	; 62
    4aa8:	0f be       	out	0x3f, r0	; 63
    4aaa:	cd bf       	out	0x3d, r28	; 61
    4aac:	81 30       	cpi	r24, 0x01	; 1
    4aae:	49 f4       	brne	.+18     	; 0x4ac2 <print_network_information+0x82>
		PRINTF("STATIC IP\r\n");
    4ab0:	80 e6       	ldi	r24, 0x60	; 96
    4ab2:	92 e0       	ldi	r25, 0x02	; 2
    4ab4:	9f 93       	push	r25
    4ab6:	8f 93       	push	r24
    4ab8:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
    4abc:	0f 90       	pop	r0
    4abe:	0f 90       	pop	r0
    4ac0:	08 c0       	rjmp	.+16     	; 0x4ad2 <print_network_information+0x92>
	else
		PRINTF("DHCP IP\r\n");
    4ac2:	86 e5       	ldi	r24, 0x56	; 86
    4ac4:	92 e0       	ldi	r25, 0x02	; 2
    4ac6:	9f 93       	push	r25
    4ac8:	8f 93       	push	r24
    4aca:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
    4ace:	0f 90       	pop	r0
    4ad0:	0f 90       	pop	r0
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
    4ad2:	5c 85       	ldd	r21, Y+12	; 0x0c
    4ad4:	4b 85       	ldd	r20, Y+11	; 0x0b
    4ad6:	3a 85       	ldd	r19, Y+10	; 0x0a
    4ad8:	29 85       	ldd	r18, Y+9	; 0x09
    4ada:	98 85       	ldd	r25, Y+8	; 0x08
    4adc:	8f 81       	ldd	r24, Y+7	; 0x07
    4ade:	1f 92       	push	r1
    4ae0:	5f 93       	push	r21
    4ae2:	1f 92       	push	r1
    4ae4:	4f 93       	push	r20
    4ae6:	1f 92       	push	r1
    4ae8:	3f 93       	push	r19
    4aea:	1f 92       	push	r1
    4aec:	2f 93       	push	r18
    4aee:	1f 92       	push	r1
    4af0:	9f 93       	push	r25
    4af2:	1f 92       	push	r1
    4af4:	8f 93       	push	r24
    4af6:	8b e5       	ldi	r24, 0x5B	; 91
    4af8:	9b e0       	ldi	r25, 0x0B	; 11
    4afa:	9f 93       	push	r25
    4afc:	8f 93       	push	r24
    4afe:	0e 94 b2 38 	call	0x7164	; 0x7164 <printf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
    4b02:	38 89       	ldd	r19, Y+16	; 0x10
    4b04:	2f 85       	ldd	r18, Y+15	; 0x0f
    4b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b0a:	1f 92       	push	r1
    4b0c:	3f 93       	push	r19
    4b0e:	1f 92       	push	r1
    4b10:	2f 93       	push	r18
    4b12:	1f 92       	push	r1
    4b14:	9f 93       	push	r25
    4b16:	1f 92       	push	r1
    4b18:	8f 93       	push	r24
    4b1a:	88 e8       	ldi	r24, 0x88	; 136
    4b1c:	9b e0       	ldi	r25, 0x0B	; 11
    4b1e:	9f 93       	push	r25
    4b20:	8f 93       	push	r24
    4b22:	0e 94 b2 38 	call	0x7164	; 0x7164 <printf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
    4b26:	3c 89       	ldd	r19, Y+20	; 0x14
    4b28:	2b 89       	ldd	r18, Y+19	; 0x13
    4b2a:	9a 89       	ldd	r25, Y+18	; 0x12
    4b2c:	89 89       	ldd	r24, Y+17	; 0x11
    4b2e:	1f 92       	push	r1
    4b30:	3f 93       	push	r19
    4b32:	1f 92       	push	r1
    4b34:	2f 93       	push	r18
    4b36:	1f 92       	push	r1
    4b38:	9f 93       	push	r25
    4b3a:	1f 92       	push	r1
    4b3c:	8f 93       	push	r24
    4b3e:	83 ea       	ldi	r24, 0xA3	; 163
    4b40:	9b e0       	ldi	r25, 0x0B	; 11
    4b42:	9f 93       	push	r25
    4b44:	8f 93       	push	r24
    4b46:	0e 94 b2 38 	call	0x7164	; 0x7164 <printf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
    4b4a:	38 8d       	ldd	r19, Y+24	; 0x18
    4b4c:	2f 89       	ldd	r18, Y+23	; 0x17
    4b4e:	9e 89       	ldd	r25, Y+22	; 0x16
    4b50:	8d 89       	ldd	r24, Y+21	; 0x15
    4b52:	0f b6       	in	r0, 0x3f	; 63
    4b54:	f8 94       	cli
    4b56:	de bf       	out	0x3e, r29	; 62
    4b58:	0f be       	out	0x3f, r0	; 63
    4b5a:	cd bf       	out	0x3d, r28	; 61
    4b5c:	1f 92       	push	r1
    4b5e:	3f 93       	push	r19
    4b60:	1f 92       	push	r1
    4b62:	2f 93       	push	r18
    4b64:	1f 92       	push	r1
    4b66:	9f 93       	push	r25
    4b68:	1f 92       	push	r1
    4b6a:	8f 93       	push	r24
    4b6c:	8e eb       	ldi	r24, 0xBE	; 190
    4b6e:	9b e0       	ldi	r25, 0x0B	; 11
    4b70:	9f 93       	push	r25
    4b72:	8f 93       	push	r24
    4b74:	0e 94 b2 38 	call	0x7164	; 0x7164 <printf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
    4b78:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4b7a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4b7c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4b7e:	89 8d       	ldd	r24, Y+25	; 0x19
    4b80:	1f 92       	push	r1
    4b82:	3f 93       	push	r19
    4b84:	1f 92       	push	r1
    4b86:	2f 93       	push	r18
    4b88:	1f 92       	push	r1
    4b8a:	9f 93       	push	r25
    4b8c:	1f 92       	push	r1
    4b8e:	8f 93       	push	r24
    4b90:	89 ed       	ldi	r24, 0xD9	; 217
    4b92:	9b e0       	ldi	r25, 0x0B	; 11
    4b94:	9f 93       	push	r25
    4b96:	8f 93       	push	r24
    4b98:	0e 94 b2 38 	call	0x7164	; 0x7164 <printf>
}
    4b9c:	0f b6       	in	r0, 0x3f	; 63
    4b9e:	f8 94       	cli
    4ba0:	de bf       	out	0x3e, r29	; 62
    4ba2:	0f be       	out	0x3f, r0	; 63
    4ba4:	cd bf       	out	0x3d, r28	; 61
    4ba6:	6d 96       	adiw	r28, 0x1d	; 29
    4ba8:	0f b6       	in	r0, 0x3f	; 63
    4baa:	f8 94       	cli
    4bac:	de bf       	out	0x3e, r29	; 62
    4bae:	0f be       	out	0x3f, r0	; 63
    4bb0:	cd bf       	out	0x3d, r28	; 61
    4bb2:	df 91       	pop	r29
    4bb4:	cf 91       	pop	r28
    4bb6:	1f 91       	pop	r17
    4bb8:	0f 91       	pop	r16
    4bba:	08 95       	ret

00004bbc <main>:
	//wizchip_setinterruptmask(IK_SOCK_0);
}
//***************** WIZCHIP INIT: END

int main()
{
    4bbc:	cf 93       	push	r28
    4bbe:	df 93       	push	r29
    4bc0:	cd b7       	in	r28, 0x3d	; 61
    4bc2:	de b7       	in	r29, 0x3e	; 62
    4bc4:	ce 5e       	subi	r28, 0xEE	; 238
    4bc6:	d1 09       	sbc	r29, r1
    4bc8:	0f b6       	in	r0, 0x3f	; 63
    4bca:	f8 94       	cli
    4bcc:	de bf       	out	0x3e, r29	; 62
    4bce:	0f be       	out	0x3f, r0	; 63
    4bd0:	cd bf       	out	0x3d, r28	; 61
	
	SYS_Init();
    4bd2:	0e 94 af 31 	call	0x635e	; 0x635e <SYS_Init>
	// INIT MCU
	avr_init();
    4bd6:	1c df       	rcall	.-456    	; 0x4a10 <avr_init>
	spi_init(); //SPI Master, MODE0, 4Mhz(DIV4), CS_PB.3=HIGH - suitable for WIZNET 5x00(1/2/5)
    4bd8:	76 d1       	rcall	.+748    	; 0x4ec6 <spi_init>
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());
    4bda:	15 dc       	rcall	.-2006   	; 0x4406 <freeRam>
    4bdc:	9f 93       	push	r25
    4bde:	8f 93       	push	r24
    4be0:	85 e6       	ldi	r24, 0x65	; 101
    4be2:	93 e0       	ldi	r25, 0x03	; 3
    4be4:	9f 93       	push	r25
    4be6:	8f 93       	push	r24
    4be8:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
    4bec:	0f 90       	pop	r0

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
	while(i--)
    4bee:	0f 90       	pop	r0
    4bf0:	0f 90       	pop	r0
    4bf2:	0f 90       	pop	r0
    4bf4:	83 e0       	ldi	r24, 0x03	; 3
	avr_init();
	spi_init(); //SPI Master, MODE0, 4Mhz(DIV4), CS_PB.3=HIGH - suitable for WIZNET 5x00(1/2/5)
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
    4bf6:	1a c0       	rjmp	.+52     	; 0x4c2c <main+0x70>
	while(i--)
    4bf8:	85 b1       	in	r24, 0x05	; 5
	{
		LED0ON;
    4bfa:	8f 7e       	andi	r24, 0xEF	; 239
    4bfc:	85 b9       	out	0x05, r24	; 5
    4bfe:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4c00:	30 e7       	ldi	r19, 0x70	; 112
    4c02:	82 e0       	ldi	r24, 0x02	; 2
    4c04:	21 50       	subi	r18, 0x01	; 1
    4c06:	30 40       	sbci	r19, 0x00	; 0
    4c08:	80 40       	sbci	r24, 0x00	; 0
    4c0a:	e1 f7       	brne	.-8      	; 0x4c04 <main+0x48>
    4c0c:	00 c0       	rjmp	.+0      	; 0x4c0e <main+0x52>
    4c0e:	00 00       	nop
    4c10:	85 b1       	in	r24, 0x05	; 5
		_delay_ms(100);
		LED0OFF;
    4c12:	80 61       	ori	r24, 0x10	; 16
    4c14:	85 b9       	out	0x05, r24	; 5
    4c16:	2f ef       	ldi	r18, 0xFF	; 255
    4c18:	33 ec       	ldi	r19, 0xC3	; 195
    4c1a:	89 e0       	ldi	r24, 0x09	; 9
    4c1c:	21 50       	subi	r18, 0x01	; 1
    4c1e:	30 40       	sbci	r19, 0x00	; 0
    4c20:	80 40       	sbci	r24, 0x00	; 0
    4c22:	e1 f7       	brne	.-8      	; 0x4c1c <main+0x60>
    4c24:	00 c0       	rjmp	.+0      	; 0x4c26 <main+0x6a>
    4c26:	00 00       	nop
    4c28:	a8 95       	wdr
		_delay_ms(400);
		wdt_reset();
    4c2a:	89 2f       	mov	r24, r25
	spi_init(); //SPI Master, MODE0, 4Mhz(DIV4), CS_PB.3=HIGH - suitable for WIZNET 5x00(1/2/5)
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
	while(i--)
    4c2c:	9f ef       	ldi	r25, 0xFF	; 255
    4c2e:	98 0f       	add	r25, r24
    4c30:	81 11       	cpse	r24, r1
		_delay_ms(400);
		wdt_reset();
	}

	//Wizchip WIZ5500 Ethernet initialize
	IO_LIBRARY_Init(); //After that ping must working
    4c32:	e2 cf       	rjmp	.-60     	; 0x4bf8 <main+0x3c>
    4c34:	a4 de       	rcall	.-696    	; 0x497e <IO_LIBRARY_Init>
	print_network_information();
    4c36:	04 df       	rcall	.-504    	; 0x4a40 <print_network_information>
    4c38:	85 e0       	ldi	r24, 0x05	; 5
	//Find MQTT broker and connect with it
	uint8_t mqtt_buf[100];
	int32_t mqtt_rc = 0;
	Network mqtt_network;
	Client mqtt_client;
	mqtt_network.my_socket = SOCK_MQTT;
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	a0 e0       	ldi	r26, 0x00	; 0
    4c3e:	b0 e0       	ldi	r27, 0x00	; 0
    4c40:	a9 96       	adiw	r28, 0x29	; 41
    4c42:	8c af       	std	Y+60, r24	; 0x3c
    4c44:	9d af       	std	Y+61, r25	; 0x3d
    4c46:	ae af       	std	Y+62, r26	; 0x3e
    4c48:	bf af       	std	Y+63, r27	; 0x3f
    4c4a:	a9 97       	sbiw	r28, 0x29	; 41
    4c4c:	ea e1       	ldi	r30, 0x1A	; 26
	
	PRINTF(">>Trying connect to MQTT broker: %d.%d.%d.%d ..\r\n", mqtt_target[0], mqtt_target[1], mqtt_target[2], mqtt_target[3]);
    4c4e:	fa e0       	ldi	r31, 0x0A	; 10
    4c50:	33 81       	ldd	r19, Z+3	; 0x03
    4c52:	22 81       	ldd	r18, Z+2	; 0x02
    4c54:	91 81       	ldd	r25, Z+1	; 0x01
    4c56:	80 81       	ld	r24, Z
    4c58:	1f 92       	push	r1
    4c5a:	3f 93       	push	r19
    4c5c:	1f 92       	push	r1
    4c5e:	2f 93       	push	r18
    4c60:	1f 92       	push	r1
    4c62:	9f 93       	push	r25
    4c64:	1f 92       	push	r1
    4c66:	8f 93       	push	r24
    4c68:	83 e3       	ldi	r24, 0x33	; 51
    4c6a:	93 e0       	ldi	r25, 0x03	; 3
    4c6c:	9f 93       	push	r25
    4c6e:	8f 93       	push	r24
    4c70:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
	NewNetwork(&mqtt_network);
    4c74:	ce 01       	movw	r24, r28
    4c76:	8b 59       	subi	r24, 0x9B	; 155
    4c78:	9f 4f       	sbci	r25, 0xFF	; 255
    4c7a:	7b d8       	rcall	.-3850   	; 0x3d72 <NewNetwork>
    4c7c:	4b e5       	ldi	r20, 0x5B	; 91
	ConnectNetwork(&mqtt_network, mqtt_target, 1883);
    4c7e:	57 e0       	ldi	r21, 0x07	; 7
    4c80:	6a e1       	ldi	r22, 0x1A	; 26
    4c82:	7a e0       	ldi	r23, 0x0A	; 10
    4c84:	ce 01       	movw	r24, r28
    4c86:	8b 59       	subi	r24, 0x9B	; 155
    4c88:	9f 4f       	sbci	r25, 0xFF	; 255
    4c8a:	81 d8       	rcall	.-3838   	; 0x3d8e <ConnectNetwork>
    4c8c:	a1 2c       	mov	r10, r1
	MQTTClient(&mqtt_client, &mqtt_network, 1000, mqtt_buf, 100, mqtt_readBuffer, MQTT_BUFFER_SIZE);
    4c8e:	68 94       	set
    4c90:	bb 24       	eor	r11, r11
    4c92:	b1 f8       	bld	r11, 1
    4c94:	0f 2e       	mov	r0, r31
    4c96:	f1 e7       	ldi	r31, 0x71	; 113
    4c98:	cf 2e       	mov	r12, r31
    4c9a:	f4 e2       	ldi	r31, 0x24	; 36
    4c9c:	df 2e       	mov	r13, r31
    4c9e:	f0 2d       	mov	r31, r0
    4ca0:	0f 2e       	mov	r0, r31
    4ca2:	f4 e6       	ldi	r31, 0x64	; 100
    4ca4:	ef 2e       	mov	r14, r31
    4ca6:	f1 2c       	mov	r15, r1
    4ca8:	f0 2d       	mov	r31, r0
    4caa:	8e 01       	movw	r16, r28
    4cac:	0f 5f       	subi	r16, 0xFF	; 255
    4cae:	1f 4f       	sbci	r17, 0xFF	; 255
    4cb0:	28 ee       	ldi	r18, 0xE8	; 232
    4cb2:	33 e0       	ldi	r19, 0x03	; 3
    4cb4:	40 e0       	ldi	r20, 0x00	; 0
    4cb6:	50 e0       	ldi	r21, 0x00	; 0
    4cb8:	be 01       	movw	r22, r28
    4cba:	6b 59       	subi	r22, 0x9B	; 155
    4cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    4cbe:	ce 01       	movw	r24, r28
    4cc0:	81 59       	subi	r24, 0x91	; 145
    4cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4cc4:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <MQTTClient>
    4cc8:	8b e3       	ldi	r24, 0x3B	; 59
	
	//Connection to MQTT broker
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    4cca:	e3 ea       	ldi	r30, 0xA3	; 163
    4ccc:	fa e0       	ldi	r31, 0x0A	; 10
    4cce:	de 01       	movw	r26, r28
    4cd0:	a8 55       	subi	r26, 0x58	; 88
    4cd2:	bf 4f       	sbci	r27, 0xFF	; 255
    4cd4:	01 90       	ld	r0, Z+
    4cd6:	0d 92       	st	X+, r0
    4cd8:	8a 95       	dec	r24
    4cda:	e1 f7       	brne	.-8      	; 0x4cd4 <main+0x118>
    4cdc:	c6 54       	subi	r28, 0x46	; 70
	data.willFlag = 0;
    4cde:	df 4f       	sbci	r29, 0xFF	; 255
    4ce0:	18 82       	st	Y, r1
    4ce2:	ca 5b       	subi	r28, 0xBA	; 186
    4ce4:	d0 40       	sbci	r29, 0x00	; 0
    4ce6:	84 e0       	ldi	r24, 0x04	; 4
	data.MQTTVersion = 4;//3;
    4ce8:	c2 55       	subi	r28, 0x52	; 82
    4cea:	df 4f       	sbci	r29, 0xFF	; 255
    4cec:	88 83       	st	Y, r24
    4cee:	ce 5a       	subi	r28, 0xAE	; 174
    4cf0:	d0 40       	sbci	r29, 0x00	; 0
    4cf2:	84 ef       	ldi	r24, 0xF4	; 244
	data.clientID.cstring = (char*)"w5500_avr_client";
    4cf4:	9b e0       	ldi	r25, 0x0B	; 11
    4cf6:	c1 55       	subi	r28, 0x51	; 81
    4cf8:	df 4f       	sbci	r29, 0xFF	; 255
    4cfa:	99 83       	std	Y+1, r25	; 0x01
    4cfc:	88 83       	st	Y, r24
    4cfe:	cf 5a       	subi	r28, 0xAF	; 175
    4d00:	d0 40       	sbci	r29, 0x00	; 0
    4d02:	85 e0       	ldi	r24, 0x05	; 5
	data.username.cstring = (char*)"user1234";
    4d04:	9c e0       	ldi	r25, 0x0C	; 12
    4d06:	cd 52       	subi	r28, 0x2D	; 45
    4d08:	df 4f       	sbci	r29, 0xFF	; 255
    4d0a:	99 83       	std	Y+1, r25	; 0x01
    4d0c:	88 83       	st	Y, r24
    4d0e:	c3 5d       	subi	r28, 0xD3	; 211
    4d10:	d0 40       	sbci	r29, 0x00	; 0
    4d12:	89 e9       	ldi	r24, 0x99	; 153
	data.password.cstring = (char*)"\0";
    4d14:	9a e0       	ldi	r25, 0x0A	; 10
    4d16:	c5 52       	subi	r28, 0x25	; 37
    4d18:	df 4f       	sbci	r29, 0xFF	; 255
    4d1a:	99 83       	std	Y+1, r25	; 0x01
    4d1c:	88 83       	st	Y, r24
    4d1e:	cb 5d       	subi	r28, 0xDB	; 219
    4d20:	d0 40       	sbci	r29, 0x00	; 0
    4d22:	8c e3       	ldi	r24, 0x3C	; 60
	data.keepAliveInterval = 60;
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	c9 54       	subi	r28, 0x49	; 73
    4d28:	df 4f       	sbci	r29, 0xFF	; 255
    4d2a:	99 83       	std	Y+1, r25	; 0x01
    4d2c:	88 83       	st	Y, r24
    4d2e:	c7 5b       	subi	r28, 0xB7	; 183
    4d30:	d0 40       	sbci	r29, 0x00	; 0
    4d32:	81 e0       	ldi	r24, 0x01	; 1
	data.cleansession = 1;
    4d34:	c7 54       	subi	r28, 0x47	; 71
    4d36:	df 4f       	sbci	r29, 0xFF	; 255
    4d38:	88 83       	st	Y, r24
    4d3a:	c9 5b       	subi	r28, 0xB9	; 185
    4d3c:	d0 40       	sbci	r29, 0x00	; 0
    4d3e:	be 01       	movw	r22, r28
	mqtt_rc = MQTTConnect(&mqtt_client, &data);
    4d40:	68 55       	subi	r22, 0x58	; 88
    4d42:	7f 4f       	sbci	r23, 0xFF	; 255
    4d44:	ce 01       	movw	r24, r28
    4d46:	81 59       	subi	r24, 0x91	; 145
    4d48:	9f 4f       	sbci	r25, 0xFF	; 255
    4d4a:	0e 94 90 12 	call	0x2520	; 0x2520 <MQTTConnect>
    4d4e:	0f b6       	in	r0, 0x3f	; 63
	if (mqtt_rc == SUCCESSS)
    4d50:	f8 94       	cli
    4d52:	de bf       	out	0x3e, r29	; 62
    4d54:	0f be       	out	0x3f, r0	; 63
    4d56:	cd bf       	out	0x3d, r28	; 61
    4d58:	61 15       	cp	r22, r1
    4d5a:	71 05       	cpc	r23, r1
    4d5c:	81 05       	cpc	r24, r1
    4d5e:	91 05       	cpc	r25, r1
    4d60:	b9 f5       	brne	.+110    	; 0x4dd0 <main+0x214>
    4d62:	9f 93       	push	r25
	{
		PRINTF("++MQTT Connected SUCCESS: %ld\r\n", mqtt_rc);
    4d64:	8f 93       	push	r24
    4d66:	7f 93       	push	r23
    4d68:	6f 93       	push	r22
    4d6a:	83 e1       	ldi	r24, 0x13	; 19
    4d6c:	93 e0       	ldi	r25, 0x03	; 3
    4d6e:	9f 93       	push	r25
    4d70:	8f 93       	push	r24
    4d72:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
    4d76:	7e 01       	movw	r14, r28
		PRINTF("--MQTT Connected ERROR: %ld\r\n", mqtt_rc);
		while(1);//Reboot the board
	}
	
	// Subscribe to all topics
	char SubString[] = "/ssy/test/#";// Subscribe for all that begin from "/ssy/test/"
    4d78:	33 ee       	ldi	r19, 0xE3	; 227
    4d7a:	e3 0e       	add	r14, r19
    4d7c:	f1 1c       	adc	r15, r1
    4d7e:	8c e0       	ldi	r24, 0x0C	; 12
    4d80:	ee e0       	ldi	r30, 0x0E	; 14
    4d82:	fc e0       	ldi	r31, 0x0C	; 12
    4d84:	d7 01       	movw	r26, r14
    4d86:	01 90       	ld	r0, Z+
    4d88:	0d 92       	st	X+, r0
    4d8a:	8a 95       	dec	r24
    4d8c:	e1 f7       	brne	.-8      	; 0x4d86 <main+0x1ca>
    4d8e:	22 e5       	ldi	r18, 0x52	; 82
	mqtt_rc = MQTTSubscribe(&mqtt_client, SubString, QOS0, messageArrived);
    4d90:	32 e2       	ldi	r19, 0x22	; 34
    4d92:	40 e0       	ldi	r20, 0x00	; 0
    4d94:	b7 01       	movw	r22, r14
    4d96:	ce 01       	movw	r24, r28
    4d98:	81 59       	subi	r24, 0x91	; 145
    4d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    4d9c:	0e 94 4b 13 	call	0x2696	; 0x2696 <MQTTSubscribe>
    4da0:	9f 93       	push	r25
	PRINTF("Subscribed (%s) %d\r\n", SubString, mqtt_rc);
    4da2:	8f 93       	push	r24
    4da4:	7f 93       	push	r23
    4da6:	6f 93       	push	r22
    4da8:	ff 92       	push	r15
    4daa:	ef 92       	push	r14
    4dac:	8e ef       	ldi	r24, 0xFE	; 254
    4dae:	92 e0       	ldi	r25, 0x02	; 2
    4db0:	9f 93       	push	r25
    4db2:	8f 93       	push	r24
    4db4:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
	// timers defined
	uint32_t timer_mqtt_pub_1sec = millis();
    4db8:	9f dc       	rcall	.-1730   	; 0x46f8 <millis>
    4dba:	4b 01       	movw	r8, r22
    4dbc:	5c 01       	movw	r10, r24
	uint32_t timer_link_1sec = millis();
    4dbe:	9c dc       	rcall	.-1736   	; 0x46f8 <millis>
    4dc0:	6b 01       	movw	r12, r22
    4dc2:	7c 01       	movw	r14, r24
    4dc4:	0f b6       	in	r0, 0x3f	; 63
    4dc6:	f8 94       	cli
    4dc8:	de bf       	out	0x3e, r29	; 62
    4dca:	0f be       	out	0x3f, r0	; 63
    4dcc:	cd bf       	out	0x3d, r28	; 61
    4dce:	11 c0       	rjmp	.+34     	; 0x4df2 <main+0x236>
    4dd0:	9f 93       	push	r25
	{
		PRINTF("++MQTT Connected SUCCESS: %ld\r\n", mqtt_rc);
	}
	else
	{
		PRINTF("--MQTT Connected ERROR: %ld\r\n", mqtt_rc);
    4dd2:	8f 93       	push	r24
    4dd4:	7f 93       	push	r23
    4dd6:	6f 93       	push	r22
    4dd8:	80 ee       	ldi	r24, 0xE0	; 224
    4dda:	92 e0       	ldi	r25, 0x02	; 2
    4ddc:	9f 93       	push	r25
    4dde:	8f 93       	push	r24
    4de0:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
    4de4:	0f 90       	pop	r0
    4de6:	0f 90       	pop	r0
    4de8:	0f 90       	pop	r0
    4dea:	0f 90       	pop	r0
    4dec:	0f 90       	pop	r0
    4dee:	0f 90       	pop	r0
	uint32_t timer_mqtt_pub_1sec = millis();
	uint32_t timer_link_1sec = millis();

	while(1)
	{	
		SYS_TaskHandler();
    4df0:	ff cf       	rjmp	.-2      	; 0x4df0 <main+0x234>
    4df2:	0e 94 b6 31 	call	0x636c	; 0x636c <SYS_TaskHandler>
		HAL_UartTaskHandler();
    4df6:	5c d1       	rcall	.+696    	; 0x50b0 <HAL_UartTaskHandler>
		APP_TaskHandler();
    4df8:	fd da       	rcall	.-2566   	; 0x43f4 <APP_TaskHandler>
		// reset watchdog at every cycle
		wdt_reset();
    4dfa:	a8 95       	wdr
		// json config
		if(json_config_ready){
    4dfc:	80 91 50 0e 	lds	r24, 0x0E50	; 0x800e50 <json_config_ready>
    4e00:	88 23       	and	r24, r24
    4e02:	29 f0       	breq	.+10     	; 0x4e0e <main+0x252>
			executeCommand(json_buffer);
    4e04:	81 e5       	ldi	r24, 0x51	; 81
    4e06:	9e e0       	ldi	r25, 0x0E	; 14
    4e08:	7f dd       	rcall	.-1282   	; 0x4908 <executeCommand>
			json_config_ready = 0;
    4e0a:	10 92 50 0e 	sts	0x0E50, r1	; 0x800e50 <json_config_ready>
		}
		// mqtt publish when LWM msg sent
  		if(data_ready){
    4e0e:	80 91 b5 0e 	lds	r24, 0x0EB5	; 0x800eb5 <data_ready>
    4e12:	88 23       	and	r24, r24
    4e14:	e9 f0       	breq	.+58     	; 0x4e50 <main+0x294>
			create_json();
    4e16:	a8 dc       	rcall	.-1712   	; 0x4768 <create_json>
    4e18:	20 91 6b 23 	lds	r18, 0x236B	; 0x80236b <info+0x96>
			// publish data received
  			mqtt_pub(&mqtt_client, info.topic,info.final_json,info.len_json );
    4e1c:	30 91 6c 23 	lds	r19, 0x236C	; 0x80236c <info+0x97>
    4e20:	45 ed       	ldi	r20, 0xD5	; 213
    4e22:	52 e2       	ldi	r21, 0x22	; 34
    4e24:	69 e3       	ldi	r22, 0x39	; 57
    4e26:	73 e2       	ldi	r23, 0x23	; 35
    4e28:	ce 01       	movw	r24, r28
    4e2a:	81 59       	subi	r24, 0x91	; 145
    4e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e2e:	b3 db       	rcall	.-2202   	; 0x4596 <mqtt_pub>
    4e30:	10 92 b5 0e 	sts	0x0EB5, r1	; 0x800eb5 <data_ready>
  			data_ready = 0;
    4e34:	80 91 4e 0e 	lds	r24, 0x0E4E	; 0x800e4e <vypis_cau>
			// print message when "vypis_cau" is 1
			if(vypis_cau){
    4e38:	90 91 4f 0e 	lds	r25, 0x0E4F	; 0x800e4f <vypis_cau+0x1>
    4e3c:	89 2b       	or	r24, r25
    4e3e:	41 f0       	breq	.+16     	; 0x4e50 <main+0x294>
				PRINTF("CAAAAU\n\r");
    4e40:	87 ed       	ldi	r24, 0xD7	; 215
    4e42:	92 e0       	ldi	r25, 0x02	; 2
    4e44:	9f 93       	push	r25
    4e46:	8f 93       	push	r24
    4e48:	0e 94 c5 38 	call	0x718a	; 0x718a <printf_P>
    4e4c:	0f 90       	pop	r0
    4e4e:	0f 90       	pop	r0
			}
  		}
		// receive subs every mqtt_timer period ( MQTT yield )
 		if((millis()-timer_mqtt_pub_1sec)> mqtt_timer)
    4e50:	53 dc       	rcall	.-1882   	; 0x46f8 <millis>
    4e52:	ab 01       	movw	r20, r22
    4e54:	bc 01       	movw	r22, r24
    4e56:	48 19       	sub	r20, r8
    4e58:	59 09       	sbc	r21, r9
    4e5a:	6a 09       	sbc	r22, r10
    4e5c:	7b 09       	sbc	r23, r11
    4e5e:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <mqtt_timer>
    4e62:	90 91 02 0a 	lds	r25, 0x0A02	; 0x800a02 <mqtt_timer+0x1>
    4e66:	a0 e0       	ldi	r26, 0x00	; 0
    4e68:	b0 e0       	ldi	r27, 0x00	; 0
    4e6a:	84 17       	cp	r24, r20
    4e6c:	95 07       	cpc	r25, r21
    4e6e:	a6 07       	cpc	r26, r22
    4e70:	b7 07       	cpc	r27, r23
    4e72:	68 f4       	brcc	.+26     	; 0x4e8e <main+0x2d2>
 		{
			timer_mqtt_pub_1sec = millis();
    4e74:	41 dc       	rcall	.-1918   	; 0x46f8 <millis>
    4e76:	4b 01       	movw	r8, r22
    4e78:	5c 01       	movw	r10, r24
			wdt_reset();
    4e7a:	a8 95       	wdr
			// receive subs
			MQTTYield(&mqtt_client, 100);
    4e7c:	44 e6       	ldi	r20, 0x64	; 100
    4e7e:	50 e0       	ldi	r21, 0x00	; 0
    4e80:	60 e0       	ldi	r22, 0x00	; 0
    4e82:	70 e0       	ldi	r23, 0x00	; 0
    4e84:	ce 01       	movw	r24, r28
    4e86:	81 59       	subi	r24, 0x91	; 145
    4e88:	9f 4f       	sbci	r25, 0xFF	; 255
    4e8a:	0e 94 1a 12 	call	0x2434	; 0x2434 <MQTTYield>
			
 		}
		// LINK check
		if((millis()-timer_link_1sec)> 1000)
    4e8e:	34 dc       	rcall	.-1944   	; 0x46f8 <millis>
    4e90:	dc 01       	movw	r26, r24
    4e92:	cb 01       	movw	r24, r22
    4e94:	8c 19       	sub	r24, r12
    4e96:	9d 09       	sbc	r25, r13
    4e98:	ae 09       	sbc	r26, r14
    4e9a:	bf 09       	sbc	r27, r15
    4e9c:	89 3e       	cpi	r24, 0xE9	; 233
    4e9e:	93 40       	sbci	r25, 0x03	; 3
    4ea0:	a1 05       	cpc	r26, r1
    4ea2:	b1 05       	cpc	r27, r1
    4ea4:	08 f4       	brcc	.+2      	; 0x4ea8 <main+0x2ec>
    4ea6:	a5 cf       	rjmp	.-182    	; 0x4df2 <main+0x236>
		{
			//here every 1 sec
			timer_link_1sec = millis();
    4ea8:	27 dc       	rcall	.-1970   	; 0x46f8 <millis>
    4eaa:	6b 01       	movw	r12, r22
    4eac:	7c 01       	movw	r14, r24
    4eae:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <wizphy_getphylink>
			if(wizphy_getphylink() == PHY_LINK_ON)
    4eb2:	81 30       	cpi	r24, 0x01	; 1
    4eb4:	21 f4       	brne	.+8      	; 0x4ebe <main+0x302>
    4eb6:	85 b1       	in	r24, 0x05	; 5
			{
				LED0ON;
    4eb8:	8f 7e       	andi	r24, 0xEF	; 239
    4eba:	85 b9       	out	0x05, r24	; 5
    4ebc:	9a cf       	rjmp	.-204    	; 0x4df2 <main+0x236>
    4ebe:	85 b1       	in	r24, 0x05	; 5
			}
			else
			{
				LED0OFF;
    4ec0:	80 61       	ori	r24, 0x10	; 16
    4ec2:	85 b9       	out	0x05, r24	; 5
    4ec4:	96 cf       	rjmp	.-212    	; 0x4df2 <main+0x236>

00004ec6 <spi_init>:

void
spi_init(void)
{
  // CS PIN for FLASH
  DDRD	|= BV(WIZNET_CS); // CS to OUT && Disable
    4ec6:	8a b1       	in	r24, 0x0a	; 10
    4ec8:	80 61       	ori	r24, 0x10	; 16
    4eca:	8a b9       	out	0x0a, r24	; 10
  SPI_WIZNET_DISABLE();
    4ecc:	8b b1       	in	r24, 0x0b	; 11
    4ece:	80 61       	ori	r24, 0x10	; 16
    4ed0:	8b b9       	out	0x0b, r24	; 11
  
  /* Initalize ports for communication with SPI units. */
  /* CSN=SS and must be output when master! */
  DDRB  |= BV(MOSI) | BV(SCK);
    4ed2:	84 b1       	in	r24, 0x04	; 4
    4ed4:	86 60       	ori	r24, 0x06	; 6
    4ed6:	84 b9       	out	0x04, r24	; 4
  PORTB |= BV(MOSI) | BV(SCK);
    4ed8:	85 b1       	in	r24, 0x05	; 5
    4eda:	86 60       	ori	r24, 0x06	; 6
    4edc:	85 b9       	out	0x05, r24	; 5
  DDRD |= BV(CSN);
    4ede:	8a b1       	in	r24, 0x0a	; 10
    4ee0:	80 64       	ori	r24, 0x40	; 64
    4ee2:	8a b9       	out	0x0a, r24	; 10
 
  /* Enables SPI, selects "master", clock rate FCK / 4 - 4Mhz, and SPI mode 0 */
  SPCR = BV(SPE) | BV(MSTR);
    4ee4:	80 e5       	ldi	r24, 0x50	; 80
    4ee6:	8c bd       	out	0x2c, r24	; 44
#if defined(SPI_8_MHZ)
  SPSR = BV(SPI2X); //FCK / 2 - 8Mhz
#elif defined (SPI_4_MHZ)
  SPSR = 0x0; //FCK / 4 - 4Mhz
#else
  SPSR = 0x0; //FCK / 4 - 4Mhz
    4ee8:	1d bc       	out	0x2d, r1	; 45
    4eea:	08 95       	ret

00004eec <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    4eec:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4eee:	0f b6       	in	r0, 0x3f	; 63
    4ef0:	f8 94       	cli
    4ef2:	a8 95       	wdr
    4ef4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    4ef8:	88 61       	ori	r24, 0x18	; 24
    4efa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    4efe:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    4f02:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    4f04:	e1 e6       	ldi	r30, 0x61	; 97
    4f06:	f0 e0       	ldi	r31, 0x00	; 0
    4f08:	80 e8       	ldi	r24, 0x80	; 128
    4f0a:	80 83       	st	Z, r24
  CLKPR = 0;
    4f0c:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    4f0e:	78 94       	sei

  HAL_TimerInit();
    4f10:	01 c0       	rjmp	.+2      	; 0x4f14 <HAL_TimerInit>
    4f12:	08 95       	ret

00004f14 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
    4f14:	10 92 78 27 	sts	0x2778, r1	; 0x802778 <halTimerIrqCount>
    4f18:	80 e1       	ldi	r24, 0x10	; 16
    4f1a:	97 e2       	ldi	r25, 0x27	; 39
    4f1c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    4f20:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    4f24:	e1 ea       	ldi	r30, 0xA1	; 161
    4f26:	f0 e0       	ldi	r31, 0x00	; 0
    4f28:	88 e0       	ldi	r24, 0x08	; 8
    4f2a:	80 83       	st	Z, r24
    4f2c:	80 81       	ld	r24, Z
    4f2e:	82 60       	ori	r24, 0x02	; 2
    4f30:	80 83       	st	Z, r24
    4f32:	e2 e7       	ldi	r30, 0x72	; 114
    4f34:	f0 e0       	ldi	r31, 0x00	; 0
    4f36:	80 81       	ld	r24, Z
    4f38:	82 60       	ori	r24, 0x02	; 2
    4f3a:	80 83       	st	Z, r24
    4f3c:	08 95       	ret

00004f3e <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    4f3e:	1f 92       	push	r1
    4f40:	0f 92       	push	r0
    4f42:	0f b6       	in	r0, 0x3f	; 63
    4f44:	0f 92       	push	r0
    4f46:	11 24       	eor	r1, r1
    4f48:	8f 93       	push	r24
  halTimerIrqCount++;
    4f4a:	80 91 78 27 	lds	r24, 0x2778	; 0x802778 <halTimerIrqCount>
    4f4e:	8f 5f       	subi	r24, 0xFF	; 255
    4f50:	80 93 78 27 	sts	0x2778, r24	; 0x802778 <halTimerIrqCount>
}
    4f54:	8f 91       	pop	r24
    4f56:	0f 90       	pop	r0
    4f58:	0f be       	out	0x3f, r0	; 63
    4f5a:	0f 90       	pop	r0
    4f5c:	1f 90       	pop	r1
    4f5e:	18 95       	reti

00004f60 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
    4f60:	1f 92       	push	r1
    4f62:	0f 92       	push	r0
    4f64:	0f b6       	in	r0, 0x3f	; 63
    4f66:	0f 92       	push	r0
    4f68:	11 24       	eor	r1, r1
    4f6a:	8f 93       	push	r24
  halSleepTimerEvent = true;
    4f6c:	81 e0       	ldi	r24, 0x01	; 1
    4f6e:	80 93 b6 0e 	sts	0x0EB6, r24	; 0x800eb6 <halSleepTimerEvent>
}
    4f72:	8f 91       	pop	r24
    4f74:	0f 90       	pop	r0
    4f76:	0f be       	out	0x3f, r0	; 63
    4f78:	0f 90       	pop	r0
    4f7a:	1f 90       	pop	r1
    4f7c:	18 95       	reti

00004f7e <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
    4f7e:	4f b7       	in	r20, 0x3f	; 63
    4f80:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
    4f82:	e9 eb       	ldi	r30, 0xB9	; 185
    4f84:	fe e0       	ldi	r31, 0x0E	; 14
    4f86:	20 85       	ldd	r18, Z+8	; 0x08
    4f88:	31 85       	ldd	r19, Z+9	; 0x09
    4f8a:	80 81       	ld	r24, Z
    4f8c:	91 81       	ldd	r25, Z+1	; 0x01
    4f8e:	bc 01       	movw	r22, r24
    4f90:	6f 5f       	subi	r22, 0xFF	; 255
    4f92:	7f 4f       	sbci	r23, 0xFF	; 255
    4f94:	71 83       	std	Z+1, r23	; 0x01
    4f96:	60 83       	st	Z, r22
    4f98:	d9 01       	movw	r26, r18
    4f9a:	a8 0f       	add	r26, r24
    4f9c:	b9 1f       	adc	r27, r25
    4f9e:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
    4fa0:	60 81       	ld	r22, Z
    4fa2:	71 81       	ldd	r23, Z+1	; 0x01
    4fa4:	24 81       	ldd	r18, Z+4	; 0x04
    4fa6:	35 81       	ldd	r19, Z+5	; 0x05
    4fa8:	62 17       	cp	r22, r18
    4faa:	73 07       	cpc	r23, r19
    4fac:	21 f4       	brne	.+8      	; 0x4fb6 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
    4fae:	10 92 ba 0e 	sts	0x0EBA, r1	; 0x800eba <rxFifo+0x1>
    4fb2:	10 92 b9 0e 	sts	0x0EB9, r1	; 0x800eb9 <rxFifo>
    rxFifo.bytes--;
    4fb6:	e9 eb       	ldi	r30, 0xB9	; 185
    4fb8:	fe e0       	ldi	r31, 0x0E	; 14
    4fba:	26 81       	ldd	r18, Z+6	; 0x06
    4fbc:	37 81       	ldd	r19, Z+7	; 0x07
    4fbe:	21 50       	subi	r18, 0x01	; 1
    4fc0:	31 09       	sbc	r19, r1
    4fc2:	37 83       	std	Z+7, r19	; 0x07
    4fc4:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
    4fc6:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
    4fc8:	08 95       	ret

00004fca <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
    4fca:	1f 92       	push	r1
    4fcc:	0f 92       	push	r0
    4fce:	0f b6       	in	r0, 0x3f	; 63
    4fd0:	0f 92       	push	r0
    4fd2:	11 24       	eor	r1, r1
    4fd4:	0b b6       	in	r0, 0x3b	; 59
    4fd6:	0f 92       	push	r0
    4fd8:	8f 93       	push	r24
    4fda:	ef 93       	push	r30
    4fdc:	ff 93       	push	r31
  udrEmpty = true;
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	80 93 b8 0e 	sts	0x0EB8, r24	; 0x800eb8 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
    4fe4:	e9 ec       	ldi	r30, 0xC9	; 201
    4fe6:	f0 e0       	ldi	r31, 0x00	; 0
    4fe8:	80 81       	ld	r24, Z
    4fea:	8f 7d       	andi	r24, 0xDF	; 223
    4fec:	80 83       	st	Z, r24
}
    4fee:	ff 91       	pop	r31
    4ff0:	ef 91       	pop	r30
    4ff2:	8f 91       	pop	r24
    4ff4:	0f 90       	pop	r0
    4ff6:	0b be       	out	0x3b, r0	; 59
    4ff8:	0f 90       	pop	r0
    4ffa:	0f be       	out	0x3f, r0	; 63
    4ffc:	0f 90       	pop	r0
    4ffe:	1f 90       	pop	r1
    5000:	18 95       	reti

00005002 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
    5002:	1f 92       	push	r1
    5004:	0f 92       	push	r0
    5006:	0f b6       	in	r0, 0x3f	; 63
    5008:	0f 92       	push	r0
    500a:	11 24       	eor	r1, r1
    500c:	0b b6       	in	r0, 0x3b	; 59
    500e:	0f 92       	push	r0
    5010:	2f 93       	push	r18
    5012:	3f 93       	push	r19
    5014:	4f 93       	push	r20
    5016:	5f 93       	push	r21
    5018:	6f 93       	push	r22
    501a:	7f 93       	push	r23
    501c:	8f 93       	push	r24
    501e:	9f 93       	push	r25
    5020:	af 93       	push	r26
    5022:	bf 93       	push	r27
    5024:	ef 93       	push	r30
    5026:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
    5028:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
    502c:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
    5030:	8c 71       	andi	r24, 0x1C	; 28
    5032:	59 f5       	brne	.+86     	; 0x508a <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
    5034:	e9 eb       	ldi	r30, 0xB9	; 185
    5036:	fe e0       	ldi	r31, 0x0E	; 14
    5038:	46 81       	ldd	r20, Z+6	; 0x06
    503a:	57 81       	ldd	r21, Z+7	; 0x07
    503c:	84 81       	ldd	r24, Z+4	; 0x04
    503e:	95 81       	ldd	r25, Z+5	; 0x05
    5040:	48 17       	cp	r20, r24
    5042:	59 07       	cpc	r21, r25
    5044:	11 f1       	breq	.+68     	; 0x508a <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
    5046:	40 85       	ldd	r20, Z+8	; 0x08
    5048:	51 85       	ldd	r21, Z+9	; 0x09
    504a:	82 81       	ldd	r24, Z+2	; 0x02
    504c:	93 81       	ldd	r25, Z+3	; 0x03
    504e:	bc 01       	movw	r22, r24
    5050:	6f 5f       	subi	r22, 0xFF	; 255
    5052:	7f 4f       	sbci	r23, 0xFF	; 255
    5054:	73 83       	std	Z+3, r23	; 0x03
    5056:	62 83       	std	Z+2, r22	; 0x02
    5058:	da 01       	movw	r26, r20
    505a:	a8 0f       	add	r26, r24
    505c:	b9 1f       	adc	r27, r25
    505e:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
    5060:	22 81       	ldd	r18, Z+2	; 0x02
    5062:	33 81       	ldd	r19, Z+3	; 0x03
    5064:	84 81       	ldd	r24, Z+4	; 0x04
    5066:	95 81       	ldd	r25, Z+5	; 0x05
    5068:	28 17       	cp	r18, r24
    506a:	39 07       	cpc	r19, r25
    506c:	21 f4       	brne	.+8      	; 0x5076 <__vector_36+0x74>
      rxFifo.tail = 0;
    506e:	10 92 bc 0e 	sts	0x0EBC, r1	; 0x800ebc <rxFifo+0x3>
    5072:	10 92 bb 0e 	sts	0x0EBB, r1	; 0x800ebb <rxFifo+0x2>
    rxFifo.bytes++;
    5076:	e9 eb       	ldi	r30, 0xB9	; 185
    5078:	fe e0       	ldi	r31, 0x0E	; 14
    507a:	86 81       	ldd	r24, Z+6	; 0x06
    507c:	97 81       	ldd	r25, Z+7	; 0x07
    507e:	01 96       	adiw	r24, 0x01	; 1
    5080:	97 83       	std	Z+7, r25	; 0x07
    5082:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
    5084:	81 e0       	ldi	r24, 0x01	; 1
    5086:	80 93 b7 0e 	sts	0x0EB7, r24	; 0x800eb7 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
    508a:	ff 91       	pop	r31
    508c:	ef 91       	pop	r30
    508e:	bf 91       	pop	r27
    5090:	af 91       	pop	r26
    5092:	9f 91       	pop	r25
    5094:	8f 91       	pop	r24
    5096:	7f 91       	pop	r23
    5098:	6f 91       	pop	r22
    509a:	5f 91       	pop	r21
    509c:	4f 91       	pop	r20
    509e:	3f 91       	pop	r19
    50a0:	2f 91       	pop	r18
    50a2:	0f 90       	pop	r0
    50a4:	0b be       	out	0x3b, r0	; 59
    50a6:	0f 90       	pop	r0
    50a8:	0f be       	out	0x3f, r0	; 63
    50aa:	0f 90       	pop	r0
    50ac:	1f 90       	pop	r1
    50ae:	18 95       	reti

000050b0 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
    50b0:	80 91 c9 0e 	lds	r24, 0x0EC9	; 0x800ec9 <txFifo+0x6>
    50b4:	90 91 ca 0e 	lds	r25, 0x0ECA	; 0x800eca <txFifo+0x7>
    50b8:	00 97       	sbiw	r24, 0x00	; 0
    50ba:	69 f1       	breq	.+90     	; 0x5116 <HAL_UartTaskHandler+0x66>
    50bc:	20 91 b8 0e 	lds	r18, 0x0EB8	; 0x800eb8 <udrEmpty>
    50c0:	22 23       	and	r18, r18
    50c2:	49 f1       	breq	.+82     	; 0x5116 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
    50c4:	e3 ec       	ldi	r30, 0xC3	; 195
    50c6:	fe e0       	ldi	r31, 0x0E	; 14
    50c8:	60 85       	ldd	r22, Z+8	; 0x08
    50ca:	71 85       	ldd	r23, Z+9	; 0x09
    50cc:	20 81       	ld	r18, Z
    50ce:	31 81       	ldd	r19, Z+1	; 0x01
    50d0:	a9 01       	movw	r20, r18
    50d2:	4f 5f       	subi	r20, 0xFF	; 255
    50d4:	5f 4f       	sbci	r21, 0xFF	; 255
    50d6:	51 83       	std	Z+1, r21	; 0x01
    50d8:	40 83       	st	Z, r20
    50da:	db 01       	movw	r26, r22
    50dc:	a2 0f       	add	r26, r18
    50de:	b3 1f       	adc	r27, r19
    50e0:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
    50e2:	64 81       	ldd	r22, Z+4	; 0x04
    50e4:	75 81       	ldd	r23, Z+5	; 0x05
    50e6:	46 17       	cp	r20, r22
    50e8:	57 07       	cpc	r21, r23
    50ea:	21 f4       	brne	.+8      	; 0x50f4 <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
    50ec:	10 92 c4 0e 	sts	0x0EC4, r1	; 0x800ec4 <txFifo+0x1>
    50f0:	10 92 c3 0e 	sts	0x0EC3, r1	; 0x800ec3 <txFifo>
    txFifo.bytes--;
    50f4:	01 97       	sbiw	r24, 0x01	; 1
    50f6:	90 93 ca 0e 	sts	0x0ECA, r25	; 0x800eca <txFifo+0x7>
    50fa:	80 93 c9 0e 	sts	0x0EC9, r24	; 0x800ec9 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
    50fe:	9f b7       	in	r25, 0x3f	; 63
    5100:	f8 94       	cli
      UDRx = byte;
    5102:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
    5106:	e9 ec       	ldi	r30, 0xC9	; 201
    5108:	f0 e0       	ldi	r31, 0x00	; 0
    510a:	80 81       	ld	r24, Z
    510c:	80 62       	ori	r24, 0x20	; 32
    510e:	80 83       	st	Z, r24
      udrEmpty = false;
    5110:	10 92 b8 0e 	sts	0x0EB8, r1	; 0x800eb8 <udrEmpty>
    ATOMIC_SECTION_LEAVE
    5114:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
    5116:	2f b7       	in	r18, 0x3f	; 63
    5118:	f8 94       	cli
      new = newData;
    511a:	90 91 b7 0e 	lds	r25, 0x0EB7	; 0x800eb7 <newData>
      newData = false;
    511e:	10 92 b7 0e 	sts	0x0EB7, r1	; 0x800eb7 <newData>
      bytes = rxFifo.bytes;
    5122:	40 91 bf 0e 	lds	r20, 0x0EBF	; 0x800ebf <rxFifo+0x6>
    5126:	50 91 c0 0e 	lds	r21, 0x0EC0	; 0x800ec0 <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
    512a:	2f bf       	out	0x3f, r18	; 63

    if (new)
    512c:	99 23       	and	r25, r25
    512e:	11 f0       	breq	.+4      	; 0x5134 <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
    5130:	ca 01       	movw	r24, r20
    5132:	14 c9       	rjmp	.-3544   	; 0x435c <HAL_UartBytesReceived>
    5134:	08 95       	ret

00005136 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    5136:	e9 e7       	ldi	r30, 0x79	; 121
    5138:	f7 e2       	ldi	r31, 0x27	; 39
    513a:	14 82       	std	Z+4, r1	; 0x04
    513c:	15 82       	std	Z+5, r1	; 0x05
    513e:	11 82       	std	Z+1, r1	; 0x01
    5140:	10 82       	st	Z, r1
    5142:	17 a2       	std	Z+39, r1	; 0x27
    5144:	16 a2       	std	Z+38, r1	; 0x26
    5146:	80 e0       	ldi	r24, 0x00	; 0
    5148:	0a c0       	rjmp	.+20     	; 0x515e <NWK_Init+0x28>
    514a:	e8 2f       	mov	r30, r24
    514c:	f0 e0       	ldi	r31, 0x00	; 0
    514e:	33 96       	adiw	r30, 0x03	; 3
    5150:	ee 0f       	add	r30, r30
    5152:	ff 1f       	adc	r31, r31
    5154:	e7 58       	subi	r30, 0x87	; 135
    5156:	f8 4d       	sbci	r31, 0xD8	; 216
    5158:	11 82       	std	Z+1, r1	; 0x01
    515a:	10 82       	st	Z, r1
    515c:	8f 5f       	subi	r24, 0xFF	; 255
    515e:	80 31       	cpi	r24, 0x10	; 16
    5160:	a0 f3       	brcs	.-24     	; 0x514a <NWK_Init+0x14>
    5162:	3a d6       	rcall	.+3188   	; 0x5dd8 <nwkTxInit>
    5164:	8d d5       	rcall	.+2842   	; 0x5c80 <nwkRxInit>
    5166:	06 d1       	rcall	.+524    	; 0x5374 <nwkFrameInit>
    5168:	c5 d0       	rcall	.+394    	; 0x52f4 <nwkDataReqInit>
    516a:	bd c1       	rjmp	.+890    	; 0x54e6 <nwkRouteInit>
    516c:	08 95       	ret

0000516e <NWK_SetAddr>:
    516e:	90 93 7a 27 	sts	0x277A, r25	; 0x80277a <nwkIb+0x1>
    5172:	80 93 79 27 	sts	0x2779, r24	; 0x802779 <nwkIb>
    5176:	0c 94 f8 30 	jmp	0x61f0	; 0x61f0 <PHY_SetShortAddr>
    517a:	08 95       	ret

0000517c <NWK_SetPanId>:
    517c:	90 93 7c 27 	sts	0x277C, r25	; 0x80277c <nwkIb+0x3>
    5180:	80 93 7b 27 	sts	0x277B, r24	; 0x80277b <nwkIb+0x2>
    5184:	0c 94 e6 30 	jmp	0x61cc	; 0x61cc <PHY_SetPanId>
    5188:	08 95       	ret

0000518a <NWK_OpenEndpoint>:
    518a:	e8 2f       	mov	r30, r24
    518c:	f0 e0       	ldi	r31, 0x00	; 0
    518e:	33 96       	adiw	r30, 0x03	; 3
    5190:	ee 0f       	add	r30, r30
    5192:	ff 1f       	adc	r31, r31
    5194:	e7 58       	subi	r30, 0x87	; 135
    5196:	f8 4d       	sbci	r31, 0xD8	; 216
    5198:	71 83       	std	Z+1, r23	; 0x01
    519a:	60 83       	st	Z, r22
    519c:	08 95       	ret

0000519e <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    519e:	c3 d5       	rcall	.+2950   	; 0x5d26 <nwkRxTaskHandler>
  nwkTxTaskHandler();
    51a0:	46 d7       	rcall	.+3724   	; 0x602e <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    51a2:	d1 c0       	rjmp	.+418    	; 0x5346 <nwkDataReqTaskHandler>
    51a4:	08 95       	ret

000051a6 <nwkDataReqConfirm>:
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    51a6:	a0 91 cd 0e 	lds	r26, 0x0ECD	; 0x800ecd <nwkDataReqQueue>
    51aa:	b0 91 ce 0e 	lds	r27, 0x0ECE	; 0x800ece <nwkDataReqQueue+0x1>
    51ae:	a8 17       	cp	r26, r24
    51b0:	b9 07       	cpc	r27, r25
    51b2:	41 f4       	brne	.+16     	; 0x51c4 <nwkDataReqConfirm+0x1e>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    51b4:	2d 91       	ld	r18, X+
    51b6:	3c 91       	ld	r19, X
    51b8:	30 93 ce 0e 	sts	0x0ECE, r19	; 0x800ece <nwkDataReqQueue+0x1>
    51bc:	20 93 cd 0e 	sts	0x0ECD, r18	; 0x800ecd <nwkDataReqQueue>
    51c0:	0b c0       	rjmp	.+22     	; 0x51d8 <nwkDataReqConfirm+0x32>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    51c2:	df 01       	movw	r26, r30
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    51c4:	ed 91       	ld	r30, X+
    51c6:	fc 91       	ld	r31, X
    51c8:	11 97       	sbiw	r26, 0x01	; 1
    51ca:	8e 17       	cp	r24, r30
    51cc:	9f 07       	cpc	r25, r31
    51ce:	c9 f7       	brne	.-14     	; 0x51c2 <nwkDataReqConfirm+0x1c>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    51d0:	20 81       	ld	r18, Z
    51d2:	31 81       	ldd	r19, Z+1	; 0x01
    51d4:	2d 93       	st	X+, r18
    51d6:	3c 93       	st	X, r19
  }

  nwkIb.lock--;
    51d8:	e9 e7       	ldi	r30, 0x79	; 121
    51da:	f7 e2       	ldi	r31, 0x27	; 39
    51dc:	26 a1       	ldd	r18, Z+38	; 0x26
    51de:	37 a1       	ldd	r19, Z+39	; 0x27
    51e0:	21 50       	subi	r18, 0x01	; 1
    51e2:	31 09       	sbc	r19, r1
    51e4:	37 a3       	std	Z+39, r19	; 0x27
    51e6:	26 a3       	std	Z+38, r18	; 0x26
  req->confirm(req);
    51e8:	dc 01       	movw	r26, r24
    51ea:	1d 96       	adiw	r26, 0x0d	; 13
    51ec:	ed 91       	ld	r30, X+
    51ee:	fc 91       	ld	r31, X
    51f0:	1e 97       	sbiw	r26, 0x0e	; 14
    51f2:	19 95       	eicall
    51f4:	08 95       	ret

000051f6 <nwkDataReqSendFrame>:
/*************************************************************************//**
  @brief Prepares and send outgoing frame based on the request @a req parameters
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
    51f6:	0f 93       	push	r16
    51f8:	1f 93       	push	r17
    51fa:	cf 93       	push	r28
    51fc:	df 93       	push	r29
    51fe:	8c 01       	movw	r16, r24
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    5200:	c6 d0       	rcall	.+396    	; 0x538e <nwkFrameAlloc>
    5202:	ec 01       	movw	r28, r24
    5204:	00 97       	sbiw	r24, 0x00	; 0
    5206:	29 f4       	brne	.+10     	; 0x5212 <nwkDataReqSendFrame+0x1c>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    5208:	82 e0       	ldi	r24, 0x02	; 2
    520a:	f8 01       	movw	r30, r16
    520c:	84 83       	std	Z+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    520e:	87 87       	std	Z+15, r24	; 0x0f
    return;
    5210:	50 c0       	rjmp	.+160    	; 0x52b2 <nwkDataReqSendFrame+0xbc>
  }

  req->frame = frame;
    5212:	f8 01       	movw	r30, r16
    5214:	93 83       	std	Z+3, r25	; 0x03
    5216:	82 83       	std	Z+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    5218:	81 e0       	ldi	r24, 0x01	; 1
    521a:	84 83       	std	Z+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    521c:	fe 01       	movw	r30, r28
    521e:	e9 57       	subi	r30, 0x79	; 121
    5220:	ff 4f       	sbci	r31, 0xFF	; 255
    5222:	8e e5       	ldi	r24, 0x5E	; 94
    5224:	99 e2       	ldi	r25, 0x29	; 41
    5226:	91 83       	std	Z+1, r25	; 0x01
    5228:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    522a:	f8 01       	movw	r30, r16
    522c:	81 85       	ldd	r24, Z+9	; 0x09
    522e:	82 fb       	bst	r24, 2
    5230:	88 27       	eor	r24, r24
    5232:	80 f9       	bld	r24, 0
    5234:	fe 01       	movw	r30, r28
    5236:	ea 57       	subi	r30, 0x7A	; 122
    5238:	ff 4f       	sbci	r31, 0xFF	; 255
    523a:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    523c:	f8 01       	movw	r30, r16
    523e:	91 85       	ldd	r25, Z+9	; 0x09
    5240:	8b 85       	ldd	r24, Y+11	; 0x0b
    5242:	90 fb       	bst	r25, 0
    5244:	80 f9       	bld	r24, 0
    5246:	8b 87       	std	Y+11, r24	; 0x0b
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    5248:	91 85       	ldd	r25, Z+9	; 0x09
    524a:	93 fb       	bst	r25, 3
    524c:	99 27       	eor	r25, r25
    524e:	90 f9       	bld	r25, 0
    5250:	90 fb       	bst	r25, 0
    5252:	82 f9       	bld	r24, 2
    5254:	8b 87       	std	Y+11, r24	; 0x0b
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    5256:	e9 e7       	ldi	r30, 0x79	; 121
    5258:	f7 e2       	ldi	r31, 0x27	; 39
    525a:	84 81       	ldd	r24, Z+4	; 0x04
    525c:	8f 5f       	subi	r24, 0xFF	; 255
    525e:	84 83       	std	Z+4, r24	; 0x04
    5260:	8c 87       	std	Y+12, r24	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    5262:	80 81       	ld	r24, Z
    5264:	91 81       	ldd	r25, Z+1	; 0x01
    5266:	9e 87       	std	Y+14, r25	; 0x0e
    5268:	8d 87       	std	Y+13, r24	; 0x0d
  frame->header.nwkDstAddr = req->dstAddr;
    526a:	f8 01       	movw	r30, r16
    526c:	85 81       	ldd	r24, Z+5	; 0x05
    526e:	96 81       	ldd	r25, Z+6	; 0x06
    5270:	98 8b       	std	Y+16, r25	; 0x10
    5272:	8f 87       	std	Y+15, r24	; 0x0f
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    5274:	80 85       	ldd	r24, Z+8	; 0x08
    5276:	98 2f       	mov	r25, r24
    5278:	9f 70       	andi	r25, 0x0F	; 15
    527a:	89 89       	ldd	r24, Y+17	; 0x11
    527c:	80 7f       	andi	r24, 0xF0	; 240
    527e:	89 2b       	or	r24, r25
    5280:	89 8b       	std	Y+17, r24	; 0x11
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    5282:	97 81       	ldd	r25, Z+7	; 0x07
    5284:	92 95       	swap	r25
    5286:	90 7f       	andi	r25, 0xF0	; 240
    5288:	8f 70       	andi	r24, 0x0F	; 15
    528a:	89 2b       	or	r24, r25
    528c:	89 8b       	std	Y+17, r24	; 0x11

  memcpy(frame->payload, req->data, req->size);
    528e:	44 85       	ldd	r20, Z+12	; 0x0c
    5290:	62 85       	ldd	r22, Z+10	; 0x0a
    5292:	73 85       	ldd	r23, Z+11	; 0x0b
    5294:	fe 01       	movw	r30, r28
    5296:	ef 57       	subi	r30, 0x7F	; 127
    5298:	ff 4f       	sbci	r31, 0xFF	; 255
    529a:	50 e0       	ldi	r21, 0x00	; 0
    529c:	80 81       	ld	r24, Z
    529e:	91 81       	ldd	r25, Z+1	; 0x01
    52a0:	0e 94 29 38 	call	0x7052	; 0x7052 <memcpy>
  frame->size += req->size;
    52a4:	f8 01       	movw	r30, r16
    52a6:	84 85       	ldd	r24, Z+12	; 0x0c
    52a8:	99 81       	ldd	r25, Y+1	; 0x01
    52aa:	89 0f       	add	r24, r25
    52ac:	89 83       	std	Y+1, r24	; 0x01

  nwkTxFrame(frame);
    52ae:	ce 01       	movw	r24, r28
    52b0:	b6 d5       	rcall	.+2924   	; 0x5e1e <nwkTxFrame>
}
    52b2:	df 91       	pop	r29
    52b4:	cf 91       	pop	r28
    52b6:	1f 91       	pop	r17
    52b8:	0f 91       	pop	r16
    52ba:	08 95       	ret

000052bc <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    52bc:	e0 91 cd 0e 	lds	r30, 0x0ECD	; 0x800ecd <nwkDataReqQueue>
    52c0:	f0 91 ce 0e 	lds	r31, 0x0ECE	; 0x800ece <nwkDataReqQueue+0x1>
    52c4:	13 c0       	rjmp	.+38     	; 0x52ec <nwkDataReqTxConf+0x30>
  {
    if (req->frame == frame)
    52c6:	22 81       	ldd	r18, Z+2	; 0x02
    52c8:	33 81       	ldd	r19, Z+3	; 0x03
    52ca:	28 17       	cp	r18, r24
    52cc:	39 07       	cpc	r19, r25
    52ce:	59 f4       	brne	.+22     	; 0x52e6 <nwkDataReqTxConf+0x2a>
    {
      req->status = frame->tx.status;
    52d0:	dc 01       	movw	r26, r24
    52d2:	ad 57       	subi	r26, 0x7D	; 125
    52d4:	bf 4f       	sbci	r27, 0xFF	; 255
    52d6:	2c 91       	ld	r18, X
    52d8:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    52da:	13 96       	adiw	r26, 0x03	; 3
    52dc:	2c 91       	ld	r18, X
    52de:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    52e0:	22 e0       	ldi	r18, 0x02	; 2
    52e2:	24 83       	std	Z+4, r18	; 0x04
      break;
    52e4:	05 c0       	rjmp	.+10     	; 0x52f0 <nwkDataReqTxConf+0x34>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    52e6:	01 90       	ld	r0, Z+
    52e8:	f0 81       	ld	r31, Z
    52ea:	e0 2d       	mov	r30, r0
    52ec:	30 97       	sbiw	r30, 0x00	; 0
    52ee:	59 f7       	brne	.-42     	; 0x52c6 <nwkDataReqTxConf+0xa>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    52f0:	7f c0       	rjmp	.+254    	; 0x53f0 <nwkFrameFree>
    52f2:	08 95       	ret

000052f4 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    52f4:	10 92 ce 0e 	sts	0x0ECE, r1	; 0x800ece <nwkDataReqQueue+0x1>
    52f8:	10 92 cd 0e 	sts	0x0ECD, r1	; 0x800ecd <nwkDataReqQueue>
    52fc:	08 95       	ret

000052fe <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    52fe:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    5300:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    5302:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    5304:	13 82       	std	Z+3, r1	; 0x03
    5306:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    5308:	a9 e7       	ldi	r26, 0x79	; 121
    530a:	b7 e2       	ldi	r27, 0x27	; 39
    530c:	96 96       	adiw	r26, 0x26	; 38
    530e:	8d 91       	ld	r24, X+
    5310:	9c 91       	ld	r25, X
    5312:	97 97       	sbiw	r26, 0x27	; 39
    5314:	01 96       	adiw	r24, 0x01	; 1
    5316:	97 96       	adiw	r26, 0x27	; 39
    5318:	9c 93       	st	X, r25
    531a:	8e 93       	st	-X, r24
    531c:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
    531e:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <nwkDataReqQueue>
    5322:	90 91 ce 0e 	lds	r25, 0x0ECE	; 0x800ece <nwkDataReqQueue+0x1>
    5326:	00 97       	sbiw	r24, 0x00	; 0
    5328:	39 f4       	brne	.+14     	; 0x5338 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    532a:	11 82       	std	Z+1, r1	; 0x01
    532c:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    532e:	f0 93 ce 0e 	sts	0x0ECE, r31	; 0x800ece <nwkDataReqQueue+0x1>
    5332:	e0 93 cd 0e 	sts	0x0ECD, r30	; 0x800ecd <nwkDataReqQueue>
    5336:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    5338:	91 83       	std	Z+1, r25	; 0x01
    533a:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    533c:	f0 93 ce 0e 	sts	0x0ECE, r31	; 0x800ece <nwkDataReqQueue+0x1>
    5340:	e0 93 cd 0e 	sts	0x0ECD, r30	; 0x800ecd <nwkDataReqQueue>
    5344:	08 95       	ret

00005346 <nwkDataReqTaskHandler>:
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    5346:	e0 91 cd 0e 	lds	r30, 0x0ECD	; 0x800ecd <nwkDataReqQueue>
    534a:	f0 91 ce 0e 	lds	r31, 0x0ECE	; 0x800ece <nwkDataReqQueue+0x1>
    534e:	0f c0       	rjmp	.+30     	; 0x536e <nwkDataReqTaskHandler+0x28>
  {
    switch (req->state)
    5350:	84 81       	ldd	r24, Z+4	; 0x04
    5352:	88 23       	and	r24, r24
    5354:	19 f0       	breq	.+6      	; 0x535c <nwkDataReqTaskHandler+0x16>
    5356:	82 30       	cpi	r24, 0x02	; 2
    5358:	21 f0       	breq	.+8      	; 0x5362 <nwkDataReqTaskHandler+0x1c>
    535a:	06 c0       	rjmp	.+12     	; 0x5368 <nwkDataReqTaskHandler+0x22>
    {
      case NWK_DATA_REQ_STATE_INITIAL:
      {
        nwkDataReqSendFrame(req);
    535c:	cf 01       	movw	r24, r30
    535e:	4b cf       	rjmp	.-362    	; 0x51f6 <nwkDataReqSendFrame>
        return;
    5360:	08 95       	ret
      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;

      case NWK_DATA_REQ_STATE_CONFIRM:
      {
        nwkDataReqConfirm(req);
    5362:	cf 01       	movw	r24, r30
    5364:	20 cf       	rjmp	.-448    	; 0x51a6 <nwkDataReqConfirm>
        return;
    5366:	08 95       	ret
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    5368:	01 90       	ld	r0, Z+
    536a:	f0 81       	ld	r31, Z
    536c:	e0 2d       	mov	r30, r0
    536e:	30 97       	sbiw	r30, 0x00	; 0
    5370:	79 f7       	brne	.-34     	; 0x5350 <nwkDataReqTaskHandler+0xa>
    5372:	08 95       	ret

00005374 <nwkFrameInit>:
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    5374:	80 e0       	ldi	r24, 0x00	; 0
    5376:	08 c0       	rjmp	.+16     	; 0x5388 <nwkFrameInit+0x14>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    5378:	99 e8       	ldi	r25, 0x89	; 137
    537a:	89 9f       	mul	r24, r25
    537c:	f0 01       	movw	r30, r0
    537e:	11 24       	eor	r1, r1
    5380:	e1 53       	subi	r30, 0x31	; 49
    5382:	f1 4f       	sbci	r31, 0xF1	; 241
    5384:	10 82       	st	Z, r1
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    5386:	8f 5f       	subi	r24, 0xFF	; 255
    5388:	8e 31       	cpi	r24, 0x1E	; 30
    538a:	b0 f3       	brcs	.-20     	; 0x5378 <nwkFrameInit+0x4>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    538c:	08 95       	ret

0000538e <nwkFrameAlloc>:
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    538e:	80 e0       	ldi	r24, 0x00	; 0
    5390:	2a c0       	rjmp	.+84     	; 0x53e6 <nwkFrameAlloc+0x58>
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    5392:	28 2f       	mov	r18, r24
    5394:	30 e0       	ldi	r19, 0x00	; 0
    5396:	99 e8       	ldi	r25, 0x89	; 137
    5398:	92 9f       	mul	r25, r18
    539a:	f0 01       	movw	r30, r0
    539c:	93 9f       	mul	r25, r19
    539e:	f0 0d       	add	r31, r0
    53a0:	11 24       	eor	r1, r1
    53a2:	e1 53       	subi	r30, 0x31	; 49
    53a4:	f1 4f       	sbci	r31, 0xF1	; 241
    53a6:	90 81       	ld	r25, Z
    53a8:	91 11       	cpse	r25, r1
    53aa:	1c c0       	rjmp	.+56     	; 0x53e4 <nwkFrameAlloc+0x56>
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    53ac:	69 e8       	ldi	r22, 0x89	; 137
    53ae:	62 9f       	mul	r22, r18
    53b0:	a0 01       	movw	r20, r0
    53b2:	63 9f       	mul	r22, r19
    53b4:	50 0d       	add	r21, r0
    53b6:	11 24       	eor	r1, r1
    53b8:	cf 01       	movw	r24, r30
    53ba:	11 92       	st	Z+, r1
    53bc:	6a 95       	dec	r22
    53be:	e9 f7       	brne	.-6      	; 0x53ba <nwkFrameAlloc+0x2c>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    53c0:	20 e1       	ldi	r18, 0x10	; 16
    53c2:	fc 01       	movw	r30, r24
    53c4:	21 83       	std	Z+1, r18	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    53c6:	4f 51       	subi	r20, 0x1F	; 31
    53c8:	51 4f       	sbci	r21, 0xF1	; 241
    53ca:	ef 57       	subi	r30, 0x7F	; 127
    53cc:	ff 4f       	sbci	r31, 0xFF	; 255
    53ce:	51 83       	std	Z+1, r21	; 0x01
    53d0:	40 83       	st	Z, r20
      nwkIb.lock++;
    53d2:	e9 e7       	ldi	r30, 0x79	; 121
    53d4:	f7 e2       	ldi	r31, 0x27	; 39
    53d6:	26 a1       	ldd	r18, Z+38	; 0x26
    53d8:	37 a1       	ldd	r19, Z+39	; 0x27
    53da:	2f 5f       	subi	r18, 0xFF	; 255
    53dc:	3f 4f       	sbci	r19, 0xFF	; 255
    53de:	37 a3       	std	Z+39, r19	; 0x27
    53e0:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    53e2:	08 95       	ret
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    53e4:	8f 5f       	subi	r24, 0xFF	; 255
    53e6:	8e 31       	cpi	r24, 0x1E	; 30
    53e8:	a0 f2       	brcs	.-88     	; 0x5392 <nwkFrameAlloc+0x4>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    53ea:	80 e0       	ldi	r24, 0x00	; 0
    53ec:	90 e0       	ldi	r25, 0x00	; 0
}
    53ee:	08 95       	ret

000053f0 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    53f0:	fc 01       	movw	r30, r24
    53f2:	10 82       	st	Z, r1
  nwkIb.lock--;
    53f4:	e9 e7       	ldi	r30, 0x79	; 121
    53f6:	f7 e2       	ldi	r31, 0x27	; 39
    53f8:	86 a1       	ldd	r24, Z+38	; 0x26
    53fa:	97 a1       	ldd	r25, Z+39	; 0x27
    53fc:	01 97       	sbiw	r24, 0x01	; 1
    53fe:	97 a3       	std	Z+39, r25	; 0x27
    5400:	86 a3       	std	Z+38, r24	; 0x26
    5402:	08 95       	ret

00005404 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    5404:	00 97       	sbiw	r24, 0x00	; 0
    5406:	21 f0       	breq	.+8      	; 0x5410 <nwkFrameNext+0xc>
    frame = nwkFrameFrames;
  else
    frame++;
    5408:	fc 01       	movw	r30, r24
    540a:	e7 57       	subi	r30, 0x77	; 119
    540c:	ff 4f       	sbci	r31, 0xFF	; 255
    540e:	08 c0       	rjmp	.+16     	; 0x5420 <nwkFrameNext+0x1c>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    5410:	ef ec       	ldi	r30, 0xCF	; 207
    5412:	fe e0       	ldi	r31, 0x0E	; 14
    5414:	05 c0       	rjmp	.+10     	; 0x5420 <nwkFrameNext+0x1c>
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    5416:	80 81       	ld	r24, Z
    5418:	81 11       	cpse	r24, r1
    541a:	09 c0       	rjmp	.+18     	; 0x542e <nwkFrameNext+0x2a>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    541c:	e7 57       	subi	r30, 0x77	; 119
    541e:	ff 4f       	sbci	r31, 0xFF	; 255
    5420:	8e e1       	ldi	r24, 0x1E	; 30
    5422:	ed 3d       	cpi	r30, 0xDD	; 221
    5424:	f8 07       	cpc	r31, r24
    5426:	b8 f3       	brcs	.-18     	; 0x5416 <nwkFrameNext+0x12>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    5428:	80 e0       	ldi	r24, 0x00	; 0
    542a:	90 e0       	ldi	r25, 0x00	; 0
    542c:	08 95       	ret
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
    542e:	8e 2f       	mov	r24, r30
    5430:	9f 2f       	mov	r25, r31
  }

  return NULL;
}
    5432:	08 95       	ret

00005434 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    5434:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    5436:	dc 01       	movw	r26, r24
    5438:	ad 57       	subi	r26, 0x7D	; 125
    543a:	bf 4f       	sbci	r27, 0xFF	; 255
    543c:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    543e:	a9 e7       	ldi	r26, 0x79	; 121
    5440:	b7 e2       	ldi	r27, 0x27	; 39
    5442:	14 96       	adiw	r26, 0x04	; 4
    5444:	9c 91       	ld	r25, X
    5446:	14 97       	sbiw	r26, 0x04	; 4
    5448:	9f 5f       	subi	r25, 0xFF	; 255
    544a:	14 96       	adiw	r26, 0x04	; 4
    544c:	9c 93       	st	X, r25
    544e:	14 97       	sbiw	r26, 0x04	; 4
    5450:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    5452:	8d 91       	ld	r24, X+
    5454:	9c 91       	ld	r25, X
    5456:	96 87       	std	Z+14, r25	; 0x0e
    5458:	85 87       	std	Z+13, r24	; 0x0d
    545a:	08 95       	ret

0000545c <nwkRouteNormalizeRanks>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	12 c0       	rjmp	.+36     	; 0x5484 <nwkRouteNormalizeRanks+0x28>
    5460:	29 2f       	mov	r18, r25
    5462:	30 e0       	ldi	r19, 0x00	; 0
    5464:	f9 01       	movw	r30, r18
    5466:	ee 0f       	add	r30, r30
    5468:	ff 1f       	adc	r31, r31
    546a:	ee 0f       	add	r30, r30
    546c:	ff 1f       	adc	r31, r31
    546e:	ee 0f       	add	r30, r30
    5470:	ff 1f       	adc	r31, r31
    5472:	e2 1b       	sub	r30, r18
    5474:	f3 0b       	sbc	r31, r19
    5476:	e3 52       	subi	r30, 0x23	; 35
    5478:	f1 4e       	sbci	r31, 0xE1	; 225
    547a:	85 81       	ldd	r24, Z+5	; 0x05
    547c:	86 95       	lsr	r24
    547e:	8f 5f       	subi	r24, 0xFF	; 255
    5480:	85 83       	std	Z+5, r24	; 0x05
    5482:	9f 5f       	subi	r25, 0xFF	; 255
    5484:	94 36       	cpi	r25, 0x64	; 100
    5486:	60 f3       	brcs	.-40     	; 0x5460 <nwkRouteNormalizeRanks+0x4>
    5488:	08 95       	ret

0000548a <nwkRouteSendRouteError>:
    548a:	df 92       	push	r13
    548c:	ef 92       	push	r14
    548e:	ff 92       	push	r15
    5490:	0f 93       	push	r16
    5492:	1f 93       	push	r17
    5494:	cf 93       	push	r28
    5496:	df 93       	push	r29
    5498:	8c 01       	movw	r16, r24
    549a:	7b 01       	movw	r14, r22
    549c:	d4 2e       	mov	r13, r20
    549e:	77 df       	rcall	.-274    	; 0x538e <nwkFrameAlloc>
    54a0:	ec 01       	movw	r28, r24
    54a2:	00 97       	sbiw	r24, 0x00	; 0
    54a4:	c1 f0       	breq	.+48     	; 0x54d6 <nwkRouteSendRouteError+0x4c>
    54a6:	c6 df       	rcall	.-116    	; 0x5434 <nwkFrameCommandInit>
    54a8:	89 81       	ldd	r24, Y+1	; 0x01
    54aa:	8a 5f       	subi	r24, 0xFA	; 250
    54ac:	89 83       	std	Y+1, r24	; 0x01
    54ae:	fe 01       	movw	r30, r28
    54b0:	e9 57       	subi	r30, 0x79	; 121
    54b2:	ff 4f       	sbci	r31, 0xFF	; 255
    54b4:	11 82       	std	Z+1, r1	; 0x01
    54b6:	10 82       	st	Z, r1
    54b8:	18 8b       	std	Y+16, r17	; 0x10
    54ba:	0f 87       	std	Y+15, r16	; 0x0f
    54bc:	36 97       	sbiw	r30, 0x06	; 6
    54be:	01 90       	ld	r0, Z+
    54c0:	f0 81       	ld	r31, Z
    54c2:	e0 2d       	mov	r30, r0
    54c4:	81 e0       	ldi	r24, 0x01	; 1
    54c6:	80 83       	st	Z, r24
    54c8:	12 83       	std	Z+2, r17	; 0x02
    54ca:	01 83       	std	Z+1, r16	; 0x01
    54cc:	f4 82       	std	Z+4, r15	; 0x04
    54ce:	e3 82       	std	Z+3, r14	; 0x03
    54d0:	d5 82       	std	Z+5, r13	; 0x05
    54d2:	ce 01       	movw	r24, r28
    54d4:	a4 d4       	rcall	.+2376   	; 0x5e1e <nwkTxFrame>
    54d6:	df 91       	pop	r29
    54d8:	cf 91       	pop	r28
    54da:	1f 91       	pop	r17
    54dc:	0f 91       	pop	r16
    54de:	ff 90       	pop	r15
    54e0:	ef 90       	pop	r14
    54e2:	df 90       	pop	r13
    54e4:	08 95       	ret

000054e6 <nwkRouteInit>:
    54e6:	80 e0       	ldi	r24, 0x00	; 0
    54e8:	16 c0       	rjmp	.+44     	; 0x5516 <nwkRouteInit+0x30>
    54ea:	28 2f       	mov	r18, r24
    54ec:	30 e0       	ldi	r19, 0x00	; 0
    54ee:	f9 01       	movw	r30, r18
    54f0:	ee 0f       	add	r30, r30
    54f2:	ff 1f       	adc	r31, r31
    54f4:	ee 0f       	add	r30, r30
    54f6:	ff 1f       	adc	r31, r31
    54f8:	ee 0f       	add	r30, r30
    54fa:	ff 1f       	adc	r31, r31
    54fc:	e2 1b       	sub	r30, r18
    54fe:	f3 0b       	sbc	r31, r19
    5500:	e3 52       	subi	r30, 0x23	; 35
    5502:	f1 4e       	sbci	r31, 0xE1	; 225
    5504:	2f ef       	ldi	r18, 0xFF	; 255
    5506:	3f ef       	ldi	r19, 0xFF	; 255
    5508:	32 83       	std	Z+2, r19	; 0x02
    550a:	21 83       	std	Z+1, r18	; 0x01
    550c:	90 81       	ld	r25, Z
    550e:	9e 7f       	andi	r25, 0xFE	; 254
    5510:	90 83       	st	Z, r25
    5512:	15 82       	std	Z+5, r1	; 0x05
    5514:	8f 5f       	subi	r24, 0xFF	; 255
    5516:	84 36       	cpi	r24, 0x64	; 100
    5518:	40 f3       	brcs	.-48     	; 0x54ea <nwkRouteInit+0x4>
    551a:	08 95       	ret

0000551c <NWK_RouteFindEntry>:
    551c:	cf 93       	push	r28
    551e:	df 93       	push	r29
    5520:	ec 01       	movw	r28, r24
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	2a c0       	rjmp	.+84     	; 0x557a <NWK_RouteFindEntry+0x5e>
    5526:	29 2f       	mov	r18, r25
    5528:	30 e0       	ldi	r19, 0x00	; 0
    552a:	f9 01       	movw	r30, r18
    552c:	ee 0f       	add	r30, r30
    552e:	ff 1f       	adc	r31, r31
    5530:	ee 0f       	add	r30, r30
    5532:	ff 1f       	adc	r31, r31
    5534:	ee 0f       	add	r30, r30
    5536:	ff 1f       	adc	r31, r31
    5538:	e2 1b       	sub	r30, r18
    553a:	f3 0b       	sbc	r31, r19
    553c:	e3 52       	subi	r30, 0x23	; 35
    553e:	f1 4e       	sbci	r31, 0xE1	; 225
    5540:	41 81       	ldd	r20, Z+1	; 0x01
    5542:	52 81       	ldd	r21, Z+2	; 0x02
    5544:	4c 17       	cp	r20, r28
    5546:	5d 07       	cpc	r21, r29
    5548:	b9 f4       	brne	.+46     	; 0x5578 <NWK_RouteFindEntry+0x5c>
    554a:	f9 01       	movw	r30, r18
    554c:	ee 0f       	add	r30, r30
    554e:	ff 1f       	adc	r31, r31
    5550:	ee 0f       	add	r30, r30
    5552:	ff 1f       	adc	r31, r31
    5554:	ee 0f       	add	r30, r30
    5556:	ff 1f       	adc	r31, r31
    5558:	e2 1b       	sub	r30, r18
    555a:	f3 0b       	sbc	r31, r19
    555c:	e3 52       	subi	r30, 0x23	; 35
    555e:	f1 4e       	sbci	r31, 0xE1	; 225
    5560:	80 81       	ld	r24, Z
    5562:	81 fb       	bst	r24, 1
    5564:	aa 27       	eor	r26, r26
    5566:	a0 f9       	bld	r26, 0
    5568:	b0 e0       	ldi	r27, 0x00	; 0
    556a:	46 2f       	mov	r20, r22
    556c:	50 e0       	ldi	r21, 0x00	; 0
    556e:	a4 17       	cp	r26, r20
    5570:	b5 07       	cpc	r27, r21
    5572:	11 f4       	brne	.+4      	; 0x5578 <NWK_RouteFindEntry+0x5c>
    5574:	cf 01       	movw	r24, r30
    5576:	05 c0       	rjmp	.+10     	; 0x5582 <NWK_RouteFindEntry+0x66>
    5578:	9f 5f       	subi	r25, 0xFF	; 255
    557a:	94 36       	cpi	r25, 0x64	; 100
    557c:	a0 f2       	brcs	.-88     	; 0x5526 <NWK_RouteFindEntry+0xa>
    557e:	80 e0       	ldi	r24, 0x00	; 0
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	df 91       	pop	r29
    5584:	cf 91       	pop	r28
    5586:	08 95       	ret

00005588 <NWK_RouteNewEntry>:
    5588:	80 e0       	ldi	r24, 0x00	; 0
    558a:	a0 e0       	ldi	r26, 0x00	; 0
    558c:	b0 e0       	ldi	r27, 0x00	; 0
    558e:	ed ed       	ldi	r30, 0xDD	; 221
    5590:	fe e1       	ldi	r31, 0x1E	; 30
    5592:	13 c0       	rjmp	.+38     	; 0x55ba <NWK_RouteNewEntry+0x32>
    5594:	90 81       	ld	r25, Z
    5596:	90 fd       	sbrc	r25, 0
    5598:	0e c0       	rjmp	.+28     	; 0x55b6 <NWK_RouteNewEntry+0x2e>
    559a:	95 81       	ldd	r25, Z+5	; 0x05
    559c:	99 23       	and	r25, r25
    559e:	81 f0       	breq	.+32     	; 0x55c0 <NWK_RouteNewEntry+0x38>
    55a0:	10 97       	sbiw	r26, 0x00	; 0
    55a2:	31 f0       	breq	.+12     	; 0x55b0 <NWK_RouteNewEntry+0x28>
    55a4:	15 96       	adiw	r26, 0x05	; 5
    55a6:	2c 91       	ld	r18, X
    55a8:	15 97       	sbiw	r26, 0x05	; 5
    55aa:	92 17       	cp	r25, r18
    55ac:	18 f0       	brcs	.+6      	; 0x55b4 <NWK_RouteNewEntry+0x2c>
    55ae:	03 c0       	rjmp	.+6      	; 0x55b6 <NWK_RouteNewEntry+0x2e>
    55b0:	df 01       	movw	r26, r30
    55b2:	01 c0       	rjmp	.+2      	; 0x55b6 <NWK_RouteNewEntry+0x2e>
    55b4:	df 01       	movw	r26, r30
    55b6:	8f 5f       	subi	r24, 0xFF	; 255
    55b8:	37 96       	adiw	r30, 0x07	; 7
    55ba:	84 36       	cpi	r24, 0x64	; 100
    55bc:	58 f3       	brcs	.-42     	; 0x5594 <NWK_RouteNewEntry+0xc>
    55be:	fd 01       	movw	r30, r26
    55c0:	80 81       	ld	r24, Z
    55c2:	8d 70       	andi	r24, 0x0D	; 13
    55c4:	80 63       	ori	r24, 0x30	; 48
    55c6:	80 83       	st	Z, r24
    55c8:	80 e8       	ldi	r24, 0x80	; 128
    55ca:	85 83       	std	Z+5, r24	; 0x05
    55cc:	cf 01       	movw	r24, r30
    55ce:	08 95       	ret

000055d0 <NWK_RouteFreeEntry>:
    55d0:	fc 01       	movw	r30, r24
    55d2:	80 81       	ld	r24, Z
    55d4:	80 fd       	sbrc	r24, 0
    55d6:	05 c0       	rjmp	.+10     	; 0x55e2 <NWK_RouteFreeEntry+0x12>
    55d8:	8f ef       	ldi	r24, 0xFF	; 255
    55da:	9f ef       	ldi	r25, 0xFF	; 255
    55dc:	92 83       	std	Z+2, r25	; 0x02
    55de:	81 83       	std	Z+1, r24	; 0x01
    55e0:	15 82       	std	Z+5, r1	; 0x05
    55e2:	08 95       	ret

000055e4 <NWK_RouteNextHop>:
    55e4:	9b df       	rcall	.-202    	; 0x551c <NWK_RouteFindEntry>
    55e6:	00 97       	sbiw	r24, 0x00	; 0
    55e8:	21 f0       	breq	.+8      	; 0x55f2 <NWK_RouteNextHop+0xe>
    55ea:	fc 01       	movw	r30, r24
    55ec:	83 81       	ldd	r24, Z+3	; 0x03
    55ee:	94 81       	ldd	r25, Z+4	; 0x04
    55f0:	08 95       	ret
    55f2:	8f ef       	ldi	r24, 0xFF	; 255
    55f4:	9f ef       	ldi	r25, 0xFF	; 255
    55f6:	08 95       	ret

000055f8 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    55f8:	91 df       	rcall	.-222    	; 0x551c <NWK_RouteFindEntry>
  if (entry)
    55fa:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
    55fc:	09 f0       	breq	.+2      	; 0x5600 <nwkRouteRemove+0x8>
    55fe:	e8 cf       	rjmp	.-48     	; 0x55d0 <NWK_RouteFreeEntry>
    5600:	08 95       	ret

00005602 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    5602:	0f 93       	push	r16
    5604:	1f 93       	push	r17
    5606:	cf 93       	push	r28
    5608:	df 93       	push	r29
    560a:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    560c:	01 85       	ldd	r16, Z+9	; 0x09
    560e:	12 85       	ldd	r17, Z+10	; 0x0a
    5610:	11 23       	and	r17, r17
    5612:	34 f4       	brge	.+12     	; 0x5620 <nwkRouteFrameReceived+0x1e>
      (header->macSrcAddr != header->nwkSrcAddr))
    5614:	85 85       	ldd	r24, Z+13	; 0x0d
    5616:	96 85       	ldd	r25, Z+14	; 0x0e
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    5618:	08 17       	cp	r16, r24
    561a:	19 07       	cpc	r17, r25
    561c:	09 f0       	breq	.+2      	; 0x5620 <nwkRouteFrameReceived+0x1e>
    561e:	50 c0       	rjmp	.+160    	; 0x56c0 <nwkRouteFrameReceived+0xbe>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    5620:	85 81       	ldd	r24, Z+5	; 0x05
    5622:	96 81       	ldd	r25, Z+6	; 0x06
    5624:	01 96       	adiw	r24, 0x01	; 1
    5626:	09 f4       	brne	.+2      	; 0x562a <nwkRouteFrameReceived+0x28>
    5628:	4b c0       	rjmp	.+150    	; 0x56c0 <nwkRouteFrameReceived+0xbe>
    562a:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    562c:	60 e0       	ldi	r22, 0x00	; 0
    562e:	85 85       	ldd	r24, Z+13	; 0x0d
    5630:	96 85       	ldd	r25, Z+14	; 0x0e
    5632:	74 df       	rcall	.-280    	; 0x551c <NWK_RouteFindEntry>
    5634:	dc 01       	movw	r26, r24

  if (entry)
    5636:	89 2b       	or	r24, r25
    5638:	79 f1       	breq	.+94     	; 0x5698 <nwkRouteFrameReceived+0x96>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    563a:	8f 81       	ldd	r24, Y+7	; 0x07
    563c:	98 85       	ldd	r25, Y+8	; 0x08
    563e:	01 96       	adiw	r24, 0x01	; 1
    5640:	59 f4       	brne	.+22     	; 0x5658 <nwkRouteFrameReceived+0x56>
        nwkIb.addr == header->nwkDstAddr);
    5642:	20 91 79 27 	lds	r18, 0x2779	; 0x802779 <nwkIb>
    5646:	30 91 7a 27 	lds	r19, 0x277A	; 0x80277a <nwkIb+0x1>
    564a:	8f 85       	ldd	r24, Y+15	; 0x0f
    564c:	98 89       	ldd	r25, Y+16	; 0x10

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    564e:	28 17       	cp	r18, r24
    5650:	39 07       	cpc	r19, r25
    5652:	21 f0       	breq	.+8      	; 0x565c <nwkRouteFrameReceived+0x5a>
    5654:	80 e0       	ldi	r24, 0x00	; 0
    5656:	03 c0       	rjmp	.+6      	; 0x565e <nwkRouteFrameReceived+0x5c>
    5658:	80 e0       	ldi	r24, 0x00	; 0
    565a:	01 c0       	rjmp	.+2      	; 0x565e <nwkRouteFrameReceived+0x5c>
    565c:	81 e0       	ldi	r24, 0x01	; 1
    565e:	98 2f       	mov	r25, r24
    5660:	91 70       	andi	r25, 0x01	; 1
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    5662:	13 96       	adiw	r26, 0x03	; 3
    5664:	2d 91       	ld	r18, X+
    5666:	3c 91       	ld	r19, X
    5668:	14 97       	sbiw	r26, 0x04	; 4
    566a:	02 17       	cp	r16, r18
    566c:	13 07       	cpc	r17, r19
    566e:	49 f0       	breq	.+18     	; 0x5682 <nwkRouteFrameReceived+0x80>
    5670:	fe 01       	movw	r30, r28
    5672:	ed 57       	subi	r30, 0x7D	; 125
    5674:	ff 4f       	sbci	r31, 0xFF	; 255
    5676:	20 81       	ld	r18, Z
    5678:	16 96       	adiw	r26, 0x06	; 6
    567a:	8c 91       	ld	r24, X
    567c:	16 97       	sbiw	r26, 0x06	; 6
    567e:	82 17       	cp	r24, r18
    5680:	10 f0       	brcs	.+4      	; 0x5686 <nwkRouteFrameReceived+0x84>
    5682:	99 23       	and	r25, r25
    5684:	b9 f0       	breq	.+46     	; 0x56b4 <nwkRouteFrameReceived+0xb2>
    {
      entry->nextHopAddr = header->macSrcAddr;
    5686:	14 96       	adiw	r26, 0x04	; 4
    5688:	1c 93       	st	X, r17
    568a:	0e 93       	st	-X, r16
    568c:	13 97       	sbiw	r26, 0x03	; 3
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    568e:	8c 91       	ld	r24, X
    5690:	8f 70       	andi	r24, 0x0F	; 15
    5692:	80 63       	ori	r24, 0x30	; 48
    5694:	8c 93       	st	X, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    5696:	0e c0       	rjmp	.+28     	; 0x56b4 <nwkRouteFrameReceived+0xb2>
    5698:	77 df       	rcall	.-274    	; 0x5588 <NWK_RouteNewEntry>
    569a:	dc 01       	movw	r26, r24

    entry->dstAddr = header->nwkSrcAddr;
    569c:	8d 85       	ldd	r24, Y+13	; 0x0d
    569e:	9e 85       	ldd	r25, Y+14	; 0x0e
    56a0:	12 96       	adiw	r26, 0x02	; 2
    56a2:	9c 93       	st	X, r25
    56a4:	8e 93       	st	-X, r24
    56a6:	11 97       	sbiw	r26, 0x01	; 1
    entry->nextHopAddr = header->macSrcAddr;
    56a8:	89 85       	ldd	r24, Y+9	; 0x09
    56aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    56ac:	14 96       	adiw	r26, 0x04	; 4
    56ae:	9c 93       	st	X, r25
    56b0:	8e 93       	st	-X, r24
    56b2:	13 97       	sbiw	r26, 0x03	; 3
  }

  entry->lqi = frame->rx.lqi;
    56b4:	fe 01       	movw	r30, r28
    56b6:	ed 57       	subi	r30, 0x7D	; 125
    56b8:	ff 4f       	sbci	r31, 0xFF	; 255
    56ba:	80 81       	ld	r24, Z
    56bc:	16 96       	adiw	r26, 0x06	; 6
    56be:	8c 93       	st	X, r24
#else
  (void)frame;
#endif
}
    56c0:	df 91       	pop	r29
    56c2:	cf 91       	pop	r28
    56c4:	1f 91       	pop	r17
    56c6:	0f 91       	pop	r16
    56c8:	08 95       	ret

000056ca <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    56ca:	cf 93       	push	r28
    56cc:	df 93       	push	r29
    56ce:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    56d0:	87 85       	ldd	r24, Z+15	; 0x0f
    56d2:	90 89       	ldd	r25, Z+16	; 0x10
    56d4:	8f 3f       	cpi	r24, 0xFF	; 255
    56d6:	2f ef       	ldi	r18, 0xFF	; 255
    56d8:	92 07       	cpc	r25, r18
    56da:	81 f1       	breq	.+96     	; 0x573c <nwkRouteFrameSent+0x72>
    56dc:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    56de:	63 85       	ldd	r22, Z+11	; 0x0b
    56e0:	63 fb       	bst	r22, 3
    56e2:	66 27       	eor	r22, r22
    56e4:	60 f9       	bld	r22, 0
    56e6:	1a df       	rcall	.-460    	; 0x551c <NWK_RouteFindEntry>
    56e8:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
    56ea:	89 2b       	or	r24, r25
    56ec:	39 f1       	breq	.+78     	; 0x573c <nwkRouteFrameSent+0x72>
    56ee:	8c 91       	ld	r24, X
    56f0:	80 fd       	sbrc	r24, 0
    56f2:	24 c0       	rjmp	.+72     	; 0x573c <nwkRouteFrameSent+0x72>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    56f4:	fe 01       	movw	r30, r28
    56f6:	ed 57       	subi	r30, 0x7D	; 125
    56f8:	ff 4f       	sbci	r31, 0xFF	; 255
    56fa:	80 81       	ld	r24, Z
    56fc:	81 11       	cpse	r24, r1
    56fe:	0e c0       	rjmp	.+28     	; 0x571c <nwkRouteFrameSent+0x52>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    5700:	8c 91       	ld	r24, X
    5702:	8f 70       	andi	r24, 0x0F	; 15
    5704:	80 63       	ori	r24, 0x30	; 48
    5706:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    5708:	15 96       	adiw	r26, 0x05	; 5
    570a:	8c 91       	ld	r24, X
    570c:	15 97       	sbiw	r26, 0x05	; 5
    570e:	8f 5f       	subi	r24, 0xFF	; 255
    5710:	15 96       	adiw	r26, 0x05	; 5
    5712:	8c 93       	st	X, r24
    5714:	8f 3f       	cpi	r24, 0xFF	; 255
      nwkRouteNormalizeRanks();
    5716:	91 f4       	brne	.+36     	; 0x573c <nwkRouteFrameSent+0x72>
    5718:	a1 de       	rcall	.-702    	; 0x545c <nwkRouteNormalizeRanks>
    571a:	10 c0       	rjmp	.+32     	; 0x573c <nwkRouteFrameSent+0x72>
  }
  else
  {
    if (0 == --entry->score)
    571c:	9c 91       	ld	r25, X
    571e:	89 2f       	mov	r24, r25
    5720:	82 95       	swap	r24
    5722:	8f 70       	andi	r24, 0x0F	; 15
    5724:	81 5f       	subi	r24, 0xF1	; 241
    5726:	8f 70       	andi	r24, 0x0F	; 15
    5728:	28 2f       	mov	r18, r24
    572a:	22 95       	swap	r18
    572c:	20 7f       	andi	r18, 0xF0	; 240
    572e:	9f 70       	andi	r25, 0x0F	; 15
    5730:	92 2b       	or	r25, r18
    5732:	9c 93       	st	X, r25
    5734:	81 11       	cpse	r24, r1
      NWK_RouteFreeEntry(entry);
    5736:	02 c0       	rjmp	.+4      	; 0x573c <nwkRouteFrameSent+0x72>
    5738:	cd 01       	movw	r24, r26
    573a:	4a df       	rcall	.-364    	; 0x55d0 <NWK_RouteFreeEntry>
  }
}
    573c:	df 91       	pop	r29
    573e:	cf 91       	pop	r28
    5740:	08 95       	ret

00005742 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    5742:	cf 93       	push	r28
    5744:	df 93       	push	r29
    5746:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    5748:	87 85       	ldd	r24, Z+15	; 0x0f
    574a:	90 89       	ldd	r25, Z+16	; 0x10
    574c:	8f 3f       	cpi	r24, 0xFF	; 255
    574e:	2f ef       	ldi	r18, 0xFF	; 255
    5750:	92 07       	cpc	r25, r18
    5752:	29 f4       	brne	.+10     	; 0x575e <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    5754:	8f ef       	ldi	r24, 0xFF	; 255
    5756:	9f ef       	ldi	r25, 0xFF	; 255
    5758:	90 87       	std	Z+8, r25	; 0x08
    575a:	87 83       	std	Z+7, r24	; 0x07
    575c:	0e c0       	rjmp	.+28     	; 0x577a <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
    575e:	23 85       	ldd	r18, Z+11	; 0x0b
    5760:	22 ff       	sbrs	r18, 2
    5762:	03 c0       	rjmp	.+6      	; 0x576a <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
    5764:	90 87       	std	Z+8, r25	; 0x08
    5766:	87 83       	std	Z+7, r24	; 0x07
    5768:	08 c0       	rjmp	.+16     	; 0x577a <nwkRoutePrepareTx+0x38>
    576a:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    576c:	63 85       	ldd	r22, Z+11	; 0x0b
    576e:	63 fb       	bst	r22, 3
    5770:	66 27       	eor	r22, r22
    5772:	60 f9       	bld	r22, 0
    5774:	37 df       	rcall	.-402    	; 0x55e4 <NWK_RouteNextHop>
    5776:	98 87       	std	Y+8, r25	; 0x08
    5778:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    577a:	df 91       	pop	r29
    577c:	cf 91       	pop	r28
    577e:	08 95       	ret

00005780 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    5780:	ef 92       	push	r14
    5782:	ff 92       	push	r15
    5784:	1f 93       	push	r17
    5786:	cf 93       	push	r28
    5788:	df 93       	push	r29
    578a:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    578c:	1b 85       	ldd	r17, Y+11	; 0x0b
    578e:	13 fb       	bst	r17, 3
    5790:	11 27       	eor	r17, r17
    5792:	10 f9       	bld	r17, 0
    5794:	ef 84       	ldd	r14, Y+15	; 0x0f
    5796:	f8 88       	ldd	r15, Y+16	; 0x10
    5798:	61 2f       	mov	r22, r17
    579a:	c7 01       	movw	r24, r14
    579c:	23 df       	rcall	.-442    	; 0x55e4 <NWK_RouteNextHop>
    579e:	01 96       	adiw	r24, 0x01	; 1
    57a0:	59 f0       	breq	.+22     	; 0x57b8 <nwkRouteFrame+0x38>
  {
    frame->tx.confirm = NULL;
    57a2:	fe 01       	movw	r30, r28
    57a4:	e9 57       	subi	r30, 0x79	; 121
    57a6:	ff 4f       	sbci	r31, 0xFF	; 255
    57a8:	11 82       	std	Z+1, r1	; 0x01
    57aa:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    57ac:	31 97       	sbiw	r30, 0x01	; 1
    57ae:	82 e0       	ldi	r24, 0x02	; 2
    57b0:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    57b2:	ce 01       	movw	r24, r28
    57b4:	34 d3       	rcall	.+1640   	; 0x5e1e <nwkTxFrame>
    57b6:	07 c0       	rjmp	.+14     	; 0x57c6 <nwkRouteFrame+0x46>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    57b8:	41 2f       	mov	r20, r17
    57ba:	b7 01       	movw	r22, r14
    57bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    57be:	9e 85       	ldd	r25, Y+14	; 0x0e
    nwkFrameFree(frame);
    57c0:	64 de       	rcall	.-824    	; 0x548a <nwkRouteSendRouteError>
    57c2:	ce 01       	movw	r24, r28
    57c4:	15 de       	rcall	.-982    	; 0x53f0 <nwkFrameFree>
  }
}
    57c6:	df 91       	pop	r29
    57c8:	cf 91       	pop	r28
    57ca:	1f 91       	pop	r17
    57cc:	ff 90       	pop	r15
    57ce:	ef 90       	pop	r14
    57d0:	08 95       	ret

000057d2 <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    57d2:	dc 01       	movw	r26, r24
    57d4:	17 96       	adiw	r26, 0x07	; 7
    57d6:	ed 91       	ld	r30, X+
    57d8:	fc 91       	ld	r31, X
    57da:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    57dc:	19 96       	adiw	r26, 0x09	; 9
    57de:	8c 91       	ld	r24, X
    57e0:	86 30       	cpi	r24, 0x06	; 6
    57e2:	31 f4       	brne	.+12     	; 0x57f0 <nwkRouteErrorReceived+0x1e>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    57e4:	65 81       	ldd	r22, Z+5	; 0x05
    57e6:	83 81       	ldd	r24, Z+3	; 0x03
    57e8:	94 81       	ldd	r25, Z+4	; 0x04
    57ea:	06 df       	rcall	.-500    	; 0x55f8 <nwkRouteRemove>

  return true;
    57ec:	81 e0       	ldi	r24, 0x01	; 1
    57ee:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    57f0:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    57f2:	08 95       	ret

000057f4 <nwkRxIndicateFrame>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    57f4:	ef 92       	push	r14
    57f6:	ff 92       	push	r15
    57f8:	0f 93       	push	r16
    57fa:	1f 93       	push	r17
    57fc:	cf 93       	push	r28
    57fe:	df 93       	push	r29
    5800:	cd b7       	in	r28, 0x3d	; 61
    5802:	de b7       	in	r29, 0x3e	; 62
    5804:	2c 97       	sbiw	r28, 0x0c	; 12
    5806:	0f b6       	in	r0, 0x3f	; 63
    5808:	f8 94       	cli
    580a:	de bf       	out	0x3e, r29	; 62
    580c:	0f be       	out	0x3f, r0	; 63
    580e:	cd bf       	out	0x3d, r28	; 61
    5810:	dc 01       	movw	r26, r24
    5812:	51 96       	adiw	r26, 0x11	; 17
    5814:	8c 91       	ld	r24, X
    5816:	51 97       	sbiw	r26, 0x11	; 17
    5818:	82 95       	swap	r24
    581a:	8f 70       	andi	r24, 0x0F	; 15
    581c:	e8 2f       	mov	r30, r24
    581e:	f0 e0       	ldi	r31, 0x00	; 0
    5820:	33 96       	adiw	r30, 0x03	; 3
    5822:	ee 0f       	add	r30, r30
    5824:	ff 1f       	adc	r31, r31
    5826:	e7 58       	subi	r30, 0x87	; 135
    5828:	f8 4d       	sbci	r31, 0xD8	; 216
    582a:	e0 80       	ld	r14, Z
    582c:	f1 80       	ldd	r15, Z+1	; 0x01
    582e:	e1 14       	cp	r14, r1
    5830:	f1 04       	cpc	r15, r1
    5832:	09 f4       	brne	.+2      	; 0x5836 <nwkRxIndicateFrame+0x42>
    5834:	67 c0       	rjmp	.+206    	; 0x5904 <nwkRxIndicateFrame+0x110>
    5836:	1d 96       	adiw	r26, 0x0d	; 13
    5838:	4d 91       	ld	r20, X+
    583a:	5c 91       	ld	r21, X
    583c:	1e 97       	sbiw	r26, 0x0e	; 14
    583e:	5a 83       	std	Y+2, r21	; 0x02
    5840:	49 83       	std	Y+1, r20	; 0x01
    5842:	1f 96       	adiw	r26, 0x0f	; 15
    5844:	6d 91       	ld	r22, X+
    5846:	7c 91       	ld	r23, X
    5848:	50 97       	sbiw	r26, 0x10	; 16
    584a:	7c 83       	std	Y+4, r23	; 0x04
    584c:	6b 83       	std	Y+3, r22	; 0x03
    584e:	51 96       	adiw	r26, 0x11	; 17
    5850:	9c 91       	ld	r25, X
    5852:	51 97       	sbiw	r26, 0x11	; 17
    5854:	9f 70       	andi	r25, 0x0F	; 15
    5856:	9d 83       	std	Y+5, r25	; 0x05
    5858:	8e 83       	std	Y+6, r24	; 0x06
    585a:	cd 01       	movw	r24, r26
    585c:	8f 57       	subi	r24, 0x7F	; 127
    585e:	9f 4f       	sbci	r25, 0xFF	; 255
    5860:	fc 01       	movw	r30, r24
    5862:	80 81       	ld	r24, Z
    5864:	91 81       	ldd	r25, Z+1	; 0x01
    5866:	99 87       	std	Y+9, r25	; 0x09
    5868:	88 87       	std	Y+8, r24	; 0x08
    586a:	11 96       	adiw	r26, 0x01	; 1
    586c:	2c 91       	ld	r18, X
    586e:	11 97       	sbiw	r26, 0x01	; 1
    5870:	8d 01       	movw	r16, r26
    5872:	0e 5f       	subi	r16, 0xFE	; 254
    5874:	1f 4f       	sbci	r17, 0xFF	; 255
    5876:	80 1b       	sub	r24, r16
    5878:	91 0b       	sbc	r25, r17
    587a:	28 1b       	sub	r18, r24
    587c:	2a 87       	std	Y+10, r18	; 0x0a
    587e:	cd 01       	movw	r24, r26
    5880:	8d 57       	subi	r24, 0x7D	; 125
    5882:	9f 4f       	sbci	r25, 0xFF	; 255
    5884:	fc 01       	movw	r30, r24
    5886:	80 81       	ld	r24, Z
    5888:	8b 87       	std	Y+11, r24	; 0x0b
    588a:	cd 01       	movw	r24, r26
    588c:	8c 57       	subi	r24, 0x7C	; 124
    588e:	9f 4f       	sbci	r25, 0xFF	; 255
    5890:	fc 01       	movw	r30, r24
    5892:	80 81       	ld	r24, Z
    5894:	8c 87       	std	Y+12, r24	; 0x0c
    5896:	1b 96       	adiw	r26, 0x0b	; 11
    5898:	2c 91       	ld	r18, X
    589a:	1b 97       	sbiw	r26, 0x0b	; 11
    589c:	92 2f       	mov	r25, r18
    589e:	91 70       	andi	r25, 0x01	; 1
    58a0:	82 2f       	mov	r24, r18
    58a2:	82 70       	andi	r24, 0x02	; 2
    58a4:	98 2b       	or	r25, r24
    58a6:	22 ff       	sbrs	r18, 2
    58a8:	02 c0       	rjmp	.+4      	; 0x58ae <nwkRxIndicateFrame+0xba>
    58aa:	80 e2       	ldi	r24, 0x20	; 32
    58ac:	01 c0       	rjmp	.+2      	; 0x58b0 <nwkRxIndicateFrame+0xbc>
    58ae:	80 e0       	ldi	r24, 0x00	; 0
    58b0:	98 2b       	or	r25, r24
    58b2:	23 ff       	sbrs	r18, 3
    58b4:	02 c0       	rjmp	.+4      	; 0x58ba <nwkRxIndicateFrame+0xc6>
    58b6:	80 e4       	ldi	r24, 0x40	; 64
    58b8:	01 c0       	rjmp	.+2      	; 0x58bc <nwkRxIndicateFrame+0xc8>
    58ba:	80 e0       	ldi	r24, 0x00	; 0
    58bc:	98 2b       	or	r25, r24
    58be:	6f 3f       	cpi	r22, 0xFF	; 255
    58c0:	7f 4f       	sbci	r23, 0xFF	; 255
    58c2:	11 f4       	brne	.+4      	; 0x58c8 <nwkRxIndicateFrame+0xd4>
    58c4:	84 e0       	ldi	r24, 0x04	; 4
    58c6:	01 c0       	rjmp	.+2      	; 0x58ca <nwkRxIndicateFrame+0xd6>
    58c8:	80 e0       	ldi	r24, 0x00	; 0
    58ca:	98 2b       	or	r25, r24
    58cc:	19 96       	adiw	r26, 0x09	; 9
    58ce:	2d 91       	ld	r18, X+
    58d0:	3c 91       	ld	r19, X
    58d2:	1a 97       	sbiw	r26, 0x0a	; 10
    58d4:	42 17       	cp	r20, r18
    58d6:	53 07       	cpc	r21, r19
    58d8:	11 f4       	brne	.+4      	; 0x58de <nwkRxIndicateFrame+0xea>
    58da:	88 e0       	ldi	r24, 0x08	; 8
    58dc:	01 c0       	rjmp	.+2      	; 0x58e0 <nwkRxIndicateFrame+0xec>
    58de:	80 e0       	ldi	r24, 0x00	; 0
    58e0:	98 2b       	or	r25, r24
    58e2:	15 96       	adiw	r26, 0x05	; 5
    58e4:	2d 91       	ld	r18, X+
    58e6:	3c 91       	ld	r19, X
    58e8:	16 97       	sbiw	r26, 0x06	; 6
    58ea:	2f 3f       	cpi	r18, 0xFF	; 255
    58ec:	3f 4f       	sbci	r19, 0xFF	; 255
    58ee:	11 f4       	brne	.+4      	; 0x58f4 <nwkRxIndicateFrame+0x100>
    58f0:	80 e1       	ldi	r24, 0x10	; 16
    58f2:	01 c0       	rjmp	.+2      	; 0x58f6 <nwkRxIndicateFrame+0x102>
    58f4:	80 e0       	ldi	r24, 0x00	; 0
    58f6:	89 2b       	or	r24, r25
    58f8:	8f 83       	std	Y+7, r24	; 0x07
    58fa:	ce 01       	movw	r24, r28
    58fc:	01 96       	adiw	r24, 0x01	; 1
    58fe:	f7 01       	movw	r30, r14
    5900:	19 95       	eicall
    5902:	01 c0       	rjmp	.+2      	; 0x5906 <nwkRxIndicateFrame+0x112>
    5904:	80 e0       	ldi	r24, 0x00	; 0
    5906:	2c 96       	adiw	r28, 0x0c	; 12
    5908:	0f b6       	in	r0, 0x3f	; 63
    590a:	f8 94       	cli
    590c:	de bf       	out	0x3e, r29	; 62
    590e:	0f be       	out	0x3f, r0	; 63
    5910:	cd bf       	out	0x3d, r28	; 61
    5912:	df 91       	pop	r29
    5914:	cf 91       	pop	r28
    5916:	1f 91       	pop	r17
    5918:	0f 91       	pop	r16
    591a:	ff 90       	pop	r15
    591c:	ef 90       	pop	r14
    591e:	08 95       	ret

00005920 <nwkRxServiceDataInd>:
    5920:	dc 01       	movw	r26, r24
    5922:	19 96       	adiw	r26, 0x09	; 9
    5924:	2c 91       	ld	r18, X
    5926:	19 97       	sbiw	r26, 0x09	; 9
    5928:	22 23       	and	r18, r18
    592a:	71 f0       	breq	.+28     	; 0x5948 <nwkRxServiceDataInd+0x28>
    592c:	17 96       	adiw	r26, 0x07	; 7
    592e:	ed 91       	ld	r30, X+
    5930:	fc 91       	ld	r31, X
    5932:	18 97       	sbiw	r26, 0x08	; 8
    5934:	20 81       	ld	r18, Z
    5936:	22 23       	and	r18, r18
    5938:	19 f0       	breq	.+6      	; 0x5940 <nwkRxServiceDataInd+0x20>
    593a:	21 30       	cpi	r18, 0x01	; 1
    593c:	19 f0       	breq	.+6      	; 0x5944 <nwkRxServiceDataInd+0x24>
    593e:	06 c0       	rjmp	.+12     	; 0x594c <nwkRxServiceDataInd+0x2c>
    5940:	04 c3       	rjmp	.+1544   	; 0x5f4a <nwkTxAckReceived>
    5942:	08 95       	ret
    5944:	46 cf       	rjmp	.-372    	; 0x57d2 <nwkRouteErrorReceived>
    5946:	08 95       	ret
    5948:	80 e0       	ldi	r24, 0x00	; 0
    594a:	08 95       	ret
    594c:	80 e0       	ldi	r24, 0x00	; 0
    594e:	08 95       	ret

00005950 <nwkRxDuplicateRejectionTimerHandler>:
    5950:	bc 01       	movw	r22, r24
    5952:	90 e0       	ldi	r25, 0x00	; 0
    5954:	80 e0       	ldi	r24, 0x00	; 0
    5956:	1c c0       	rjmp	.+56     	; 0x5990 <nwkRxDuplicateRejectionTimerHandler+0x40>
    5958:	29 2f       	mov	r18, r25
    595a:	30 e0       	ldi	r19, 0x00	; 0
    595c:	f9 01       	movw	r30, r18
    595e:	ee 0f       	add	r30, r30
    5960:	ff 1f       	adc	r31, r31
    5962:	ee 0f       	add	r30, r30
    5964:	ff 1f       	adc	r31, r31
    5966:	e2 0f       	add	r30, r18
    5968:	f3 1f       	adc	r31, r19
    596a:	e9 55       	subi	r30, 0x59	; 89
    596c:	fe 4d       	sbci	r31, 0xDE	; 222
    596e:	44 81       	ldd	r20, Z+4	; 0x04
    5970:	44 23       	and	r20, r20
    5972:	69 f0       	breq	.+26     	; 0x598e <nwkRxDuplicateRejectionTimerHandler+0x3e>
    5974:	f9 01       	movw	r30, r18
    5976:	ee 0f       	add	r30, r30
    5978:	ff 1f       	adc	r31, r31
    597a:	ee 0f       	add	r30, r30
    597c:	ff 1f       	adc	r31, r31
    597e:	2e 0f       	add	r18, r30
    5980:	3f 1f       	adc	r19, r31
    5982:	f9 01       	movw	r30, r18
    5984:	e9 55       	subi	r30, 0x59	; 89
    5986:	fe 4d       	sbci	r31, 0xDE	; 222
    5988:	41 50       	subi	r20, 0x01	; 1
    598a:	44 83       	std	Z+4, r20	; 0x04
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	9f 5f       	subi	r25, 0xFF	; 255
    5990:	9a 30       	cpi	r25, 0x0A	; 10
    5992:	10 f3       	brcs	.-60     	; 0x5958 <nwkRxDuplicateRejectionTimerHandler+0x8>
    5994:	88 23       	and	r24, r24
    5996:	11 f0       	breq	.+4      	; 0x599c <nwkRxDuplicateRejectionTimerHandler+0x4c>
    5998:	cb 01       	movw	r24, r22
    599a:	93 c5       	rjmp	.+2854   	; 0x64c2 <SYS_TimerStart>
    599c:	08 95       	ret

0000599e <nwkRxRejectDuplicate>:
    599e:	0f 93       	push	r16
    59a0:	1f 93       	push	r17
    59a2:	cf 93       	push	r28
    59a4:	df 93       	push	r29
    59a6:	ec 01       	movw	r28, r24
    59a8:	90 e0       	ldi	r25, 0x00	; 0
    59aa:	60 e0       	ldi	r22, 0x00	; 0
    59ac:	70 e0       	ldi	r23, 0x00	; 0
    59ae:	80 c0       	rjmp	.+256    	; 0x5ab0 <nwkRxRejectDuplicate+0x112>
    59b0:	29 2f       	mov	r18, r25
    59b2:	30 e0       	ldi	r19, 0x00	; 0
    59b4:	f9 01       	movw	r30, r18
    59b6:	ee 0f       	add	r30, r30
    59b8:	ff 1f       	adc	r31, r31
    59ba:	ee 0f       	add	r30, r30
    59bc:	ff 1f       	adc	r31, r31
    59be:	e2 0f       	add	r30, r18
    59c0:	f3 1f       	adc	r31, r19
    59c2:	e9 55       	subi	r30, 0x59	; 89
    59c4:	fe 4d       	sbci	r31, 0xDE	; 222
    59c6:	44 81       	ldd	r20, Z+4	; 0x04
    59c8:	44 23       	and	r20, r20
    59ca:	09 f4       	brne	.+2      	; 0x59ce <nwkRxRejectDuplicate+0x30>
    59cc:	6d c0       	rjmp	.+218    	; 0x5aa8 <nwkRxRejectDuplicate+0x10a>
    59ce:	0b 85       	ldd	r16, Y+11	; 0x0b
    59d0:	1c 85       	ldd	r17, Y+12	; 0x0c
    59d2:	a0 81       	ld	r26, Z
    59d4:	b1 81       	ldd	r27, Z+1	; 0x01
    59d6:	0a 17       	cp	r16, r26
    59d8:	1b 07       	cpc	r17, r27
    59da:	09 f0       	breq	.+2      	; 0x59de <nwkRxRejectDuplicate+0x40>
    59dc:	65 c0       	rjmp	.+202    	; 0x5aa8 <nwkRxRejectDuplicate+0x10a>
    59de:	f9 01       	movw	r30, r18
    59e0:	ee 0f       	add	r30, r30
    59e2:	ff 1f       	adc	r31, r31
    59e4:	ee 0f       	add	r30, r30
    59e6:	ff 1f       	adc	r31, r31
    59e8:	e2 0f       	add	r30, r18
    59ea:	f3 1f       	adc	r31, r19
    59ec:	e9 55       	subi	r30, 0x59	; 89
    59ee:	fe 4d       	sbci	r31, 0xDE	; 222
    59f0:	82 81       	ldd	r24, Z+2	; 0x02
    59f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    59f4:	89 1b       	sub	r24, r25
    59f6:	88 30       	cpi	r24, 0x08	; 8
    59f8:	e0 f5       	brcc	.+120    	; 0x5a72 <nwkRxRejectDuplicate+0xd4>
    59fa:	f9 01       	movw	r30, r18
    59fc:	ee 0f       	add	r30, r30
    59fe:	ff 1f       	adc	r31, r31
    5a00:	ee 0f       	add	r30, r30
    5a02:	ff 1f       	adc	r31, r31
    5a04:	e2 0f       	add	r30, r18
    5a06:	f3 1f       	adc	r31, r19
    5a08:	e9 55       	subi	r30, 0x59	; 89
    5a0a:	fe 4d       	sbci	r31, 0xDE	; 222
    5a0c:	93 81       	ldd	r25, Z+3	; 0x03
    5a0e:	49 2f       	mov	r20, r25
    5a10:	50 e0       	ldi	r21, 0x00	; 0
    5a12:	08 2e       	mov	r0, r24
    5a14:	02 c0       	rjmp	.+4      	; 0x5a1a <nwkRxRejectDuplicate+0x7c>
    5a16:	55 95       	asr	r21
    5a18:	47 95       	ror	r20
    5a1a:	0a 94       	dec	r0
    5a1c:	e2 f7       	brpl	.-8      	; 0x5a16 <nwkRxRejectDuplicate+0x78>
    5a1e:	40 ff       	sbrs	r20, 0
    5a20:	13 c0       	rjmp	.+38     	; 0x5a48 <nwkRxRejectDuplicate+0xaa>
    5a22:	20 91 79 27 	lds	r18, 0x2779	; 0x802779 <nwkIb>
    5a26:	30 91 7a 27 	lds	r19, 0x277A	; 0x80277a <nwkIb+0x1>
    5a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    5a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    5a2e:	28 17       	cp	r18, r24
    5a30:	39 07       	cpc	r19, r25
    5a32:	09 f0       	breq	.+2      	; 0x5a36 <nwkRxRejectDuplicate+0x98>
    5a34:	53 c0       	rjmp	.+166    	; 0x5adc <nwkRxRejectDuplicate+0x13e>
    5a36:	69 85       	ldd	r22, Y+9	; 0x09
    5a38:	63 fb       	bst	r22, 3
    5a3a:	66 27       	eor	r22, r22
    5a3c:	60 f9       	bld	r22, 0
    5a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a42:	da dd       	rcall	.-1100   	; 0x55f8 <nwkRouteRemove>
    5a44:	81 e0       	ldi	r24, 0x01	; 1
    5a46:	4d c0       	rjmp	.+154    	; 0x5ae2 <nwkRxRejectDuplicate+0x144>
    5a48:	41 e0       	ldi	r20, 0x01	; 1
    5a4a:	50 e0       	ldi	r21, 0x00	; 0
    5a4c:	02 c0       	rjmp	.+4      	; 0x5a52 <nwkRxRejectDuplicate+0xb4>
    5a4e:	44 0f       	add	r20, r20
    5a50:	55 1f       	adc	r21, r21
    5a52:	8a 95       	dec	r24
    5a54:	e2 f7       	brpl	.-8      	; 0x5a4e <nwkRxRejectDuplicate+0xb0>
    5a56:	f9 01       	movw	r30, r18
    5a58:	ee 0f       	add	r30, r30
    5a5a:	ff 1f       	adc	r31, r31
    5a5c:	ee 0f       	add	r30, r30
    5a5e:	ff 1f       	adc	r31, r31
    5a60:	2e 0f       	add	r18, r30
    5a62:	3f 1f       	adc	r19, r31
    5a64:	f9 01       	movw	r30, r18
    5a66:	e9 55       	subi	r30, 0x59	; 89
    5a68:	fe 4d       	sbci	r31, 0xDE	; 222
    5a6a:	94 2b       	or	r25, r20
    5a6c:	93 83       	std	Z+3, r25	; 0x03
    5a6e:	80 e0       	ldi	r24, 0x00	; 0
    5a70:	38 c0       	rjmp	.+112    	; 0x5ae2 <nwkRxRejectDuplicate+0x144>
    5a72:	81 95       	neg	r24
    5a74:	f9 01       	movw	r30, r18
    5a76:	ee 0f       	add	r30, r30
    5a78:	ff 1f       	adc	r31, r31
    5a7a:	ee 0f       	add	r30, r30
    5a7c:	ff 1f       	adc	r31, r31
    5a7e:	2e 0f       	add	r18, r30
    5a80:	3f 1f       	adc	r19, r31
    5a82:	f9 01       	movw	r30, r18
    5a84:	e9 55       	subi	r30, 0x59	; 89
    5a86:	fe 4d       	sbci	r31, 0xDE	; 222
    5a88:	92 83       	std	Z+2, r25	; 0x02
    5a8a:	23 81       	ldd	r18, Z+3	; 0x03
    5a8c:	30 e0       	ldi	r19, 0x00	; 0
    5a8e:	a9 01       	movw	r20, r18
    5a90:	02 c0       	rjmp	.+4      	; 0x5a96 <nwkRxRejectDuplicate+0xf8>
    5a92:	44 0f       	add	r20, r20
    5a94:	55 1f       	adc	r21, r21
    5a96:	8a 95       	dec	r24
    5a98:	e2 f7       	brpl	.-8      	; 0x5a92 <nwkRxRejectDuplicate+0xf4>
    5a9a:	ca 01       	movw	r24, r20
    5a9c:	81 60       	ori	r24, 0x01	; 1
    5a9e:	83 83       	std	Z+3, r24	; 0x03
    5aa0:	8f e1       	ldi	r24, 0x1F	; 31
    5aa2:	84 83       	std	Z+4, r24	; 0x04
    5aa4:	80 e0       	ldi	r24, 0x00	; 0
    5aa6:	1d c0       	rjmp	.+58     	; 0x5ae2 <nwkRxRejectDuplicate+0x144>
    5aa8:	41 11       	cpse	r20, r1
    5aaa:	01 c0       	rjmp	.+2      	; 0x5aae <nwkRxRejectDuplicate+0x110>
    5aac:	bf 01       	movw	r22, r30
    5aae:	9f 5f       	subi	r25, 0xFF	; 255
    5ab0:	9a 30       	cpi	r25, 0x0A	; 10
    5ab2:	08 f4       	brcc	.+2      	; 0x5ab6 <nwkRxRejectDuplicate+0x118>
    5ab4:	7d cf       	rjmp	.-262    	; 0x59b0 <nwkRxRejectDuplicate+0x12>
    5ab6:	61 15       	cp	r22, r1
    5ab8:	71 05       	cpc	r23, r1
    5aba:	91 f0       	breq	.+36     	; 0x5ae0 <nwkRxRejectDuplicate+0x142>
    5abc:	8b 85       	ldd	r24, Y+11	; 0x0b
    5abe:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ac0:	fb 01       	movw	r30, r22
    5ac2:	91 83       	std	Z+1, r25	; 0x01
    5ac4:	80 83       	st	Z, r24
    5ac6:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ac8:	82 83       	std	Z+2, r24	; 0x02
    5aca:	81 e0       	ldi	r24, 0x01	; 1
    5acc:	83 83       	std	Z+3, r24	; 0x03
    5ace:	8f e1       	ldi	r24, 0x1F	; 31
    5ad0:	84 83       	std	Z+4, r24	; 0x04
    5ad2:	89 e9       	ldi	r24, 0x99	; 153
    5ad4:	91 e2       	ldi	r25, 0x21	; 33
    5ad6:	f5 d4       	rcall	.+2538   	; 0x64c2 <SYS_TimerStart>
    5ad8:	80 e0       	ldi	r24, 0x00	; 0
    5ada:	03 c0       	rjmp	.+6      	; 0x5ae2 <nwkRxRejectDuplicate+0x144>
    5adc:	81 e0       	ldi	r24, 0x01	; 1
    5ade:	01 c0       	rjmp	.+2      	; 0x5ae2 <nwkRxRejectDuplicate+0x144>
    5ae0:	81 e0       	ldi	r24, 0x01	; 1
    5ae2:	df 91       	pop	r29
    5ae4:	cf 91       	pop	r28
    5ae6:	1f 91       	pop	r17
    5ae8:	0f 91       	pop	r16
    5aea:	08 95       	ret

00005aec <nwkRxHandleReceivedFrame>:
    5aec:	0f 93       	push	r16
    5aee:	1f 93       	push	r17
    5af0:	cf 93       	push	r28
    5af2:	df 93       	push	r29
    5af4:	fc 01       	movw	r30, r24
    5af6:	8c 01       	movw	r16, r24
    5af8:	0e 5f       	subi	r16, 0xFE	; 254
    5afa:	1f 4f       	sbci	r17, 0xFF	; 255
    5afc:	84 e2       	ldi	r24, 0x24	; 36
    5afe:	80 83       	st	Z, r24
    5b00:	83 85       	ldd	r24, Z+11	; 0x0b
    5b02:	81 fd       	sbrc	r24, 1
    5b04:	54 c0       	rjmp	.+168    	; 0x5bae <nwkRxHandleReceivedFrame+0xc2>
    5b06:	83 fd       	sbrc	r24, 3
    5b08:	52 c0       	rjmp	.+164    	; 0x5bae <nwkRxHandleReceivedFrame+0xc2>
    5b0a:	25 81       	ldd	r18, Z+5	; 0x05
    5b0c:	36 81       	ldd	r19, Z+6	; 0x06
    5b0e:	2f 3f       	cpi	r18, 0xFF	; 255
    5b10:	3f 4f       	sbci	r19, 0xFF	; 255
    5b12:	79 f4       	brne	.+30     	; 0x5b32 <nwkRxHandleReceivedFrame+0x46>
    5b14:	20 91 79 27 	lds	r18, 0x2779	; 0x802779 <nwkIb>
    5b18:	30 91 7a 27 	lds	r19, 0x277A	; 0x80277a <nwkIb+0x1>
    5b1c:	87 85       	ldd	r24, Z+15	; 0x0f
    5b1e:	90 89       	ldd	r25, Z+16	; 0x10
    5b20:	28 17       	cp	r18, r24
    5b22:	39 07       	cpc	r19, r25
    5b24:	19 f0       	breq	.+6      	; 0x5b2c <nwkRxHandleReceivedFrame+0x40>
    5b26:	01 96       	adiw	r24, 0x01	; 1
    5b28:	09 f0       	breq	.+2      	; 0x5b2c <nwkRxHandleReceivedFrame+0x40>
    5b2a:	41 c0       	rjmp	.+130    	; 0x5bae <nwkRxHandleReceivedFrame+0xc2>
    5b2c:	82 e2       	ldi	r24, 0x22	; 34
    5b2e:	80 83       	st	Z, r24
    5b30:	3e c0       	rjmp	.+124    	; 0x5bae <nwkRxHandleReceivedFrame+0xc2>
    5b32:	27 85       	ldd	r18, Z+15	; 0x0f
    5b34:	30 89       	ldd	r19, Z+16	; 0x10
    5b36:	2f 3f       	cpi	r18, 0xFF	; 255
    5b38:	3f 4f       	sbci	r19, 0xFF	; 255
    5b3a:	11 f4       	brne	.+4      	; 0x5b40 <nwkRxHandleReceivedFrame+0x54>
    5b3c:	80 fd       	sbrc	r24, 0
    5b3e:	37 c0       	rjmp	.+110    	; 0x5bae <nwkRxHandleReceivedFrame+0xc2>
    5b40:	20 91 79 27 	lds	r18, 0x2779	; 0x802779 <nwkIb>
    5b44:	30 91 7a 27 	lds	r19, 0x277A	; 0x80277a <nwkIb+0x1>
    5b48:	85 85       	ldd	r24, Z+13	; 0x0d
    5b4a:	96 85       	ldd	r25, Z+14	; 0x0e
    5b4c:	28 17       	cp	r18, r24
    5b4e:	39 07       	cpc	r19, r25
    5b50:	71 f1       	breq	.+92     	; 0x5bae <nwkRxHandleReceivedFrame+0xc2>
    5b52:	ef 01       	movw	r28, r30
    5b54:	cf 01       	movw	r24, r30
    5b56:	55 dd       	rcall	.-1366   	; 0x5602 <nwkRouteFrameReceived>
    5b58:	c8 01       	movw	r24, r16
    5b5a:	21 df       	rcall	.-446    	; 0x599e <nwkRxRejectDuplicate>
    5b5c:	81 11       	cpse	r24, r1
    5b5e:	27 c0       	rjmp	.+78     	; 0x5bae <nwkRxHandleReceivedFrame+0xc2>
    5b60:	8f 81       	ldd	r24, Y+7	; 0x07
    5b62:	98 85       	ldd	r25, Y+8	; 0x08
    5b64:	01 96       	adiw	r24, 0x01	; 1
    5b66:	71 f4       	brne	.+28     	; 0x5b84 <nwkRxHandleReceivedFrame+0x98>
    5b68:	20 91 79 27 	lds	r18, 0x2779	; 0x802779 <nwkIb>
    5b6c:	30 91 7a 27 	lds	r19, 0x277A	; 0x80277a <nwkIb+0x1>
    5b70:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b72:	98 89       	ldd	r25, Y+16	; 0x10
    5b74:	28 17       	cp	r18, r24
    5b76:	39 07       	cpc	r19, r25
    5b78:	29 f0       	breq	.+10     	; 0x5b84 <nwkRxHandleReceivedFrame+0x98>
    5b7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b7c:	82 fd       	sbrc	r24, 2
    5b7e:	02 c0       	rjmp	.+4      	; 0x5b84 <nwkRxHandleReceivedFrame+0x98>
    5b80:	ce 01       	movw	r24, r28
    5b82:	9f d1       	rcall	.+830    	; 0x5ec2 <nwkTxBroadcastFrame>
    5b84:	20 91 79 27 	lds	r18, 0x2779	; 0x802779 <nwkIb>
    5b88:	30 91 7a 27 	lds	r19, 0x277A	; 0x80277a <nwkIb+0x1>
    5b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b8e:	98 89       	ldd	r25, Y+16	; 0x10
    5b90:	28 17       	cp	r18, r24
    5b92:	39 07       	cpc	r19, r25
    5b94:	11 f0       	breq	.+4      	; 0x5b9a <nwkRxHandleReceivedFrame+0xae>
    5b96:	01 96       	adiw	r24, 0x01	; 1
    5b98:	19 f4       	brne	.+6      	; 0x5ba0 <nwkRxHandleReceivedFrame+0xb4>
    5b9a:	82 e2       	ldi	r24, 0x22	; 34
    5b9c:	88 83       	st	Y, r24
    5b9e:	07 c0       	rjmp	.+14     	; 0x5bae <nwkRxHandleReceivedFrame+0xc2>
    5ba0:	8f 81       	ldd	r24, Y+7	; 0x07
    5ba2:	98 85       	ldd	r25, Y+8	; 0x08
    5ba4:	28 17       	cp	r18, r24
    5ba6:	39 07       	cpc	r19, r25
    5ba8:	11 f4       	brne	.+4      	; 0x5bae <nwkRxHandleReceivedFrame+0xc2>
    5baa:	83 e2       	ldi	r24, 0x23	; 35
    5bac:	88 83       	st	Y, r24
    5bae:	df 91       	pop	r29
    5bb0:	cf 91       	pop	r28
    5bb2:	1f 91       	pop	r17
    5bb4:	0f 91       	pop	r16
    5bb6:	08 95       	ret

00005bb8 <nwkRxSendAck>:
    5bb8:	0f 93       	push	r16
    5bba:	1f 93       	push	r17
    5bbc:	cf 93       	push	r28
    5bbe:	df 93       	push	r29
    5bc0:	8c 01       	movw	r16, r24
    5bc2:	e5 db       	rcall	.-2102   	; 0x538e <nwkFrameAlloc>
    5bc4:	ec 01       	movw	r28, r24
    5bc6:	00 97       	sbiw	r24, 0x00	; 0
    5bc8:	31 f1       	breq	.+76     	; 0x5c16 <nwkRxSendAck+0x5e>
    5bca:	34 dc       	rcall	.-1944   	; 0x5434 <nwkFrameCommandInit>
    5bcc:	89 81       	ldd	r24, Y+1	; 0x01
    5bce:	8d 5f       	subi	r24, 0xFD	; 253
    5bd0:	89 83       	std	Y+1, r24	; 0x01
    5bd2:	fe 01       	movw	r30, r28
    5bd4:	e9 57       	subi	r30, 0x79	; 121
    5bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd8:	11 82       	std	Z+1, r1	; 0x01
    5bda:	10 82       	st	Z, r1
    5bdc:	d8 01       	movw	r26, r16
    5bde:	1b 96       	adiw	r26, 0x0b	; 11
    5be0:	8c 91       	ld	r24, X
    5be2:	1b 97       	sbiw	r26, 0x0b	; 11
    5be4:	86 95       	lsr	r24
    5be6:	81 70       	andi	r24, 0x01	; 1
    5be8:	9b 85       	ldd	r25, Y+11	; 0x0b
    5bea:	80 fb       	bst	r24, 0
    5bec:	91 f9       	bld	r25, 1
    5bee:	9b 87       	std	Y+11, r25	; 0x0b
    5bf0:	1d 96       	adiw	r26, 0x0d	; 13
    5bf2:	8d 91       	ld	r24, X+
    5bf4:	9c 91       	ld	r25, X
    5bf6:	1e 97       	sbiw	r26, 0x0e	; 14
    5bf8:	98 8b       	std	Y+16, r25	; 0x10
    5bfa:	8f 87       	std	Y+15, r24	; 0x0f
    5bfc:	36 97       	sbiw	r30, 0x06	; 6
    5bfe:	01 90       	ld	r0, Z+
    5c00:	f0 81       	ld	r31, Z
    5c02:	e0 2d       	mov	r30, r0
    5c04:	10 82       	st	Z, r1
    5c06:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <nwkRxAckControl>
    5c0a:	82 83       	std	Z+2, r24	; 0x02
    5c0c:	1c 96       	adiw	r26, 0x0c	; 12
    5c0e:	8c 91       	ld	r24, X
    5c10:	81 83       	std	Z+1, r24	; 0x01
    5c12:	ce 01       	movw	r24, r28
    5c14:	04 d1       	rcall	.+520    	; 0x5e1e <nwkTxFrame>
    5c16:	df 91       	pop	r29
    5c18:	cf 91       	pop	r28
    5c1a:	1f 91       	pop	r17
    5c1c:	0f 91       	pop	r16
    5c1e:	08 95       	ret

00005c20 <nwkRxHandleIndication>:
    5c20:	cf 93       	push	r28
    5c22:	df 93       	push	r29
    5c24:	ec 01       	movw	r28, r24
    5c26:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <nwkRxAckControl>
    5c2a:	e4 dd       	rcall	.-1080   	; 0x57f4 <nwkRxIndicateFrame>
    5c2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c2e:	90 ff       	sbrs	r25, 0
    5c30:	80 e0       	ldi	r24, 0x00	; 0
    5c32:	2f 81       	ldd	r18, Y+7	; 0x07
    5c34:	38 85       	ldd	r19, Y+8	; 0x08
    5c36:	2f 3f       	cpi	r18, 0xFF	; 255
    5c38:	3f 4f       	sbci	r19, 0xFF	; 255
    5c3a:	59 f4       	brne	.+22     	; 0x5c52 <nwkRxHandleIndication+0x32>
    5c3c:	40 91 79 27 	lds	r20, 0x2779	; 0x802779 <nwkIb>
    5c40:	50 91 7a 27 	lds	r21, 0x277A	; 0x80277a <nwkIb+0x1>
    5c44:	2f 85       	ldd	r18, Y+15	; 0x0f
    5c46:	38 89       	ldd	r19, Y+16	; 0x10
    5c48:	42 17       	cp	r20, r18
    5c4a:	53 07       	cpc	r21, r19
    5c4c:	11 f4       	brne	.+4      	; 0x5c52 <nwkRxHandleIndication+0x32>
    5c4e:	93 ff       	sbrs	r25, 3
    5c50:	81 e0       	ldi	r24, 0x01	; 1
    5c52:	2d 81       	ldd	r18, Y+5	; 0x05
    5c54:	3e 81       	ldd	r19, Y+6	; 0x06
    5c56:	2f 3f       	cpi	r18, 0xFF	; 255
    5c58:	3f 4f       	sbci	r19, 0xFF	; 255
    5c5a:	09 f4       	brne	.+2      	; 0x5c5e <nwkRxHandleIndication+0x3e>
    5c5c:	80 e0       	ldi	r24, 0x00	; 0
    5c5e:	20 91 79 27 	lds	r18, 0x2779	; 0x802779 <nwkIb>
    5c62:	30 91 7a 27 	lds	r19, 0x277A	; 0x80277a <nwkIb+0x1>
    5c66:	2f 3f       	cpi	r18, 0xFF	; 255
    5c68:	3f 4f       	sbci	r19, 0xFF	; 255
    5c6a:	09 f4       	brne	.+2      	; 0x5c6e <nwkRxHandleIndication+0x4e>
    5c6c:	80 e0       	ldi	r24, 0x00	; 0
    5c6e:	88 23       	and	r24, r24
    5c70:	11 f0       	breq	.+4      	; 0x5c76 <nwkRxHandleIndication+0x56>
    5c72:	ce 01       	movw	r24, r28
    5c74:	a1 df       	rcall	.-190    	; 0x5bb8 <nwkRxSendAck>
    5c76:	84 e2       	ldi	r24, 0x24	; 36
    5c78:	88 83       	st	Y, r24
    5c7a:	df 91       	pop	r29
    5c7c:	cf 91       	pop	r28
    5c7e:	08 95       	ret

00005c80 <nwkRxInit>:
    5c80:	20 e0       	ldi	r18, 0x00	; 0
    5c82:	0e c0       	rjmp	.+28     	; 0x5ca0 <nwkRxInit+0x20>
    5c84:	82 2f       	mov	r24, r18
    5c86:	90 e0       	ldi	r25, 0x00	; 0
    5c88:	fc 01       	movw	r30, r24
    5c8a:	ee 0f       	add	r30, r30
    5c8c:	ff 1f       	adc	r31, r31
    5c8e:	ee 0f       	add	r30, r30
    5c90:	ff 1f       	adc	r31, r31
    5c92:	8e 0f       	add	r24, r30
    5c94:	9f 1f       	adc	r25, r31
    5c96:	fc 01       	movw	r30, r24
    5c98:	e9 55       	subi	r30, 0x59	; 89
    5c9a:	fe 4d       	sbci	r31, 0xDE	; 222
    5c9c:	14 82       	std	Z+4, r1	; 0x04
    5c9e:	2f 5f       	subi	r18, 0xFF	; 255
    5ca0:	2a 30       	cpi	r18, 0x0A	; 10
    5ca2:	80 f3       	brcs	.-32     	; 0x5c84 <nwkRxInit+0x4>
    5ca4:	e9 e9       	ldi	r30, 0x99	; 153
    5ca6:	f1 e2       	ldi	r31, 0x21	; 33
    5ca8:	84 e6       	ldi	r24, 0x64	; 100
    5caa:	90 e0       	ldi	r25, 0x00	; 0
    5cac:	a0 e0       	ldi	r26, 0x00	; 0
    5cae:	b0 e0       	ldi	r27, 0x00	; 0
    5cb0:	86 83       	std	Z+6, r24	; 0x06
    5cb2:	97 83       	std	Z+7, r25	; 0x07
    5cb4:	a0 87       	std	Z+8, r26	; 0x08
    5cb6:	b1 87       	std	Z+9, r27	; 0x09
    5cb8:	12 86       	std	Z+10, r1	; 0x0a
    5cba:	88 ea       	ldi	r24, 0xA8	; 168
    5cbc:	9c e2       	ldi	r25, 0x2C	; 44
    5cbe:	94 87       	std	Z+12, r25	; 0x0c
    5cc0:	83 87       	std	Z+11, r24	; 0x0b
    5cc2:	60 e9       	ldi	r22, 0x90	; 144
    5cc4:	7c e2       	ldi	r23, 0x2C	; 44
    5cc6:	80 e0       	ldi	r24, 0x00	; 0
    5cc8:	60 ca       	rjmp	.-2880   	; 0x518a <NWK_OpenEndpoint>
    5cca:	08 95       	ret

00005ccc <PHY_DataInd>:
    5ccc:	cf 93       	push	r28
    5cce:	df 93       	push	r29
    5cd0:	dc 01       	movw	r26, r24
    5cd2:	ed 91       	ld	r30, X+
    5cd4:	fc 91       	ld	r31, X
    5cd6:	21 81       	ldd	r18, Z+1	; 0x01
    5cd8:	28 38       	cpi	r18, 0x88	; 136
    5cda:	11 f5       	brne	.+68     	; 0x5d20 <PHY_DataInd+0x54>
    5cdc:	20 81       	ld	r18, Z
    5cde:	21 36       	cpi	r18, 0x61	; 97
    5ce0:	11 f0       	breq	.+4      	; 0x5ce6 <PHY_DataInd+0x1a>
    5ce2:	21 34       	cpi	r18, 0x41	; 65
    5ce4:	e9 f4       	brne	.+58     	; 0x5d20 <PHY_DataInd+0x54>
    5ce6:	fc 01       	movw	r30, r24
    5ce8:	22 81       	ldd	r18, Z+2	; 0x02
    5cea:	20 31       	cpi	r18, 0x10	; 16
    5cec:	c8 f0       	brcs	.+50     	; 0x5d20 <PHY_DataInd+0x54>
    5cee:	ec 01       	movw	r28, r24
    5cf0:	4e db       	rcall	.-2404   	; 0x538e <nwkFrameAlloc>
    5cf2:	00 97       	sbiw	r24, 0x00	; 0
    5cf4:	a9 f0       	breq	.+42     	; 0x5d20 <PHY_DataInd+0x54>
    5cf6:	20 e2       	ldi	r18, 0x20	; 32
    5cf8:	dc 01       	movw	r26, r24
    5cfa:	2c 93       	st	X, r18
    5cfc:	2a 81       	ldd	r18, Y+2	; 0x02
    5cfe:	11 96       	adiw	r26, 0x01	; 1
    5d00:	2c 93       	st	X, r18
    5d02:	2b 81       	ldd	r18, Y+3	; 0x03
    5d04:	fc 01       	movw	r30, r24
    5d06:	ed 57       	subi	r30, 0x7D	; 125
    5d08:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0a:	20 83       	st	Z, r18
    5d0c:	2c 81       	ldd	r18, Y+4	; 0x04
    5d0e:	31 96       	adiw	r30, 0x01	; 1
    5d10:	20 83       	st	Z, r18
    5d12:	4a 81       	ldd	r20, Y+2	; 0x02
    5d14:	68 81       	ld	r22, Y
    5d16:	79 81       	ldd	r23, Y+1	; 0x01
    5d18:	50 e0       	ldi	r21, 0x00	; 0
    5d1a:	02 96       	adiw	r24, 0x02	; 2
    5d1c:	0e 94 29 38 	call	0x7052	; 0x7052 <memcpy>
    5d20:	df 91       	pop	r29
    5d22:	cf 91       	pop	r28
    5d24:	08 95       	ret

00005d26 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    5d26:	cf 93       	push	r28
    5d28:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    5d2a:	c0 e0       	ldi	r28, 0x00	; 0
    5d2c:	d0 e0       	ldi	r29, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
    5d2e:	17 c0       	rjmp	.+46     	; 0x5d5e <nwkRxTaskHandler+0x38>
  {
    switch (frame->state)
    5d30:	88 81       	ld	r24, Y
    5d32:	82 32       	cpi	r24, 0x22	; 34
    5d34:	61 f0       	breq	.+24     	; 0x5d4e <nwkRxTaskHandler+0x28>
    5d36:	18 f4       	brcc	.+6      	; 0x5d3e <nwkRxTaskHandler+0x18>
    5d38:	80 32       	cpi	r24, 0x20	; 32
    5d3a:	31 f0       	breq	.+12     	; 0x5d48 <nwkRxTaskHandler+0x22>
    5d3c:	10 c0       	rjmp	.+32     	; 0x5d5e <nwkRxTaskHandler+0x38>
    5d3e:	83 32       	cpi	r24, 0x23	; 35
    5d40:	49 f0       	breq	.+18     	; 0x5d54 <nwkRxTaskHandler+0x2e>
    5d42:	84 32       	cpi	r24, 0x24	; 36
    5d44:	51 f0       	breq	.+20     	; 0x5d5a <nwkRxTaskHandler+0x34>
    5d46:	0b c0       	rjmp	.+22     	; 0x5d5e <nwkRxTaskHandler+0x38>
    {
      case NWK_RX_STATE_RECEIVED:
      {
        nwkRxHandleReceivedFrame(frame);
    5d48:	ce 01       	movw	r24, r28
    5d4a:	d0 de       	rcall	.-608    	; 0x5aec <nwkRxHandleReceivedFrame>
      } break;
    5d4c:	08 c0       	rjmp	.+16     	; 0x5d5e <nwkRxTaskHandler+0x38>
      } break;
#endif

      case NWK_RX_STATE_INDICATE:
      {
        nwkRxHandleIndication(frame);
    5d4e:	ce 01       	movw	r24, r28
    5d50:	67 df       	rcall	.-306    	; 0x5c20 <nwkRxHandleIndication>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    5d52:	05 c0       	rjmp	.+10     	; 0x5d5e <nwkRxTaskHandler+0x38>
    5d54:	ce 01       	movw	r24, r28
      } break;
    5d56:	14 dd       	rcall	.-1496   	; 0x5780 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    5d58:	02 c0       	rjmp	.+4      	; 0x5d5e <nwkRxTaskHandler+0x38>
    5d5a:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    5d5c:	49 db       	rcall	.-2414   	; 0x53f0 <nwkFrameFree>
    5d5e:	ce 01       	movw	r24, r28
    5d60:	51 db       	rcall	.-2398   	; 0x5404 <nwkFrameNext>
    5d62:	ec 01       	movw	r28, r24
    5d64:	89 2b       	or	r24, r25
    5d66:	21 f7       	brne	.-56     	; 0x5d30 <nwkRxTaskHandler+0xa>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    5d68:	df 91       	pop	r29
    5d6a:	cf 91       	pop	r28
    5d6c:	08 95       	ret

00005d6e <nwkTxConvertPhyStatus>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    5d6e:	81 30       	cpi	r24, 0x01	; 1
    5d70:	51 f0       	breq	.+20     	; 0x5d86 <nwkTxConvertPhyStatus+0x18>
    5d72:	18 f0       	brcs	.+6      	; 0x5d7a <nwkTxConvertPhyStatus+0xc>
    5d74:	82 30       	cpi	r24, 0x02	; 2
    5d76:	19 f0       	breq	.+6      	; 0x5d7e <nwkTxConvertPhyStatus+0x10>
    5d78:	04 c0       	rjmp	.+8      	; 0x5d82 <nwkTxConvertPhyStatus+0x14>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    5d7a:	80 e0       	ldi	r24, 0x00	; 0
    5d7c:	08 95       	ret

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    5d7e:	81 e2       	ldi	r24, 0x21	; 33
    5d80:	08 95       	ret

    default:
      return NWK_ERROR_STATUS;
    5d82:	81 e0       	ldi	r24, 0x01	; 1
    5d84:	08 95       	ret
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    5d86:	80 e2       	ldi	r24, 0x20	; 32
      return NWK_PHY_NO_ACK_STATUS;

    default:
      return NWK_ERROR_STATUS;
  }
}
    5d88:	08 95       	ret

00005d8a <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    5d8a:	1f 93       	push	r17
    5d8c:	cf 93       	push	r28
    5d8e:	df 93       	push	r29
    5d90:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    5d92:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    5d94:	80 e0       	ldi	r24, 0x00	; 0
    5d96:	90 e0       	ldi	r25, 0x00	; 0
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    5d98:	14 c0       	rjmp	.+40     	; 0x5dc2 <nwkTxDelayTimerHandler+0x38>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    5d9a:	fc 01       	movw	r30, r24
    5d9c:	20 81       	ld	r18, Z
    5d9e:	21 31       	cpi	r18, 0x11	; 17
    5da0:	81 f4       	brne	.+32     	; 0x5dc2 <nwkTxDelayTimerHandler+0x38>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    5da2:	ec 57       	subi	r30, 0x7C	; 124
    5da4:	ff 4f       	sbci	r31, 0xFF	; 255
    5da6:	20 81       	ld	r18, Z
    5da8:	31 81       	ldd	r19, Z+1	; 0x01
    5daa:	21 50       	subi	r18, 0x01	; 1
    5dac:	31 09       	sbc	r19, r1
    5dae:	31 83       	std	Z+1, r19	; 0x01
    5db0:	20 83       	st	Z, r18
    5db2:	23 2b       	or	r18, r19
    5db4:	29 f4       	brne	.+10     	; 0x5dc0 <nwkTxDelayTimerHandler+0x36>
        frame->state = NWK_TX_STATE_SEND;
    5db6:	23 e1       	ldi	r18, 0x13	; 19
    5db8:	fc 01       	movw	r30, r24
    5dba:	20 83       	st	Z, r18

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    5dbc:	11 e0       	ldi	r17, 0x01	; 1
    5dbe:	01 c0       	rjmp	.+2      	; 0x5dc2 <nwkTxDelayTimerHandler+0x38>
    5dc0:	11 e0       	ldi	r17, 0x01	; 1
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    5dc2:	20 db       	rcall	.-2496   	; 0x5404 <nwkFrameNext>
    5dc4:	00 97       	sbiw	r24, 0x00	; 0
    5dc6:	49 f7       	brne	.-46     	; 0x5d9a <nwkTxDelayTimerHandler+0x10>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    5dc8:	11 23       	and	r17, r17
    5dca:	11 f0       	breq	.+4      	; 0x5dd0 <nwkTxDelayTimerHandler+0x46>
    SYS_TimerStart(timer);
    5dcc:	ce 01       	movw	r24, r28
    5dce:	79 d3       	rcall	.+1778   	; 0x64c2 <SYS_TimerStart>
}
    5dd0:	df 91       	pop	r29
    5dd2:	cf 91       	pop	r28
    5dd4:	1f 91       	pop	r17
    5dd6:	08 95       	ret

00005dd8 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    5dd8:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <nwkTxPhyActiveFrame+0x1>
    5ddc:	10 92 f3 21 	sts	0x21F3, r1	; 0x8021f3 <nwkTxPhyActiveFrame>

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    5de0:	e6 ee       	ldi	r30, 0xE6	; 230
    5de2:	f1 e2       	ldi	r31, 0x21	; 33
    5de4:	82 e3       	ldi	r24, 0x32	; 50
    5de6:	90 e0       	ldi	r25, 0x00	; 0
    5de8:	a0 e0       	ldi	r26, 0x00	; 0
    5dea:	b0 e0       	ldi	r27, 0x00	; 0
    5dec:	86 83       	std	Z+6, r24	; 0x06
    5dee:	97 83       	std	Z+7, r25	; 0x07
    5df0:	a0 87       	std	Z+8, r26	; 0x08
    5df2:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    5df4:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    5df6:	80 ed       	ldi	r24, 0xD0	; 208
    5df8:	9f e2       	ldi	r25, 0x2F	; 47
    5dfa:	94 87       	std	Z+12, r25	; 0x0c
    5dfc:	83 87       	std	Z+11, r24	; 0x0b

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    5dfe:	e9 ed       	ldi	r30, 0xD9	; 217
    5e00:	f1 e2       	ldi	r31, 0x21	; 33
    5e02:	8a e0       	ldi	r24, 0x0A	; 10
    5e04:	90 e0       	ldi	r25, 0x00	; 0
    5e06:	a0 e0       	ldi	r26, 0x00	; 0
    5e08:	b0 e0       	ldi	r27, 0x00	; 0
    5e0a:	86 83       	std	Z+6, r24	; 0x06
    5e0c:	97 83       	std	Z+7, r25	; 0x07
    5e0e:	a0 87       	std	Z+8, r26	; 0x08
    5e10:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    5e12:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    5e14:	85 ec       	ldi	r24, 0xC5	; 197
    5e16:	9e e2       	ldi	r25, 0x2E	; 46
    5e18:	94 87       	std	Z+12, r25	; 0x0c
    5e1a:	83 87       	std	Z+11, r24	; 0x0b
    5e1c:	08 95       	ret

00005e1e <nwkTxFrame>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    5e1e:	cf 93       	push	r28
    5e20:	df 93       	push	r29
    5e22:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    5e24:	fc 01       	movw	r30, r24
    5e26:	ea 57       	subi	r30, 0x7A	; 122
    5e28:	ff 4f       	sbci	r31, 0xFF	; 255
    5e2a:	80 81       	ld	r24, Z
    5e2c:	81 ff       	sbrs	r24, 1
    5e2e:	03 c0       	rjmp	.+6      	; 0x5e36 <nwkTxFrame+0x18>
  {
    frame->state = NWK_TX_STATE_DELAY;
    5e30:	92 e1       	ldi	r25, 0x12	; 18
    5e32:	98 83       	st	Y, r25
    5e34:	02 c0       	rjmp	.+4      	; 0x5e3a <nwkTxFrame+0x1c>
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
    5e36:	92 e1       	ldi	r25, 0x12	; 18
    5e38:	98 83       	st	Y, r25
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    5e3a:	fe 01       	movw	r30, r28
    5e3c:	ed 57       	subi	r30, 0x7D	; 125
    5e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e40:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    5e42:	98 2f       	mov	r25, r24
    5e44:	91 70       	andi	r25, 0x01	; 1
    5e46:	80 ff       	sbrs	r24, 0
    5e48:	05 c0       	rjmp	.+10     	; 0x5e54 <nwkTxFrame+0x36>
    header->macDstPanId = NWK_BROADCAST_PANID;
    5e4a:	2f ef       	ldi	r18, 0xFF	; 255
    5e4c:	3f ef       	ldi	r19, 0xFF	; 255
    5e4e:	3e 83       	std	Y+6, r19	; 0x06
    5e50:	2d 83       	std	Y+5, r18	; 0x05
    5e52:	06 c0       	rjmp	.+12     	; 0x5e60 <nwkTxFrame+0x42>
  else
    header->macDstPanId = nwkIb.panId;
    5e54:	20 91 7b 27 	lds	r18, 0x277B	; 0x80277b <nwkIb+0x2>
    5e58:	30 91 7c 27 	lds	r19, 0x277C	; 0x80277c <nwkIb+0x3>
    5e5c:	3e 83       	std	Y+6, r19	; 0x06
    5e5e:	2d 83       	std	Y+5, r18	; 0x05

#ifdef NWK_ENABLE_ROUTING
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
    5e60:	82 fd       	sbrc	r24, 2
    5e62:	05 c0       	rjmp	.+10     	; 0x5e6e <nwkTxFrame+0x50>
    5e64:	91 11       	cpse	r25, r1
    5e66:	03 c0       	rjmp	.+6      	; 0x5e6e <nwkTxFrame+0x50>
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
    5e68:	ce 01       	movw	r24, r28
    5e6a:	6b dc       	rcall	.-1834   	; 0x5742 <nwkRoutePrepareTx>
    5e6c:	04 c0       	rjmp	.+8      	; 0x5e76 <nwkTxFrame+0x58>
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
    5e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e70:	98 89       	ldd	r25, Y+16	; 0x10
    5e72:	98 87       	std	Y+8, r25	; 0x08
    5e74:	8f 83       	std	Y+7, r24	; 0x07

  header->macSrcAddr = nwkIb.addr;
    5e76:	e9 e7       	ldi	r30, 0x79	; 121
    5e78:	f7 e2       	ldi	r31, 0x27	; 39
    5e7a:	80 81       	ld	r24, Z
    5e7c:	91 81       	ldd	r25, Z+1	; 0x01
    5e7e:	9a 87       	std	Y+10, r25	; 0x0a
    5e80:	89 87       	std	Y+9, r24	; 0x09
  header->macSeq = ++nwkIb.macSeqNum;
    5e82:	85 81       	ldd	r24, Z+5	; 0x05
    5e84:	8f 5f       	subi	r24, 0xFF	; 255
    5e86:	85 83       	std	Z+5, r24	; 0x05
    5e88:	8c 83       	std	Y+4, r24	; 0x04

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
    5e8a:	8f 81       	ldd	r24, Y+7	; 0x07
    5e8c:	98 85       	ldd	r25, Y+8	; 0x08
    5e8e:	01 96       	adiw	r24, 0x01	; 1
    5e90:	69 f4       	brne	.+26     	; 0x5eac <nwkTxFrame+0x8e>
  {
    header->macFcf = 0x8841;
    5e92:	81 e4       	ldi	r24, 0x41	; 65
    5e94:	98 e8       	ldi	r25, 0x88	; 136
    5e96:	9b 83       	std	Y+3, r25	; 0x03
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    5e98:	8a 83       	std	Y+2, r24	; 0x02
    5e9a:	cd d7       	rcall	.+3994   	; 0x6e36 <rand>
    5e9c:	87 70       	andi	r24, 0x07	; 7
    5e9e:	99 27       	eor	r25, r25
    5ea0:	01 96       	adiw	r24, 0x01	; 1
    5ea2:	cc 57       	subi	r28, 0x7C	; 124
    5ea4:	df 4f       	sbci	r29, 0xFF	; 255
    5ea6:	99 83       	std	Y+1, r25	; 0x01
    5ea8:	88 83       	st	Y, r24
    5eaa:	08 c0       	rjmp	.+16     	; 0x5ebc <nwkTxFrame+0x9e>
  }
  else
  {
    header->macFcf = 0x8861;
    5eac:	81 e6       	ldi	r24, 0x61	; 97
    5eae:	98 e8       	ldi	r25, 0x88	; 136
    5eb0:	9b 83       	std	Y+3, r25	; 0x03
    5eb2:	8a 83       	std	Y+2, r24	; 0x02
    frame->tx.timeout = 0;
    5eb4:	cc 57       	subi	r28, 0x7C	; 124
    5eb6:	df 4f       	sbci	r29, 0xFF	; 255
    5eb8:	19 82       	std	Y+1, r1	; 0x01
    5eba:	18 82       	st	Y, r1
  }
}
    5ebc:	df 91       	pop	r29
    5ebe:	cf 91       	pop	r28
    5ec0:	08 95       	ret

00005ec2 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    5ec2:	0f 93       	push	r16
    5ec4:	1f 93       	push	r17
    5ec6:	cf 93       	push	r28
    5ec8:	df 93       	push	r29
    5eca:	8c 01       	movw	r16, r24
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    5ecc:	60 da       	rcall	.-2880   	; 0x538e <nwkFrameAlloc>
    5ece:	ec 01       	movw	r28, r24
    5ed0:	89 2b       	or	r24, r25
    5ed2:	b1 f1       	breq	.+108    	; 0x5f40 <nwkTxBroadcastFrame+0x7e>
    return;

  newFrame->state = NWK_TX_STATE_DELAY;
    5ed4:	82 e1       	ldi	r24, 0x12	; 18
    5ed6:	88 83       	st	Y, r24
  newFrame->size = frame->size;
    5ed8:	f8 01       	movw	r30, r16
    5eda:	81 81       	ldd	r24, Z+1	; 0x01
    5edc:	89 83       	std	Y+1, r24	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    5ede:	fe 01       	movw	r30, r28
    5ee0:	ed 57       	subi	r30, 0x7D	; 125
    5ee2:	ff 4f       	sbci	r31, 0xFF	; 255
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    5ee4:	10 82       	st	Z, r1
    5ee6:	a7 d7       	rcall	.+3918   	; 0x6e36 <rand>
    5ee8:	87 70       	andi	r24, 0x07	; 7
    5eea:	99 27       	eor	r25, r25
    5eec:	01 96       	adiw	r24, 0x01	; 1
    5eee:	fe 01       	movw	r30, r28
    5ef0:	ec 57       	subi	r30, 0x7C	; 124
    5ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ef4:	91 83       	std	Z+1, r25	; 0x01
    5ef6:	80 83       	st	Z, r24
  newFrame->tx.confirm = NULL;
    5ef8:	33 96       	adiw	r30, 0x03	; 3
    5efa:	11 82       	std	Z+1, r1	; 0x01
    5efc:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    5efe:	f8 01       	movw	r30, r16
    5f00:	41 81       	ldd	r20, Z+1	; 0x01
    5f02:	b8 01       	movw	r22, r16
    5f04:	6e 5f       	subi	r22, 0xFE	; 254
    5f06:	7f 4f       	sbci	r23, 0xFF	; 255
    5f08:	50 e0       	ldi	r21, 0x00	; 0
    5f0a:	ce 01       	movw	r24, r28
    5f0c:	02 96       	adiw	r24, 0x02	; 2
    5f0e:	0e 94 29 38 	call	0x7052	; 0x7052 <memcpy>

  newFrame->header.macFcf = 0x8841;
    5f12:	81 e4       	ldi	r24, 0x41	; 65
    5f14:	98 e8       	ldi	r25, 0x88	; 136
    5f16:	9b 83       	std	Y+3, r25	; 0x03
    5f18:	8a 83       	std	Y+2, r24	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    5f1a:	8f ef       	ldi	r24, 0xFF	; 255
    5f1c:	9f ef       	ldi	r25, 0xFF	; 255
    5f1e:	98 87       	std	Y+8, r25	; 0x08
    5f20:	8f 83       	std	Y+7, r24	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    5f22:	f8 01       	movw	r30, r16
    5f24:	85 81       	ldd	r24, Z+5	; 0x05
    5f26:	96 81       	ldd	r25, Z+6	; 0x06
    5f28:	9e 83       	std	Y+6, r25	; 0x06
    5f2a:	8d 83       	std	Y+5, r24	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    5f2c:	e9 e7       	ldi	r30, 0x79	; 121
    5f2e:	f7 e2       	ldi	r31, 0x27	; 39
    5f30:	80 81       	ld	r24, Z
    5f32:	91 81       	ldd	r25, Z+1	; 0x01
    5f34:	9a 87       	std	Y+10, r25	; 0x0a
    5f36:	89 87       	std	Y+9, r24	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    5f38:	85 81       	ldd	r24, Z+5	; 0x05
    5f3a:	8f 5f       	subi	r24, 0xFF	; 255
    5f3c:	85 83       	std	Z+5, r24	; 0x05
    5f3e:	8c 83       	std	Y+4, r24	; 0x04
}
    5f40:	df 91       	pop	r29
    5f42:	cf 91       	pop	r28
    5f44:	1f 91       	pop	r17
    5f46:	0f 91       	pop	r16
    5f48:	08 95       	ret

00005f4a <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    5f4a:	cf 93       	push	r28
    5f4c:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    5f4e:	fc 01       	movw	r30, r24
    5f50:	c7 81       	ldd	r28, Z+7	; 0x07
    5f52:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    5f54:	81 85       	ldd	r24, Z+9	; 0x09
    5f56:	83 30       	cpi	r24, 0x03	; 3
    5f58:	c1 f4       	brne	.+48     	; 0x5f8a <nwkTxAckReceived+0x40>
    5f5a:	80 e0       	ldi	r24, 0x00	; 0
    5f5c:	90 e0       	ldi	r25, 0x00	; 0
    5f5e:	10 c0       	rjmp	.+32     	; 0x5f80 <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    5f60:	fc 01       	movw	r30, r24
    5f62:	20 81       	ld	r18, Z
    5f64:	26 31       	cpi	r18, 0x16	; 22
    5f66:	61 f4       	brne	.+24     	; 0x5f80 <nwkTxAckReceived+0x36>
    5f68:	34 85       	ldd	r19, Z+12	; 0x0c
    5f6a:	29 81       	ldd	r18, Y+1	; 0x01
    5f6c:	32 13       	cpse	r19, r18
    5f6e:	08 c0       	rjmp	.+16     	; 0x5f80 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    5f70:	27 e1       	ldi	r18, 0x17	; 23
    5f72:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    5f74:	2a 81       	ldd	r18, Y+2	; 0x02
    5f76:	ea 57       	subi	r30, 0x7A	; 122
    5f78:	ff 4f       	sbci	r31, 0xFF	; 255
    5f7a:	20 83       	st	Z, r18
      return true;
    5f7c:	81 e0       	ldi	r24, 0x01	; 1
    5f7e:	06 c0       	rjmp	.+12     	; 0x5f8c <nwkTxAckReceived+0x42>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    5f80:	41 da       	rcall	.-2942   	; 0x5404 <nwkFrameNext>
    5f82:	00 97       	sbiw	r24, 0x00	; 0
    5f84:	69 f7       	brne	.-38     	; 0x5f60 <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    5f86:	80 e0       	ldi	r24, 0x00	; 0
    5f88:	01 c0       	rjmp	.+2      	; 0x5f8c <nwkTxAckReceived+0x42>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    5f8a:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    5f8c:	df 91       	pop	r29
    5f8e:	cf 91       	pop	r28
    5f90:	08 95       	ret

00005f92 <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    5f92:	27 e1       	ldi	r18, 0x17	; 23
    5f94:	fc 01       	movw	r30, r24
    5f96:	20 83       	st	Z, r18
  frame->tx.status = status;
    5f98:	ed 57       	subi	r30, 0x7D	; 125
    5f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f9c:	60 83       	st	Z, r22
    5f9e:	08 95       	ret

00005fa0 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    5fa0:	ef 92       	push	r14
    5fa2:	ff 92       	push	r15
    5fa4:	1f 93       	push	r17
    5fa6:	cf 93       	push	r28
    5fa8:	df 93       	push	r29
    5faa:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    5fac:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    5fae:	c0 e0       	ldi	r28, 0x00	; 0
    5fb0:	d0 e0       	ldi	r29, 0x00	; 0
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    5fb2:	13 c0       	rjmp	.+38     	; 0x5fda <nwkTxAckWaitTimerHandler+0x3a>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    5fb4:	88 81       	ld	r24, Y
    5fb6:	86 31       	cpi	r24, 0x16	; 22
    5fb8:	81 f4       	brne	.+32     	; 0x5fda <nwkTxAckWaitTimerHandler+0x3a>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    5fba:	fe 01       	movw	r30, r28
    5fbc:	ec 57       	subi	r30, 0x7C	; 124
    5fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    5fc0:	80 81       	ld	r24, Z
    5fc2:	91 81       	ldd	r25, Z+1	; 0x01
    5fc4:	01 97       	sbiw	r24, 0x01	; 1
    5fc6:	91 83       	std	Z+1, r25	; 0x01
    5fc8:	80 83       	st	Z, r24
    5fca:	89 2b       	or	r24, r25
    5fcc:	29 f4       	brne	.+10     	; 0x5fd8 <nwkTxAckWaitTimerHandler+0x38>
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    5fce:	60 e1       	ldi	r22, 0x10	; 16
    5fd0:	ce 01       	movw	r24, r28
    5fd2:	df df       	rcall	.-66     	; 0x5f92 <nwkTxConfirm>

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    5fd4:	11 e0       	ldi	r17, 0x01	; 1
    5fd6:	01 c0       	rjmp	.+2      	; 0x5fda <nwkTxAckWaitTimerHandler+0x3a>
    5fd8:	11 e0       	ldi	r17, 0x01	; 1
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    5fda:	ce 01       	movw	r24, r28
    5fdc:	13 da       	rcall	.-3034   	; 0x5404 <nwkFrameNext>
    5fde:	ec 01       	movw	r28, r24
    5fe0:	89 2b       	or	r24, r25
    5fe2:	41 f7       	brne	.-48     	; 0x5fb4 <nwkTxAckWaitTimerHandler+0x14>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    5fe4:	11 23       	and	r17, r17
    SYS_TimerStart(timer);
    5fe6:	11 f0       	breq	.+4      	; 0x5fec <nwkTxAckWaitTimerHandler+0x4c>
    5fe8:	c7 01       	movw	r24, r14
    5fea:	6b d2       	rcall	.+1238   	; 0x64c2 <SYS_TimerStart>
}
    5fec:	df 91       	pop	r29
    5fee:	cf 91       	pop	r28
    5ff0:	1f 91       	pop	r17
    5ff2:	ff 90       	pop	r15
    5ff4:	ef 90       	pop	r14
    5ff6:	08 95       	ret

00005ff8 <PHY_DataConf>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
    5ff8:	cf 93       	push	r28
    5ffa:	df 93       	push	r29
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    5ffc:	c0 91 f3 21 	lds	r28, 0x21F3	; 0x8021f3 <nwkTxPhyActiveFrame>
    6000:	d0 91 f4 21 	lds	r29, 0x21F4	; 0x8021f4 <nwkTxPhyActiveFrame+0x1>
    6004:	b4 de       	rcall	.-664    	; 0x5d6e <nwkTxConvertPhyStatus>
    6006:	fe 01       	movw	r30, r28
    6008:	ed 57       	subi	r30, 0x7D	; 125
    600a:	ff 4f       	sbci	r31, 0xFF	; 255
    600c:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    600e:	85 e1       	ldi	r24, 0x15	; 21
    6010:	88 83       	st	Y, r24
  nwkTxPhyActiveFrame = NULL;
    6012:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <nwkTxPhyActiveFrame+0x1>
    6016:	10 92 f3 21 	sts	0x21F3, r1	; 0x8021f3 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    601a:	e9 e7       	ldi	r30, 0x79	; 121
    601c:	f7 e2       	ldi	r31, 0x27	; 39
    601e:	86 a1       	ldd	r24, Z+38	; 0x26
    6020:	97 a1       	ldd	r25, Z+39	; 0x27
    6022:	01 97       	sbiw	r24, 0x01	; 1
    6024:	97 a3       	std	Z+39, r25	; 0x27
    6026:	86 a3       	std	Z+38, r24	; 0x26
}
    6028:	df 91       	pop	r29
    602a:	cf 91       	pop	r28
    602c:	08 95       	ret

0000602e <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    602e:	cf 93       	push	r28
    6030:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    6032:	c0 e0       	ldi	r28, 0x00	; 0
    6034:	d0 e0       	ldi	r29, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
    6036:	68 c0       	rjmp	.+208    	; 0x6108 <nwkTxTaskHandler+0xda>
  {
    switch (frame->state)
    6038:	88 81       	ld	r24, Y
    603a:	83 31       	cpi	r24, 0x13	; 19
    603c:	d1 f0       	breq	.+52     	; 0x6072 <nwkTxTaskHandler+0x44>
    603e:	18 f4       	brcc	.+6      	; 0x6046 <nwkTxTaskHandler+0x18>
    6040:	82 31       	cpi	r24, 0x12	; 18
    6042:	39 f0       	breq	.+14     	; 0x6052 <nwkTxTaskHandler+0x24>
    6044:	61 c0       	rjmp	.+194    	; 0x6108 <nwkTxTaskHandler+0xda>
    6046:	85 31       	cpi	r24, 0x15	; 21
    6048:	69 f1       	breq	.+90     	; 0x60a4 <nwkTxTaskHandler+0x76>
    604a:	87 31       	cpi	r24, 0x17	; 23
    604c:	09 f4       	brne	.+2      	; 0x6050 <nwkTxTaskHandler+0x22>
    604e:	4d c0       	rjmp	.+154    	; 0x60ea <nwkTxTaskHandler+0xbc>
    6050:	5b c0       	rjmp	.+182    	; 0x6108 <nwkTxTaskHandler+0xda>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    6052:	fe 01       	movw	r30, r28
    6054:	ec 57       	subi	r30, 0x7C	; 124
    6056:	ff 4f       	sbci	r31, 0xFF	; 255
    6058:	80 81       	ld	r24, Z
    605a:	91 81       	ldd	r25, Z+1	; 0x01
    605c:	89 2b       	or	r24, r25
    605e:	31 f0       	breq	.+12     	; 0x606c <nwkTxTaskHandler+0x3e>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    6060:	81 e1       	ldi	r24, 0x11	; 17
    6062:	88 83       	st	Y, r24
          SYS_TimerStart(&nwkTxDelayTimer);
    6064:	89 ed       	ldi	r24, 0xD9	; 217
    6066:	91 e2       	ldi	r25, 0x21	; 33
    6068:	2c d2       	rcall	.+1112   	; 0x64c2 <SYS_TimerStart>
    606a:	4e c0       	rjmp	.+156    	; 0x6108 <nwkTxTaskHandler+0xda>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    606c:	83 e1       	ldi	r24, 0x13	; 19
    606e:	88 83       	st	Y, r24
    6070:	4b c0       	rjmp	.+150    	; 0x6108 <nwkTxTaskHandler+0xda>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    6072:	80 91 f3 21 	lds	r24, 0x21F3	; 0x8021f3 <nwkTxPhyActiveFrame>
    6076:	90 91 f4 21 	lds	r25, 0x21F4	; 0x8021f4 <nwkTxPhyActiveFrame+0x1>
    607a:	89 2b       	or	r24, r25
    607c:	09 f0       	breq	.+2      	; 0x6080 <nwkTxTaskHandler+0x52>
    607e:	44 c0       	rjmp	.+136    	; 0x6108 <nwkTxTaskHandler+0xda>
        {
          nwkTxPhyActiveFrame = frame;
    6080:	d0 93 f4 21 	sts	0x21F4, r29	; 0x8021f4 <nwkTxPhyActiveFrame+0x1>
    6084:	c0 93 f3 21 	sts	0x21F3, r28	; 0x8021f3 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    6088:	84 e1       	ldi	r24, 0x14	; 20
    608a:	88 83       	st	Y, r24
          PHY_DataReq(frame->data, frame->size);
    608c:	69 81       	ldd	r22, Y+1	; 0x01
    608e:	ce 01       	movw	r24, r28
    6090:	02 96       	adiw	r24, 0x02	; 2
    6092:	c5 d0       	rcall	.+394    	; 0x621e <PHY_DataReq>
          nwkIb.lock++;
    6094:	e9 e7       	ldi	r30, 0x79	; 121
    6096:	f7 e2       	ldi	r31, 0x27	; 39
    6098:	86 a1       	ldd	r24, Z+38	; 0x26
    609a:	97 a1       	ldd	r25, Z+39	; 0x27
    609c:	01 96       	adiw	r24, 0x01	; 1
    609e:	97 a3       	std	Z+39, r25	; 0x27
    60a0:	86 a3       	std	Z+38, r24	; 0x26
    60a2:	32 c0       	rjmp	.+100    	; 0x6108 <nwkTxTaskHandler+0xda>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    60a4:	fe 01       	movw	r30, r28
    60a6:	ed 57       	subi	r30, 0x7D	; 125
    60a8:	ff 4f       	sbci	r31, 0xFF	; 255
    60aa:	80 81       	ld	r24, Z
    60ac:	81 11       	cpse	r24, r1
    60ae:	1a c0       	rjmp	.+52     	; 0x60e4 <nwkTxTaskHandler+0xb6>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    60b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    60b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    60b4:	80 91 79 27 	lds	r24, 0x2779	; 0x802779 <nwkIb>
    60b8:	90 91 7a 27 	lds	r25, 0x277A	; 0x80277a <nwkIb+0x1>
    60bc:	28 17       	cp	r18, r24
    60be:	39 07       	cpc	r19, r25
    60c0:	71 f4       	brne	.+28     	; 0x60de <nwkTxTaskHandler+0xb0>
    60c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    60c4:	80 ff       	sbrs	r24, 0
    60c6:	0b c0       	rjmp	.+22     	; 0x60de <nwkTxTaskHandler+0xb0>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    60c8:	86 e1       	ldi	r24, 0x16	; 22
    60ca:	88 83       	st	Y, r24
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    60cc:	89 e2       	ldi	r24, 0x29	; 41
    60ce:	90 e0       	ldi	r25, 0x00	; 0
    60d0:	31 96       	adiw	r30, 0x01	; 1
    60d2:	91 83       	std	Z+1, r25	; 0x01
    60d4:	80 83       	st	Z, r24
            SYS_TimerStart(&nwkTxAckWaitTimer);
    60d6:	86 ee       	ldi	r24, 0xE6	; 230
    60d8:	91 e2       	ldi	r25, 0x21	; 33
    60da:	f3 d1       	rcall	.+998    	; 0x64c2 <SYS_TimerStart>
    60dc:	15 c0       	rjmp	.+42     	; 0x6108 <nwkTxTaskHandler+0xda>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    60de:	87 e1       	ldi	r24, 0x17	; 23
    60e0:	88 83       	st	Y, r24
    60e2:	12 c0       	rjmp	.+36     	; 0x6108 <nwkTxTaskHandler+0xda>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    60e4:	87 e1       	ldi	r24, 0x17	; 23
    60e6:	88 83       	st	Y, r24
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    60e8:	0f c0       	rjmp	.+30     	; 0x6108 <nwkTxTaskHandler+0xda>
    60ea:	ce 01       	movw	r24, r28
    60ec:	ee da       	rcall	.-2596   	; 0x56ca <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    60ee:	fe 01       	movw	r30, r28
    60f0:	e9 57       	subi	r30, 0x79	; 121
    60f2:	ff 4f       	sbci	r31, 0xFF	; 255
    60f4:	01 90       	ld	r0, Z+
    60f6:	f0 81       	ld	r31, Z
    60f8:	e0 2d       	mov	r30, r0
    60fa:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    60fc:	19 f4       	brne	.+6      	; 0x6104 <nwkTxTaskHandler+0xd6>
    60fe:	ce 01       	movw	r24, r28
    6100:	77 d9       	rcall	.-3346   	; 0x53f0 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    6102:	02 c0       	rjmp	.+4      	; 0x6108 <nwkTxTaskHandler+0xda>
    6104:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    6106:	19 95       	eicall
    6108:	ce 01       	movw	r24, r28
    610a:	7c d9       	rcall	.-3336   	; 0x5404 <nwkFrameNext>
    610c:	ec 01       	movw	r28, r24
    610e:	89 2b       	or	r24, r25
    6110:	09 f0       	breq	.+2      	; 0x6114 <nwkTxTaskHandler+0xe6>
    6112:	92 cf       	rjmp	.-220    	; 0x6038 <nwkTxTaskHandler+0xa>

      default:
        break;
    };
  }
}
    6114:	df 91       	pop	r29
    6116:	cf 91       	pop	r28
    6118:	08 95       	ret

0000611a <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    611a:	80 91 f5 21 	lds	r24, 0x21F5	; 0x8021f5 <phyBand>
    611e:	98 2f       	mov	r25, r24
    6120:	9f 70       	andi	r25, 0x0F	; 15
    6122:	e4 e5       	ldi	r30, 0x54	; 84
    6124:	f1 e0       	ldi	r31, 0x01	; 1
    6126:	80 81       	ld	r24, Z
    6128:	80 7f       	andi	r24, 0xF0	; 240
    612a:	89 2b       	or	r24, r25
    612c:	80 83       	st	Z, r24
    612e:	80 91 f5 21 	lds	r24, 0x21F5	; 0x8021f5 <phyBand>
    6132:	88 23       	and	r24, r24
    6134:	29 f0       	breq	.+10     	; 0x6140 <phySetChannel+0x26>
    6136:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <phyChannel>
    613a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    613e:	08 95       	ret
    6140:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <phyChannel>
    6144:	98 2f       	mov	r25, r24
    6146:	9f 71       	andi	r25, 0x1F	; 31
    6148:	e8 e4       	ldi	r30, 0x48	; 72
    614a:	f1 e0       	ldi	r31, 0x01	; 1
    614c:	80 81       	ld	r24, Z
    614e:	80 7e       	andi	r24, 0xE0	; 224
    6150:	89 2b       	or	r24, r25
    6152:	80 83       	st	Z, r24
    6154:	08 95       	ret

00006156 <phyTrxSetState>:
    6156:	93 e0       	ldi	r25, 0x03	; 3
    6158:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    615c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    6160:	9f 71       	andi	r25, 0x1F	; 31
    6162:	98 30       	cpi	r25, 0x08	; 8
    6164:	d9 f7       	brne	.-10     	; 0x615c <phyTrxSetState+0x6>
    6166:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    616a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    616e:	9f 71       	andi	r25, 0x1F	; 31
    6170:	89 13       	cpse	r24, r25
    6172:	fb cf       	rjmp	.-10     	; 0x616a <phyTrxSetState+0x14>
    6174:	08 95       	ret

00006176 <phySetRxState>:
    6176:	88 e0       	ldi	r24, 0x08	; 8
    6178:	ee df       	rcall	.-36     	; 0x6156 <phyTrxSetState>
    617a:	8f ef       	ldi	r24, 0xFF	; 255
    617c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    6180:	80 91 f7 21 	lds	r24, 0x21F7	; 0x8021f7 <phyRxState>
    6184:	88 23       	and	r24, r24
    6186:	11 f0       	breq	.+4      	; 0x618c <phySetRxState+0x16>
    6188:	86 e1       	ldi	r24, 0x16	; 22
    618a:	e5 cf       	rjmp	.-54     	; 0x6156 <phyTrxSetState>
    618c:	08 95       	ret

0000618e <PHY_Init>:
    618e:	e9 e3       	ldi	r30, 0x39	; 57
    6190:	f1 e0       	ldi	r31, 0x01	; 1
    6192:	80 81       	ld	r24, Z
    6194:	81 60       	ori	r24, 0x01	; 1
    6196:	80 83       	st	Z, r24
    6198:	10 92 f7 21 	sts	0x21F7, r1	; 0x8021f7 <phyRxState>
    619c:	10 92 f5 21 	sts	0x21F5, r1	; 0x8021f5 <phyBand>
    61a0:	81 e0       	ldi	r24, 0x01	; 1
    61a2:	80 93 78 22 	sts	0x2278, r24	; 0x802278 <phyState>
    61a6:	88 e0       	ldi	r24, 0x08	; 8
    61a8:	d6 df       	rcall	.-84     	; 0x6156 <phyTrxSetState>
    61aa:	8b ee       	ldi	r24, 0xEB	; 235
    61ac:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    61b0:	ec e4       	ldi	r30, 0x4C	; 76
    61b2:	f1 e0       	ldi	r31, 0x01	; 1
    61b4:	80 81       	ld	r24, Z
    61b6:	80 68       	ori	r24, 0x80	; 128
    61b8:	80 83       	st	Z, r24
    61ba:	08 95       	ret

000061bc <PHY_SetRxState>:
    61bc:	80 93 f7 21 	sts	0x21F7, r24	; 0x8021f7 <phyRxState>
    61c0:	da cf       	rjmp	.-76     	; 0x6176 <phySetRxState>
    61c2:	08 95       	ret

000061c4 <PHY_SetChannel>:
    61c4:	80 93 f6 21 	sts	0x21F6, r24	; 0x8021f6 <phyChannel>
    61c8:	a8 cf       	rjmp	.-176    	; 0x611a <phySetChannel>
    61ca:	08 95       	ret

000061cc <PHY_SetPanId>:
    61cc:	cf 93       	push	r28
    61ce:	df 93       	push	r29
    61d0:	1f 92       	push	r1
    61d2:	1f 92       	push	r1
    61d4:	cd b7       	in	r28, 0x3d	; 61
    61d6:	de b7       	in	r29, 0x3e	; 62
    61d8:	9a 83       	std	Y+2, r25	; 0x02
    61da:	89 83       	std	Y+1, r24	; 0x01
    61dc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    61e0:	8a 81       	ldd	r24, Y+2	; 0x02
    61e2:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    61e6:	0f 90       	pop	r0
    61e8:	0f 90       	pop	r0
    61ea:	df 91       	pop	r29
    61ec:	cf 91       	pop	r28
    61ee:	08 95       	ret

000061f0 <PHY_SetShortAddr>:
    61f0:	cf 93       	push	r28
    61f2:	df 93       	push	r29
    61f4:	1f 92       	push	r1
    61f6:	1f 92       	push	r1
    61f8:	cd b7       	in	r28, 0x3d	; 61
    61fa:	de b7       	in	r29, 0x3e	; 62
    61fc:	9a 83       	std	Y+2, r25	; 0x02
    61fe:	89 83       	std	Y+1, r24	; 0x01
    6200:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    6204:	8a 81       	ldd	r24, Y+2	; 0x02
    6206:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    620a:	99 81       	ldd	r25, Y+1	; 0x01
    620c:	8a 81       	ldd	r24, Y+2	; 0x02
    620e:	89 0f       	add	r24, r25
    6210:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    6214:	0f 90       	pop	r0
    6216:	0f 90       	pop	r0
    6218:	df 91       	pop	r29
    621a:	cf 91       	pop	r28
    621c:	08 95       	ret

0000621e <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    621e:	0f 93       	push	r16
    6220:	1f 93       	push	r17
    6222:	cf 93       	push	r28
    6224:	8c 01       	movw	r16, r24
    6226:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    6228:	89 e1       	ldi	r24, 0x19	; 25
    622a:	95 df       	rcall	.-214    	; 0x6156 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    622c:	8f ef       	ldi	r24, 0xFF	; 255
    622e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    6232:	82 e0       	ldi	r24, 0x02	; 2
    6234:	8c 0f       	add	r24, r28
    6236:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    623a:	20 e0       	ldi	r18, 0x00	; 0
    623c:	0b c0       	rjmp	.+22     	; 0x6254 <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];
    623e:	82 2f       	mov	r24, r18
    6240:	90 e0       	ldi	r25, 0x00	; 0
    6242:	fc 01       	movw	r30, r24
    6244:	ef 57       	subi	r30, 0x7F	; 127
    6246:	fe 4f       	sbci	r31, 0xFE	; 254
    6248:	d8 01       	movw	r26, r16
    624a:	a8 0f       	add	r26, r24
    624c:	b9 1f       	adc	r27, r25
    624e:	8c 91       	ld	r24, X
    6250:	80 83       	st	Z, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    6252:	2f 5f       	subi	r18, 0xFF	; 255
    6254:	2c 17       	cp	r18, r28
    6256:	98 f3       	brcs	.-26     	; 0x623e <PHY_DataReq+0x20>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    6258:	83 e0       	ldi	r24, 0x03	; 3
    625a:	80 93 78 22 	sts	0x2278, r24	; 0x802278 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    625e:	82 e0       	ldi	r24, 0x02	; 2
    6260:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    6264:	cf 91       	pop	r28
    6266:	1f 91       	pop	r17
    6268:	0f 91       	pop	r16
    626a:	08 95       	ret

0000626c <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    626c:	1f 93       	push	r17
    626e:	cf 93       	push	r28
    6270:	df 93       	push	r29
    6272:	00 d0       	rcall	.+0      	; 0x6274 <PHY_TaskHandler+0x8>
    6274:	1f 92       	push	r1
    6276:	1f 92       	push	r1
    6278:	cd b7       	in	r28, 0x3d	; 61
    627a:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    627c:	80 91 78 22 	lds	r24, 0x2278	; 0x802278 <phyState>
    6280:	82 30       	cpi	r24, 0x02	; 2
    6282:	09 f4       	brne	.+2      	; 0x6286 <PHY_TaskHandler+0x1a>
    6284:	63 c0       	rjmp	.+198    	; 0x634c <PHY_TaskHandler+0xe0>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    6286:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    628a:	83 ff       	sbrs	r24, 3
    628c:	3c c0       	rjmp	.+120    	; 0x6306 <PHY_TaskHandler+0x9a>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    628e:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    6292:	20 e0       	ldi	r18, 0x00	; 0
    6294:	09 c0       	rjmp	.+18     	; 0x62a8 <PHY_TaskHandler+0x3c>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    6296:	fc 01       	movw	r30, r24
    6298:	e0 58       	subi	r30, 0x80	; 128
    629a:	fe 4f       	sbci	r31, 0xFE	; 254
    629c:	30 81       	ld	r19, Z
    629e:	fc 01       	movw	r30, r24
    62a0:	e8 50       	subi	r30, 0x08	; 8
    62a2:	fe 4d       	sbci	r31, 0xDE	; 222
    62a4:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    62a6:	2f 5f       	subi	r18, 0xFF	; 255
    62a8:	82 2f       	mov	r24, r18
    62aa:	90 e0       	ldi	r25, 0x00	; 0
    62ac:	4a 2f       	mov	r20, r26
    62ae:	50 e0       	ldi	r21, 0x00	; 0
    62b0:	ba 01       	movw	r22, r20
    62b2:	6f 5f       	subi	r22, 0xFF	; 255
    62b4:	7f 4f       	sbci	r23, 0xFF	; 255
    62b6:	86 17       	cp	r24, r22
    62b8:	97 07       	cpc	r25, r23
    62ba:	6c f3       	brlt	.-38     	; 0x6296 <PHY_TaskHandler+0x2a>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    62bc:	88 ef       	ldi	r24, 0xF8	; 248
    62be:	91 e2       	ldi	r25, 0x21	; 33
    62c0:	9a 83       	std	Y+2, r25	; 0x02
    62c2:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    62c4:	a2 50       	subi	r26, 0x02	; 2
    62c6:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    62c8:	fa 01       	movw	r30, r20
    62ca:	e8 50       	subi	r30, 0x08	; 8
    62cc:	fe 4d       	sbci	r31, 0xDE	; 222
    62ce:	80 81       	ld	r24, Z
    62d0:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    62d2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    62d6:	8a 55       	subi	r24, 0x5A	; 90
    62d8:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    62da:	ce 01       	movw	r24, r28
    62dc:	01 96       	adiw	r24, 0x01	; 1
    62de:	f6 dc       	rcall	.-1556   	; 0x5ccc <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    62e0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    62e4:	8f 71       	andi	r24, 0x1F	; 31
    62e6:	86 31       	cpi	r24, 0x16	; 22
    62e8:	d9 f7       	brne	.-10     	; 0x62e0 <PHY_TaskHandler+0x74>

    IRQ_STATUS_REG_s.rxEnd = 1;
    62ea:	ef e4       	ldi	r30, 0x4F	; 79
    62ec:	f1 e0       	ldi	r31, 0x01	; 1
    62ee:	80 81       	ld	r24, Z
    62f0:	88 60       	ori	r24, 0x08	; 8
    62f2:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    62f4:	ec e4       	ldi	r30, 0x4C	; 76
    62f6:	f1 e0       	ldi	r31, 0x01	; 1
    62f8:	80 81       	ld	r24, Z
    62fa:	8f 77       	andi	r24, 0x7F	; 127
    62fc:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    62fe:	80 81       	ld	r24, Z
    6300:	80 68       	ori	r24, 0x80	; 128
    6302:	80 83       	st	Z, r24
    6304:	23 c0       	rjmp	.+70     	; 0x634c <PHY_TaskHandler+0xe0>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    6306:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    630a:	86 ff       	sbrs	r24, 6
    630c:	1f c0       	rjmp	.+62     	; 0x634c <PHY_TaskHandler+0xe0>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    630e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    6312:	8f 71       	andi	r24, 0x1F	; 31
    6314:	89 31       	cpi	r24, 0x19	; 25
    6316:	a9 f4       	brne	.+42     	; 0x6342 <PHY_TaskHandler+0xd6>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    6318:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    631c:	12 95       	swap	r17
    631e:	16 95       	lsr	r17
    6320:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    6322:	49 f0       	breq	.+18     	; 0x6336 <PHY_TaskHandler+0xca>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    6324:	13 30       	cpi	r17, 0x03	; 3
    6326:	21 f0       	breq	.+8      	; 0x6330 <PHY_TaskHandler+0xc4>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    6328:	15 30       	cpi	r17, 0x05	; 5
    632a:	21 f4       	brne	.+8      	; 0x6334 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_NO_ACK;
    632c:	12 e0       	ldi	r17, 0x02	; 2
    632e:	03 c0       	rjmp	.+6      	; 0x6336 <PHY_TaskHandler+0xca>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    6330:	11 e0       	ldi	r17, 0x01	; 1
    6332:	01 c0       	rjmp	.+2      	; 0x6336 <PHY_TaskHandler+0xca>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    6334:	13 e0       	ldi	r17, 0x03	; 3
    6336:	1f df       	rcall	.-450    	; 0x6176 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    6338:	81 e0       	ldi	r24, 0x01	; 1
    633a:	80 93 78 22 	sts	0x2278, r24	; 0x802278 <phyState>

      PHY_DataConf(status);
    633e:	81 2f       	mov	r24, r17
    6340:	5b de       	rcall	.-842    	; 0x5ff8 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    6342:	ef e4       	ldi	r30, 0x4F	; 79
    6344:	f1 e0       	ldi	r31, 0x01	; 1
    6346:	80 81       	ld	r24, Z
    6348:	80 64       	ori	r24, 0x40	; 64
    634a:	80 83       	st	Z, r24
  }
}
    634c:	0f 90       	pop	r0
    634e:	0f 90       	pop	r0
    6350:	0f 90       	pop	r0
    6352:	0f 90       	pop	r0
    6354:	0f 90       	pop	r0
    6356:	df 91       	pop	r29
    6358:	cf 91       	pop	r28
    635a:	1f 91       	pop	r17
    635c:	08 95       	ret

0000635e <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    635e:	0e 94 76 27 	call	0x4eec	; 0x4eec <HAL_Init>
  SYS_TimerInit();
    6362:	60 d0       	rcall	.+192    	; 0x6424 <SYS_TimerInit>
  PHY_Init();
    6364:	14 df       	rcall	.-472    	; 0x618e <PHY_Init>
    6366:	0c 94 9b 28 	jmp	0x5136	; 0x5136 <NWK_Init>
  NWK_Init();
    636a:	08 95       	ret

0000636c <SYS_TaskHandler>:
    636c:	7f df       	rcall	.-258    	; 0x626c <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    636e:	0e 94 cf 28 	call	0x519e	; 0x519e <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    6372:	b2 c0       	rjmp	.+356    	; 0x64d8 <SYS_TimerTaskHandler>
    6374:	08 95       	ret

00006376 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    6376:	0f 93       	push	r16
    6378:	1f 93       	push	r17
    637a:	cf 93       	push	r28
    637c:	df 93       	push	r29
    637e:	ec 01       	movw	r28, r24
  if (timers)
    6380:	80 91 79 22 	lds	r24, 0x2279	; 0x802279 <timers>
    6384:	90 91 7a 22 	lds	r25, 0x227A	; 0x80227a <timers+0x1>
    6388:	00 97       	sbiw	r24, 0x00	; 0
    638a:	c9 f1       	breq	.+114    	; 0x63fe <placeTimer+0x88>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    638c:	4e 81       	ldd	r20, Y+6	; 0x06
    638e:	5f 81       	ldd	r21, Y+7	; 0x07
    6390:	68 85       	ldd	r22, Y+8	; 0x08
    6392:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    6394:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    6396:	a0 e0       	ldi	r26, 0x00	; 0
    6398:	b0 e0       	ldi	r27, 0x00	; 0
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    639a:	1a c0       	rjmp	.+52     	; 0x63d0 <placeTimer+0x5a>
    {
      if (timeout < t->timeout)
    639c:	02 81       	ldd	r16, Z+2	; 0x02
    639e:	13 81       	ldd	r17, Z+3	; 0x03
    63a0:	24 81       	ldd	r18, Z+4	; 0x04
    63a2:	35 81       	ldd	r19, Z+5	; 0x05
    63a4:	40 17       	cp	r20, r16
    63a6:	51 07       	cpc	r21, r17
    63a8:	62 07       	cpc	r22, r18
    63aa:	73 07       	cpc	r23, r19
    63ac:	48 f4       	brcc	.+18     	; 0x63c0 <placeTimer+0x4a>
      {
         t->timeout -= timeout;
    63ae:	04 1b       	sub	r16, r20
    63b0:	15 0b       	sbc	r17, r21
    63b2:	26 0b       	sbc	r18, r22
    63b4:	37 0b       	sbc	r19, r23
    63b6:	02 83       	std	Z+2, r16	; 0x02
    63b8:	13 83       	std	Z+3, r17	; 0x03
    63ba:	24 83       	std	Z+4, r18	; 0x04
    63bc:	35 83       	std	Z+5, r19	; 0x05
         break;
    63be:	0a c0       	rjmp	.+20     	; 0x63d4 <placeTimer+0x5e>
      }
      else
        timeout -= t->timeout;
    63c0:	40 1b       	sub	r20, r16
    63c2:	51 0b       	sbc	r21, r17
    63c4:	62 0b       	sbc	r22, r18
    63c6:	73 0b       	sbc	r23, r19

      prev = t;
    63c8:	df 01       	movw	r26, r30
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    63ca:	01 90       	ld	r0, Z+
    63cc:	f0 81       	ld	r31, Z
    63ce:	e0 2d       	mov	r30, r0
    63d0:	30 97       	sbiw	r30, 0x00	; 0
    63d2:	21 f7       	brne	.-56     	; 0x639c <placeTimer+0x26>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    63d4:	4a 83       	std	Y+2, r20	; 0x02
    63d6:	5b 83       	std	Y+3, r21	; 0x03
    63d8:	6c 83       	std	Y+4, r22	; 0x04
    63da:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    63dc:	10 97       	sbiw	r26, 0x00	; 0
    63de:	41 f0       	breq	.+16     	; 0x63f0 <placeTimer+0x7a>
    {
      timer->next = prev->next;
    63e0:	8d 91       	ld	r24, X+
    63e2:	9c 91       	ld	r25, X
    63e4:	11 97       	sbiw	r26, 0x01	; 1
    63e6:	99 83       	std	Y+1, r25	; 0x01
    63e8:	88 83       	st	Y, r24
      prev->next = timer;
    63ea:	cd 93       	st	X+, r28
    63ec:	dc 93       	st	X, r29
    63ee:	15 c0       	rjmp	.+42     	; 0x641a <placeTimer+0xa4>
    }
    else
    {
      timer->next = timers;
    63f0:	99 83       	std	Y+1, r25	; 0x01
    63f2:	88 83       	st	Y, r24
      timers = timer;
    63f4:	d0 93 7a 22 	sts	0x227A, r29	; 0x80227a <timers+0x1>
    63f8:	c0 93 79 22 	sts	0x2279, r28	; 0x802279 <timers>
    63fc:	0e c0       	rjmp	.+28     	; 0x641a <placeTimer+0xa4>
    }
  }
  else
  {
    timer->next = NULL;
    63fe:	19 82       	std	Y+1, r1	; 0x01
    6400:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    6402:	8e 81       	ldd	r24, Y+6	; 0x06
    6404:	9f 81       	ldd	r25, Y+7	; 0x07
    6406:	a8 85       	ldd	r26, Y+8	; 0x08
    6408:	b9 85       	ldd	r27, Y+9	; 0x09
    640a:	8a 83       	std	Y+2, r24	; 0x02
    640c:	9b 83       	std	Y+3, r25	; 0x03
    640e:	ac 83       	std	Y+4, r26	; 0x04
    6410:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    6412:	d0 93 7a 22 	sts	0x227A, r29	; 0x80227a <timers+0x1>
    6416:	c0 93 79 22 	sts	0x2279, r28	; 0x802279 <timers>
  }
}
    641a:	df 91       	pop	r29
    641c:	cf 91       	pop	r28
    641e:	1f 91       	pop	r17
    6420:	0f 91       	pop	r16
    6422:	08 95       	ret

00006424 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    6424:	10 92 7a 22 	sts	0x227A, r1	; 0x80227a <timers+0x1>
    6428:	10 92 79 22 	sts	0x2279, r1	; 0x802279 <timers>
    642c:	08 95       	ret

0000642e <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    642e:	cf 93       	push	r28
    6430:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    6432:	e0 91 79 22 	lds	r30, 0x2279	; 0x802279 <timers>
    6436:	f0 91 7a 22 	lds	r31, 0x227A	; 0x80227a <timers+0x1>

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;
    643a:	a0 e0       	ldi	r26, 0x00	; 0
    643c:	b0 e0       	ldi	r27, 0x00	; 0

  for (SYS_Timer_t *t = timers; t; t = t->next)
    643e:	2b c0       	rjmp	.+86     	; 0x6496 <SYS_TimerStop+0x68>
  {
    if (t == timer)
    6440:	e8 17       	cp	r30, r24
    6442:	f9 07       	cpc	r31, r25
    6444:	21 f5       	brne	.+72     	; 0x648e <SYS_TimerStop+0x60>
    {
      if (prev)
    6446:	10 97       	sbiw	r26, 0x00	; 0
    6448:	29 f0       	breq	.+10     	; 0x6454 <SYS_TimerStop+0x26>
        prev->next = t->next;
    644a:	20 81       	ld	r18, Z
    644c:	31 81       	ldd	r19, Z+1	; 0x01
    644e:	2d 93       	st	X+, r18
    6450:	3c 93       	st	X, r19
    6452:	06 c0       	rjmp	.+12     	; 0x6460 <SYS_TimerStop+0x32>
      else
        timers = t->next;
    6454:	20 81       	ld	r18, Z
    6456:	31 81       	ldd	r19, Z+1	; 0x01
    6458:	30 93 7a 22 	sts	0x227A, r19	; 0x80227a <timers+0x1>
    645c:	20 93 79 22 	sts	0x2279, r18	; 0x802279 <timers>

      if (t->next)
    6460:	01 90       	ld	r0, Z+
    6462:	f0 81       	ld	r31, Z
    6464:	e0 2d       	mov	r30, r0
    6466:	30 97       	sbiw	r30, 0x00	; 0
    6468:	c1 f0       	breq	.+48     	; 0x649a <SYS_TimerStop+0x6c>
        t->next->timeout += timer->timeout;
    646a:	ec 01       	movw	r28, r24
    646c:	8a 81       	ldd	r24, Y+2	; 0x02
    646e:	9b 81       	ldd	r25, Y+3	; 0x03
    6470:	ac 81       	ldd	r26, Y+4	; 0x04
    6472:	bd 81       	ldd	r27, Y+5	; 0x05
    6474:	42 81       	ldd	r20, Z+2	; 0x02
    6476:	53 81       	ldd	r21, Z+3	; 0x03
    6478:	64 81       	ldd	r22, Z+4	; 0x04
    647a:	75 81       	ldd	r23, Z+5	; 0x05
    647c:	84 0f       	add	r24, r20
    647e:	95 1f       	adc	r25, r21
    6480:	a6 1f       	adc	r26, r22
    6482:	b7 1f       	adc	r27, r23
    6484:	82 83       	std	Z+2, r24	; 0x02
    6486:	93 83       	std	Z+3, r25	; 0x03
    6488:	a4 83       	std	Z+4, r26	; 0x04
    648a:	b5 83       	std	Z+5, r27	; 0x05
    648c:	06 c0       	rjmp	.+12     	; 0x649a <SYS_TimerStop+0x6c>

      break;
    }
    prev = t;
    648e:	df 01       	movw	r26, r30
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    6490:	01 90       	ld	r0, Z+
    6492:	f0 81       	ld	r31, Z
    6494:	e0 2d       	mov	r30, r0
    6496:	30 97       	sbiw	r30, 0x00	; 0
    6498:	99 f6       	brne	.-90     	; 0x6440 <SYS_TimerStop+0x12>

      break;
    }
    prev = t;
  }
}
    649a:	df 91       	pop	r29
    649c:	cf 91       	pop	r28
    649e:	08 95       	ret

000064a0 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    64a0:	e0 91 79 22 	lds	r30, 0x2279	; 0x802279 <timers>
    64a4:	f0 91 7a 22 	lds	r31, 0x227A	; 0x80227a <timers+0x1>
    64a8:	06 c0       	rjmp	.+12     	; 0x64b6 <SYS_TimerStarted+0x16>
    if (t == timer)
    64aa:	e8 17       	cp	r30, r24
    64ac:	f9 07       	cpc	r31, r25
    64ae:	39 f0       	breq	.+14     	; 0x64be <SYS_TimerStarted+0x1e>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    64b0:	01 90       	ld	r0, Z+
    64b2:	f0 81       	ld	r31, Z
    64b4:	e0 2d       	mov	r30, r0
    64b6:	30 97       	sbiw	r30, 0x00	; 0
    64b8:	c1 f7       	brne	.-16     	; 0x64aa <SYS_TimerStarted+0xa>
    if (t == timer)
      return true;
  return false;
    64ba:	80 e0       	ldi	r24, 0x00	; 0
    64bc:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    64be:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    64c0:	08 95       	ret

000064c2 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    64c2:	cf 93       	push	r28
    64c4:	df 93       	push	r29
    64c6:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    64c8:	eb df       	rcall	.-42     	; 0x64a0 <SYS_TimerStarted>
    64ca:	81 11       	cpse	r24, r1
    64cc:	02 c0       	rjmp	.+4      	; 0x64d2 <SYS_TimerStart+0x10>
    placeTimer(timer);
    64ce:	ce 01       	movw	r24, r28
    64d0:	52 df       	rcall	.-348    	; 0x6376 <placeTimer>
}
    64d2:	df 91       	pop	r29
    64d4:	cf 91       	pop	r28
    64d6:	08 95       	ret

000064d8 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    64d8:	cf 92       	push	r12
    64da:	df 92       	push	r13
    64dc:	ef 92       	push	r14
    64de:	ff 92       	push	r15
    64e0:	cf 93       	push	r28
    64e2:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    64e4:	80 91 78 27 	lds	r24, 0x2778	; 0x802778 <halTimerIrqCount>
    64e8:	88 23       	and	r24, r24
    64ea:	09 f4       	brne	.+2      	; 0x64ee <SYS_TimerTaskHandler+0x16>
    64ec:	4d c0       	rjmp	.+154    	; 0x6588 <SYS_TimerTaskHandler+0xb0>
    return;

  ATOMIC_SECTION_ENTER
    64ee:	8f b7       	in	r24, 0x3f	; 63
    64f0:	f8 94       	cli
    cnt = halTimerIrqCount;
    64f2:	c0 90 78 27 	lds	r12, 0x2778	; 0x802778 <halTimerIrqCount>
    halTimerIrqCount = 0;
    64f6:	10 92 78 27 	sts	0x2778, r1	; 0x802778 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    64fa:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    64fc:	d1 2c       	mov	r13, r1
    64fe:	e1 2c       	mov	r14, r1
    6500:	f1 2c       	mov	r15, r1
    6502:	cc 0c       	add	r12, r12
    6504:	dd 1c       	adc	r13, r13
    6506:	ee 1c       	adc	r14, r14
    6508:	ff 1c       	adc	r15, r15
    650a:	d7 01       	movw	r26, r14
    650c:	c6 01       	movw	r24, r12
    650e:	88 0f       	add	r24, r24
    6510:	99 1f       	adc	r25, r25
    6512:	aa 1f       	adc	r26, r26
    6514:	bb 1f       	adc	r27, r27
    6516:	88 0f       	add	r24, r24
    6518:	99 1f       	adc	r25, r25
    651a:	aa 1f       	adc	r26, r26
    651c:	bb 1f       	adc	r27, r27
    651e:	c8 0e       	add	r12, r24
    6520:	d9 1e       	adc	r13, r25
    6522:	ea 1e       	adc	r14, r26
    6524:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    6526:	13 c0       	rjmp	.+38     	; 0x654e <SYS_TimerTaskHandler+0x76>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    6528:	c8 1a       	sub	r12, r24
    652a:	d9 0a       	sbc	r13, r25
    652c:	ea 0a       	sbc	r14, r26
    652e:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    6530:	88 81       	ld	r24, Y
    6532:	99 81       	ldd	r25, Y+1	; 0x01
    6534:	90 93 7a 22 	sts	0x227A, r25	; 0x80227a <timers+0x1>
    6538:	80 93 79 22 	sts	0x2279, r24	; 0x802279 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    653c:	8a 85       	ldd	r24, Y+10	; 0x0a
    653e:	81 30       	cpi	r24, 0x01	; 1
    6540:	11 f4       	brne	.+4      	; 0x6546 <SYS_TimerTaskHandler+0x6e>
      placeTimer(timer);
    6542:	ce 01       	movw	r24, r28
    6544:	18 df       	rcall	.-464    	; 0x6376 <placeTimer>
    timer->handler(timer);
    6546:	eb 85       	ldd	r30, Y+11	; 0x0b
    6548:	fc 85       	ldd	r31, Y+12	; 0x0c
    654a:	ce 01       	movw	r24, r28
    654c:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    654e:	c0 91 79 22 	lds	r28, 0x2279	; 0x802279 <timers>
    6552:	d0 91 7a 22 	lds	r29, 0x227A	; 0x80227a <timers+0x1>
    6556:	20 97       	sbiw	r28, 0x00	; 0
    6558:	49 f0       	breq	.+18     	; 0x656c <SYS_TimerTaskHandler+0x94>
    655a:	8a 81       	ldd	r24, Y+2	; 0x02
    655c:	9b 81       	ldd	r25, Y+3	; 0x03
    655e:	ac 81       	ldd	r26, Y+4	; 0x04
    6560:	bd 81       	ldd	r27, Y+5	; 0x05
    6562:	c8 16       	cp	r12, r24
    6564:	d9 06       	cpc	r13, r25
    6566:	ea 06       	cpc	r14, r26
    6568:	fb 06       	cpc	r15, r27
    656a:	f0 f6       	brcc	.-68     	; 0x6528 <SYS_TimerTaskHandler+0x50>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    656c:	20 97       	sbiw	r28, 0x00	; 0
    656e:	61 f0       	breq	.+24     	; 0x6588 <SYS_TimerTaskHandler+0xb0>
    timers->timeout -= elapsed;
    6570:	8a 81       	ldd	r24, Y+2	; 0x02
    6572:	9b 81       	ldd	r25, Y+3	; 0x03
    6574:	ac 81       	ldd	r26, Y+4	; 0x04
    6576:	bd 81       	ldd	r27, Y+5	; 0x05
    6578:	8c 19       	sub	r24, r12
    657a:	9d 09       	sbc	r25, r13
    657c:	ae 09       	sbc	r26, r14
    657e:	bf 09       	sbc	r27, r15
    6580:	8a 83       	std	Y+2, r24	; 0x02
    6582:	9b 83       	std	Y+3, r25	; 0x03
    6584:	ac 83       	std	Y+4, r26	; 0x04
    6586:	bd 83       	std	Y+5, r27	; 0x05
}
    6588:	df 91       	pop	r29
    658a:	cf 91       	pop	r28
    658c:	ff 90       	pop	r15
    658e:	ef 90       	pop	r14
    6590:	df 90       	pop	r13
    6592:	cf 90       	pop	r12
    6594:	08 95       	ret

00006596 <UART_init>:
}

uint8_t UART_GetChar(void){
	while (!tbi_(UCSR1A,RXC1));
	return UDR1;
}
    6596:	9c 01       	movw	r18, r24
    6598:	40 e0       	ldi	r20, 0x00	; 0
    659a:	50 e0       	ldi	r21, 0x00	; 0
    659c:	60 e2       	ldi	r22, 0x20	; 32
    659e:	71 ea       	ldi	r23, 0xA1	; 161
    65a0:	87 e0       	ldi	r24, 0x07	; 7
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	c4 d3       	rcall	.+1928   	; 0x6d2e <__divmodsi4>
    65a6:	21 50       	subi	r18, 0x01	; 1
    65a8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
    65ac:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    65b0:	e9 ec       	ldi	r30, 0xC9	; 201
    65b2:	f0 e0       	ldi	r31, 0x00	; 0
    65b4:	88 e1       	ldi	r24, 0x18	; 24
    65b6:	80 83       	st	Z, r24
    65b8:	86 e0       	ldi	r24, 0x06	; 6
    65ba:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
    65be:	80 81       	ld	r24, Z
    65c0:	80 68       	ori	r24, 0x80	; 128
    65c2:	80 83       	st	Z, r24
    65c4:	08 95       	ret

000065c6 <printCHAR>:
int printCHAR(char character, FILE *stream)
{
	while ((UCSR1A & (1 << UDRE1)) == 0) {};
    65c6:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    65ca:	95 ff       	sbrs	r25, 5
    65cc:	fc cf       	rjmp	.-8      	; 0x65c6 <printCHAR>

	UDR1 = character;
    65ce:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

	return 0;
    65d2:	80 e0       	ldi	r24, 0x00	; 0
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	08 95       	ret

000065d8 <vfprintf>:
    65d8:	2f 92       	push	r2
    65da:	3f 92       	push	r3
    65dc:	4f 92       	push	r4
    65de:	5f 92       	push	r5
    65e0:	6f 92       	push	r6
    65e2:	7f 92       	push	r7
    65e4:	8f 92       	push	r8
    65e6:	9f 92       	push	r9
    65e8:	af 92       	push	r10
    65ea:	bf 92       	push	r11
    65ec:	cf 92       	push	r12
    65ee:	df 92       	push	r13
    65f0:	ef 92       	push	r14
    65f2:	ff 92       	push	r15
    65f4:	0f 93       	push	r16
    65f6:	1f 93       	push	r17
    65f8:	cf 93       	push	r28
    65fa:	df 93       	push	r29
    65fc:	cd b7       	in	r28, 0x3d	; 61
    65fe:	de b7       	in	r29, 0x3e	; 62
    6600:	60 97       	sbiw	r28, 0x10	; 16
    6602:	0f b6       	in	r0, 0x3f	; 63
    6604:	f8 94       	cli
    6606:	de bf       	out	0x3e, r29	; 62
    6608:	0f be       	out	0x3f, r0	; 63
    660a:	cd bf       	out	0x3d, r28	; 61
    660c:	7c 01       	movw	r14, r24
    660e:	1b 01       	movw	r2, r22
    6610:	6a 01       	movw	r12, r20
    6612:	fc 01       	movw	r30, r24
    6614:	17 82       	std	Z+7, r1	; 0x07
    6616:	16 82       	std	Z+6, r1	; 0x06
    6618:	83 81       	ldd	r24, Z+3	; 0x03
    661a:	81 ff       	sbrs	r24, 1
    661c:	2a c3       	rjmp	.+1620   	; 0x6c72 <vfprintf+0x69a>
    661e:	9e 01       	movw	r18, r28
    6620:	2f 5f       	subi	r18, 0xFF	; 255
    6622:	3f 4f       	sbci	r19, 0xFF	; 255
    6624:	39 01       	movw	r6, r18
    6626:	f7 01       	movw	r30, r14
    6628:	93 81       	ldd	r25, Z+3	; 0x03
    662a:	f1 01       	movw	r30, r2
    662c:	93 fd       	sbrc	r25, 3
    662e:	85 91       	lpm	r24, Z+
    6630:	93 ff       	sbrs	r25, 3
    6632:	81 91       	ld	r24, Z+
    6634:	1f 01       	movw	r2, r30
    6636:	88 23       	and	r24, r24
    6638:	09 f4       	brne	.+2      	; 0x663c <vfprintf+0x64>
    663a:	17 c3       	rjmp	.+1582   	; 0x6c6a <vfprintf+0x692>
    663c:	85 32       	cpi	r24, 0x25	; 37
    663e:	39 f4       	brne	.+14     	; 0x664e <vfprintf+0x76>
    6640:	93 fd       	sbrc	r25, 3
    6642:	85 91       	lpm	r24, Z+
    6644:	93 ff       	sbrs	r25, 3
    6646:	81 91       	ld	r24, Z+
    6648:	1f 01       	movw	r2, r30
    664a:	85 32       	cpi	r24, 0x25	; 37
    664c:	31 f4       	brne	.+12     	; 0x665a <vfprintf+0x82>
    664e:	b7 01       	movw	r22, r14
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	4c d5       	rcall	.+2712   	; 0x70ec <fputc>
    6654:	56 01       	movw	r10, r12
    6656:	65 01       	movw	r12, r10
    6658:	e6 cf       	rjmp	.-52     	; 0x6626 <vfprintf+0x4e>
    665a:	10 e0       	ldi	r17, 0x00	; 0
    665c:	51 2c       	mov	r5, r1
    665e:	91 2c       	mov	r9, r1
    6660:	ff e1       	ldi	r31, 0x1F	; 31
    6662:	f9 15       	cp	r31, r9
    6664:	d8 f0       	brcs	.+54     	; 0x669c <vfprintf+0xc4>
    6666:	8b 32       	cpi	r24, 0x2B	; 43
    6668:	79 f0       	breq	.+30     	; 0x6688 <vfprintf+0xb0>
    666a:	38 f4       	brcc	.+14     	; 0x667a <vfprintf+0xa2>
    666c:	80 32       	cpi	r24, 0x20	; 32
    666e:	79 f0       	breq	.+30     	; 0x668e <vfprintf+0xb6>
    6670:	83 32       	cpi	r24, 0x23	; 35
    6672:	a1 f4       	brne	.+40     	; 0x669c <vfprintf+0xc4>
    6674:	f9 2d       	mov	r31, r9
    6676:	f0 61       	ori	r31, 0x10	; 16
    6678:	2e c0       	rjmp	.+92     	; 0x66d6 <vfprintf+0xfe>
    667a:	8d 32       	cpi	r24, 0x2D	; 45
    667c:	61 f0       	breq	.+24     	; 0x6696 <vfprintf+0xbe>
    667e:	80 33       	cpi	r24, 0x30	; 48
    6680:	69 f4       	brne	.+26     	; 0x669c <vfprintf+0xc4>
    6682:	29 2d       	mov	r18, r9
    6684:	21 60       	ori	r18, 0x01	; 1
    6686:	2d c0       	rjmp	.+90     	; 0x66e2 <vfprintf+0x10a>
    6688:	39 2d       	mov	r19, r9
    668a:	32 60       	ori	r19, 0x02	; 2
    668c:	93 2e       	mov	r9, r19
    668e:	89 2d       	mov	r24, r9
    6690:	84 60       	ori	r24, 0x04	; 4
    6692:	98 2e       	mov	r9, r24
    6694:	2a c0       	rjmp	.+84     	; 0x66ea <vfprintf+0x112>
    6696:	e9 2d       	mov	r30, r9
    6698:	e8 60       	ori	r30, 0x08	; 8
    669a:	15 c0       	rjmp	.+42     	; 0x66c6 <vfprintf+0xee>
    669c:	97 fc       	sbrc	r9, 7
    669e:	2d c0       	rjmp	.+90     	; 0x66fa <vfprintf+0x122>
    66a0:	20 ed       	ldi	r18, 0xD0	; 208
    66a2:	28 0f       	add	r18, r24
    66a4:	2a 30       	cpi	r18, 0x0A	; 10
    66a6:	88 f4       	brcc	.+34     	; 0x66ca <vfprintf+0xf2>
    66a8:	96 fe       	sbrs	r9, 6
    66aa:	06 c0       	rjmp	.+12     	; 0x66b8 <vfprintf+0xe0>
    66ac:	3a e0       	ldi	r19, 0x0A	; 10
    66ae:	13 9f       	mul	r17, r19
    66b0:	20 0d       	add	r18, r0
    66b2:	11 24       	eor	r1, r1
    66b4:	12 2f       	mov	r17, r18
    66b6:	19 c0       	rjmp	.+50     	; 0x66ea <vfprintf+0x112>
    66b8:	8a e0       	ldi	r24, 0x0A	; 10
    66ba:	58 9e       	mul	r5, r24
    66bc:	20 0d       	add	r18, r0
    66be:	11 24       	eor	r1, r1
    66c0:	52 2e       	mov	r5, r18
    66c2:	e9 2d       	mov	r30, r9
    66c4:	e0 62       	ori	r30, 0x20	; 32
    66c6:	9e 2e       	mov	r9, r30
    66c8:	10 c0       	rjmp	.+32     	; 0x66ea <vfprintf+0x112>
    66ca:	8e 32       	cpi	r24, 0x2E	; 46
    66cc:	31 f4       	brne	.+12     	; 0x66da <vfprintf+0x102>
    66ce:	96 fc       	sbrc	r9, 6
    66d0:	cc c2       	rjmp	.+1432   	; 0x6c6a <vfprintf+0x692>
    66d2:	f9 2d       	mov	r31, r9
    66d4:	f0 64       	ori	r31, 0x40	; 64
    66d6:	9f 2e       	mov	r9, r31
    66d8:	08 c0       	rjmp	.+16     	; 0x66ea <vfprintf+0x112>
    66da:	8c 36       	cpi	r24, 0x6C	; 108
    66dc:	21 f4       	brne	.+8      	; 0x66e6 <vfprintf+0x10e>
    66de:	29 2d       	mov	r18, r9
    66e0:	20 68       	ori	r18, 0x80	; 128
    66e2:	92 2e       	mov	r9, r18
    66e4:	02 c0       	rjmp	.+4      	; 0x66ea <vfprintf+0x112>
    66e6:	88 36       	cpi	r24, 0x68	; 104
    66e8:	41 f4       	brne	.+16     	; 0x66fa <vfprintf+0x122>
    66ea:	f1 01       	movw	r30, r2
    66ec:	93 fd       	sbrc	r25, 3
    66ee:	85 91       	lpm	r24, Z+
    66f0:	93 ff       	sbrs	r25, 3
    66f2:	81 91       	ld	r24, Z+
    66f4:	1f 01       	movw	r2, r30
    66f6:	81 11       	cpse	r24, r1
    66f8:	b3 cf       	rjmp	.-154    	; 0x6660 <vfprintf+0x88>
    66fa:	9b eb       	ldi	r25, 0xBB	; 187
    66fc:	98 0f       	add	r25, r24
    66fe:	93 30       	cpi	r25, 0x03	; 3
    6700:	20 f4       	brcc	.+8      	; 0x670a <vfprintf+0x132>
    6702:	99 2d       	mov	r25, r9
    6704:	90 61       	ori	r25, 0x10	; 16
    6706:	80 5e       	subi	r24, 0xE0	; 224
    6708:	07 c0       	rjmp	.+14     	; 0x6718 <vfprintf+0x140>
    670a:	9b e9       	ldi	r25, 0x9B	; 155
    670c:	98 0f       	add	r25, r24
    670e:	93 30       	cpi	r25, 0x03	; 3
    6710:	08 f0       	brcs	.+2      	; 0x6714 <vfprintf+0x13c>
    6712:	59 c1       	rjmp	.+690    	; 0x69c6 <vfprintf+0x3ee>
    6714:	99 2d       	mov	r25, r9
    6716:	9f 7e       	andi	r25, 0xEF	; 239
    6718:	96 ff       	sbrs	r25, 6
    671a:	16 e0       	ldi	r17, 0x06	; 6
    671c:	9f 73       	andi	r25, 0x3F	; 63
    671e:	99 2e       	mov	r9, r25
    6720:	85 36       	cpi	r24, 0x65	; 101
    6722:	19 f4       	brne	.+6      	; 0x672a <vfprintf+0x152>
    6724:	90 64       	ori	r25, 0x40	; 64
    6726:	99 2e       	mov	r9, r25
    6728:	08 c0       	rjmp	.+16     	; 0x673a <vfprintf+0x162>
    672a:	86 36       	cpi	r24, 0x66	; 102
    672c:	21 f4       	brne	.+8      	; 0x6736 <vfprintf+0x15e>
    672e:	39 2f       	mov	r19, r25
    6730:	30 68       	ori	r19, 0x80	; 128
    6732:	93 2e       	mov	r9, r19
    6734:	02 c0       	rjmp	.+4      	; 0x673a <vfprintf+0x162>
    6736:	11 11       	cpse	r17, r1
    6738:	11 50       	subi	r17, 0x01	; 1
    673a:	97 fe       	sbrs	r9, 7
    673c:	07 c0       	rjmp	.+14     	; 0x674c <vfprintf+0x174>
    673e:	1c 33       	cpi	r17, 0x3C	; 60
    6740:	50 f4       	brcc	.+20     	; 0x6756 <vfprintf+0x17e>
    6742:	44 24       	eor	r4, r4
    6744:	43 94       	inc	r4
    6746:	41 0e       	add	r4, r17
    6748:	27 e0       	ldi	r18, 0x07	; 7
    674a:	0b c0       	rjmp	.+22     	; 0x6762 <vfprintf+0x18a>
    674c:	18 30       	cpi	r17, 0x08	; 8
    674e:	38 f0       	brcs	.+14     	; 0x675e <vfprintf+0x186>
    6750:	27 e0       	ldi	r18, 0x07	; 7
    6752:	17 e0       	ldi	r17, 0x07	; 7
    6754:	05 c0       	rjmp	.+10     	; 0x6760 <vfprintf+0x188>
    6756:	27 e0       	ldi	r18, 0x07	; 7
    6758:	9c e3       	ldi	r25, 0x3C	; 60
    675a:	49 2e       	mov	r4, r25
    675c:	02 c0       	rjmp	.+4      	; 0x6762 <vfprintf+0x18a>
    675e:	21 2f       	mov	r18, r17
    6760:	41 2c       	mov	r4, r1
    6762:	56 01       	movw	r10, r12
    6764:	84 e0       	ldi	r24, 0x04	; 4
    6766:	a8 0e       	add	r10, r24
    6768:	b1 1c       	adc	r11, r1
    676a:	f6 01       	movw	r30, r12
    676c:	60 81       	ld	r22, Z
    676e:	71 81       	ldd	r23, Z+1	; 0x01
    6770:	82 81       	ldd	r24, Z+2	; 0x02
    6772:	93 81       	ldd	r25, Z+3	; 0x03
    6774:	04 2d       	mov	r16, r4
    6776:	a3 01       	movw	r20, r6
    6778:	89 d3       	rcall	.+1810   	; 0x6e8c <__ftoa_engine>
    677a:	6c 01       	movw	r12, r24
    677c:	f9 81       	ldd	r31, Y+1	; 0x01
    677e:	fc 87       	std	Y+12, r31	; 0x0c
    6780:	f0 ff       	sbrs	r31, 0
    6782:	02 c0       	rjmp	.+4      	; 0x6788 <vfprintf+0x1b0>
    6784:	f3 ff       	sbrs	r31, 3
    6786:	06 c0       	rjmp	.+12     	; 0x6794 <vfprintf+0x1bc>
    6788:	91 fc       	sbrc	r9, 1
    678a:	06 c0       	rjmp	.+12     	; 0x6798 <vfprintf+0x1c0>
    678c:	92 fe       	sbrs	r9, 2
    678e:	06 c0       	rjmp	.+12     	; 0x679c <vfprintf+0x1c4>
    6790:	00 e2       	ldi	r16, 0x20	; 32
    6792:	05 c0       	rjmp	.+10     	; 0x679e <vfprintf+0x1c6>
    6794:	0d e2       	ldi	r16, 0x2D	; 45
    6796:	03 c0       	rjmp	.+6      	; 0x679e <vfprintf+0x1c6>
    6798:	0b e2       	ldi	r16, 0x2B	; 43
    679a:	01 c0       	rjmp	.+2      	; 0x679e <vfprintf+0x1c6>
    679c:	00 e0       	ldi	r16, 0x00	; 0
    679e:	8c 85       	ldd	r24, Y+12	; 0x0c
    67a0:	8c 70       	andi	r24, 0x0C	; 12
    67a2:	19 f0       	breq	.+6      	; 0x67aa <vfprintf+0x1d2>
    67a4:	01 11       	cpse	r16, r1
    67a6:	43 c2       	rjmp	.+1158   	; 0x6c2e <vfprintf+0x656>
    67a8:	80 c2       	rjmp	.+1280   	; 0x6caa <vfprintf+0x6d2>
    67aa:	97 fe       	sbrs	r9, 7
    67ac:	10 c0       	rjmp	.+32     	; 0x67ce <vfprintf+0x1f6>
    67ae:	4c 0c       	add	r4, r12
    67b0:	fc 85       	ldd	r31, Y+12	; 0x0c
    67b2:	f4 ff       	sbrs	r31, 4
    67b4:	04 c0       	rjmp	.+8      	; 0x67be <vfprintf+0x1e6>
    67b6:	8a 81       	ldd	r24, Y+2	; 0x02
    67b8:	81 33       	cpi	r24, 0x31	; 49
    67ba:	09 f4       	brne	.+2      	; 0x67be <vfprintf+0x1e6>
    67bc:	4a 94       	dec	r4
    67be:	14 14       	cp	r1, r4
    67c0:	74 f5       	brge	.+92     	; 0x681e <vfprintf+0x246>
    67c2:	28 e0       	ldi	r18, 0x08	; 8
    67c4:	24 15       	cp	r18, r4
    67c6:	78 f5       	brcc	.+94     	; 0x6826 <vfprintf+0x24e>
    67c8:	88 e0       	ldi	r24, 0x08	; 8
    67ca:	48 2e       	mov	r4, r24
    67cc:	2c c0       	rjmp	.+88     	; 0x6826 <vfprintf+0x24e>
    67ce:	96 fc       	sbrc	r9, 6
    67d0:	2a c0       	rjmp	.+84     	; 0x6826 <vfprintf+0x24e>
    67d2:	81 2f       	mov	r24, r17
    67d4:	90 e0       	ldi	r25, 0x00	; 0
    67d6:	8c 15       	cp	r24, r12
    67d8:	9d 05       	cpc	r25, r13
    67da:	9c f0       	brlt	.+38     	; 0x6802 <vfprintf+0x22a>
    67dc:	3c ef       	ldi	r19, 0xFC	; 252
    67de:	c3 16       	cp	r12, r19
    67e0:	3f ef       	ldi	r19, 0xFF	; 255
    67e2:	d3 06       	cpc	r13, r19
    67e4:	74 f0       	brlt	.+28     	; 0x6802 <vfprintf+0x22a>
    67e6:	89 2d       	mov	r24, r9
    67e8:	80 68       	ori	r24, 0x80	; 128
    67ea:	98 2e       	mov	r9, r24
    67ec:	0a c0       	rjmp	.+20     	; 0x6802 <vfprintf+0x22a>
    67ee:	e2 e0       	ldi	r30, 0x02	; 2
    67f0:	f0 e0       	ldi	r31, 0x00	; 0
    67f2:	ec 0f       	add	r30, r28
    67f4:	fd 1f       	adc	r31, r29
    67f6:	e1 0f       	add	r30, r17
    67f8:	f1 1d       	adc	r31, r1
    67fa:	80 81       	ld	r24, Z
    67fc:	80 33       	cpi	r24, 0x30	; 48
    67fe:	19 f4       	brne	.+6      	; 0x6806 <vfprintf+0x22e>
    6800:	11 50       	subi	r17, 0x01	; 1
    6802:	11 11       	cpse	r17, r1
    6804:	f4 cf       	rjmp	.-24     	; 0x67ee <vfprintf+0x216>
    6806:	97 fe       	sbrs	r9, 7
    6808:	0e c0       	rjmp	.+28     	; 0x6826 <vfprintf+0x24e>
    680a:	44 24       	eor	r4, r4
    680c:	43 94       	inc	r4
    680e:	41 0e       	add	r4, r17
    6810:	81 2f       	mov	r24, r17
    6812:	90 e0       	ldi	r25, 0x00	; 0
    6814:	c8 16       	cp	r12, r24
    6816:	d9 06       	cpc	r13, r25
    6818:	2c f4       	brge	.+10     	; 0x6824 <vfprintf+0x24c>
    681a:	1c 19       	sub	r17, r12
    681c:	04 c0       	rjmp	.+8      	; 0x6826 <vfprintf+0x24e>
    681e:	44 24       	eor	r4, r4
    6820:	43 94       	inc	r4
    6822:	01 c0       	rjmp	.+2      	; 0x6826 <vfprintf+0x24e>
    6824:	10 e0       	ldi	r17, 0x00	; 0
    6826:	97 fe       	sbrs	r9, 7
    6828:	06 c0       	rjmp	.+12     	; 0x6836 <vfprintf+0x25e>
    682a:	1c 14       	cp	r1, r12
    682c:	1d 04       	cpc	r1, r13
    682e:	34 f4       	brge	.+12     	; 0x683c <vfprintf+0x264>
    6830:	c6 01       	movw	r24, r12
    6832:	01 96       	adiw	r24, 0x01	; 1
    6834:	05 c0       	rjmp	.+10     	; 0x6840 <vfprintf+0x268>
    6836:	85 e0       	ldi	r24, 0x05	; 5
    6838:	90 e0       	ldi	r25, 0x00	; 0
    683a:	02 c0       	rjmp	.+4      	; 0x6840 <vfprintf+0x268>
    683c:	81 e0       	ldi	r24, 0x01	; 1
    683e:	90 e0       	ldi	r25, 0x00	; 0
    6840:	01 11       	cpse	r16, r1
    6842:	01 96       	adiw	r24, 0x01	; 1
    6844:	11 23       	and	r17, r17
    6846:	31 f0       	breq	.+12     	; 0x6854 <vfprintf+0x27c>
    6848:	21 2f       	mov	r18, r17
    684a:	30 e0       	ldi	r19, 0x00	; 0
    684c:	2f 5f       	subi	r18, 0xFF	; 255
    684e:	3f 4f       	sbci	r19, 0xFF	; 255
    6850:	82 0f       	add	r24, r18
    6852:	93 1f       	adc	r25, r19
    6854:	25 2d       	mov	r18, r5
    6856:	30 e0       	ldi	r19, 0x00	; 0
    6858:	82 17       	cp	r24, r18
    685a:	93 07       	cpc	r25, r19
    685c:	14 f4       	brge	.+4      	; 0x6862 <vfprintf+0x28a>
    685e:	58 1a       	sub	r5, r24
    6860:	01 c0       	rjmp	.+2      	; 0x6864 <vfprintf+0x28c>
    6862:	51 2c       	mov	r5, r1
    6864:	89 2d       	mov	r24, r9
    6866:	89 70       	andi	r24, 0x09	; 9
    6868:	41 f4       	brne	.+16     	; 0x687a <vfprintf+0x2a2>
    686a:	55 20       	and	r5, r5
    686c:	31 f0       	breq	.+12     	; 0x687a <vfprintf+0x2a2>
    686e:	b7 01       	movw	r22, r14
    6870:	80 e2       	ldi	r24, 0x20	; 32
    6872:	90 e0       	ldi	r25, 0x00	; 0
    6874:	3b d4       	rcall	.+2166   	; 0x70ec <fputc>
    6876:	5a 94       	dec	r5
    6878:	f8 cf       	rjmp	.-16     	; 0x686a <vfprintf+0x292>
    687a:	00 23       	and	r16, r16
    687c:	21 f0       	breq	.+8      	; 0x6886 <vfprintf+0x2ae>
    687e:	b7 01       	movw	r22, r14
    6880:	80 2f       	mov	r24, r16
    6882:	90 e0       	ldi	r25, 0x00	; 0
    6884:	33 d4       	rcall	.+2150   	; 0x70ec <fputc>
    6886:	93 fc       	sbrc	r9, 3
    6888:	08 c0       	rjmp	.+16     	; 0x689a <vfprintf+0x2c2>
    688a:	55 20       	and	r5, r5
    688c:	31 f0       	breq	.+12     	; 0x689a <vfprintf+0x2c2>
    688e:	b7 01       	movw	r22, r14
    6890:	80 e3       	ldi	r24, 0x30	; 48
    6892:	90 e0       	ldi	r25, 0x00	; 0
    6894:	2b d4       	rcall	.+2134   	; 0x70ec <fputc>
    6896:	5a 94       	dec	r5
    6898:	f8 cf       	rjmp	.-16     	; 0x688a <vfprintf+0x2b2>
    689a:	97 fe       	sbrs	r9, 7
    689c:	4a c0       	rjmp	.+148    	; 0x6932 <vfprintf+0x35a>
    689e:	46 01       	movw	r8, r12
    68a0:	d7 fe       	sbrs	r13, 7
    68a2:	02 c0       	rjmp	.+4      	; 0x68a8 <vfprintf+0x2d0>
    68a4:	81 2c       	mov	r8, r1
    68a6:	91 2c       	mov	r9, r1
    68a8:	c6 01       	movw	r24, r12
    68aa:	88 19       	sub	r24, r8
    68ac:	99 09       	sbc	r25, r9
    68ae:	f3 01       	movw	r30, r6
    68b0:	e8 0f       	add	r30, r24
    68b2:	f9 1f       	adc	r31, r25
    68b4:	fe 87       	std	Y+14, r31	; 0x0e
    68b6:	ed 87       	std	Y+13, r30	; 0x0d
    68b8:	96 01       	movw	r18, r12
    68ba:	24 19       	sub	r18, r4
    68bc:	31 09       	sbc	r19, r1
    68be:	38 8b       	std	Y+16, r19	; 0x10
    68c0:	2f 87       	std	Y+15, r18	; 0x0f
    68c2:	01 2f       	mov	r16, r17
    68c4:	10 e0       	ldi	r17, 0x00	; 0
    68c6:	11 95       	neg	r17
    68c8:	01 95       	neg	r16
    68ca:	11 09       	sbc	r17, r1
    68cc:	3f ef       	ldi	r19, 0xFF	; 255
    68ce:	83 16       	cp	r8, r19
    68d0:	93 06       	cpc	r9, r19
    68d2:	21 f4       	brne	.+8      	; 0x68dc <vfprintf+0x304>
    68d4:	b7 01       	movw	r22, r14
    68d6:	8e e2       	ldi	r24, 0x2E	; 46
    68d8:	90 e0       	ldi	r25, 0x00	; 0
    68da:	08 d4       	rcall	.+2064   	; 0x70ec <fputc>
    68dc:	c8 14       	cp	r12, r8
    68de:	d9 04       	cpc	r13, r9
    68e0:	4c f0       	brlt	.+18     	; 0x68f4 <vfprintf+0x31c>
    68e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    68e4:	98 89       	ldd	r25, Y+16	; 0x10
    68e6:	88 15       	cp	r24, r8
    68e8:	99 05       	cpc	r25, r9
    68ea:	24 f4       	brge	.+8      	; 0x68f4 <vfprintf+0x31c>
    68ec:	ed 85       	ldd	r30, Y+13	; 0x0d
    68ee:	fe 85       	ldd	r31, Y+14	; 0x0e
    68f0:	81 81       	ldd	r24, Z+1	; 0x01
    68f2:	01 c0       	rjmp	.+2      	; 0x68f6 <vfprintf+0x31e>
    68f4:	80 e3       	ldi	r24, 0x30	; 48
    68f6:	f1 e0       	ldi	r31, 0x01	; 1
    68f8:	8f 1a       	sub	r8, r31
    68fa:	91 08       	sbc	r9, r1
    68fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    68fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    6900:	2f 5f       	subi	r18, 0xFF	; 255
    6902:	3f 4f       	sbci	r19, 0xFF	; 255
    6904:	3e 87       	std	Y+14, r19	; 0x0e
    6906:	2d 87       	std	Y+13, r18	; 0x0d
    6908:	80 16       	cp	r8, r16
    690a:	91 06       	cpc	r9, r17
    690c:	24 f0       	brlt	.+8      	; 0x6916 <vfprintf+0x33e>
    690e:	b7 01       	movw	r22, r14
    6910:	90 e0       	ldi	r25, 0x00	; 0
    6912:	ec d3       	rcall	.+2008   	; 0x70ec <fputc>
    6914:	db cf       	rjmp	.-74     	; 0x68cc <vfprintf+0x2f4>
    6916:	c8 14       	cp	r12, r8
    6918:	d9 04       	cpc	r13, r9
    691a:	41 f4       	brne	.+16     	; 0x692c <vfprintf+0x354>
    691c:	9a 81       	ldd	r25, Y+2	; 0x02
    691e:	96 33       	cpi	r25, 0x36	; 54
    6920:	20 f4       	brcc	.+8      	; 0x692a <vfprintf+0x352>
    6922:	95 33       	cpi	r25, 0x35	; 53
    6924:	19 f4       	brne	.+6      	; 0x692c <vfprintf+0x354>
    6926:	3c 85       	ldd	r19, Y+12	; 0x0c
    6928:	34 ff       	sbrs	r19, 4
    692a:	81 e3       	ldi	r24, 0x31	; 49
    692c:	b7 01       	movw	r22, r14
    692e:	90 e0       	ldi	r25, 0x00	; 0
    6930:	48 c0       	rjmp	.+144    	; 0x69c2 <vfprintf+0x3ea>
    6932:	8a 81       	ldd	r24, Y+2	; 0x02
    6934:	81 33       	cpi	r24, 0x31	; 49
    6936:	19 f0       	breq	.+6      	; 0x693e <vfprintf+0x366>
    6938:	9c 85       	ldd	r25, Y+12	; 0x0c
    693a:	9f 7e       	andi	r25, 0xEF	; 239
    693c:	9c 87       	std	Y+12, r25	; 0x0c
    693e:	b7 01       	movw	r22, r14
    6940:	90 e0       	ldi	r25, 0x00	; 0
    6942:	d4 d3       	rcall	.+1960   	; 0x70ec <fputc>
    6944:	11 11       	cpse	r17, r1
    6946:	05 c0       	rjmp	.+10     	; 0x6952 <vfprintf+0x37a>
    6948:	94 fc       	sbrc	r9, 4
    694a:	16 c0       	rjmp	.+44     	; 0x6978 <vfprintf+0x3a0>
    694c:	85 e6       	ldi	r24, 0x65	; 101
    694e:	90 e0       	ldi	r25, 0x00	; 0
    6950:	15 c0       	rjmp	.+42     	; 0x697c <vfprintf+0x3a4>
    6952:	b7 01       	movw	r22, r14
    6954:	8e e2       	ldi	r24, 0x2E	; 46
    6956:	90 e0       	ldi	r25, 0x00	; 0
    6958:	c9 d3       	rcall	.+1938   	; 0x70ec <fputc>
    695a:	1e 5f       	subi	r17, 0xFE	; 254
    695c:	82 e0       	ldi	r24, 0x02	; 2
    695e:	01 e0       	ldi	r16, 0x01	; 1
    6960:	08 0f       	add	r16, r24
    6962:	f3 01       	movw	r30, r6
    6964:	e8 0f       	add	r30, r24
    6966:	f1 1d       	adc	r31, r1
    6968:	80 81       	ld	r24, Z
    696a:	b7 01       	movw	r22, r14
    696c:	90 e0       	ldi	r25, 0x00	; 0
    696e:	be d3       	rcall	.+1916   	; 0x70ec <fputc>
    6970:	80 2f       	mov	r24, r16
    6972:	01 13       	cpse	r16, r17
    6974:	f4 cf       	rjmp	.-24     	; 0x695e <vfprintf+0x386>
    6976:	e8 cf       	rjmp	.-48     	; 0x6948 <vfprintf+0x370>
    6978:	85 e4       	ldi	r24, 0x45	; 69
    697a:	90 e0       	ldi	r25, 0x00	; 0
    697c:	b7 01       	movw	r22, r14
    697e:	b6 d3       	rcall	.+1900   	; 0x70ec <fputc>
    6980:	d7 fc       	sbrc	r13, 7
    6982:	06 c0       	rjmp	.+12     	; 0x6990 <vfprintf+0x3b8>
    6984:	c1 14       	cp	r12, r1
    6986:	d1 04       	cpc	r13, r1
    6988:	41 f4       	brne	.+16     	; 0x699a <vfprintf+0x3c2>
    698a:	ec 85       	ldd	r30, Y+12	; 0x0c
    698c:	e4 ff       	sbrs	r30, 4
    698e:	05 c0       	rjmp	.+10     	; 0x699a <vfprintf+0x3c2>
    6990:	d1 94       	neg	r13
    6992:	c1 94       	neg	r12
    6994:	d1 08       	sbc	r13, r1
    6996:	8d e2       	ldi	r24, 0x2D	; 45
    6998:	01 c0       	rjmp	.+2      	; 0x699c <vfprintf+0x3c4>
    699a:	8b e2       	ldi	r24, 0x2B	; 43
    699c:	b7 01       	movw	r22, r14
    699e:	90 e0       	ldi	r25, 0x00	; 0
    69a0:	a5 d3       	rcall	.+1866   	; 0x70ec <fputc>
    69a2:	80 e3       	ldi	r24, 0x30	; 48
    69a4:	2a e0       	ldi	r18, 0x0A	; 10
    69a6:	c2 16       	cp	r12, r18
    69a8:	d1 04       	cpc	r13, r1
    69aa:	2c f0       	brlt	.+10     	; 0x69b6 <vfprintf+0x3de>
    69ac:	8f 5f       	subi	r24, 0xFF	; 255
    69ae:	fa e0       	ldi	r31, 0x0A	; 10
    69b0:	cf 1a       	sub	r12, r31
    69b2:	d1 08       	sbc	r13, r1
    69b4:	f7 cf       	rjmp	.-18     	; 0x69a4 <vfprintf+0x3cc>
    69b6:	b7 01       	movw	r22, r14
    69b8:	90 e0       	ldi	r25, 0x00	; 0
    69ba:	98 d3       	rcall	.+1840   	; 0x70ec <fputc>
    69bc:	b7 01       	movw	r22, r14
    69be:	c6 01       	movw	r24, r12
    69c0:	c0 96       	adiw	r24, 0x30	; 48
    69c2:	94 d3       	rcall	.+1832   	; 0x70ec <fputc>
    69c4:	49 c1       	rjmp	.+658    	; 0x6c58 <vfprintf+0x680>
    69c6:	83 36       	cpi	r24, 0x63	; 99
    69c8:	31 f0       	breq	.+12     	; 0x69d6 <vfprintf+0x3fe>
    69ca:	83 37       	cpi	r24, 0x73	; 115
    69cc:	79 f0       	breq	.+30     	; 0x69ec <vfprintf+0x414>
    69ce:	83 35       	cpi	r24, 0x53	; 83
    69d0:	09 f0       	breq	.+2      	; 0x69d4 <vfprintf+0x3fc>
    69d2:	52 c0       	rjmp	.+164    	; 0x6a78 <vfprintf+0x4a0>
    69d4:	1f c0       	rjmp	.+62     	; 0x6a14 <vfprintf+0x43c>
    69d6:	56 01       	movw	r10, r12
    69d8:	32 e0       	ldi	r19, 0x02	; 2
    69da:	a3 0e       	add	r10, r19
    69dc:	b1 1c       	adc	r11, r1
    69de:	f6 01       	movw	r30, r12
    69e0:	80 81       	ld	r24, Z
    69e2:	89 83       	std	Y+1, r24	; 0x01
    69e4:	01 e0       	ldi	r16, 0x01	; 1
    69e6:	10 e0       	ldi	r17, 0x00	; 0
    69e8:	63 01       	movw	r12, r6
    69ea:	11 c0       	rjmp	.+34     	; 0x6a0e <vfprintf+0x436>
    69ec:	56 01       	movw	r10, r12
    69ee:	f2 e0       	ldi	r31, 0x02	; 2
    69f0:	af 0e       	add	r10, r31
    69f2:	b1 1c       	adc	r11, r1
    69f4:	f6 01       	movw	r30, r12
    69f6:	c0 80       	ld	r12, Z
    69f8:	d1 80       	ldd	r13, Z+1	; 0x01
    69fa:	96 fe       	sbrs	r9, 6
    69fc:	03 c0       	rjmp	.+6      	; 0x6a04 <vfprintf+0x42c>
    69fe:	61 2f       	mov	r22, r17
    6a00:	70 e0       	ldi	r23, 0x00	; 0
    6a02:	02 c0       	rjmp	.+4      	; 0x6a08 <vfprintf+0x430>
    6a04:	6f ef       	ldi	r22, 0xFF	; 255
    6a06:	7f ef       	ldi	r23, 0xFF	; 255
    6a08:	c6 01       	movw	r24, r12
    6a0a:	5d d3       	rcall	.+1722   	; 0x70c6 <strnlen>
    6a0c:	8c 01       	movw	r16, r24
    6a0e:	f9 2d       	mov	r31, r9
    6a10:	ff 77       	andi	r31, 0x7F	; 127
    6a12:	13 c0       	rjmp	.+38     	; 0x6a3a <vfprintf+0x462>
    6a14:	56 01       	movw	r10, r12
    6a16:	22 e0       	ldi	r18, 0x02	; 2
    6a18:	a2 0e       	add	r10, r18
    6a1a:	b1 1c       	adc	r11, r1
    6a1c:	f6 01       	movw	r30, r12
    6a1e:	c0 80       	ld	r12, Z
    6a20:	d1 80       	ldd	r13, Z+1	; 0x01
    6a22:	96 fe       	sbrs	r9, 6
    6a24:	03 c0       	rjmp	.+6      	; 0x6a2c <vfprintf+0x454>
    6a26:	61 2f       	mov	r22, r17
    6a28:	70 e0       	ldi	r23, 0x00	; 0
    6a2a:	02 c0       	rjmp	.+4      	; 0x6a30 <vfprintf+0x458>
    6a2c:	6f ef       	ldi	r22, 0xFF	; 255
    6a2e:	7f ef       	ldi	r23, 0xFF	; 255
    6a30:	c6 01       	movw	r24, r12
    6a32:	04 d3       	rcall	.+1544   	; 0x703c <strnlen_P>
    6a34:	8c 01       	movw	r16, r24
    6a36:	f9 2d       	mov	r31, r9
    6a38:	f0 68       	ori	r31, 0x80	; 128
    6a3a:	9f 2e       	mov	r9, r31
    6a3c:	f3 fd       	sbrc	r31, 3
    6a3e:	18 c0       	rjmp	.+48     	; 0x6a70 <vfprintf+0x498>
    6a40:	85 2d       	mov	r24, r5
    6a42:	90 e0       	ldi	r25, 0x00	; 0
    6a44:	08 17       	cp	r16, r24
    6a46:	19 07       	cpc	r17, r25
    6a48:	98 f4       	brcc	.+38     	; 0x6a70 <vfprintf+0x498>
    6a4a:	b7 01       	movw	r22, r14
    6a4c:	80 e2       	ldi	r24, 0x20	; 32
    6a4e:	90 e0       	ldi	r25, 0x00	; 0
    6a50:	4d d3       	rcall	.+1690   	; 0x70ec <fputc>
    6a52:	5a 94       	dec	r5
    6a54:	f5 cf       	rjmp	.-22     	; 0x6a40 <vfprintf+0x468>
    6a56:	f6 01       	movw	r30, r12
    6a58:	97 fc       	sbrc	r9, 7
    6a5a:	85 91       	lpm	r24, Z+
    6a5c:	97 fe       	sbrs	r9, 7
    6a5e:	81 91       	ld	r24, Z+
    6a60:	6f 01       	movw	r12, r30
    6a62:	b7 01       	movw	r22, r14
    6a64:	90 e0       	ldi	r25, 0x00	; 0
    6a66:	42 d3       	rcall	.+1668   	; 0x70ec <fputc>
    6a68:	51 10       	cpse	r5, r1
    6a6a:	5a 94       	dec	r5
    6a6c:	01 50       	subi	r16, 0x01	; 1
    6a6e:	11 09       	sbc	r17, r1
    6a70:	01 15       	cp	r16, r1
    6a72:	11 05       	cpc	r17, r1
    6a74:	81 f7       	brne	.-32     	; 0x6a56 <vfprintf+0x47e>
    6a76:	f0 c0       	rjmp	.+480    	; 0x6c58 <vfprintf+0x680>
    6a78:	84 36       	cpi	r24, 0x64	; 100
    6a7a:	11 f0       	breq	.+4      	; 0x6a80 <vfprintf+0x4a8>
    6a7c:	89 36       	cpi	r24, 0x69	; 105
    6a7e:	59 f5       	brne	.+86     	; 0x6ad6 <vfprintf+0x4fe>
    6a80:	56 01       	movw	r10, r12
    6a82:	97 fe       	sbrs	r9, 7
    6a84:	09 c0       	rjmp	.+18     	; 0x6a98 <vfprintf+0x4c0>
    6a86:	24 e0       	ldi	r18, 0x04	; 4
    6a88:	a2 0e       	add	r10, r18
    6a8a:	b1 1c       	adc	r11, r1
    6a8c:	f6 01       	movw	r30, r12
    6a8e:	60 81       	ld	r22, Z
    6a90:	71 81       	ldd	r23, Z+1	; 0x01
    6a92:	82 81       	ldd	r24, Z+2	; 0x02
    6a94:	93 81       	ldd	r25, Z+3	; 0x03
    6a96:	0a c0       	rjmp	.+20     	; 0x6aac <vfprintf+0x4d4>
    6a98:	f2 e0       	ldi	r31, 0x02	; 2
    6a9a:	af 0e       	add	r10, r31
    6a9c:	b1 1c       	adc	r11, r1
    6a9e:	f6 01       	movw	r30, r12
    6aa0:	60 81       	ld	r22, Z
    6aa2:	71 81       	ldd	r23, Z+1	; 0x01
    6aa4:	07 2e       	mov	r0, r23
    6aa6:	00 0c       	add	r0, r0
    6aa8:	88 0b       	sbc	r24, r24
    6aaa:	99 0b       	sbc	r25, r25
    6aac:	f9 2d       	mov	r31, r9
    6aae:	ff 76       	andi	r31, 0x6F	; 111
    6ab0:	9f 2e       	mov	r9, r31
    6ab2:	97 ff       	sbrs	r25, 7
    6ab4:	09 c0       	rjmp	.+18     	; 0x6ac8 <vfprintf+0x4f0>
    6ab6:	90 95       	com	r25
    6ab8:	80 95       	com	r24
    6aba:	70 95       	com	r23
    6abc:	61 95       	neg	r22
    6abe:	7f 4f       	sbci	r23, 0xFF	; 255
    6ac0:	8f 4f       	sbci	r24, 0xFF	; 255
    6ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ac4:	f0 68       	ori	r31, 0x80	; 128
    6ac6:	9f 2e       	mov	r9, r31
    6ac8:	2a e0       	ldi	r18, 0x0A	; 10
    6aca:	30 e0       	ldi	r19, 0x00	; 0
    6acc:	a3 01       	movw	r20, r6
    6ace:	e2 d3       	rcall	.+1988   	; 0x7294 <__ultoa_invert>
    6ad0:	c8 2e       	mov	r12, r24
    6ad2:	c6 18       	sub	r12, r6
    6ad4:	3e c0       	rjmp	.+124    	; 0x6b52 <vfprintf+0x57a>
    6ad6:	09 2d       	mov	r16, r9
    6ad8:	85 37       	cpi	r24, 0x75	; 117
    6ada:	21 f4       	brne	.+8      	; 0x6ae4 <vfprintf+0x50c>
    6adc:	0f 7e       	andi	r16, 0xEF	; 239
    6ade:	2a e0       	ldi	r18, 0x0A	; 10
    6ae0:	30 e0       	ldi	r19, 0x00	; 0
    6ae2:	1d c0       	rjmp	.+58     	; 0x6b1e <vfprintf+0x546>
    6ae4:	09 7f       	andi	r16, 0xF9	; 249
    6ae6:	8f 36       	cpi	r24, 0x6F	; 111
    6ae8:	91 f0       	breq	.+36     	; 0x6b0e <vfprintf+0x536>
    6aea:	18 f4       	brcc	.+6      	; 0x6af2 <vfprintf+0x51a>
    6aec:	88 35       	cpi	r24, 0x58	; 88
    6aee:	59 f0       	breq	.+22     	; 0x6b06 <vfprintf+0x52e>
    6af0:	bc c0       	rjmp	.+376    	; 0x6c6a <vfprintf+0x692>
    6af2:	80 37       	cpi	r24, 0x70	; 112
    6af4:	19 f0       	breq	.+6      	; 0x6afc <vfprintf+0x524>
    6af6:	88 37       	cpi	r24, 0x78	; 120
    6af8:	11 f0       	breq	.+4      	; 0x6afe <vfprintf+0x526>
    6afa:	b7 c0       	rjmp	.+366    	; 0x6c6a <vfprintf+0x692>
    6afc:	00 61       	ori	r16, 0x10	; 16
    6afe:	04 ff       	sbrs	r16, 4
    6b00:	09 c0       	rjmp	.+18     	; 0x6b14 <vfprintf+0x53c>
    6b02:	04 60       	ori	r16, 0x04	; 4
    6b04:	07 c0       	rjmp	.+14     	; 0x6b14 <vfprintf+0x53c>
    6b06:	94 fe       	sbrs	r9, 4
    6b08:	08 c0       	rjmp	.+16     	; 0x6b1a <vfprintf+0x542>
    6b0a:	06 60       	ori	r16, 0x06	; 6
    6b0c:	06 c0       	rjmp	.+12     	; 0x6b1a <vfprintf+0x542>
    6b0e:	28 e0       	ldi	r18, 0x08	; 8
    6b10:	30 e0       	ldi	r19, 0x00	; 0
    6b12:	05 c0       	rjmp	.+10     	; 0x6b1e <vfprintf+0x546>
    6b14:	20 e1       	ldi	r18, 0x10	; 16
    6b16:	30 e0       	ldi	r19, 0x00	; 0
    6b18:	02 c0       	rjmp	.+4      	; 0x6b1e <vfprintf+0x546>
    6b1a:	20 e1       	ldi	r18, 0x10	; 16
    6b1c:	32 e0       	ldi	r19, 0x02	; 2
    6b1e:	56 01       	movw	r10, r12
    6b20:	07 ff       	sbrs	r16, 7
    6b22:	09 c0       	rjmp	.+18     	; 0x6b36 <vfprintf+0x55e>
    6b24:	84 e0       	ldi	r24, 0x04	; 4
    6b26:	a8 0e       	add	r10, r24
    6b28:	b1 1c       	adc	r11, r1
    6b2a:	f6 01       	movw	r30, r12
    6b2c:	60 81       	ld	r22, Z
    6b2e:	71 81       	ldd	r23, Z+1	; 0x01
    6b30:	82 81       	ldd	r24, Z+2	; 0x02
    6b32:	93 81       	ldd	r25, Z+3	; 0x03
    6b34:	08 c0       	rjmp	.+16     	; 0x6b46 <vfprintf+0x56e>
    6b36:	f2 e0       	ldi	r31, 0x02	; 2
    6b38:	af 0e       	add	r10, r31
    6b3a:	b1 1c       	adc	r11, r1
    6b3c:	f6 01       	movw	r30, r12
    6b3e:	60 81       	ld	r22, Z
    6b40:	71 81       	ldd	r23, Z+1	; 0x01
    6b42:	80 e0       	ldi	r24, 0x00	; 0
    6b44:	90 e0       	ldi	r25, 0x00	; 0
    6b46:	a3 01       	movw	r20, r6
    6b48:	a5 d3       	rcall	.+1866   	; 0x7294 <__ultoa_invert>
    6b4a:	c8 2e       	mov	r12, r24
    6b4c:	c6 18       	sub	r12, r6
    6b4e:	0f 77       	andi	r16, 0x7F	; 127
    6b50:	90 2e       	mov	r9, r16
    6b52:	96 fe       	sbrs	r9, 6
    6b54:	0b c0       	rjmp	.+22     	; 0x6b6c <vfprintf+0x594>
    6b56:	09 2d       	mov	r16, r9
    6b58:	0e 7f       	andi	r16, 0xFE	; 254
    6b5a:	c1 16       	cp	r12, r17
    6b5c:	50 f4       	brcc	.+20     	; 0x6b72 <vfprintf+0x59a>
    6b5e:	94 fe       	sbrs	r9, 4
    6b60:	0a c0       	rjmp	.+20     	; 0x6b76 <vfprintf+0x59e>
    6b62:	92 fc       	sbrc	r9, 2
    6b64:	08 c0       	rjmp	.+16     	; 0x6b76 <vfprintf+0x59e>
    6b66:	09 2d       	mov	r16, r9
    6b68:	0e 7e       	andi	r16, 0xEE	; 238
    6b6a:	05 c0       	rjmp	.+10     	; 0x6b76 <vfprintf+0x59e>
    6b6c:	dc 2c       	mov	r13, r12
    6b6e:	09 2d       	mov	r16, r9
    6b70:	03 c0       	rjmp	.+6      	; 0x6b78 <vfprintf+0x5a0>
    6b72:	dc 2c       	mov	r13, r12
    6b74:	01 c0       	rjmp	.+2      	; 0x6b78 <vfprintf+0x5a0>
    6b76:	d1 2e       	mov	r13, r17
    6b78:	04 ff       	sbrs	r16, 4
    6b7a:	0d c0       	rjmp	.+26     	; 0x6b96 <vfprintf+0x5be>
    6b7c:	fe 01       	movw	r30, r28
    6b7e:	ec 0d       	add	r30, r12
    6b80:	f1 1d       	adc	r31, r1
    6b82:	80 81       	ld	r24, Z
    6b84:	80 33       	cpi	r24, 0x30	; 48
    6b86:	11 f4       	brne	.+4      	; 0x6b8c <vfprintf+0x5b4>
    6b88:	09 7e       	andi	r16, 0xE9	; 233
    6b8a:	09 c0       	rjmp	.+18     	; 0x6b9e <vfprintf+0x5c6>
    6b8c:	02 ff       	sbrs	r16, 2
    6b8e:	06 c0       	rjmp	.+12     	; 0x6b9c <vfprintf+0x5c4>
    6b90:	d3 94       	inc	r13
    6b92:	d3 94       	inc	r13
    6b94:	04 c0       	rjmp	.+8      	; 0x6b9e <vfprintf+0x5c6>
    6b96:	80 2f       	mov	r24, r16
    6b98:	86 78       	andi	r24, 0x86	; 134
    6b9a:	09 f0       	breq	.+2      	; 0x6b9e <vfprintf+0x5c6>
    6b9c:	d3 94       	inc	r13
    6b9e:	03 fd       	sbrc	r16, 3
    6ba0:	10 c0       	rjmp	.+32     	; 0x6bc2 <vfprintf+0x5ea>
    6ba2:	00 ff       	sbrs	r16, 0
    6ba4:	06 c0       	rjmp	.+12     	; 0x6bb2 <vfprintf+0x5da>
    6ba6:	1c 2d       	mov	r17, r12
    6ba8:	d5 14       	cp	r13, r5
    6baa:	78 f4       	brcc	.+30     	; 0x6bca <vfprintf+0x5f2>
    6bac:	15 0d       	add	r17, r5
    6bae:	1d 19       	sub	r17, r13
    6bb0:	0c c0       	rjmp	.+24     	; 0x6bca <vfprintf+0x5f2>
    6bb2:	d5 14       	cp	r13, r5
    6bb4:	50 f4       	brcc	.+20     	; 0x6bca <vfprintf+0x5f2>
    6bb6:	b7 01       	movw	r22, r14
    6bb8:	80 e2       	ldi	r24, 0x20	; 32
    6bba:	90 e0       	ldi	r25, 0x00	; 0
    6bbc:	97 d2       	rcall	.+1326   	; 0x70ec <fputc>
    6bbe:	d3 94       	inc	r13
    6bc0:	f8 cf       	rjmp	.-16     	; 0x6bb2 <vfprintf+0x5da>
    6bc2:	d5 14       	cp	r13, r5
    6bc4:	10 f4       	brcc	.+4      	; 0x6bca <vfprintf+0x5f2>
    6bc6:	5d 18       	sub	r5, r13
    6bc8:	01 c0       	rjmp	.+2      	; 0x6bcc <vfprintf+0x5f4>
    6bca:	51 2c       	mov	r5, r1
    6bcc:	04 ff       	sbrs	r16, 4
    6bce:	0f c0       	rjmp	.+30     	; 0x6bee <vfprintf+0x616>
    6bd0:	b7 01       	movw	r22, r14
    6bd2:	80 e3       	ldi	r24, 0x30	; 48
    6bd4:	90 e0       	ldi	r25, 0x00	; 0
    6bd6:	8a d2       	rcall	.+1300   	; 0x70ec <fputc>
    6bd8:	02 ff       	sbrs	r16, 2
    6bda:	16 c0       	rjmp	.+44     	; 0x6c08 <vfprintf+0x630>
    6bdc:	01 fd       	sbrc	r16, 1
    6bde:	03 c0       	rjmp	.+6      	; 0x6be6 <vfprintf+0x60e>
    6be0:	88 e7       	ldi	r24, 0x78	; 120
    6be2:	90 e0       	ldi	r25, 0x00	; 0
    6be4:	02 c0       	rjmp	.+4      	; 0x6bea <vfprintf+0x612>
    6be6:	88 e5       	ldi	r24, 0x58	; 88
    6be8:	90 e0       	ldi	r25, 0x00	; 0
    6bea:	b7 01       	movw	r22, r14
    6bec:	0c c0       	rjmp	.+24     	; 0x6c06 <vfprintf+0x62e>
    6bee:	80 2f       	mov	r24, r16
    6bf0:	86 78       	andi	r24, 0x86	; 134
    6bf2:	51 f0       	breq	.+20     	; 0x6c08 <vfprintf+0x630>
    6bf4:	01 ff       	sbrs	r16, 1
    6bf6:	02 c0       	rjmp	.+4      	; 0x6bfc <vfprintf+0x624>
    6bf8:	8b e2       	ldi	r24, 0x2B	; 43
    6bfa:	01 c0       	rjmp	.+2      	; 0x6bfe <vfprintf+0x626>
    6bfc:	80 e2       	ldi	r24, 0x20	; 32
    6bfe:	07 fd       	sbrc	r16, 7
    6c00:	8d e2       	ldi	r24, 0x2D	; 45
    6c02:	b7 01       	movw	r22, r14
    6c04:	90 e0       	ldi	r25, 0x00	; 0
    6c06:	72 d2       	rcall	.+1252   	; 0x70ec <fputc>
    6c08:	c1 16       	cp	r12, r17
    6c0a:	30 f4       	brcc	.+12     	; 0x6c18 <vfprintf+0x640>
    6c0c:	b7 01       	movw	r22, r14
    6c0e:	80 e3       	ldi	r24, 0x30	; 48
    6c10:	90 e0       	ldi	r25, 0x00	; 0
    6c12:	6c d2       	rcall	.+1240   	; 0x70ec <fputc>
    6c14:	11 50       	subi	r17, 0x01	; 1
    6c16:	f8 cf       	rjmp	.-16     	; 0x6c08 <vfprintf+0x630>
    6c18:	ca 94       	dec	r12
    6c1a:	f3 01       	movw	r30, r6
    6c1c:	ec 0d       	add	r30, r12
    6c1e:	f1 1d       	adc	r31, r1
    6c20:	80 81       	ld	r24, Z
    6c22:	b7 01       	movw	r22, r14
    6c24:	90 e0       	ldi	r25, 0x00	; 0
    6c26:	62 d2       	rcall	.+1220   	; 0x70ec <fputc>
    6c28:	c1 10       	cpse	r12, r1
    6c2a:	f6 cf       	rjmp	.-20     	; 0x6c18 <vfprintf+0x640>
    6c2c:	15 c0       	rjmp	.+42     	; 0x6c58 <vfprintf+0x680>
    6c2e:	f4 e0       	ldi	r31, 0x04	; 4
    6c30:	f5 15       	cp	r31, r5
    6c32:	50 f5       	brcc	.+84     	; 0x6c88 <vfprintf+0x6b0>
    6c34:	84 e0       	ldi	r24, 0x04	; 4
    6c36:	58 1a       	sub	r5, r24
    6c38:	93 fe       	sbrs	r9, 3
    6c3a:	1e c0       	rjmp	.+60     	; 0x6c78 <vfprintf+0x6a0>
    6c3c:	01 11       	cpse	r16, r1
    6c3e:	25 c0       	rjmp	.+74     	; 0x6c8a <vfprintf+0x6b2>
    6c40:	2c 85       	ldd	r18, Y+12	; 0x0c
    6c42:	23 ff       	sbrs	r18, 3
    6c44:	27 c0       	rjmp	.+78     	; 0x6c94 <vfprintf+0x6bc>
    6c46:	04 e5       	ldi	r16, 0x54	; 84
    6c48:	11 e0       	ldi	r17, 0x01	; 1
    6c4a:	39 2d       	mov	r19, r9
    6c4c:	30 71       	andi	r19, 0x10	; 16
    6c4e:	93 2e       	mov	r9, r19
    6c50:	f8 01       	movw	r30, r16
    6c52:	84 91       	lpm	r24, Z
    6c54:	81 11       	cpse	r24, r1
    6c56:	21 c0       	rjmp	.+66     	; 0x6c9a <vfprintf+0x6c2>
    6c58:	55 20       	and	r5, r5
    6c5a:	09 f4       	brne	.+2      	; 0x6c5e <vfprintf+0x686>
    6c5c:	fc cc       	rjmp	.-1544   	; 0x6656 <vfprintf+0x7e>
    6c5e:	b7 01       	movw	r22, r14
    6c60:	80 e2       	ldi	r24, 0x20	; 32
    6c62:	90 e0       	ldi	r25, 0x00	; 0
    6c64:	43 d2       	rcall	.+1158   	; 0x70ec <fputc>
    6c66:	5a 94       	dec	r5
    6c68:	f7 cf       	rjmp	.-18     	; 0x6c58 <vfprintf+0x680>
    6c6a:	f7 01       	movw	r30, r14
    6c6c:	86 81       	ldd	r24, Z+6	; 0x06
    6c6e:	97 81       	ldd	r25, Z+7	; 0x07
    6c70:	23 c0       	rjmp	.+70     	; 0x6cb8 <vfprintf+0x6e0>
    6c72:	8f ef       	ldi	r24, 0xFF	; 255
    6c74:	9f ef       	ldi	r25, 0xFF	; 255
    6c76:	20 c0       	rjmp	.+64     	; 0x6cb8 <vfprintf+0x6e0>
    6c78:	b7 01       	movw	r22, r14
    6c7a:	80 e2       	ldi	r24, 0x20	; 32
    6c7c:	90 e0       	ldi	r25, 0x00	; 0
    6c7e:	36 d2       	rcall	.+1132   	; 0x70ec <fputc>
    6c80:	5a 94       	dec	r5
    6c82:	51 10       	cpse	r5, r1
    6c84:	f9 cf       	rjmp	.-14     	; 0x6c78 <vfprintf+0x6a0>
    6c86:	da cf       	rjmp	.-76     	; 0x6c3c <vfprintf+0x664>
    6c88:	51 2c       	mov	r5, r1
    6c8a:	b7 01       	movw	r22, r14
    6c8c:	80 2f       	mov	r24, r16
    6c8e:	90 e0       	ldi	r25, 0x00	; 0
    6c90:	2d d2       	rcall	.+1114   	; 0x70ec <fputc>
    6c92:	d6 cf       	rjmp	.-84     	; 0x6c40 <vfprintf+0x668>
    6c94:	08 e5       	ldi	r16, 0x58	; 88
    6c96:	11 e0       	ldi	r17, 0x01	; 1
    6c98:	d8 cf       	rjmp	.-80     	; 0x6c4a <vfprintf+0x672>
    6c9a:	91 10       	cpse	r9, r1
    6c9c:	80 52       	subi	r24, 0x20	; 32
    6c9e:	b7 01       	movw	r22, r14
    6ca0:	90 e0       	ldi	r25, 0x00	; 0
    6ca2:	24 d2       	rcall	.+1096   	; 0x70ec <fputc>
    6ca4:	0f 5f       	subi	r16, 0xFF	; 255
    6ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    6ca8:	d3 cf       	rjmp	.-90     	; 0x6c50 <vfprintf+0x678>
    6caa:	23 e0       	ldi	r18, 0x03	; 3
    6cac:	25 15       	cp	r18, r5
    6cae:	10 f4       	brcc	.+4      	; 0x6cb4 <vfprintf+0x6dc>
    6cb0:	83 e0       	ldi	r24, 0x03	; 3
    6cb2:	c1 cf       	rjmp	.-126    	; 0x6c36 <vfprintf+0x65e>
    6cb4:	51 2c       	mov	r5, r1
    6cb6:	c4 cf       	rjmp	.-120    	; 0x6c40 <vfprintf+0x668>
    6cb8:	60 96       	adiw	r28, 0x10	; 16
    6cba:	0f b6       	in	r0, 0x3f	; 63
    6cbc:	f8 94       	cli
    6cbe:	de bf       	out	0x3e, r29	; 62
    6cc0:	0f be       	out	0x3f, r0	; 63
    6cc2:	cd bf       	out	0x3d, r28	; 61
    6cc4:	df 91       	pop	r29
    6cc6:	cf 91       	pop	r28
    6cc8:	1f 91       	pop	r17
    6cca:	0f 91       	pop	r16
    6ccc:	ff 90       	pop	r15
    6cce:	ef 90       	pop	r14
    6cd0:	df 90       	pop	r13
    6cd2:	cf 90       	pop	r12
    6cd4:	bf 90       	pop	r11
    6cd6:	af 90       	pop	r10
    6cd8:	9f 90       	pop	r9
    6cda:	8f 90       	pop	r8
    6cdc:	7f 90       	pop	r7
    6cde:	6f 90       	pop	r6
    6ce0:	5f 90       	pop	r5
    6ce2:	4f 90       	pop	r4
    6ce4:	3f 90       	pop	r3
    6ce6:	2f 90       	pop	r2
    6ce8:	08 95       	ret

00006cea <__udivmodsi4>:
    6cea:	a1 e2       	ldi	r26, 0x21	; 33
    6cec:	1a 2e       	mov	r1, r26
    6cee:	aa 1b       	sub	r26, r26
    6cf0:	bb 1b       	sub	r27, r27
    6cf2:	fd 01       	movw	r30, r26
    6cf4:	0d c0       	rjmp	.+26     	; 0x6d10 <__udivmodsi4_ep>

00006cf6 <__udivmodsi4_loop>:
    6cf6:	aa 1f       	adc	r26, r26
    6cf8:	bb 1f       	adc	r27, r27
    6cfa:	ee 1f       	adc	r30, r30
    6cfc:	ff 1f       	adc	r31, r31
    6cfe:	a2 17       	cp	r26, r18
    6d00:	b3 07       	cpc	r27, r19
    6d02:	e4 07       	cpc	r30, r20
    6d04:	f5 07       	cpc	r31, r21
    6d06:	20 f0       	brcs	.+8      	; 0x6d10 <__udivmodsi4_ep>
    6d08:	a2 1b       	sub	r26, r18
    6d0a:	b3 0b       	sbc	r27, r19
    6d0c:	e4 0b       	sbc	r30, r20
    6d0e:	f5 0b       	sbc	r31, r21

00006d10 <__udivmodsi4_ep>:
    6d10:	66 1f       	adc	r22, r22
    6d12:	77 1f       	adc	r23, r23
    6d14:	88 1f       	adc	r24, r24
    6d16:	99 1f       	adc	r25, r25
    6d18:	1a 94       	dec	r1
    6d1a:	69 f7       	brne	.-38     	; 0x6cf6 <__udivmodsi4_loop>
    6d1c:	60 95       	com	r22
    6d1e:	70 95       	com	r23
    6d20:	80 95       	com	r24
    6d22:	90 95       	com	r25
    6d24:	9b 01       	movw	r18, r22
    6d26:	ac 01       	movw	r20, r24
    6d28:	bd 01       	movw	r22, r26
    6d2a:	cf 01       	movw	r24, r30
    6d2c:	08 95       	ret

00006d2e <__divmodsi4>:
    6d2e:	05 2e       	mov	r0, r21
    6d30:	97 fb       	bst	r25, 7
    6d32:	16 f4       	brtc	.+4      	; 0x6d38 <__divmodsi4+0xa>
    6d34:	00 94       	com	r0
    6d36:	0f d0       	rcall	.+30     	; 0x6d56 <__negsi2>
    6d38:	57 fd       	sbrc	r21, 7
    6d3a:	05 d0       	rcall	.+10     	; 0x6d46 <__divmodsi4_neg2>
    6d3c:	d6 df       	rcall	.-84     	; 0x6cea <__udivmodsi4>
    6d3e:	07 fc       	sbrc	r0, 7
    6d40:	02 d0       	rcall	.+4      	; 0x6d46 <__divmodsi4_neg2>
    6d42:	46 f4       	brtc	.+16     	; 0x6d54 <__divmodsi4_exit>
    6d44:	08 c0       	rjmp	.+16     	; 0x6d56 <__negsi2>

00006d46 <__divmodsi4_neg2>:
    6d46:	50 95       	com	r21
    6d48:	40 95       	com	r20
    6d4a:	30 95       	com	r19
    6d4c:	21 95       	neg	r18
    6d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    6d50:	4f 4f       	sbci	r20, 0xFF	; 255
    6d52:	5f 4f       	sbci	r21, 0xFF	; 255

00006d54 <__divmodsi4_exit>:
    6d54:	08 95       	ret

00006d56 <__negsi2>:
    6d56:	90 95       	com	r25
    6d58:	80 95       	com	r24
    6d5a:	70 95       	com	r23
    6d5c:	61 95       	neg	r22
    6d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    6d60:	8f 4f       	sbci	r24, 0xFF	; 255
    6d62:	9f 4f       	sbci	r25, 0xFF	; 255
    6d64:	08 95       	ret

00006d66 <__tablejump2__>:
    6d66:	ee 0f       	add	r30, r30
    6d68:	ff 1f       	adc	r31, r31
    6d6a:	88 1f       	adc	r24, r24
    6d6c:	8b bf       	out	0x3b, r24	; 59
    6d6e:	07 90       	elpm	r0, Z+
    6d70:	f6 91       	elpm	r31, Z
    6d72:	e0 2d       	mov	r30, r0
    6d74:	19 94       	eijmp

00006d76 <__muluhisi3>:
    6d76:	09 d0       	rcall	.+18     	; 0x6d8a <__umulhisi3>
    6d78:	a5 9f       	mul	r26, r21
    6d7a:	90 0d       	add	r25, r0
    6d7c:	b4 9f       	mul	r27, r20
    6d7e:	90 0d       	add	r25, r0
    6d80:	a4 9f       	mul	r26, r20
    6d82:	80 0d       	add	r24, r0
    6d84:	91 1d       	adc	r25, r1
    6d86:	11 24       	eor	r1, r1
    6d88:	08 95       	ret

00006d8a <__umulhisi3>:
    6d8a:	a2 9f       	mul	r26, r18
    6d8c:	b0 01       	movw	r22, r0
    6d8e:	b3 9f       	mul	r27, r19
    6d90:	c0 01       	movw	r24, r0
    6d92:	a3 9f       	mul	r26, r19
    6d94:	70 0d       	add	r23, r0
    6d96:	81 1d       	adc	r24, r1
    6d98:	11 24       	eor	r1, r1
    6d9a:	91 1d       	adc	r25, r1
    6d9c:	b2 9f       	mul	r27, r18
    6d9e:	70 0d       	add	r23, r0
    6da0:	81 1d       	adc	r24, r1
    6da2:	11 24       	eor	r1, r1
    6da4:	91 1d       	adc	r25, r1
    6da6:	08 95       	ret

00006da8 <do_rand>:
    6da8:	8f 92       	push	r8
    6daa:	9f 92       	push	r9
    6dac:	af 92       	push	r10
    6dae:	bf 92       	push	r11
    6db0:	cf 92       	push	r12
    6db2:	df 92       	push	r13
    6db4:	ef 92       	push	r14
    6db6:	ff 92       	push	r15
    6db8:	cf 93       	push	r28
    6dba:	df 93       	push	r29
    6dbc:	ec 01       	movw	r28, r24
    6dbe:	68 81       	ld	r22, Y
    6dc0:	79 81       	ldd	r23, Y+1	; 0x01
    6dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    6dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    6dc6:	61 15       	cp	r22, r1
    6dc8:	71 05       	cpc	r23, r1
    6dca:	81 05       	cpc	r24, r1
    6dcc:	91 05       	cpc	r25, r1
    6dce:	21 f4       	brne	.+8      	; 0x6dd8 <do_rand+0x30>
    6dd0:	64 e2       	ldi	r22, 0x24	; 36
    6dd2:	79 ed       	ldi	r23, 0xD9	; 217
    6dd4:	8b e5       	ldi	r24, 0x5B	; 91
    6dd6:	97 e0       	ldi	r25, 0x07	; 7
    6dd8:	2d e1       	ldi	r18, 0x1D	; 29
    6dda:	33 ef       	ldi	r19, 0xF3	; 243
    6ddc:	41 e0       	ldi	r20, 0x01	; 1
    6dde:	50 e0       	ldi	r21, 0x00	; 0
    6de0:	a6 df       	rcall	.-180    	; 0x6d2e <__divmodsi4>
    6de2:	49 01       	movw	r8, r18
    6de4:	5a 01       	movw	r10, r20
    6de6:	9b 01       	movw	r18, r22
    6de8:	ac 01       	movw	r20, r24
    6dea:	a7 ea       	ldi	r26, 0xA7	; 167
    6dec:	b1 e4       	ldi	r27, 0x41	; 65
    6dee:	c3 df       	rcall	.-122    	; 0x6d76 <__muluhisi3>
    6df0:	6b 01       	movw	r12, r22
    6df2:	7c 01       	movw	r14, r24
    6df4:	ac ee       	ldi	r26, 0xEC	; 236
    6df6:	b4 ef       	ldi	r27, 0xF4	; 244
    6df8:	a5 01       	movw	r20, r10
    6dfa:	94 01       	movw	r18, r8
    6dfc:	ab d2       	rcall	.+1366   	; 0x7354 <__mulohisi3>
    6dfe:	dc 01       	movw	r26, r24
    6e00:	cb 01       	movw	r24, r22
    6e02:	8c 0d       	add	r24, r12
    6e04:	9d 1d       	adc	r25, r13
    6e06:	ae 1d       	adc	r26, r14
    6e08:	bf 1d       	adc	r27, r15
    6e0a:	b7 ff       	sbrs	r27, 7
    6e0c:	03 c0       	rjmp	.+6      	; 0x6e14 <do_rand+0x6c>
    6e0e:	01 97       	sbiw	r24, 0x01	; 1
    6e10:	a1 09       	sbc	r26, r1
    6e12:	b0 48       	sbci	r27, 0x80	; 128
    6e14:	88 83       	st	Y, r24
    6e16:	99 83       	std	Y+1, r25	; 0x01
    6e18:	aa 83       	std	Y+2, r26	; 0x02
    6e1a:	bb 83       	std	Y+3, r27	; 0x03
    6e1c:	9f 77       	andi	r25, 0x7F	; 127
    6e1e:	df 91       	pop	r29
    6e20:	cf 91       	pop	r28
    6e22:	ff 90       	pop	r15
    6e24:	ef 90       	pop	r14
    6e26:	df 90       	pop	r13
    6e28:	cf 90       	pop	r12
    6e2a:	bf 90       	pop	r11
    6e2c:	af 90       	pop	r10
    6e2e:	9f 90       	pop	r9
    6e30:	8f 90       	pop	r8
    6e32:	08 95       	ret

00006e34 <rand_r>:
    6e34:	b9 cf       	rjmp	.-142    	; 0x6da8 <do_rand>

00006e36 <rand>:
    6e36:	80 e0       	ldi	r24, 0x00	; 0
    6e38:	92 e0       	ldi	r25, 0x02	; 2
    6e3a:	b6 cf       	rjmp	.-148    	; 0x6da8 <do_rand>

00006e3c <srand>:
    6e3c:	a0 e0       	ldi	r26, 0x00	; 0
    6e3e:	b0 e0       	ldi	r27, 0x00	; 0
    6e40:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    6e44:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6e48:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    6e4c:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    6e50:	08 95       	ret

00006e52 <atoi>:
    6e52:	fc 01       	movw	r30, r24
    6e54:	88 27       	eor	r24, r24
    6e56:	99 27       	eor	r25, r25
    6e58:	e8 94       	clt
    6e5a:	21 91       	ld	r18, Z+
    6e5c:	20 32       	cpi	r18, 0x20	; 32
    6e5e:	e9 f3       	breq	.-6      	; 0x6e5a <atoi+0x8>
    6e60:	29 30       	cpi	r18, 0x09	; 9
    6e62:	10 f0       	brcs	.+4      	; 0x6e68 <atoi+0x16>
    6e64:	2e 30       	cpi	r18, 0x0E	; 14
    6e66:	c8 f3       	brcs	.-14     	; 0x6e5a <atoi+0x8>
    6e68:	2b 32       	cpi	r18, 0x2B	; 43
    6e6a:	39 f0       	breq	.+14     	; 0x6e7a <atoi+0x28>
    6e6c:	2d 32       	cpi	r18, 0x2D	; 45
    6e6e:	31 f4       	brne	.+12     	; 0x6e7c <atoi+0x2a>
    6e70:	68 94       	set
    6e72:	03 c0       	rjmp	.+6      	; 0x6e7a <atoi+0x28>
    6e74:	33 d1       	rcall	.+614    	; 0x70dc <__mulhi_const_10>
    6e76:	82 0f       	add	r24, r18
    6e78:	91 1d       	adc	r25, r1
    6e7a:	21 91       	ld	r18, Z+
    6e7c:	20 53       	subi	r18, 0x30	; 48
    6e7e:	2a 30       	cpi	r18, 0x0A	; 10
    6e80:	c8 f3       	brcs	.-14     	; 0x6e74 <atoi+0x22>
    6e82:	1e f4       	brtc	.+6      	; 0x6e8a <atoi+0x38>
    6e84:	90 95       	com	r25
    6e86:	81 95       	neg	r24
    6e88:	9f 4f       	sbci	r25, 0xFF	; 255
    6e8a:	08 95       	ret

00006e8c <__ftoa_engine>:
    6e8c:	28 30       	cpi	r18, 0x08	; 8
    6e8e:	08 f0       	brcs	.+2      	; 0x6e92 <__ftoa_engine+0x6>
    6e90:	27 e0       	ldi	r18, 0x07	; 7
    6e92:	33 27       	eor	r19, r19
    6e94:	da 01       	movw	r26, r20
    6e96:	99 0f       	add	r25, r25
    6e98:	31 1d       	adc	r19, r1
    6e9a:	87 fd       	sbrc	r24, 7
    6e9c:	91 60       	ori	r25, 0x01	; 1
    6e9e:	00 96       	adiw	r24, 0x00	; 0
    6ea0:	61 05       	cpc	r22, r1
    6ea2:	71 05       	cpc	r23, r1
    6ea4:	39 f4       	brne	.+14     	; 0x6eb4 <__ftoa_engine+0x28>
    6ea6:	32 60       	ori	r19, 0x02	; 2
    6ea8:	2e 5f       	subi	r18, 0xFE	; 254
    6eaa:	3d 93       	st	X+, r19
    6eac:	30 e3       	ldi	r19, 0x30	; 48
    6eae:	2a 95       	dec	r18
    6eb0:	e1 f7       	brne	.-8      	; 0x6eaa <__ftoa_engine+0x1e>
    6eb2:	08 95       	ret
    6eb4:	9f 3f       	cpi	r25, 0xFF	; 255
    6eb6:	30 f0       	brcs	.+12     	; 0x6ec4 <__ftoa_engine+0x38>
    6eb8:	80 38       	cpi	r24, 0x80	; 128
    6eba:	71 05       	cpc	r23, r1
    6ebc:	61 05       	cpc	r22, r1
    6ebe:	09 f0       	breq	.+2      	; 0x6ec2 <__ftoa_engine+0x36>
    6ec0:	3c 5f       	subi	r19, 0xFC	; 252
    6ec2:	3c 5f       	subi	r19, 0xFC	; 252
    6ec4:	3d 93       	st	X+, r19
    6ec6:	91 30       	cpi	r25, 0x01	; 1
    6ec8:	08 f0       	brcs	.+2      	; 0x6ecc <__ftoa_engine+0x40>
    6eca:	80 68       	ori	r24, 0x80	; 128
    6ecc:	91 1d       	adc	r25, r1
    6ece:	df 93       	push	r29
    6ed0:	cf 93       	push	r28
    6ed2:	1f 93       	push	r17
    6ed4:	0f 93       	push	r16
    6ed6:	ff 92       	push	r15
    6ed8:	ef 92       	push	r14
    6eda:	19 2f       	mov	r17, r25
    6edc:	98 7f       	andi	r25, 0xF8	; 248
    6ede:	96 95       	lsr	r25
    6ee0:	e9 2f       	mov	r30, r25
    6ee2:	96 95       	lsr	r25
    6ee4:	96 95       	lsr	r25
    6ee6:	e9 0f       	add	r30, r25
    6ee8:	ff 27       	eor	r31, r31
    6eea:	ea 54       	subi	r30, 0x4A	; 74
    6eec:	fe 4f       	sbci	r31, 0xFE	; 254
    6eee:	99 27       	eor	r25, r25
    6ef0:	33 27       	eor	r19, r19
    6ef2:	ee 24       	eor	r14, r14
    6ef4:	ff 24       	eor	r15, r15
    6ef6:	a7 01       	movw	r20, r14
    6ef8:	e7 01       	movw	r28, r14
    6efa:	05 90       	lpm	r0, Z+
    6efc:	08 94       	sec
    6efe:	07 94       	ror	r0
    6f00:	28 f4       	brcc	.+10     	; 0x6f0c <__ftoa_engine+0x80>
    6f02:	36 0f       	add	r19, r22
    6f04:	e7 1e       	adc	r14, r23
    6f06:	f8 1e       	adc	r15, r24
    6f08:	49 1f       	adc	r20, r25
    6f0a:	51 1d       	adc	r21, r1
    6f0c:	66 0f       	add	r22, r22
    6f0e:	77 1f       	adc	r23, r23
    6f10:	88 1f       	adc	r24, r24
    6f12:	99 1f       	adc	r25, r25
    6f14:	06 94       	lsr	r0
    6f16:	a1 f7       	brne	.-24     	; 0x6f00 <__ftoa_engine+0x74>
    6f18:	05 90       	lpm	r0, Z+
    6f1a:	07 94       	ror	r0
    6f1c:	28 f4       	brcc	.+10     	; 0x6f28 <__ftoa_engine+0x9c>
    6f1e:	e7 0e       	add	r14, r23
    6f20:	f8 1e       	adc	r15, r24
    6f22:	49 1f       	adc	r20, r25
    6f24:	56 1f       	adc	r21, r22
    6f26:	c1 1d       	adc	r28, r1
    6f28:	77 0f       	add	r23, r23
    6f2a:	88 1f       	adc	r24, r24
    6f2c:	99 1f       	adc	r25, r25
    6f2e:	66 1f       	adc	r22, r22
    6f30:	06 94       	lsr	r0
    6f32:	a1 f7       	brne	.-24     	; 0x6f1c <__ftoa_engine+0x90>
    6f34:	05 90       	lpm	r0, Z+
    6f36:	07 94       	ror	r0
    6f38:	28 f4       	brcc	.+10     	; 0x6f44 <__ftoa_engine+0xb8>
    6f3a:	f8 0e       	add	r15, r24
    6f3c:	49 1f       	adc	r20, r25
    6f3e:	56 1f       	adc	r21, r22
    6f40:	c7 1f       	adc	r28, r23
    6f42:	d1 1d       	adc	r29, r1
    6f44:	88 0f       	add	r24, r24
    6f46:	99 1f       	adc	r25, r25
    6f48:	66 1f       	adc	r22, r22
    6f4a:	77 1f       	adc	r23, r23
    6f4c:	06 94       	lsr	r0
    6f4e:	a1 f7       	brne	.-24     	; 0x6f38 <__ftoa_engine+0xac>
    6f50:	05 90       	lpm	r0, Z+
    6f52:	07 94       	ror	r0
    6f54:	20 f4       	brcc	.+8      	; 0x6f5e <__ftoa_engine+0xd2>
    6f56:	49 0f       	add	r20, r25
    6f58:	56 1f       	adc	r21, r22
    6f5a:	c7 1f       	adc	r28, r23
    6f5c:	d8 1f       	adc	r29, r24
    6f5e:	99 0f       	add	r25, r25
    6f60:	66 1f       	adc	r22, r22
    6f62:	77 1f       	adc	r23, r23
    6f64:	88 1f       	adc	r24, r24
    6f66:	06 94       	lsr	r0
    6f68:	a9 f7       	brne	.-22     	; 0x6f54 <__ftoa_engine+0xc8>
    6f6a:	84 91       	lpm	r24, Z
    6f6c:	10 95       	com	r17
    6f6e:	17 70       	andi	r17, 0x07	; 7
    6f70:	41 f0       	breq	.+16     	; 0x6f82 <__ftoa_engine+0xf6>
    6f72:	d6 95       	lsr	r29
    6f74:	c7 95       	ror	r28
    6f76:	57 95       	ror	r21
    6f78:	47 95       	ror	r20
    6f7a:	f7 94       	ror	r15
    6f7c:	e7 94       	ror	r14
    6f7e:	1a 95       	dec	r17
    6f80:	c1 f7       	brne	.-16     	; 0x6f72 <__ftoa_engine+0xe6>
    6f82:	ec e5       	ldi	r30, 0x5C	; 92
    6f84:	f1 e0       	ldi	r31, 0x01	; 1
    6f86:	68 94       	set
    6f88:	15 90       	lpm	r1, Z+
    6f8a:	15 91       	lpm	r17, Z+
    6f8c:	35 91       	lpm	r19, Z+
    6f8e:	65 91       	lpm	r22, Z+
    6f90:	95 91       	lpm	r25, Z+
    6f92:	05 90       	lpm	r0, Z+
    6f94:	7f e2       	ldi	r23, 0x2F	; 47
    6f96:	73 95       	inc	r23
    6f98:	e1 18       	sub	r14, r1
    6f9a:	f1 0a       	sbc	r15, r17
    6f9c:	43 0b       	sbc	r20, r19
    6f9e:	56 0b       	sbc	r21, r22
    6fa0:	c9 0b       	sbc	r28, r25
    6fa2:	d0 09       	sbc	r29, r0
    6fa4:	c0 f7       	brcc	.-16     	; 0x6f96 <__ftoa_engine+0x10a>
    6fa6:	e1 0c       	add	r14, r1
    6fa8:	f1 1e       	adc	r15, r17
    6faa:	43 1f       	adc	r20, r19
    6fac:	56 1f       	adc	r21, r22
    6fae:	c9 1f       	adc	r28, r25
    6fb0:	d0 1d       	adc	r29, r0
    6fb2:	7e f4       	brtc	.+30     	; 0x6fd2 <__ftoa_engine+0x146>
    6fb4:	70 33       	cpi	r23, 0x30	; 48
    6fb6:	11 f4       	brne	.+4      	; 0x6fbc <__ftoa_engine+0x130>
    6fb8:	8a 95       	dec	r24
    6fba:	e6 cf       	rjmp	.-52     	; 0x6f88 <__ftoa_engine+0xfc>
    6fbc:	e8 94       	clt
    6fbe:	01 50       	subi	r16, 0x01	; 1
    6fc0:	30 f0       	brcs	.+12     	; 0x6fce <__ftoa_engine+0x142>
    6fc2:	08 0f       	add	r16, r24
    6fc4:	0a f4       	brpl	.+2      	; 0x6fc8 <__ftoa_engine+0x13c>
    6fc6:	00 27       	eor	r16, r16
    6fc8:	02 17       	cp	r16, r18
    6fca:	08 f4       	brcc	.+2      	; 0x6fce <__ftoa_engine+0x142>
    6fcc:	20 2f       	mov	r18, r16
    6fce:	23 95       	inc	r18
    6fd0:	02 2f       	mov	r16, r18
    6fd2:	7a 33       	cpi	r23, 0x3A	; 58
    6fd4:	28 f0       	brcs	.+10     	; 0x6fe0 <__ftoa_engine+0x154>
    6fd6:	79 e3       	ldi	r23, 0x39	; 57
    6fd8:	7d 93       	st	X+, r23
    6fda:	2a 95       	dec	r18
    6fdc:	e9 f7       	brne	.-6      	; 0x6fd8 <__ftoa_engine+0x14c>
    6fde:	10 c0       	rjmp	.+32     	; 0x7000 <__ftoa_engine+0x174>
    6fe0:	7d 93       	st	X+, r23
    6fe2:	2a 95       	dec	r18
    6fe4:	89 f6       	brne	.-94     	; 0x6f88 <__ftoa_engine+0xfc>
    6fe6:	06 94       	lsr	r0
    6fe8:	97 95       	ror	r25
    6fea:	67 95       	ror	r22
    6fec:	37 95       	ror	r19
    6fee:	17 95       	ror	r17
    6ff0:	17 94       	ror	r1
    6ff2:	e1 18       	sub	r14, r1
    6ff4:	f1 0a       	sbc	r15, r17
    6ff6:	43 0b       	sbc	r20, r19
    6ff8:	56 0b       	sbc	r21, r22
    6ffa:	c9 0b       	sbc	r28, r25
    6ffc:	d0 09       	sbc	r29, r0
    6ffe:	98 f0       	brcs	.+38     	; 0x7026 <__ftoa_engine+0x19a>
    7000:	23 95       	inc	r18
    7002:	7e 91       	ld	r23, -X
    7004:	73 95       	inc	r23
    7006:	7a 33       	cpi	r23, 0x3A	; 58
    7008:	08 f0       	brcs	.+2      	; 0x700c <__ftoa_engine+0x180>
    700a:	70 e3       	ldi	r23, 0x30	; 48
    700c:	7c 93       	st	X, r23
    700e:	20 13       	cpse	r18, r16
    7010:	b8 f7       	brcc	.-18     	; 0x7000 <__ftoa_engine+0x174>
    7012:	7e 91       	ld	r23, -X
    7014:	70 61       	ori	r23, 0x10	; 16
    7016:	7d 93       	st	X+, r23
    7018:	30 f0       	brcs	.+12     	; 0x7026 <__ftoa_engine+0x19a>
    701a:	83 95       	inc	r24
    701c:	71 e3       	ldi	r23, 0x31	; 49
    701e:	7d 93       	st	X+, r23
    7020:	70 e3       	ldi	r23, 0x30	; 48
    7022:	2a 95       	dec	r18
    7024:	e1 f7       	brne	.-8      	; 0x701e <__ftoa_engine+0x192>
    7026:	11 24       	eor	r1, r1
    7028:	ef 90       	pop	r14
    702a:	ff 90       	pop	r15
    702c:	0f 91       	pop	r16
    702e:	1f 91       	pop	r17
    7030:	cf 91       	pop	r28
    7032:	df 91       	pop	r29
    7034:	99 27       	eor	r25, r25
    7036:	87 fd       	sbrc	r24, 7
    7038:	90 95       	com	r25
    703a:	08 95       	ret

0000703c <strnlen_P>:
    703c:	fc 01       	movw	r30, r24
    703e:	05 90       	lpm	r0, Z+
    7040:	61 50       	subi	r22, 0x01	; 1
    7042:	70 40       	sbci	r23, 0x00	; 0
    7044:	01 10       	cpse	r0, r1
    7046:	d8 f7       	brcc	.-10     	; 0x703e <strnlen_P+0x2>
    7048:	80 95       	com	r24
    704a:	90 95       	com	r25
    704c:	8e 0f       	add	r24, r30
    704e:	9f 1f       	adc	r25, r31
    7050:	08 95       	ret

00007052 <memcpy>:
    7052:	fb 01       	movw	r30, r22
    7054:	dc 01       	movw	r26, r24
    7056:	02 c0       	rjmp	.+4      	; 0x705c <memcpy+0xa>
    7058:	01 90       	ld	r0, Z+
    705a:	0d 92       	st	X+, r0
    705c:	41 50       	subi	r20, 0x01	; 1
    705e:	50 40       	sbci	r21, 0x00	; 0
    7060:	d8 f7       	brcc	.-10     	; 0x7058 <memcpy+0x6>
    7062:	08 95       	ret

00007064 <strchr>:
    7064:	fc 01       	movw	r30, r24
    7066:	81 91       	ld	r24, Z+
    7068:	86 17       	cp	r24, r22
    706a:	21 f0       	breq	.+8      	; 0x7074 <strchr+0x10>
    706c:	88 23       	and	r24, r24
    706e:	d9 f7       	brne	.-10     	; 0x7066 <strchr+0x2>
    7070:	99 27       	eor	r25, r25
    7072:	08 95       	ret
    7074:	31 97       	sbiw	r30, 0x01	; 1
    7076:	cf 01       	movw	r24, r30
    7078:	08 95       	ret

0000707a <strcmp>:
    707a:	fb 01       	movw	r30, r22
    707c:	dc 01       	movw	r26, r24
    707e:	8d 91       	ld	r24, X+
    7080:	01 90       	ld	r0, Z+
    7082:	80 19       	sub	r24, r0
    7084:	01 10       	cpse	r0, r1
    7086:	d9 f3       	breq	.-10     	; 0x707e <strcmp+0x4>
    7088:	99 0b       	sbc	r25, r25
    708a:	08 95       	ret

0000708c <strncmp>:
    708c:	fb 01       	movw	r30, r22
    708e:	dc 01       	movw	r26, r24
    7090:	41 50       	subi	r20, 0x01	; 1
    7092:	50 40       	sbci	r21, 0x00	; 0
    7094:	30 f0       	brcs	.+12     	; 0x70a2 <strncmp+0x16>
    7096:	8d 91       	ld	r24, X+
    7098:	01 90       	ld	r0, Z+
    709a:	80 19       	sub	r24, r0
    709c:	19 f4       	brne	.+6      	; 0x70a4 <strncmp+0x18>
    709e:	00 20       	and	r0, r0
    70a0:	b9 f7       	brne	.-18     	; 0x7090 <strncmp+0x4>
    70a2:	88 1b       	sub	r24, r24
    70a4:	99 0b       	sbc	r25, r25
    70a6:	08 95       	ret

000070a8 <strncpy>:
    70a8:	fb 01       	movw	r30, r22
    70aa:	dc 01       	movw	r26, r24
    70ac:	41 50       	subi	r20, 0x01	; 1
    70ae:	50 40       	sbci	r21, 0x00	; 0
    70b0:	48 f0       	brcs	.+18     	; 0x70c4 <strncpy+0x1c>
    70b2:	01 90       	ld	r0, Z+
    70b4:	0d 92       	st	X+, r0
    70b6:	00 20       	and	r0, r0
    70b8:	c9 f7       	brne	.-14     	; 0x70ac <strncpy+0x4>
    70ba:	01 c0       	rjmp	.+2      	; 0x70be <strncpy+0x16>
    70bc:	1d 92       	st	X+, r1
    70be:	41 50       	subi	r20, 0x01	; 1
    70c0:	50 40       	sbci	r21, 0x00	; 0
    70c2:	e0 f7       	brcc	.-8      	; 0x70bc <strncpy+0x14>
    70c4:	08 95       	ret

000070c6 <strnlen>:
    70c6:	fc 01       	movw	r30, r24
    70c8:	61 50       	subi	r22, 0x01	; 1
    70ca:	70 40       	sbci	r23, 0x00	; 0
    70cc:	01 90       	ld	r0, Z+
    70ce:	01 10       	cpse	r0, r1
    70d0:	d8 f7       	brcc	.-10     	; 0x70c8 <strnlen+0x2>
    70d2:	80 95       	com	r24
    70d4:	90 95       	com	r25
    70d6:	8e 0f       	add	r24, r30
    70d8:	9f 1f       	adc	r25, r31
    70da:	08 95       	ret

000070dc <__mulhi_const_10>:
    70dc:	7a e0       	ldi	r23, 0x0A	; 10
    70de:	97 9f       	mul	r25, r23
    70e0:	90 2d       	mov	r25, r0
    70e2:	87 9f       	mul	r24, r23
    70e4:	80 2d       	mov	r24, r0
    70e6:	91 0d       	add	r25, r1
    70e8:	11 24       	eor	r1, r1
    70ea:	08 95       	ret

000070ec <fputc>:
    70ec:	0f 93       	push	r16
    70ee:	1f 93       	push	r17
    70f0:	cf 93       	push	r28
    70f2:	df 93       	push	r29
    70f4:	fb 01       	movw	r30, r22
    70f6:	23 81       	ldd	r18, Z+3	; 0x03
    70f8:	21 fd       	sbrc	r18, 1
    70fa:	03 c0       	rjmp	.+6      	; 0x7102 <fputc+0x16>
    70fc:	8f ef       	ldi	r24, 0xFF	; 255
    70fe:	9f ef       	ldi	r25, 0xFF	; 255
    7100:	2c c0       	rjmp	.+88     	; 0x715a <fputc+0x6e>
    7102:	22 ff       	sbrs	r18, 2
    7104:	16 c0       	rjmp	.+44     	; 0x7132 <fputc+0x46>
    7106:	46 81       	ldd	r20, Z+6	; 0x06
    7108:	57 81       	ldd	r21, Z+7	; 0x07
    710a:	24 81       	ldd	r18, Z+4	; 0x04
    710c:	35 81       	ldd	r19, Z+5	; 0x05
    710e:	42 17       	cp	r20, r18
    7110:	53 07       	cpc	r21, r19
    7112:	44 f4       	brge	.+16     	; 0x7124 <fputc+0x38>
    7114:	a0 81       	ld	r26, Z
    7116:	b1 81       	ldd	r27, Z+1	; 0x01
    7118:	9d 01       	movw	r18, r26
    711a:	2f 5f       	subi	r18, 0xFF	; 255
    711c:	3f 4f       	sbci	r19, 0xFF	; 255
    711e:	31 83       	std	Z+1, r19	; 0x01
    7120:	20 83       	st	Z, r18
    7122:	8c 93       	st	X, r24
    7124:	26 81       	ldd	r18, Z+6	; 0x06
    7126:	37 81       	ldd	r19, Z+7	; 0x07
    7128:	2f 5f       	subi	r18, 0xFF	; 255
    712a:	3f 4f       	sbci	r19, 0xFF	; 255
    712c:	37 83       	std	Z+7, r19	; 0x07
    712e:	26 83       	std	Z+6, r18	; 0x06
    7130:	14 c0       	rjmp	.+40     	; 0x715a <fputc+0x6e>
    7132:	8b 01       	movw	r16, r22
    7134:	ec 01       	movw	r28, r24
    7136:	fb 01       	movw	r30, r22
    7138:	00 84       	ldd	r0, Z+8	; 0x08
    713a:	f1 85       	ldd	r31, Z+9	; 0x09
    713c:	e0 2d       	mov	r30, r0
    713e:	19 95       	eicall
    7140:	89 2b       	or	r24, r25
    7142:	e1 f6       	brne	.-72     	; 0x70fc <fputc+0x10>
    7144:	d8 01       	movw	r26, r16
    7146:	16 96       	adiw	r26, 0x06	; 6
    7148:	8d 91       	ld	r24, X+
    714a:	9c 91       	ld	r25, X
    714c:	17 97       	sbiw	r26, 0x07	; 7
    714e:	01 96       	adiw	r24, 0x01	; 1
    7150:	17 96       	adiw	r26, 0x07	; 7
    7152:	9c 93       	st	X, r25
    7154:	8e 93       	st	-X, r24
    7156:	16 97       	sbiw	r26, 0x06	; 6
    7158:	ce 01       	movw	r24, r28
    715a:	df 91       	pop	r29
    715c:	cf 91       	pop	r28
    715e:	1f 91       	pop	r17
    7160:	0f 91       	pop	r16
    7162:	08 95       	ret

00007164 <printf>:
    7164:	cf 93       	push	r28
    7166:	df 93       	push	r29
    7168:	cd b7       	in	r28, 0x3d	; 61
    716a:	de b7       	in	r29, 0x3e	; 62
    716c:	ae 01       	movw	r20, r28
    716e:	4a 5f       	subi	r20, 0xFA	; 250
    7170:	5f 4f       	sbci	r21, 0xFF	; 255
    7172:	fa 01       	movw	r30, r20
    7174:	61 91       	ld	r22, Z+
    7176:	71 91       	ld	r23, Z+
    7178:	af 01       	movw	r20, r30
    717a:	80 91 a7 27 	lds	r24, 0x27A7	; 0x8027a7 <__iob+0x2>
    717e:	90 91 a8 27 	lds	r25, 0x27A8	; 0x8027a8 <__iob+0x3>
    7182:	2a da       	rcall	.-2988   	; 0x65d8 <vfprintf>
    7184:	df 91       	pop	r29
    7186:	cf 91       	pop	r28
    7188:	08 95       	ret

0000718a <printf_P>:
    718a:	0f 93       	push	r16
    718c:	1f 93       	push	r17
    718e:	cf 93       	push	r28
    7190:	df 93       	push	r29
    7192:	cd b7       	in	r28, 0x3d	; 61
    7194:	de b7       	in	r29, 0x3e	; 62
    7196:	ae 01       	movw	r20, r28
    7198:	48 5f       	subi	r20, 0xF8	; 248
    719a:	5f 4f       	sbci	r21, 0xFF	; 255
    719c:	da 01       	movw	r26, r20
    719e:	6d 91       	ld	r22, X+
    71a0:	7d 91       	ld	r23, X+
    71a2:	ad 01       	movw	r20, r26
    71a4:	05 ea       	ldi	r16, 0xA5	; 165
    71a6:	17 e2       	ldi	r17, 0x27	; 39
    71a8:	f8 01       	movw	r30, r16
    71aa:	82 81       	ldd	r24, Z+2	; 0x02
    71ac:	93 81       	ldd	r25, Z+3	; 0x03
    71ae:	dc 01       	movw	r26, r24
    71b0:	13 96       	adiw	r26, 0x03	; 3
    71b2:	2c 91       	ld	r18, X
    71b4:	13 97       	sbiw	r26, 0x03	; 3
    71b6:	28 60       	ori	r18, 0x08	; 8
    71b8:	13 96       	adiw	r26, 0x03	; 3
    71ba:	2c 93       	st	X, r18
    71bc:	0d da       	rcall	.-3046   	; 0x65d8 <vfprintf>
    71be:	d8 01       	movw	r26, r16
    71c0:	12 96       	adiw	r26, 0x02	; 2
    71c2:	ed 91       	ld	r30, X+
    71c4:	fc 91       	ld	r31, X
    71c6:	13 97       	sbiw	r26, 0x03	; 3
    71c8:	23 81       	ldd	r18, Z+3	; 0x03
    71ca:	27 7f       	andi	r18, 0xF7	; 247
    71cc:	23 83       	std	Z+3, r18	; 0x03
    71ce:	df 91       	pop	r29
    71d0:	cf 91       	pop	r28
    71d2:	1f 91       	pop	r17
    71d4:	0f 91       	pop	r16
    71d6:	08 95       	ret

000071d8 <puts>:
    71d8:	0f 93       	push	r16
    71da:	1f 93       	push	r17
    71dc:	cf 93       	push	r28
    71de:	df 93       	push	r29
    71e0:	e0 91 a7 27 	lds	r30, 0x27A7	; 0x8027a7 <__iob+0x2>
    71e4:	f0 91 a8 27 	lds	r31, 0x27A8	; 0x8027a8 <__iob+0x3>
    71e8:	23 81       	ldd	r18, Z+3	; 0x03
    71ea:	21 ff       	sbrs	r18, 1
    71ec:	1b c0       	rjmp	.+54     	; 0x7224 <puts+0x4c>
    71ee:	8c 01       	movw	r16, r24
    71f0:	d0 e0       	ldi	r29, 0x00	; 0
    71f2:	c0 e0       	ldi	r28, 0x00	; 0
    71f4:	f8 01       	movw	r30, r16
    71f6:	81 91       	ld	r24, Z+
    71f8:	8f 01       	movw	r16, r30
    71fa:	60 91 a7 27 	lds	r22, 0x27A7	; 0x8027a7 <__iob+0x2>
    71fe:	70 91 a8 27 	lds	r23, 0x27A8	; 0x8027a8 <__iob+0x3>
    7202:	db 01       	movw	r26, r22
    7204:	18 96       	adiw	r26, 0x08	; 8
    7206:	ed 91       	ld	r30, X+
    7208:	fc 91       	ld	r31, X
    720a:	19 97       	sbiw	r26, 0x09	; 9
    720c:	88 23       	and	r24, r24
    720e:	31 f0       	breq	.+12     	; 0x721c <puts+0x44>
    7210:	19 95       	eicall
    7212:	89 2b       	or	r24, r25
    7214:	79 f3       	breq	.-34     	; 0x71f4 <puts+0x1c>
    7216:	df ef       	ldi	r29, 0xFF	; 255
    7218:	cf ef       	ldi	r28, 0xFF	; 255
    721a:	ec cf       	rjmp	.-40     	; 0x71f4 <puts+0x1c>
    721c:	8a e0       	ldi	r24, 0x0A	; 10
    721e:	19 95       	eicall
    7220:	89 2b       	or	r24, r25
    7222:	19 f0       	breq	.+6      	; 0x722a <puts+0x52>
    7224:	8f ef       	ldi	r24, 0xFF	; 255
    7226:	9f ef       	ldi	r25, 0xFF	; 255
    7228:	02 c0       	rjmp	.+4      	; 0x722e <puts+0x56>
    722a:	8d 2f       	mov	r24, r29
    722c:	9c 2f       	mov	r25, r28
    722e:	df 91       	pop	r29
    7230:	cf 91       	pop	r28
    7232:	1f 91       	pop	r17
    7234:	0f 91       	pop	r16
    7236:	08 95       	ret

00007238 <sprintf>:
    7238:	0f 93       	push	r16
    723a:	1f 93       	push	r17
    723c:	cf 93       	push	r28
    723e:	df 93       	push	r29
    7240:	cd b7       	in	r28, 0x3d	; 61
    7242:	de b7       	in	r29, 0x3e	; 62
    7244:	2e 97       	sbiw	r28, 0x0e	; 14
    7246:	0f b6       	in	r0, 0x3f	; 63
    7248:	f8 94       	cli
    724a:	de bf       	out	0x3e, r29	; 62
    724c:	0f be       	out	0x3f, r0	; 63
    724e:	cd bf       	out	0x3d, r28	; 61
    7250:	0e 89       	ldd	r16, Y+22	; 0x16
    7252:	1f 89       	ldd	r17, Y+23	; 0x17
    7254:	86 e0       	ldi	r24, 0x06	; 6
    7256:	8c 83       	std	Y+4, r24	; 0x04
    7258:	1a 83       	std	Y+2, r17	; 0x02
    725a:	09 83       	std	Y+1, r16	; 0x01
    725c:	8f ef       	ldi	r24, 0xFF	; 255
    725e:	9f e7       	ldi	r25, 0x7F	; 127
    7260:	9e 83       	std	Y+6, r25	; 0x06
    7262:	8d 83       	std	Y+5, r24	; 0x05
    7264:	ae 01       	movw	r20, r28
    7266:	46 5e       	subi	r20, 0xE6	; 230
    7268:	5f 4f       	sbci	r21, 0xFF	; 255
    726a:	68 8d       	ldd	r22, Y+24	; 0x18
    726c:	79 8d       	ldd	r23, Y+25	; 0x19
    726e:	ce 01       	movw	r24, r28
    7270:	01 96       	adiw	r24, 0x01	; 1
    7272:	b2 d9       	rcall	.-3228   	; 0x65d8 <vfprintf>
    7274:	ef 81       	ldd	r30, Y+7	; 0x07
    7276:	f8 85       	ldd	r31, Y+8	; 0x08
    7278:	e0 0f       	add	r30, r16
    727a:	f1 1f       	adc	r31, r17
    727c:	10 82       	st	Z, r1
    727e:	2e 96       	adiw	r28, 0x0e	; 14
    7280:	0f b6       	in	r0, 0x3f	; 63
    7282:	f8 94       	cli
    7284:	de bf       	out	0x3e, r29	; 62
    7286:	0f be       	out	0x3f, r0	; 63
    7288:	cd bf       	out	0x3d, r28	; 61
    728a:	df 91       	pop	r29
    728c:	cf 91       	pop	r28
    728e:	1f 91       	pop	r17
    7290:	0f 91       	pop	r16
    7292:	08 95       	ret

00007294 <__ultoa_invert>:
    7294:	fa 01       	movw	r30, r20
    7296:	aa 27       	eor	r26, r26
    7298:	28 30       	cpi	r18, 0x08	; 8
    729a:	51 f1       	breq	.+84     	; 0x72f0 <__ultoa_invert+0x5c>
    729c:	20 31       	cpi	r18, 0x10	; 16
    729e:	81 f1       	breq	.+96     	; 0x7300 <__ultoa_invert+0x6c>
    72a0:	e8 94       	clt
    72a2:	6f 93       	push	r22
    72a4:	6e 7f       	andi	r22, 0xFE	; 254
    72a6:	6e 5f       	subi	r22, 0xFE	; 254
    72a8:	7f 4f       	sbci	r23, 0xFF	; 255
    72aa:	8f 4f       	sbci	r24, 0xFF	; 255
    72ac:	9f 4f       	sbci	r25, 0xFF	; 255
    72ae:	af 4f       	sbci	r26, 0xFF	; 255
    72b0:	b1 e0       	ldi	r27, 0x01	; 1
    72b2:	3e d0       	rcall	.+124    	; 0x7330 <__ultoa_invert+0x9c>
    72b4:	b4 e0       	ldi	r27, 0x04	; 4
    72b6:	3c d0       	rcall	.+120    	; 0x7330 <__ultoa_invert+0x9c>
    72b8:	67 0f       	add	r22, r23
    72ba:	78 1f       	adc	r23, r24
    72bc:	89 1f       	adc	r24, r25
    72be:	9a 1f       	adc	r25, r26
    72c0:	a1 1d       	adc	r26, r1
    72c2:	68 0f       	add	r22, r24
    72c4:	79 1f       	adc	r23, r25
    72c6:	8a 1f       	adc	r24, r26
    72c8:	91 1d       	adc	r25, r1
    72ca:	a1 1d       	adc	r26, r1
    72cc:	6a 0f       	add	r22, r26
    72ce:	71 1d       	adc	r23, r1
    72d0:	81 1d       	adc	r24, r1
    72d2:	91 1d       	adc	r25, r1
    72d4:	a1 1d       	adc	r26, r1
    72d6:	20 d0       	rcall	.+64     	; 0x7318 <__ultoa_invert+0x84>
    72d8:	09 f4       	brne	.+2      	; 0x72dc <__ultoa_invert+0x48>
    72da:	68 94       	set
    72dc:	3f 91       	pop	r19
    72de:	2a e0       	ldi	r18, 0x0A	; 10
    72e0:	26 9f       	mul	r18, r22
    72e2:	11 24       	eor	r1, r1
    72e4:	30 19       	sub	r19, r0
    72e6:	30 5d       	subi	r19, 0xD0	; 208
    72e8:	31 93       	st	Z+, r19
    72ea:	de f6       	brtc	.-74     	; 0x72a2 <__ultoa_invert+0xe>
    72ec:	cf 01       	movw	r24, r30
    72ee:	08 95       	ret
    72f0:	46 2f       	mov	r20, r22
    72f2:	47 70       	andi	r20, 0x07	; 7
    72f4:	40 5d       	subi	r20, 0xD0	; 208
    72f6:	41 93       	st	Z+, r20
    72f8:	b3 e0       	ldi	r27, 0x03	; 3
    72fa:	0f d0       	rcall	.+30     	; 0x731a <__ultoa_invert+0x86>
    72fc:	c9 f7       	brne	.-14     	; 0x72f0 <__ultoa_invert+0x5c>
    72fe:	f6 cf       	rjmp	.-20     	; 0x72ec <__ultoa_invert+0x58>
    7300:	46 2f       	mov	r20, r22
    7302:	4f 70       	andi	r20, 0x0F	; 15
    7304:	40 5d       	subi	r20, 0xD0	; 208
    7306:	4a 33       	cpi	r20, 0x3A	; 58
    7308:	18 f0       	brcs	.+6      	; 0x7310 <__ultoa_invert+0x7c>
    730a:	49 5d       	subi	r20, 0xD9	; 217
    730c:	31 fd       	sbrc	r19, 1
    730e:	40 52       	subi	r20, 0x20	; 32
    7310:	41 93       	st	Z+, r20
    7312:	02 d0       	rcall	.+4      	; 0x7318 <__ultoa_invert+0x84>
    7314:	a9 f7       	brne	.-22     	; 0x7300 <__ultoa_invert+0x6c>
    7316:	ea cf       	rjmp	.-44     	; 0x72ec <__ultoa_invert+0x58>
    7318:	b4 e0       	ldi	r27, 0x04	; 4
    731a:	a6 95       	lsr	r26
    731c:	97 95       	ror	r25
    731e:	87 95       	ror	r24
    7320:	77 95       	ror	r23
    7322:	67 95       	ror	r22
    7324:	ba 95       	dec	r27
    7326:	c9 f7       	brne	.-14     	; 0x731a <__ultoa_invert+0x86>
    7328:	00 97       	sbiw	r24, 0x00	; 0
    732a:	61 05       	cpc	r22, r1
    732c:	71 05       	cpc	r23, r1
    732e:	08 95       	ret
    7330:	9b 01       	movw	r18, r22
    7332:	ac 01       	movw	r20, r24
    7334:	0a 2e       	mov	r0, r26
    7336:	06 94       	lsr	r0
    7338:	57 95       	ror	r21
    733a:	47 95       	ror	r20
    733c:	37 95       	ror	r19
    733e:	27 95       	ror	r18
    7340:	ba 95       	dec	r27
    7342:	c9 f7       	brne	.-14     	; 0x7336 <__ultoa_invert+0xa2>
    7344:	62 0f       	add	r22, r18
    7346:	73 1f       	adc	r23, r19
    7348:	84 1f       	adc	r24, r20
    734a:	95 1f       	adc	r25, r21
    734c:	a0 1d       	adc	r26, r0
    734e:	08 95       	ret

00007350 <__mulshisi3>:
    7350:	b7 ff       	sbrs	r27, 7
    7352:	11 cd       	rjmp	.-1502   	; 0x6d76 <__muluhisi3>

00007354 <__mulohisi3>:
    7354:	10 dd       	rcall	.-1504   	; 0x6d76 <__muluhisi3>
    7356:	82 1b       	sub	r24, r18
    7358:	93 0b       	sbc	r25, r19
    735a:	08 95       	ret

0000735c <_exit>:
    735c:	f8 94       	cli

0000735e <__stop_program>:
    735e:	ff cf       	rjmp	.-2      	; 0x735e <__stop_program>
