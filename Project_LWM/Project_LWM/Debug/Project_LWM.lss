
Project_LWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000238  00800200  00003376  0000340a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002bf  00800438  00800438  00003642  2**0
                  ALLOC
  3 .noinit       00000001  008006f7  008006f7  00003642  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00003642  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000036a0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000390  00000000  00000000  000036e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000689a  00000000  00000000  00003a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002344  00000000  00000000  0000a30a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002bd8  00000000  00000000  0000c64e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000fa0  00000000  00000000  0000f228  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000172c  00000000  00000000  000101c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005103  00000000  00000000  000118f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000328  00000000  00000000  000169f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	25 c1       	rjmp	.+586    	; 0x24c <__ctors_end>
       2:	00 00       	nop
       4:	53 c1       	rjmp	.+678    	; 0x2ac <__bad_interrupt>
       6:	00 00       	nop
       8:	51 c1       	rjmp	.+674    	; 0x2ac <__bad_interrupt>
       a:	00 00       	nop
       c:	4f c1       	rjmp	.+670    	; 0x2ac <__bad_interrupt>
       e:	00 00       	nop
      10:	4d c1       	rjmp	.+666    	; 0x2ac <__bad_interrupt>
      12:	00 00       	nop
      14:	4b c1       	rjmp	.+662    	; 0x2ac <__bad_interrupt>
      16:	00 00       	nop
      18:	49 c1       	rjmp	.+658    	; 0x2ac <__bad_interrupt>
      1a:	00 00       	nop
      1c:	47 c1       	rjmp	.+654    	; 0x2ac <__bad_interrupt>
      1e:	00 00       	nop
      20:	45 c1       	rjmp	.+650    	; 0x2ac <__bad_interrupt>
      22:	00 00       	nop
      24:	43 c1       	rjmp	.+646    	; 0x2ac <__bad_interrupt>
      26:	00 00       	nop
      28:	41 c1       	rjmp	.+642    	; 0x2ac <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3f c1       	rjmp	.+638    	; 0x2ac <__bad_interrupt>
      2e:	00 00       	nop
      30:	3d c1       	rjmp	.+634    	; 0x2ac <__bad_interrupt>
      32:	00 00       	nop
      34:	3b c1       	rjmp	.+630    	; 0x2ac <__bad_interrupt>
      36:	00 00       	nop
      38:	39 c1       	rjmp	.+626    	; 0x2ac <__bad_interrupt>
      3a:	00 00       	nop
      3c:	37 c1       	rjmp	.+622    	; 0x2ac <__bad_interrupt>
      3e:	00 00       	nop
      40:	35 c1       	rjmp	.+618    	; 0x2ac <__bad_interrupt>
      42:	00 00       	nop
      44:	33 c1       	rjmp	.+614    	; 0x2ac <__bad_interrupt>
      46:	00 00       	nop
      48:	31 c1       	rjmp	.+610    	; 0x2ac <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2f c1       	rjmp	.+606    	; 0x2ac <__bad_interrupt>
      4e:	00 00       	nop
      50:	2d c1       	rjmp	.+602    	; 0x2ac <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__vector_21>
      58:	29 c1       	rjmp	.+594    	; 0x2ac <__bad_interrupt>
      5a:	00 00       	nop
      5c:	27 c1       	rjmp	.+590    	; 0x2ac <__bad_interrupt>
      5e:	00 00       	nop
      60:	25 c1       	rjmp	.+586    	; 0x2ac <__bad_interrupt>
      62:	00 00       	nop
      64:	23 c1       	rjmp	.+582    	; 0x2ac <__bad_interrupt>
      66:	00 00       	nop
      68:	21 c1       	rjmp	.+578    	; 0x2ac <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1f c1       	rjmp	.+574    	; 0x2ac <__bad_interrupt>
      6e:	00 00       	nop
      70:	1d c1       	rjmp	.+570    	; 0x2ac <__bad_interrupt>
      72:	00 00       	nop
      74:	1b c1       	rjmp	.+566    	; 0x2ac <__bad_interrupt>
      76:	00 00       	nop
      78:	19 c1       	rjmp	.+562    	; 0x2ac <__bad_interrupt>
      7a:	00 00       	nop
      7c:	17 c1       	rjmp	.+558    	; 0x2ac <__bad_interrupt>
      7e:	00 00       	nop
      80:	15 c1       	rjmp	.+554    	; 0x2ac <__bad_interrupt>
      82:	00 00       	nop
      84:	13 c1       	rjmp	.+550    	; 0x2ac <__bad_interrupt>
      86:	00 00       	nop
      88:	11 c1       	rjmp	.+546    	; 0x2ac <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0f c1       	rjmp	.+542    	; 0x2ac <__bad_interrupt>
      8e:	00 00       	nop
      90:	0d c1       	rjmp	.+538    	; 0x2ac <__bad_interrupt>
      92:	00 00       	nop
      94:	0b c1       	rjmp	.+534    	; 0x2ac <__bad_interrupt>
      96:	00 00       	nop
      98:	09 c1       	rjmp	.+530    	; 0x2ac <__bad_interrupt>
      9a:	00 00       	nop
      9c:	07 c1       	rjmp	.+526    	; 0x2ac <__bad_interrupt>
      9e:	00 00       	nop
      a0:	05 c1       	rjmp	.+522    	; 0x2ac <__bad_interrupt>
      a2:	00 00       	nop
      a4:	03 c1       	rjmp	.+518    	; 0x2ac <__bad_interrupt>
      a6:	00 00       	nop
      a8:	01 c1       	rjmp	.+514    	; 0x2ac <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ff c0       	rjmp	.+510    	; 0x2ac <__bad_interrupt>
      ae:	00 00       	nop
      b0:	fd c0       	rjmp	.+506    	; 0x2ac <__bad_interrupt>
      b2:	00 00       	nop
      b4:	fb c0       	rjmp	.+502    	; 0x2ac <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f9 c0       	rjmp	.+498    	; 0x2ac <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f7 c0       	rjmp	.+494    	; 0x2ac <__bad_interrupt>
      be:	00 00       	nop
      c0:	f5 c0       	rjmp	.+490    	; 0x2ac <__bad_interrupt>
      c2:	00 00       	nop
      c4:	f3 c0       	rjmp	.+486    	; 0x2ac <__bad_interrupt>
      c6:	00 00       	nop
      c8:	f1 c0       	rjmp	.+482    	; 0x2ac <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ef c0       	rjmp	.+478    	; 0x2ac <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ed c0       	rjmp	.+474    	; 0x2ac <__bad_interrupt>
      d2:	00 00       	nop
      d4:	eb c0       	rjmp	.+470    	; 0x2ac <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e9 c0       	rjmp	.+466    	; 0x2ac <__bad_interrupt>
      da:	00 00       	nop
      dc:	e7 c0       	rjmp	.+462    	; 0x2ac <__bad_interrupt>
      de:	00 00       	nop
      e0:	e5 c0       	rjmp	.+458    	; 0x2ac <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e3 c0       	rjmp	.+454    	; 0x2ac <__bad_interrupt>
      e6:	00 00       	nop
      e8:	e1 c0       	rjmp	.+450    	; 0x2ac <__bad_interrupt>
      ea:	00 00       	nop
      ec:	df c0       	rjmp	.+446    	; 0x2ac <__bad_interrupt>
      ee:	00 00       	nop
      f0:	dd c0       	rjmp	.+442    	; 0x2ac <__bad_interrupt>
      f2:	00 00       	nop
      f4:	db c0       	rjmp	.+438    	; 0x2ac <__bad_interrupt>
      f6:	00 00       	nop
      f8:	d9 c0       	rjmp	.+434    	; 0x2ac <__bad_interrupt>
      fa:	00 00       	nop
      fc:	d7 c0       	rjmp	.+430    	; 0x2ac <__bad_interrupt>
      fe:	00 00       	nop
     100:	d5 c0       	rjmp	.+426    	; 0x2ac <__bad_interrupt>
     102:	00 00       	nop
     104:	d3 c0       	rjmp	.+422    	; 0x2ac <__bad_interrupt>
     106:	00 00       	nop
     108:	d1 c0       	rjmp	.+418    	; 0x2ac <__bad_interrupt>
     10a:	00 00       	nop
     10c:	cf c0       	rjmp	.+414    	; 0x2ac <__bad_interrupt>
     10e:	00 00       	nop
     110:	cd c0       	rjmp	.+410    	; 0x2ac <__bad_interrupt>
     112:	00 00       	nop
     114:	cb c0       	rjmp	.+406    	; 0x2ac <__bad_interrupt>
     116:	00 00       	nop
     118:	c9 c0       	rjmp	.+402    	; 0x2ac <__bad_interrupt>
     11a:	00 00       	nop
     11c:	c7 c0       	rjmp	.+398    	; 0x2ac <__bad_interrupt>
     11e:	00 00       	nop
     120:	c5 c0       	rjmp	.+394    	; 0x2ac <__bad_interrupt>
     122:	00 00       	nop
     124:	c3 c0       	rjmp	.+390    	; 0x2ac <__bad_interrupt>
     126:	00 00       	nop
     128:	c1 c0       	rjmp	.+386    	; 0x2ac <__bad_interrupt>
     12a:	00 00       	nop
     12c:	bf c0       	rjmp	.+382    	; 0x2ac <__bad_interrupt>
     12e:	00 00       	nop
     130:	bd c0       	rjmp	.+378    	; 0x2ac <__bad_interrupt>
     132:	00 00       	nop
     134:	e2 12       	cpse	r14, r18
     136:	e5 12       	cpse	r14, r21
     138:	f4 12       	cpse	r15, r20
     13a:	ef 12       	cpse	r14, r31
     13c:	f9 12       	cpse	r15, r25
     13e:	fe 12       	cpse	r15, r30
     140:	03 13       	cpse	r16, r19
     142:	11 13       	cpse	r17, r17
     144:	25 13       	cpse	r18, r21
     146:	34 13       	cpse	r19, r20
     148:	37 13       	cpse	r19, r23
     14a:	3b 13       	cpse	r19, r27
     14c:	4e 13       	cpse	r20, r30
     14e:	3f 13       	cpse	r19, r31
     150:	42 13       	cpse	r20, r18
     152:	48 13       	cpse	r20, r24

00000154 <__trampolines_end>:
     154:	44 48       	sbci	r20, 0x84	; 132
     156:	43 50       	subi	r20, 0x03	; 3
     158:	20 49       	sbci	r18, 0x90	; 144
     15a:	50 0d       	add	r21, r0
     15c:	0a 00       	.word	0x000a	; ????

0000015e <__c.2726>:
     15e:	53 54 41 54 49 43 20 49 50 0d 0a 00                 STATIC IP...

0000016a <__c.2723>:
     16a:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     17a:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     18a:	3d 3d 3d 3d 3d 3d 3d 0d 0a 00                       =======...

00000194 <__c.2721>:
     194:	20 57 49 5a 6e 65 74 20 63 68 69 70 3a 20 20 25      WIZnet chip:  %
     1a4:	73 20 0d 0a 00                                      s ...

000001a9 <__c.2719>:
     1a9:	0d 0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ..==============
     1b9:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     1c9:	3d 3d 3d 3d 3d 3d 3d 3d 3d 0d 0a 00                 =========...

000001d5 <__c.2706>:
     1d5:	0d 0a 3e 3e 3e 20 50 49 4e 47 20 44 4e 53 0d 0a     ..>>> PING DNS..
	...

000001e6 <__c.2704>:
     1e6:	0d 0a 3e 3e 20 50 49 4e 47 20 6d 79 20 50 43 0d     ..>> PING my PC.
     1f6:	0a 00                                               ..

000001f8 <__c.2695>:
     1f8:	3e 3e 20 46 72 65 65 20 52 41 4d 20 69 73 3a 20     >> Free RAM is: 
     208:	25 64 20 62 79 74 65 73 0d 0a 00                    %d bytes...

00000213 <__c.2691>:
     213:	3c 3c 20 50 49 4e 47 20 25 73 20 66 72 6f 6d 20     << PING %s from 
     223:	25 64 2e 25 64 2e 25 64 2e 25 64 20 49 44 3a 25     %d.%d.%d.%d ID:%
     233:	78 20 53 65 71 3a 25 78 20 64 61 74 61 3a 25 75     x Seq:%x data:%u
     243:	20 62 79 74 65 73 0d 0a 00                           bytes...

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d1 e8       	ldi	r29, 0x81	; 129
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61
     258:	00 e0       	ldi	r16, 0x00	; 0
     25a:	0c bf       	out	0x3c, r16	; 60

0000025c <get_mcusr>:
void get_mcusr(void) \
  __attribute__((naked)) \
  __attribute__((section(".init3")));
void get_mcusr(void)
{
  mcucsr_mirror = MCUSR;
     25c:	84 b7       	in	r24, 0x34	; 52
     25e:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <__bss_end>
  MCUSR = 0;
     262:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	a8 95       	wdr
     26a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     26e:	88 61       	ori	r24, 0x18	; 24
     270:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     274:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     278:	0f be       	out	0x3f, r0	; 63

0000027a <__do_copy_data>:
     27a:	14 e0       	ldi	r17, 0x04	; 4
     27c:	a0 e0       	ldi	r26, 0x00	; 0
     27e:	b2 e0       	ldi	r27, 0x02	; 2
     280:	e6 e7       	ldi	r30, 0x76	; 118
     282:	f3 e3       	ldi	r31, 0x33	; 51
     284:	00 e0       	ldi	r16, 0x00	; 0
     286:	0b bf       	out	0x3b, r16	; 59
     288:	02 c0       	rjmp	.+4      	; 0x28e <__do_copy_data+0x14>
     28a:	07 90       	elpm	r0, Z+
     28c:	0d 92       	st	X+, r0
     28e:	a8 33       	cpi	r26, 0x38	; 56
     290:	b1 07       	cpc	r27, r17
     292:	d9 f7       	brne	.-10     	; 0x28a <__do_copy_data+0x10>

00000294 <__do_clear_bss>:
     294:	26 e0       	ldi	r18, 0x06	; 6
     296:	a8 e3       	ldi	r26, 0x38	; 56
     298:	b4 e0       	ldi	r27, 0x04	; 4
     29a:	01 c0       	rjmp	.+2      	; 0x29e <.do_clear_bss_start>

0000029c <.do_clear_bss_loop>:
     29c:	1d 92       	st	X+, r1

0000029e <.do_clear_bss_start>:
     29e:	a7 3f       	cpi	r26, 0xF7	; 247
     2a0:	b2 07       	cpc	r27, r18
     2a2:	e1 f7       	brne	.-8      	; 0x29c <.do_clear_bss_loop>
     2a4:	0e 94 7d 15 	call	0x2afa	; 0x2afa <main>
     2a8:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <_exit>

000002ac <__bad_interrupt>:
     2ac:	a9 ce       	rjmp	.-686    	; 0x0 <__vectors>

000002ae <loopback_tcps>:
         break;
      default:
         break;
   }
   return 1;
}
     2ae:	4f 92       	push	r4
     2b0:	5f 92       	push	r5
     2b2:	6f 92       	push	r6
     2b4:	7f 92       	push	r7
     2b6:	af 92       	push	r10
     2b8:	bf 92       	push	r11
     2ba:	df 92       	push	r13
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <loopback_tcps+0x1c>
     2ca:	1f 92       	push	r1
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	d8 2e       	mov	r13, r24
     2d2:	7b 01       	movw	r14, r22
     2d4:	a4 2e       	mov	r10, r20
     2d6:	b5 2e       	mov	r11, r21
     2d8:	08 2f       	mov	r16, r24
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	00 0f       	add	r16, r16
     2de:	11 1f       	adc	r17, r17
     2e0:	00 0f       	add	r16, r16
     2e2:	11 1f       	adc	r17, r17
     2e4:	0f 5f       	subi	r16, 0xFF	; 255
     2e6:	1f 4f       	sbci	r17, 0xFF	; 255
     2e8:	00 0f       	add	r16, r16
     2ea:	11 1f       	adc	r17, r17
     2ec:	00 0f       	add	r16, r16
     2ee:	11 1f       	adc	r17, r17
     2f0:	00 0f       	add	r16, r16
     2f2:	11 1f       	adc	r17, r17
     2f4:	b8 01       	movw	r22, r16
     2f6:	7d 5f       	subi	r23, 0xFD	; 253
     2f8:	07 2e       	mov	r0, r23
     2fa:	00 0c       	add	r0, r0
     2fc:	88 0b       	sbc	r24, r24
     2fe:	99 0b       	sbc	r25, r25
     300:	0e 94 ab 0c 	call	0x1956	; 0x1956 <WIZCHIP_READ>
     304:	83 31       	cpi	r24, 0x13	; 19
     306:	09 f4       	brne	.+2      	; 0x30a <loopback_tcps+0x5c>
     308:	b0 c0       	rjmp	.+352    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     30a:	20 f4       	brcc	.+8      	; 0x314 <loopback_tcps+0x66>
     30c:	88 23       	and	r24, r24
     30e:	09 f4       	brne	.+2      	; 0x312 <loopback_tcps+0x64>
     310:	cd c0       	rjmp	.+410    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     312:	e5 c0       	rjmp	.+458    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     314:	87 31       	cpi	r24, 0x17	; 23
     316:	21 f0       	breq	.+8      	; 0x320 <loopback_tcps+0x72>
     318:	8c 31       	cpi	r24, 0x1C	; 28
     31a:	09 f4       	brne	.+2      	; 0x31e <loopback_tcps+0x70>
     31c:	88 c0       	rjmp	.+272    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     31e:	df c0       	rjmp	.+446    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     320:	28 01       	movw	r4, r16
     322:	2e ef       	ldi	r18, 0xFE	; 254
     324:	52 1a       	sub	r5, r18
     326:	05 2c       	mov	r0, r5
     328:	00 0c       	add	r0, r0
     32a:	66 08       	sbc	r6, r6
     32c:	77 08       	sbc	r7, r7
     32e:	c3 01       	movw	r24, r6
     330:	b2 01       	movw	r22, r4
     332:	0e 94 ab 0c 	call	0x1956	; 0x1956 <WIZCHIP_READ>
     336:	80 ff       	sbrs	r24, 0
     338:	43 c0       	rjmp	.+134    	; 0x3c0 <loopback_tcps+0x112>
     33a:	b8 01       	movw	r22, r16
     33c:	74 5f       	subi	r23, 0xF4	; 244
     33e:	07 2e       	mov	r0, r23
     340:	00 0c       	add	r0, r0
     342:	88 0b       	sbc	r24, r24
     344:	99 0b       	sbc	r25, r25
     346:	24 e0       	ldi	r18, 0x04	; 4
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	ae 01       	movw	r20, r28
     34c:	4f 5f       	subi	r20, 0xFF	; 255
     34e:	5f 4f       	sbci	r21, 0xFF	; 255
     350:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <WIZCHIP_READ_BUF>
     354:	b8 01       	movw	r22, r16
     356:	70 5f       	subi	r23, 0xF0	; 240
     358:	07 2e       	mov	r0, r23
     35a:	00 0c       	add	r0, r0
     35c:	88 0b       	sbc	r24, r24
     35e:	99 0b       	sbc	r25, r25
     360:	0e 94 ab 0c 	call	0x1956	; 0x1956 <WIZCHIP_READ>
     364:	a8 2e       	mov	r10, r24
     366:	b1 2c       	mov	r11, r1
     368:	ba 2c       	mov	r11, r10
     36a:	aa 24       	eor	r10, r10
     36c:	b8 01       	movw	r22, r16
     36e:	7f 5e       	subi	r23, 0xEF	; 239
     370:	07 2e       	mov	r0, r23
     372:	00 0c       	add	r0, r0
     374:	88 0b       	sbc	r24, r24
     376:	99 0b       	sbc	r25, r25
     378:	0e 94 ab 0c 	call	0x1956	; 0x1956 <WIZCHIP_READ>
     37c:	a8 0e       	add	r10, r24
     37e:	b1 1c       	adc	r11, r1
     380:	3c 81       	ldd	r19, Y+4	; 0x04
     382:	2b 81       	ldd	r18, Y+3	; 0x03
     384:	9a 81       	ldd	r25, Y+2	; 0x02
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	bf 92       	push	r11
     38a:	af 92       	push	r10
     38c:	1f 92       	push	r1
     38e:	3f 93       	push	r19
     390:	1f 92       	push	r1
     392:	2f 93       	push	r18
     394:	1f 92       	push	r1
     396:	9f 93       	push	r25
     398:	1f 92       	push	r1
     39a:	8f 93       	push	r24
     39c:	1f 92       	push	r1
     39e:	df 92       	push	r13
     3a0:	8f e4       	ldi	r24, 0x4F	; 79
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	9f 93       	push	r25
     3a6:	8f 93       	push	r24
     3a8:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <printf>
     3ac:	41 e0       	ldi	r20, 0x01	; 1
     3ae:	c3 01       	movw	r24, r6
     3b0:	b2 01       	movw	r22, r4
     3b2:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <WIZCHIP_WRITE>
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	cd bf       	out	0x3d, r28	; 61
     3c0:	8d 2d       	mov	r24, r13
     3c2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <getSn_RX_RSR>
     3c6:	00 97       	sbiw	r24, 0x00	; 0
     3c8:	09 f4       	brne	.+2      	; 0x3cc <loopback_tcps+0x11e>
     3ca:	8e c0       	rjmp	.+284    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	28 e0       	ldi	r18, 0x08	; 8
     3d0:	92 07       	cpc	r25, r18
     3d2:	10 f0       	brcs	.+4      	; 0x3d8 <loopback_tcps+0x12a>
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	98 e0       	ldi	r25, 0x08	; 8
     3d8:	ac 01       	movw	r20, r24
     3da:	b7 01       	movw	r22, r14
     3dc:	8d 2d       	mov	r24, r13
     3de:	f0 d6       	rcall	.+3552   	; 0x11c0 <recv>
     3e0:	16 16       	cp	r1, r22
     3e2:	17 06       	cpc	r1, r23
     3e4:	18 06       	cpc	r1, r24
     3e6:	19 06       	cpc	r1, r25
     3e8:	0c f0       	brlt	.+2      	; 0x3ec <loopback_tcps+0x13e>
     3ea:	83 c0       	rjmp	.+262    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     3ec:	5b 01       	movw	r10, r22
     3ee:	00 e0       	ldi	r16, 0x00	; 0
     3f0:	10 e0       	ldi	r17, 0x00	; 0
     3f2:	15 c0       	rjmp	.+42     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3f4:	a5 01       	movw	r20, r10
     3f6:	40 1b       	sub	r20, r16
     3f8:	51 0b       	sbc	r21, r17
     3fa:	b7 01       	movw	r22, r14
     3fc:	60 0f       	add	r22, r16
     3fe:	71 1f       	adc	r23, r17
     400:	8d 2d       	mov	r24, r13
     402:	cb d5       	rcall	.+2966   	; 0xf9a <send>
     404:	2b 01       	movw	r4, r22
     406:	3c 01       	movw	r6, r24
     408:	99 23       	and	r25, r25
     40a:	3c f4       	brge	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     40c:	8d 2d       	mov	r24, r13
     40e:	8a d3       	rcall	.+1812   	; 0xb24 <close>
     410:	44 2d       	mov	r20, r4
     412:	35 2d       	mov	r19, r5
     414:	26 2d       	mov	r18, r6
     416:	97 2d       	mov	r25, r7
     418:	7e c0       	rjmp	.+252    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     41a:	06 0f       	add	r16, r22
     41c:	17 1f       	adc	r17, r23
     41e:	0a 15       	cp	r16, r10
     420:	1b 05       	cpc	r17, r11
     422:	41 f7       	brne	.-48     	; 0x3f4 <loopback_tcps+0x146>
     424:	41 e0       	ldi	r20, 0x01	; 1
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	74 c0       	rjmp	.+232    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     42e:	8d 2d       	mov	r24, r13
     430:	40 d5       	rcall	.+2688   	; 0xeb2 <disconnect>
     432:	08 2e       	mov	r0, r24
     434:	00 0c       	add	r0, r0
     436:	99 0b       	sbc	r25, r25
     438:	aa 0b       	sbc	r26, r26
     43a:	bb 0b       	sbc	r27, r27
     43c:	81 30       	cpi	r24, 0x01	; 1
     43e:	91 05       	cpc	r25, r1
     440:	a1 05       	cpc	r26, r1
     442:	b1 05       	cpc	r27, r1
     444:	09 f0       	breq	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     446:	59 c0       	rjmp	.+178    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     448:	1f 92       	push	r1
     44a:	df 92       	push	r13
     44c:	81 e7       	ldi	r24, 0x71	; 113
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	9f 93       	push	r25
     452:	8f 93       	push	r24
     454:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <printf>
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	41 e0       	ldi	r20, 0x01	; 1
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	56 c0       	rjmp	.+172    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     46a:	bf 92       	push	r11
     46c:	af 92       	push	r10
     46e:	1f 92       	push	r1
     470:	df 92       	push	r13
     472:	84 e8       	ldi	r24, 0x84	; 132
     474:	92 e0       	ldi	r25, 0x02	; 2
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <printf>
     47e:	8d 2d       	mov	r24, r13
     480:	be d4       	rcall	.+2428   	; 0xdfe <listen>
     482:	08 2e       	mov	r0, r24
     484:	00 0c       	add	r0, r0
     486:	99 0b       	sbc	r25, r25
     488:	aa 0b       	sbc	r26, r26
     48a:	bb 0b       	sbc	r27, r27
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	91 05       	cpc	r25, r1
     49c:	a1 05       	cpc	r26, r1
     49e:	b1 05       	cpc	r27, r1
     4a0:	89 f1       	breq	.+98     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     4a2:	48 2f       	mov	r20, r24
     4a4:	39 2f       	mov	r19, r25
     4a6:	2a 2f       	mov	r18, r26
     4a8:	9b 2f       	mov	r25, r27
     4aa:	35 c0       	rjmp	.+106    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	4a 2d       	mov	r20, r10
     4b0:	5b 2d       	mov	r21, r11
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	8d 2d       	mov	r24, r13
     4b6:	a6 d3       	rcall	.+1868   	; 0xc04 <socket>
     4b8:	08 2e       	mov	r0, r24
     4ba:	00 0c       	add	r0, r0
     4bc:	99 0b       	sbc	r25, r25
     4be:	aa 0b       	sbc	r26, r26
     4c0:	bb 0b       	sbc	r27, r27
     4c2:	4d 2d       	mov	r20, r13
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	84 17       	cp	r24, r20
     4cc:	95 07       	cpc	r25, r21
     4ce:	a6 07       	cpc	r26, r22
     4d0:	b7 07       	cpc	r27, r23
     4d2:	e9 f0       	breq	.+58     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     4d4:	48 2f       	mov	r20, r24
     4d6:	39 2f       	mov	r19, r25
     4d8:	2a 2f       	mov	r18, r26
     4da:	9b 2f       	mov	r25, r27
     4dc:	1c c0       	rjmp	.+56     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     4de:	41 e0       	ldi	r20, 0x01	; 1
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	17 c0       	rjmp	.+46     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     4e8:	41 e0       	ldi	r20, 0x01	; 1
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	12 c0       	rjmp	.+36     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     4f2:	46 2f       	mov	r20, r22
     4f4:	37 2f       	mov	r19, r23
     4f6:	28 2f       	mov	r18, r24
     4f8:	0e c0       	rjmp	.+28     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     4fa:	48 2f       	mov	r20, r24
     4fc:	39 2f       	mov	r19, r25
     4fe:	2a 2f       	mov	r18, r26
     500:	9b 2f       	mov	r25, r27
     502:	09 c0       	rjmp	.+18     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     504:	41 e0       	ldi	r20, 0x01	; 1
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	04 c0       	rjmp	.+8      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	64 2f       	mov	r22, r20
     518:	73 2f       	mov	r23, r19
     51a:	82 2f       	mov	r24, r18
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	df 90       	pop	r13
     532:	bf 90       	pop	r11
     534:	af 90       	pop	r10
     536:	7f 90       	pop	r7
     538:	6f 90       	pop	r6
     53a:	5f 90       	pop	r5
     53c:	4f 90       	pop	r4
     53e:	08 95       	ret

00000540 <loopback_udps>:


int32_t loopback_udps(uint8_t sn, uint8_t* buf, uint16_t port)
{
     540:	4f 92       	push	r4
     542:	5f 92       	push	r5
     544:	6f 92       	push	r6
     546:	7f 92       	push	r7
     548:	8f 92       	push	r8
     54a:	9f 92       	push	r9
     54c:	af 92       	push	r10
     54e:	bf 92       	push	r11
     550:	df 92       	push	r13
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	00 d0       	rcall	.+0      	; 0x560 <loopback_udps+0x20>
     560:	00 d0       	rcall	.+0      	; 0x562 <loopback_udps+0x22>
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	d8 2e       	mov	r13, r24
     568:	7b 01       	movw	r14, r22
     56a:	14 2f       	mov	r17, r20
     56c:	05 2f       	mov	r16, r21
   int32_t  ret;
   uint16_t size, sentsize;
   uint8_t  destip[4];
   uint16_t destport;

   switch(getSn_SR(sn))
     56e:	68 2f       	mov	r22, r24
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	66 0f       	add	r22, r22
     574:	77 1f       	adc	r23, r23
     576:	66 0f       	add	r22, r22
     578:	77 1f       	adc	r23, r23
     57a:	6f 5f       	subi	r22, 0xFF	; 255
     57c:	7f 4f       	sbci	r23, 0xFF	; 255
     57e:	66 0f       	add	r22, r22
     580:	77 1f       	adc	r23, r23
     582:	66 0f       	add	r22, r22
     584:	77 1f       	adc	r23, r23
     586:	66 0f       	add	r22, r22
     588:	77 1f       	adc	r23, r23
     58a:	7d 5f       	subi	r23, 0xFD	; 253
     58c:	07 2e       	mov	r0, r23
     58e:	00 0c       	add	r0, r0
     590:	88 0b       	sbc	r24, r24
     592:	99 0b       	sbc	r25, r25
     594:	0e 94 ab 0c 	call	0x1956	; 0x1956 <WIZCHIP_READ>
     598:	88 23       	and	r24, r24
     59a:	09 f4       	brne	.+2      	; 0x59e <loopback_udps+0x5e>
     59c:	6a c0       	rjmp	.+212    	; 0x672 <loopback_udps+0x132>
     59e:	82 32       	cpi	r24, 0x22	; 34
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <loopback_udps+0x64>
     5a2:	90 c0       	rjmp	.+288    	; 0x6c4 <loopback_udps+0x184>
   {
      case SOCK_UDP :
         if((size = getSn_RX_RSR(sn)) > 0)
     5a4:	8d 2d       	mov	r24, r13
     5a6:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <getSn_RX_RSR>
     5aa:	00 97       	sbiw	r24, 0x00	; 0
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <loopback_udps+0x70>
     5ae:	8f c0       	rjmp	.+286    	; 0x6ce <loopback_udps+0x18e>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	28 e0       	ldi	r18, 0x08	; 8
     5b4:	92 07       	cpc	r25, r18
     5b6:	10 f0       	brcs	.+4      	; 0x5bc <loopback_udps+0x7c>
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	98 e0       	ldi	r25, 0x08	; 8
            ret = recvfrom(sn, buf, size, destip, (uint16_t*)&destport);
     5bc:	8e 01       	movw	r16, r28
     5be:	0b 5f       	subi	r16, 0xFB	; 251
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255
     5c2:	9e 01       	movw	r18, r28
     5c4:	2f 5f       	subi	r18, 0xFF	; 255
     5c6:	3f 4f       	sbci	r19, 0xFF	; 255
     5c8:	ac 01       	movw	r20, r24
     5ca:	b7 01       	movw	r22, r14
     5cc:	8d 2d       	mov	r24, r13
     5ce:	e5 d7       	rcall	.+4042   	; 0x159a <recvfrom>
     5d0:	4b 01       	movw	r8, r22
     5d2:	5c 01       	movw	r10, r24
            if(ret <= 0)
     5d4:	16 16       	cp	r1, r22
     5d6:	17 06       	cpc	r1, r23
     5d8:	18 06       	cpc	r1, r24
     5da:	19 06       	cpc	r1, r25
     5dc:	b4 f0       	brlt	.+44     	; 0x60a <loopback_udps+0xca>
            {
#ifdef _LOOPBACK_DEBUG_
               printf("%d: recvfrom error. %ld\r\n",sn,ret);
     5de:	bf 92       	push	r11
     5e0:	af 92       	push	r10
     5e2:	9f 92       	push	r9
     5e4:	6f 93       	push	r22
     5e6:	1f 92       	push	r1
     5e8:	df 92       	push	r13
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	93 e0       	ldi	r25, 0x03	; 3
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <printf>
#endif
               return ret;
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	38 2d       	mov	r19, r8
     602:	29 2d       	mov	r18, r9
     604:	8a 2d       	mov	r24, r10
     606:	9b 2d       	mov	r25, r11
     608:	6b c0       	rjmp	.+214    	; 0x6e0 <loopback_udps+0x1a0>
            }
            size = (uint16_t) ret;
            sentsize = 0;
     60a:	a1 2c       	mov	r10, r1
     60c:	b1 2c       	mov	r11, r1
            while(sentsize != size)
     60e:	29 c0       	rjmp	.+82     	; 0x662 <loopback_udps+0x122>
            {
               ret = sendto(sn, buf+sentsize, size-sentsize, destip, destport);
     610:	0d 81       	ldd	r16, Y+5	; 0x05
     612:	1e 81       	ldd	r17, Y+6	; 0x06
     614:	9e 01       	movw	r18, r28
     616:	2f 5f       	subi	r18, 0xFF	; 255
     618:	3f 4f       	sbci	r19, 0xFF	; 255
     61a:	a4 01       	movw	r20, r8
     61c:	4a 19       	sub	r20, r10
     61e:	5b 09       	sbc	r21, r11
     620:	b7 01       	movw	r22, r14
     622:	6a 0d       	add	r22, r10
     624:	7b 1d       	adc	r23, r11
     626:	8d 2d       	mov	r24, r13
     628:	8a d6       	rcall	.+3348   	; 0x133e <sendto>
     62a:	2b 01       	movw	r4, r22
     62c:	3c 01       	movw	r6, r24
               if(ret < 0)
     62e:	99 23       	and	r25, r25
     630:	b4 f4       	brge	.+44     	; 0x65e <loopback_udps+0x11e>
               {
#ifdef _LOOPBACK_DEBUG_
                  printf("%d: sendto error. %ld\r\n",sn,ret);
     632:	7f 92       	push	r7
     634:	6f 92       	push	r6
     636:	5f 92       	push	r5
     638:	6f 93       	push	r22
     63a:	1f 92       	push	r1
     63c:	df 92       	push	r13
     63e:	8b e1       	ldi	r24, 0x1B	; 27
     640:	93 e0       	ldi	r25, 0x03	; 3
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <printf>
#endif
                  return ret;
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	34 2d       	mov	r19, r4
     656:	25 2d       	mov	r18, r5
     658:	86 2d       	mov	r24, r6
     65a:	97 2d       	mov	r25, r7
     65c:	41 c0       	rjmp	.+130    	; 0x6e0 <loopback_udps+0x1a0>
               }
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
     65e:	a6 0e       	add	r10, r22
     660:	b7 1e       	adc	r11, r23
#endif
               return ret;
            }
            size = (uint16_t) ret;
            sentsize = 0;
            while(sentsize != size)
     662:	a8 14       	cp	r10, r8
     664:	b9 04       	cpc	r11, r9
     666:	a1 f6       	brne	.-88     	; 0x610 <loopback_udps+0xd0>
#endif
         break;
      default :
         break;
   }
   return 1;
     668:	31 e0       	ldi	r19, 0x01	; 1
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	37 c0       	rjmp	.+110    	; 0x6e0 <loopback_udps+0x1a0>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:UDP loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	41 2f       	mov	r20, r17
     676:	50 2f       	mov	r21, r16
     678:	62 e0       	ldi	r22, 0x02	; 2
     67a:	8d 2d       	mov	r24, r13
     67c:	c3 d2       	rcall	.+1414   	; 0xc04 <socket>
     67e:	48 2f       	mov	r20, r24
     680:	88 0f       	add	r24, r24
     682:	55 0b       	sbc	r21, r21
     684:	66 0b       	sbc	r22, r22
     686:	77 0b       	sbc	r23, r23
     688:	8d 2d       	mov	r24, r13
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	a0 e0       	ldi	r26, 0x00	; 0
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	48 17       	cp	r20, r24
     692:	59 07       	cpc	r21, r25
     694:	6a 07       	cpc	r22, r26
     696:	7b 07       	cpc	r23, r27
     698:	f9 f4       	brne	.+62     	; 0x6d8 <loopback_udps+0x198>
            return ret;
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Opened, UDP loopback, port [%d]\r\n", sn, port);
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	1f 92       	push	r1
     6a0:	df 92       	push	r13
     6a2:	83 e3       	ldi	r24, 0x33	; 51
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <printf>
#endif
         break;
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
      default :
         break;
   }
   return 1;
     6ba:	31 e0       	ldi	r19, 0x01	; 1
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
            return ret;
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Opened, UDP loopback, port [%d]\r\n", sn, port);
#endif
         break;
     6c2:	0e c0       	rjmp	.+28     	; 0x6e0 <loopback_udps+0x1a0>
      default :
         break;
   }
   return 1;
     6c4:	31 e0       	ldi	r19, 0x01	; 1
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <loopback_udps+0x1a0>
     6ce:	31 e0       	ldi	r19, 0x01	; 1
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <loopback_udps+0x1a0>
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:UDP loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
            return ret;
     6d8:	34 2f       	mov	r19, r20
     6da:	25 2f       	mov	r18, r21
     6dc:	86 2f       	mov	r24, r22
     6de:	97 2f       	mov	r25, r23
         break;
      default :
         break;
   }
   return 1;
}
     6e0:	63 2f       	mov	r22, r19
     6e2:	72 2f       	mov	r23, r18
     6e4:	26 96       	adiw	r28, 0x06	; 6
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	bf 90       	pop	r11
     700:	af 90       	pop	r10
     702:	9f 90       	pop	r9
     704:	8f 90       	pop	r8
     706:	7f 90       	pop	r7
     708:	6f 90       	pop	r6
     70a:	5f 90       	pop	r5
     70c:	4f 90       	pop	r4
     70e:	08 95       	ret

00000710 <checksum>:
 *****************************************************************************************/
void wait_10ms(unsigned int cnt)
{
	unsigned int i;
	for (i = 0; i < cnt; i++) wait_1ms(10);
}
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	db 01       	movw	r26, r22
     71a:	b6 95       	lsr	r27
     71c:	a7 95       	ror	r26
     71e:	c1 2c       	mov	r12, r1
     720:	d1 2c       	mov	r13, r1
     722:	76 01       	movw	r14, r12
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	12 c0       	rjmp	.+36     	; 0x74e <checksum+0x3e>
     72a:	fa 01       	movw	r30, r20
     72c:	ee 0f       	add	r30, r30
     72e:	ff 1f       	adc	r31, r31
     730:	e8 0f       	add	r30, r24
     732:	f9 1f       	adc	r31, r25
     734:	20 81       	ld	r18, Z
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	32 2f       	mov	r19, r18
     73a:	22 27       	eor	r18, r18
     73c:	e1 81       	ldd	r30, Z+1	; 0x01
     73e:	2e 0f       	add	r18, r30
     740:	31 1d       	adc	r19, r1
     742:	c2 0e       	add	r12, r18
     744:	d3 1e       	adc	r13, r19
     746:	e1 1c       	adc	r14, r1
     748:	f1 1c       	adc	r15, r1
     74a:	4f 5f       	subi	r20, 0xFF	; 255
     74c:	5f 4f       	sbci	r21, 0xFF	; 255
     74e:	4a 17       	cp	r20, r26
     750:	5b 07       	cpc	r21, r27
     752:	58 f3       	brcs	.-42     	; 0x72a <checksum+0x1a>
     754:	60 ff       	sbrs	r22, 0
     756:	0d c0       	rjmp	.+26     	; 0x772 <checksum+0x62>
     758:	44 0f       	add	r20, r20
     75a:	55 1f       	adc	r21, r21
     75c:	fc 01       	movw	r30, r24
     75e:	e4 0f       	add	r30, r20
     760:	f5 1f       	adc	r31, r21
     762:	80 81       	ld	r24, Z
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	98 2f       	mov	r25, r24
     768:	88 27       	eor	r24, r24
     76a:	c8 0e       	add	r12, r24
     76c:	d9 1e       	adc	r13, r25
     76e:	e1 1c       	adc	r14, r1
     770:	f1 1c       	adc	r15, r1
     772:	c7 01       	movw	r24, r14
     774:	aa 27       	eor	r26, r26
     776:	bb 27       	eor	r27, r27
     778:	8c 0d       	add	r24, r12
     77a:	9d 1d       	adc	r25, r13
     77c:	80 95       	com	r24
     77e:	90 95       	com	r25
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	08 95       	ret

0000078a <htons>:
     78a:	98 27       	eor	r25, r24
     78c:	89 27       	eor	r24, r25
     78e:	98 27       	eor	r25, r24
     790:	08 95       	ret

00000792 <ping_request>:
     792:	df 92       	push	r13
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	d8 2e       	mov	r13, r24
     7a2:	7b 01       	movw	r14, r22
     7a4:	c9 e5       	ldi	r28, 0x59	; 89
     7a6:	d4 e0       	ldi	r29, 0x04	; 4
     7a8:	88 e0       	ldi	r24, 0x08	; 8
     7aa:	88 83       	st	Y, r24
     7ac:	19 82       	std	Y+1, r1	; 0x01
     7ae:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <RandomID>
     7b2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <RandomID+0x1>
     7b6:	9c 01       	movw	r18, r24
     7b8:	2f 5f       	subi	r18, 0xFF	; 255
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <RandomID+0x1>
     7c0:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <RandomID>
     7c4:	e2 df       	rcall	.-60     	; 0x78a <htons>
     7c6:	9d 83       	std	Y+5, r25	; 0x05
     7c8:	8c 83       	std	Y+4, r24	; 0x04
     7ca:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     7ce:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     7d2:	9c 01       	movw	r18, r24
     7d4:	2f 5f       	subi	r18, 0xFF	; 255
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     7dc:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     7e0:	d4 df       	rcall	.-88     	; 0x78a <htons>
     7e2:	9f 83       	std	Y+7, r25	; 0x07
     7e4:	8e 83       	std	Y+6, r24	; 0x06
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	07 c0       	rjmp	.+14     	; 0x7fa <ping_request+0x68>
     7ec:	fc 01       	movw	r30, r24
     7ee:	e7 5a       	subi	r30, 0xA7	; 167
     7f0:	fb 4f       	sbci	r31, 0xFB	; 251
     7f2:	28 2f       	mov	r18, r24
     7f4:	27 70       	andi	r18, 0x07	; 7
     7f6:	20 87       	std	Z+8, r18	; 0x08
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	80 32       	cpi	r24, 0x20	; 32
     7fc:	91 05       	cpc	r25, r1
     7fe:	b0 f3       	brcs	.-20     	; 0x7ec <ping_request+0x5a>
     800:	c9 e5       	ldi	r28, 0x59	; 89
     802:	d4 e0       	ldi	r29, 0x04	; 4
     804:	1b 82       	std	Y+3, r1	; 0x03
     806:	1a 82       	std	Y+2, r1	; 0x02
     808:	68 e2       	ldi	r22, 0x28	; 40
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	ce 01       	movw	r24, r28
     80e:	80 df       	rcall	.-256    	; 0x710 <checksum>
     810:	bc df       	rcall	.-136    	; 0x78a <htons>
     812:	9b 83       	std	Y+3, r25	; 0x03
     814:	8a 83       	std	Y+2, r24	; 0x02
     816:	08 eb       	ldi	r16, 0xB8	; 184
     818:	1b e0       	ldi	r17, 0x0B	; 11
     81a:	97 01       	movw	r18, r14
     81c:	48 e2       	ldi	r20, 0x28	; 40
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	be 01       	movw	r22, r28
     822:	8d 2d       	mov	r24, r13
     824:	8c d5       	rcall	.+2840   	; 0x133e <sendto>
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	df 90       	pop	r13
     836:	08 95       	ret

00000838 <ping_reply>:

uint8_t ping_reply(uint8_t s, uint8_t *addr, uint16_t len){
     838:	af 92       	push	r10
     83a:	bf 92       	push	r11
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	d8 2e       	mov	r13, r24
     84c:	5b 01       	movw	r10, r22
     84e:	7a 01       	movw	r14, r20

	//uint16_t i;

	PingReply.Type = PING_REPLY; // Ping-Reply
     850:	c1 ea       	ldi	r28, 0xA1	; 161
     852:	d4 e0       	ldi	r29, 0x04	; 4
     854:	18 82       	st	Y, r1
	for(i = 0 ; i < PING_BUF_LEN; i++){
		PingRequest.Data[i] = (i) % 8;		  //'0'~'8' number into ping-request's data
	}
*/
	/* Do checksum of Ping Request */
	PingReply.CheckSum = 0;		               // value of checksum before calucating checksum of ping-request packet
     856:	1b 82       	std	Y+3, r1	; 0x03
     858:	1a 82       	std	Y+2, r1	; 0x02
	PingReply.CheckSum = htons(checksum((uint8_t*)&PingReply,len));  // Calculate checksum
     85a:	ba 01       	movw	r22, r20
     85c:	ce 01       	movw	r24, r28
     85e:	58 df       	rcall	.-336    	; 0x710 <checksum>
     860:	94 df       	rcall	.-216    	; 0x78a <htons>
     862:	9b 83       	std	Y+3, r25	; 0x03
     864:	8a 83       	std	Y+2, r24	; 0x02
	PingRequest.CheckSum = 0;		               // value of checksum before calucating checksum of ping-request packet
	PingRequest.CheckSum = htons(checksum((uint8_t*)&PingRequest,sizeof(PingRequest)));  // Calculate checksum
*/
	/* sendto ping_request to destination */
//	if(sendto(s,(uint8_t *)&PingRequest,sizeof(PingRequest),addr,3000)==0){  // Send Ping-Request to the specified peer.
	if(sendto(s,(uint8_t *)&PingReply,len,addr,3000)==0){  // Send Ping-Request to the specified peer.
     866:	08 eb       	ldi	r16, 0xB8	; 184
     868:	1b e0       	ldi	r17, 0x0B	; 11
     86a:	95 01       	movw	r18, r10
     86c:	a7 01       	movw	r20, r14
     86e:	be 01       	movw	r22, r28
     870:	8d 2d       	mov	r24, r13
     872:	65 d5       	rcall	.+2762   	; 0x133e <sendto>
				PingReply.SeqNum,
				htons(PingReply.CheckSum)) ;
#endif
	}
	return 0;
} // ping request
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	bf 90       	pop	r11
     886:	af 90       	pop	r10
     888:	08 95       	ret

0000088a <ping_read>:

void ping_read(uint8_t s, uint8_t *addr,  uint16_t rlen)
{
     88a:	4f 92       	push	r4
     88c:	5f 92       	push	r5
     88e:	6f 92       	push	r6
     890:	7f 92       	push	r7
     892:	bf 92       	push	r11
     894:	cf 92       	push	r12
     896:	df 92       	push	r13
     898:	ef 92       	push	r14
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	c2 58       	subi	r28, 0x82	; 130
     8aa:	d1 09       	sbc	r29, r1
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	b8 2e       	mov	r11, r24
     8b8:	6b 01       	movw	r12, r22
	//uint16_t tmp_checksum;
	uint16_t len;
	uint16_t i;
	uint8_t data_buf[128];
	uint16_t port = 3000;
     8ba:	88 eb       	ldi	r24, 0xB8	; 184
     8bc:	9b e0       	ldi	r25, 0x0B	; 11
     8be:	cf 57       	subi	r28, 0x7F	; 127
     8c0:	df 4f       	sbci	r29, 0xFF	; 255
     8c2:	99 83       	std	Y+1, r25	; 0x01
     8c4:	88 83       	st	Y, r24
     8c6:	c1 58       	subi	r28, 0x81	; 129
     8c8:	d0 40       	sbci	r29, 0x00	; 0
	/* receive data from a destination */
	len = recvfrom(s, (uint8_t *)data_buf,rlen,addr,&port);
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 57       	subi	r16, 0x7F	; 127
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	9b 01       	movw	r18, r22
     8d2:	be 01       	movw	r22, r28
     8d4:	6f 5f       	subi	r22, 0xFF	; 255
     8d6:	7f 4f       	sbci	r23, 0xFF	; 255
     8d8:	8b 2d       	mov	r24, r11
     8da:	5f d6       	rcall	.+3262   	; 0x159a <recvfrom>
     8dc:	2b 01       	movw	r4, r22
     8de:	3c 01       	movw	r6, r24
	//printf(">>rlen: %u, len: %u\r\n", rlen, len);
	if(data_buf[0] == PING_REPLY)
     8e0:	49 81       	ldd	r20, Y+1	; 0x01
     8e2:	41 11       	cpse	r20, r1
     8e4:	3d c0       	rjmp	.+122    	; 0x960 <ping_read+0xd6>
	{
		PingReply.Type 		 = data_buf[0];
     8e6:	e1 ea       	ldi	r30, 0xA1	; 161
     8e8:	f4 e0       	ldi	r31, 0x04	; 4
     8ea:	40 83       	st	Z, r20
		PingReply.Code 		 = data_buf[1];
     8ec:	8a 81       	ldd	r24, Y+2	; 0x02
     8ee:	81 83       	std	Z+1, r24	; 0x01
		PingReply.CheckSum   = (data_buf[3]<<8) + data_buf[2];
     8f0:	8c 81       	ldd	r24, Y+4	; 0x04
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	98 2f       	mov	r25, r24
     8f6:	88 27       	eor	r24, r24
     8f8:	2b 81       	ldd	r18, Y+3	; 0x03
     8fa:	82 0f       	add	r24, r18
     8fc:	91 1d       	adc	r25, r1
     8fe:	93 83       	std	Z+3, r25	; 0x03
     900:	82 83       	std	Z+2, r24	; 0x02
		PingReply.ID 		 = (data_buf[5]<<8) + data_buf[4];
     902:	2e 81       	ldd	r18, Y+6	; 0x06
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	32 2f       	mov	r19, r18
     908:	22 27       	eor	r18, r18
     90a:	8d 81       	ldd	r24, Y+5	; 0x05
     90c:	28 0f       	add	r18, r24
     90e:	31 1d       	adc	r19, r1
     910:	35 83       	std	Z+5, r19	; 0x05
     912:	24 83       	std	Z+4, r18	; 0x04
		PingReply.SeqNum 	 = (data_buf[7]<<8) + data_buf[6];
     914:	08 85       	ldd	r16, Y+8	; 0x08
     916:	10 e0       	ldi	r17, 0x00	; 0
     918:	10 2f       	mov	r17, r16
     91a:	00 27       	eor	r16, r16
     91c:	8f 81       	ldd	r24, Y+7	; 0x07
     91e:	08 0f       	add	r16, r24
     920:	11 1d       	adc	r17, r1
     922:	17 83       	std	Z+7, r17	; 0x07
     924:	06 83       	std	Z+6, r16	; 0x06

		for(i=0; i<len-8 ; i++)
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e c0       	rjmp	.+28     	; 0x948 <ping_read+0xbe>
		{
			PingReply.Data[i] = data_buf[8+i];
     92c:	fc 01       	movw	r30, r24
     92e:	38 96       	adiw	r30, 0x08	; 8
     930:	a1 e0       	ldi	r26, 0x01	; 1
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	ac 0f       	add	r26, r28
     936:	bd 1f       	adc	r27, r29
     938:	ea 0f       	add	r30, r26
     93a:	fb 1f       	adc	r31, r27
     93c:	50 81       	ld	r21, Z
     93e:	fc 01       	movw	r30, r24
     940:	ef 55       	subi	r30, 0x5F	; 95
     942:	fb 4f       	sbci	r31, 0xFB	; 251
     944:	50 87       	std	Z+8, r21	; 0x08
		PingReply.Code 		 = data_buf[1];
		PingReply.CheckSum   = (data_buf[3]<<8) + data_buf[2];
		PingReply.ID 		 = (data_buf[5]<<8) + data_buf[4];
		PingReply.SeqNum 	 = (data_buf[7]<<8) + data_buf[6];

		for(i=0; i<len-8 ; i++)
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	7b 01       	movw	r14, r22
     94a:	b8 e0       	ldi	r27, 0x08	; 8
     94c:	eb 1a       	sub	r14, r27
     94e:	f1 08       	sbc	r15, r1
     950:	8e 15       	cp	r24, r14
     952:	9f 05       	cpc	r25, r15
     954:	58 f3       	brcs	.-42     	; 0x92c <ping_read+0xa2>
					htons(PingReply.ID),  htons(PingReply.SeqNum),
					(int16_t) (len+6));
			printf("\r\n");
#endif
			//Fire call-buck function
			icmp_cb(s, addr, PingReply.Type, PingReply.ID, PingReply.SeqNum, len-8);
     956:	b6 01       	movw	r22, r12
     958:	8b 2d       	mov	r24, r11
     95a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <icmp_cb>
     95e:	43 c0       	rjmp	.+134    	; 0x9e6 <ping_read+0x15c>
		}
	}
	else if(data_buf[0] == PING_REQUEST)
     960:	48 30       	cpi	r20, 0x08	; 8
     962:	09 f0       	breq	.+2      	; 0x966 <ping_read+0xdc>
     964:	40 c0       	rjmp	.+128    	; 0x9e6 <ping_read+0x15c>
	{
		PingReply.Type 		 = data_buf[0];
     966:	e1 ea       	ldi	r30, 0xA1	; 161
     968:	f4 e0       	ldi	r31, 0x04	; 4
     96a:	40 83       	st	Z, r20
		PingReply.Code 		 = data_buf[1];
     96c:	8a 81       	ldd	r24, Y+2	; 0x02
     96e:	81 83       	std	Z+1, r24	; 0x01
		PingReply.CheckSum  = (data_buf[3]<<8) + data_buf[2];
     970:	8c 81       	ldd	r24, Y+4	; 0x04
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	98 2f       	mov	r25, r24
     976:	88 27       	eor	r24, r24
     978:	2b 81       	ldd	r18, Y+3	; 0x03
     97a:	82 0f       	add	r24, r18
     97c:	91 1d       	adc	r25, r1
     97e:	93 83       	std	Z+3, r25	; 0x03
     980:	82 83       	std	Z+2, r24	; 0x02
		PingReply.ID 		 = (data_buf[5]<<8) + data_buf[4];
     982:	2e 81       	ldd	r18, Y+6	; 0x06
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	32 2f       	mov	r19, r18
     988:	22 27       	eor	r18, r18
     98a:	8d 81       	ldd	r24, Y+5	; 0x05
     98c:	28 0f       	add	r18, r24
     98e:	31 1d       	adc	r19, r1
     990:	35 83       	std	Z+5, r19	; 0x05
     992:	24 83       	std	Z+4, r18	; 0x04
		PingReply.SeqNum 	 = (data_buf[7]<<8) + data_buf[6];
     994:	08 85       	ldd	r16, Y+8	; 0x08
     996:	10 e0       	ldi	r17, 0x00	; 0
     998:	10 2f       	mov	r17, r16
     99a:	00 27       	eor	r16, r16
     99c:	8f 81       	ldd	r24, Y+7	; 0x07
     99e:	08 0f       	add	r16, r24
     9a0:	11 1d       	adc	r17, r1
     9a2:	17 83       	std	Z+7, r17	; 0x07
     9a4:	06 83       	std	Z+6, r16	; 0x06

		for(i=0; i<len-8 ; i++)
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e c0       	rjmp	.+28     	; 0x9c8 <ping_read+0x13e>
		{
			PingReply.Data[i] = data_buf[8+i];
     9ac:	fc 01       	movw	r30, r24
     9ae:	38 96       	adiw	r30, 0x08	; 8
     9b0:	a1 e0       	ldi	r26, 0x01	; 1
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	ac 0f       	add	r26, r28
     9b6:	bd 1f       	adc	r27, r29
     9b8:	ea 0f       	add	r30, r26
     9ba:	fb 1f       	adc	r31, r27
     9bc:	50 81       	ld	r21, Z
     9be:	fc 01       	movw	r30, r24
     9c0:	ef 55       	subi	r30, 0x5F	; 95
     9c2:	fb 4f       	sbci	r31, 0xFB	; 251
     9c4:	50 87       	std	Z+8, r21	; 0x08
		PingReply.Code 		 = data_buf[1];
		PingReply.CheckSum  = (data_buf[3]<<8) + data_buf[2];
		PingReply.ID 		 = (data_buf[5]<<8) + data_buf[4];
		PingReply.SeqNum 	 = (data_buf[7]<<8) + data_buf[6];

		for(i=0; i<len-8 ; i++)
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	7b 01       	movw	r14, r22
     9ca:	b8 e0       	ldi	r27, 0x08	; 8
     9cc:	eb 1a       	sub	r14, r27
     9ce:	f1 08       	sbc	r15, r1
     9d0:	8e 15       	cp	r24, r14
     9d2:	9f 05       	cpc	r25, r15
     9d4:	58 f3       	brcs	.-42     	; 0x9ac <ping_read+0x122>
			printf( "++crc is ok\r\n");
		}
#endif
*/
		//Fire call-buck function
		icmp_cb(s, addr, PingReply.Type, PingReply.ID, PingReply.SeqNum, len-8);
     9d6:	b6 01       	movw	r22, r12
     9d8:	8b 2d       	mov	r24, r11
     9da:	0e 94 71 14 	call	0x28e2	; 0x28e2 <icmp_cb>
		//Send ping REPLY to PING REQUEST to addr
		ping_reply(s, addr, len);
     9de:	a2 01       	movw	r20, r4
     9e0:	b6 01       	movw	r22, r12
     9e2:	8b 2d       	mov	r24, r11
     9e4:	29 df       	rcall	.-430    	; 0x838 <ping_reply>
	{
#ifdef PING_DEBUG
		printf(" Unkonwn ICMP type msg:%u\n", data_buf[0]);
#endif
	}
}// ping_read
     9e6:	ce 57       	subi	r28, 0x7E	; 126
     9e8:	df 4f       	sbci	r29, 0xFF	; 255
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	df 90       	pop	r13
     a02:	cf 90       	pop	r12
     a04:	bf 90       	pop	r11
     a06:	7f 90       	pop	r7
     a08:	6f 90       	pop	r6
     a0a:	5f 90       	pop	r5
     a0c:	4f 90       	pop	r4
     a0e:	08 95       	ret

00000a10 <ping_srv>:

void ping_srv(uint8_t s)
{
     a10:	8f 92       	push	r8
     a12:	9f 92       	push	r9
     a14:	bf 92       	push	r11
     a16:	cf 92       	push	r12
     a18:	df 92       	push	r13
     a1a:	ef 92       	push	r14
     a1c:	ff 92       	push	r15
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	00 d0       	rcall	.+0      	; 0xa28 <ping_srv+0x18>
     a28:	1f 92       	push	r1
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	b8 2e       	mov	r11, r24
	int32_t len = 0;
	uint8_t dest_ip[4] = { 0, 0, 0, 0 };
     a30:	19 82       	std	Y+1, r1	; 0x01
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	1b 82       	std	Y+3, r1	; 0x03
     a36:	1c 82       	std	Y+4, r1	; 0x04
	switch(getSn_SR(s))
     a38:	08 2f       	mov	r16, r24
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	b8 01       	movw	r22, r16
     a3e:	66 0f       	add	r22, r22
     a40:	77 1f       	adc	r23, r23
     a42:	66 0f       	add	r22, r22
     a44:	77 1f       	adc	r23, r23
     a46:	6f 5f       	subi	r22, 0xFF	; 255
     a48:	7f 4f       	sbci	r23, 0xFF	; 255
     a4a:	4b 01       	movw	r8, r22
     a4c:	88 0c       	add	r8, r8
     a4e:	99 1c       	adc	r9, r9
     a50:	88 0c       	add	r8, r8
     a52:	99 1c       	adc	r9, r9
     a54:	88 0c       	add	r8, r8
     a56:	99 1c       	adc	r9, r9
     a58:	64 01       	movw	r12, r8
     a5a:	8d ef       	ldi	r24, 0xFD	; 253
     a5c:	d8 1a       	sub	r13, r24
     a5e:	0d 2c       	mov	r0, r13
     a60:	00 0c       	add	r0, r0
     a62:	ee 08       	sbc	r14, r14
     a64:	ff 08       	sbc	r15, r15
     a66:	c7 01       	movw	r24, r14
     a68:	b6 01       	movw	r22, r12
     a6a:	75 d7       	rcall	.+3818   	; 0x1956 <WIZCHIP_READ>
     a6c:	88 23       	and	r24, r24
     a6e:	21 f0       	breq	.+8      	; 0xa78 <ping_srv+0x68>
     a70:	82 33       	cpi	r24, 0x32	; 50
     a72:	09 f4       	brne	.+2      	; 0xa76 <ping_srv+0x66>
     a74:	3c c0       	rjmp	.+120    	; 0xaee <ping_srv+0xde>
     a76:	46 c0       	rjmp	.+140    	; 0xb04 <ping_srv+0xf4>
	{
	case SOCK_CLOSED:
		close(s);
     a78:	8b 2d       	mov	r24, r11
     a7a:	54 d0       	rcall	.+168    	; 0xb24 <close>
		// set ICMP Protocol
		IINCHIP_WRITE(Sn_PROTO(s), IPPROTO_ICMP);
     a7c:	b4 01       	movw	r22, r8
     a7e:	7c 5e       	subi	r23, 0xEC	; 236
     a80:	07 2e       	mov	r0, r23
     a82:	00 0c       	add	r0, r0
     a84:	88 0b       	sbc	r24, r24
     a86:	99 0b       	sbc	r25, r25
     a88:	41 e0       	ldi	r20, 0x01	; 1
     a8a:	cc d7       	rcall	.+3992   	; 0x1a24 <WIZCHIP_WRITE>
		// open the SOCKET with IPRAW mode,
		if(socket(s,Sn_MR_IPRAW,3000,0)!=s){
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	48 eb       	ldi	r20, 0xB8	; 184
     a90:	5b e0       	ldi	r21, 0x0B	; 11
     a92:	63 e0       	ldi	r22, 0x03	; 3
     a94:	8b 2d       	mov	r24, r11
     a96:	b6 d0       	rcall	.+364    	; 0xc04 <socket>
     a98:	08 2e       	mov	r0, r24
     a9a:	00 0c       	add	r0, r0
     a9c:	99 0b       	sbc	r25, r25
     a9e:	08 17       	cp	r16, r24
     aa0:	19 07       	cpc	r17, r25
     aa2:	69 f0       	breq	.+26     	; 0xabe <ping_srv+0xae>
			//if fail then Error
			printf("\r\n socket %d fail r\n",s);
     aa4:	1f 92       	push	r1
     aa6:	bf 92       	push	r11
     aa8:	88 e5       	ldi	r24, 0x58	; 88
     aaa:	93 e0       	ldi	r25, 0x03	; 3
     aac:	9f 93       	push	r25
     aae:	8f 93       	push	r24
     ab0:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <printf>
			return;
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
		}
		/* Check socket register */
		while(getSn_SR(s)!=SOCK_IPRAW);
     abc:	23 c0       	rjmp	.+70     	; 0xb04 <ping_srv+0xf4>
     abe:	c7 01       	movw	r24, r14
     ac0:	b6 01       	movw	r22, r12
     ac2:	49 d7       	rcall	.+3730   	; 0x1956 <WIZCHIP_READ>
     ac4:	82 33       	cpi	r24, 0x32	; 50
     ac6:	d9 f7       	brne	.-10     	; 0xabe <ping_srv+0xae>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ac8:	8f ec       	ldi	r24, 0xCF	; 207
     aca:	97 e0       	ldi	r25, 0x07	; 7
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	f1 f7       	brne	.-4      	; 0xacc <ping_srv+0xbc>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <ping_srv+0xc2>
     ad2:	00 00       	nop
		//wait_1ms(100); // wait 100ms
		_delay_us(1000); // wait 1 ms
		printf("%d:Opened, IPRAW mode (ICMP ping)\r\n",s);
     ad4:	1f 92       	push	r1
     ad6:	bf 92       	push	r11
     ad8:	8d e6       	ldi	r24, 0x6D	; 109
     ada:	93 e0       	ldi	r25, 0x03	; 3
     adc:	9f 93       	push	r25
     ade:	8f 93       	push	r24
     ae0:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <printf>
		break;
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	0b c0       	rjmp	.+22     	; 0xb04 <ping_srv+0xf4>
	case SOCK_IPRAW:

		//Check if IPRAW socket have RX data
		if ( (len = getSn_RX_RSR(s) ) > 0)
     aee:	8b 2d       	mov	r24, r11
     af0:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <getSn_RX_RSR>
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	31 f0       	breq	.+12     	; 0xb04 <ping_srv+0xf4>
		{
			//Yes, RX data is present
			ping_read(s, dest_ip, len);
     af8:	ac 01       	movw	r20, r24
     afa:	be 01       	movw	r22, r28
     afc:	6f 5f       	subi	r22, 0xFF	; 255
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	8b 2d       	mov	r24, r11
     b02:	c3 de       	rcall	.-634    	; 0x88a <ping_read>
		break;
	default:
		break;

	}
}
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	df 90       	pop	r13
     b1a:	cf 90       	pop	r12
     b1c:	bf 90       	pop	r11
     b1e:	9f 90       	pop	r9
     b20:	8f 90       	pop	r8
     b22:	08 95       	ret

00000b24 <close>:
			return SOCKERR_SOCKCLOSED;
		}
	}
   
   return SOCK_OK;
}
     b24:	bf 92       	push	r11
     b26:	cf 92       	push	r12
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	89 30       	cpi	r24, 0x09	; 9
     b38:	08 f0       	brcs	.+2      	; 0xb3c <close+0x18>
     b3a:	59 c0       	rjmp	.+178    	; 0xbee <close+0xca>
     b3c:	b8 2e       	mov	r11, r24
     b3e:	08 2f       	mov	r16, r24
     b40:	10 e0       	ldi	r17, 0x00	; 0
     b42:	e8 01       	movw	r28, r16
     b44:	cc 0f       	add	r28, r28
     b46:	dd 1f       	adc	r29, r29
     b48:	cc 0f       	add	r28, r28
     b4a:	dd 1f       	adc	r29, r29
     b4c:	21 96       	adiw	r28, 0x01	; 1
     b4e:	cc 0f       	add	r28, r28
     b50:	dd 1f       	adc	r29, r29
     b52:	cc 0f       	add	r28, r28
     b54:	dd 1f       	adc	r29, r29
     b56:	cc 0f       	add	r28, r28
     b58:	dd 1f       	adc	r29, r29
     b5a:	6e 01       	movw	r12, r28
     b5c:	d3 94       	inc	r13
     b5e:	0d 2c       	mov	r0, r13
     b60:	00 0c       	add	r0, r0
     b62:	ee 08       	sbc	r14, r14
     b64:	ff 08       	sbc	r15, r15
     b66:	40 e1       	ldi	r20, 0x10	; 16
     b68:	c7 01       	movw	r24, r14
     b6a:	b6 01       	movw	r22, r12
     b6c:	5b d7       	rcall	.+3766   	; 0x1a24 <WIZCHIP_WRITE>
     b6e:	c7 01       	movw	r24, r14
     b70:	b6 01       	movw	r22, r12
     b72:	f1 d6       	rcall	.+3554   	; 0x1956 <WIZCHIP_READ>
     b74:	81 11       	cpse	r24, r1
     b76:	fb cf       	rjmp	.-10     	; 0xb6e <close+0x4a>
     b78:	be 01       	movw	r22, r28
     b7a:	7e 5f       	subi	r23, 0xFE	; 254
     b7c:	07 2e       	mov	r0, r23
     b7e:	00 0c       	add	r0, r0
     b80:	88 0b       	sbc	r24, r24
     b82:	99 0b       	sbc	r25, r25
     b84:	4f e1       	ldi	r20, 0x1F	; 31
     b86:	4e d7       	rcall	.+3740   	; 0x1a24 <WIZCHIP_WRITE>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <close+0x6e>
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	ba 94       	dec	r11
     b94:	e2 f7       	brpl	.-8      	; 0xb8e <close+0x6a>
     b96:	80 95       	com	r24
     b98:	90 95       	com	r25
     b9a:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <sock_io_mode>
     b9e:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <sock_io_mode+0x1>
     ba2:	28 23       	and	r18, r24
     ba4:	39 23       	and	r19, r25
     ba6:	30 93 53 04 	sts	0x0453, r19	; 0x800453 <sock_io_mode+0x1>
     baa:	20 93 52 04 	sts	0x0452, r18	; 0x800452 <sock_io_mode>
     bae:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <sock_is_sending>
     bb2:	30 91 51 04 	lds	r19, 0x0451	; 0x800451 <sock_is_sending+0x1>
     bb6:	82 23       	and	r24, r18
     bb8:	93 23       	and	r25, r19
     bba:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <sock_is_sending+0x1>
     bbe:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <sock_is_sending>
     bc2:	f8 01       	movw	r30, r16
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	e0 5c       	subi	r30, 0xC0	; 192
     bca:	fb 4f       	sbci	r31, 0xFB	; 251
     bcc:	11 82       	std	Z+1, r1	; 0x01
     bce:	10 82       	st	Z, r1
     bd0:	f8 01       	movw	r30, r16
     bd2:	e8 5c       	subi	r30, 0xC8	; 200
     bd4:	fb 4f       	sbci	r31, 0xFB	; 251
     bd6:	10 82       	st	Z, r1
     bd8:	be 01       	movw	r22, r28
     bda:	7d 5f       	subi	r23, 0xFD	; 253
     bdc:	07 2e       	mov	r0, r23
     bde:	00 0c       	add	r0, r0
     be0:	88 0b       	sbc	r24, r24
     be2:	99 0b       	sbc	r25, r25
     be4:	b8 d6       	rcall	.+3440   	; 0x1956 <WIZCHIP_READ>
     be6:	81 11       	cpse	r24, r1
     be8:	f7 cf       	rjmp	.-18     	; 0xbd8 <close+0xb4>
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <close+0xcc>
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13
     bfe:	cf 90       	pop	r12
     c00:	bf 90       	pop	r11
     c02:	08 95       	ret

00000c04 <socket>:
     c04:	4f 92       	push	r4
     c06:	5f 92       	push	r5
     c08:	6f 92       	push	r6
     c0a:	7f 92       	push	r7
     c0c:	af 92       	push	r10
     c0e:	bf 92       	push	r11
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	00 d0       	rcall	.+0      	; 0xc22 <socket+0x1e>
     c22:	1f 92       	push	r1
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	f8 2e       	mov	r15, r24
     c2a:	56 2e       	mov	r5, r22
     c2c:	3a 01       	movw	r6, r20
     c2e:	e2 2e       	mov	r14, r18
     c30:	28 e0       	ldi	r18, 0x08	; 8
     c32:	28 17       	cp	r18, r24
     c34:	08 f4       	brcc	.+2      	; 0xc38 <socket+0x34>
     c36:	c5 c0       	rjmp	.+394    	; 0xdc2 <socket+0x1be>
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	68 17       	cp	r22, r24
     c3c:	39 f0       	breq	.+14     	; 0xc4c <socket+0x48>
     c3e:	68 17       	cp	r22, r24
     c40:	08 f4       	brcc	.+2      	; 0xc44 <socket+0x40>
     c42:	c1 c0       	rjmp	.+386    	; 0xdc6 <socket+0x1c2>
     c44:	24 e0       	ldi	r18, 0x04	; 4
     c46:	26 17       	cp	r18, r22
     c48:	a8 f4       	brcc	.+42     	; 0xc74 <socket+0x70>
     c4a:	bd c0       	rjmp	.+378    	; 0xdc6 <socket+0x1c2>
     c4c:	24 e0       	ldi	r18, 0x04	; 4
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	ae 01       	movw	r20, r28
     c52:	4f 5f       	subi	r20, 0xFF	; 255
     c54:	5f 4f       	sbci	r21, 0xFF	; 255
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	7f e0       	ldi	r23, 0x0F	; 15
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	54 d7       	rcall	.+3752   	; 0x1b08 <WIZCHIP_READ_BUF>
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	ab 81       	ldd	r26, Y+3	; 0x03
     c66:	bc 81       	ldd	r27, Y+4	; 0x04
     c68:	89 2b       	or	r24, r25
     c6a:	8a 2b       	or	r24, r26
     c6c:	8b 2b       	or	r24, r27
     c6e:	11 f4       	brne	.+4      	; 0xc74 <socket+0x70>
     c70:	8d ef       	ldi	r24, 0xFD	; 253
     c72:	b2 c0       	rjmp	.+356    	; 0xdd8 <socket+0x1d4>
     c74:	e2 fc       	sbrc	r14, 2
     c76:	a9 c0       	rjmp	.+338    	; 0xdca <socket+0x1c6>
     c78:	ee 20       	and	r14, r14
     c7a:	a9 f0       	breq	.+42     	; 0xca6 <socket+0xa2>
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	58 16       	cp	r5, r24
     c80:	21 f0       	breq	.+8      	; 0xc8a <socket+0x86>
     c82:	22 e0       	ldi	r18, 0x02	; 2
     c84:	52 16       	cp	r5, r18
     c86:	29 f0       	breq	.+10     	; 0xc92 <socket+0x8e>
     c88:	0e c0       	rjmp	.+28     	; 0xca6 <socket+0xa2>
     c8a:	8e 2d       	mov	r24, r14
     c8c:	81 72       	andi	r24, 0x21	; 33
     c8e:	59 f4       	brne	.+22     	; 0xca6 <socket+0xa2>
     c90:	9e c0       	rjmp	.+316    	; 0xdce <socket+0x1ca>
     c92:	e5 fe       	sbrs	r14, 5
     c94:	03 c0       	rjmp	.+6      	; 0xc9c <socket+0x98>
     c96:	ee 20       	and	r14, r14
     c98:	0c f0       	brlt	.+2      	; 0xc9c <socket+0x98>
     c9a:	9b c0       	rjmp	.+310    	; 0xdd2 <socket+0x1ce>
     c9c:	e4 fe       	sbrs	r14, 4
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <socket+0xa2>
     ca0:	ee 20       	and	r14, r14
     ca2:	0c f0       	brlt	.+2      	; 0xca6 <socket+0xa2>
     ca4:	98 c0       	rjmp	.+304    	; 0xdd6 <socket+0x1d2>
     ca6:	8f 2d       	mov	r24, r15
     ca8:	3d df       	rcall	.-390    	; 0xb24 <close>
     caa:	cf 2c       	mov	r12, r15
     cac:	d1 2c       	mov	r13, r1
     cae:	86 01       	movw	r16, r12
     cb0:	00 0f       	add	r16, r16
     cb2:	11 1f       	adc	r17, r17
     cb4:	00 0f       	add	r16, r16
     cb6:	11 1f       	adc	r17, r17
     cb8:	0f 5f       	subi	r16, 0xFF	; 255
     cba:	1f 4f       	sbci	r17, 0xFF	; 255
     cbc:	00 0f       	add	r16, r16
     cbe:	11 1f       	adc	r17, r17
     cc0:	00 0f       	add	r16, r16
     cc2:	11 1f       	adc	r17, r17
     cc4:	00 0f       	add	r16, r16
     cc6:	11 1f       	adc	r17, r17
     cc8:	4e 2d       	mov	r20, r14
     cca:	40 7f       	andi	r20, 0xF0	; 240
     ccc:	45 29       	or	r20, r5
     cce:	b8 01       	movw	r22, r16
     cd0:	01 2e       	mov	r0, r17
     cd2:	00 0c       	add	r0, r0
     cd4:	88 0b       	sbc	r24, r24
     cd6:	99 0b       	sbc	r25, r25
     cd8:	a5 d6       	rcall	.+3402   	; 0x1a24 <WIZCHIP_WRITE>
     cda:	61 14       	cp	r6, r1
     cdc:	71 04       	cpc	r7, r1
     cde:	91 f4       	brne	.+36     	; 0xd04 <socket+0x100>
     ce0:	60 90 04 02 	lds	r6, 0x0204	; 0x800204 <sock_any_port>
     ce4:	70 90 05 02 	lds	r7, 0x0205	; 0x800205 <sock_any_port+0x1>
     ce8:	c3 01       	movw	r24, r6
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sock_any_port+0x1>
     cf0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sock_any_port>
     cf4:	40 96       	adiw	r24, 0x10	; 16
     cf6:	31 f4       	brne	.+12     	; 0xd04 <socket+0x100>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 ec       	ldi	r25, 0xC0	; 192
     cfc:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sock_any_port+0x1>
     d00:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sock_any_port>
     d04:	b8 01       	movw	r22, r16
     d06:	7c 5f       	subi	r23, 0xFC	; 252
     d08:	07 2e       	mov	r0, r23
     d0a:	00 0c       	add	r0, r0
     d0c:	88 0b       	sbc	r24, r24
     d0e:	99 0b       	sbc	r25, r25
     d10:	47 2d       	mov	r20, r7
     d12:	88 d6       	rcall	.+3344   	; 0x1a24 <WIZCHIP_WRITE>
     d14:	b8 01       	movw	r22, r16
     d16:	7b 5f       	subi	r23, 0xFB	; 251
     d18:	07 2e       	mov	r0, r23
     d1a:	00 0c       	add	r0, r0
     d1c:	88 0b       	sbc	r24, r24
     d1e:	99 0b       	sbc	r25, r25
     d20:	46 2d       	mov	r20, r6
     d22:	80 d6       	rcall	.+3328   	; 0x1a24 <WIZCHIP_WRITE>
     d24:	28 01       	movw	r4, r16
     d26:	53 94       	inc	r5
     d28:	05 2c       	mov	r0, r5
     d2a:	00 0c       	add	r0, r0
     d2c:	66 08       	sbc	r6, r6
     d2e:	77 08       	sbc	r7, r7
     d30:	41 e0       	ldi	r20, 0x01	; 1
     d32:	c3 01       	movw	r24, r6
     d34:	b2 01       	movw	r22, r4
     d36:	76 d6       	rcall	.+3308   	; 0x1a24 <WIZCHIP_WRITE>
     d38:	c3 01       	movw	r24, r6
     d3a:	b2 01       	movw	r22, r4
     d3c:	0c d6       	rcall	.+3096   	; 0x1956 <WIZCHIP_READ>
     d3e:	81 11       	cpse	r24, r1
     d40:	fb cf       	rjmp	.-10     	; 0xd38 <socket+0x134>
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0f 2c       	mov	r0, r15
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <socket+0x14a>
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	0a 94       	dec	r0
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <socket+0x146>
     d52:	80 95       	com	r24
     d54:	90 95       	com	r25
     d56:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <sock_io_mode>
     d5a:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <sock_io_mode+0x1>
     d5e:	28 23       	and	r18, r24
     d60:	39 23       	and	r19, r25
     d62:	e0 fa       	bst	r14, 0
     d64:	aa 24       	eor	r10, r10
     d66:	a0 f8       	bld	r10, 0
     d68:	b1 2c       	mov	r11, r1
     d6a:	0f 2c       	mov	r0, r15
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <socket+0x16e>
     d6e:	aa 0c       	add	r10, r10
     d70:	bb 1c       	adc	r11, r11
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <socket+0x16a>
     d76:	a2 2a       	or	r10, r18
     d78:	b3 2a       	or	r11, r19
     d7a:	b0 92 53 04 	sts	0x0453, r11	; 0x800453 <sock_io_mode+0x1>
     d7e:	a0 92 52 04 	sts	0x0452, r10	; 0x800452 <sock_io_mode>
     d82:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <sock_is_sending>
     d86:	30 91 51 04 	lds	r19, 0x0451	; 0x800451 <sock_is_sending+0x1>
     d8a:	82 23       	and	r24, r18
     d8c:	93 23       	and	r25, r19
     d8e:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <sock_is_sending+0x1>
     d92:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <sock_is_sending>
     d96:	f6 01       	movw	r30, r12
     d98:	ee 0f       	add	r30, r30
     d9a:	ff 1f       	adc	r31, r31
     d9c:	e0 5c       	subi	r30, 0xC0	; 192
     d9e:	fb 4f       	sbci	r31, 0xFB	; 251
     da0:	11 82       	std	Z+1, r1	; 0x01
     da2:	10 82       	st	Z, r1
     da4:	f6 01       	movw	r30, r12
     da6:	e8 5c       	subi	r30, 0xC8	; 200
     da8:	fb 4f       	sbci	r31, 0xFB	; 251
     daa:	10 82       	st	Z, r1
     dac:	b8 01       	movw	r22, r16
     dae:	7d 5f       	subi	r23, 0xFD	; 253
     db0:	07 2e       	mov	r0, r23
     db2:	00 0c       	add	r0, r0
     db4:	88 0b       	sbc	r24, r24
     db6:	99 0b       	sbc	r25, r25
     db8:	ce d5       	rcall	.+2972   	; 0x1956 <WIZCHIP_READ>
     dba:	88 23       	and	r24, r24
     dbc:	b9 f3       	breq	.-18     	; 0xdac <socket+0x1a8>
     dbe:	8f 2d       	mov	r24, r15
     dc0:	0b c0       	rjmp	.+22     	; 0xdd8 <socket+0x1d4>
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
     dc4:	09 c0       	rjmp	.+18     	; 0xdd8 <socket+0x1d4>
     dc6:	8b ef       	ldi	r24, 0xFB	; 251
     dc8:	07 c0       	rjmp	.+14     	; 0xdd8 <socket+0x1d4>
     dca:	8a ef       	ldi	r24, 0xFA	; 250
     dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <socket+0x1d4>
     dce:	8a ef       	ldi	r24, 0xFA	; 250
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <socket+0x1d4>
     dd2:	8a ef       	ldi	r24, 0xFA	; 250
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <socket+0x1d4>
     dd6:	8a ef       	ldi	r24, 0xFA	; 250
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	df 90       	pop	r13
     dee:	cf 90       	pop	r12
     df0:	bf 90       	pop	r11
     df2:	af 90       	pop	r10
     df4:	7f 90       	pop	r7
     df6:	6f 90       	pop	r6
     df8:	5f 90       	pop	r5
     dfa:	4f 90       	pop	r4
     dfc:	08 95       	ret

00000dfe <listen>:
     dfe:	8f 92       	push	r8
     e00:	9f 92       	push	r9
     e02:	af 92       	push	r10
     e04:	bf 92       	push	r11
     e06:	cf 92       	push	r12
     e08:	df 92       	push	r13
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	cf 93       	push	r28
     e10:	89 30       	cpi	r24, 0x09	; 9
     e12:	08 f0       	brcs	.+2      	; 0xe16 <listen+0x18>
     e14:	3f c0       	rjmp	.+126    	; 0xe94 <listen+0x96>
     e16:	c8 2f       	mov	r28, r24
     e18:	c8 2e       	mov	r12, r24
     e1a:	d1 2c       	mov	r13, r1
     e1c:	cc 0c       	add	r12, r12
     e1e:	dd 1c       	adc	r13, r13
     e20:	cc 0c       	add	r12, r12
     e22:	dd 1c       	adc	r13, r13
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	c8 1a       	sub	r12, r24
     e28:	d8 0a       	sbc	r13, r24
     e2a:	cc 0c       	add	r12, r12
     e2c:	dd 1c       	adc	r13, r13
     e2e:	cc 0c       	add	r12, r12
     e30:	dd 1c       	adc	r13, r13
     e32:	cc 0c       	add	r12, r12
     e34:	dd 1c       	adc	r13, r13
     e36:	b6 01       	movw	r22, r12
     e38:	0d 2c       	mov	r0, r13
     e3a:	00 0c       	add	r0, r0
     e3c:	88 0b       	sbc	r24, r24
     e3e:	99 0b       	sbc	r25, r25
     e40:	8a d5       	rcall	.+2836   	; 0x1956 <WIZCHIP_READ>
     e42:	8f 70       	andi	r24, 0x0F	; 15
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	41 f5       	brne	.+80     	; 0xe98 <listen+0x9a>
     e48:	46 01       	movw	r8, r12
     e4a:	8d ef       	ldi	r24, 0xFD	; 253
     e4c:	98 1a       	sub	r9, r24
     e4e:	09 2c       	mov	r0, r9
     e50:	00 0c       	add	r0, r0
     e52:	aa 08       	sbc	r10, r10
     e54:	bb 08       	sbc	r11, r11
     e56:	c5 01       	movw	r24, r10
     e58:	b4 01       	movw	r22, r8
     e5a:	7d d5       	rcall	.+2810   	; 0x1956 <WIZCHIP_READ>
     e5c:	83 31       	cpi	r24, 0x13	; 19
     e5e:	f1 f4       	brne	.+60     	; 0xe9c <listen+0x9e>
     e60:	d3 94       	inc	r13
     e62:	0d 2c       	mov	r0, r13
     e64:	00 0c       	add	r0, r0
     e66:	ee 08       	sbc	r14, r14
     e68:	ff 08       	sbc	r15, r15
     e6a:	42 e0       	ldi	r20, 0x02	; 2
     e6c:	c7 01       	movw	r24, r14
     e6e:	b6 01       	movw	r22, r12
     e70:	d9 d5       	rcall	.+2994   	; 0x1a24 <WIZCHIP_WRITE>
     e72:	c7 01       	movw	r24, r14
     e74:	b6 01       	movw	r22, r12
     e76:	6f d5       	rcall	.+2782   	; 0x1956 <WIZCHIP_READ>
     e78:	81 11       	cpse	r24, r1
     e7a:	fb cf       	rjmp	.-10     	; 0xe72 <listen+0x74>
     e7c:	04 c0       	rjmp	.+8      	; 0xe86 <listen+0x88>
     e7e:	8c 2f       	mov	r24, r28
     e80:	51 de       	rcall	.-862    	; 0xb24 <close>
     e82:	8c ef       	ldi	r24, 0xFC	; 252
     e84:	0c c0       	rjmp	.+24     	; 0xe9e <listen+0xa0>
     e86:	c5 01       	movw	r24, r10
     e88:	b4 01       	movw	r22, r8
     e8a:	65 d5       	rcall	.+2762   	; 0x1956 <WIZCHIP_READ>
     e8c:	84 31       	cpi	r24, 0x14	; 20
     e8e:	b9 f7       	brne	.-18     	; 0xe7e <listen+0x80>
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	05 c0       	rjmp	.+10     	; 0xe9e <listen+0xa0>
     e94:	8f ef       	ldi	r24, 0xFF	; 255
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <listen+0xa0>
     e98:	8b ef       	ldi	r24, 0xFB	; 251
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <listen+0xa0>
     e9c:	8d ef       	ldi	r24, 0xFD	; 253
     e9e:	cf 91       	pop	r28
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	9f 90       	pop	r9
     eae:	8f 90       	pop	r8
     eb0:	08 95       	ret

00000eb2 <disconnect>:

int8_t disconnect(uint8_t sn)
{
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
   CHECK_SOCKNUM();
     ec0:	89 30       	cpi	r24, 0x09	; 9
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <disconnect+0x14>
     ec4:	5d c0       	rjmp	.+186    	; 0xf80 <disconnect+0xce>
     ec6:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     ec8:	c8 2f       	mov	r28, r24
     eca:	d0 e0       	ldi	r29, 0x00	; 0
     ecc:	cc 0f       	add	r28, r28
     ece:	dd 1f       	adc	r29, r29
     ed0:	cc 0f       	add	r28, r28
     ed2:	dd 1f       	adc	r29, r29
     ed4:	21 96       	adiw	r28, 0x01	; 1
     ed6:	cc 0f       	add	r28, r28
     ed8:	dd 1f       	adc	r29, r29
     eda:	cc 0f       	add	r28, r28
     edc:	dd 1f       	adc	r29, r29
     ede:	cc 0f       	add	r28, r28
     ee0:	dd 1f       	adc	r29, r29
     ee2:	be 01       	movw	r22, r28
     ee4:	0d 2e       	mov	r0, r29
     ee6:	00 0c       	add	r0, r0
     ee8:	88 0b       	sbc	r24, r24
     eea:	99 0b       	sbc	r25, r25
     eec:	34 d5       	rcall	.+2664   	; 0x1956 <WIZCHIP_READ>
     eee:	8f 70       	andi	r24, 0x0F	; 15
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	09 f0       	breq	.+2      	; 0xef6 <disconnect+0x44>
     ef4:	47 c0       	rjmp	.+142    	; 0xf84 <disconnect+0xd2>
	setSn_CR(sn,Sn_CR_DISCON);
     ef6:	6e 01       	movw	r12, r28
     ef8:	d3 94       	inc	r13
     efa:	0d 2c       	mov	r0, r13
     efc:	00 0c       	add	r0, r0
     efe:	ee 08       	sbc	r14, r14
     f00:	ff 08       	sbc	r15, r15
     f02:	48 e0       	ldi	r20, 0x08	; 8
     f04:	c7 01       	movw	r24, r14
     f06:	b6 01       	movw	r22, r12
     f08:	8d d5       	rcall	.+2842   	; 0x1a24 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
     f0a:	c7 01       	movw	r24, r14
     f0c:	b6 01       	movw	r22, r12
     f0e:	23 d5       	rcall	.+2630   	; 0x1956 <WIZCHIP_READ>
     f10:	81 11       	cpse	r24, r1
     f12:	fb cf       	rjmp	.-10     	; 0xf0a <disconnect+0x58>
	sock_is_sending &= ~(1<<sn);
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	01 2e       	mov	r0, r17
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <disconnect+0x6e>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <disconnect+0x6a>
     f24:	9c 01       	movw	r18, r24
     f26:	20 95       	com	r18
     f28:	30 95       	com	r19
     f2a:	40 91 50 04 	lds	r20, 0x0450	; 0x800450 <sock_is_sending>
     f2e:	50 91 51 04 	lds	r21, 0x0451	; 0x800451 <sock_is_sending+0x1>
     f32:	24 23       	and	r18, r20
     f34:	35 23       	and	r19, r21
     f36:	30 93 51 04 	sts	0x0451, r19	; 0x800451 <sock_is_sending+0x1>
     f3a:	20 93 50 04 	sts	0x0450, r18	; 0x800450 <sock_is_sending>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     f3e:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <sock_io_mode>
     f42:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <sock_io_mode+0x1>
     f46:	82 23       	and	r24, r18
     f48:	93 23       	and	r25, r19
     f4a:	89 2b       	or	r24, r25
     f4c:	71 f0       	breq	.+28     	; 0xf6a <disconnect+0xb8>
     f4e:	1c c0       	rjmp	.+56     	; 0xf88 <disconnect+0xd6>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
     f50:	be 01       	movw	r22, r28
     f52:	7e 5f       	subi	r23, 0xFE	; 254
     f54:	07 2e       	mov	r0, r23
     f56:	00 0c       	add	r0, r0
     f58:	88 0b       	sbc	r24, r24
     f5a:	99 0b       	sbc	r25, r25
     f5c:	fc d4       	rcall	.+2552   	; 0x1956 <WIZCHIP_READ>
     f5e:	83 ff       	sbrs	r24, 3
	   {
	      close(sn);
     f60:	04 c0       	rjmp	.+8      	; 0xf6a <disconnect+0xb8>
     f62:	81 2f       	mov	r24, r17
     f64:	df dd       	rcall	.-1090   	; 0xb24 <close>
	      return SOCKERR_TIMEOUT;
     f66:	83 ef       	ldi	r24, 0xF3	; 243
     f68:	10 c0       	rjmp	.+32     	; 0xf8a <disconnect+0xd8>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
	while(getSn_SR(sn) != SOCK_CLOSED)
     f6a:	be 01       	movw	r22, r28
     f6c:	7d 5f       	subi	r23, 0xFD	; 253
     f6e:	07 2e       	mov	r0, r23
     f70:	00 0c       	add	r0, r0
     f72:	88 0b       	sbc	r24, r24
     f74:	99 0b       	sbc	r25, r25
     f76:	ef d4       	rcall	.+2526   	; 0x1956 <WIZCHIP_READ>
     f78:	81 11       	cpse	r24, r1
     f7a:	ea cf       	rjmp	.-44     	; 0xf50 <disconnect+0x9e>
	   {
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <disconnect+0xd8>
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <disconnect+0xd8>
   CHECK_SOCKMODE(Sn_MR_TCP);
     f84:	8b ef       	ldi	r24, 0xFB	; 251
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <disconnect+0xd8>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     f88:	80 e0       	ldi	r24, 0x00	; 0
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
}
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	ff 90       	pop	r15
     f92:	ef 90       	pop	r14
     f94:	df 90       	pop	r13
     f96:	cf 90       	pop	r12
     f98:	08 95       	ret

00000f9a <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
     f9a:	2f 92       	push	r2
     f9c:	3f 92       	push	r3
     f9e:	4f 92       	push	r4
     fa0:	5f 92       	push	r5
     fa2:	6f 92       	push	r6
     fa4:	7f 92       	push	r7
     fa6:	8f 92       	push	r8
     fa8:	9f 92       	push	r9
     faa:	af 92       	push	r10
     fac:	bf 92       	push	r11
     fae:	cf 92       	push	r12
     fb0:	df 92       	push	r13
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <send+0x26>
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <send+0x28>
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     fc6:	89 30       	cpi	r24, 0x09	; 9
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <send+0x32>
     fca:	c7 c0       	rjmp	.+398    	; 0x115a <send+0x1c0>
     fcc:	5e 83       	std	Y+6, r21	; 0x06
     fce:	4d 83       	std	Y+5, r20	; 0x05
     fd0:	1b 01       	movw	r2, r22
     fd2:	f8 2e       	mov	r15, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     fd4:	c8 2e       	mov	r12, r24
     fd6:	d1 2c       	mov	r13, r1
     fd8:	cc 0c       	add	r12, r12
     fda:	dd 1c       	adc	r13, r13
     fdc:	cc 0c       	add	r12, r12
     fde:	dd 1c       	adc	r13, r13
     fe0:	2f ef       	ldi	r18, 0xFF	; 255
     fe2:	c2 1a       	sub	r12, r18
     fe4:	d2 0a       	sbc	r13, r18
     fe6:	cc 0c       	add	r12, r12
     fe8:	dd 1c       	adc	r13, r13
     fea:	cc 0c       	add	r12, r12
     fec:	dd 1c       	adc	r13, r13
     fee:	cc 0c       	add	r12, r12
     ff0:	dd 1c       	adc	r13, r13
     ff2:	b6 01       	movw	r22, r12
     ff4:	0d 2c       	mov	r0, r13
     ff6:	00 0c       	add	r0, r0
     ff8:	88 0b       	sbc	r24, r24
     ffa:	99 0b       	sbc	r25, r25
     ffc:	ac d4       	rcall	.+2392   	; 0x1956 <WIZCHIP_READ>
     ffe:	8f 70       	andi	r24, 0x0F	; 15
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	09 f0       	breq	.+2      	; 0x1006 <send+0x6c>
    1004:	ae c0       	rjmp	.+348    	; 0x1162 <send+0x1c8>
   CHECK_SOCKDATA();
    1006:	4d 81       	ldd	r20, Y+5	; 0x05
    1008:	5e 81       	ldd	r21, Y+6	; 0x06
    100a:	45 2b       	or	r20, r21
    100c:	09 f4       	brne	.+2      	; 0x1010 <send+0x76>
    100e:	ae c0       	rjmp	.+348    	; 0x116c <send+0x1d2>
   tmp = getSn_SR(sn);
    1010:	26 01       	movw	r4, r12
    1012:	5d ef       	ldi	r21, 0xFD	; 253
    1014:	55 1a       	sub	r5, r21
    1016:	05 2c       	mov	r0, r5
    1018:	00 0c       	add	r0, r0
    101a:	66 08       	sbc	r6, r6
    101c:	77 08       	sbc	r7, r7
    101e:	c3 01       	movw	r24, r6
    1020:	b2 01       	movw	r22, r4
    1022:	99 d4       	rcall	.+2354   	; 0x1956 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    1024:	87 31       	cpi	r24, 0x17	; 23
    1026:	19 f0       	breq	.+6      	; 0x102e <send+0x94>
    1028:	8c 31       	cpi	r24, 0x1C	; 28
    102a:	09 f0       	breq	.+2      	; 0x102e <send+0x94>
    102c:	a4 c0       	rjmp	.+328    	; 0x1176 <send+0x1dc>
   if( sock_is_sending & (1<<sn) )
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	4c 01       	movw	r8, r24
    1034:	0f 2c       	mov	r0, r15
    1036:	02 c0       	rjmp	.+4      	; 0x103c <send+0xa2>
    1038:	88 0c       	add	r8, r8
    103a:	99 1c       	adc	r9, r9
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <send+0x9e>
    1040:	54 01       	movw	r10, r8
    1042:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <sock_is_sending>
    1046:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <sock_is_sending+0x1>
    104a:	88 21       	and	r24, r8
    104c:	99 21       	and	r25, r9
    104e:	89 2b       	or	r24, r25
    1050:	61 f1       	breq	.+88     	; 0x10aa <send+0x110>
   {
      tmp = getSn_IR(sn);
    1052:	c6 01       	movw	r24, r12
    1054:	9e 5f       	subi	r25, 0xFE	; 254
    1056:	9c 01       	movw	r18, r24
    1058:	99 0f       	add	r25, r25
    105a:	44 0b       	sbc	r20, r20
    105c:	55 0b       	sbc	r21, r21
    105e:	29 83       	std	Y+1, r18	; 0x01
    1060:	3a 83       	std	Y+2, r19	; 0x02
    1062:	4b 83       	std	Y+3, r20	; 0x03
    1064:	5c 83       	std	Y+4, r21	; 0x04
    1066:	ca 01       	movw	r24, r20
    1068:	b9 01       	movw	r22, r18
    106a:	75 d4       	rcall	.+2282   	; 0x1956 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
    106c:	84 ff       	sbrs	r24, 4
    106e:	14 c0       	rjmp	.+40     	; 0x1098 <send+0xfe>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
    1070:	40 e1       	ldi	r20, 0x10	; 16
    1072:	69 81       	ldd	r22, Y+1	; 0x01
    1074:	7a 81       	ldd	r23, Y+2	; 0x02
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	d4 d4       	rcall	.+2472   	; 0x1a24 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
    107c:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <sock_is_sending>
    1080:	30 91 51 04 	lds	r19, 0x0451	; 0x800451 <sock_is_sending+0x1>
    1084:	c4 01       	movw	r24, r8
    1086:	80 95       	com	r24
    1088:	90 95       	com	r25
    108a:	82 23       	and	r24, r18
    108c:	93 23       	and	r25, r19
    108e:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <sock_is_sending+0x1>
    1092:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <sock_is_sending>
      }
      else if(tmp & Sn_IR_TIMEOUT)
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <send+0x110>
    1098:	83 ff       	sbrs	r24, 3
      {
         close(sn);
    109a:	72 c0       	rjmp	.+228    	; 0x1180 <send+0x1e6>
    109c:	8f 2d       	mov	r24, r15
    109e:	42 dd       	rcall	.-1404   	; 0xb24 <close>
         return SOCKERR_TIMEOUT;
    10a0:	63 ef       	ldi	r22, 0xF3	; 243
    10a2:	7f ef       	ldi	r23, 0xFF	; 255
    10a4:	8f ef       	ldi	r24, 0xFF	; 255
    10a6:	9f ef       	ldi	r25, 0xFF	; 255
    10a8:	72 c0       	rjmp	.+228    	; 0x118e <send+0x1f4>
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
    10aa:	b6 01       	movw	r22, r12
    10ac:	71 5e       	subi	r23, 0xE1	; 225
    10ae:	07 2e       	mov	r0, r23
    10b0:	00 0c       	add	r0, r0
    10b2:	88 0b       	sbc	r24, r24
    10b4:	99 0b       	sbc	r25, r25
    10b6:	4f d4       	rcall	.+2206   	; 0x1956 <WIZCHIP_READ>
    10b8:	08 2f       	mov	r16, r24
    10ba:	10 e0       	ldi	r17, 0x00	; 0
    10bc:	10 2f       	mov	r17, r16
    10be:	00 27       	eor	r16, r16
    10c0:	11 0f       	add	r17, r17
    10c2:	11 0f       	add	r17, r17
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
    10c4:	4d 81       	ldd	r20, Y+5	; 0x05
    10c6:	5e 81       	ldd	r21, Y+6	; 0x06
    10c8:	04 17       	cp	r16, r20
    10ca:	15 07       	cpc	r17, r21
    10cc:	08 f0       	brcs	.+2      	; 0x10d0 <send+0x136>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
    10ce:	8a 01       	movw	r16, r20
    10d0:	8f 2d       	mov	r24, r15
    10d2:	23 d6       	rcall	.+3142   	; 0x1d1a <getSn_TX_FSR>
    10d4:	9a 83       	std	Y+2, r25	; 0x02
      tmp = getSn_SR(sn);
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	c3 01       	movw	r24, r6
    10da:	b2 01       	movw	r22, r4
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
    10dc:	3c d4       	rcall	.+2168   	; 0x1956 <WIZCHIP_READ>
    10de:	87 31       	cpi	r24, 0x17	; 23
    10e0:	49 f0       	breq	.+18     	; 0x10f4 <send+0x15a>
    10e2:	8c 31       	cpi	r24, 0x1C	; 28
      {
         close(sn);
    10e4:	39 f0       	breq	.+14     	; 0x10f4 <send+0x15a>
    10e6:	8f 2d       	mov	r24, r15
    10e8:	1d dd       	rcall	.-1478   	; 0xb24 <close>
         return SOCKERR_SOCKSTATUS;
    10ea:	69 ef       	ldi	r22, 0xF9	; 249
    10ec:	7f ef       	ldi	r23, 0xFF	; 255
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	9f ef       	ldi	r25, 0xFF	; 255
    10f2:	4d c0       	rjmp	.+154    	; 0x118e <send+0x1f4>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    10f4:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <sock_io_mode>
    10f8:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <sock_io_mode+0x1>
    10fc:	8a 21       	and	r24, r10
    10fe:	9b 21       	and	r25, r11
    1100:	89 2b       	or	r24, r25
    1102:	31 f0       	breq	.+12     	; 0x1110 <send+0x176>
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	9a 81       	ldd	r25, Y+2	; 0x02
    1108:	80 17       	cp	r24, r16
    110a:	91 07       	cpc	r25, r17
    110c:	08 f4       	brcc	.+2      	; 0x1110 <send+0x176>
      if(len <= freesize) break;
    110e:	3c c0       	rjmp	.+120    	; 0x1188 <send+0x1ee>
    1110:	29 81       	ldd	r18, Y+1	; 0x01
    1112:	3a 81       	ldd	r19, Y+2	; 0x02
    1114:	20 17       	cp	r18, r16
    1116:	31 07       	cpc	r19, r17
   }
   wiz_send_data(sn, buf, len);
    1118:	d8 f2       	brcs	.-74     	; 0x10d0 <send+0x136>
    111a:	a8 01       	movw	r20, r16
    111c:	b1 01       	movw	r22, r2
    111e:	8f 2d       	mov	r24, r15

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
    1120:	ac d6       	rcall	.+3416   	; 0x1e7a <wiz_send_data>
    1122:	d3 94       	inc	r13
    1124:	0d 2c       	mov	r0, r13
    1126:	00 0c       	add	r0, r0
    1128:	ee 08       	sbc	r14, r14
    112a:	ff 08       	sbc	r15, r15
    112c:	40 e2       	ldi	r20, 0x20	; 32
    112e:	c7 01       	movw	r24, r14
    1130:	b6 01       	movw	r22, r12
   /* wait to process the command... */
   while(getSn_CR(sn));
    1132:	78 d4       	rcall	.+2288   	; 0x1a24 <WIZCHIP_WRITE>
    1134:	c7 01       	movw	r24, r14
    1136:	b6 01       	movw	r22, r12
    1138:	0e d4       	rcall	.+2076   	; 0x1956 <WIZCHIP_READ>
    113a:	81 11       	cpse	r24, r1
    113c:	fb cf       	rjmp	.-10     	; 0x1134 <send+0x19a>
   sock_is_sending |= (1 << sn);
    113e:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <sock_is_sending>
    1142:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <sock_is_sending+0x1>
    1146:	88 2a       	or	r8, r24
    1148:	99 2a       	or	r9, r25
    114a:	90 92 51 04 	sts	0x0451, r9	; 0x800451 <sock_is_sending+0x1>
    114e:	80 92 50 04 	sts	0x0450, r8	; 0x800450 <sock_is_sending>
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    1152:	b8 01       	movw	r22, r16
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	1a c0       	rjmp	.+52     	; 0x118e <send+0x1f4>
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
    115a:	6f ef       	ldi	r22, 0xFF	; 255
    115c:	7f ef       	ldi	r23, 0xFF	; 255
    115e:	cb 01       	movw	r24, r22
    1160:	16 c0       	rjmp	.+44     	; 0x118e <send+0x1f4>
   CHECK_SOCKMODE(Sn_MR_TCP);
    1162:	6b ef       	ldi	r22, 0xFB	; 251
    1164:	7f ef       	ldi	r23, 0xFF	; 255
    1166:	8f ef       	ldi	r24, 0xFF	; 255
    1168:	9f ef       	ldi	r25, 0xFF	; 255
    116a:	11 c0       	rjmp	.+34     	; 0x118e <send+0x1f4>
   CHECK_SOCKDATA();
    116c:	62 ef       	ldi	r22, 0xF2	; 242
    116e:	7f ef       	ldi	r23, 0xFF	; 255
    1170:	8f ef       	ldi	r24, 0xFF	; 255
    1172:	9f ef       	ldi	r25, 0xFF	; 255
    1174:	0c c0       	rjmp	.+24     	; 0x118e <send+0x1f4>
   tmp = getSn_SR(sn);
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    1176:	69 ef       	ldi	r22, 0xF9	; 249
    1178:	7f ef       	ldi	r23, 0xFF	; 255
    117a:	8f ef       	ldi	r24, 0xFF	; 255
    117c:	9f ef       	ldi	r25, 0xFF	; 255
    117e:	07 c0       	rjmp	.+14     	; 0x118e <send+0x1f4>
      else if(tmp & Sn_IR_TIMEOUT)
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	cb 01       	movw	r24, r22
    1186:	03 c0       	rjmp	.+6      	; 0x118e <send+0x1f4>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	cb 01       	movw	r24, r22
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
    118e:	26 96       	adiw	r28, 0x06	; 6
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	df 90       	pop	r13
    11a8:	cf 90       	pop	r12
    11aa:	bf 90       	pop	r11
    11ac:	af 90       	pop	r10
    11ae:	9f 90       	pop	r9
    11b0:	8f 90       	pop	r8
    11b2:	7f 90       	pop	r7
    11b4:	6f 90       	pop	r6
    11b6:	5f 90       	pop	r5
    11b8:	4f 90       	pop	r4
    11ba:	3f 90       	pop	r3
    11bc:	2f 90       	pop	r2
    11be:	08 95       	ret

000011c0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
    11c0:	7f 92       	push	r7
    11c2:	8f 92       	push	r8
    11c4:	9f 92       	push	r9
    11c6:	af 92       	push	r10
    11c8:	bf 92       	push	r11
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
    11da:	89 30       	cpi	r24, 0x09	; 9
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <recv+0x20>
    11de:	90 c0       	rjmp	.+288    	; 0x1300 <recv+0x140>
    11e0:	ea 01       	movw	r28, r20
    11e2:	4b 01       	movw	r8, r22
    11e4:	78 2e       	mov	r7, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
    11e6:	c8 2e       	mov	r12, r24
    11e8:	d1 2c       	mov	r13, r1
    11ea:	86 01       	movw	r16, r12
    11ec:	00 0f       	add	r16, r16
    11ee:	11 1f       	adc	r17, r17
    11f0:	00 0f       	add	r16, r16
    11f2:	11 1f       	adc	r17, r17
    11f4:	0f 5f       	subi	r16, 0xFF	; 255
    11f6:	1f 4f       	sbci	r17, 0xFF	; 255
    11f8:	00 0f       	add	r16, r16
    11fa:	11 1f       	adc	r17, r17
    11fc:	00 0f       	add	r16, r16
    11fe:	11 1f       	adc	r17, r17
    1200:	00 0f       	add	r16, r16
    1202:	11 1f       	adc	r17, r17
    1204:	b8 01       	movw	r22, r16
    1206:	01 2e       	mov	r0, r17
    1208:	00 0c       	add	r0, r0
    120a:	88 0b       	sbc	r24, r24
    120c:	99 0b       	sbc	r25, r25
    120e:	a3 d3       	rcall	.+1862   	; 0x1956 <WIZCHIP_READ>
    1210:	8f 70       	andi	r24, 0x0F	; 15
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	09 f0       	breq	.+2      	; 0x1218 <recv+0x58>
    1216:	78 c0       	rjmp	.+240    	; 0x1308 <recv+0x148>
   CHECK_SOCKDATA();
    1218:	20 97       	sbiw	r28, 0x00	; 0
    121a:	09 f4       	brne	.+2      	; 0x121e <recv+0x5e>
    121c:	7a c0       	rjmp	.+244    	; 0x1312 <recv+0x152>
   
   recvsize = getSn_RxMAX(sn);
    121e:	b8 01       	movw	r22, r16
    1220:	72 5e       	subi	r23, 0xE2	; 226
    1222:	07 2e       	mov	r0, r23
    1224:	00 0c       	add	r0, r0
    1226:	88 0b       	sbc	r24, r24
    1228:	99 0b       	sbc	r25, r25
    122a:	95 d3       	rcall	.+1834   	; 0x1956 <WIZCHIP_READ>
    122c:	a8 2e       	mov	r10, r24
    122e:	b1 2c       	mov	r11, r1
    1230:	ba 2c       	mov	r11, r10
    1232:	aa 24       	eor	r10, r10
    1234:	bb 0c       	add	r11, r11
    1236:	bb 0c       	add	r11, r11
   if(recvsize < len) len = recvsize;
    1238:	ac 16       	cp	r10, r28
    123a:	bd 06       	cpc	r11, r29
    123c:	08 f0       	brcs	.+2      	; 0x1240 <recv+0x80>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
    123e:	5e 01       	movw	r10, r28
    1240:	87 2d       	mov	r24, r7
    1242:	c3 d5       	rcall	.+2950   	; 0x1dca <getSn_RX_RSR>
    1244:	ec 01       	movw	r28, r24
         tmp = getSn_SR(sn);
    1246:	b8 01       	movw	r22, r16
    1248:	7d 5f       	subi	r23, 0xFD	; 253
    124a:	07 2e       	mov	r0, r23
    124c:	00 0c       	add	r0, r0
    124e:	88 0b       	sbc	r24, r24
    1250:	99 0b       	sbc	r25, r25
    1252:	81 d3       	rcall	.+1794   	; 0x1956 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
    1254:	87 31       	cpi	r24, 0x17	; 23
    1256:	21 f1       	breq	.+72     	; 0x12a0 <recv+0xe0>
         {
            if(tmp == SOCK_CLOSE_WAIT)
    1258:	8c 31       	cpi	r24, 0x1C	; 28
            {
               if(recvsize != 0) break;
    125a:	d9 f4       	brne	.+54     	; 0x1292 <recv+0xd2>
    125c:	20 97       	sbiw	r28, 0x00	; 0
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
    125e:	a9 f5       	brne	.+106    	; 0x12ca <recv+0x10a>
    1260:	87 2d       	mov	r24, r7
    1262:	5b d5       	rcall	.+2742   	; 0x1d1a <getSn_TX_FSR>
    1264:	7c 01       	movw	r14, r24
    1266:	b8 01       	movw	r22, r16
    1268:	71 5e       	subi	r23, 0xE1	; 225
    126a:	07 2e       	mov	r0, r23
    126c:	00 0c       	add	r0, r0
    126e:	88 0b       	sbc	r24, r24
    1270:	99 0b       	sbc	r25, r25
    1272:	71 d3       	rcall	.+1762   	; 0x1956 <WIZCHIP_READ>
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	98 2f       	mov	r25, r24
    1278:	88 27       	eor	r24, r24
    127a:	99 0f       	add	r25, r25
    127c:	99 0f       	add	r25, r25
    127e:	e8 16       	cp	r14, r24
    1280:	f9 06       	cpc	r15, r25
               {
                  close(sn);
    1282:	71 f4       	brne	.+28     	; 0x12a0 <recv+0xe0>
    1284:	87 2d       	mov	r24, r7
                  return SOCKERR_SOCKSTATUS;
    1286:	4e dc       	rcall	.-1892   	; 0xb24 <close>
    1288:	69 ef       	ldi	r22, 0xF9	; 249
    128a:	7f ef       	ldi	r23, 0xFF	; 255
    128c:	8f ef       	ldi	r24, 0xFF	; 255
    128e:	9f ef       	ldi	r25, 0xFF	; 255
               }
            }
            else
            {
               close(sn);
    1290:	48 c0       	rjmp	.+144    	; 0x1322 <recv+0x162>
    1292:	87 2d       	mov	r24, r7
    1294:	47 dc       	rcall	.-1906   	; 0xb24 <close>
               return SOCKERR_SOCKSTATUS;
    1296:	69 ef       	ldi	r22, 0xF9	; 249
    1298:	7f ef       	ldi	r23, 0xFF	; 255
    129a:	8f ef       	ldi	r24, 0xFF	; 255
    129c:	9f ef       	ldi	r25, 0xFF	; 255
    129e:	41 c0       	rjmp	.+130    	; 0x1322 <recv+0x162>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0c 2c       	mov	r0, r12
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <recv+0xec>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <recv+0xe8>
    12b0:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <sock_io_mode>
    12b4:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <sock_io_mode+0x1>
    12b8:	82 23       	and	r24, r18
    12ba:	93 23       	and	r25, r19
    12bc:	89 2b       	or	r24, r25
    12be:	11 f0       	breq	.+4      	; 0x12c4 <recv+0x104>
    12c0:	20 97       	sbiw	r28, 0x00	; 0
    12c2:	61 f1       	breq	.+88     	; 0x131c <recv+0x15c>
         if(recvsize != 0) break;
    12c4:	20 97       	sbiw	r28, 0x00	; 0
    12c6:	09 f4       	brne	.+2      	; 0x12ca <recv+0x10a>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
    12c8:	bb cf       	rjmp	.-138    	; 0x1240 <recv+0x80>
    12ca:	ca 15       	cp	r28, r10
    12cc:	db 05       	cpc	r29, r11
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <recv+0x112>
   wiz_recv_data(sn, buf, len);
    12d0:	e5 01       	movw	r28, r10
    12d2:	ae 01       	movw	r20, r28
    12d4:	b4 01       	movw	r22, r8
    12d6:	87 2d       	mov	r24, r7
    12d8:	57 d6       	rcall	.+3246   	; 0x1f88 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
    12da:	68 01       	movw	r12, r16
    12dc:	d3 94       	inc	r13
    12de:	0d 2c       	mov	r0, r13
    12e0:	00 0c       	add	r0, r0
    12e2:	ee 08       	sbc	r14, r14
    12e4:	ff 08       	sbc	r15, r15
    12e6:	40 e4       	ldi	r20, 0x40	; 64
    12e8:	c7 01       	movw	r24, r14
    12ea:	b6 01       	movw	r22, r12
   while(getSn_CR(sn));
    12ec:	9b d3       	rcall	.+1846   	; 0x1a24 <WIZCHIP_WRITE>
    12ee:	c7 01       	movw	r24, r14
    12f0:	b6 01       	movw	r22, r12
    12f2:	31 d3       	rcall	.+1634   	; 0x1956 <WIZCHIP_READ>
    12f4:	81 11       	cpse	r24, r1
    12f6:	fb cf       	rjmp	.-10     	; 0x12ee <recv+0x12e>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    12f8:	be 01       	movw	r22, r28
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	11 c0       	rjmp	.+34     	; 0x1322 <recv+0x162>
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
    1300:	6f ef       	ldi	r22, 0xFF	; 255
    1302:	7f ef       	ldi	r23, 0xFF	; 255
    1304:	cb 01       	movw	r24, r22
    1306:	0d c0       	rjmp	.+26     	; 0x1322 <recv+0x162>
   CHECK_SOCKMODE(Sn_MR_TCP);
    1308:	6b ef       	ldi	r22, 0xFB	; 251
    130a:	7f ef       	ldi	r23, 0xFF	; 255
    130c:	8f ef       	ldi	r24, 0xFF	; 255
    130e:	9f ef       	ldi	r25, 0xFF	; 255
    1310:	08 c0       	rjmp	.+16     	; 0x1322 <recv+0x162>
   CHECK_SOCKDATA();
    1312:	62 ef       	ldi	r22, 0xF2	; 242
    1314:	7f ef       	ldi	r23, 0xFF	; 255
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	9f ef       	ldi	r25, 0xFF	; 255
    131a:	03 c0       	rjmp	.+6      	; 0x1322 <recv+0x162>
            {
               close(sn);
               return SOCKERR_SOCKSTATUS;
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	cb 01       	movw	r24, r22
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	df 90       	pop	r13
    1330:	cf 90       	pop	r12
    1332:	bf 90       	pop	r11
    1334:	af 90       	pop	r10
    1336:	9f 90       	pop	r9
    1338:	8f 90       	pop	r8
    133a:	7f 90       	pop	r7
    133c:	08 95       	ret

0000133e <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
    133e:	2f 92       	push	r2
    1340:	3f 92       	push	r3
    1342:	5f 92       	push	r5
    1344:	6f 92       	push	r6
    1346:	7f 92       	push	r7
    1348:	8f 92       	push	r8
    134a:	9f 92       	push	r9
    134c:	af 92       	push	r10
    134e:	bf 92       	push	r11
    1350:	cf 92       	push	r12
    1352:	df 92       	push	r13
    1354:	ef 92       	push	r14
    1356:	ff 92       	push	r15
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
    1360:	89 30       	cpi	r24, 0x09	; 9
    1362:	08 f0       	brcs	.+2      	; 0x1366 <sendto+0x28>
    1364:	e3 c0       	rjmp	.+454    	; 0x152c <sendto+0x1ee>
    1366:	e9 01       	movw	r28, r18
    1368:	3a 01       	movw	r6, r20
    136a:	1b 01       	movw	r2, r22
    136c:	58 2e       	mov	r5, r24
   switch(getSn_MR(sn) & 0x0F)
    136e:	c8 2e       	mov	r12, r24
    1370:	d1 2c       	mov	r13, r1
    1372:	76 01       	movw	r14, r12
    1374:	ee 0c       	add	r14, r14
    1376:	ff 1c       	adc	r15, r15
    1378:	ee 0c       	add	r14, r14
    137a:	ff 1c       	adc	r15, r15
    137c:	8f ef       	ldi	r24, 0xFF	; 255
    137e:	e8 1a       	sub	r14, r24
    1380:	f8 0a       	sbc	r15, r24
    1382:	ee 0c       	add	r14, r14
    1384:	ff 1c       	adc	r15, r15
    1386:	ee 0c       	add	r14, r14
    1388:	ff 1c       	adc	r15, r15
    138a:	ee 0c       	add	r14, r14
    138c:	ff 1c       	adc	r15, r15
    138e:	47 01       	movw	r8, r14
    1390:	0f 2c       	mov	r0, r15
    1392:	00 0c       	add	r0, r0
    1394:	aa 08       	sbc	r10, r10
    1396:	bb 08       	sbc	r11, r11
    1398:	c5 01       	movw	r24, r10
    139a:	b4 01       	movw	r22, r8
    139c:	dc d2       	rcall	.+1464   	; 0x1956 <WIZCHIP_READ>
    139e:	8f 70       	andi	r24, 0x0F	; 15
    13a0:	82 50       	subi	r24, 0x02	; 2
    13a2:	83 30       	cpi	r24, 0x03	; 3
    13a4:	08 f0       	brcs	.+2      	; 0x13a8 <sendto+0x6a>
    13a6:	c6 c0       	rjmp	.+396    	; 0x1534 <sendto+0x1f6>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    13a8:	61 14       	cp	r6, r1
    13aa:	71 04       	cpc	r7, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <sendto+0x72>
    13ae:	c7 c0       	rjmp	.+398    	; 0x153e <sendto+0x200>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
    13b0:	88 81       	ld	r24, Y
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a0 e0       	ldi	r26, 0x00	; 0
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
    13b8:	ba 2f       	mov	r27, r26
    13ba:	a9 2f       	mov	r26, r25
    13bc:	98 2f       	mov	r25, r24
    13be:	88 27       	eor	r24, r24
    13c0:	29 81       	ldd	r18, Y+1	; 0x01
    13c2:	82 0f       	add	r24, r18
    13c4:	91 1d       	adc	r25, r1
    13c6:	a1 1d       	adc	r26, r1
    13c8:	b1 1d       	adc	r27, r1
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
    13ca:	ba 2f       	mov	r27, r26
    13cc:	a9 2f       	mov	r26, r25
    13ce:	98 2f       	mov	r25, r24
    13d0:	88 27       	eor	r24, r24
    13d2:	2a 81       	ldd	r18, Y+2	; 0x02
    13d4:	82 0f       	add	r24, r18
    13d6:	91 1d       	adc	r25, r1
    13d8:	a1 1d       	adc	r26, r1
    13da:	b1 1d       	adc	r27, r1
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
    13dc:	ba 2f       	mov	r27, r26
    13de:	a9 2f       	mov	r26, r25
    13e0:	98 2f       	mov	r25, r24
    13e2:	88 27       	eor	r24, r24
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	82 0f       	add	r24, r18
    13e8:	91 1d       	adc	r25, r1
    13ea:	a1 1d       	adc	r26, r1
    13ec:	b1 1d       	adc	r27, r1
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    13ee:	89 2b       	or	r24, r25
    13f0:	8a 2b       	or	r24, r26
    13f2:	8b 2b       	or	r24, r27
    13f4:	29 f4       	brne	.+10     	; 0x1400 <sendto+0xc2>
    13f6:	c5 01       	movw	r24, r10
    13f8:	b4 01       	movw	r22, r8
    13fa:	ad d2       	rcall	.+1370   	; 0x1956 <WIZCHIP_READ>
    13fc:	82 ff       	sbrs	r24, 2
    13fe:	a4 c0       	rjmp	.+328    	; 0x1548 <sendto+0x20a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    1400:	01 15       	cp	r16, r1
    1402:	11 05       	cpc	r17, r1
    1404:	29 f4       	brne	.+10     	; 0x1410 <sendto+0xd2>
    1406:	c5 01       	movw	r24, r10
    1408:	b4 01       	movw	r22, r8
    140a:	a5 d2       	rcall	.+1354   	; 0x1956 <WIZCHIP_READ>
    140c:	82 ff       	sbrs	r24, 2
    140e:	a1 c0       	rjmp	.+322    	; 0x1552 <sendto+0x214>
   tmp = getSn_SR(sn);
    1410:	47 01       	movw	r8, r14
    1412:	8d ef       	ldi	r24, 0xFD	; 253
    1414:	98 1a       	sub	r9, r24
    1416:	09 2c       	mov	r0, r9
    1418:	00 0c       	add	r0, r0
    141a:	aa 08       	sbc	r10, r10
    141c:	bb 08       	sbc	r11, r11
    141e:	c5 01       	movw	r24, r10
    1420:	b4 01       	movw	r22, r8
    1422:	99 d2       	rcall	.+1330   	; 0x1956 <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    1424:	82 34       	cpi	r24, 0x42	; 66
    1426:	29 f0       	breq	.+10     	; 0x1432 <sendto+0xf4>
    1428:	82 32       	cpi	r24, 0x22	; 34
    142a:	19 f0       	breq	.+6      	; 0x1432 <sendto+0xf4>
    142c:	82 33       	cpi	r24, 0x32	; 50
    142e:	09 f0       	breq	.+2      	; 0x1432 <sendto+0xf4>
    1430:	95 c0       	rjmp	.+298    	; 0x155c <sendto+0x21e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
    1432:	b7 01       	movw	r22, r14
    1434:	74 5f       	subi	r23, 0xF4	; 244
    1436:	07 2e       	mov	r0, r23
    1438:	00 0c       	add	r0, r0
    143a:	88 0b       	sbc	r24, r24
    143c:	99 0b       	sbc	r25, r25
    143e:	24 e0       	ldi	r18, 0x04	; 4
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	ae 01       	movw	r20, r28
    1444:	e3 d3       	rcall	.+1990   	; 0x1c0c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
    1446:	b7 01       	movw	r22, r14
    1448:	70 5f       	subi	r23, 0xF0	; 240
    144a:	07 2e       	mov	r0, r23
    144c:	00 0c       	add	r0, r0
    144e:	88 0b       	sbc	r24, r24
    1450:	99 0b       	sbc	r25, r25
    1452:	41 2f       	mov	r20, r17
    1454:	e7 d2       	rcall	.+1486   	; 0x1a24 <WIZCHIP_WRITE>
    1456:	b7 01       	movw	r22, r14
    1458:	7f 5e       	subi	r23, 0xEF	; 239
    145a:	07 2e       	mov	r0, r23
    145c:	00 0c       	add	r0, r0
    145e:	88 0b       	sbc	r24, r24
    1460:	99 0b       	sbc	r25, r25
    1462:	40 2f       	mov	r20, r16
    1464:	df d2       	rcall	.+1470   	; 0x1a24 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
    1466:	b7 01       	movw	r22, r14
    1468:	71 5e       	subi	r23, 0xE1	; 225
    146a:	07 2e       	mov	r0, r23
    146c:	00 0c       	add	r0, r0
    146e:	88 0b       	sbc	r24, r24
    1470:	99 0b       	sbc	r25, r25
    1472:	71 d2       	rcall	.+1250   	; 0x1956 <WIZCHIP_READ>
    1474:	08 2f       	mov	r16, r24
    1476:	10 e0       	ldi	r17, 0x00	; 0
    1478:	10 2f       	mov	r17, r16
    147a:	00 27       	eor	r16, r16
    147c:	11 0f       	add	r17, r17
    147e:	11 0f       	add	r17, r17
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
    1480:	06 15       	cp	r16, r6
    1482:	17 05       	cpc	r17, r7
    1484:	08 f0       	brcs	.+2      	; 0x1488 <sendto+0x14a>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
    1486:	83 01       	movw	r16, r6
    1488:	85 2d       	mov	r24, r5
    148a:	47 d4       	rcall	.+2190   	; 0x1d1a <getSn_TX_FSR>
    148c:	ec 01       	movw	r28, r24
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    148e:	c5 01       	movw	r24, r10
    1490:	b4 01       	movw	r22, r8
    1492:	61 d2       	rcall	.+1218   	; 0x1956 <WIZCHIP_READ>
    1494:	88 23       	and	r24, r24
    1496:	09 f4       	brne	.+2      	; 0x149a <sendto+0x15c>
    1498:	66 c0       	rjmp	.+204    	; 0x1566 <sendto+0x228>
    149a:	81 e0       	ldi	r24, 0x01	; 1
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0c 2c       	mov	r0, r12
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <sendto+0x168>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <sendto+0x164>
    14aa:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <sock_io_mode>
    14ae:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <sock_io_mode+0x1>
    14b2:	82 23       	and	r24, r18
    14b4:	93 23       	and	r25, r19
    14b6:	89 2b       	or	r24, r25
    14b8:	21 f0       	breq	.+8      	; 0x14c2 <sendto+0x184>
    14ba:	c0 17       	cp	r28, r16
    14bc:	d1 07       	cpc	r29, r17
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <sendto+0x184>
    14c0:	57 c0       	rjmp	.+174    	; 0x1570 <sendto+0x232>
      if(len <= freesize) break;
    14c2:	c0 17       	cp	r28, r16
    14c4:	d1 07       	cpc	r29, r17
    14c6:	00 f3       	brcs	.-64     	; 0x1488 <sendto+0x14a>
   };
	wiz_send_data(sn, buf, len);
    14c8:	a8 01       	movw	r20, r16
    14ca:	b1 01       	movw	r22, r2
    14cc:	85 2d       	mov	r24, r5
    14ce:	d5 d4       	rcall	.+2474   	; 0x1e7a <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
    14d0:	47 01       	movw	r8, r14
    14d2:	93 94       	inc	r9
    14d4:	09 2c       	mov	r0, r9
    14d6:	00 0c       	add	r0, r0
    14d8:	aa 08       	sbc	r10, r10
    14da:	bb 08       	sbc	r11, r11
    14dc:	40 e2       	ldi	r20, 0x20	; 32
    14de:	c5 01       	movw	r24, r10
    14e0:	b4 01       	movw	r22, r8
    14e2:	a0 d2       	rcall	.+1344   	; 0x1a24 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
    14e4:	c5 01       	movw	r24, r10
    14e6:	b4 01       	movw	r22, r8
    14e8:	36 d2       	rcall	.+1132   	; 0x1956 <WIZCHIP_READ>
    14ea:	81 11       	cpse	r24, r1
    14ec:	fb cf       	rjmp	.-10     	; 0x14e4 <sendto+0x1a6>
   while(1)
   {
      tmp = getSn_IR(sn);
    14ee:	47 01       	movw	r8, r14
    14f0:	8e ef       	ldi	r24, 0xFE	; 254
    14f2:	98 1a       	sub	r9, r24
    14f4:	09 2c       	mov	r0, r9
    14f6:	00 0c       	add	r0, r0
    14f8:	aa 08       	sbc	r10, r10
    14fa:	bb 08       	sbc	r11, r11
    14fc:	c5 01       	movw	r24, r10
    14fe:	b4 01       	movw	r22, r8
    1500:	2a d2       	rcall	.+1108   	; 0x1956 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
    1502:	84 ff       	sbrs	r24, 4
      {
         setSn_IR(sn, Sn_IR_SENDOK);
    1504:	08 c0       	rjmp	.+16     	; 0x1516 <sendto+0x1d8>
    1506:	40 e1       	ldi	r20, 0x10	; 16
    1508:	c5 01       	movw	r24, r10
    150a:	b4 01       	movw	r22, r8
    150c:	8b d2       	rcall	.+1302   	; 0x1a24 <WIZCHIP_WRITE>
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    150e:	b8 01       	movw	r22, r16
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	30 c0       	rjmp	.+96     	; 0x1576 <sendto+0x238>
         setSn_IR(sn, Sn_IR_SENDOK);
         break;
      }
      //M:20131104
      //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
      else if(tmp & Sn_IR_TIMEOUT)
    1516:	83 ff       	sbrs	r24, 3
    1518:	ea cf       	rjmp	.-44     	; 0x14ee <sendto+0x1b0>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
    151a:	48 e0       	ldi	r20, 0x08	; 8
    151c:	c5 01       	movw	r24, r10
    151e:	b4 01       	movw	r22, r8
    1520:	81 d2       	rcall	.+1282   	; 0x1a24 <WIZCHIP_WRITE>
    1522:	63 ef       	ldi	r22, 0xF3	; 243
         //len = (uint16_t)SOCKERR_TIMEOUT;
         //break;
         #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
            if(taddr) setSUBR((uint8_t*)&taddr);
         #endif
         return SOCKERR_TIMEOUT;
    1524:	7f ef       	ldi	r23, 0xFF	; 255
    1526:	8f ef       	ldi	r24, 0xFF	; 255
    1528:	9f ef       	ldi	r25, 0xFF	; 255
    152a:	25 c0       	rjmp	.+74     	; 0x1576 <sendto+0x238>
    152c:	6f ef       	ldi	r22, 0xFF	; 255
{
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
    152e:	7f ef       	ldi	r23, 0xFF	; 255
    1530:	cb 01       	movw	r24, r22
    1532:	21 c0       	rjmp	.+66     	; 0x1576 <sendto+0x238>
    1534:	6b ef       	ldi	r22, 0xFB	; 251
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
    1536:	7f ef       	ldi	r23, 0xFF	; 255
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	9f ef       	ldi	r25, 0xFF	; 255
    153c:	1c c0       	rjmp	.+56     	; 0x1576 <sendto+0x238>
    153e:	62 ef       	ldi	r22, 0xF2	; 242
   }
   CHECK_SOCKDATA();
    1540:	7f ef       	ldi	r23, 0xFF	; 255
    1542:	8f ef       	ldi	r24, 0xFF	; 255
    1544:	9f ef       	ldi	r25, 0xFF	; 255
    1546:	17 c0       	rjmp	.+46     	; 0x1576 <sendto+0x238>
    1548:	64 ef       	ldi	r22, 0xF4	; 244
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    154a:	7f ef       	ldi	r23, 0xFF	; 255
    154c:	8f ef       	ldi	r24, 0xFF	; 255
    154e:	9f ef       	ldi	r25, 0xFF	; 255
    1550:	12 c0       	rjmp	.+36     	; 0x1576 <sendto+0x238>
    1552:	65 ef       	ldi	r22, 0xF5	; 245
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    1554:	7f ef       	ldi	r23, 0xFF	; 255
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	9f ef       	ldi	r25, 0xFF	; 255
    155a:	0d c0       	rjmp	.+26     	; 0x1576 <sendto+0x238>
    155c:	69 ef       	ldi	r22, 0xF9	; 249
   tmp = getSn_SR(sn);
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    155e:	7f ef       	ldi	r23, 0xFF	; 255
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	9f ef       	ldi	r25, 0xFF	; 255
    1564:	08 c0       	rjmp	.+16     	; 0x1576 <sendto+0x238>
    1566:	6c ef       	ldi	r22, 0xFC	; 252
   freesize = getSn_TxMAX(sn);
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    1568:	7f ef       	ldi	r23, 0xFF	; 255
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	9f ef       	ldi	r25, 0xFF	; 255
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <sendto+0x238>
    1570:	60 e0       	ldi	r22, 0x00	; 0
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	cb 01       	movw	r24, r22
    1576:	df 91       	pop	r29
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	cf 90       	pop	r12
    1586:	bf 90       	pop	r11
    1588:	af 90       	pop	r10
    158a:	9f 90       	pop	r9
    158c:	8f 90       	pop	r8
    158e:	7f 90       	pop	r7
    1590:	6f 90       	pop	r6
    1592:	5f 90       	pop	r5
    1594:	3f 90       	pop	r3
    1596:	2f 90       	pop	r2
    1598:	08 95       	ret

0000159a <recvfrom>:
    159a:	2f 92       	push	r2



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
    159c:	3f 92       	push	r3
    159e:	4f 92       	push	r4
    15a0:	5f 92       	push	r5
    15a2:	6f 92       	push	r6
    15a4:	7f 92       	push	r7
    15a6:	8f 92       	push	r8
    15a8:	9f 92       	push	r9
    15aa:	af 92       	push	r10
    15ac:	bf 92       	push	r11
    15ae:	cf 92       	push	r12
    15b0:	df 92       	push	r13
    15b2:	ef 92       	push	r14
    15b4:	ff 92       	push	r15
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	2c 97       	sbiw	r28, 0x0c	; 12
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
    15ce:	89 30       	cpi	r24, 0x09	; 9
    15d0:	08 f0       	brcs	.+2      	; 0x15d4 <recvfrom+0x3a>
    15d2:	92 c1       	rjmp	.+804    	; 0x18f8 <recvfrom+0x35e>
    15d4:	28 01       	movw	r4, r16
    15d6:	39 01       	movw	r6, r18
    15d8:	5a 01       	movw	r10, r20
    15da:	4b 01       	movw	r8, r22
    15dc:	38 2e       	mov	r3, r24
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
    15de:	c8 2e       	mov	r12, r24
    15e0:	d1 2c       	mov	r13, r1
    15e2:	86 01       	movw	r16, r12
    15e4:	00 0f       	add	r16, r16
    15e6:	11 1f       	adc	r17, r17
    15e8:	00 0f       	add	r16, r16
    15ea:	11 1f       	adc	r17, r17
    15ec:	0f 5f       	subi	r16, 0xFF	; 255
    15ee:	1f 4f       	sbci	r17, 0xFF	; 255
    15f0:	00 0f       	add	r16, r16
    15f2:	11 1f       	adc	r17, r17
    15f4:	00 0f       	add	r16, r16
    15f6:	11 1f       	adc	r17, r17
    15f8:	00 0f       	add	r16, r16
    15fa:	11 1f       	adc	r17, r17
    15fc:	b8 01       	movw	r22, r16
    15fe:	01 2e       	mov	r0, r17
    1600:	00 0c       	add	r0, r0
    1602:	88 0b       	sbc	r24, r24
    1604:	99 0b       	sbc	r25, r25
    1606:	a7 d1       	rcall	.+846    	; 0x1956 <WIZCHIP_READ>
    1608:	28 2e       	mov	r2, r24
    160a:	8f 70       	andi	r24, 0x0F	; 15
    160c:	82 50       	subi	r24, 0x02	; 2
    160e:	83 30       	cpi	r24, 0x03	; 3
    1610:	08 f0       	brcs	.+2      	; 0x1614 <recvfrom+0x7a>
    1612:	76 c1       	rjmp	.+748    	; 0x1900 <recvfrom+0x366>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    1614:	a1 14       	cp	r10, r1
    1616:	b1 04       	cpc	r11, r1
    1618:	09 f4       	brne	.+2      	; 0x161c <recvfrom+0x82>
    161a:	77 c1       	rjmp	.+750    	; 0x190a <recvfrom+0x370>
   if(sock_remained_size[sn] == 0)
    161c:	f6 01       	movw	r30, r12
    161e:	ee 0f       	add	r30, r30
    1620:	ff 1f       	adc	r31, r31
    1622:	e0 5c       	subi	r30, 0xC0	; 192
    1624:	fb 4f       	sbci	r31, 0xFB	; 251
    1626:	80 81       	ld	r24, Z
    1628:	91 81       	ldd	r25, Z+1	; 0x01
    162a:	89 2b       	or	r24, r25
    162c:	29 f5       	brne	.+74     	; 0x1678 <recvfrom+0xde>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
    162e:	83 2d       	mov	r24, r3
    1630:	cc d3       	rcall	.+1944   	; 0x1dca <getSn_RX_RSR>
    1632:	7c 01       	movw	r14, r24
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    1634:	b8 01       	movw	r22, r16
    1636:	7d 5f       	subi	r23, 0xFD	; 253
    1638:	07 2e       	mov	r0, r23
    163a:	00 0c       	add	r0, r0
    163c:	88 0b       	sbc	r24, r24
    163e:	99 0b       	sbc	r25, r25
    1640:	8a d1       	rcall	.+788    	; 0x1956 <WIZCHIP_READ>
    1642:	88 23       	and	r24, r24
    1644:	09 f4       	brne	.+2      	; 0x1648 <recvfrom+0xae>
    1646:	66 c1       	rjmp	.+716    	; 0x1914 <recvfrom+0x37a>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0c 2c       	mov	r0, r12
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <recvfrom+0xba>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <recvfrom+0xb6>
    1658:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <sock_io_mode>
    165c:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <sock_io_mode+0x1>
    1660:	82 23       	and	r24, r18
    1662:	93 23       	and	r25, r19
    1664:	89 2b       	or	r24, r25
    1666:	21 f0       	breq	.+8      	; 0x1670 <recvfrom+0xd6>
    1668:	e1 14       	cp	r14, r1
    166a:	f1 04       	cpc	r15, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <recvfrom+0xd6>
    166e:	57 c1       	rjmp	.+686    	; 0x191e <recvfrom+0x384>
         if(pack_len != 0) break;
    1670:	e1 14       	cp	r14, r1
    1672:	f1 04       	cpc	r15, r1
    1674:	e1 f2       	breq	.-72     	; 0x162e <recvfrom+0x94>
    1676:	02 c0       	rjmp	.+4      	; 0x167c <recvfrom+0xe2>
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
    1678:	e1 2c       	mov	r14, r1
    167a:	f1 2c       	mov	r15, r1
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
    167c:	82 2d       	mov	r24, r2
    167e:	87 70       	andi	r24, 0x07	; 7
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	09 f4       	brne	.+2      	; 0x1686 <recvfrom+0xec>
    1684:	b1 c0       	rjmp	.+354    	; 0x17e8 <recvfrom+0x24e>
    1686:	84 30       	cpi	r24, 0x04	; 4
    1688:	09 f4       	brne	.+2      	; 0x168c <recvfrom+0xf2>
    168a:	61 c0       	rjmp	.+194    	; 0x174e <recvfrom+0x1b4>
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	09 f0       	breq	.+2      	; 0x1692 <recvfrom+0xf8>
    1690:	fe c0       	rjmp	.+508    	; 0x188e <recvfrom+0x2f4>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
    1692:	f6 01       	movw	r30, r12
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	e0 5c       	subi	r30, 0xC0	; 192
    169a:	fb 4f       	sbci	r31, 0xFB	; 251
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	89 2b       	or	r24, r25
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <recvfrom+0x10c>
    16a4:	44 c0       	rjmp	.+136    	; 0x172e <recvfrom+0x194>
	      {
   			wiz_recv_data(sn, head, 8);
    16a6:	48 e0       	ldi	r20, 0x08	; 8
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	be 01       	movw	r22, r28
    16ac:	6f 5f       	subi	r22, 0xFF	; 255
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255
    16b0:	83 2d       	mov	r24, r3
    16b2:	6a d4       	rcall	.+2260   	; 0x1f88 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
    16b4:	c8 01       	movw	r24, r16
    16b6:	93 95       	inc	r25
    16b8:	9c 01       	movw	r18, r24
    16ba:	99 0f       	add	r25, r25
    16bc:	44 0b       	sbc	r20, r20
    16be:	55 0b       	sbc	r21, r21
    16c0:	29 87       	std	Y+9, r18	; 0x09
    16c2:	3a 87       	std	Y+10, r19	; 0x0a
    16c4:	4b 87       	std	Y+11, r20	; 0x0b
    16c6:	5c 87       	std	Y+12, r21	; 0x0c
    16c8:	40 e4       	ldi	r20, 0x40	; 64
    16ca:	69 85       	ldd	r22, Y+9	; 0x09
    16cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    16ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    16d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    16d2:	a8 d1       	rcall	.+848    	; 0x1a24 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    16d4:	69 85       	ldd	r22, Y+9	; 0x09
    16d6:	7a 85       	ldd	r23, Y+10	; 0x0a
    16d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    16da:	9c 85       	ldd	r25, Y+12	; 0x0c
    16dc:	3c d1       	rcall	.+632    	; 0x1956 <WIZCHIP_READ>
    16de:	81 11       	cpse	r24, r1
    16e0:	f9 cf       	rjmp	.-14     	; 0x16d4 <recvfrom+0x13a>
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
    16e4:	f3 01       	movw	r30, r6
    16e6:	80 83       	st	Z, r24
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
      			addr[1] = head[1];
    16ea:	81 83       	std	Z+1, r24	; 0x01
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
      			addr[2] = head[2];
    16ee:	82 83       	std	Z+2, r24	; 0x02
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
      			addr[3] = head[3];
    16f2:	83 83       	std	Z+3, r24	; 0x03
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
      			*port = head[4];
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	98 2f       	mov	r25, r24
      			*port = (*port << 8) + head[5];
    16fa:	88 27       	eor	r24, r24
    16fc:	2e 81       	ldd	r18, Y+6	; 0x06
    16fe:	82 0f       	add	r24, r18
    1700:	91 1d       	adc	r25, r1
    1702:	f2 01       	movw	r30, r4
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	80 83       	st	Z, r24
    1708:	8f 81       	ldd	r24, Y+7	; 0x07
      			sock_remained_size[sn] = head[6];
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	f6 01       	movw	r30, r12
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	e0 5c       	subi	r30, 0xC0	; 192
    1714:	fb 4f       	sbci	r31, 0xFB	; 251
    1716:	98 2f       	mov	r25, r24
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
    1718:	88 27       	eor	r24, r24
    171a:	28 85       	ldd	r18, Y+8	; 0x08
    171c:	82 0f       	add	r24, r18
    171e:	91 1d       	adc	r25, r1
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
    1724:	80 e8       	ldi	r24, 0x80	; 128
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
    1726:	f6 01       	movw	r30, r12
    1728:	e8 5c       	subi	r30, 0xC8	; 200
    172a:	fb 4f       	sbci	r31, 0xFB	; 251
    172c:	80 83       	st	Z, r24
    172e:	f6 01       	movw	r30, r12
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
    1730:	ee 0f       	add	r30, r30
    1732:	ff 1f       	adc	r31, r31
    1734:	e0 5c       	subi	r30, 0xC0	; 192
    1736:	fb 4f       	sbci	r31, 0xFB	; 251
    1738:	e0 80       	ld	r14, Z
    173a:	f1 80       	ldd	r15, Z+1	; 0x01
    173c:	ae 14       	cp	r10, r14
    173e:	bf 04       	cpc	r11, r15
    1740:	08 f4       	brcc	.+2      	; 0x1744 <recvfrom+0x1aa>
    1742:	75 01       	movw	r14, r10
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    1744:	a7 01       	movw	r20, r14
    1746:	b4 01       	movw	r22, r8
    1748:	83 2d       	mov	r24, r3
    174a:	1e d4       	rcall	.+2108   	; 0x1f88 <wiz_recv_data>
    174c:	aa c0       	rjmp	.+340    	; 0x18a2 <recvfrom+0x308>
			break;
    174e:	f6 01       	movw	r30, r12
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
    1750:	ee 0f       	add	r30, r30
    1752:	ff 1f       	adc	r31, r31
    1754:	e0 5c       	subi	r30, 0xC0	; 192
    1756:	fb 4f       	sbci	r31, 0xFB	; 251
    1758:	80 81       	ld	r24, Z
    175a:	91 81       	ldd	r25, Z+1	; 0x01
    175c:	89 2b       	or	r24, r25
    175e:	a1 f5       	brne	.+104    	; 0x17c8 <recvfrom+0x22e>
	      {
   			wiz_recv_data(sn, head, 2);
    1760:	42 e0       	ldi	r20, 0x02	; 2
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	be 01       	movw	r22, r28
    1766:	6f 5f       	subi	r22, 0xFF	; 255
    1768:	7f 4f       	sbci	r23, 0xFF	; 255
    176a:	83 2d       	mov	r24, r3
    176c:	0d d4       	rcall	.+2074   	; 0x1f88 <wiz_recv_data>
    176e:	28 01       	movw	r4, r16
   			setSn_CR(sn,Sn_CR_RECV);
    1770:	53 94       	inc	r5
    1772:	05 2c       	mov	r0, r5
    1774:	00 0c       	add	r0, r0
    1776:	66 08       	sbc	r6, r6
    1778:	77 08       	sbc	r7, r7
    177a:	40 e4       	ldi	r20, 0x40	; 64
    177c:	c3 01       	movw	r24, r6
    177e:	b2 01       	movw	r22, r4
    1780:	51 d1       	rcall	.+674    	; 0x1a24 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    1782:	c3 01       	movw	r24, r6
    1784:	b2 01       	movw	r22, r4
    1786:	e7 d0       	rcall	.+462    	; 0x1956 <WIZCHIP_READ>
    1788:	81 11       	cpse	r24, r1
    178a:	fb cf       	rjmp	.-10     	; 0x1782 <recvfrom+0x1e8>
    178c:	89 81       	ldd	r24, Y+1	; 0x01
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	f6 01       	movw	r30, r12
    1792:	ee 0f       	add	r30, r30
    1794:	ff 1f       	adc	r31, r31
    1796:	e0 5c       	subi	r30, 0xC0	; 192
    1798:	fb 4f       	sbci	r31, 0xFB	; 251
    179a:	98 2f       	mov	r25, r24
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
    179c:	88 27       	eor	r24, r24
    179e:	2a 81       	ldd	r18, Y+2	; 0x02
    17a0:	82 0f       	add	r24, r18
    17a2:	91 1d       	adc	r25, r1
    17a4:	02 97       	sbiw	r24, 0x02	; 2
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
    17aa:	8b 3e       	cpi	r24, 0xEB	; 235
    17ac:	95 40       	sbci	r25, 0x05	; 5
    17ae:	38 f0       	brcs	.+14     	; 0x17be <recvfrom+0x224>
   			{
   			   close(sn);
    17b0:	83 2d       	mov	r24, r3
    17b2:	b8 d9       	rcall	.-3216   	; 0xb24 <close>
    17b4:	67 e1       	ldi	r22, 0x17	; 23
   			   return SOCKFATAL_PACKLEN;
    17b6:	7c ef       	ldi	r23, 0xFC	; 252
    17b8:	8f ef       	ldi	r24, 0xFF	; 255
    17ba:	9f ef       	ldi	r25, 0xFF	; 255
    17bc:	b3 c0       	rjmp	.+358    	; 0x1924 <recvfrom+0x38a>
    17be:	80 e8       	ldi	r24, 0x80	; 128
   			}
   			sock_pack_info[sn] = PACK_FIRST;
    17c0:	f6 01       	movw	r30, r12
    17c2:	e8 5c       	subi	r30, 0xC8	; 200
    17c4:	fb 4f       	sbci	r31, 0xFB	; 251
    17c6:	80 83       	st	Z, r24
    17c8:	f6 01       	movw	r30, r12
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
    17ca:	ee 0f       	add	r30, r30
    17cc:	ff 1f       	adc	r31, r31
    17ce:	e0 5c       	subi	r30, 0xC0	; 192
    17d0:	fb 4f       	sbci	r31, 0xFB	; 251
    17d2:	e0 80       	ld	r14, Z
    17d4:	f1 80       	ldd	r15, Z+1	; 0x01
    17d6:	ae 14       	cp	r10, r14
    17d8:	bf 04       	cpc	r11, r15
    17da:	08 f4       	brcc	.+2      	; 0x17de <recvfrom+0x244>
    17dc:	75 01       	movw	r14, r10
			else pack_len = sock_remained_size[sn];
			wiz_recv_data(sn,buf,pack_len);
    17de:	a7 01       	movw	r20, r14
    17e0:	b4 01       	movw	r22, r8
    17e2:	83 2d       	mov	r24, r3
    17e4:	d1 d3       	rcall	.+1954   	; 0x1f88 <wiz_recv_data>
    17e6:	5d c0       	rjmp	.+186    	; 0x18a2 <recvfrom+0x308>
		   break;
    17e8:	f6 01       	movw	r30, r12
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
    17ea:	ee 0f       	add	r30, r30
    17ec:	ff 1f       	adc	r31, r31
    17ee:	e0 5c       	subi	r30, 0xC0	; 192
    17f0:	fb 4f       	sbci	r31, 0xFB	; 251
    17f2:	80 81       	ld	r24, Z
    17f4:	91 81       	ldd	r25, Z+1	; 0x01
    17f6:	89 2b       	or	r24, r25
    17f8:	d1 f5       	brne	.+116    	; 0x186e <recvfrom+0x2d4>
		   {
   			wiz_recv_data(sn, head, 6);
    17fa:	46 e0       	ldi	r20, 0x06	; 6
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	be 01       	movw	r22, r28
    1800:	6f 5f       	subi	r22, 0xFF	; 255
    1802:	7f 4f       	sbci	r23, 0xFF	; 255
    1804:	83 2d       	mov	r24, r3
    1806:	c0 d3       	rcall	.+1920   	; 0x1f88 <wiz_recv_data>
    1808:	c8 01       	movw	r24, r16
   			setSn_CR(sn,Sn_CR_RECV);
    180a:	93 95       	inc	r25
    180c:	9c 01       	movw	r18, r24
    180e:	99 0f       	add	r25, r25
    1810:	44 0b       	sbc	r20, r20
    1812:	55 0b       	sbc	r21, r21
    1814:	29 87       	std	Y+9, r18	; 0x09
    1816:	3a 87       	std	Y+10, r19	; 0x0a
    1818:	4b 87       	std	Y+11, r20	; 0x0b
    181a:	5c 87       	std	Y+12, r21	; 0x0c
    181c:	40 e4       	ldi	r20, 0x40	; 64
    181e:	69 85       	ldd	r22, Y+9	; 0x09
    1820:	7a 85       	ldd	r23, Y+10	; 0x0a
    1822:	8b 85       	ldd	r24, Y+11	; 0x0b
    1824:	9c 85       	ldd	r25, Y+12	; 0x0c
    1826:	fe d0       	rcall	.+508    	; 0x1a24 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    1828:	69 85       	ldd	r22, Y+9	; 0x09
    182a:	7a 85       	ldd	r23, Y+10	; 0x0a
    182c:	8b 85       	ldd	r24, Y+11	; 0x0b
    182e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1830:	92 d0       	rcall	.+292    	; 0x1956 <WIZCHIP_READ>
    1832:	81 11       	cpse	r24, r1
    1834:	f9 cf       	rjmp	.-14     	; 0x1828 <recvfrom+0x28e>
    1836:	89 81       	ldd	r24, Y+1	; 0x01
   			addr[0] = head[0];
    1838:	f3 01       	movw	r30, r6
    183a:	80 83       	st	Z, r24
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
   			addr[1] = head[1];
    183e:	81 83       	std	Z+1, r24	; 0x01
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
   			addr[2] = head[2];
    1842:	82 83       	std	Z+2, r24	; 0x02
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
   			addr[3] = head[3];
    1846:	83 83       	std	Z+3, r24	; 0x03
    1848:	8d 81       	ldd	r24, Y+5	; 0x05
   			sock_remained_size[sn] = head[4];
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	f6 01       	movw	r30, r12
    184e:	ee 0f       	add	r30, r30
    1850:	ff 1f       	adc	r31, r31
    1852:	e0 5c       	subi	r30, 0xC0	; 192
    1854:	fb 4f       	sbci	r31, 0xFB	; 251
    1856:	98 2f       	mov	r25, r24
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
    1858:	88 27       	eor	r24, r24
    185a:	2e 81       	ldd	r18, Y+6	; 0x06
    185c:	82 0f       	add	r24, r18
    185e:	91 1d       	adc	r25, r1
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24
    1864:	80 e8       	ldi	r24, 0x80	; 128
   			sock_pack_info[sn] = PACK_FIRST;
    1866:	f6 01       	movw	r30, r12
    1868:	e8 5c       	subi	r30, 0xC8	; 200
    186a:	fb 4f       	sbci	r31, 0xFB	; 251
    186c:	80 83       	st	Z, r24
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
    186e:	f6 01       	movw	r30, r12
    1870:	ee 0f       	add	r30, r30
    1872:	ff 1f       	adc	r31, r31
    1874:	e0 5c       	subi	r30, 0xC0	; 192
    1876:	fb 4f       	sbci	r31, 0xFB	; 251
    1878:	e0 80       	ld	r14, Z
    187a:	f1 80       	ldd	r15, Z+1	; 0x01
    187c:	ae 14       	cp	r10, r14
    187e:	bf 04       	cpc	r11, r15
    1880:	08 f4       	brcc	.+2      	; 0x1884 <recvfrom+0x2ea>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    1882:	75 01       	movw	r14, r10
    1884:	a7 01       	movw	r20, r14
    1886:	b4 01       	movw	r22, r8
    1888:	83 2d       	mov	r24, r3
    188a:	7e d3       	rcall	.+1788   	; 0x1f88 <wiz_recv_data>
			break;
    188c:	0a c0       	rjmp	.+20     	; 0x18a2 <recvfrom+0x308>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
    188e:	b7 01       	movw	r22, r14
    1890:	83 2d       	mov	r24, r3
    1892:	01 d4       	rcall	.+2050   	; 0x2096 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
    1894:	f6 01       	movw	r30, r12
    1896:	ee 0f       	add	r30, r30
    1898:	ff 1f       	adc	r31, r31
    189a:	e0 5c       	subi	r30, 0xC0	; 192
    189c:	fb 4f       	sbci	r31, 0xFB	; 251
    189e:	f1 82       	std	Z+1, r15	; 0x01
         break;
   }
	setSn_CR(sn,Sn_CR_RECV);
    18a0:	e0 82       	st	Z, r14
    18a2:	48 01       	movw	r8, r16
    18a4:	93 94       	inc	r9
    18a6:	09 2c       	mov	r0, r9
    18a8:	00 0c       	add	r0, r0
    18aa:	aa 08       	sbc	r10, r10
    18ac:	bb 08       	sbc	r11, r11
    18ae:	40 e4       	ldi	r20, 0x40	; 64
    18b0:	c5 01       	movw	r24, r10
    18b2:	b4 01       	movw	r22, r8
    18b4:	b7 d0       	rcall	.+366    	; 0x1a24 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
    18b6:	c5 01       	movw	r24, r10
    18b8:	b4 01       	movw	r22, r8
    18ba:	4d d0       	rcall	.+154    	; 0x1956 <WIZCHIP_READ>
    18bc:	81 11       	cpse	r24, r1
    18be:	fb cf       	rjmp	.-10     	; 0x18b6 <recvfrom+0x31c>
    18c0:	f6 01       	movw	r30, r12
	sock_remained_size[sn] -= pack_len;
    18c2:	ee 0f       	add	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	e0 5c       	subi	r30, 0xC0	; 192
    18c8:	fb 4f       	sbci	r31, 0xFB	; 251
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	8e 19       	sub	r24, r14
    18d0:	9f 09       	sbc	r25, r15
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	80 83       	st	Z, r24
    18d6:	89 2b       	or	r24, r25
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
    18d8:	39 f0       	breq	.+14     	; 0x18e8 <recvfrom+0x34e>
    18da:	f6 01       	movw	r30, r12
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
    18dc:	e8 5c       	subi	r30, 0xC8	; 200
    18de:	fb 4f       	sbci	r31, 0xFB	; 251
    18e0:	80 81       	ld	r24, Z
    18e2:	81 60       	ori	r24, 0x01	; 1
    18e4:	80 83       	st	Z, r24
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <recvfrom+0x356>
    18e8:	f6 01       	movw	r30, r12
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
    18ea:	e8 5c       	subi	r30, 0xC8	; 200
    18ec:	fb 4f       	sbci	r31, 0xFB	; 251
    18ee:	10 82       	st	Z, r1
    18f0:	b7 01       	movw	r22, r14
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	16 c0       	rjmp	.+44     	; 0x1924 <recvfrom+0x38a>
    18f8:	6f ef       	ldi	r22, 0xFF	; 255
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
    18fa:	7f ef       	ldi	r23, 0xFF	; 255
    18fc:	cb 01       	movw	r24, r22
    18fe:	12 c0       	rjmp	.+36     	; 0x1924 <recvfrom+0x38a>
    1900:	6b ef       	ldi	r22, 0xFB	; 251
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
    1902:	7f ef       	ldi	r23, 0xFF	; 255
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	9f ef       	ldi	r25, 0xFF	; 255
    1908:	0d c0       	rjmp	.+26     	; 0x1924 <recvfrom+0x38a>
    190a:	62 ef       	ldi	r22, 0xF2	; 242
   }
   CHECK_SOCKDATA();
    190c:	7f ef       	ldi	r23, 0xFF	; 255
    190e:	8f ef       	ldi	r24, 0xFF	; 255
    1910:	9f ef       	ldi	r25, 0xFF	; 255
    1912:	08 c0       	rjmp	.+16     	; 0x1924 <recvfrom+0x38a>
    1914:	6c ef       	ldi	r22, 0xFC	; 252
   if(sock_remained_size[sn] == 0)
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    1916:	7f ef       	ldi	r23, 0xFF	; 255
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	9f ef       	ldi	r25, 0xFF	; 255
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <recvfrom+0x38a>
    191e:	60 e0       	ldi	r22, 0x00	; 0
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	cb 01       	movw	r24, r22
    1924:	2c 96       	adiw	r28, 0x0c	; 12
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
}
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	ff 90       	pop	r15
    193a:	ef 90       	pop	r14
    193c:	df 90       	pop	r13
    193e:	cf 90       	pop	r12
    1940:	bf 90       	pop	r11
    1942:	af 90       	pop	r10
    1944:	9f 90       	pop	r9
    1946:	8f 90       	pop	r8
    1948:	7f 90       	pop	r7
    194a:	6f 90       	pop	r6
    194c:	5f 90       	pop	r5
    194e:	4f 90       	pop	r4
    1950:	3f 90       	pop	r3
    1952:	2f 90       	pop	r2
    1954:	08 95       	ret

00001956 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
    1956:	df 92       	push	r13
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	00 d0       	rcall	.+0      	; 0x1966 <WIZCHIP_READ+0x10>
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	f6 2e       	mov	r15, r22
    196c:	e7 2e       	mov	r14, r23
    196e:	d8 2e       	mov	r13, r24
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
    1970:	06 e0       	ldi	r16, 0x06	; 6
    1972:	12 e0       	ldi	r17, 0x02	; 2
    1974:	d8 01       	movw	r26, r16
    1976:	18 96       	adiw	r26, 0x08	; 8
    1978:	ed 91       	ld	r30, X+
    197a:	fc 91       	ld	r31, X
    197c:	19 97       	sbiw	r26, 0x09	; 9
    197e:	19 95       	eicall
   WIZCHIP.CS._select();
    1980:	d8 01       	movw	r26, r16
    1982:	1c 96       	adiw	r26, 0x0c	; 12
    1984:	ed 91       	ld	r30, X+
    1986:	fc 91       	ld	r31, X
    1988:	1d 97       	sbiw	r26, 0x0d	; 13
    198a:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    198c:	f8 01       	movw	r30, r16
    198e:	84 89       	ldd	r24, Z+20	; 0x14
    1990:	95 89       	ldd	r25, Z+21	; 0x15
    1992:	89 2b       	or	r24, r25
    1994:	31 f0       	breq	.+12     	; 0x19a2 <WIZCHIP_READ+0x4c>
    1996:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    199a:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    199e:	30 97       	sbiw	r30, 0x00	; 0
    19a0:	c1 f4       	brne	.+48     	; 0x19d2 <WIZCHIP_READ+0x7c>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    19a2:	06 e0       	ldi	r16, 0x06	; 6
    19a4:	12 e0       	ldi	r17, 0x02	; 2
    19a6:	d8 01       	movw	r26, r16
    19a8:	52 96       	adiw	r26, 0x12	; 18
    19aa:	ed 91       	ld	r30, X+
    19ac:	fc 91       	ld	r31, X
    19ae:	53 97       	sbiw	r26, 0x13	; 19
    19b0:	8d 2d       	mov	r24, r13
    19b2:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    19b4:	d8 01       	movw	r26, r16
    19b6:	52 96       	adiw	r26, 0x12	; 18
    19b8:	ed 91       	ld	r30, X+
    19ba:	fc 91       	ld	r31, X
    19bc:	53 97       	sbiw	r26, 0x13	; 19
    19be:	8e 2d       	mov	r24, r14
    19c0:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    19c2:	d8 01       	movw	r26, r16
    19c4:	52 96       	adiw	r26, 0x12	; 18
    19c6:	ed 91       	ld	r30, X+
    19c8:	fc 91       	ld	r31, X
    19ca:	53 97       	sbiw	r26, 0x13	; 19
    19cc:	8f 2d       	mov	r24, r15
    19ce:	19 95       	eicall
    19d0:	08 c0       	rjmp	.+16     	; 0x19e2 <WIZCHIP_READ+0x8c>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    19d2:	d9 82       	std	Y+1, r13	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    19d4:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    19d6:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    19d8:	63 e0       	ldi	r22, 0x03	; 3
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	ce 01       	movw	r24, r28
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	19 95       	eicall
   }
   ret = WIZCHIP.IF.SPI._read_byte();
    19e2:	06 e0       	ldi	r16, 0x06	; 6
    19e4:	12 e0       	ldi	r17, 0x02	; 2
    19e6:	d8 01       	movw	r26, r16
    19e8:	50 96       	adiw	r26, 0x10	; 16
    19ea:	ed 91       	ld	r30, X+
    19ec:	fc 91       	ld	r31, X
    19ee:	51 97       	sbiw	r26, 0x11	; 17
    19f0:	19 95       	eicall
    19f2:	f8 2e       	mov	r15, r24

   WIZCHIP.CS._deselect();
    19f4:	d8 01       	movw	r26, r16
    19f6:	1e 96       	adiw	r26, 0x0e	; 14
    19f8:	ed 91       	ld	r30, X+
    19fa:	fc 91       	ld	r31, X
    19fc:	1f 97       	sbiw	r26, 0x0f	; 15
    19fe:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    1a00:	d8 01       	movw	r26, r16
    1a02:	1a 96       	adiw	r26, 0x0a	; 10
    1a04:	ed 91       	ld	r30, X+
    1a06:	fc 91       	ld	r31, X
    1a08:	1b 97       	sbiw	r26, 0x0b	; 11
    1a0a:	19 95       	eicall
   return ret;
}
    1a0c:	8f 2d       	mov	r24, r15
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	df 90       	pop	r13
    1a22:	08 95       	ret

00001a24 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
    1a24:	4f 92       	push	r4
    1a26:	5f 92       	push	r5
    1a28:	6f 92       	push	r6
    1a2a:	7f 92       	push	r7
    1a2c:	bf 92       	push	r11
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <WIZCHIP_WRITE+0x1c>
    1a40:	1f 92       	push	r1
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	6b 01       	movw	r12, r22
    1a48:	7c 01       	movw	r14, r24
    1a4a:	b4 2e       	mov	r11, r20
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
    1a4c:	06 e0       	ldi	r16, 0x06	; 6
    1a4e:	12 e0       	ldi	r17, 0x02	; 2
    1a50:	d8 01       	movw	r26, r16
    1a52:	18 96       	adiw	r26, 0x08	; 8
    1a54:	ed 91       	ld	r30, X+
    1a56:	fc 91       	ld	r31, X
    1a58:	19 97       	sbiw	r26, 0x09	; 9
    1a5a:	19 95       	eicall
   WIZCHIP.CS._select();
    1a5c:	d8 01       	movw	r26, r16
    1a5e:	1c 96       	adiw	r26, 0x0c	; 12
    1a60:	ed 91       	ld	r30, X+
    1a62:	fc 91       	ld	r31, X
    1a64:	1d 97       	sbiw	r26, 0x0d	; 13
    1a66:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    1a68:	26 01       	movw	r4, r12
    1a6a:	37 01       	movw	r6, r14
    1a6c:	68 94       	set
    1a6e:	42 f8       	bld	r4, 2

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    1a70:	d8 01       	movw	r26, r16
    1a72:	56 96       	adiw	r26, 0x16	; 22
    1a74:	ed 91       	ld	r30, X+
    1a76:	fc 91       	ld	r31, X
    1a78:	57 97       	sbiw	r26, 0x17	; 23
    1a7a:	30 97       	sbiw	r30, 0x00	; 0
    1a7c:	e1 f4       	brne	.+56     	; 0x1ab6 <WIZCHIP_WRITE+0x92>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1a7e:	52 96       	adiw	r26, 0x12	; 18
    1a80:	ed 91       	ld	r30, X+
    1a82:	fc 91       	ld	r31, X
    1a84:	53 97       	sbiw	r26, 0x13	; 19
    1a86:	8e 2d       	mov	r24, r14
    1a88:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1a8a:	d8 01       	movw	r26, r16
    1a8c:	52 96       	adiw	r26, 0x12	; 18
    1a8e:	ed 91       	ld	r30, X+
    1a90:	fc 91       	ld	r31, X
    1a92:	53 97       	sbiw	r26, 0x13	; 19
    1a94:	8d 2d       	mov	r24, r13
    1a96:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1a98:	d8 01       	movw	r26, r16
    1a9a:	52 96       	adiw	r26, 0x12	; 18
    1a9c:	ed 91       	ld	r30, X+
    1a9e:	fc 91       	ld	r31, X
    1aa0:	53 97       	sbiw	r26, 0x13	; 19
    1aa2:	84 2d       	mov	r24, r4
    1aa4:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte(wb);
    1aa6:	d8 01       	movw	r26, r16
    1aa8:	52 96       	adiw	r26, 0x12	; 18
    1aaa:	ed 91       	ld	r30, X+
    1aac:	fc 91       	ld	r31, X
    1aae:	53 97       	sbiw	r26, 0x13	; 19
    1ab0:	8b 2d       	mov	r24, r11
    1ab2:	19 95       	eicall
    1ab4:	09 c0       	rjmp	.+18     	; 0x1ac8 <WIZCHIP_WRITE+0xa4>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    1ab6:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    1ab8:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    1aba:	4b 82       	std	Y+3, r4	; 0x03
		spi_data[3] = wb;
    1abc:	bc 82       	std	Y+4, r11	; 0x04
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
    1abe:	64 e0       	ldi	r22, 0x04	; 4
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    1ac8:	06 e0       	ldi	r16, 0x06	; 6
    1aca:	12 e0       	ldi	r17, 0x02	; 2
    1acc:	d8 01       	movw	r26, r16
    1ace:	1e 96       	adiw	r26, 0x0e	; 14
    1ad0:	ed 91       	ld	r30, X+
    1ad2:	fc 91       	ld	r31, X
    1ad4:	1f 97       	sbiw	r26, 0x0f	; 15
    1ad6:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    1ad8:	d8 01       	movw	r26, r16
    1ada:	1a 96       	adiw	r26, 0x0a	; 10
    1adc:	ed 91       	ld	r30, X+
    1ade:	fc 91       	ld	r31, X
    1ae0:	1b 97       	sbiw	r26, 0x0b	; 11
    1ae2:	19 95       	eicall
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	cf 90       	pop	r12
    1afc:	bf 90       	pop	r11
    1afe:	7f 90       	pop	r7
    1b00:	6f 90       	pop	r6
    1b02:	5f 90       	pop	r5
    1b04:	4f 90       	pop	r4
    1b06:	08 95       	ret

00001b08 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    1b08:	9f 92       	push	r9
    1b0a:	af 92       	push	r10
    1b0c:	bf 92       	push	r11
    1b0e:	cf 92       	push	r12
    1b10:	df 92       	push	r13
    1b12:	ef 92       	push	r14
    1b14:	ff 92       	push	r15
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <WIZCHIP_READ_BUF+0x18>
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	f6 2e       	mov	r15, r22
    1b26:	e7 2e       	mov	r14, r23
    1b28:	98 2e       	mov	r9, r24
    1b2a:	5a 01       	movw	r10, r20
    1b2c:	69 01       	movw	r12, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    1b2e:	06 e0       	ldi	r16, 0x06	; 6
    1b30:	12 e0       	ldi	r17, 0x02	; 2
    1b32:	d8 01       	movw	r26, r16
    1b34:	18 96       	adiw	r26, 0x08	; 8
    1b36:	ed 91       	ld	r30, X+
    1b38:	fc 91       	ld	r31, X
    1b3a:	19 97       	sbiw	r26, 0x09	; 9
    1b3c:	19 95       	eicall
   WIZCHIP.CS._select();
    1b3e:	d8 01       	movw	r26, r16
    1b40:	1c 96       	adiw	r26, 0x0c	; 12
    1b42:	ed 91       	ld	r30, X+
    1b44:	fc 91       	ld	r31, X
    1b46:	1d 97       	sbiw	r26, 0x0d	; 13
    1b48:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	84 89       	ldd	r24, Z+20	; 0x14
    1b4e:	95 89       	ldd	r25, Z+21	; 0x15
    1b50:	89 2b       	or	r24, r25
    1b52:	31 f0       	breq	.+12     	; 0x1b60 <WIZCHIP_READ_BUF+0x58>
    1b54:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    1b58:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    1b5c:	30 97       	sbiw	r30, 0x00	; 0
    1b5e:	51 f5       	brne	.+84     	; 0x1bb4 <WIZCHIP_READ_BUF+0xac>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1b60:	06 e0       	ldi	r16, 0x06	; 6
    1b62:	12 e0       	ldi	r17, 0x02	; 2
    1b64:	d8 01       	movw	r26, r16
    1b66:	52 96       	adiw	r26, 0x12	; 18
    1b68:	ed 91       	ld	r30, X+
    1b6a:	fc 91       	ld	r31, X
    1b6c:	53 97       	sbiw	r26, 0x13	; 19
    1b6e:	89 2d       	mov	r24, r9
    1b70:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1b72:	d8 01       	movw	r26, r16
    1b74:	52 96       	adiw	r26, 0x12	; 18
    1b76:	ed 91       	ld	r30, X+
    1b78:	fc 91       	ld	r31, X
    1b7a:	53 97       	sbiw	r26, 0x13	; 19
    1b7c:	8e 2d       	mov	r24, r14
    1b7e:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1b80:	d8 01       	movw	r26, r16
    1b82:	52 96       	adiw	r26, 0x12	; 18
    1b84:	ed 91       	ld	r30, X+
    1b86:	fc 91       	ld	r31, X
    1b88:	53 97       	sbiw	r26, 0x13	; 19
    1b8a:	8f 2d       	mov	r24, r15
    1b8c:	19 95       	eicall
		for(i = 0; i < len; i++)
    1b8e:	00 e0       	ldi	r16, 0x00	; 0
    1b90:	10 e0       	ldi	r17, 0x00	; 0
    1b92:	0c c0       	rjmp	.+24     	; 0x1bac <WIZCHIP_READ_BUF+0xa4>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
    1b94:	75 01       	movw	r14, r10
    1b96:	e0 0e       	add	r14, r16
    1b98:	f1 1e       	adc	r15, r17
    1b9a:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <WIZCHIP+0x10>
    1b9e:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <WIZCHIP+0x11>
    1ba2:	19 95       	eicall
    1ba4:	f7 01       	movw	r30, r14
    1ba6:	80 83       	st	Z, r24
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    1ba8:	0f 5f       	subi	r16, 0xFF	; 255
    1baa:	1f 4f       	sbci	r17, 0xFF	; 255
    1bac:	0c 15       	cp	r16, r12
    1bae:	1d 05       	cpc	r17, r13
    1bb0:	88 f3       	brcs	.-30     	; 0x1b94 <WIZCHIP_READ_BUF+0x8c>
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <WIZCHIP_READ_BUF+0xca>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    1bb4:	99 82       	std	Y+1, r9	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    1bb6:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    1bb8:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    1bba:	63 e0       	ldi	r22, 0x03	; 3
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	01 96       	adiw	r24, 0x01	; 1
    1bc2:	19 95       	eicall
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
    1bc4:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <WIZCHIP+0x14>
    1bc8:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <WIZCHIP+0x15>
    1bcc:	b6 01       	movw	r22, r12
    1bce:	c5 01       	movw	r24, r10
    1bd0:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    1bd2:	06 e0       	ldi	r16, 0x06	; 6
    1bd4:	12 e0       	ldi	r17, 0x02	; 2
    1bd6:	d8 01       	movw	r26, r16
    1bd8:	1e 96       	adiw	r26, 0x0e	; 14
    1bda:	ed 91       	ld	r30, X+
    1bdc:	fc 91       	ld	r31, X
    1bde:	1f 97       	sbiw	r26, 0x0f	; 15
    1be0:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    1be2:	d8 01       	movw	r26, r16
    1be4:	1a 96       	adiw	r26, 0x0a	; 10
    1be6:	ed 91       	ld	r30, X+
    1be8:	fc 91       	ld	r31, X
    1bea:	1b 97       	sbiw	r26, 0x0b	; 11
    1bec:	19 95       	eicall
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	1f 91       	pop	r17
    1bfa:	0f 91       	pop	r16
    1bfc:	ff 90       	pop	r15
    1bfe:	ef 90       	pop	r14
    1c00:	df 90       	pop	r13
    1c02:	cf 90       	pop	r12
    1c04:	bf 90       	pop	r11
    1c06:	af 90       	pop	r10
    1c08:	9f 90       	pop	r9
    1c0a:	08 95       	ret

00001c0c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    1c0c:	4f 92       	push	r4
    1c0e:	5f 92       	push	r5
    1c10:	6f 92       	push	r6
    1c12:	7f 92       	push	r7
    1c14:	8f 92       	push	r8
    1c16:	9f 92       	push	r9
    1c18:	af 92       	push	r10
    1c1a:	bf 92       	push	r11
    1c1c:	cf 92       	push	r12
    1c1e:	df 92       	push	r13
    1c20:	ef 92       	push	r14
    1c22:	ff 92       	push	r15
    1c24:	0f 93       	push	r16
    1c26:	1f 93       	push	r17
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <WIZCHIP_WRITE_BUF+0x22>
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	6b 01       	movw	r12, r22
    1c34:	7c 01       	movw	r14, r24
    1c36:	4a 01       	movw	r8, r20
    1c38:	59 01       	movw	r10, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    1c3a:	06 e0       	ldi	r16, 0x06	; 6
    1c3c:	12 e0       	ldi	r17, 0x02	; 2
    1c3e:	d8 01       	movw	r26, r16
    1c40:	18 96       	adiw	r26, 0x08	; 8
    1c42:	ed 91       	ld	r30, X+
    1c44:	fc 91       	ld	r31, X
    1c46:	19 97       	sbiw	r26, 0x09	; 9
    1c48:	19 95       	eicall
   WIZCHIP.CS._select();
    1c4a:	d8 01       	movw	r26, r16
    1c4c:	1c 96       	adiw	r26, 0x0c	; 12
    1c4e:	ed 91       	ld	r30, X+
    1c50:	fc 91       	ld	r31, X
    1c52:	1d 97       	sbiw	r26, 0x0d	; 13
    1c54:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    1c56:	26 01       	movw	r4, r12
    1c58:	37 01       	movw	r6, r14
    1c5a:	68 94       	set
    1c5c:	42 f8       	bld	r4, 2

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    1c5e:	d8 01       	movw	r26, r16
    1c60:	56 96       	adiw	r26, 0x16	; 22
    1c62:	ed 91       	ld	r30, X+
    1c64:	fc 91       	ld	r31, X
    1c66:	57 97       	sbiw	r26, 0x17	; 23
    1c68:	30 97       	sbiw	r30, 0x00	; 0
    1c6a:	31 f5       	brne	.+76     	; 0x1cb8 <WIZCHIP_WRITE_BUF+0xac>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1c6c:	52 96       	adiw	r26, 0x12	; 18
    1c6e:	ed 91       	ld	r30, X+
    1c70:	fc 91       	ld	r31, X
    1c72:	53 97       	sbiw	r26, 0x13	; 19
    1c74:	8e 2d       	mov	r24, r14
    1c76:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1c78:	d8 01       	movw	r26, r16
    1c7a:	52 96       	adiw	r26, 0x12	; 18
    1c7c:	ed 91       	ld	r30, X+
    1c7e:	fc 91       	ld	r31, X
    1c80:	53 97       	sbiw	r26, 0x13	; 19
    1c82:	8d 2d       	mov	r24, r13
    1c84:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1c86:	d8 01       	movw	r26, r16
    1c88:	52 96       	adiw	r26, 0x12	; 18
    1c8a:	ed 91       	ld	r30, X+
    1c8c:	fc 91       	ld	r31, X
    1c8e:	53 97       	sbiw	r26, 0x13	; 19
    1c90:	84 2d       	mov	r24, r4
    1c92:	19 95       	eicall
		for(i = 0; i < len; i++)
    1c94:	00 e0       	ldi	r16, 0x00	; 0
    1c96:	10 e0       	ldi	r17, 0x00	; 0
    1c98:	0b c0       	rjmp	.+22     	; 0x1cb0 <WIZCHIP_WRITE_BUF+0xa4>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    1c9a:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <WIZCHIP+0x12>
    1c9e:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <WIZCHIP+0x13>
    1ca2:	d4 01       	movw	r26, r8
    1ca4:	a0 0f       	add	r26, r16
    1ca6:	b1 1f       	adc	r27, r17
    1ca8:	8c 91       	ld	r24, X
    1caa:	19 95       	eicall
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    1cac:	0f 5f       	subi	r16, 0xFF	; 255
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	0a 15       	cp	r16, r10
    1cb2:	1b 05       	cpc	r17, r11
    1cb4:	90 f3       	brcs	.-28     	; 0x1c9a <WIZCHIP_WRITE_BUF+0x8e>
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <WIZCHIP_WRITE_BUF+0xca>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    1cb8:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    1cba:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    1cbc:	4b 82       	std	Y+3, r4	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    1cbe:	63 e0       	ldi	r22, 0x03	; 3
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	01 96       	adiw	r24, 0x01	; 1
    1cc6:	19 95       	eicall
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    1cc8:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    1ccc:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    1cd0:	b5 01       	movw	r22, r10
    1cd2:	c4 01       	movw	r24, r8
    1cd4:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    1cd6:	06 e0       	ldi	r16, 0x06	; 6
    1cd8:	12 e0       	ldi	r17, 0x02	; 2
    1cda:	d8 01       	movw	r26, r16
    1cdc:	1e 96       	adiw	r26, 0x0e	; 14
    1cde:	ed 91       	ld	r30, X+
    1ce0:	fc 91       	ld	r31, X
    1ce2:	1f 97       	sbiw	r26, 0x0f	; 15
    1ce4:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    1ce6:	d8 01       	movw	r26, r16
    1ce8:	1a 96       	adiw	r26, 0x0a	; 10
    1cea:	ed 91       	ld	r30, X+
    1cec:	fc 91       	ld	r31, X
    1cee:	1b 97       	sbiw	r26, 0x0b	; 11
    1cf0:	19 95       	eicall
}
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	df 90       	pop	r13
    1d06:	cf 90       	pop	r12
    1d08:	bf 90       	pop	r11
    1d0a:	af 90       	pop	r10
    1d0c:	9f 90       	pop	r9
    1d0e:	8f 90       	pop	r8
    1d10:	7f 90       	pop	r7
    1d12:	6f 90       	pop	r6
    1d14:	5f 90       	pop	r5
    1d16:	4f 90       	pop	r4
    1d18:	08 95       	ret

00001d1a <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
    1d1a:	7f 92       	push	r7
    1d1c:	8f 92       	push	r8
    1d1e:	9f 92       	push	r9
    1d20:	af 92       	push	r10
    1d22:	bf 92       	push	r11
    1d24:	cf 92       	push	r12
    1d26:	df 92       	push	r13
    1d28:	ef 92       	push	r14
    1d2a:	ff 92       	push	r15
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	78 2e       	mov	r7, r24
   uint16_t val=0,val1=0;
    1d36:	00 e0       	ldi	r16, 0x00	; 0
    1d38:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    1d3a:	c7 2c       	mov	r12, r7
    1d3c:	d1 2c       	mov	r13, r1
    1d3e:	cc 0c       	add	r12, r12
    1d40:	dd 1c       	adc	r13, r13
    1d42:	cc 0c       	add	r12, r12
    1d44:	dd 1c       	adc	r13, r13
    1d46:	8f ef       	ldi	r24, 0xFF	; 255
    1d48:	c8 1a       	sub	r12, r24
    1d4a:	d8 0a       	sbc	r13, r24
    1d4c:	cc 0c       	add	r12, r12
    1d4e:	dd 1c       	adc	r13, r13
    1d50:	cc 0c       	add	r12, r12
    1d52:	dd 1c       	adc	r13, r13
    1d54:	cc 0c       	add	r12, r12
    1d56:	dd 1c       	adc	r13, r13
    1d58:	46 01       	movw	r8, r12
    1d5a:	80 ee       	ldi	r24, 0xE0	; 224
    1d5c:	98 1a       	sub	r9, r24
    1d5e:	09 2c       	mov	r0, r9
    1d60:	00 0c       	add	r0, r0
    1d62:	aa 08       	sbc	r10, r10
    1d64:	bb 08       	sbc	r11, r11
    1d66:	c5 01       	movw	r24, r10
    1d68:	b4 01       	movw	r22, r8
    1d6a:	f5 dd       	rcall	.-1046   	; 0x1956 <WIZCHIP_READ>
    1d6c:	c8 2f       	mov	r28, r24
    1d6e:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    1d70:	dc 2f       	mov	r29, r28
    1d72:	cc 27       	eor	r28, r28
    1d74:	8f ed       	ldi	r24, 0xDF	; 223
    1d76:	d8 1a       	sub	r13, r24
    1d78:	0d 2c       	mov	r0, r13
    1d7a:	00 0c       	add	r0, r0
    1d7c:	ee 08       	sbc	r14, r14
    1d7e:	ff 08       	sbc	r15, r15
    1d80:	c7 01       	movw	r24, r14
    1d82:	b6 01       	movw	r22, r12
    1d84:	e8 dd       	rcall	.-1072   	; 0x1956 <WIZCHIP_READ>
    1d86:	c8 0f       	add	r28, r24
    1d88:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    1d8a:	20 97       	sbiw	r28, 0x00	; 0
    1d8c:	61 f0       	breq	.+24     	; 0x1da6 <getSn_TX_FSR+0x8c>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    1d8e:	c5 01       	movw	r24, r10
    1d90:	b4 01       	movw	r22, r8
    1d92:	e1 dd       	rcall	.-1086   	; 0x1956 <WIZCHIP_READ>
    1d94:	08 2f       	mov	r16, r24
    1d96:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    1d98:	10 2f       	mov	r17, r16
    1d9a:	00 27       	eor	r16, r16
    1d9c:	c7 01       	movw	r24, r14
    1d9e:	b6 01       	movw	r22, r12
    1da0:	da dd       	rcall	.-1100   	; 0x1956 <WIZCHIP_READ>
    1da2:	08 0f       	add	r16, r24
    1da4:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    1da6:	0c 17       	cp	r16, r28
    1da8:	1d 07       	cpc	r17, r29
    1daa:	39 f6       	brne	.-114    	; 0x1d3a <getSn_TX_FSR+0x20>
   return val;
}
    1dac:	c8 01       	movw	r24, r16
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	ff 90       	pop	r15
    1db8:	ef 90       	pop	r14
    1dba:	df 90       	pop	r13
    1dbc:	cf 90       	pop	r12
    1dbe:	bf 90       	pop	r11
    1dc0:	af 90       	pop	r10
    1dc2:	9f 90       	pop	r9
    1dc4:	8f 90       	pop	r8
    1dc6:	7f 90       	pop	r7
    1dc8:	08 95       	ret

00001dca <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    1dca:	7f 92       	push	r7
    1dcc:	8f 92       	push	r8
    1dce:	9f 92       	push	r9
    1dd0:	af 92       	push	r10
    1dd2:	bf 92       	push	r11
    1dd4:	cf 92       	push	r12
    1dd6:	df 92       	push	r13
    1dd8:	ef 92       	push	r14
    1dda:	ff 92       	push	r15
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	78 2e       	mov	r7, r24
   uint16_t val=0,val1=0;
    1de6:	00 e0       	ldi	r16, 0x00	; 0
    1de8:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    1dea:	c7 2c       	mov	r12, r7
    1dec:	d1 2c       	mov	r13, r1
    1dee:	cc 0c       	add	r12, r12
    1df0:	dd 1c       	adc	r13, r13
    1df2:	cc 0c       	add	r12, r12
    1df4:	dd 1c       	adc	r13, r13
    1df6:	8f ef       	ldi	r24, 0xFF	; 255
    1df8:	c8 1a       	sub	r12, r24
    1dfa:	d8 0a       	sbc	r13, r24
    1dfc:	cc 0c       	add	r12, r12
    1dfe:	dd 1c       	adc	r13, r13
    1e00:	cc 0c       	add	r12, r12
    1e02:	dd 1c       	adc	r13, r13
    1e04:	cc 0c       	add	r12, r12
    1e06:	dd 1c       	adc	r13, r13
    1e08:	46 01       	movw	r8, r12
    1e0a:	8a ed       	ldi	r24, 0xDA	; 218
    1e0c:	98 1a       	sub	r9, r24
    1e0e:	09 2c       	mov	r0, r9
    1e10:	00 0c       	add	r0, r0
    1e12:	aa 08       	sbc	r10, r10
    1e14:	bb 08       	sbc	r11, r11
    1e16:	c5 01       	movw	r24, r10
    1e18:	b4 01       	movw	r22, r8
    1e1a:	9d dd       	rcall	.-1222   	; 0x1956 <WIZCHIP_READ>
    1e1c:	c8 2f       	mov	r28, r24
    1e1e:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    1e20:	dc 2f       	mov	r29, r28
    1e22:	cc 27       	eor	r28, r28
    1e24:	89 ed       	ldi	r24, 0xD9	; 217
    1e26:	d8 1a       	sub	r13, r24
    1e28:	0d 2c       	mov	r0, r13
    1e2a:	00 0c       	add	r0, r0
    1e2c:	ee 08       	sbc	r14, r14
    1e2e:	ff 08       	sbc	r15, r15
    1e30:	c7 01       	movw	r24, r14
    1e32:	b6 01       	movw	r22, r12
    1e34:	90 dd       	rcall	.-1248   	; 0x1956 <WIZCHIP_READ>
    1e36:	c8 0f       	add	r28, r24
    1e38:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    1e3a:	20 97       	sbiw	r28, 0x00	; 0
    1e3c:	61 f0       	breq	.+24     	; 0x1e56 <getSn_RX_RSR+0x8c>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    1e3e:	c5 01       	movw	r24, r10
    1e40:	b4 01       	movw	r22, r8
    1e42:	89 dd       	rcall	.-1262   	; 0x1956 <WIZCHIP_READ>
    1e44:	08 2f       	mov	r16, r24
    1e46:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    1e48:	10 2f       	mov	r17, r16
    1e4a:	00 27       	eor	r16, r16
    1e4c:	c7 01       	movw	r24, r14
    1e4e:	b6 01       	movw	r22, r12
    1e50:	82 dd       	rcall	.-1276   	; 0x1956 <WIZCHIP_READ>
    1e52:	08 0f       	add	r16, r24
    1e54:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    1e56:	0c 17       	cp	r16, r28
    1e58:	1d 07       	cpc	r17, r29
    1e5a:	39 f6       	brne	.-114    	; 0x1dea <getSn_RX_RSR+0x20>
   return val;
}
    1e5c:	c8 01       	movw	r24, r16
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	ff 90       	pop	r15
    1e68:	ef 90       	pop	r14
    1e6a:	df 90       	pop	r13
    1e6c:	cf 90       	pop	r12
    1e6e:	bf 90       	pop	r11
    1e70:	af 90       	pop	r10
    1e72:	9f 90       	pop	r9
    1e74:	8f 90       	pop	r8
    1e76:	7f 90       	pop	r7
    1e78:	08 95       	ret

00001e7a <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    1e7a:	2f 92       	push	r2
    1e7c:	3f 92       	push	r3
    1e7e:	4f 92       	push	r4
    1e80:	5f 92       	push	r5
    1e82:	6f 92       	push	r6
    1e84:	7f 92       	push	r7
    1e86:	8f 92       	push	r8
    1e88:	9f 92       	push	r9
    1e8a:	af 92       	push	r10
    1e8c:	bf 92       	push	r11
    1e8e:	cf 92       	push	r12
    1e90:	df 92       	push	r13
    1e92:	ef 92       	push	r14
    1e94:	ff 92       	push	r15
    1e96:	0f 93       	push	r16
    1e98:	1f 93       	push	r17
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <wiz_send_data+0x26>
    1ea0:	1f 92       	push	r1
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
    1ea6:	41 15       	cp	r20, r1
    1ea8:	51 05       	cpc	r21, r1
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <wiz_send_data+0x34>
    1eac:	56 c0       	rjmp	.+172    	; 0x1f5a <wiz_send_data+0xe0>
    1eae:	3a 01       	movw	r6, r20
    1eb0:	7a 83       	std	Y+2, r23	; 0x02
    1eb2:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_TX_WR(sn);
    1eb4:	28 2e       	mov	r2, r24
    1eb6:	31 2c       	mov	r3, r1
    1eb8:	22 0c       	add	r2, r2
    1eba:	33 1c       	adc	r3, r3
    1ebc:	22 0c       	add	r2, r2
    1ebe:	33 1c       	adc	r3, r3
    1ec0:	61 01       	movw	r12, r2
    1ec2:	2f ef       	ldi	r18, 0xFF	; 255
    1ec4:	c2 1a       	sub	r12, r18
    1ec6:	d2 0a       	sbc	r13, r18
    1ec8:	cc 0c       	add	r12, r12
    1eca:	dd 1c       	adc	r13, r13
    1ecc:	cc 0c       	add	r12, r12
    1ece:	dd 1c       	adc	r13, r13
    1ed0:	cc 0c       	add	r12, r12
    1ed2:	dd 1c       	adc	r13, r13
    1ed4:	46 01       	movw	r8, r12
    1ed6:	3c ed       	ldi	r19, 0xDC	; 220
    1ed8:	93 1a       	sub	r9, r19
    1eda:	09 2c       	mov	r0, r9
    1edc:	00 0c       	add	r0, r0
    1ede:	aa 08       	sbc	r10, r10
    1ee0:	bb 08       	sbc	r11, r11
    1ee2:	c5 01       	movw	r24, r10
    1ee4:	b4 01       	movw	r22, r8
    1ee6:	37 dd       	rcall	.-1426   	; 0x1956 <WIZCHIP_READ>
    1ee8:	08 2f       	mov	r16, r24
    1eea:	10 e0       	ldi	r17, 0x00	; 0
    1eec:	10 2f       	mov	r17, r16
    1eee:	00 27       	eor	r16, r16
    1ef0:	8b ed       	ldi	r24, 0xDB	; 219
    1ef2:	d8 1a       	sub	r13, r24
    1ef4:	0d 2c       	mov	r0, r13
    1ef6:	00 0c       	add	r0, r0
    1ef8:	ee 08       	sbc	r14, r14
    1efa:	ff 08       	sbc	r15, r15
    1efc:	c7 01       	movw	r24, r14
    1efe:	b6 01       	movw	r22, r12
    1f00:	2a dd       	rcall	.-1452   	; 0x1956 <WIZCHIP_READ>
    1f02:	08 0f       	add	r16, r24
    1f04:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
    1f06:	c8 01       	movw	r24, r16
    1f08:	a0 e0       	ldi	r26, 0x00	; 0
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	44 27       	eor	r20, r20
    1f0e:	58 2f       	mov	r21, r24
    1f10:	69 2f       	mov	r22, r25
    1f12:	7a 2f       	mov	r23, r26
    1f14:	c1 01       	movw	r24, r2
    1f16:	02 96       	adiw	r24, 0x02	; 2
    1f18:	1c 01       	movw	r2, r24
    1f1a:	22 0c       	add	r2, r2
    1f1c:	33 1c       	adc	r3, r3
    1f1e:	22 0c       	add	r2, r2
    1f20:	33 1c       	adc	r3, r3
    1f22:	22 0c       	add	r2, r2
    1f24:	33 1c       	adc	r3, r3
    1f26:	c1 01       	movw	r24, r2
    1f28:	33 0c       	add	r3, r3
    1f2a:	aa 0b       	sbc	r26, r26
    1f2c:	bb 0b       	sbc	r27, r27
    1f2e:	1a 01       	movw	r2, r20
    1f30:	2b 01       	movw	r4, r22
    1f32:	28 0e       	add	r2, r24
    1f34:	39 1e       	adc	r3, r25
    1f36:	4a 1e       	adc	r4, r26
    1f38:	5b 1e       	adc	r5, r27
    1f3a:	c2 01       	movw	r24, r4
    1f3c:	b1 01       	movw	r22, r2
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    1f3e:	93 01       	movw	r18, r6
    1f40:	49 81       	ldd	r20, Y+1	; 0x01
    1f42:	5a 81       	ldd	r21, Y+2	; 0x02
    1f44:	63 de       	rcall	.-826    	; 0x1c0c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
    1f46:	06 0d       	add	r16, r6
    1f48:	17 1d       	adc	r17, r7
   setSn_TX_WR(sn,ptr);
    1f4a:	41 2f       	mov	r20, r17
    1f4c:	c5 01       	movw	r24, r10
    1f4e:	b4 01       	movw	r22, r8
    1f50:	69 dd       	rcall	.-1326   	; 0x1a24 <WIZCHIP_WRITE>
    1f52:	40 2f       	mov	r20, r16
    1f54:	c7 01       	movw	r24, r14
    1f56:	b6 01       	movw	r22, r12
    1f58:	65 dd       	rcall	.-1334   	; 0x1a24 <WIZCHIP_WRITE>
}
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	1f 91       	pop	r17
    1f68:	0f 91       	pop	r16
    1f6a:	ff 90       	pop	r15
    1f6c:	ef 90       	pop	r14
    1f6e:	df 90       	pop	r13
    1f70:	cf 90       	pop	r12
    1f72:	bf 90       	pop	r11
    1f74:	af 90       	pop	r10
    1f76:	9f 90       	pop	r9
    1f78:	8f 90       	pop	r8
    1f7a:	7f 90       	pop	r7
    1f7c:	6f 90       	pop	r6
    1f7e:	5f 90       	pop	r5
    1f80:	4f 90       	pop	r4
    1f82:	3f 90       	pop	r3
    1f84:	2f 90       	pop	r2
    1f86:	08 95       	ret

00001f88 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    1f88:	2f 92       	push	r2
    1f8a:	3f 92       	push	r3
    1f8c:	4f 92       	push	r4
    1f8e:	5f 92       	push	r5
    1f90:	6f 92       	push	r6
    1f92:	7f 92       	push	r7
    1f94:	8f 92       	push	r8
    1f96:	9f 92       	push	r9
    1f98:	af 92       	push	r10
    1f9a:	bf 92       	push	r11
    1f9c:	cf 92       	push	r12
    1f9e:	df 92       	push	r13
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <wiz_recv_data+0x26>
    1fae:	1f 92       	push	r1
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
    1fb4:	41 15       	cp	r20, r1
    1fb6:	51 05       	cpc	r21, r1
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <wiz_recv_data+0x34>
    1fba:	56 c0       	rjmp	.+172    	; 0x2068 <__EEPROM_REGION_LENGTH__+0x68>
    1fbc:	3a 01       	movw	r6, r20
    1fbe:	7a 83       	std	Y+2, r23	; 0x02
    1fc0:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_RX_RD(sn);
    1fc2:	28 2e       	mov	r2, r24
    1fc4:	31 2c       	mov	r3, r1
    1fc6:	22 0c       	add	r2, r2
    1fc8:	33 1c       	adc	r3, r3
    1fca:	22 0c       	add	r2, r2
    1fcc:	33 1c       	adc	r3, r3
    1fce:	61 01       	movw	r12, r2
    1fd0:	2f ef       	ldi	r18, 0xFF	; 255
    1fd2:	c2 1a       	sub	r12, r18
    1fd4:	d2 0a       	sbc	r13, r18
    1fd6:	cc 0c       	add	r12, r12
    1fd8:	dd 1c       	adc	r13, r13
    1fda:	cc 0c       	add	r12, r12
    1fdc:	dd 1c       	adc	r13, r13
    1fde:	cc 0c       	add	r12, r12
    1fe0:	dd 1c       	adc	r13, r13
    1fe2:	46 01       	movw	r8, r12
    1fe4:	38 ed       	ldi	r19, 0xD8	; 216
    1fe6:	93 1a       	sub	r9, r19
    1fe8:	09 2c       	mov	r0, r9
    1fea:	00 0c       	add	r0, r0
    1fec:	aa 08       	sbc	r10, r10
    1fee:	bb 08       	sbc	r11, r11
    1ff0:	c5 01       	movw	r24, r10
    1ff2:	b4 01       	movw	r22, r8
    1ff4:	b0 dc       	rcall	.-1696   	; 0x1956 <WIZCHIP_READ>
    1ff6:	08 2f       	mov	r16, r24
    1ff8:	10 e0       	ldi	r17, 0x00	; 0
    1ffa:	10 2f       	mov	r17, r16
    1ffc:	00 27       	eor	r16, r16
    1ffe:	87 ed       	ldi	r24, 0xD7	; 215
    2000:	d8 1a       	sub	r13, r24
    2002:	0d 2c       	mov	r0, r13
    2004:	00 0c       	add	r0, r0
    2006:	ee 08       	sbc	r14, r14
    2008:	ff 08       	sbc	r15, r15
    200a:	c7 01       	movw	r24, r14
    200c:	b6 01       	movw	r22, r12
    200e:	a3 dc       	rcall	.-1722   	; 0x1956 <WIZCHIP_READ>
    2010:	08 0f       	add	r16, r24
    2012:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
    2014:	c8 01       	movw	r24, r16
    2016:	a0 e0       	ldi	r26, 0x00	; 0
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	44 27       	eor	r20, r20
    201c:	58 2f       	mov	r21, r24
    201e:	69 2f       	mov	r22, r25
    2020:	7a 2f       	mov	r23, r26
    2022:	c1 01       	movw	r24, r2
    2024:	03 96       	adiw	r24, 0x03	; 3
    2026:	1c 01       	movw	r2, r24
    2028:	22 0c       	add	r2, r2
    202a:	33 1c       	adc	r3, r3
    202c:	22 0c       	add	r2, r2
    202e:	33 1c       	adc	r3, r3
    2030:	22 0c       	add	r2, r2
    2032:	33 1c       	adc	r3, r3
    2034:	c1 01       	movw	r24, r2
    2036:	33 0c       	add	r3, r3
    2038:	aa 0b       	sbc	r26, r26
    203a:	bb 0b       	sbc	r27, r27
    203c:	1a 01       	movw	r2, r20
    203e:	2b 01       	movw	r4, r22
    2040:	28 0e       	add	r2, r24
    2042:	39 1e       	adc	r3, r25
    2044:	4a 1e       	adc	r4, r26
    2046:	5b 1e       	adc	r5, r27
    2048:	c2 01       	movw	r24, r4
    204a:	b1 01       	movw	r22, r2
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    204c:	93 01       	movw	r18, r6
    204e:	49 81       	ldd	r20, Y+1	; 0x01
    2050:	5a 81       	ldd	r21, Y+2	; 0x02
    2052:	5a dd       	rcall	.-1356   	; 0x1b08 <WIZCHIP_READ_BUF>
   ptr += len;
    2054:	06 0d       	add	r16, r6
    2056:	17 1d       	adc	r17, r7
   
   setSn_RX_RD(sn,ptr);
    2058:	41 2f       	mov	r20, r17
    205a:	c5 01       	movw	r24, r10
    205c:	b4 01       	movw	r22, r8
    205e:	e2 dc       	rcall	.-1596   	; 0x1a24 <WIZCHIP_WRITE>
    2060:	40 2f       	mov	r20, r16
    2062:	c7 01       	movw	r24, r14
    2064:	b6 01       	movw	r22, r12
    2066:	de dc       	rcall	.-1604   	; 0x1a24 <WIZCHIP_WRITE>
}
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	1f 91       	pop	r17
    2076:	0f 91       	pop	r16
    2078:	ff 90       	pop	r15
    207a:	ef 90       	pop	r14
    207c:	df 90       	pop	r13
    207e:	cf 90       	pop	r12
    2080:	bf 90       	pop	r11
    2082:	af 90       	pop	r10
    2084:	9f 90       	pop	r9
    2086:	8f 90       	pop	r8
    2088:	7f 90       	pop	r7
    208a:	6f 90       	pop	r6
    208c:	5f 90       	pop	r5
    208e:	4f 90       	pop	r4
    2090:	3f 90       	pop	r3
    2092:	2f 90       	pop	r2
    2094:	08 95       	ret

00002096 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
    2096:	8f 92       	push	r8
    2098:	9f 92       	push	r9
    209a:	af 92       	push	r10
    209c:	bf 92       	push	r11
    209e:	cf 92       	push	r12
    20a0:	df 92       	push	r13
    20a2:	ef 92       	push	r14
    20a4:	ff 92       	push	r15
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	eb 01       	movw	r28, r22
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
    20b0:	c8 2e       	mov	r12, r24
    20b2:	d1 2c       	mov	r13, r1
    20b4:	cc 0c       	add	r12, r12
    20b6:	dd 1c       	adc	r13, r13
    20b8:	cc 0c       	add	r12, r12
    20ba:	dd 1c       	adc	r13, r13
    20bc:	8f ef       	ldi	r24, 0xFF	; 255
    20be:	c8 1a       	sub	r12, r24
    20c0:	d8 0a       	sbc	r13, r24
    20c2:	cc 0c       	add	r12, r12
    20c4:	dd 1c       	adc	r13, r13
    20c6:	cc 0c       	add	r12, r12
    20c8:	dd 1c       	adc	r13, r13
    20ca:	cc 0c       	add	r12, r12
    20cc:	dd 1c       	adc	r13, r13
    20ce:	46 01       	movw	r8, r12
    20d0:	88 ed       	ldi	r24, 0xD8	; 216
    20d2:	98 1a       	sub	r9, r24
    20d4:	09 2c       	mov	r0, r9
    20d6:	00 0c       	add	r0, r0
    20d8:	aa 08       	sbc	r10, r10
    20da:	bb 08       	sbc	r11, r11
    20dc:	c5 01       	movw	r24, r10
    20de:	b4 01       	movw	r22, r8
    20e0:	3a dc       	rcall	.-1932   	; 0x1956 <WIZCHIP_READ>
    20e2:	08 2f       	mov	r16, r24
    20e4:	10 e0       	ldi	r17, 0x00	; 0
    20e6:	10 2f       	mov	r17, r16
    20e8:	00 27       	eor	r16, r16
    20ea:	87 ed       	ldi	r24, 0xD7	; 215
    20ec:	d8 1a       	sub	r13, r24
    20ee:	0d 2c       	mov	r0, r13
    20f0:	00 0c       	add	r0, r0
    20f2:	ee 08       	sbc	r14, r14
    20f4:	ff 08       	sbc	r15, r15
    20f6:	c7 01       	movw	r24, r14
    20f8:	b6 01       	movw	r22, r12
    20fa:	2d dc       	rcall	.-1958   	; 0x1956 <WIZCHIP_READ>
    20fc:	08 0f       	add	r16, r24
    20fe:	11 1d       	adc	r17, r1
   ptr += len;
    2100:	c0 0f       	add	r28, r16
    2102:	d1 1f       	adc	r29, r17
   setSn_RX_RD(sn,ptr);
    2104:	4d 2f       	mov	r20, r29
    2106:	c5 01       	movw	r24, r10
    2108:	b4 01       	movw	r22, r8
    210a:	8c dc       	rcall	.-1768   	; 0x1a24 <WIZCHIP_WRITE>
    210c:	4c 2f       	mov	r20, r28
    210e:	c7 01       	movw	r24, r14
    2110:	b6 01       	movw	r22, r12
    2112:	88 dc       	rcall	.-1776   	; 0x1a24 <WIZCHIP_WRITE>
}
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	af 90       	pop	r10
    2128:	9f 90       	pop	r9
    212a:	8f 90       	pop	r8
    212c:	08 95       	ret

0000212e <wizchip_cris_enter>:
void wizphy_getphystat(wiz_PhyConf* phyconf)
{
   uint8_t tmp = getPHYCFGR();
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}
    212e:	08 95       	ret

00002130 <wizchip_cris_exit>:
    2130:	08 95       	ret

00002132 <wizchip_cs_select>:
    2132:	08 95       	ret

00002134 <wizchip_cs_deselect>:
    2134:	08 95       	ret

00002136 <wizchip_bus_readdata>:
    2136:	fb 01       	movw	r30, r22
    2138:	80 81       	ld	r24, Z
    213a:	08 95       	ret

0000213c <wizchip_bus_writedata>:
    213c:	fb 01       	movw	r30, r22
    213e:	40 83       	st	Z, r20
    2140:	08 95       	ret

00002142 <wizchip_spi_readbyte>:
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	08 95       	ret

00002146 <wizchip_spi_writebyte>:
    2146:	08 95       	ret

00002148 <wizchip_spi_readburst>:
    2148:	08 95       	ret

0000214a <wizchip_spi_writeburst>:
    214a:	08 95       	ret

0000214c <reg_wizchip_cs_cbfunc>:
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	19 f0       	breq	.+6      	; 0x2156 <reg_wizchip_cs_cbfunc+0xa>
    2150:	61 15       	cp	r22, r1
    2152:	71 05       	cpc	r23, r1
    2154:	59 f4       	brne	.+22     	; 0x216c <reg_wizchip_cs_cbfunc+0x20>
    2156:	e6 e0       	ldi	r30, 0x06	; 6
    2158:	f2 e0       	ldi	r31, 0x02	; 2
    215a:	89 e9       	ldi	r24, 0x99	; 153
    215c:	90 e1       	ldi	r25, 0x10	; 16
    215e:	95 87       	std	Z+13, r25	; 0x0d
    2160:	84 87       	std	Z+12, r24	; 0x0c
    2162:	8a e9       	ldi	r24, 0x9A	; 154
    2164:	90 e1       	ldi	r25, 0x10	; 16
    2166:	97 87       	std	Z+15, r25	; 0x0f
    2168:	86 87       	std	Z+14, r24	; 0x0e
    216a:	08 95       	ret
    216c:	e6 e0       	ldi	r30, 0x06	; 6
    216e:	f2 e0       	ldi	r31, 0x02	; 2
    2170:	95 87       	std	Z+13, r25	; 0x0d
    2172:	84 87       	std	Z+12, r24	; 0x0c
    2174:	77 87       	std	Z+15, r23	; 0x0f
    2176:	66 87       	std	Z+14, r22	; 0x0e
    2178:	08 95       	ret

0000217a <reg_wizchip_spi_cbfunc>:
    217a:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <WIZCHIP>
    217e:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <WIZCHIP+0x1>
    2182:	31 ff       	sbrs	r19, 1
    2184:	fa cf       	rjmp	.-12     	; 0x217a <reg_wizchip_spi_cbfunc>
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	19 f0       	breq	.+6      	; 0x2190 <reg_wizchip_spi_cbfunc+0x16>
    218a:	61 15       	cp	r22, r1
    218c:	71 05       	cpc	r23, r1
    218e:	59 f4       	brne	.+22     	; 0x21a6 <reg_wizchip_spi_cbfunc+0x2c>
    2190:	e6 e0       	ldi	r30, 0x06	; 6
    2192:	f2 e0       	ldi	r31, 0x02	; 2
    2194:	81 ea       	ldi	r24, 0xA1	; 161
    2196:	90 e1       	ldi	r25, 0x10	; 16
    2198:	91 8b       	std	Z+17, r25	; 0x11
    219a:	80 8b       	std	Z+16, r24	; 0x10
    219c:	83 ea       	ldi	r24, 0xA3	; 163
    219e:	90 e1       	ldi	r25, 0x10	; 16
    21a0:	93 8b       	std	Z+19, r25	; 0x13
    21a2:	82 8b       	std	Z+18, r24	; 0x12
    21a4:	08 95       	ret
    21a6:	e6 e0       	ldi	r30, 0x06	; 6
    21a8:	f2 e0       	ldi	r31, 0x02	; 2
    21aa:	91 8b       	std	Z+17, r25	; 0x11
    21ac:	80 8b       	std	Z+16, r24	; 0x10
    21ae:	73 8b       	std	Z+19, r23	; 0x13
    21b0:	62 8b       	std	Z+18, r22	; 0x12
    21b2:	08 95       	ret

000021b4 <reg_wizchip_spiburst_cbfunc>:
    21b4:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <WIZCHIP>
    21b8:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <WIZCHIP+0x1>
    21bc:	31 ff       	sbrs	r19, 1
    21be:	fa cf       	rjmp	.-12     	; 0x21b4 <reg_wizchip_spiburst_cbfunc>
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	19 f0       	breq	.+6      	; 0x21ca <reg_wizchip_spiburst_cbfunc+0x16>
    21c4:	61 15       	cp	r22, r1
    21c6:	71 05       	cpc	r23, r1
    21c8:	59 f4       	brne	.+22     	; 0x21e0 <reg_wizchip_spiburst_cbfunc+0x2c>
    21ca:	e6 e0       	ldi	r30, 0x06	; 6
    21cc:	f2 e0       	ldi	r31, 0x02	; 2
    21ce:	84 ea       	ldi	r24, 0xA4	; 164
    21d0:	90 e1       	ldi	r25, 0x10	; 16
    21d2:	95 8b       	std	Z+21, r25	; 0x15
    21d4:	84 8b       	std	Z+20, r24	; 0x14
    21d6:	85 ea       	ldi	r24, 0xA5	; 165
    21d8:	90 e1       	ldi	r25, 0x10	; 16
    21da:	97 8b       	std	Z+23, r25	; 0x17
    21dc:	86 8b       	std	Z+22, r24	; 0x16
    21de:	08 95       	ret
    21e0:	e6 e0       	ldi	r30, 0x06	; 6
    21e2:	f2 e0       	ldi	r31, 0x02	; 2
    21e4:	95 8b       	std	Z+21, r25	; 0x15
    21e6:	84 8b       	std	Z+20, r24	; 0x14
    21e8:	77 8b       	std	Z+23, r23	; 0x17
    21ea:	66 8b       	std	Z+22, r22	; 0x16
    21ec:	08 95       	ret

000021ee <wizchip_sw_reset>:
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	62 97       	sbiw	r28, 0x12	; 18
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	26 e0       	ldi	r18, 0x06	; 6
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	ae 01       	movw	r20, r28
    2208:	43 5f       	subi	r20, 0xF3	; 243
    220a:	5f 4f       	sbci	r21, 0xFF	; 255
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	79 e0       	ldi	r23, 0x09	; 9
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	79 dc       	rcall	.-1806   	; 0x1b08 <WIZCHIP_READ_BUF>
    2216:	24 e0       	ldi	r18, 0x04	; 4
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	ae 01       	movw	r20, r28
    221c:	4f 5f       	subi	r20, 0xFF	; 255
    221e:	5f 4f       	sbci	r21, 0xFF	; 255
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	71 e0       	ldi	r23, 0x01	; 1
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	6f dc       	rcall	.-1826   	; 0x1b08 <WIZCHIP_READ_BUF>
    222a:	24 e0       	ldi	r18, 0x04	; 4
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	ae 01       	movw	r20, r28
    2230:	4b 5f       	subi	r20, 0xFB	; 251
    2232:	5f 4f       	sbci	r21, 0xFF	; 255
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	75 e0       	ldi	r23, 0x05	; 5
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	65 dc       	rcall	.-1846   	; 0x1b08 <WIZCHIP_READ_BUF>
    223e:	24 e0       	ldi	r18, 0x04	; 4
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	ae 01       	movw	r20, r28
    2244:	47 5f       	subi	r20, 0xF7	; 247
    2246:	5f 4f       	sbci	r21, 0xFF	; 255
    2248:	60 e0       	ldi	r22, 0x00	; 0
    224a:	7f e0       	ldi	r23, 0x0F	; 15
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	5b dc       	rcall	.-1866   	; 0x1b08 <WIZCHIP_READ_BUF>
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	cb 01       	movw	r24, r22
    225a:	e4 db       	rcall	.-2104   	; 0x1a24 <WIZCHIP_WRITE>
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	cb 01       	movw	r24, r22
    2262:	79 db       	rcall	.-2318   	; 0x1956 <WIZCHIP_READ>
    2264:	26 e0       	ldi	r18, 0x06	; 6
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	ae 01       	movw	r20, r28
    226a:	43 5f       	subi	r20, 0xF3	; 243
    226c:	5f 4f       	sbci	r21, 0xFF	; 255
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	79 e0       	ldi	r23, 0x09	; 9
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	ca dc       	rcall	.-1644   	; 0x1c0c <WIZCHIP_WRITE_BUF>
    2278:	24 e0       	ldi	r18, 0x04	; 4
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	ae 01       	movw	r20, r28
    227e:	4f 5f       	subi	r20, 0xFF	; 255
    2280:	5f 4f       	sbci	r21, 0xFF	; 255
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	71 e0       	ldi	r23, 0x01	; 1
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	c0 dc       	rcall	.-1664   	; 0x1c0c <WIZCHIP_WRITE_BUF>
    228c:	24 e0       	ldi	r18, 0x04	; 4
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	ae 01       	movw	r20, r28
    2292:	4b 5f       	subi	r20, 0xFB	; 251
    2294:	5f 4f       	sbci	r21, 0xFF	; 255
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	75 e0       	ldi	r23, 0x05	; 5
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	b6 dc       	rcall	.-1684   	; 0x1c0c <WIZCHIP_WRITE_BUF>
    22a0:	24 e0       	ldi	r18, 0x04	; 4
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	ae 01       	movw	r20, r28
    22a6:	47 5f       	subi	r20, 0xF7	; 247
    22a8:	5f 4f       	sbci	r21, 0xFF	; 255
    22aa:	60 e0       	ldi	r22, 0x00	; 0
    22ac:	7f e0       	ldi	r23, 0x0F	; 15
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	ac dc       	rcall	.-1704   	; 0x1c0c <WIZCHIP_WRITE_BUF>
    22b4:	62 96       	adiw	r28, 0x12	; 18
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	08 95       	ret

000022c6 <wizchip_init>:
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	ec 01       	movw	r28, r24
    22d2:	8b 01       	movw	r16, r22
    22d4:	8c df       	rcall	.-232    	; 0x21ee <wizchip_sw_reset>
    22d6:	20 97       	sbiw	r28, 0x00	; 0
    22d8:	69 f4       	brne	.+26     	; 0x22f4 <wizchip_init+0x2e>
    22da:	30 c0       	rjmp	.+96     	; 0x233c <wizchip_init+0x76>
    22dc:	fe 01       	movw	r30, r28
    22de:	e8 0f       	add	r30, r24
    22e0:	f1 1d       	adc	r31, r1
    22e2:	87 fd       	sbrc	r24, 7
    22e4:	fa 95       	dec	r31
    22e6:	20 81       	ld	r18, Z
    22e8:	92 0f       	add	r25, r18
    22ea:	91 31       	cpi	r25, 0x11	; 17
    22ec:	0c f0       	brlt	.+2      	; 0x22f0 <wizchip_init+0x2a>
    22ee:	5b c0       	rjmp	.+182    	; 0x23a6 <wizchip_init+0xe0>
    22f0:	8f 5f       	subi	r24, 0xFF	; 255
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <wizchip_init+0x32>
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	88 30       	cpi	r24, 0x08	; 8
    22fa:	84 f3       	brlt	.-32     	; 0x22dc <wizchip_init+0x16>
    22fc:	f1 2c       	mov	r15, r1
    22fe:	1b c0       	rjmp	.+54     	; 0x2336 <wizchip_init+0x70>
    2300:	6f 2d       	mov	r22, r15
    2302:	0f 2c       	mov	r0, r15
    2304:	00 0c       	add	r0, r0
    2306:	77 0b       	sbc	r23, r23
    2308:	fe 01       	movw	r30, r28
    230a:	e6 0f       	add	r30, r22
    230c:	f7 1f       	adc	r31, r23
    230e:	66 0f       	add	r22, r22
    2310:	77 1f       	adc	r23, r23
    2312:	66 0f       	add	r22, r22
    2314:	77 1f       	adc	r23, r23
    2316:	6f 5f       	subi	r22, 0xFF	; 255
    2318:	7f 4f       	sbci	r23, 0xFF	; 255
    231a:	66 0f       	add	r22, r22
    231c:	77 1f       	adc	r23, r23
    231e:	66 0f       	add	r22, r22
    2320:	77 1f       	adc	r23, r23
    2322:	66 0f       	add	r22, r22
    2324:	77 1f       	adc	r23, r23
    2326:	71 5e       	subi	r23, 0xE1	; 225
    2328:	07 2e       	mov	r0, r23
    232a:	00 0c       	add	r0, r0
    232c:	88 0b       	sbc	r24, r24
    232e:	99 0b       	sbc	r25, r25
    2330:	40 81       	ld	r20, Z
    2332:	78 db       	rcall	.-2320   	; 0x1a24 <WIZCHIP_WRITE>
    2334:	f3 94       	inc	r15
    2336:	87 e0       	ldi	r24, 0x07	; 7
    2338:	8f 15       	cp	r24, r15
    233a:	14 f7       	brge	.-60     	; 0x2300 <wizchip_init+0x3a>
    233c:	01 15       	cp	r16, r1
    233e:	11 05       	cpc	r17, r1
    2340:	69 f4       	brne	.+26     	; 0x235c <wizchip_init+0x96>
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	33 c0       	rjmp	.+102    	; 0x23ac <wizchip_init+0xe6>
    2346:	f8 01       	movw	r30, r16
    2348:	e8 0f       	add	r30, r24
    234a:	f1 1d       	adc	r31, r1
    234c:	87 fd       	sbrc	r24, 7
    234e:	fa 95       	dec	r31
    2350:	20 81       	ld	r18, Z
    2352:	92 0f       	add	r25, r18
    2354:	91 31       	cpi	r25, 0x11	; 17
    2356:	4c f5       	brge	.+82     	; 0x23aa <wizchip_init+0xe4>
    2358:	8f 5f       	subi	r24, 0xFF	; 255
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <wizchip_init+0x9a>
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	88 30       	cpi	r24, 0x08	; 8
    2362:	8c f3       	brlt	.-30     	; 0x2346 <wizchip_init+0x80>
    2364:	c0 e0       	ldi	r28, 0x00	; 0
    2366:	1b c0       	rjmp	.+54     	; 0x239e <wizchip_init+0xd8>
    2368:	6c 2f       	mov	r22, r28
    236a:	0c 2e       	mov	r0, r28
    236c:	00 0c       	add	r0, r0
    236e:	77 0b       	sbc	r23, r23
    2370:	f8 01       	movw	r30, r16
    2372:	e6 0f       	add	r30, r22
    2374:	f7 1f       	adc	r31, r23
    2376:	66 0f       	add	r22, r22
    2378:	77 1f       	adc	r23, r23
    237a:	66 0f       	add	r22, r22
    237c:	77 1f       	adc	r23, r23
    237e:	6f 5f       	subi	r22, 0xFF	; 255
    2380:	7f 4f       	sbci	r23, 0xFF	; 255
    2382:	66 0f       	add	r22, r22
    2384:	77 1f       	adc	r23, r23
    2386:	66 0f       	add	r22, r22
    2388:	77 1f       	adc	r23, r23
    238a:	66 0f       	add	r22, r22
    238c:	77 1f       	adc	r23, r23
    238e:	72 5e       	subi	r23, 0xE2	; 226
    2390:	07 2e       	mov	r0, r23
    2392:	00 0c       	add	r0, r0
    2394:	88 0b       	sbc	r24, r24
    2396:	99 0b       	sbc	r25, r25
    2398:	40 81       	ld	r20, Z
    239a:	44 db       	rcall	.-2424   	; 0x1a24 <WIZCHIP_WRITE>
    239c:	cf 5f       	subi	r28, 0xFF	; 255
    239e:	c8 30       	cpi	r28, 0x08	; 8
    23a0:	1c f3       	brlt	.-58     	; 0x2368 <wizchip_init+0xa2>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	03 c0       	rjmp	.+6      	; 0x23ac <wizchip_init+0xe6>
    23a6:	8f ef       	ldi	r24, 0xFF	; 255
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <wizchip_init+0xe6>
    23aa:	8f ef       	ldi	r24, 0xFF	; 255
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	ff 90       	pop	r15
    23b6:	08 95       	ret

000023b8 <wizchip_clrinterrupt>:
    23b8:	cf 93       	push	r28
    23ba:	c9 2f       	mov	r28, r25
    23bc:	48 2f       	mov	r20, r24
    23be:	40 7f       	andi	r20, 0xF0	; 240
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	75 e1       	ldi	r23, 0x15	; 21
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	2d db       	rcall	.-2470   	; 0x1a24 <WIZCHIP_WRITE>
    23ca:	4c 2f       	mov	r20, r28
    23cc:	60 e0       	ldi	r22, 0x00	; 0
    23ce:	77 e1       	ldi	r23, 0x17	; 23
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	27 db       	rcall	.-2482   	; 0x1a24 <WIZCHIP_WRITE>
    23d6:	cf 91       	pop	r28
    23d8:	08 95       	ret

000023da <wizchip_getinterrupt>:
    23da:	cf 93       	push	r28
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	75 e1       	ldi	r23, 0x15	; 21
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	b8 da       	rcall	.-2704   	; 0x1956 <WIZCHIP_READ>
    23e6:	c8 2f       	mov	r28, r24
    23e8:	c0 7f       	andi	r28, 0xF0	; 240
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	77 e1       	ldi	r23, 0x17	; 23
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	b1 da       	rcall	.-2718   	; 0x1956 <WIZCHIP_READ>
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	98 2f       	mov	r25, r24
    23f8:	88 27       	eor	r24, r24
    23fa:	8c 0f       	add	r24, r28
    23fc:	91 1d       	adc	r25, r1
    23fe:	cf 91       	pop	r28
    2400:	08 95       	ret

00002402 <wizchip_setinterruptmask>:
    2402:	cf 93       	push	r28
    2404:	c9 2f       	mov	r28, r25
    2406:	48 2f       	mov	r20, r24
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	76 e1       	ldi	r23, 0x16	; 22
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	09 db       	rcall	.-2542   	; 0x1a24 <WIZCHIP_WRITE>
    2412:	4c 2f       	mov	r20, r28
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	78 e1       	ldi	r23, 0x18	; 24
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	03 db       	rcall	.-2554   	; 0x1a24 <WIZCHIP_WRITE>
    241e:	cf 91       	pop	r28
    2420:	08 95       	ret

00002422 <wizchip_getinterruptmask>:
    2422:	cf 93       	push	r28
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	76 e1       	ldi	r23, 0x16	; 22
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	94 da       	rcall	.-2776   	; 0x1956 <WIZCHIP_READ>
    242e:	c8 2f       	mov	r28, r24
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	78 e1       	ldi	r23, 0x18	; 24
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	8e da       	rcall	.-2788   	; 0x1956 <WIZCHIP_READ>
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	98 2f       	mov	r25, r24
    243e:	88 27       	eor	r24, r24
    2440:	8c 0f       	add	r24, r28
    2442:	91 1d       	adc	r25, r1
    2444:	cf 91       	pop	r28
    2446:	08 95       	ret

00002448 <wizphy_getphylink>:
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	7e e2       	ldi	r23, 0x2E	; 46
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	82 da       	rcall	.-2812   	; 0x1956 <WIZCHIP_READ>
    2452:	80 fd       	sbrc	r24, 0
    2454:	02 c0       	rjmp	.+4      	; 0x245a <wizphy_getphylink+0x12>
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	08 95       	ret
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	08 95       	ret

0000245e <wizphy_getphypmode>:
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	7e e2       	ldi	r23, 0x2E	; 46
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	77 da       	rcall	.-2834   	; 0x1956 <WIZCHIP_READ>
    2468:	88 73       	andi	r24, 0x38	; 56
    246a:	80 33       	cpi	r24, 0x30	; 48
    246c:	11 f4       	brne	.+4      	; 0x2472 <wizphy_getphypmode+0x14>
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	08 95       	ret
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	08 95       	ret

00002476 <wizphy_reset>:
    2476:	60 e0       	ldi	r22, 0x00	; 0
    2478:	7e e2       	ldi	r23, 0x2E	; 46
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	6b da       	rcall	.-2858   	; 0x1956 <WIZCHIP_READ>
    2480:	48 2f       	mov	r20, r24
    2482:	4f 77       	andi	r20, 0x7F	; 127
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	7e e2       	ldi	r23, 0x2E	; 46
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	cb da       	rcall	.-2666   	; 0x1a24 <WIZCHIP_WRITE>
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	7e e2       	ldi	r23, 0x2E	; 46
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	5f da       	rcall	.-2882   	; 0x1956 <WIZCHIP_READ>
    2498:	48 2f       	mov	r20, r24
    249a:	40 68       	ori	r20, 0x80	; 128
    249c:	60 e0       	ldi	r22, 0x00	; 0
    249e:	7e e2       	ldi	r23, 0x2E	; 46
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	bf ca       	rjmp	.-2690   	; 0x1a24 <WIZCHIP_WRITE>
    24a6:	08 95       	ret

000024a8 <wizphy_setphyconf>:
    24a8:	fc 01       	movw	r30, r24
    24aa:	80 81       	ld	r24, Z
    24ac:	81 30       	cpi	r24, 0x01	; 1
    24ae:	11 f4       	brne	.+4      	; 0x24b4 <wizphy_setphyconf+0xc>
    24b0:	40 e4       	ldi	r20, 0x40	; 64
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <wizphy_setphyconf+0xe>
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	81 81       	ldd	r24, Z+1	; 0x01
    24b8:	81 30       	cpi	r24, 0x01	; 1
    24ba:	11 f4       	brne	.+4      	; 0x24c0 <wizphy_setphyconf+0x18>
    24bc:	48 63       	ori	r20, 0x38	; 56
    24be:	0e c0       	rjmp	.+28     	; 0x24dc <wizphy_setphyconf+0x34>
    24c0:	83 81       	ldd	r24, Z+3	; 0x03
    24c2:	81 30       	cpi	r24, 0x01	; 1
    24c4:	39 f4       	brne	.+14     	; 0x24d4 <wizphy_setphyconf+0x2c>
    24c6:	82 81       	ldd	r24, Z+2	; 0x02
    24c8:	81 30       	cpi	r24, 0x01	; 1
    24ca:	11 f4       	brne	.+4      	; 0x24d0 <wizphy_setphyconf+0x28>
    24cc:	48 61       	ori	r20, 0x18	; 24
    24ce:	06 c0       	rjmp	.+12     	; 0x24dc <wizphy_setphyconf+0x34>
    24d0:	48 60       	ori	r20, 0x08	; 8
    24d2:	04 c0       	rjmp	.+8      	; 0x24dc <wizphy_setphyconf+0x34>
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	81 30       	cpi	r24, 0x01	; 1
    24d8:	09 f4       	brne	.+2      	; 0x24dc <wizphy_setphyconf+0x34>
    24da:	40 61       	ori	r20, 0x10	; 16
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	7e e2       	ldi	r23, 0x2E	; 46
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9f da       	rcall	.-2754   	; 0x1a24 <WIZCHIP_WRITE>
    24e6:	c7 cf       	rjmp	.-114    	; 0x2476 <wizphy_reset>
    24e8:	08 95       	ret

000024ea <wizphy_getphyconf>:
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	ec 01       	movw	r28, r24
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	7e e2       	ldi	r23, 0x2E	; 46
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	2e da       	rcall	.-2980   	; 0x1956 <WIZCHIP_READ>
    24fa:	86 fb       	bst	r24, 6
    24fc:	99 27       	eor	r25, r25
    24fe:	90 f9       	bld	r25, 0
    2500:	98 83       	st	Y, r25
    2502:	88 73       	andi	r24, 0x38	; 56
    2504:	80 32       	cpi	r24, 0x20	; 32
    2506:	11 f0       	breq	.+4      	; 0x250c <wizphy_getphyconf+0x22>
    2508:	88 33       	cpi	r24, 0x38	; 56
    250a:	19 f4       	brne	.+6      	; 0x2512 <wizphy_getphyconf+0x28>
    250c:	91 e0       	ldi	r25, 0x01	; 1
    250e:	99 83       	std	Y+1, r25	; 0x01
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <wizphy_getphyconf+0x2a>
    2512:	19 82       	std	Y+1, r1	; 0x01
    2514:	88 31       	cpi	r24, 0x18	; 24
    2516:	21 f0       	breq	.+8      	; 0x2520 <wizphy_getphyconf+0x36>
    2518:	80 32       	cpi	r24, 0x20	; 32
    251a:	11 f0       	breq	.+4      	; 0x2520 <wizphy_getphyconf+0x36>
    251c:	80 31       	cpi	r24, 0x10	; 16
    251e:	19 f4       	brne	.+6      	; 0x2526 <wizphy_getphyconf+0x3c>
    2520:	91 e0       	ldi	r25, 0x01	; 1
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <wizphy_getphyconf+0x3e>
    2526:	1a 82       	std	Y+2, r1	; 0x02
    2528:	88 31       	cpi	r24, 0x18	; 24
    252a:	21 f0       	breq	.+8      	; 0x2534 <wizphy_getphyconf+0x4a>
    252c:	80 32       	cpi	r24, 0x20	; 32
    252e:	11 f0       	breq	.+4      	; 0x2534 <wizphy_getphyconf+0x4a>
    2530:	88 30       	cpi	r24, 0x08	; 8
    2532:	19 f4       	brne	.+6      	; 0x253a <wizphy_getphyconf+0x50>
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	8b 83       	std	Y+3, r24	; 0x03
    2538:	01 c0       	rjmp	.+2      	; 0x253c <wizphy_getphyconf+0x52>
    253a:	1b 82       	std	Y+3, r1	; 0x03
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	08 95       	ret

00002542 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
    2542:	cf 93       	push	r28
    2544:	c8 2f       	mov	r28, r24
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
    2546:	60 e0       	ldi	r22, 0x00	; 0
    2548:	7e e2       	ldi	r23, 0x2E	; 46
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	03 da       	rcall	.-3066   	; 0x1956 <WIZCHIP_READ>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    2550:	86 ff       	sbrs	r24, 6
    2552:	1d c0       	rjmp	.+58     	; 0x258e <wizphy_setphypmode+0x4c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
    2554:	87 7c       	andi	r24, 0xC7	; 199
   if( pmode == PHY_POWER_DOWN)
    2556:	c1 30       	cpi	r28, 0x01	; 1
    2558:	19 f4       	brne	.+6      	; 0x2560 <wizphy_setphypmode+0x1e>
      tmp |= PHYCFGR_OPMDC_PDOWN;
    255a:	48 2f       	mov	r20, r24
    255c:	40 63       	ori	r20, 0x30	; 48
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <wizphy_setphypmode+0x22>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
    2560:	48 2f       	mov	r20, r24
    2562:	48 63       	ori	r20, 0x38	; 56
   setPHYCFGR(tmp);
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	7e e2       	ldi	r23, 0x2E	; 46
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	90 e0       	ldi	r25, 0x00	; 0
   wizphy_reset();
    256c:	5b da       	rcall	.-2890   	; 0x1a24 <WIZCHIP_WRITE>
    256e:	83 df       	rcall	.-250    	; 0x2476 <wizphy_reset>
   tmp = getPHYCFGR();
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	7e e2       	ldi	r23, 0x2E	; 46
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	ee d9       	rcall	.-3108   	; 0x1956 <WIZCHIP_READ>
   if( pmode == PHY_POWER_DOWN)
    257a:	c1 30       	cpi	r28, 0x01	; 1
    257c:	21 f4       	brne	.+8      	; 0x2586 <wizphy_setphypmode+0x44>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    257e:	80 73       	andi	r24, 0x30	; 48
    2580:	41 f4       	brne	.+16     	; 0x2592 <wizphy_setphypmode+0x50>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
   }
   return -1;
    2582:	8f ef       	ldi	r24, 0xFF	; 255
    2584:	09 c0       	rjmp	.+18     	; 0x2598 <wizphy_setphypmode+0x56>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    2586:	88 73       	andi	r24, 0x38	; 56
    2588:	31 f4       	brne	.+12     	; 0x2596 <wizphy_setphypmode+0x54>
   }
   return -1;
    258a:	8f ef       	ldi	r24, 0xFF	; 255
    258c:	05 c0       	rjmp	.+10     	; 0x2598 <wizphy_setphypmode+0x56>

int8_t wizphy_setphypmode(uint8_t pmode)
{
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    258e:	8f ef       	ldi	r24, 0xFF	; 255
    2590:	03 c0       	rjmp	.+6      	; 0x2598 <wizphy_setphypmode+0x56>
   setPHYCFGR(tmp);
   wizphy_reset();
   tmp = getPHYCFGR();
   if( pmode == PHY_POWER_DOWN)
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <wizphy_setphypmode+0x56>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    2596:	80 e0       	ldi	r24, 0x00	; 0
   }
   return -1;
}
    2598:	cf 91       	pop	r28
    259a:	08 95       	ret

0000259c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
    259c:	0f 93       	push	r16
    259e:	1f 93       	push	r17
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
    25a4:	00 e0       	ldi	r16, 0x00	; 0
    25a6:	10 e0       	ldi	r17, 0x00	; 0
    25a8:	98 01       	movw	r18, r16
   switch(cwtype)
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	80 31       	cpi	r24, 0x10	; 16
    25ae:	91 05       	cpc	r25, r1
    25b0:	38 f4       	brcc	.+14     	; 0x25c0 <ctlwizchip+0x24>
    25b2:	eb 01       	movw	r28, r22
    25b4:	fc 01       	movw	r30, r24
    25b6:	88 27       	eor	r24, r24
    25b8:	e6 56       	subi	r30, 0x66	; 102
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	8f 4f       	sbci	r24, 0xFF	; 255
    25be:	c8 c3       	rjmp	.+1936   	; 0x2d50 <__tablejump2__>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
    25c0:	8f ef       	ldi	r24, 0xFF	; 255
#endif
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
    25c2:	71 c0       	rjmp	.+226    	; 0x26a6 <ctlwizchip+0x10a>
    25c4:	14 de       	rcall	.-984    	; 0x21ee <wizchip_sw_reset>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    25c6:	80 e0       	ldi	r24, 0x00	; 0
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
         break;
    25c8:	6e c0       	rjmp	.+220    	; 0x26a6 <ctlwizchip+0x10a>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
    25ca:	cd 2b       	or	r28, r29
    25cc:	21 f0       	breq	.+8      	; 0x25d6 <ctlwizchip+0x3a>
         {
            ptmp[0] = (uint8_t*)arg;
    25ce:	8b 01       	movw	r16, r22
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
    25d0:	9b 01       	movw	r18, r22
    25d2:	28 5f       	subi	r18, 0xF8	; 248
    25d4:	3f 4f       	sbci	r19, 0xFF	; 255
         }
         return wizchip_init(ptmp[0], ptmp[1]);
    25d6:	b9 01       	movw	r22, r18
    25d8:	c8 01       	movw	r24, r16
    25da:	75 de       	rcall	.-790    	; 0x22c6 <wizchip_init>
    25dc:	64 c0       	rjmp	.+200    	; 0x26a6 <ctlwizchip+0x10a>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
    25de:	88 81       	ld	r24, Y
    25e0:	99 81       	ldd	r25, Y+1	; 0x01
    25e2:	ea de       	rcall	.-556    	; 0x23b8 <wizchip_clrinterrupt>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    25e4:	80 e0       	ldi	r24, 0x00	; 0
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
         }
         return wizchip_init(ptmp[0], ptmp[1]);
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
         break;
    25e6:	5f c0       	rjmp	.+190    	; 0x26a6 <ctlwizchip+0x10a>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
    25e8:	f8 de       	rcall	.-528    	; 0x23da <wizchip_getinterrupt>
    25ea:	99 83       	std	Y+1, r25	; 0x01
    25ec:	88 83       	st	Y, r24
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    25ee:	80 e0       	ldi	r24, 0x00	; 0
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
         break;
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
         break;
    25f0:	5a c0       	rjmp	.+180    	; 0x26a6 <ctlwizchip+0x10a>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
    25f2:	88 81       	ld	r24, Y
    25f4:	99 81       	ldd	r25, Y+1	; 0x01
    25f6:	05 df       	rcall	.-502    	; 0x2402 <wizchip_setinterruptmask>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    25f8:	80 e0       	ldi	r24, 0x00	; 0
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
         break;
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
         break;         
    25fa:	55 c0       	rjmp	.+170    	; 0x26a6 <ctlwizchip+0x10a>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
    25fc:	12 df       	rcall	.-476    	; 0x2422 <wizchip_getinterruptmask>
    25fe:	99 83       	std	Y+1, r25	; 0x01
    2600:	88 83       	st	Y, r24
    2602:	80 e0       	ldi	r24, 0x00	; 0
         break;
    2604:	50 c0       	rjmp	.+160    	; 0x26a6 <ctlwizchip+0x10a>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
    2606:	49 81       	ldd	r20, Y+1	; 0x01
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	73 e1       	ldi	r23, 0x13	; 19
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	09 da       	rcall	.-3054   	; 0x1a24 <WIZCHIP_WRITE>
    2612:	48 81       	ld	r20, Y
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	74 e1       	ldi	r23, 0x14	; 20
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	03 da       	rcall	.-3066   	; 0x1a24 <WIZCHIP_WRITE>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    261e:	80 e0       	ldi	r24, 0x00	; 0
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
         break;
    2620:	42 c0       	rjmp	.+132    	; 0x26a6 <ctlwizchip+0x10a>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	73 e1       	ldi	r23, 0x13	; 19
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	95 d9       	rcall	.-3286   	; 0x1956 <WIZCHIP_READ>
    262c:	08 2f       	mov	r16, r24
    262e:	10 e0       	ldi	r17, 0x00	; 0
    2630:	10 2f       	mov	r17, r16
    2632:	00 27       	eor	r16, r16
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	74 e1       	ldi	r23, 0x14	; 20
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	8c d9       	rcall	.-3304   	; 0x1956 <WIZCHIP_READ>
    263e:	08 0f       	add	r16, r24
    2640:	11 1d       	adc	r17, r1
    2642:	19 83       	std	Y+1, r17	; 0x01
    2644:	08 83       	st	Y, r16
    2646:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    2648:	2e c0       	rjmp	.+92     	; 0x26a6 <ctlwizchip+0x10a>
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
         break;
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
    264a:	e6 e0       	ldi	r30, 0x06	; 6
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
    264c:	f2 e0       	ldi	r31, 0x02	; 2
    264e:	82 81       	ldd	r24, Z+2	; 0x02
    2650:	88 83       	st	Y, r24
    2652:	83 81       	ldd	r24, Z+3	; 0x03
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
    2654:	89 83       	std	Y+1, r24	; 0x01
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
    2656:	84 81       	ldd	r24, Z+4	; 0x04
    2658:	8a 83       	std	Y+2, r24	; 0x02
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
    265a:	85 81       	ldd	r24, Z+5	; 0x05
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
    265c:	8b 83       	std	Y+3, r24	; 0x03
    265e:	86 81       	ldd	r24, Z+6	; 0x06
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    2660:	8c 83       	std	Y+4, r24	; 0x04
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
         ((uint8_t*)arg)[5] = 0;
         break;
    2662:	1d 82       	std	Y+5, r1	; 0x05
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
    2664:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    2666:	1f c0       	rjmp	.+62     	; 0x26a6 <ctlwizchip+0x10a>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
         break;
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
    2668:	06 df       	rcall	.-500    	; 0x2476 <wizphy_reset>
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	1c c0       	rjmp	.+56     	; 0x26a6 <ctlwizchip+0x10a>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    266e:	cb 01       	movw	r24, r22
      case CW_RESET_PHY:
         wizphy_reset();
         break;
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
         break;
    2670:	1b df       	rcall	.-458    	; 0x24a8 <wizphy_setphyconf>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	18 c0       	rjmp	.+48     	; 0x26a6 <ctlwizchip+0x10a>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    2676:	cb 01       	movw	r24, r22
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
         break;
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
         break;
    2678:	38 df       	rcall	.-400    	; 0x24ea <wizphy_getphyconf>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	14 c0       	rjmp	.+40     	; 0x26a6 <ctlwizchip+0x10a>
    267e:	88 81       	ld	r24, Y
    2680:	60 df       	rcall	.-320    	; 0x2542 <wizphy_setphypmode>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
    2682:	11 c0       	rjmp	.+34     	; 0x26a6 <ctlwizchip+0x10a>
    2684:	ec de       	rcall	.-552    	; 0x245e <wizphy_getphypmode>
         if((int8_t)tmp == -1) return -1;
    2686:	8f 3f       	cpi	r24, 0xFF	; 255
    2688:	59 f0       	breq	.+22     	; 0x26a0 <ctlwizchip+0x104>
         *(uint8_t*)arg = tmp;
    268a:	88 83       	st	Y, r24
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    268c:	80 e0       	ldi	r24, 0x00	; 0
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
    268e:	0b c0       	rjmp	.+22     	; 0x26a6 <ctlwizchip+0x10a>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
    2690:	db de       	rcall	.-586    	; 0x2448 <wizphy_getphylink>
    2692:	8f 3f       	cpi	r24, 0xFF	; 255
         if((int8_t)tmp == -1) return -1;
    2694:	39 f0       	breq	.+14     	; 0x26a4 <ctlwizchip+0x108>
    2696:	88 83       	st	Y, r24
         *(uint8_t*)arg = tmp;
    2698:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    269a:	05 c0       	rjmp	.+10     	; 0x26a6 <ctlwizchip+0x10a>
         break;
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
    269c:	80 e0       	ldi	r24, 0x00	; 0
   #endif      
      default:
         return -1;
   }
   return 0;
    269e:	03 c0       	rjmp	.+6      	; 0x26a6 <ctlwizchip+0x10a>
    26a0:	8f ef       	ldi	r24, 0xFF	; 255
         return wizphy_setphypmode(*(uint8_t*)arg);
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
         if((int8_t)tmp == -1) return -1;
    26a2:	01 c0       	rjmp	.+2      	; 0x26a6 <ctlwizchip+0x10a>
    26a4:	8f ef       	ldi	r24, 0xFF	; 255
         *(uint8_t*)arg = tmp;
         break;
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
         if((int8_t)tmp == -1) return -1;
    26a6:	df 91       	pop	r29
   #endif      
      default:
         return -1;
   }
   return 0;
}
    26a8:	cf 91       	pop	r28
    26aa:	1f 91       	pop	r17
    26ac:	0f 91       	pop	r16
    26ae:	08 95       	ret

000026b0 <wizchip_setnetinfo>:
    26b0:	cf 93       	push	r28
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    26b2:	df 93       	push	r29
    26b4:	ec 01       	movw	r28, r24
   setSHAR(pnetinfo->mac);
    26b6:	26 e0       	ldi	r18, 0x06	; 6
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	ac 01       	movw	r20, r24
    26bc:	60 e0       	ldi	r22, 0x00	; 0
    26be:	79 e0       	ldi	r23, 0x09	; 9
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	a3 da       	rcall	.-2746   	; 0x1c0c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
    26c6:	ae 01       	movw	r20, r28
    26c8:	42 5f       	subi	r20, 0xF2	; 242
    26ca:	5f 4f       	sbci	r21, 0xFF	; 255
    26cc:	24 e0       	ldi	r18, 0x04	; 4
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	71 e0       	ldi	r23, 0x01	; 1
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	99 da       	rcall	.-2766   	; 0x1c0c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
    26da:	ae 01       	movw	r20, r28
    26dc:	46 5f       	subi	r20, 0xF6	; 246
    26de:	5f 4f       	sbci	r21, 0xFF	; 255
    26e0:	24 e0       	ldi	r18, 0x04	; 4
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	60 e0       	ldi	r22, 0x00	; 0
    26e6:	75 e0       	ldi	r23, 0x05	; 5
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	8f da       	rcall	.-2786   	; 0x1c0c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
    26ee:	ae 01       	movw	r20, r28
    26f0:	4a 5f       	subi	r20, 0xFA	; 250
    26f2:	5f 4f       	sbci	r21, 0xFF	; 255
    26f4:	24 e0       	ldi	r18, 0x04	; 4
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	60 e0       	ldi	r22, 0x00	; 0
    26fa:	7f e0       	ldi	r23, 0x0F	; 15
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	85 da       	rcall	.-2806   	; 0x1c0c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
    2702:	8a 89       	ldd	r24, Y+18	; 0x12
    2704:	e5 e5       	ldi	r30, 0x55	; 85
    2706:	f4 e0       	ldi	r31, 0x04	; 4
    2708:	80 83       	st	Z, r24
   _DNS_[1] = pnetinfo->dns[1];
    270a:	8b 89       	ldd	r24, Y+19	; 0x13
    270c:	81 83       	std	Z+1, r24	; 0x01
   _DNS_[2] = pnetinfo->dns[2];
    270e:	8c 89       	ldd	r24, Y+20	; 0x14
    2710:	82 83       	std	Z+2, r24	; 0x02
   _DNS_[3] = pnetinfo->dns[3];
    2712:	8d 89       	ldd	r24, Y+21	; 0x15
    2714:	83 83       	std	Z+3, r24	; 0x03
   _DHCP_   = pnetinfo->dhcp;
    2716:	8e 89       	ldd	r24, Y+22	; 0x16
    2718:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <_DHCP_>
}
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	08 95       	ret

00002722 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
    2722:	cf 93       	push	r28
    2724:	df 93       	push	r29
    2726:	ec 01       	movw	r28, r24
   getSHAR(pnetinfo->mac);
    2728:	26 e0       	ldi	r18, 0x06	; 6
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	ac 01       	movw	r20, r24
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	79 e0       	ldi	r23, 0x09	; 9
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	e8 d9       	rcall	.-3120   	; 0x1b08 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
    2738:	ae 01       	movw	r20, r28
    273a:	42 5f       	subi	r20, 0xF2	; 242
    273c:	5f 4f       	sbci	r21, 0xFF	; 255
    273e:	24 e0       	ldi	r18, 0x04	; 4
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	71 e0       	ldi	r23, 0x01	; 1
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	de d9       	rcall	.-3140   	; 0x1b08 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
    274c:	ae 01       	movw	r20, r28
    274e:	46 5f       	subi	r20, 0xF6	; 246
    2750:	5f 4f       	sbci	r21, 0xFF	; 255
    2752:	24 e0       	ldi	r18, 0x04	; 4
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	75 e0       	ldi	r23, 0x05	; 5
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	d4 d9       	rcall	.-3160   	; 0x1b08 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
    2760:	ae 01       	movw	r20, r28
    2762:	4a 5f       	subi	r20, 0xFA	; 250
    2764:	5f 4f       	sbci	r21, 0xFF	; 255
    2766:	24 e0       	ldi	r18, 0x04	; 4
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	7f e0       	ldi	r23, 0x0F	; 15
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	ca d9       	rcall	.-3180   	; 0x1b08 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
    2774:	e5 e5       	ldi	r30, 0x55	; 85
    2776:	f4 e0       	ldi	r31, 0x04	; 4
    2778:	80 81       	ld	r24, Z
    277a:	8a 8b       	std	Y+18, r24	; 0x12
   pnetinfo->dns[1]= _DNS_[1];
    277c:	81 81       	ldd	r24, Z+1	; 0x01
    277e:	8b 8b       	std	Y+19, r24	; 0x13
   pnetinfo->dns[2]= _DNS_[2];
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	8c 8b       	std	Y+20, r24	; 0x14
   pnetinfo->dns[3]= _DNS_[3];
    2784:	83 81       	ldd	r24, Z+3	; 0x03
    2786:	8d 8b       	std	Y+21, r24	; 0x15
   pnetinfo->dhcp  = _DHCP_;
    2788:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <_DHCP_>
    278c:	8e 8b       	std	Y+22, r24	; 0x16
}
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	08 95       	ret

00002794 <freeRam>:
//Wiznet FUNC headers
void print_network_information(void);

// RAM Memory usage test
static int freeRam (void)
{
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	1f 92       	push	r1
    279a:	1f 92       	push	r1
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
	extern int __heap_start, *__brkval;
	int v;
	int _res = (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
    27a0:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <__brkval>
    27a4:	90 91 ee 06 	lds	r25, 0x06EE	; 0x8006ee <__brkval+0x1>
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	11 f0       	breq	.+4      	; 0x27b0 <freeRam+0x1c>
    27ac:	9c 01       	movw	r18, r24
    27ae:	02 c0       	rjmp	.+4      	; 0x27b4 <freeRam+0x20>
    27b0:	28 ef       	ldi	r18, 0xF8	; 248
    27b2:	36 e0       	ldi	r19, 0x06	; 6
	return _res;
}
    27b4:	ce 01       	movw	r24, r28
    27b6:	01 96       	adiw	r24, 0x01	; 1
    27b8:	82 1b       	sub	r24, r18
    27ba:	93 0b       	sbc	r25, r19
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	08 95       	ret

000027c6 <cs_sel>:

unsigned char ethBuf0[ETH_MAX_BUF_SIZE];
unsigned char ethBuf1[ETH_MAX_BUF_SIZE];

void cs_sel() {
	SPI_WIZNET_ENABLE();
    27c6:	8b b1       	in	r24, 0x0b	; 11
    27c8:	8f 7e       	andi	r24, 0xEF	; 239
    27ca:	8b b9       	out	0x0b, r24	; 11
    27cc:	08 95       	ret

000027ce <cs_desel>:
}

void cs_desel() {
	SPI_WIZNET_DISABLE();
    27ce:	8b b1       	in	r24, 0x0b	; 11
    27d0:	80 61       	ori	r24, 0x10	; 16
    27d2:	8b b9       	out	0x0b, r24	; 11
    27d4:	08 95       	ret

000027d6 <spi_rb>:
}

uint8_t spi_rb(void) {
	uint8_t rbuf;
	SPI_READ(rbuf);
    27d6:	1e bc       	out	0x2e, r1	; 46
    27d8:	0d b4       	in	r0, 0x2d	; 45
    27da:	07 fe       	sbrs	r0, 7
    27dc:	fd cf       	rjmp	.-6      	; 0x27d8 <spi_rb+0x2>
    27de:	8e b5       	in	r24, 0x2e	; 46
	return rbuf;
}
    27e0:	08 95       	ret

000027e2 <spi_wb>:

void spi_wb(uint8_t b) {
	SPI_WRITE(b);
    27e2:	8e bd       	out	0x2e, r24	; 46
    27e4:	0d b4       	in	r0, 0x2d	; 45
    27e6:	07 fe       	sbrs	r0, 7
    27e8:	fd cf       	rjmp	.-6      	; 0x27e4 <spi_wb+0x2>
}
    27ea:	08 95       	ret

000027ec <spi_rb_burst>:

void spi_rb_burst(uint8_t *buf, uint16_t len) {
    27ec:	fc 01       	movw	r30, r24
	for (uint16_t var = 0; var < len; var++) {
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	09 c0       	rjmp	.+18     	; 0x2806 <spi_rb_burst+0x1a>
		SPI_READ(*buf++);
    27f4:	1e bc       	out	0x2e, r1	; 46
    27f6:	0d b4       	in	r0, 0x2d	; 45
    27f8:	07 fe       	sbrs	r0, 7
    27fa:	fd cf       	rjmp	.-6      	; 0x27f6 <spi_rb_burst+0xa>
    27fc:	8e b5       	in	r24, 0x2e	; 46
    27fe:	80 83       	st	Z, r24
void spi_wb(uint8_t b) {
	SPI_WRITE(b);
}

void spi_rb_burst(uint8_t *buf, uint16_t len) {
	for (uint16_t var = 0; var < len; var++) {
    2800:	2f 5f       	subi	r18, 0xFF	; 255
    2802:	3f 4f       	sbci	r19, 0xFF	; 255
		SPI_READ(*buf++);
    2804:	31 96       	adiw	r30, 0x01	; 1
void spi_wb(uint8_t b) {
	SPI_WRITE(b);
}

void spi_rb_burst(uint8_t *buf, uint16_t len) {
	for (uint16_t var = 0; var < len; var++) {
    2806:	26 17       	cp	r18, r22
    2808:	37 07       	cpc	r19, r23
    280a:	a0 f3       	brcs	.-24     	; 0x27f4 <spi_rb_burst+0x8>
		SPI_READ(*buf++);
	}
}
    280c:	08 95       	ret

0000280e <spi_wb_burst>:

void spi_wb_burst(uint8_t *buf, uint16_t len) {
    280e:	fc 01       	movw	r30, r24
	for (uint16_t var = 0; var < len; var++) {
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	0a c0       	rjmp	.+20     	; 0x282a <spi_wb_burst+0x1c>
		SPI_WRITE(*buf++);
    2816:	cf 01       	movw	r24, r30
    2818:	01 96       	adiw	r24, 0x01	; 1
    281a:	40 81       	ld	r20, Z
    281c:	4e bd       	out	0x2e, r20	; 46
    281e:	0d b4       	in	r0, 0x2d	; 45
    2820:	07 fe       	sbrs	r0, 7
    2822:	fd cf       	rjmp	.-6      	; 0x281e <spi_wb_burst+0x10>
		SPI_READ(*buf++);
	}
}

void spi_wb_burst(uint8_t *buf, uint16_t len) {
	for (uint16_t var = 0; var < len; var++) {
    2824:	2f 5f       	subi	r18, 0xFF	; 255
    2826:	3f 4f       	sbci	r19, 0xFF	; 255
		SPI_WRITE(*buf++);
    2828:	fc 01       	movw	r30, r24
		SPI_READ(*buf++);
	}
}

void spi_wb_burst(uint8_t *buf, uint16_t len) {
	for (uint16_t var = 0; var < len; var++) {
    282a:	26 17       	cp	r18, r22
    282c:	37 07       	cpc	r19, r23
    282e:	98 f3       	brcs	.-26     	; 0x2816 <spi_wb_burst+0x8>
		SPI_WRITE(*buf++);
	}
}
    2830:	08 95       	ret

00002832 <__vector_21>:


//******************* MILLIS ENGINE: BEGIN
//ISR (TIMER0_COMP_vect )
ISR (TIMER0_COMPA_vect)
{
    2832:	1f 92       	push	r1
    2834:	0f 92       	push	r0
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	0f 92       	push	r0
    283a:	11 24       	eor	r1, r1
    283c:	8f 93       	push	r24
    283e:	9f 93       	push	r25
    2840:	af 93       	push	r26
    2842:	bf 93       	push	r27
	// Compare match Timer0
	// Here every 1ms
	_millis++; // INC millis tick
    2844:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <_millis>
    2848:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <_millis+0x1>
    284c:	a0 91 eb 05 	lds	r26, 0x05EB	; 0x8005eb <_millis+0x2>
    2850:	b0 91 ec 05 	lds	r27, 0x05EC	; 0x8005ec <_millis+0x3>
    2854:	01 96       	adiw	r24, 0x01	; 1
    2856:	a1 1d       	adc	r26, r1
    2858:	b1 1d       	adc	r27, r1
    285a:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <_millis>
    285e:	90 93 ea 05 	sts	0x05EA, r25	; 0x8005ea <_millis+0x1>
    2862:	a0 93 eb 05 	sts	0x05EB, r26	; 0x8005eb <_millis+0x2>
    2866:	b0 93 ec 05 	sts	0x05EC, r27	; 0x8005ec <_millis+0x3>
}
    286a:	bf 91       	pop	r27
    286c:	af 91       	pop	r26
    286e:	9f 91       	pop	r25
    2870:	8f 91       	pop	r24
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti

0000287c <IO_LIBRARY_Init>:
	for (uint16_t var = 0; var < len; var++) {
		SPI_WRITE(*buf++);
	}
}

void IO_LIBRARY_Init(void) {
    287c:	cf 93       	push	r28
    287e:	df 93       	push	r29
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	28 97       	sbiw	r28, 0x08	; 8
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	f8 94       	cli
    288a:	de bf       	out	0x3e, r29	; 62
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	cd bf       	out	0x3d, r28	; 61
	uint8_t bufSize[] = {2, 2, 2, 2, 2, 2, 2, 2};
    2890:	88 e0       	ldi	r24, 0x08	; 8
    2892:	e7 e4       	ldi	r30, 0x47	; 71
    2894:	f2 e0       	ldi	r31, 0x02	; 2
    2896:	de 01       	movw	r26, r28
    2898:	11 96       	adiw	r26, 0x01	; 1
    289a:	01 90       	ld	r0, Z+
    289c:	0d 92       	st	X+, r0
    289e:	8a 95       	dec	r24
    28a0:	e1 f7       	brne	.-8      	; 0x289a <IO_LIBRARY_Init+0x1e>

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
    28a2:	67 ee       	ldi	r22, 0xE7	; 231
    28a4:	73 e1       	ldi	r23, 0x13	; 19
    28a6:	83 ee       	ldi	r24, 0xE3	; 227
    28a8:	93 e1       	ldi	r25, 0x13	; 19
    28aa:	50 dc       	rcall	.-1888   	; 0x214c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
    28ac:	61 ef       	ldi	r22, 0xF1	; 241
    28ae:	73 e1       	ldi	r23, 0x13	; 19
    28b0:	8b ee       	ldi	r24, 0xEB	; 235
    28b2:	93 e1       	ldi	r25, 0x13	; 19
    28b4:	62 dc       	rcall	.-1852   	; 0x217a <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(spi_rb_burst, spi_wb_burst);
    28b6:	67 e0       	ldi	r22, 0x07	; 7
    28b8:	74 e1       	ldi	r23, 0x14	; 20
    28ba:	86 ef       	ldi	r24, 0xF6	; 246
    28bc:	93 e1       	ldi	r25, 0x13	; 19
    28be:	7a dc       	rcall	.-1804   	; 0x21b4 <reg_wizchip_spiburst_cbfunc>

	wizchip_init(bufSize, bufSize);
    28c0:	be 01       	movw	r22, r28
    28c2:	6f 5f       	subi	r22, 0xFF	; 255
    28c4:	7f 4f       	sbci	r23, 0xFF	; 255
    28c6:	cb 01       	movw	r24, r22
	wizchip_setnetinfo(&netInfo);
    28c8:	fe dc       	rcall	.-1540   	; 0x22c6 <wizchip_init>
    28ca:	8c e2       	ldi	r24, 0x2C	; 44
    28cc:	92 e0       	ldi	r25, 0x02	; 2
    28ce:	f0 de       	rcall	.-544    	; 0x26b0 <wizchip_setnetinfo>
	//wizchip_setinterruptmask(IK_SOCK_0);
}
    28d0:	28 96       	adiw	r28, 0x08	; 8
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	08 95       	ret

000028e2 <icmp_cb>:
		uint8_t* ip_query,\
		uint8_t type_query,\
		uint16_t id_query,\
		uint16_t seq_query,\
		uint16_t len_query)
{
    28e2:	ef 92       	push	r14
    28e4:	ff 92       	push	r15
    28e6:	0f 93       	push	r16
    28e8:	1f 93       	push	r17
    28ea:	fb 01       	movw	r30, r22
	PRINTF( "<< PING %s from %d.%d.%d.%d ID:%x Seq:%x data:%u bytes\r\n",\
    28ec:	a3 81       	ldd	r26, Z+3	; 0x03
    28ee:	72 81       	ldd	r23, Z+2	; 0x02
    28f0:	61 81       	ldd	r22, Z+1	; 0x01
    28f2:	50 81       	ld	r21, Z
    28f4:	44 23       	and	r20, r20
    28f6:	19 f0       	breq	.+6      	; 0x28fe <icmp_cb+0x1c>
    28f8:	81 e9       	ldi	r24, 0x91	; 145
    28fa:	93 e0       	ldi	r25, 0x03	; 3
    28fc:	02 c0       	rjmp	.+4      	; 0x2902 <icmp_cb+0x20>
    28fe:	89 e9       	ldi	r24, 0x99	; 153
    2900:	93 e0       	ldi	r25, 0x03	; 3
    2902:	ff 92       	push	r15
    2904:	ef 92       	push	r14
    2906:	1f 93       	push	r17
    2908:	0f 93       	push	r16
    290a:	3f 93       	push	r19
    290c:	2f 93       	push	r18
    290e:	1f 92       	push	r1
    2910:	af 93       	push	r26
    2912:	1f 92       	push	r1
    2914:	7f 93       	push	r23
    2916:	1f 92       	push	r1
    2918:	6f 93       	push	r22
    291a:	1f 92       	push	r1
    291c:	5f 93       	push	r21
    291e:	9f 93       	push	r25
    2920:	8f 93       	push	r24
    2922:	83 e1       	ldi	r24, 0x13	; 19
    2924:	92 e0       	ldi	r25, 0x02	; 2
    2926:	9f 93       	push	r25
    2928:	8f 93       	push	r24
    292a:	4f d2       	rcall	.+1182   	; 0x2dca <printf_P>
			(int16_t) ip_query[2],\
			(int16_t) ip_query[3],\
			id_query,\
			seq_query,\
			len_query);
}
    292c:	8d b7       	in	r24, 0x3d	; 61
    292e:	9e b7       	in	r25, 0x3e	; 62
    2930:	42 96       	adiw	r24, 0x12	; 18
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	f8 94       	cli
    2936:	9e bf       	out	0x3e, r25	; 62
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	8d bf       	out	0x3d, r24	; 61
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	ff 90       	pop	r15
    2942:	ef 90       	pop	r14
    2944:	08 95       	ret

00002946 <timer0_init>:
	TCCR0 = (1<<CS02)|(1<<WGM01); //TIMER0 SET-UP: CTC MODE & PS 1:64
	OCR0 = 249; // 1ms reach for clear (16mz:64=>250kHz:250-=>1kHz)
	TIMSK |= 1<<OCIE0;	 //IRQ on TIMER0 output compare
	 */
	//For M664p
	cli();
    2946:	f8 94       	cli
	TCCR0A = 0; TCCR0B = 0; TIMSK0 =  0;
    2948:	14 bc       	out	0x24, r1	; 36
    294a:	15 bc       	out	0x25, r1	; 37
    294c:	ee e6       	ldi	r30, 0x6E	; 110
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	10 82       	st	Z, r1
	
	TCCR0A = (1<<WGM01); //TIMER0 SET-UP: CTC MODE
    2952:	82 e0       	ldi	r24, 0x02	; 2
    2954:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00); // PS 1:64
    2956:	83 e0       	ldi	r24, 0x03	; 3
    2958:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249; // 1ms reach for clear (16mz:64=>250kHz:250-=>1kHz)
    295a:	89 ef       	ldi	r24, 0xF9	; 249
    295c:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= 1<<OCIE0A;	 //IRQ on TIMER0 output compareA
    295e:	80 81       	ld	r24, Z
    2960:	82 60       	ori	r24, 0x02	; 2
    2962:	80 83       	st	Z, r24
	sei();
    2964:	78 94       	sei
    2966:	08 95       	ret

00002968 <avr_init>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    2968:	99 e2       	ldi	r25, 0x29	; 41
    296a:	88 e1       	ldi	r24, 0x18	; 24
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	a8 95       	wdr
    2972:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
static void avr_init(void)
{
	// Initialize device here.
	// WatchDog INIT
	wdt_enable(WDTO_8S);  // set up wdt reset interval 2 second
	wdt_reset(); // wdt reset ~ every <2000ms
    297c:	a8 95       	wdr

	timer0_init();// Timer0 millis engine init
    297e:	e3 df       	rcall	.-58     	; 0x2946 <timer0_init>
	 *  uart1_BAUD_SELECT() (normal speed mode )
	 *  or
	 *  uart1_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
	 */

	UART_init( UART_BAUD_RATE );
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	96 e9       	ldi	r25, 0x96	; 150
    2984:	a8 d1       	rcall	.+848    	; 0x2cd6 <UART_init>
	// Define Output/Input Stream
	stdout = &uart_str;
    2986:	8e e1       	ldi	r24, 0x1E	; 30
    2988:	92 e0       	ldi	r25, 0x02	; 2
    298a:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <__iob+0x3>
    298e:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <__iob+0x2>
	sei(); //re-enable global interrupts
    2992:	78 94       	sei
    2994:	08 95       	ret

00002996 <print_network_information>:

	return;
}

void print_network_information(void)
{
    2996:	0f 93       	push	r16
    2998:	1f 93       	push	r17
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	6d 97       	sbiw	r28, 0x1d	; 29
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61

	uint8_t tmpstr[6] = {0,};
    29ae:	8e 01       	movw	r16, r28
    29b0:	0f 5f       	subi	r16, 0xFF	; 255
    29b2:	1f 4f       	sbci	r17, 0xFF	; 255
    29b4:	86 e0       	ldi	r24, 0x06	; 6
    29b6:	f8 01       	movw	r30, r16
    29b8:	11 92       	st	Z+, r1
    29ba:	8a 95       	dec	r24
    29bc:	e9 f7       	brne	.-6      	; 0x29b8 <print_network_information+0x22>
	ctlwizchip(CW_GET_ID,(void*)tmpstr); // Get WIZCHIP name
    29be:	b8 01       	movw	r22, r16
    29c0:	88 e0       	ldi	r24, 0x08	; 8
    29c2:	ec dd       	rcall	.-1064   	; 0x259c <ctlwizchip>
    PRINTF("\r\n=======================================\r\n");
    29c4:	89 ea       	ldi	r24, 0xA9	; 169
    29c6:	91 e0       	ldi	r25, 0x01	; 1
    29c8:	9f 93       	push	r25
    29ca:	8f 93       	push	r24
    29cc:	fe d1       	rcall	.+1020   	; 0x2dca <printf_P>
    PRINTF(" WIZnet chip:  %s \r\n", tmpstr);
    29ce:	1f 93       	push	r17
    29d0:	0f 93       	push	r16
    29d2:	84 e9       	ldi	r24, 0x94	; 148
    29d4:	91 e0       	ldi	r25, 0x01	; 1
    29d6:	9f 93       	push	r25
    29d8:	8f 93       	push	r24
    29da:	f7 d1       	rcall	.+1006   	; 0x2dca <printf_P>
    PRINTF("=======================================\r\n");
    29dc:	8a e6       	ldi	r24, 0x6A	; 106
    29de:	91 e0       	ldi	r25, 0x01	; 1
    29e0:	9f 93       	push	r25
    29e2:	8f 93       	push	r24

	wiz_NetInfo gWIZNETINFO;
	wizchip_getnetinfo(&gWIZNETINFO);
    29e4:	f2 d1       	rcall	.+996    	; 0x2dca <printf_P>
    29e6:	ce 01       	movw	r24, r28
    29e8:	07 96       	adiw	r24, 0x07	; 7
    29ea:	9b de       	rcall	.-714    	; 0x2722 <wizchip_getnetinfo>
	if (gWIZNETINFO.dhcp == NETINFO_STATIC)
    29ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	81 30       	cpi	r24, 0x01	; 1
		PRINTF("STATIC IP\r\n");
    29fa:	41 f4       	brne	.+16     	; 0x2a0c <print_network_information+0x76>
    29fc:	8e e5       	ldi	r24, 0x5E	; 94
    29fe:	91 e0       	ldi	r25, 0x01	; 1
    2a00:	9f 93       	push	r25
    2a02:	8f 93       	push	r24
    2a04:	e2 d1       	rcall	.+964    	; 0x2dca <printf_P>
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
	else
		PRINTF("DHCP IP\r\n");
    2a0a:	07 c0       	rjmp	.+14     	; 0x2a1a <print_network_information+0x84>
    2a0c:	84 e5       	ldi	r24, 0x54	; 84
    2a0e:	91 e0       	ldi	r25, 0x01	; 1
    2a10:	9f 93       	push	r25
    2a12:	8f 93       	push	r24
    2a14:	da d1       	rcall	.+948    	; 0x2dca <printf_P>
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
    2a1a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a1c:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a20:	29 85       	ldd	r18, Y+9	; 0x09
    2a22:	98 85       	ldd	r25, Y+8	; 0x08
    2a24:	8f 81       	ldd	r24, Y+7	; 0x07
    2a26:	1f 92       	push	r1
    2a28:	5f 93       	push	r21
    2a2a:	1f 92       	push	r1
    2a2c:	4f 93       	push	r20
    2a2e:	1f 92       	push	r1
    2a30:	3f 93       	push	r19
    2a32:	1f 92       	push	r1
    2a34:	2f 93       	push	r18
    2a36:	1f 92       	push	r1
    2a38:	9f 93       	push	r25
    2a3a:	1f 92       	push	r1
    2a3c:	8f 93       	push	r24
    2a3e:	8f e9       	ldi	r24, 0x9F	; 159
    2a40:	93 e0       	ldi	r25, 0x03	; 3
    2a42:	9f 93       	push	r25
    2a44:	8f 93       	push	r24
    2a46:	ae d1       	rcall	.+860    	; 0x2da4 <printf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
    2a48:	38 89       	ldd	r19, Y+16	; 0x10
    2a4a:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a50:	1f 92       	push	r1
    2a52:	3f 93       	push	r19
    2a54:	1f 92       	push	r1
    2a56:	2f 93       	push	r18
    2a58:	1f 92       	push	r1
    2a5a:	9f 93       	push	r25
    2a5c:	1f 92       	push	r1
    2a5e:	8f 93       	push	r24
    2a60:	8c ec       	ldi	r24, 0xCC	; 204
    2a62:	93 e0       	ldi	r25, 0x03	; 3
    2a64:	9f 93       	push	r25
    2a66:	8f 93       	push	r24
    2a68:	9d d1       	rcall	.+826    	; 0x2da4 <printf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
    2a6a:	3c 89       	ldd	r19, Y+20	; 0x14
    2a6c:	2b 89       	ldd	r18, Y+19	; 0x13
    2a6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a70:	89 89       	ldd	r24, Y+17	; 0x11
    2a72:	1f 92       	push	r1
    2a74:	3f 93       	push	r19
    2a76:	1f 92       	push	r1
    2a78:	2f 93       	push	r18
    2a7a:	1f 92       	push	r1
    2a7c:	9f 93       	push	r25
    2a7e:	1f 92       	push	r1
    2a80:	8f 93       	push	r24
    2a82:	87 ee       	ldi	r24, 0xE7	; 231
    2a84:	93 e0       	ldi	r25, 0x03	; 3
    2a86:	9f 93       	push	r25
    2a88:	8f 93       	push	r24
    2a8a:	8c d1       	rcall	.+792    	; 0x2da4 <printf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
    2a8c:	38 8d       	ldd	r19, Y+24	; 0x18
    2a8e:	2f 89       	ldd	r18, Y+23	; 0x17
    2a90:	9e 89       	ldd	r25, Y+22	; 0x16
    2a92:	8d 89       	ldd	r24, Y+21	; 0x15
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	f8 94       	cli
    2a98:	de bf       	out	0x3e, r29	; 62
    2a9a:	0f be       	out	0x3f, r0	; 63
    2a9c:	cd bf       	out	0x3d, r28	; 61
    2a9e:	1f 92       	push	r1
    2aa0:	3f 93       	push	r19
    2aa2:	1f 92       	push	r1
    2aa4:	2f 93       	push	r18
    2aa6:	1f 92       	push	r1
    2aa8:	9f 93       	push	r25
    2aaa:	1f 92       	push	r1
    2aac:	8f 93       	push	r24
    2aae:	82 e0       	ldi	r24, 0x02	; 2
    2ab0:	94 e0       	ldi	r25, 0x04	; 4
    2ab2:	9f 93       	push	r25
    2ab4:	8f 93       	push	r24
    2ab6:	76 d1       	rcall	.+748    	; 0x2da4 <printf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
    2ab8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2aba:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2abc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2abe:	89 8d       	ldd	r24, Y+25	; 0x19
    2ac0:	1f 92       	push	r1
    2ac2:	3f 93       	push	r19
    2ac4:	1f 92       	push	r1
    2ac6:	2f 93       	push	r18
    2ac8:	1f 92       	push	r1
    2aca:	9f 93       	push	r25
    2acc:	1f 92       	push	r1
    2ace:	8f 93       	push	r24
    2ad0:	8d e1       	ldi	r24, 0x1D	; 29
    2ad2:	94 e0       	ldi	r25, 0x04	; 4
    2ad4:	9f 93       	push	r25
    2ad6:	8f 93       	push	r24
    2ad8:	65 d1       	rcall	.+714    	; 0x2da4 <printf>
}
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	f8 94       	cli
    2ade:	de bf       	out	0x3e, r29	; 62
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	cd bf       	out	0x3d, r28	; 61
    2ae4:	6d 96       	adiw	r28, 0x1d	; 29
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	df 91       	pop	r29
    2af2:	cf 91       	pop	r28
    2af4:	1f 91       	pop	r17
    2af6:	0f 91       	pop	r16
    2af8:	08 95       	ret

00002afa <main>:
int main()
{
	//uint8_t prev_sw1 = 1; // VAR for sw1 pressing detect

	// INIT MCU
	avr_init();
    2afa:	36 df       	rcall	.-404    	; 0x2968 <avr_init>
	spi_init(); //SPI Master, MODE0, 4Mhz(DIV4), CS_PB.3=HIGH - suitable for WIZNET 5x00(1/2/5)
    2afc:	d9 d0       	rcall	.+434    	; 0x2cb0 <spi_init>

	// Print program metrics
	//PRINTF("%S", str_prog_name);// ???????? ?????????
	//PRINTF("Compiled at: %S %S\r\n", compile_time, compile_date);// ????? ???? ??????????
	//PRINTF(">> MCU is: %S; CLK is: %luHz\r\n", str_mcu, F_CPU);// MCU Name && FREQ
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());
    2afe:	4a de       	rcall	.-876    	; 0x2794 <freeRam>
    2b00:	9f 93       	push	r25
    2b02:	8f 93       	push	r24
    2b04:	88 ef       	ldi	r24, 0xF8	; 248
    2b06:	91 e0       	ldi	r25, 0x01	; 1
    2b08:	9f 93       	push	r25
    2b0a:	8f 93       	push	r24
    2b0c:	5e d1       	rcall	.+700    	; 0x2dca <printf_P>
    2b0e:	0f 90       	pop	r0

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
	while(i--)
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	83 e0       	ldi	r24, 0x03	; 3
	//PRINTF("Compiled at: %S %S\r\n", compile_time, compile_date);// ????? ???? ??????????
	//PRINTF(">> MCU is: %S; CLK is: %luHz\r\n", str_mcu, F_CPU);// MCU Name && FREQ
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
    2b18:	1a c0       	rjmp	.+52     	; 0x2b4e <main+0x54>
	while(i--)
    2b1a:	85 b1       	in	r24, 0x05	; 5
	{
		LED0ON;
    2b1c:	8f 7e       	andi	r24, 0xEF	; 239
    2b1e:	85 b9       	out	0x05, r24	; 5
    2b20:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b22:	30 e7       	ldi	r19, 0x70	; 112
    2b24:	82 e0       	ldi	r24, 0x02	; 2
    2b26:	21 50       	subi	r18, 0x01	; 1
    2b28:	30 40       	sbci	r19, 0x00	; 0
    2b2a:	80 40       	sbci	r24, 0x00	; 0
    2b2c:	e1 f7       	brne	.-8      	; 0x2b26 <main+0x2c>
    2b2e:	00 c0       	rjmp	.+0      	; 0x2b30 <main+0x36>
    2b30:	00 00       	nop
    2b32:	85 b1       	in	r24, 0x05	; 5
		_delay_ms(100);
		LED0OFF;
    2b34:	80 61       	ori	r24, 0x10	; 16
    2b36:	85 b9       	out	0x05, r24	; 5
    2b38:	2f ef       	ldi	r18, 0xFF	; 255
    2b3a:	33 ec       	ldi	r19, 0xC3	; 195
    2b3c:	89 e0       	ldi	r24, 0x09	; 9
    2b3e:	21 50       	subi	r18, 0x01	; 1
    2b40:	30 40       	sbci	r19, 0x00	; 0
    2b42:	80 40       	sbci	r24, 0x00	; 0
    2b44:	e1 f7       	brne	.-8      	; 0x2b3e <main+0x44>
    2b46:	00 c0       	rjmp	.+0      	; 0x2b48 <main+0x4e>
    2b48:	00 00       	nop
    2b4a:	a8 95       	wdr
		_delay_ms(400);
		wdt_reset();
    2b4c:	89 2f       	mov	r24, r25
	//PRINTF(">> MCU is: %S; CLK is: %luHz\r\n", str_mcu, F_CPU);// MCU Name && FREQ
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
	while(i--)
    2b4e:	9f ef       	ldi	r25, 0xFF	; 255
    2b50:	98 0f       	add	r25, r24
    2b52:	81 11       	cpse	r24, r1
		_delay_ms(400);
		wdt_reset();
	}

	//Wizchip WIZ5500 Ethernet initialize
	IO_LIBRARY_Init(); //After that ping must working
    2b54:	e2 cf       	rjmp	.-60     	; 0x2b1a <main+0x20>
    2b56:	92 de       	rcall	.-732    	; 0x287c <IO_LIBRARY_Init>
	print_network_information();
    2b58:	1e df       	rcall	.-452    	; 0x2996 <print_network_information>
    2b5a:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2b5c:	40 90 e9 05 	lds	r4, 0x05E9	; 0x8005e9 <_millis>
	// Atomic tick reading
	i = _millis;
    2b60:	50 90 ea 05 	lds	r5, 0x05EA	; 0x8005ea <_millis+0x1>
    2b64:	60 90 eb 05 	lds	r6, 0x05EB	; 0x8005eb <_millis+0x2>
    2b68:	70 90 ec 05 	lds	r7, 0x05EC	; 0x8005ec <_millis+0x3>
    2b6c:	78 94       	sei
	sei();
    2b6e:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2b70:	80 90 e9 05 	lds	r8, 0x05E9	; 0x8005e9 <_millis>
	// Atomic tick reading
	i = _millis;
    2b74:	90 90 ea 05 	lds	r9, 0x05EA	; 0x8005ea <_millis+0x1>
    2b78:	a0 90 eb 05 	lds	r10, 0x05EB	; 0x8005eb <_millis+0x2>
    2b7c:	b0 90 ec 05 	lds	r11, 0x05EC	; 0x8005ec <_millis+0x3>
    2b80:	78 94       	sei
	sei();
    2b82:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2b84:	c0 90 e9 05 	lds	r12, 0x05E9	; 0x8005e9 <_millis>
	// Atomic tick reading
	i = _millis;
    2b88:	d0 90 ea 05 	lds	r13, 0x05EA	; 0x8005ea <_millis+0x1>
    2b8c:	e0 90 eb 05 	lds	r14, 0x05EB	; 0x8005eb <_millis+0x2>
    2b90:	f0 90 ec 05 	lds	r15, 0x05EC	; 0x8005ec <_millis+0x3>
    2b94:	78 94       	sei
	sei();
    2b96:	a8 95       	wdr
	uint32_t timer_ping1 = millis();
	uint32_t timer_ping2 = millis();
	while(1)
	{
		//Here at least every 1sec
		wdt_reset(); // WDT reset at least every sec
    2b98:	48 e8       	ldi	r20, 0x88	; 136

		//Use Hercules Terminal to check loopback tcp:5000 and udp:3000
		/*
		 * https://www.hw-group.com/software/hercules-setup-utility
		 * */
		loopback_tcps(0,ethBuf0,5000);
    2b9a:	53 e1       	ldi	r21, 0x13	; 19
    2b9c:	6d ee       	ldi	r22, 0xED	; 237
    2b9e:	75 e0       	ldi	r23, 0x05	; 5
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	0e 94 57 01 	call	0x2ae	; 0x2ae <loopback_tcps>
    2ba6:	48 eb       	ldi	r20, 0xB8	; 184
		loopback_udps(1, ethBuf0, 3000);
    2ba8:	5b e0       	ldi	r21, 0x0B	; 11
    2baa:	6d ee       	ldi	r22, 0xED	; 237
    2bac:	75 e0       	ldi	r23, 0x05	; 5
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	0e 94 a0 02 	call	0x540	; 0x540 <loopback_udps>
    2bb4:	82 e0       	ldi	r24, 0x02	; 2

		/*
		 * run ICMP (ping) server
		 */
		ping_srv(2);
    2bb6:	0e 94 08 05 	call	0xa10	; 0xa10 <ping_srv>
    2bba:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2bbc:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <_millis>
	// Atomic tick reading
	i = _millis;
    2bc0:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <_millis+0x1>
    2bc4:	a0 91 eb 05 	lds	r26, 0x05EB	; 0x8005eb <_millis+0x2>
    2bc8:	b0 91 ec 05 	lds	r27, 0x05EC	; 0x8005ec <_millis+0x3>
    2bcc:	78 94       	sei
	sei();
    2bce:	88 19       	sub	r24, r8
		 * run ICMP (ping) server
		 */
		ping_srv(2);

		/*ICM Ping client example #1 - ping GW/myPC every 10 sec*/
		if((millis()-timer_ping1)> 10000)
    2bd0:	99 09       	sbc	r25, r9
    2bd2:	aa 09       	sbc	r26, r10
    2bd4:	bb 09       	sbc	r27, r11
    2bd6:	81 31       	cpi	r24, 0x11	; 17
    2bd8:	97 42       	sbci	r25, 0x27	; 39
    2bda:	a1 05       	cpc	r26, r1
    2bdc:	b1 05       	cpc	r27, r1
    2bde:	b0 f0       	brcs	.+44     	; 0x2c0c <main+0x112>
    2be0:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2be2:	80 90 e9 05 	lds	r8, 0x05E9	; 0x8005e9 <_millis>
	// Atomic tick reading
	i = _millis;
    2be6:	90 90 ea 05 	lds	r9, 0x05EA	; 0x8005ea <_millis+0x1>
    2bea:	a0 90 eb 05 	lds	r10, 0x05EB	; 0x8005eb <_millis+0x2>
    2bee:	b0 90 ec 05 	lds	r11, 0x05EC	; 0x8005ec <_millis+0x3>
	sei();
    2bf2:	78 94       	sei
		{
			timer_ping1 = millis();
			//PRINTF("\r\n>> PING GW\r\n");
			//ping_request(2, netInfo.gw);

			PRINTF("\r\n>> PING my PC\r\n");
    2bf4:	86 ee       	ldi	r24, 0xE6	; 230
    2bf6:	91 e0       	ldi	r25, 0x01	; 1
    2bf8:	9f 93       	push	r25
    2bfa:	8f 93       	push	r24
    2bfc:	e6 d0       	rcall	.+460    	; 0x2dca <printf_P>
    2bfe:	63 e4       	ldi	r22, 0x43	; 67
			ping_request(2, ping_ip); //DEVELOPER PC IP
    2c00:	72 e0       	ldi	r23, 0x02	; 2
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	0e 94 c9 03 	call	0x792	; 0x792 <ping_request>
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2c0e:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <_millis>
	// Atomic tick reading
	i = _millis;
    2c12:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <_millis+0x1>
    2c16:	a0 91 eb 05 	lds	r26, 0x05EB	; 0x8005eb <_millis+0x2>
    2c1a:	b0 91 ec 05 	lds	r27, 0x05EC	; 0x8005ec <_millis+0x3>
    2c1e:	78 94       	sei
	sei();
    2c20:	8c 19       	sub	r24, r12
			PRINTF("\r\n>> PING my PC\r\n");
			ping_request(2, ping_ip); //DEVELOPER PC IP
		}

		/*ICM Ping client example #2 - ping DNS google  every 15 sec*/
		if((millis()-timer_ping2)> 15000)
    2c22:	9d 09       	sbc	r25, r13
    2c24:	ae 09       	sbc	r26, r14
    2c26:	bf 09       	sbc	r27, r15
    2c28:	89 39       	cpi	r24, 0x99	; 153
    2c2a:	9a 43       	sbci	r25, 0x3A	; 58
    2c2c:	a1 05       	cpc	r26, r1
    2c2e:	b1 05       	cpc	r27, r1
    2c30:	b0 f0       	brcs	.+44     	; 0x2c5e <main+0x164>
    2c32:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2c34:	c0 90 e9 05 	lds	r12, 0x05E9	; 0x8005e9 <_millis>
	// Atomic tick reading
	i = _millis;
    2c38:	d0 90 ea 05 	lds	r13, 0x05EA	; 0x8005ea <_millis+0x1>
    2c3c:	e0 90 eb 05 	lds	r14, 0x05EB	; 0x8005eb <_millis+0x2>
    2c40:	f0 90 ec 05 	lds	r15, 0x05EC	; 0x8005ec <_millis+0x3>
	sei();
    2c44:	78 94       	sei

		/*ICM Ping client example #2 - ping DNS google  every 15 sec*/
		if((millis()-timer_ping2)> 15000)
		{
			timer_ping2 = millis();
			PRINTF("\r\n>>> PING DNS\r\n");
    2c46:	85 ed       	ldi	r24, 0xD5	; 213
    2c48:	91 e0       	ldi	r25, 0x01	; 1
    2c4a:	9f 93       	push	r25
    2c4c:	8f 93       	push	r24
    2c4e:	bd d0       	rcall	.+378    	; 0x2dca <printf_P>
    2c50:	6e e3       	ldi	r22, 0x3E	; 62
			ping_request(2, netInfo.dns);
    2c52:	72 e0       	ldi	r23, 0x02	; 2
    2c54:	82 e0       	ldi	r24, 0x02	; 2
    2c56:	0e 94 c9 03 	call	0x792	; 0x792 <ping_request>
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2c60:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <_millis>
	// Atomic tick reading
	i = _millis;
    2c64:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <_millis+0x1>
    2c68:	a0 91 eb 05 	lds	r26, 0x05EB	; 0x8005eb <_millis+0x2>
    2c6c:	b0 91 ec 05 	lds	r27, 0x05EC	; 0x8005ec <_millis+0x3>
    2c70:	78 94       	sei
	sei();
    2c72:	84 19       	sub	r24, r4
		}

		//loopback_ret = loopback_tcpc(SOCK_TCPS, gDATABUF, destip, destport);
		//if(loopback_ret < 0) printf("loopback ret: %ld\r\n", loopback_ret); // TCP Socket Error code

		if((millis()-timer_link_1sec)> 1000)
    2c74:	95 09       	sbc	r25, r5
    2c76:	a6 09       	sbc	r26, r6
    2c78:	b7 09       	sbc	r27, r7
    2c7a:	89 3e       	cpi	r24, 0xE9	; 233
    2c7c:	93 40       	sbci	r25, 0x03	; 3
    2c7e:	a1 05       	cpc	r26, r1
    2c80:	b1 05       	cpc	r27, r1
    2c82:	08 f4       	brcc	.+2      	; 0x2c86 <main+0x18c>
    2c84:	88 cf       	rjmp	.-240    	; 0x2b96 <main+0x9c>
    2c86:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2c88:	40 90 e9 05 	lds	r4, 0x05E9	; 0x8005e9 <_millis>
	// Atomic tick reading
	i = _millis;
    2c8c:	50 90 ea 05 	lds	r5, 0x05EA	; 0x8005ea <_millis+0x1>
    2c90:	60 90 eb 05 	lds	r6, 0x05EB	; 0x8005eb <_millis+0x2>
    2c94:	70 90 ec 05 	lds	r7, 0x05EC	; 0x8005ec <_millis+0x3>
	sei();
    2c98:	78 94       	sei

		if((millis()-timer_link_1sec)> 1000)
		{
			//here every 1 sec
			timer_link_1sec = millis();
			if(wizphy_getphylink() == PHY_LINK_ON)
    2c9a:	d6 db       	rcall	.-2132   	; 0x2448 <wizphy_getphylink>
    2c9c:	81 30       	cpi	r24, 0x01	; 1
    2c9e:	21 f4       	brne	.+8      	; 0x2ca8 <main+0x1ae>
    2ca0:	85 b1       	in	r24, 0x05	; 5
			{
				LED0ON;
    2ca2:	8f 7e       	andi	r24, 0xEF	; 239
    2ca4:	85 b9       	out	0x05, r24	; 5
    2ca6:	77 cf       	rjmp	.-274    	; 0x2b96 <main+0x9c>
    2ca8:	85 b1       	in	r24, 0x05	; 5
			}
			else
			{
				LED0OFF;
    2caa:	80 61       	ori	r24, 0x10	; 16
    2cac:	85 b9       	out	0x05, r24	; 5
    2cae:	73 cf       	rjmp	.-282    	; 0x2b96 <main+0x9c>

00002cb0 <spi_init>:

void
spi_init(void)
{
  // CS PIN for FLASH
  DDRD	|= BV(WIZNET_CS); // CS to OUT && Disable
    2cb0:	8a b1       	in	r24, 0x0a	; 10
    2cb2:	80 61       	ori	r24, 0x10	; 16
    2cb4:	8a b9       	out	0x0a, r24	; 10
  SPI_WIZNET_DISABLE();
    2cb6:	8b b1       	in	r24, 0x0b	; 11
    2cb8:	80 61       	ori	r24, 0x10	; 16
    2cba:	8b b9       	out	0x0b, r24	; 11
  
  /* Initalize ports for communication with SPI units. */
  /* CSN=SS and must be output when master! */
  DDRB  |= BV(MOSI) | BV(SCK);
    2cbc:	84 b1       	in	r24, 0x04	; 4
    2cbe:	86 60       	ori	r24, 0x06	; 6
    2cc0:	84 b9       	out	0x04, r24	; 4
  PORTB |= BV(MOSI) | BV(SCK);
    2cc2:	85 b1       	in	r24, 0x05	; 5
    2cc4:	86 60       	ori	r24, 0x06	; 6
    2cc6:	85 b9       	out	0x05, r24	; 5
  DDRD |= BV(CSN);
    2cc8:	8a b1       	in	r24, 0x0a	; 10
    2cca:	80 64       	ori	r24, 0x40	; 64
    2ccc:	8a b9       	out	0x0a, r24	; 10
 
  /* Enables SPI, selects "master", clock rate FCK / 4 - 4Mhz, and SPI mode 0 */
  SPCR = BV(SPE) | BV(MSTR);
    2cce:	80 e5       	ldi	r24, 0x50	; 80
    2cd0:	8c bd       	out	0x2c, r24	; 44
#if defined(SPI_8_MHZ)
  SPSR = BV(SPI2X); //FCK / 2 - 8Mhz
#elif defined (SPI_4_MHZ)
  SPSR = 0x0; //FCK / 4 - 4Mhz
#else
  SPSR = 0x0; //FCK / 4 - 4Mhz
    2cd2:	1d bc       	out	0x2d, r1	; 45
    2cd4:	08 95       	ret

00002cd6 <UART_init>:
}

uint8_t UART_GetChar(void){
	while (!tbi_(UCSR1A,RXC1));
	return UDR1;
}
    2cd6:	9c 01       	movw	r18, r24
    2cd8:	40 e0       	ldi	r20, 0x00	; 0
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	60 e2       	ldi	r22, 0x20	; 32
    2cde:	71 ea       	ldi	r23, 0xA1	; 161
    2ce0:	87 e0       	ldi	r24, 0x07	; 7
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	19 d0       	rcall	.+50     	; 0x2d18 <__divmodsi4>
    2ce6:	21 50       	subi	r18, 0x01	; 1
    2ce8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
    2cec:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    2cf0:	e9 ec       	ldi	r30, 0xC9	; 201
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	88 e1       	ldi	r24, 0x18	; 24
    2cf6:	80 83       	st	Z, r24
    2cf8:	86 e0       	ldi	r24, 0x06	; 6
    2cfa:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
    2cfe:	80 81       	ld	r24, Z
    2d00:	80 68       	ori	r24, 0x80	; 128
    2d02:	80 83       	st	Z, r24
    2d04:	08 95       	ret

00002d06 <printCHAR>:
int printCHAR(char character, FILE *stream)
{
	while ((UCSR1A & (1 << UDRE1)) == 0) {};
    2d06:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    2d0a:	95 ff       	sbrs	r25, 5
    2d0c:	fc cf       	rjmp	.-8      	; 0x2d06 <printCHAR>

	UDR1 = character;
    2d0e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

	return 0;
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	08 95       	ret

00002d18 <__divmodsi4>:
    2d18:	05 2e       	mov	r0, r21
    2d1a:	97 fb       	bst	r25, 7
    2d1c:	16 f4       	brtc	.+4      	; 0x2d22 <__divmodsi4+0xa>
    2d1e:	00 94       	com	r0
    2d20:	0f d0       	rcall	.+30     	; 0x2d40 <__negsi2>
    2d22:	57 fd       	sbrc	r21, 7
    2d24:	05 d0       	rcall	.+10     	; 0x2d30 <__divmodsi4_neg2>
    2d26:	1c d0       	rcall	.+56     	; 0x2d60 <__udivmodsi4>
    2d28:	07 fc       	sbrc	r0, 7
    2d2a:	02 d0       	rcall	.+4      	; 0x2d30 <__divmodsi4_neg2>
    2d2c:	46 f4       	brtc	.+16     	; 0x2d3e <__divmodsi4_exit>
    2d2e:	08 c0       	rjmp	.+16     	; 0x2d40 <__negsi2>

00002d30 <__divmodsi4_neg2>:
    2d30:	50 95       	com	r21
    2d32:	40 95       	com	r20
    2d34:	30 95       	com	r19
    2d36:	21 95       	neg	r18
    2d38:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3a:	4f 4f       	sbci	r20, 0xFF	; 255
    2d3c:	5f 4f       	sbci	r21, 0xFF	; 255

00002d3e <__divmodsi4_exit>:
    2d3e:	08 95       	ret

00002d40 <__negsi2>:
    2d40:	90 95       	com	r25
    2d42:	80 95       	com	r24
    2d44:	70 95       	com	r23
    2d46:	61 95       	neg	r22
    2d48:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4e:	08 95       	ret

00002d50 <__tablejump2__>:
    2d50:	ee 0f       	add	r30, r30
    2d52:	ff 1f       	adc	r31, r31
    2d54:	88 1f       	adc	r24, r24
    2d56:	8b bf       	out	0x3b, r24	; 59
    2d58:	07 90       	elpm	r0, Z+
    2d5a:	f6 91       	elpm	r31, Z
    2d5c:	e0 2d       	mov	r30, r0
    2d5e:	19 94       	eijmp

00002d60 <__udivmodsi4>:
    2d60:	a1 e2       	ldi	r26, 0x21	; 33
    2d62:	1a 2e       	mov	r1, r26
    2d64:	aa 1b       	sub	r26, r26
    2d66:	bb 1b       	sub	r27, r27
    2d68:	fd 01       	movw	r30, r26
    2d6a:	0d c0       	rjmp	.+26     	; 0x2d86 <__udivmodsi4_ep>

00002d6c <__udivmodsi4_loop>:
    2d6c:	aa 1f       	adc	r26, r26
    2d6e:	bb 1f       	adc	r27, r27
    2d70:	ee 1f       	adc	r30, r30
    2d72:	ff 1f       	adc	r31, r31
    2d74:	a2 17       	cp	r26, r18
    2d76:	b3 07       	cpc	r27, r19
    2d78:	e4 07       	cpc	r30, r20
    2d7a:	f5 07       	cpc	r31, r21
    2d7c:	20 f0       	brcs	.+8      	; 0x2d86 <__udivmodsi4_ep>
    2d7e:	a2 1b       	sub	r26, r18
    2d80:	b3 0b       	sbc	r27, r19
    2d82:	e4 0b       	sbc	r30, r20
    2d84:	f5 0b       	sbc	r31, r21

00002d86 <__udivmodsi4_ep>:
    2d86:	66 1f       	adc	r22, r22
    2d88:	77 1f       	adc	r23, r23
    2d8a:	88 1f       	adc	r24, r24
    2d8c:	99 1f       	adc	r25, r25
    2d8e:	1a 94       	dec	r1
    2d90:	69 f7       	brne	.-38     	; 0x2d6c <__udivmodsi4_loop>
    2d92:	60 95       	com	r22
    2d94:	70 95       	com	r23
    2d96:	80 95       	com	r24
    2d98:	90 95       	com	r25
    2d9a:	9b 01       	movw	r18, r22
    2d9c:	ac 01       	movw	r20, r24
    2d9e:	bd 01       	movw	r22, r26
    2da0:	cf 01       	movw	r24, r30
    2da2:	08 95       	ret

00002da4 <printf>:
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
    2dac:	ae 01       	movw	r20, r28
    2dae:	4a 5f       	subi	r20, 0xFA	; 250
    2db0:	5f 4f       	sbci	r21, 0xFF	; 255
    2db2:	fa 01       	movw	r30, r20
    2db4:	61 91       	ld	r22, Z+
    2db6:	71 91       	ld	r23, Z+
    2db8:	af 01       	movw	r20, r30
    2dba:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <__iob+0x2>
    2dbe:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <__iob+0x3>
    2dc2:	2a d0       	rcall	.+84     	; 0x2e18 <vfprintf>
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	08 95       	ret

00002dca <printf_P>:
    2dca:	0f 93       	push	r16
    2dcc:	1f 93       	push	r17
    2dce:	cf 93       	push	r28
    2dd0:	df 93       	push	r29
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	ae 01       	movw	r20, r28
    2dd8:	48 5f       	subi	r20, 0xF8	; 248
    2dda:	5f 4f       	sbci	r21, 0xFF	; 255
    2ddc:	da 01       	movw	r26, r20
    2dde:	6d 91       	ld	r22, X+
    2de0:	7d 91       	ld	r23, X+
    2de2:	ad 01       	movw	r20, r26
    2de4:	01 ef       	ldi	r16, 0xF1	; 241
    2de6:	16 e0       	ldi	r17, 0x06	; 6
    2de8:	f8 01       	movw	r30, r16
    2dea:	82 81       	ldd	r24, Z+2	; 0x02
    2dec:	93 81       	ldd	r25, Z+3	; 0x03
    2dee:	dc 01       	movw	r26, r24
    2df0:	13 96       	adiw	r26, 0x03	; 3
    2df2:	2c 91       	ld	r18, X
    2df4:	13 97       	sbiw	r26, 0x03	; 3
    2df6:	28 60       	ori	r18, 0x08	; 8
    2df8:	13 96       	adiw	r26, 0x03	; 3
    2dfa:	2c 93       	st	X, r18
    2dfc:	0d d0       	rcall	.+26     	; 0x2e18 <vfprintf>
    2dfe:	d8 01       	movw	r26, r16
    2e00:	12 96       	adiw	r26, 0x02	; 2
    2e02:	ed 91       	ld	r30, X+
    2e04:	fc 91       	ld	r31, X
    2e06:	13 97       	sbiw	r26, 0x03	; 3
    2e08:	23 81       	ldd	r18, Z+3	; 0x03
    2e0a:	27 7f       	andi	r18, 0xF7	; 247
    2e0c:	23 83       	std	Z+3, r18	; 0x03
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	08 95       	ret

00002e18 <vfprintf>:
    2e18:	2f 92       	push	r2
    2e1a:	3f 92       	push	r3
    2e1c:	4f 92       	push	r4
    2e1e:	5f 92       	push	r5
    2e20:	6f 92       	push	r6
    2e22:	7f 92       	push	r7
    2e24:	8f 92       	push	r8
    2e26:	9f 92       	push	r9
    2e28:	af 92       	push	r10
    2e2a:	bf 92       	push	r11
    2e2c:	cf 92       	push	r12
    2e2e:	df 92       	push	r13
    2e30:	ef 92       	push	r14
    2e32:	ff 92       	push	r15
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
    2e40:	2b 97       	sbiw	r28, 0x0b	; 11
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	6c 01       	movw	r12, r24
    2e4e:	7b 01       	movw	r14, r22
    2e50:	8a 01       	movw	r16, r20
    2e52:	fc 01       	movw	r30, r24
    2e54:	17 82       	std	Z+7, r1	; 0x07
    2e56:	16 82       	std	Z+6, r1	; 0x06
    2e58:	83 81       	ldd	r24, Z+3	; 0x03
    2e5a:	81 ff       	sbrs	r24, 1
    2e5c:	bf c1       	rjmp	.+894    	; 0x31dc <vfprintf+0x3c4>
    2e5e:	ce 01       	movw	r24, r28
    2e60:	01 96       	adiw	r24, 0x01	; 1
    2e62:	3c 01       	movw	r6, r24
    2e64:	f6 01       	movw	r30, r12
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
    2e68:	f7 01       	movw	r30, r14
    2e6a:	93 fd       	sbrc	r25, 3
    2e6c:	85 91       	lpm	r24, Z+
    2e6e:	93 ff       	sbrs	r25, 3
    2e70:	81 91       	ld	r24, Z+
    2e72:	7f 01       	movw	r14, r30
    2e74:	88 23       	and	r24, r24
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <vfprintf+0x62>
    2e78:	ad c1       	rjmp	.+858    	; 0x31d4 <vfprintf+0x3bc>
    2e7a:	85 32       	cpi	r24, 0x25	; 37
    2e7c:	39 f4       	brne	.+14     	; 0x2e8c <vfprintf+0x74>
    2e7e:	93 fd       	sbrc	r25, 3
    2e80:	85 91       	lpm	r24, Z+
    2e82:	93 ff       	sbrs	r25, 3
    2e84:	81 91       	ld	r24, Z+
    2e86:	7f 01       	movw	r14, r30
    2e88:	85 32       	cpi	r24, 0x25	; 37
    2e8a:	21 f4       	brne	.+8      	; 0x2e94 <vfprintf+0x7c>
    2e8c:	b6 01       	movw	r22, r12
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	d6 d1       	rcall	.+940    	; 0x323e <fputc>
    2e92:	e8 cf       	rjmp	.-48     	; 0x2e64 <vfprintf+0x4c>
    2e94:	91 2c       	mov	r9, r1
    2e96:	21 2c       	mov	r2, r1
    2e98:	31 2c       	mov	r3, r1
    2e9a:	ff e1       	ldi	r31, 0x1F	; 31
    2e9c:	f3 15       	cp	r31, r3
    2e9e:	d8 f0       	brcs	.+54     	; 0x2ed6 <vfprintf+0xbe>
    2ea0:	8b 32       	cpi	r24, 0x2B	; 43
    2ea2:	79 f0       	breq	.+30     	; 0x2ec2 <vfprintf+0xaa>
    2ea4:	38 f4       	brcc	.+14     	; 0x2eb4 <vfprintf+0x9c>
    2ea6:	80 32       	cpi	r24, 0x20	; 32
    2ea8:	79 f0       	breq	.+30     	; 0x2ec8 <vfprintf+0xb0>
    2eaa:	83 32       	cpi	r24, 0x23	; 35
    2eac:	a1 f4       	brne	.+40     	; 0x2ed6 <vfprintf+0xbe>
    2eae:	23 2d       	mov	r18, r3
    2eb0:	20 61       	ori	r18, 0x10	; 16
    2eb2:	1d c0       	rjmp	.+58     	; 0x2eee <vfprintf+0xd6>
    2eb4:	8d 32       	cpi	r24, 0x2D	; 45
    2eb6:	61 f0       	breq	.+24     	; 0x2ed0 <vfprintf+0xb8>
    2eb8:	80 33       	cpi	r24, 0x30	; 48
    2eba:	69 f4       	brne	.+26     	; 0x2ed6 <vfprintf+0xbe>
    2ebc:	23 2d       	mov	r18, r3
    2ebe:	21 60       	ori	r18, 0x01	; 1
    2ec0:	16 c0       	rjmp	.+44     	; 0x2eee <vfprintf+0xd6>
    2ec2:	83 2d       	mov	r24, r3
    2ec4:	82 60       	ori	r24, 0x02	; 2
    2ec6:	38 2e       	mov	r3, r24
    2ec8:	e3 2d       	mov	r30, r3
    2eca:	e4 60       	ori	r30, 0x04	; 4
    2ecc:	3e 2e       	mov	r3, r30
    2ece:	2a c0       	rjmp	.+84     	; 0x2f24 <vfprintf+0x10c>
    2ed0:	f3 2d       	mov	r31, r3
    2ed2:	f8 60       	ori	r31, 0x08	; 8
    2ed4:	1d c0       	rjmp	.+58     	; 0x2f10 <vfprintf+0xf8>
    2ed6:	37 fc       	sbrc	r3, 7
    2ed8:	2d c0       	rjmp	.+90     	; 0x2f34 <vfprintf+0x11c>
    2eda:	20 ed       	ldi	r18, 0xD0	; 208
    2edc:	28 0f       	add	r18, r24
    2ede:	2a 30       	cpi	r18, 0x0A	; 10
    2ee0:	40 f0       	brcs	.+16     	; 0x2ef2 <vfprintf+0xda>
    2ee2:	8e 32       	cpi	r24, 0x2E	; 46
    2ee4:	b9 f4       	brne	.+46     	; 0x2f14 <vfprintf+0xfc>
    2ee6:	36 fc       	sbrc	r3, 6
    2ee8:	75 c1       	rjmp	.+746    	; 0x31d4 <vfprintf+0x3bc>
    2eea:	23 2d       	mov	r18, r3
    2eec:	20 64       	ori	r18, 0x40	; 64
    2eee:	32 2e       	mov	r3, r18
    2ef0:	19 c0       	rjmp	.+50     	; 0x2f24 <vfprintf+0x10c>
    2ef2:	36 fe       	sbrs	r3, 6
    2ef4:	06 c0       	rjmp	.+12     	; 0x2f02 <vfprintf+0xea>
    2ef6:	8a e0       	ldi	r24, 0x0A	; 10
    2ef8:	98 9e       	mul	r9, r24
    2efa:	20 0d       	add	r18, r0
    2efc:	11 24       	eor	r1, r1
    2efe:	92 2e       	mov	r9, r18
    2f00:	11 c0       	rjmp	.+34     	; 0x2f24 <vfprintf+0x10c>
    2f02:	ea e0       	ldi	r30, 0x0A	; 10
    2f04:	2e 9e       	mul	r2, r30
    2f06:	20 0d       	add	r18, r0
    2f08:	11 24       	eor	r1, r1
    2f0a:	22 2e       	mov	r2, r18
    2f0c:	f3 2d       	mov	r31, r3
    2f0e:	f0 62       	ori	r31, 0x20	; 32
    2f10:	3f 2e       	mov	r3, r31
    2f12:	08 c0       	rjmp	.+16     	; 0x2f24 <vfprintf+0x10c>
    2f14:	8c 36       	cpi	r24, 0x6C	; 108
    2f16:	21 f4       	brne	.+8      	; 0x2f20 <vfprintf+0x108>
    2f18:	83 2d       	mov	r24, r3
    2f1a:	80 68       	ori	r24, 0x80	; 128
    2f1c:	38 2e       	mov	r3, r24
    2f1e:	02 c0       	rjmp	.+4      	; 0x2f24 <vfprintf+0x10c>
    2f20:	88 36       	cpi	r24, 0x68	; 104
    2f22:	41 f4       	brne	.+16     	; 0x2f34 <vfprintf+0x11c>
    2f24:	f7 01       	movw	r30, r14
    2f26:	93 fd       	sbrc	r25, 3
    2f28:	85 91       	lpm	r24, Z+
    2f2a:	93 ff       	sbrs	r25, 3
    2f2c:	81 91       	ld	r24, Z+
    2f2e:	7f 01       	movw	r14, r30
    2f30:	81 11       	cpse	r24, r1
    2f32:	b3 cf       	rjmp	.-154    	; 0x2e9a <vfprintf+0x82>
    2f34:	98 2f       	mov	r25, r24
    2f36:	9f 7d       	andi	r25, 0xDF	; 223
    2f38:	95 54       	subi	r25, 0x45	; 69
    2f3a:	93 30       	cpi	r25, 0x03	; 3
    2f3c:	28 f4       	brcc	.+10     	; 0x2f48 <vfprintf+0x130>
    2f3e:	0c 5f       	subi	r16, 0xFC	; 252
    2f40:	1f 4f       	sbci	r17, 0xFF	; 255
    2f42:	9f e3       	ldi	r25, 0x3F	; 63
    2f44:	99 83       	std	Y+1, r25	; 0x01
    2f46:	0d c0       	rjmp	.+26     	; 0x2f62 <vfprintf+0x14a>
    2f48:	83 36       	cpi	r24, 0x63	; 99
    2f4a:	31 f0       	breq	.+12     	; 0x2f58 <vfprintf+0x140>
    2f4c:	83 37       	cpi	r24, 0x73	; 115
    2f4e:	71 f0       	breq	.+28     	; 0x2f6c <vfprintf+0x154>
    2f50:	83 35       	cpi	r24, 0x53	; 83
    2f52:	09 f0       	breq	.+2      	; 0x2f56 <vfprintf+0x13e>
    2f54:	55 c0       	rjmp	.+170    	; 0x3000 <vfprintf+0x1e8>
    2f56:	20 c0       	rjmp	.+64     	; 0x2f98 <vfprintf+0x180>
    2f58:	f8 01       	movw	r30, r16
    2f5a:	80 81       	ld	r24, Z
    2f5c:	89 83       	std	Y+1, r24	; 0x01
    2f5e:	0e 5f       	subi	r16, 0xFE	; 254
    2f60:	1f 4f       	sbci	r17, 0xFF	; 255
    2f62:	88 24       	eor	r8, r8
    2f64:	83 94       	inc	r8
    2f66:	91 2c       	mov	r9, r1
    2f68:	53 01       	movw	r10, r6
    2f6a:	12 c0       	rjmp	.+36     	; 0x2f90 <vfprintf+0x178>
    2f6c:	28 01       	movw	r4, r16
    2f6e:	f2 e0       	ldi	r31, 0x02	; 2
    2f70:	4f 0e       	add	r4, r31
    2f72:	51 1c       	adc	r5, r1
    2f74:	f8 01       	movw	r30, r16
    2f76:	a0 80       	ld	r10, Z
    2f78:	b1 80       	ldd	r11, Z+1	; 0x01
    2f7a:	36 fe       	sbrs	r3, 6
    2f7c:	03 c0       	rjmp	.+6      	; 0x2f84 <vfprintf+0x16c>
    2f7e:	69 2d       	mov	r22, r9
    2f80:	70 e0       	ldi	r23, 0x00	; 0
    2f82:	02 c0       	rjmp	.+4      	; 0x2f88 <vfprintf+0x170>
    2f84:	6f ef       	ldi	r22, 0xFF	; 255
    2f86:	7f ef       	ldi	r23, 0xFF	; 255
    2f88:	c5 01       	movw	r24, r10
    2f8a:	4e d1       	rcall	.+668    	; 0x3228 <strnlen>
    2f8c:	4c 01       	movw	r8, r24
    2f8e:	82 01       	movw	r16, r4
    2f90:	f3 2d       	mov	r31, r3
    2f92:	ff 77       	andi	r31, 0x7F	; 127
    2f94:	3f 2e       	mov	r3, r31
    2f96:	15 c0       	rjmp	.+42     	; 0x2fc2 <vfprintf+0x1aa>
    2f98:	28 01       	movw	r4, r16
    2f9a:	22 e0       	ldi	r18, 0x02	; 2
    2f9c:	42 0e       	add	r4, r18
    2f9e:	51 1c       	adc	r5, r1
    2fa0:	f8 01       	movw	r30, r16
    2fa2:	a0 80       	ld	r10, Z
    2fa4:	b1 80       	ldd	r11, Z+1	; 0x01
    2fa6:	36 fe       	sbrs	r3, 6
    2fa8:	03 c0       	rjmp	.+6      	; 0x2fb0 <vfprintf+0x198>
    2faa:	69 2d       	mov	r22, r9
    2fac:	70 e0       	ldi	r23, 0x00	; 0
    2fae:	02 c0       	rjmp	.+4      	; 0x2fb4 <vfprintf+0x19c>
    2fb0:	6f ef       	ldi	r22, 0xFF	; 255
    2fb2:	7f ef       	ldi	r23, 0xFF	; 255
    2fb4:	c5 01       	movw	r24, r10
    2fb6:	2d d1       	rcall	.+602    	; 0x3212 <strnlen_P>
    2fb8:	4c 01       	movw	r8, r24
    2fba:	f3 2d       	mov	r31, r3
    2fbc:	f0 68       	ori	r31, 0x80	; 128
    2fbe:	3f 2e       	mov	r3, r31
    2fc0:	82 01       	movw	r16, r4
    2fc2:	33 fc       	sbrc	r3, 3
    2fc4:	19 c0       	rjmp	.+50     	; 0x2ff8 <vfprintf+0x1e0>
    2fc6:	82 2d       	mov	r24, r2
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	88 16       	cp	r8, r24
    2fcc:	99 06       	cpc	r9, r25
    2fce:	a0 f4       	brcc	.+40     	; 0x2ff8 <vfprintf+0x1e0>
    2fd0:	b6 01       	movw	r22, r12
    2fd2:	80 e2       	ldi	r24, 0x20	; 32
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	33 d1       	rcall	.+614    	; 0x323e <fputc>
    2fd8:	2a 94       	dec	r2
    2fda:	f5 cf       	rjmp	.-22     	; 0x2fc6 <vfprintf+0x1ae>
    2fdc:	f5 01       	movw	r30, r10
    2fde:	37 fc       	sbrc	r3, 7
    2fe0:	85 91       	lpm	r24, Z+
    2fe2:	37 fe       	sbrs	r3, 7
    2fe4:	81 91       	ld	r24, Z+
    2fe6:	5f 01       	movw	r10, r30
    2fe8:	b6 01       	movw	r22, r12
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	28 d1       	rcall	.+592    	; 0x323e <fputc>
    2fee:	21 10       	cpse	r2, r1
    2ff0:	2a 94       	dec	r2
    2ff2:	21 e0       	ldi	r18, 0x01	; 1
    2ff4:	82 1a       	sub	r8, r18
    2ff6:	91 08       	sbc	r9, r1
    2ff8:	81 14       	cp	r8, r1
    2ffa:	91 04       	cpc	r9, r1
    2ffc:	79 f7       	brne	.-34     	; 0x2fdc <vfprintf+0x1c4>
    2ffe:	e1 c0       	rjmp	.+450    	; 0x31c2 <vfprintf+0x3aa>
    3000:	84 36       	cpi	r24, 0x64	; 100
    3002:	11 f0       	breq	.+4      	; 0x3008 <vfprintf+0x1f0>
    3004:	89 36       	cpi	r24, 0x69	; 105
    3006:	39 f5       	brne	.+78     	; 0x3056 <vfprintf+0x23e>
    3008:	f8 01       	movw	r30, r16
    300a:	37 fe       	sbrs	r3, 7
    300c:	07 c0       	rjmp	.+14     	; 0x301c <vfprintf+0x204>
    300e:	60 81       	ld	r22, Z
    3010:	71 81       	ldd	r23, Z+1	; 0x01
    3012:	82 81       	ldd	r24, Z+2	; 0x02
    3014:	93 81       	ldd	r25, Z+3	; 0x03
    3016:	0c 5f       	subi	r16, 0xFC	; 252
    3018:	1f 4f       	sbci	r17, 0xFF	; 255
    301a:	08 c0       	rjmp	.+16     	; 0x302c <vfprintf+0x214>
    301c:	60 81       	ld	r22, Z
    301e:	71 81       	ldd	r23, Z+1	; 0x01
    3020:	07 2e       	mov	r0, r23
    3022:	00 0c       	add	r0, r0
    3024:	88 0b       	sbc	r24, r24
    3026:	99 0b       	sbc	r25, r25
    3028:	0e 5f       	subi	r16, 0xFE	; 254
    302a:	1f 4f       	sbci	r17, 0xFF	; 255
    302c:	f3 2d       	mov	r31, r3
    302e:	ff 76       	andi	r31, 0x6F	; 111
    3030:	3f 2e       	mov	r3, r31
    3032:	97 ff       	sbrs	r25, 7
    3034:	09 c0       	rjmp	.+18     	; 0x3048 <vfprintf+0x230>
    3036:	90 95       	com	r25
    3038:	80 95       	com	r24
    303a:	70 95       	com	r23
    303c:	61 95       	neg	r22
    303e:	7f 4f       	sbci	r23, 0xFF	; 255
    3040:	8f 4f       	sbci	r24, 0xFF	; 255
    3042:	9f 4f       	sbci	r25, 0xFF	; 255
    3044:	f0 68       	ori	r31, 0x80	; 128
    3046:	3f 2e       	mov	r3, r31
    3048:	2a e0       	ldi	r18, 0x0A	; 10
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	a3 01       	movw	r20, r6
    304e:	33 d1       	rcall	.+614    	; 0x32b6 <__ultoa_invert>
    3050:	88 2e       	mov	r8, r24
    3052:	86 18       	sub	r8, r6
    3054:	44 c0       	rjmp	.+136    	; 0x30de <vfprintf+0x2c6>
    3056:	85 37       	cpi	r24, 0x75	; 117
    3058:	31 f4       	brne	.+12     	; 0x3066 <vfprintf+0x24e>
    305a:	23 2d       	mov	r18, r3
    305c:	2f 7e       	andi	r18, 0xEF	; 239
    305e:	b2 2e       	mov	r11, r18
    3060:	2a e0       	ldi	r18, 0x0A	; 10
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	25 c0       	rjmp	.+74     	; 0x30b0 <vfprintf+0x298>
    3066:	93 2d       	mov	r25, r3
    3068:	99 7f       	andi	r25, 0xF9	; 249
    306a:	b9 2e       	mov	r11, r25
    306c:	8f 36       	cpi	r24, 0x6F	; 111
    306e:	c1 f0       	breq	.+48     	; 0x30a0 <vfprintf+0x288>
    3070:	18 f4       	brcc	.+6      	; 0x3078 <vfprintf+0x260>
    3072:	88 35       	cpi	r24, 0x58	; 88
    3074:	79 f0       	breq	.+30     	; 0x3094 <vfprintf+0x27c>
    3076:	ae c0       	rjmp	.+348    	; 0x31d4 <vfprintf+0x3bc>
    3078:	80 37       	cpi	r24, 0x70	; 112
    307a:	19 f0       	breq	.+6      	; 0x3082 <vfprintf+0x26a>
    307c:	88 37       	cpi	r24, 0x78	; 120
    307e:	21 f0       	breq	.+8      	; 0x3088 <vfprintf+0x270>
    3080:	a9 c0       	rjmp	.+338    	; 0x31d4 <vfprintf+0x3bc>
    3082:	e9 2f       	mov	r30, r25
    3084:	e0 61       	ori	r30, 0x10	; 16
    3086:	be 2e       	mov	r11, r30
    3088:	b4 fe       	sbrs	r11, 4
    308a:	0d c0       	rjmp	.+26     	; 0x30a6 <vfprintf+0x28e>
    308c:	fb 2d       	mov	r31, r11
    308e:	f4 60       	ori	r31, 0x04	; 4
    3090:	bf 2e       	mov	r11, r31
    3092:	09 c0       	rjmp	.+18     	; 0x30a6 <vfprintf+0x28e>
    3094:	34 fe       	sbrs	r3, 4
    3096:	0a c0       	rjmp	.+20     	; 0x30ac <vfprintf+0x294>
    3098:	29 2f       	mov	r18, r25
    309a:	26 60       	ori	r18, 0x06	; 6
    309c:	b2 2e       	mov	r11, r18
    309e:	06 c0       	rjmp	.+12     	; 0x30ac <vfprintf+0x294>
    30a0:	28 e0       	ldi	r18, 0x08	; 8
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	05 c0       	rjmp	.+10     	; 0x30b0 <vfprintf+0x298>
    30a6:	20 e1       	ldi	r18, 0x10	; 16
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	02 c0       	rjmp	.+4      	; 0x30b0 <vfprintf+0x298>
    30ac:	20 e1       	ldi	r18, 0x10	; 16
    30ae:	32 e0       	ldi	r19, 0x02	; 2
    30b0:	f8 01       	movw	r30, r16
    30b2:	b7 fe       	sbrs	r11, 7
    30b4:	07 c0       	rjmp	.+14     	; 0x30c4 <vfprintf+0x2ac>
    30b6:	60 81       	ld	r22, Z
    30b8:	71 81       	ldd	r23, Z+1	; 0x01
    30ba:	82 81       	ldd	r24, Z+2	; 0x02
    30bc:	93 81       	ldd	r25, Z+3	; 0x03
    30be:	0c 5f       	subi	r16, 0xFC	; 252
    30c0:	1f 4f       	sbci	r17, 0xFF	; 255
    30c2:	06 c0       	rjmp	.+12     	; 0x30d0 <vfprintf+0x2b8>
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	0e 5f       	subi	r16, 0xFE	; 254
    30ce:	1f 4f       	sbci	r17, 0xFF	; 255
    30d0:	a3 01       	movw	r20, r6
    30d2:	f1 d0       	rcall	.+482    	; 0x32b6 <__ultoa_invert>
    30d4:	88 2e       	mov	r8, r24
    30d6:	86 18       	sub	r8, r6
    30d8:	fb 2d       	mov	r31, r11
    30da:	ff 77       	andi	r31, 0x7F	; 127
    30dc:	3f 2e       	mov	r3, r31
    30de:	36 fe       	sbrs	r3, 6
    30e0:	0d c0       	rjmp	.+26     	; 0x30fc <vfprintf+0x2e4>
    30e2:	23 2d       	mov	r18, r3
    30e4:	2e 7f       	andi	r18, 0xFE	; 254
    30e6:	a2 2e       	mov	r10, r18
    30e8:	89 14       	cp	r8, r9
    30ea:	58 f4       	brcc	.+22     	; 0x3102 <vfprintf+0x2ea>
    30ec:	34 fe       	sbrs	r3, 4
    30ee:	0b c0       	rjmp	.+22     	; 0x3106 <vfprintf+0x2ee>
    30f0:	32 fc       	sbrc	r3, 2
    30f2:	09 c0       	rjmp	.+18     	; 0x3106 <vfprintf+0x2ee>
    30f4:	83 2d       	mov	r24, r3
    30f6:	8e 7e       	andi	r24, 0xEE	; 238
    30f8:	a8 2e       	mov	r10, r24
    30fa:	05 c0       	rjmp	.+10     	; 0x3106 <vfprintf+0x2ee>
    30fc:	b8 2c       	mov	r11, r8
    30fe:	a3 2c       	mov	r10, r3
    3100:	03 c0       	rjmp	.+6      	; 0x3108 <vfprintf+0x2f0>
    3102:	b8 2c       	mov	r11, r8
    3104:	01 c0       	rjmp	.+2      	; 0x3108 <vfprintf+0x2f0>
    3106:	b9 2c       	mov	r11, r9
    3108:	a4 fe       	sbrs	r10, 4
    310a:	0f c0       	rjmp	.+30     	; 0x312a <vfprintf+0x312>
    310c:	fe 01       	movw	r30, r28
    310e:	e8 0d       	add	r30, r8
    3110:	f1 1d       	adc	r31, r1
    3112:	80 81       	ld	r24, Z
    3114:	80 33       	cpi	r24, 0x30	; 48
    3116:	21 f4       	brne	.+8      	; 0x3120 <vfprintf+0x308>
    3118:	9a 2d       	mov	r25, r10
    311a:	99 7e       	andi	r25, 0xE9	; 233
    311c:	a9 2e       	mov	r10, r25
    311e:	09 c0       	rjmp	.+18     	; 0x3132 <vfprintf+0x31a>
    3120:	a2 fe       	sbrs	r10, 2
    3122:	06 c0       	rjmp	.+12     	; 0x3130 <vfprintf+0x318>
    3124:	b3 94       	inc	r11
    3126:	b3 94       	inc	r11
    3128:	04 c0       	rjmp	.+8      	; 0x3132 <vfprintf+0x31a>
    312a:	8a 2d       	mov	r24, r10
    312c:	86 78       	andi	r24, 0x86	; 134
    312e:	09 f0       	breq	.+2      	; 0x3132 <vfprintf+0x31a>
    3130:	b3 94       	inc	r11
    3132:	a3 fc       	sbrc	r10, 3
    3134:	10 c0       	rjmp	.+32     	; 0x3156 <vfprintf+0x33e>
    3136:	a0 fe       	sbrs	r10, 0
    3138:	06 c0       	rjmp	.+12     	; 0x3146 <vfprintf+0x32e>
    313a:	b2 14       	cp	r11, r2
    313c:	80 f4       	brcc	.+32     	; 0x315e <vfprintf+0x346>
    313e:	28 0c       	add	r2, r8
    3140:	92 2c       	mov	r9, r2
    3142:	9b 18       	sub	r9, r11
    3144:	0d c0       	rjmp	.+26     	; 0x3160 <vfprintf+0x348>
    3146:	b2 14       	cp	r11, r2
    3148:	58 f4       	brcc	.+22     	; 0x3160 <vfprintf+0x348>
    314a:	b6 01       	movw	r22, r12
    314c:	80 e2       	ldi	r24, 0x20	; 32
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	76 d0       	rcall	.+236    	; 0x323e <fputc>
    3152:	b3 94       	inc	r11
    3154:	f8 cf       	rjmp	.-16     	; 0x3146 <vfprintf+0x32e>
    3156:	b2 14       	cp	r11, r2
    3158:	18 f4       	brcc	.+6      	; 0x3160 <vfprintf+0x348>
    315a:	2b 18       	sub	r2, r11
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <vfprintf+0x34a>
    315e:	98 2c       	mov	r9, r8
    3160:	21 2c       	mov	r2, r1
    3162:	a4 fe       	sbrs	r10, 4
    3164:	0f c0       	rjmp	.+30     	; 0x3184 <vfprintf+0x36c>
    3166:	b6 01       	movw	r22, r12
    3168:	80 e3       	ldi	r24, 0x30	; 48
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	68 d0       	rcall	.+208    	; 0x323e <fputc>
    316e:	a2 fe       	sbrs	r10, 2
    3170:	16 c0       	rjmp	.+44     	; 0x319e <vfprintf+0x386>
    3172:	a1 fc       	sbrc	r10, 1
    3174:	03 c0       	rjmp	.+6      	; 0x317c <vfprintf+0x364>
    3176:	88 e7       	ldi	r24, 0x78	; 120
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	02 c0       	rjmp	.+4      	; 0x3180 <vfprintf+0x368>
    317c:	88 e5       	ldi	r24, 0x58	; 88
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	b6 01       	movw	r22, r12
    3182:	0c c0       	rjmp	.+24     	; 0x319c <vfprintf+0x384>
    3184:	8a 2d       	mov	r24, r10
    3186:	86 78       	andi	r24, 0x86	; 134
    3188:	51 f0       	breq	.+20     	; 0x319e <vfprintf+0x386>
    318a:	a1 fe       	sbrs	r10, 1
    318c:	02 c0       	rjmp	.+4      	; 0x3192 <vfprintf+0x37a>
    318e:	8b e2       	ldi	r24, 0x2B	; 43
    3190:	01 c0       	rjmp	.+2      	; 0x3194 <vfprintf+0x37c>
    3192:	80 e2       	ldi	r24, 0x20	; 32
    3194:	a7 fc       	sbrc	r10, 7
    3196:	8d e2       	ldi	r24, 0x2D	; 45
    3198:	b6 01       	movw	r22, r12
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	50 d0       	rcall	.+160    	; 0x323e <fputc>
    319e:	89 14       	cp	r8, r9
    31a0:	30 f4       	brcc	.+12     	; 0x31ae <vfprintf+0x396>
    31a2:	b6 01       	movw	r22, r12
    31a4:	80 e3       	ldi	r24, 0x30	; 48
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	4a d0       	rcall	.+148    	; 0x323e <fputc>
    31aa:	9a 94       	dec	r9
    31ac:	f8 cf       	rjmp	.-16     	; 0x319e <vfprintf+0x386>
    31ae:	8a 94       	dec	r8
    31b0:	f3 01       	movw	r30, r6
    31b2:	e8 0d       	add	r30, r8
    31b4:	f1 1d       	adc	r31, r1
    31b6:	80 81       	ld	r24, Z
    31b8:	b6 01       	movw	r22, r12
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	40 d0       	rcall	.+128    	; 0x323e <fputc>
    31be:	81 10       	cpse	r8, r1
    31c0:	f6 cf       	rjmp	.-20     	; 0x31ae <vfprintf+0x396>
    31c2:	22 20       	and	r2, r2
    31c4:	09 f4       	brne	.+2      	; 0x31c8 <vfprintf+0x3b0>
    31c6:	4e ce       	rjmp	.-868    	; 0x2e64 <vfprintf+0x4c>
    31c8:	b6 01       	movw	r22, r12
    31ca:	80 e2       	ldi	r24, 0x20	; 32
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	37 d0       	rcall	.+110    	; 0x323e <fputc>
    31d0:	2a 94       	dec	r2
    31d2:	f7 cf       	rjmp	.-18     	; 0x31c2 <vfprintf+0x3aa>
    31d4:	f6 01       	movw	r30, r12
    31d6:	86 81       	ldd	r24, Z+6	; 0x06
    31d8:	97 81       	ldd	r25, Z+7	; 0x07
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <vfprintf+0x3c8>
    31dc:	8f ef       	ldi	r24, 0xFF	; 255
    31de:	9f ef       	ldi	r25, 0xFF	; 255
    31e0:	2b 96       	adiw	r28, 0x0b	; 11
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	df 91       	pop	r29
    31ee:	cf 91       	pop	r28
    31f0:	1f 91       	pop	r17
    31f2:	0f 91       	pop	r16
    31f4:	ff 90       	pop	r15
    31f6:	ef 90       	pop	r14
    31f8:	df 90       	pop	r13
    31fa:	cf 90       	pop	r12
    31fc:	bf 90       	pop	r11
    31fe:	af 90       	pop	r10
    3200:	9f 90       	pop	r9
    3202:	8f 90       	pop	r8
    3204:	7f 90       	pop	r7
    3206:	6f 90       	pop	r6
    3208:	5f 90       	pop	r5
    320a:	4f 90       	pop	r4
    320c:	3f 90       	pop	r3
    320e:	2f 90       	pop	r2
    3210:	08 95       	ret

00003212 <strnlen_P>:
    3212:	fc 01       	movw	r30, r24
    3214:	05 90       	lpm	r0, Z+
    3216:	61 50       	subi	r22, 0x01	; 1
    3218:	70 40       	sbci	r23, 0x00	; 0
    321a:	01 10       	cpse	r0, r1
    321c:	d8 f7       	brcc	.-10     	; 0x3214 <strnlen_P+0x2>
    321e:	80 95       	com	r24
    3220:	90 95       	com	r25
    3222:	8e 0f       	add	r24, r30
    3224:	9f 1f       	adc	r25, r31
    3226:	08 95       	ret

00003228 <strnlen>:
    3228:	fc 01       	movw	r30, r24
    322a:	61 50       	subi	r22, 0x01	; 1
    322c:	70 40       	sbci	r23, 0x00	; 0
    322e:	01 90       	ld	r0, Z+
    3230:	01 10       	cpse	r0, r1
    3232:	d8 f7       	brcc	.-10     	; 0x322a <strnlen+0x2>
    3234:	80 95       	com	r24
    3236:	90 95       	com	r25
    3238:	8e 0f       	add	r24, r30
    323a:	9f 1f       	adc	r25, r31
    323c:	08 95       	ret

0000323e <fputc>:
    323e:	0f 93       	push	r16
    3240:	1f 93       	push	r17
    3242:	cf 93       	push	r28
    3244:	df 93       	push	r29
    3246:	fb 01       	movw	r30, r22
    3248:	23 81       	ldd	r18, Z+3	; 0x03
    324a:	21 fd       	sbrc	r18, 1
    324c:	03 c0       	rjmp	.+6      	; 0x3254 <fputc+0x16>
    324e:	8f ef       	ldi	r24, 0xFF	; 255
    3250:	9f ef       	ldi	r25, 0xFF	; 255
    3252:	2c c0       	rjmp	.+88     	; 0x32ac <fputc+0x6e>
    3254:	22 ff       	sbrs	r18, 2
    3256:	16 c0       	rjmp	.+44     	; 0x3284 <fputc+0x46>
    3258:	46 81       	ldd	r20, Z+6	; 0x06
    325a:	57 81       	ldd	r21, Z+7	; 0x07
    325c:	24 81       	ldd	r18, Z+4	; 0x04
    325e:	35 81       	ldd	r19, Z+5	; 0x05
    3260:	42 17       	cp	r20, r18
    3262:	53 07       	cpc	r21, r19
    3264:	44 f4       	brge	.+16     	; 0x3276 <fputc+0x38>
    3266:	a0 81       	ld	r26, Z
    3268:	b1 81       	ldd	r27, Z+1	; 0x01
    326a:	9d 01       	movw	r18, r26
    326c:	2f 5f       	subi	r18, 0xFF	; 255
    326e:	3f 4f       	sbci	r19, 0xFF	; 255
    3270:	31 83       	std	Z+1, r19	; 0x01
    3272:	20 83       	st	Z, r18
    3274:	8c 93       	st	X, r24
    3276:	26 81       	ldd	r18, Z+6	; 0x06
    3278:	37 81       	ldd	r19, Z+7	; 0x07
    327a:	2f 5f       	subi	r18, 0xFF	; 255
    327c:	3f 4f       	sbci	r19, 0xFF	; 255
    327e:	37 83       	std	Z+7, r19	; 0x07
    3280:	26 83       	std	Z+6, r18	; 0x06
    3282:	14 c0       	rjmp	.+40     	; 0x32ac <fputc+0x6e>
    3284:	8b 01       	movw	r16, r22
    3286:	ec 01       	movw	r28, r24
    3288:	fb 01       	movw	r30, r22
    328a:	00 84       	ldd	r0, Z+8	; 0x08
    328c:	f1 85       	ldd	r31, Z+9	; 0x09
    328e:	e0 2d       	mov	r30, r0
    3290:	19 95       	eicall
    3292:	89 2b       	or	r24, r25
    3294:	e1 f6       	brne	.-72     	; 0x324e <fputc+0x10>
    3296:	d8 01       	movw	r26, r16
    3298:	16 96       	adiw	r26, 0x06	; 6
    329a:	8d 91       	ld	r24, X+
    329c:	9c 91       	ld	r25, X
    329e:	17 97       	sbiw	r26, 0x07	; 7
    32a0:	01 96       	adiw	r24, 0x01	; 1
    32a2:	17 96       	adiw	r26, 0x07	; 7
    32a4:	9c 93       	st	X, r25
    32a6:	8e 93       	st	-X, r24
    32a8:	16 97       	sbiw	r26, 0x06	; 6
    32aa:	ce 01       	movw	r24, r28
    32ac:	df 91       	pop	r29
    32ae:	cf 91       	pop	r28
    32b0:	1f 91       	pop	r17
    32b2:	0f 91       	pop	r16
    32b4:	08 95       	ret

000032b6 <__ultoa_invert>:
    32b6:	fa 01       	movw	r30, r20
    32b8:	aa 27       	eor	r26, r26
    32ba:	28 30       	cpi	r18, 0x08	; 8
    32bc:	51 f1       	breq	.+84     	; 0x3312 <__ultoa_invert+0x5c>
    32be:	20 31       	cpi	r18, 0x10	; 16
    32c0:	81 f1       	breq	.+96     	; 0x3322 <__ultoa_invert+0x6c>
    32c2:	e8 94       	clt
    32c4:	6f 93       	push	r22
    32c6:	6e 7f       	andi	r22, 0xFE	; 254
    32c8:	6e 5f       	subi	r22, 0xFE	; 254
    32ca:	7f 4f       	sbci	r23, 0xFF	; 255
    32cc:	8f 4f       	sbci	r24, 0xFF	; 255
    32ce:	9f 4f       	sbci	r25, 0xFF	; 255
    32d0:	af 4f       	sbci	r26, 0xFF	; 255
    32d2:	b1 e0       	ldi	r27, 0x01	; 1
    32d4:	3e d0       	rcall	.+124    	; 0x3352 <__ultoa_invert+0x9c>
    32d6:	b4 e0       	ldi	r27, 0x04	; 4
    32d8:	3c d0       	rcall	.+120    	; 0x3352 <__ultoa_invert+0x9c>
    32da:	67 0f       	add	r22, r23
    32dc:	78 1f       	adc	r23, r24
    32de:	89 1f       	adc	r24, r25
    32e0:	9a 1f       	adc	r25, r26
    32e2:	a1 1d       	adc	r26, r1
    32e4:	68 0f       	add	r22, r24
    32e6:	79 1f       	adc	r23, r25
    32e8:	8a 1f       	adc	r24, r26
    32ea:	91 1d       	adc	r25, r1
    32ec:	a1 1d       	adc	r26, r1
    32ee:	6a 0f       	add	r22, r26
    32f0:	71 1d       	adc	r23, r1
    32f2:	81 1d       	adc	r24, r1
    32f4:	91 1d       	adc	r25, r1
    32f6:	a1 1d       	adc	r26, r1
    32f8:	20 d0       	rcall	.+64     	; 0x333a <__ultoa_invert+0x84>
    32fa:	09 f4       	brne	.+2      	; 0x32fe <__ultoa_invert+0x48>
    32fc:	68 94       	set
    32fe:	3f 91       	pop	r19
    3300:	2a e0       	ldi	r18, 0x0A	; 10
    3302:	26 9f       	mul	r18, r22
    3304:	11 24       	eor	r1, r1
    3306:	30 19       	sub	r19, r0
    3308:	30 5d       	subi	r19, 0xD0	; 208
    330a:	31 93       	st	Z+, r19
    330c:	de f6       	brtc	.-74     	; 0x32c4 <__ultoa_invert+0xe>
    330e:	cf 01       	movw	r24, r30
    3310:	08 95       	ret
    3312:	46 2f       	mov	r20, r22
    3314:	47 70       	andi	r20, 0x07	; 7
    3316:	40 5d       	subi	r20, 0xD0	; 208
    3318:	41 93       	st	Z+, r20
    331a:	b3 e0       	ldi	r27, 0x03	; 3
    331c:	0f d0       	rcall	.+30     	; 0x333c <__ultoa_invert+0x86>
    331e:	c9 f7       	brne	.-14     	; 0x3312 <__ultoa_invert+0x5c>
    3320:	f6 cf       	rjmp	.-20     	; 0x330e <__ultoa_invert+0x58>
    3322:	46 2f       	mov	r20, r22
    3324:	4f 70       	andi	r20, 0x0F	; 15
    3326:	40 5d       	subi	r20, 0xD0	; 208
    3328:	4a 33       	cpi	r20, 0x3A	; 58
    332a:	18 f0       	brcs	.+6      	; 0x3332 <__ultoa_invert+0x7c>
    332c:	49 5d       	subi	r20, 0xD9	; 217
    332e:	31 fd       	sbrc	r19, 1
    3330:	40 52       	subi	r20, 0x20	; 32
    3332:	41 93       	st	Z+, r20
    3334:	02 d0       	rcall	.+4      	; 0x333a <__ultoa_invert+0x84>
    3336:	a9 f7       	brne	.-22     	; 0x3322 <__ultoa_invert+0x6c>
    3338:	ea cf       	rjmp	.-44     	; 0x330e <__ultoa_invert+0x58>
    333a:	b4 e0       	ldi	r27, 0x04	; 4
    333c:	a6 95       	lsr	r26
    333e:	97 95       	ror	r25
    3340:	87 95       	ror	r24
    3342:	77 95       	ror	r23
    3344:	67 95       	ror	r22
    3346:	ba 95       	dec	r27
    3348:	c9 f7       	brne	.-14     	; 0x333c <__ultoa_invert+0x86>
    334a:	00 97       	sbiw	r24, 0x00	; 0
    334c:	61 05       	cpc	r22, r1
    334e:	71 05       	cpc	r23, r1
    3350:	08 95       	ret
    3352:	9b 01       	movw	r18, r22
    3354:	ac 01       	movw	r20, r24
    3356:	0a 2e       	mov	r0, r26
    3358:	06 94       	lsr	r0
    335a:	57 95       	ror	r21
    335c:	47 95       	ror	r20
    335e:	37 95       	ror	r19
    3360:	27 95       	ror	r18
    3362:	ba 95       	dec	r27
    3364:	c9 f7       	brne	.-14     	; 0x3358 <__ultoa_invert+0xa2>
    3366:	62 0f       	add	r22, r18
    3368:	73 1f       	adc	r23, r19
    336a:	84 1f       	adc	r24, r20
    336c:	95 1f       	adc	r25, r21
    336e:	a0 1d       	adc	r26, r0
    3370:	08 95       	ret

00003372 <_exit>:
    3372:	f8 94       	cli

00003374 <__stop_program>:
    3374:	ff cf       	rjmp	.-2      	; 0x3374 <__stop_program>
