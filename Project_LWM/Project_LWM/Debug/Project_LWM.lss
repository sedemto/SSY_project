
Project_LWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800200  00004d4a  00004dde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004d4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000016ab  00800400  00800400  00004fde  2**0
                  ALLOC
  3 .noinit       00000001  00801aab  00801aab  00004fde  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00004fde  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000503c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000007a8  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ac73  00000000  00000000  00005824  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000038c2  00000000  00000000  00010497  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000505d  00000000  00000000  00013d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001854  00000000  00000000  00018db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002b9f  00000000  00000000  0001a60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006ea4  00000000  00000000  0001d1ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000738  00000000  00000000  0002404f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	78 c1       	rjmp	.+752    	; 0x2f2 <__ctors_end>
       2:	00 00       	nop
       4:	a6 c1       	rjmp	.+844    	; 0x352 <__bad_interrupt>
       6:	00 00       	nop
       8:	a4 c1       	rjmp	.+840    	; 0x352 <__bad_interrupt>
       a:	00 00       	nop
       c:	a2 c1       	rjmp	.+836    	; 0x352 <__bad_interrupt>
       e:	00 00       	nop
      10:	a0 c1       	rjmp	.+832    	; 0x352 <__bad_interrupt>
      12:	00 00       	nop
      14:	9e c1       	rjmp	.+828    	; 0x352 <__bad_interrupt>
      16:	00 00       	nop
      18:	9c c1       	rjmp	.+824    	; 0x352 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9a c1       	rjmp	.+820    	; 0x352 <__bad_interrupt>
      1e:	00 00       	nop
      20:	98 c1       	rjmp	.+816    	; 0x352 <__bad_interrupt>
      22:	00 00       	nop
      24:	96 c1       	rjmp	.+812    	; 0x352 <__bad_interrupt>
      26:	00 00       	nop
      28:	94 c1       	rjmp	.+808    	; 0x352 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	92 c1       	rjmp	.+804    	; 0x352 <__bad_interrupt>
      2e:	00 00       	nop
      30:	90 c1       	rjmp	.+800    	; 0x352 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__vector_13>
      38:	8c c1       	rjmp	.+792    	; 0x352 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8a c1       	rjmp	.+788    	; 0x352 <__bad_interrupt>
      3e:	00 00       	nop
      40:	88 c1       	rjmp	.+784    	; 0x352 <__bad_interrupt>
      42:	00 00       	nop
      44:	86 c1       	rjmp	.+780    	; 0x352 <__bad_interrupt>
      46:	00 00       	nop
      48:	84 c1       	rjmp	.+776    	; 0x352 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	82 c1       	rjmp	.+772    	; 0x352 <__bad_interrupt>
      4e:	00 00       	nop
      50:	80 c1       	rjmp	.+768    	; 0x352 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 17 13 	jmp	0x262e	; 0x262e <__vector_21>
      58:	7c c1       	rjmp	.+760    	; 0x352 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7a c1       	rjmp	.+756    	; 0x352 <__bad_interrupt>
      5e:	00 00       	nop
      60:	78 c1       	rjmp	.+752    	; 0x352 <__bad_interrupt>
      62:	00 00       	nop
      64:	76 c1       	rjmp	.+748    	; 0x352 <__bad_interrupt>
      66:	00 00       	nop
      68:	74 c1       	rjmp	.+744    	; 0x352 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	72 c1       	rjmp	.+740    	; 0x352 <__bad_interrupt>
      6e:	00 00       	nop
      70:	70 c1       	rjmp	.+736    	; 0x352 <__bad_interrupt>
      72:	00 00       	nop
      74:	6e c1       	rjmp	.+732    	; 0x352 <__bad_interrupt>
      76:	00 00       	nop
      78:	6c c1       	rjmp	.+728    	; 0x352 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6a c1       	rjmp	.+724    	; 0x352 <__bad_interrupt>
      7e:	00 00       	nop
      80:	68 c1       	rjmp	.+720    	; 0x352 <__bad_interrupt>
      82:	00 00       	nop
      84:	66 c1       	rjmp	.+716    	; 0x352 <__bad_interrupt>
      86:	00 00       	nop
      88:	64 c1       	rjmp	.+712    	; 0x352 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	62 c1       	rjmp	.+708    	; 0x352 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__vector_36>
      94:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__vector_37>
      98:	5c c1       	rjmp	.+696    	; 0x352 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5a c1       	rjmp	.+692    	; 0x352 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	58 c1       	rjmp	.+688    	; 0x352 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	56 c1       	rjmp	.+684    	; 0x352 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__vector_42>
      ac:	52 c1       	rjmp	.+676    	; 0x352 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	50 c1       	rjmp	.+672    	; 0x352 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4e c1       	rjmp	.+668    	; 0x352 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	4c c1       	rjmp	.+664    	; 0x352 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	4a c1       	rjmp	.+660    	; 0x352 <__bad_interrupt>
      be:	00 00       	nop
      c0:	48 c1       	rjmp	.+656    	; 0x352 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	46 c1       	rjmp	.+652    	; 0x352 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	44 c1       	rjmp	.+648    	; 0x352 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	42 c1       	rjmp	.+644    	; 0x352 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	40 c1       	rjmp	.+640    	; 0x352 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	3e c1       	rjmp	.+636    	; 0x352 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	3c c1       	rjmp	.+632    	; 0x352 <__bad_interrupt>
      da:	00 00       	nop
      dc:	3a c1       	rjmp	.+628    	; 0x352 <__bad_interrupt>
      de:	00 00       	nop
      e0:	38 c1       	rjmp	.+624    	; 0x352 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	36 c1       	rjmp	.+620    	; 0x352 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	34 c1       	rjmp	.+616    	; 0x352 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	32 c1       	rjmp	.+612    	; 0x352 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	30 c1       	rjmp	.+608    	; 0x352 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	2e c1       	rjmp	.+604    	; 0x352 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	2c c1       	rjmp	.+600    	; 0x352 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	2a c1       	rjmp	.+596    	; 0x352 <__bad_interrupt>
      fe:	00 00       	nop
     100:	28 c1       	rjmp	.+592    	; 0x352 <__bad_interrupt>
     102:	00 00       	nop
     104:	26 c1       	rjmp	.+588    	; 0x352 <__bad_interrupt>
     106:	00 00       	nop
     108:	24 c1       	rjmp	.+584    	; 0x352 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	22 c1       	rjmp	.+580    	; 0x352 <__bad_interrupt>
     10e:	00 00       	nop
     110:	20 c1       	rjmp	.+576    	; 0x352 <__bad_interrupt>
     112:	00 00       	nop
     114:	1e c1       	rjmp	.+572    	; 0x352 <__bad_interrupt>
     116:	00 00       	nop
     118:	1c c1       	rjmp	.+568    	; 0x352 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	1a c1       	rjmp	.+564    	; 0x352 <__bad_interrupt>
     11e:	00 00       	nop
     120:	18 c1       	rjmp	.+560    	; 0x352 <__bad_interrupt>
     122:	00 00       	nop
     124:	16 c1       	rjmp	.+556    	; 0x352 <__bad_interrupt>
     126:	00 00       	nop
     128:	14 c1       	rjmp	.+552    	; 0x352 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	12 c1       	rjmp	.+548    	; 0x352 <__bad_interrupt>
     12e:	00 00       	nop
     130:	10 c1       	rjmp	.+544    	; 0x352 <__bad_interrupt>
     132:	00 00       	nop
     134:	2b 11       	cpse	r18, r11
     136:	2e 11       	cpse	r18, r14
     138:	3d 11       	cpse	r19, r13
     13a:	38 11       	cpse	r19, r8
     13c:	42 11       	cpse	r20, r2
     13e:	47 11       	cpse	r20, r7
     140:	4c 11       	cpse	r20, r12
     142:	5a 11       	cpse	r21, r10
     144:	6e 11       	cpse	r22, r14
     146:	7d 11       	cpse	r23, r13
     148:	80 11       	cpse	r24, r0
     14a:	84 11       	cpse	r24, r4
     14c:	97 11       	cpse	r25, r7
     14e:	88 11       	cpse	r24, r8
     150:	8b 11       	cpse	r24, r11
     152:	91 11       	cpse	r25, r1

00000154 <__trampolines_end>:
     154:	6e 61       	ori	r22, 0x1E	; 30
     156:	6e 00       	.word	0x006e	; ????

00000158 <__c.2332>:
     158:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     168:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     178:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     188:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     198:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     208:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     218:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     228:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     238:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     248:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000256 <__c.3159>:
     256:	44 48 43 50 20 49 50 0d 0a 00                       DHCP IP...

00000260 <__c.3157>:
     260:	53 54 41 54 49 43 20 49 50 0d 0a 00                 STATIC IP...

0000026c <__c.3154>:
     26c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     27c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     28c:	3d 3d 3d 3d 3d 3d 3d 0d 0a 00                       =======...

00000296 <__c.3152>:
     296:	20 57 49 5a 6e 65 74 20 63 68 69 70 3a 20 20 25      WIZnet chip:  %
     2a6:	73 20 0d 0a 00                                      s ...

000002ab <__c.3150>:
     2ab:	0d 0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ..==============
     2bb:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     2cb:	3d 3d 3d 3d 3d 3d 3d 3d 3d 0d 0a 00                 =========...

000002d7 <__c.3130>:
     2d7:	3e 3e 20 46 72 65 65 20 52 41 4d 20 69 73 3a 20     >> Free RAM is: 
     2e7:	25 64 20 62 79 74 65 73 0d 0a 00                    %d bytes...

000002f2 <__ctors_end>:
     2f2:	11 24       	eor	r1, r1
     2f4:	1f be       	out	0x3f, r1	; 63
     2f6:	cf ef       	ldi	r28, 0xFF	; 255
     2f8:	d1 e8       	ldi	r29, 0x81	; 129
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	00 e0       	ldi	r16, 0x00	; 0
     300:	0c bf       	out	0x3c, r16	; 60

00000302 <get_mcusr>:
			(int16_t) ip_query[2],\
			(int16_t) ip_query[3],\
			id_query,\
			seq_query,\
			len_query);
}
     302:	84 b7       	in	r24, 0x34	; 52
     304:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <__bss_end>
     308:	14 be       	out	0x34, r1	; 52
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	a8 95       	wdr
     310:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     314:	88 61       	ori	r24, 0x18	; 24
     316:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     31a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     31e:	0f be       	out	0x3f, r0	; 63

00000320 <__do_copy_data>:
     320:	14 e0       	ldi	r17, 0x04	; 4
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b2 e0       	ldi	r27, 0x02	; 2
     326:	ea e4       	ldi	r30, 0x4A	; 74
     328:	fd e4       	ldi	r31, 0x4D	; 77
     32a:	00 e0       	ldi	r16, 0x00	; 0
     32c:	0b bf       	out	0x3b, r16	; 59
     32e:	02 c0       	rjmp	.+4      	; 0x334 <__do_copy_data+0x14>
     330:	07 90       	elpm	r0, Z+
     332:	0d 92       	st	X+, r0
     334:	a0 30       	cpi	r26, 0x00	; 0
     336:	b1 07       	cpc	r27, r17
     338:	d9 f7       	brne	.-10     	; 0x330 <__do_copy_data+0x10>

0000033a <__do_clear_bss>:
     33a:	2a e1       	ldi	r18, 0x1A	; 26
     33c:	a0 e0       	ldi	r26, 0x00	; 0
     33e:	b4 e0       	ldi	r27, 0x04	; 4
     340:	01 c0       	rjmp	.+2      	; 0x344 <.do_clear_bss_start>

00000342 <.do_clear_bss_loop>:
     342:	1d 92       	st	X+, r1

00000344 <.do_clear_bss_start>:
     344:	ab 3a       	cpi	r26, 0xAB	; 171
     346:	b2 07       	cpc	r27, r18
     348:	e1 f7       	brne	.-8      	; 0x342 <.do_clear_bss_loop>
     34a:	0e 94 54 14 	call	0x28a8	; 0x28a8 <main>
     34e:	0c 94 a3 26 	jmp	0x4d46	; 0x4d46 <_exit>

00000352 <__bad_interrupt>:
     352:	56 ce       	rjmp	.-852    	; 0x0 <__vectors>

00000354 <loopback_tcps>:
         break;
      default:
         break;
   }
   return 1;
}
     354:	4f 92       	push	r4
     356:	5f 92       	push	r5
     358:	6f 92       	push	r6
     35a:	7f 92       	push	r7
     35c:	af 92       	push	r10
     35e:	bf 92       	push	r11
     360:	df 92       	push	r13
     362:	ef 92       	push	r14
     364:	ff 92       	push	r15
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	00 d0       	rcall	.+0      	; 0x370 <loopback_tcps+0x1c>
     370:	1f 92       	push	r1
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	d8 2e       	mov	r13, r24
     378:	7b 01       	movw	r14, r22
     37a:	a4 2e       	mov	r10, r20
     37c:	b5 2e       	mov	r11, r21
     37e:	08 2f       	mov	r16, r24
     380:	10 e0       	ldi	r17, 0x00	; 0
     382:	00 0f       	add	r16, r16
     384:	11 1f       	adc	r17, r17
     386:	00 0f       	add	r16, r16
     388:	11 1f       	adc	r17, r17
     38a:	0f 5f       	subi	r16, 0xFF	; 255
     38c:	1f 4f       	sbci	r17, 0xFF	; 255
     38e:	00 0f       	add	r16, r16
     390:	11 1f       	adc	r17, r17
     392:	00 0f       	add	r16, r16
     394:	11 1f       	adc	r17, r17
     396:	00 0f       	add	r16, r16
     398:	11 1f       	adc	r17, r17
     39a:	b8 01       	movw	r22, r16
     39c:	7d 5f       	subi	r23, 0xFD	; 253
     39e:	07 2e       	mov	r0, r23
     3a0:	00 0c       	add	r0, r0
     3a2:	88 0b       	sbc	r24, r24
     3a4:	99 0b       	sbc	r25, r25
     3a6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <WIZCHIP_READ>
     3aa:	83 31       	cpi	r24, 0x13	; 19
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <loopback_tcps+0x5c>
     3ae:	b0 c0       	rjmp	.+352    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     3b0:	20 f4       	brcc	.+8      	; 0x3ba <loopback_tcps+0x66>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <loopback_tcps+0x64>
     3b6:	cd c0       	rjmp	.+410    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     3b8:	e5 c0       	rjmp	.+458    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     3ba:	87 31       	cpi	r24, 0x17	; 23
     3bc:	21 f0       	breq	.+8      	; 0x3c6 <loopback_tcps+0x72>
     3be:	8c 31       	cpi	r24, 0x1C	; 28
     3c0:	09 f4       	brne	.+2      	; 0x3c4 <loopback_tcps+0x70>
     3c2:	88 c0       	rjmp	.+272    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     3c4:	df c0       	rjmp	.+446    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     3c6:	28 01       	movw	r4, r16
     3c8:	2e ef       	ldi	r18, 0xFE	; 254
     3ca:	52 1a       	sub	r5, r18
     3cc:	05 2c       	mov	r0, r5
     3ce:	00 0c       	add	r0, r0
     3d0:	66 08       	sbc	r6, r6
     3d2:	77 08       	sbc	r7, r7
     3d4:	c3 01       	movw	r24, r6
     3d6:	b2 01       	movw	r22, r4
     3d8:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <WIZCHIP_READ>
     3dc:	80 ff       	sbrs	r24, 0
     3de:	43 c0       	rjmp	.+134    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     3e0:	b8 01       	movw	r22, r16
     3e2:	74 5f       	subi	r23, 0xF4	; 244
     3e4:	07 2e       	mov	r0, r23
     3e6:	00 0c       	add	r0, r0
     3e8:	88 0b       	sbc	r24, r24
     3ea:	99 0b       	sbc	r25, r25
     3ec:	24 e0       	ldi	r18, 0x04	; 4
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	ae 01       	movw	r20, r28
     3f2:	4f 5f       	subi	r20, 0xFF	; 255
     3f4:	5f 4f       	sbci	r21, 0xFF	; 255
     3f6:	0e 94 cc 0b 	call	0x1798	; 0x1798 <WIZCHIP_READ_BUF>
     3fa:	b8 01       	movw	r22, r16
     3fc:	70 5f       	subi	r23, 0xF0	; 240
     3fe:	07 2e       	mov	r0, r23
     400:	00 0c       	add	r0, r0
     402:	88 0b       	sbc	r24, r24
     404:	99 0b       	sbc	r25, r25
     406:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <WIZCHIP_READ>
     40a:	a8 2e       	mov	r10, r24
     40c:	b1 2c       	mov	r11, r1
     40e:	ba 2c       	mov	r11, r10
     410:	aa 24       	eor	r10, r10
     412:	b8 01       	movw	r22, r16
     414:	7f 5e       	subi	r23, 0xEF	; 239
     416:	07 2e       	mov	r0, r23
     418:	00 0c       	add	r0, r0
     41a:	88 0b       	sbc	r24, r24
     41c:	99 0b       	sbc	r25, r25
     41e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <WIZCHIP_READ>
     422:	a8 0e       	add	r10, r24
     424:	b1 1c       	adc	r11, r1
     426:	3c 81       	ldd	r19, Y+4	; 0x04
     428:	2b 81       	ldd	r18, Y+3	; 0x03
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	bf 92       	push	r11
     430:	af 92       	push	r10
     432:	1f 92       	push	r1
     434:	3f 93       	push	r19
     436:	1f 92       	push	r1
     438:	2f 93       	push	r18
     43a:	1f 92       	push	r1
     43c:	9f 93       	push	r25
     43e:	1f 92       	push	r1
     440:	8f 93       	push	r24
     442:	1f 92       	push	r1
     444:	df 92       	push	r13
     446:	80 e5       	ldi	r24, 0x50	; 80
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	9f 93       	push	r25
     44c:	8f 93       	push	r24
     44e:	0e 94 e7 25 	call	0x4bce	; 0x4bce <printf>
     452:	41 e0       	ldi	r20, 0x01	; 1
     454:	c3 01       	movw	r24, r6
     456:	b2 01       	movw	r22, r4
     458:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WIZCHIP_WRITE>
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
     466:	8d 2d       	mov	r24, r13
     468:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <getSn_RX_RSR>
     46c:	00 97       	sbiw	r24, 0x00	; 0
     46e:	09 f4       	brne	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     470:	8e c0       	rjmp	.+284    	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
     472:	81 30       	cpi	r24, 0x01	; 1
     474:	28 e0       	ldi	r18, 0x08	; 8
     476:	92 07       	cpc	r25, r18
     478:	10 f0       	brcs	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	98 e0       	ldi	r25, 0x08	; 8
     47e:	ac 01       	movw	r20, r24
     480:	b7 01       	movw	r22, r14
     482:	8d 2d       	mov	r24, r13
     484:	e5 d4       	rcall	.+2506   	; 0xe50 <recv>
     486:	16 16       	cp	r1, r22
     488:	17 06       	cpc	r1, r23
     48a:	18 06       	cpc	r1, r24
     48c:	19 06       	cpc	r1, r25
     48e:	0c f0       	brlt	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     490:	83 c0       	rjmp	.+262    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     492:	5b 01       	movw	r10, r22
     494:	00 e0       	ldi	r16, 0x00	; 0
     496:	10 e0       	ldi	r17, 0x00	; 0
     498:	15 c0       	rjmp	.+42     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     49a:	a5 01       	movw	r20, r10
     49c:	40 1b       	sub	r20, r16
     49e:	51 0b       	sbc	r21, r17
     4a0:	b7 01       	movw	r22, r14
     4a2:	60 0f       	add	r22, r16
     4a4:	71 1f       	adc	r23, r17
     4a6:	8d 2d       	mov	r24, r13
     4a8:	c0 d3       	rcall	.+1920   	; 0xc2a <send>
     4aa:	2b 01       	movw	r4, r22
     4ac:	3c 01       	movw	r6, r24
     4ae:	99 23       	and	r25, r25
     4b0:	3c f4       	brge	.+14     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4b2:	8d 2d       	mov	r24, r13
     4b4:	7f d1       	rcall	.+766    	; 0x7b4 <close>
     4b6:	44 2d       	mov	r20, r4
     4b8:	35 2d       	mov	r19, r5
     4ba:	26 2d       	mov	r18, r6
     4bc:	97 2d       	mov	r25, r7
     4be:	7e c0       	rjmp	.+252    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     4c0:	06 0f       	add	r16, r22
     4c2:	17 1f       	adc	r17, r23
     4c4:	0a 15       	cp	r16, r10
     4c6:	1b 05       	cpc	r17, r11
     4c8:	41 f7       	brne	.-48     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     4ca:	41 e0       	ldi	r20, 0x01	; 1
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	74 c0       	rjmp	.+232    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     4d4:	8d 2d       	mov	r24, r13
     4d6:	35 d3       	rcall	.+1642   	; 0xb42 <disconnect>
     4d8:	08 2e       	mov	r0, r24
     4da:	00 0c       	add	r0, r0
     4dc:	99 0b       	sbc	r25, r25
     4de:	aa 0b       	sbc	r26, r26
     4e0:	bb 0b       	sbc	r27, r27
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	91 05       	cpc	r25, r1
     4e6:	a1 05       	cpc	r26, r1
     4e8:	b1 05       	cpc	r27, r1
     4ea:	09 f0       	breq	.+2      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4ec:	59 c0       	rjmp	.+178    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     4ee:	1f 92       	push	r1
     4f0:	df 92       	push	r13
     4f2:	82 e7       	ldi	r24, 0x72	; 114
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	9f 93       	push	r25
     4f8:	8f 93       	push	r24
     4fa:	0e 94 e7 25 	call	0x4bce	; 0x4bce <printf>
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	41 e0       	ldi	r20, 0x01	; 1
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	56 c0       	rjmp	.+172    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     510:	bf 92       	push	r11
     512:	af 92       	push	r10
     514:	1f 92       	push	r1
     516:	df 92       	push	r13
     518:	85 e8       	ldi	r24, 0x85	; 133
     51a:	92 e0       	ldi	r25, 0x02	; 2
     51c:	9f 93       	push	r25
     51e:	8f 93       	push	r24
     520:	0e 94 e7 25 	call	0x4bce	; 0x4bce <printf>
     524:	8d 2d       	mov	r24, r13
     526:	b3 d2       	rcall	.+1382   	; 0xa8e <listen>
     528:	08 2e       	mov	r0, r24
     52a:	00 0c       	add	r0, r0
     52c:	99 0b       	sbc	r25, r25
     52e:	aa 0b       	sbc	r26, r26
     530:	bb 0b       	sbc	r27, r27
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	91 05       	cpc	r25, r1
     542:	a1 05       	cpc	r26, r1
     544:	b1 05       	cpc	r27, r1
     546:	89 f1       	breq	.+98     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     548:	48 2f       	mov	r20, r24
     54a:	39 2f       	mov	r19, r25
     54c:	2a 2f       	mov	r18, r26
     54e:	9b 2f       	mov	r25, r27
     550:	35 c0       	rjmp	.+106    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	4a 2d       	mov	r20, r10
     556:	5b 2d       	mov	r21, r11
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	8d 2d       	mov	r24, r13
     55c:	9b d1       	rcall	.+822    	; 0x894 <socket>
     55e:	08 2e       	mov	r0, r24
     560:	00 0c       	add	r0, r0
     562:	99 0b       	sbc	r25, r25
     564:	aa 0b       	sbc	r26, r26
     566:	bb 0b       	sbc	r27, r27
     568:	4d 2d       	mov	r20, r13
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	84 17       	cp	r24, r20
     572:	95 07       	cpc	r25, r21
     574:	a6 07       	cpc	r26, r22
     576:	b7 07       	cpc	r27, r23
     578:	e9 f0       	breq	.+58     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     57a:	48 2f       	mov	r20, r24
     57c:	39 2f       	mov	r19, r25
     57e:	2a 2f       	mov	r18, r26
     580:	9b 2f       	mov	r25, r27
     582:	1c c0       	rjmp	.+56     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     584:	41 e0       	ldi	r20, 0x01	; 1
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	17 c0       	rjmp	.+46     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     58e:	41 e0       	ldi	r20, 0x01	; 1
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	12 c0       	rjmp	.+36     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     598:	46 2f       	mov	r20, r22
     59a:	37 2f       	mov	r19, r23
     59c:	28 2f       	mov	r18, r24
     59e:	0e c0       	rjmp	.+28     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5a0:	48 2f       	mov	r20, r24
     5a2:	39 2f       	mov	r19, r25
     5a4:	2a 2f       	mov	r18, r26
     5a6:	9b 2f       	mov	r25, r27
     5a8:	09 c0       	rjmp	.+18     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5aa:	41 e0       	ldi	r20, 0x01	; 1
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	04 c0       	rjmp	.+8      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5b4:	41 e0       	ldi	r20, 0x01	; 1
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	64 2f       	mov	r22, r20
     5be:	73 2f       	mov	r23, r19
     5c0:	82 2f       	mov	r24, r18
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	bf 90       	pop	r11
     5da:	af 90       	pop	r10
     5dc:	7f 90       	pop	r7
     5de:	6f 90       	pop	r6
     5e0:	5f 90       	pop	r5
     5e2:	4f 90       	pop	r4
     5e4:	08 95       	ret

000005e6 <loopback_udps>:


int32_t loopback_udps(uint8_t sn, uint8_t* buf, uint16_t port)
{
     5e6:	4f 92       	push	r4
     5e8:	5f 92       	push	r5
     5ea:	6f 92       	push	r6
     5ec:	7f 92       	push	r7
     5ee:	8f 92       	push	r8
     5f0:	9f 92       	push	r9
     5f2:	af 92       	push	r10
     5f4:	bf 92       	push	r11
     5f6:	df 92       	push	r13
     5f8:	ef 92       	push	r14
     5fa:	ff 92       	push	r15
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	00 d0       	rcall	.+0      	; 0x606 <loopback_udps+0x20>
     606:	00 d0       	rcall	.+0      	; 0x608 <loopback_udps+0x22>
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	d8 2e       	mov	r13, r24
     60e:	7b 01       	movw	r14, r22
     610:	14 2f       	mov	r17, r20
     612:	05 2f       	mov	r16, r21
   int32_t  ret;
   uint16_t size, sentsize;
   uint8_t  destip[4];
   uint16_t destport;

   switch(getSn_SR(sn))
     614:	68 2f       	mov	r22, r24
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	66 0f       	add	r22, r22
     61a:	77 1f       	adc	r23, r23
     61c:	66 0f       	add	r22, r22
     61e:	77 1f       	adc	r23, r23
     620:	6f 5f       	subi	r22, 0xFF	; 255
     622:	7f 4f       	sbci	r23, 0xFF	; 255
     624:	66 0f       	add	r22, r22
     626:	77 1f       	adc	r23, r23
     628:	66 0f       	add	r22, r22
     62a:	77 1f       	adc	r23, r23
     62c:	66 0f       	add	r22, r22
     62e:	77 1f       	adc	r23, r23
     630:	7d 5f       	subi	r23, 0xFD	; 253
     632:	07 2e       	mov	r0, r23
     634:	00 0c       	add	r0, r0
     636:	88 0b       	sbc	r24, r24
     638:	99 0b       	sbc	r25, r25
     63a:	d5 d7       	rcall	.+4010   	; 0x15e6 <WIZCHIP_READ>
     63c:	88 23       	and	r24, r24
     63e:	09 f4       	brne	.+2      	; 0x642 <loopback_udps+0x5c>
     640:	6a c0       	rjmp	.+212    	; 0x716 <loopback_udps+0x130>
     642:	82 32       	cpi	r24, 0x22	; 34
     644:	09 f0       	breq	.+2      	; 0x648 <loopback_udps+0x62>
     646:	90 c0       	rjmp	.+288    	; 0x768 <loopback_udps+0x182>
   {
      case SOCK_UDP :
         if((size = getSn_RX_RSR(sn)) > 0)
     648:	8d 2d       	mov	r24, r13
     64a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <getSn_RX_RSR>
     64e:	00 97       	sbiw	r24, 0x00	; 0
     650:	09 f4       	brne	.+2      	; 0x654 <loopback_udps+0x6e>
     652:	8f c0       	rjmp	.+286    	; 0x772 <loopback_udps+0x18c>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	28 e0       	ldi	r18, 0x08	; 8
     658:	92 07       	cpc	r25, r18
     65a:	10 f0       	brcs	.+4      	; 0x660 <loopback_udps+0x7a>
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	98 e0       	ldi	r25, 0x08	; 8
            ret = recvfrom(sn, buf, size, destip, (uint16_t*)&destport);
     660:	8e 01       	movw	r16, r28
     662:	0b 5f       	subi	r16, 0xFB	; 251
     664:	1f 4f       	sbci	r17, 0xFF	; 255
     666:	9e 01       	movw	r18, r28
     668:	2f 5f       	subi	r18, 0xFF	; 255
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	ac 01       	movw	r20, r24
     66e:	b7 01       	movw	r22, r14
     670:	8d 2d       	mov	r24, r13
     672:	db d5       	rcall	.+2998   	; 0x122a <recvfrom>
     674:	4b 01       	movw	r8, r22
     676:	5c 01       	movw	r10, r24
            if(ret <= 0)
     678:	16 16       	cp	r1, r22
     67a:	17 06       	cpc	r1, r23
     67c:	18 06       	cpc	r1, r24
     67e:	19 06       	cpc	r1, r25
     680:	b4 f0       	brlt	.+44     	; 0x6ae <loopback_udps+0xc8>
            {
#ifdef _LOOPBACK_DEBUG_
               printf("%d: recvfrom error. %ld\r\n",sn,ret);
     682:	bf 92       	push	r11
     684:	af 92       	push	r10
     686:	9f 92       	push	r9
     688:	6f 93       	push	r22
     68a:	1f 92       	push	r1
     68c:	df 92       	push	r13
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	93 e0       	ldi	r25, 0x03	; 3
     692:	9f 93       	push	r25
     694:	8f 93       	push	r24
     696:	0e 94 e7 25 	call	0x4bce	; 0x4bce <printf>
#endif
               return ret;
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	38 2d       	mov	r19, r8
     6a6:	29 2d       	mov	r18, r9
     6a8:	8a 2d       	mov	r24, r10
     6aa:	9b 2d       	mov	r25, r11
     6ac:	6b c0       	rjmp	.+214    	; 0x784 <loopback_udps+0x19e>
            }
            size = (uint16_t) ret;
            sentsize = 0;
     6ae:	a1 2c       	mov	r10, r1
     6b0:	b1 2c       	mov	r11, r1
            while(sentsize != size)
     6b2:	29 c0       	rjmp	.+82     	; 0x706 <loopback_udps+0x120>
            {
               ret = sendto(sn, buf+sentsize, size-sentsize, destip, destport);
     6b4:	0d 81       	ldd	r16, Y+5	; 0x05
     6b6:	1e 81       	ldd	r17, Y+6	; 0x06
     6b8:	9e 01       	movw	r18, r28
     6ba:	2f 5f       	subi	r18, 0xFF	; 255
     6bc:	3f 4f       	sbci	r19, 0xFF	; 255
     6be:	a4 01       	movw	r20, r8
     6c0:	4a 19       	sub	r20, r10
     6c2:	5b 09       	sbc	r21, r11
     6c4:	b7 01       	movw	r22, r14
     6c6:	6a 0d       	add	r22, r10
     6c8:	7b 1d       	adc	r23, r11
     6ca:	8d 2d       	mov	r24, r13
     6cc:	80 d4       	rcall	.+2304   	; 0xfce <sendto>
     6ce:	2b 01       	movw	r4, r22
     6d0:	3c 01       	movw	r6, r24
               if(ret < 0)
     6d2:	99 23       	and	r25, r25
     6d4:	b4 f4       	brge	.+44     	; 0x702 <loopback_udps+0x11c>
               {
#ifdef _LOOPBACK_DEBUG_
                  printf("%d: sendto error. %ld\r\n",sn,ret);
     6d6:	7f 92       	push	r7
     6d8:	6f 92       	push	r6
     6da:	5f 92       	push	r5
     6dc:	6f 93       	push	r22
     6de:	1f 92       	push	r1
     6e0:	df 92       	push	r13
     6e2:	8c e1       	ldi	r24, 0x1C	; 28
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	9f 93       	push	r25
     6e8:	8f 93       	push	r24
     6ea:	0e 94 e7 25 	call	0x4bce	; 0x4bce <printf>
#endif
                  return ret;
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	34 2d       	mov	r19, r4
     6fa:	25 2d       	mov	r18, r5
     6fc:	86 2d       	mov	r24, r6
     6fe:	97 2d       	mov	r25, r7
     700:	41 c0       	rjmp	.+130    	; 0x784 <loopback_udps+0x19e>
               }
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
     702:	a6 0e       	add	r10, r22
     704:	b7 1e       	adc	r11, r23
#endif
               return ret;
            }
            size = (uint16_t) ret;
            sentsize = 0;
            while(sentsize != size)
     706:	a8 14       	cp	r10, r8
     708:	b9 04       	cpc	r11, r9
     70a:	a1 f6       	brne	.-88     	; 0x6b4 <loopback_udps+0xce>
#endif
         break;
      default :
         break;
   }
   return 1;
     70c:	31 e0       	ldi	r19, 0x01	; 1
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	37 c0       	rjmp	.+110    	; 0x784 <loopback_udps+0x19e>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:UDP loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	41 2f       	mov	r20, r17
     71a:	50 2f       	mov	r21, r16
     71c:	62 e0       	ldi	r22, 0x02	; 2
     71e:	8d 2d       	mov	r24, r13
     720:	b9 d0       	rcall	.+370    	; 0x894 <socket>
     722:	48 2f       	mov	r20, r24
     724:	88 0f       	add	r24, r24
     726:	55 0b       	sbc	r21, r21
     728:	66 0b       	sbc	r22, r22
     72a:	77 0b       	sbc	r23, r23
     72c:	8d 2d       	mov	r24, r13
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	a0 e0       	ldi	r26, 0x00	; 0
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	48 17       	cp	r20, r24
     736:	59 07       	cpc	r21, r25
     738:	6a 07       	cpc	r22, r26
     73a:	7b 07       	cpc	r23, r27
     73c:	f9 f4       	brne	.+62     	; 0x77c <loopback_udps+0x196>
            return ret;
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Opened, UDP loopback, port [%d]\r\n", sn, port);
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	1f 92       	push	r1
     744:	df 92       	push	r13
     746:	84 e3       	ldi	r24, 0x34	; 52
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	9f 93       	push	r25
     74c:	8f 93       	push	r24
     74e:	0e 94 e7 25 	call	0x4bce	; 0x4bce <printf>
#endif
         break;
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
      default :
         break;
   }
   return 1;
     75e:	31 e0       	ldi	r19, 0x01	; 1
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
            return ret;
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Opened, UDP loopback, port [%d]\r\n", sn, port);
#endif
         break;
     766:	0e c0       	rjmp	.+28     	; 0x784 <loopback_udps+0x19e>
      default :
         break;
   }
   return 1;
     768:	31 e0       	ldi	r19, 0x01	; 1
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	09 c0       	rjmp	.+18     	; 0x784 <loopback_udps+0x19e>
     772:	31 e0       	ldi	r19, 0x01	; 1
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	04 c0       	rjmp	.+8      	; 0x784 <loopback_udps+0x19e>
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:UDP loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
            return ret;
     77c:	34 2f       	mov	r19, r20
     77e:	25 2f       	mov	r18, r21
     780:	86 2f       	mov	r24, r22
     782:	97 2f       	mov	r25, r23
         break;
      default :
         break;
   }
   return 1;
}
     784:	63 2f       	mov	r22, r19
     786:	72 2f       	mov	r23, r18
     788:	26 96       	adiw	r28, 0x06	; 6
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	de bf       	out	0x3e, r29	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	cd bf       	out	0x3d, r28	; 61
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	ff 90       	pop	r15
     79e:	ef 90       	pop	r14
     7a0:	df 90       	pop	r13
     7a2:	bf 90       	pop	r11
     7a4:	af 90       	pop	r10
     7a6:	9f 90       	pop	r9
     7a8:	8f 90       	pop	r8
     7aa:	7f 90       	pop	r7
     7ac:	6f 90       	pop	r6
     7ae:	5f 90       	pop	r5
     7b0:	4f 90       	pop	r4
     7b2:	08 95       	ret

000007b4 <close>:
			return SOCKERR_SOCKCLOSED;
		}
	}
   
   return SOCK_OK;
}
     7b4:	bf 92       	push	r11
     7b6:	cf 92       	push	r12
     7b8:	df 92       	push	r13
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	89 30       	cpi	r24, 0x09	; 9
     7c8:	08 f0       	brcs	.+2      	; 0x7cc <close+0x18>
     7ca:	59 c0       	rjmp	.+178    	; 0x87e <close+0xca>
     7cc:	b8 2e       	mov	r11, r24
     7ce:	08 2f       	mov	r16, r24
     7d0:	10 e0       	ldi	r17, 0x00	; 0
     7d2:	e8 01       	movw	r28, r16
     7d4:	cc 0f       	add	r28, r28
     7d6:	dd 1f       	adc	r29, r29
     7d8:	cc 0f       	add	r28, r28
     7da:	dd 1f       	adc	r29, r29
     7dc:	21 96       	adiw	r28, 0x01	; 1
     7de:	cc 0f       	add	r28, r28
     7e0:	dd 1f       	adc	r29, r29
     7e2:	cc 0f       	add	r28, r28
     7e4:	dd 1f       	adc	r29, r29
     7e6:	cc 0f       	add	r28, r28
     7e8:	dd 1f       	adc	r29, r29
     7ea:	6e 01       	movw	r12, r28
     7ec:	d3 94       	inc	r13
     7ee:	0d 2c       	mov	r0, r13
     7f0:	00 0c       	add	r0, r0
     7f2:	ee 08       	sbc	r14, r14
     7f4:	ff 08       	sbc	r15, r15
     7f6:	40 e1       	ldi	r20, 0x10	; 16
     7f8:	c7 01       	movw	r24, r14
     7fa:	b6 01       	movw	r22, r12
     7fc:	5b d7       	rcall	.+3766   	; 0x16b4 <WIZCHIP_WRITE>
     7fe:	c7 01       	movw	r24, r14
     800:	b6 01       	movw	r22, r12
     802:	f1 d6       	rcall	.+3554   	; 0x15e6 <WIZCHIP_READ>
     804:	81 11       	cpse	r24, r1
     806:	fb cf       	rjmp	.-10     	; 0x7fe <close+0x4a>
     808:	be 01       	movw	r22, r28
     80a:	7e 5f       	subi	r23, 0xFE	; 254
     80c:	07 2e       	mov	r0, r23
     80e:	00 0c       	add	r0, r0
     810:	88 0b       	sbc	r24, r24
     812:	99 0b       	sbc	r25, r25
     814:	4f e1       	ldi	r20, 0x1F	; 31
     816:	4e d7       	rcall	.+3740   	; 0x16b4 <WIZCHIP_WRITE>
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	02 c0       	rjmp	.+4      	; 0x822 <close+0x6e>
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	ba 94       	dec	r11
     824:	e2 f7       	brpl	.-8      	; 0x81e <close+0x6a>
     826:	80 95       	com	r24
     828:	90 95       	com	r25
     82a:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <sock_io_mode>
     82e:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <sock_io_mode+0x1>
     832:	28 23       	and	r18, r24
     834:	39 23       	and	r19, r25
     836:	30 93 1b 04 	sts	0x041B, r19	; 0x80041b <sock_io_mode+0x1>
     83a:	20 93 1a 04 	sts	0x041A, r18	; 0x80041a <sock_io_mode>
     83e:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <sock_is_sending>
     842:	30 91 19 04 	lds	r19, 0x0419	; 0x800419 <sock_is_sending+0x1>
     846:	82 23       	and	r24, r18
     848:	93 23       	and	r25, r19
     84a:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <sock_is_sending+0x1>
     84e:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <sock_is_sending>
     852:	f8 01       	movw	r30, r16
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	e8 5f       	subi	r30, 0xF8	; 248
     85a:	fb 4f       	sbci	r31, 0xFB	; 251
     85c:	11 82       	std	Z+1, r1	; 0x01
     85e:	10 82       	st	Z, r1
     860:	f8 01       	movw	r30, r16
     862:	e0 50       	subi	r30, 0x00	; 0
     864:	fc 4f       	sbci	r31, 0xFC	; 252
     866:	10 82       	st	Z, r1
     868:	be 01       	movw	r22, r28
     86a:	7d 5f       	subi	r23, 0xFD	; 253
     86c:	07 2e       	mov	r0, r23
     86e:	00 0c       	add	r0, r0
     870:	88 0b       	sbc	r24, r24
     872:	99 0b       	sbc	r25, r25
     874:	b8 d6       	rcall	.+3440   	; 0x15e6 <WIZCHIP_READ>
     876:	81 11       	cpse	r24, r1
     878:	f7 cf       	rjmp	.-18     	; 0x868 <close+0xb4>
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	01 c0       	rjmp	.+2      	; 0x880 <close+0xcc>
     87e:	8f ef       	ldi	r24, 0xFF	; 255
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	08 95       	ret

00000894 <socket>:
     894:	4f 92       	push	r4
     896:	5f 92       	push	r5
     898:	6f 92       	push	r6
     89a:	7f 92       	push	r7
     89c:	af 92       	push	r10
     89e:	bf 92       	push	r11
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <socket+0x1e>
     8b2:	1f 92       	push	r1
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	f8 2e       	mov	r15, r24
     8ba:	56 2e       	mov	r5, r22
     8bc:	3a 01       	movw	r6, r20
     8be:	e2 2e       	mov	r14, r18
     8c0:	28 e0       	ldi	r18, 0x08	; 8
     8c2:	28 17       	cp	r18, r24
     8c4:	08 f4       	brcc	.+2      	; 0x8c8 <socket+0x34>
     8c6:	c5 c0       	rjmp	.+394    	; 0xa52 <socket+0x1be>
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	68 17       	cp	r22, r24
     8cc:	39 f0       	breq	.+14     	; 0x8dc <socket+0x48>
     8ce:	68 17       	cp	r22, r24
     8d0:	08 f4       	brcc	.+2      	; 0x8d4 <socket+0x40>
     8d2:	c1 c0       	rjmp	.+386    	; 0xa56 <socket+0x1c2>
     8d4:	24 e0       	ldi	r18, 0x04	; 4
     8d6:	26 17       	cp	r18, r22
     8d8:	a8 f4       	brcc	.+42     	; 0x904 <socket+0x70>
     8da:	bd c0       	rjmp	.+378    	; 0xa56 <socket+0x1c2>
     8dc:	24 e0       	ldi	r18, 0x04	; 4
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	ae 01       	movw	r20, r28
     8e2:	4f 5f       	subi	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	7f e0       	ldi	r23, 0x0F	; 15
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	54 d7       	rcall	.+3752   	; 0x1798 <WIZCHIP_READ_BUF>
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	9a 81       	ldd	r25, Y+2	; 0x02
     8f4:	ab 81       	ldd	r26, Y+3	; 0x03
     8f6:	bc 81       	ldd	r27, Y+4	; 0x04
     8f8:	89 2b       	or	r24, r25
     8fa:	8a 2b       	or	r24, r26
     8fc:	8b 2b       	or	r24, r27
     8fe:	11 f4       	brne	.+4      	; 0x904 <socket+0x70>
     900:	8d ef       	ldi	r24, 0xFD	; 253
     902:	b2 c0       	rjmp	.+356    	; 0xa68 <socket+0x1d4>
     904:	e2 fc       	sbrc	r14, 2
     906:	a9 c0       	rjmp	.+338    	; 0xa5a <socket+0x1c6>
     908:	ee 20       	and	r14, r14
     90a:	a9 f0       	breq	.+42     	; 0x936 <socket+0xa2>
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	58 16       	cp	r5, r24
     910:	21 f0       	breq	.+8      	; 0x91a <socket+0x86>
     912:	22 e0       	ldi	r18, 0x02	; 2
     914:	52 16       	cp	r5, r18
     916:	29 f0       	breq	.+10     	; 0x922 <socket+0x8e>
     918:	0e c0       	rjmp	.+28     	; 0x936 <socket+0xa2>
     91a:	8e 2d       	mov	r24, r14
     91c:	81 72       	andi	r24, 0x21	; 33
     91e:	59 f4       	brne	.+22     	; 0x936 <socket+0xa2>
     920:	9e c0       	rjmp	.+316    	; 0xa5e <socket+0x1ca>
     922:	e5 fe       	sbrs	r14, 5
     924:	03 c0       	rjmp	.+6      	; 0x92c <socket+0x98>
     926:	ee 20       	and	r14, r14
     928:	0c f0       	brlt	.+2      	; 0x92c <socket+0x98>
     92a:	9b c0       	rjmp	.+310    	; 0xa62 <socket+0x1ce>
     92c:	e4 fe       	sbrs	r14, 4
     92e:	03 c0       	rjmp	.+6      	; 0x936 <socket+0xa2>
     930:	ee 20       	and	r14, r14
     932:	0c f0       	brlt	.+2      	; 0x936 <socket+0xa2>
     934:	98 c0       	rjmp	.+304    	; 0xa66 <socket+0x1d2>
     936:	8f 2d       	mov	r24, r15
     938:	3d df       	rcall	.-390    	; 0x7b4 <close>
     93a:	cf 2c       	mov	r12, r15
     93c:	d1 2c       	mov	r13, r1
     93e:	86 01       	movw	r16, r12
     940:	00 0f       	add	r16, r16
     942:	11 1f       	adc	r17, r17
     944:	00 0f       	add	r16, r16
     946:	11 1f       	adc	r17, r17
     948:	0f 5f       	subi	r16, 0xFF	; 255
     94a:	1f 4f       	sbci	r17, 0xFF	; 255
     94c:	00 0f       	add	r16, r16
     94e:	11 1f       	adc	r17, r17
     950:	00 0f       	add	r16, r16
     952:	11 1f       	adc	r17, r17
     954:	00 0f       	add	r16, r16
     956:	11 1f       	adc	r17, r17
     958:	4e 2d       	mov	r20, r14
     95a:	40 7f       	andi	r20, 0xF0	; 240
     95c:	45 29       	or	r20, r5
     95e:	b8 01       	movw	r22, r16
     960:	01 2e       	mov	r0, r17
     962:	00 0c       	add	r0, r0
     964:	88 0b       	sbc	r24, r24
     966:	99 0b       	sbc	r25, r25
     968:	a5 d6       	rcall	.+3402   	; 0x16b4 <WIZCHIP_WRITE>
     96a:	61 14       	cp	r6, r1
     96c:	71 04       	cpc	r7, r1
     96e:	91 f4       	brne	.+36     	; 0x994 <socket+0x100>
     970:	60 90 04 02 	lds	r6, 0x0204	; 0x800204 <sock_any_port>
     974:	70 90 05 02 	lds	r7, 0x0205	; 0x800205 <sock_any_port+0x1>
     978:	c3 01       	movw	r24, r6
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sock_any_port+0x1>
     980:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sock_any_port>
     984:	40 96       	adiw	r24, 0x10	; 16
     986:	31 f4       	brne	.+12     	; 0x994 <socket+0x100>
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 ec       	ldi	r25, 0xC0	; 192
     98c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sock_any_port+0x1>
     990:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sock_any_port>
     994:	b8 01       	movw	r22, r16
     996:	7c 5f       	subi	r23, 0xFC	; 252
     998:	07 2e       	mov	r0, r23
     99a:	00 0c       	add	r0, r0
     99c:	88 0b       	sbc	r24, r24
     99e:	99 0b       	sbc	r25, r25
     9a0:	47 2d       	mov	r20, r7
     9a2:	88 d6       	rcall	.+3344   	; 0x16b4 <WIZCHIP_WRITE>
     9a4:	b8 01       	movw	r22, r16
     9a6:	7b 5f       	subi	r23, 0xFB	; 251
     9a8:	07 2e       	mov	r0, r23
     9aa:	00 0c       	add	r0, r0
     9ac:	88 0b       	sbc	r24, r24
     9ae:	99 0b       	sbc	r25, r25
     9b0:	46 2d       	mov	r20, r6
     9b2:	80 d6       	rcall	.+3328   	; 0x16b4 <WIZCHIP_WRITE>
     9b4:	28 01       	movw	r4, r16
     9b6:	53 94       	inc	r5
     9b8:	05 2c       	mov	r0, r5
     9ba:	00 0c       	add	r0, r0
     9bc:	66 08       	sbc	r6, r6
     9be:	77 08       	sbc	r7, r7
     9c0:	41 e0       	ldi	r20, 0x01	; 1
     9c2:	c3 01       	movw	r24, r6
     9c4:	b2 01       	movw	r22, r4
     9c6:	76 d6       	rcall	.+3308   	; 0x16b4 <WIZCHIP_WRITE>
     9c8:	c3 01       	movw	r24, r6
     9ca:	b2 01       	movw	r22, r4
     9cc:	0c d6       	rcall	.+3096   	; 0x15e6 <WIZCHIP_READ>
     9ce:	81 11       	cpse	r24, r1
     9d0:	fb cf       	rjmp	.-10     	; 0x9c8 <socket+0x134>
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0f 2c       	mov	r0, r15
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <socket+0x14a>
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	0a 94       	dec	r0
     9e0:	e2 f7       	brpl	.-8      	; 0x9da <socket+0x146>
     9e2:	80 95       	com	r24
     9e4:	90 95       	com	r25
     9e6:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <sock_io_mode>
     9ea:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <sock_io_mode+0x1>
     9ee:	28 23       	and	r18, r24
     9f0:	39 23       	and	r19, r25
     9f2:	e0 fa       	bst	r14, 0
     9f4:	aa 24       	eor	r10, r10
     9f6:	a0 f8       	bld	r10, 0
     9f8:	b1 2c       	mov	r11, r1
     9fa:	0f 2c       	mov	r0, r15
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <socket+0x16e>
     9fe:	aa 0c       	add	r10, r10
     a00:	bb 1c       	adc	r11, r11
     a02:	0a 94       	dec	r0
     a04:	e2 f7       	brpl	.-8      	; 0x9fe <socket+0x16a>
     a06:	a2 2a       	or	r10, r18
     a08:	b3 2a       	or	r11, r19
     a0a:	b0 92 1b 04 	sts	0x041B, r11	; 0x80041b <sock_io_mode+0x1>
     a0e:	a0 92 1a 04 	sts	0x041A, r10	; 0x80041a <sock_io_mode>
     a12:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <sock_is_sending>
     a16:	30 91 19 04 	lds	r19, 0x0419	; 0x800419 <sock_is_sending+0x1>
     a1a:	82 23       	and	r24, r18
     a1c:	93 23       	and	r25, r19
     a1e:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <sock_is_sending+0x1>
     a22:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <sock_is_sending>
     a26:	f6 01       	movw	r30, r12
     a28:	ee 0f       	add	r30, r30
     a2a:	ff 1f       	adc	r31, r31
     a2c:	e8 5f       	subi	r30, 0xF8	; 248
     a2e:	fb 4f       	sbci	r31, 0xFB	; 251
     a30:	11 82       	std	Z+1, r1	; 0x01
     a32:	10 82       	st	Z, r1
     a34:	f6 01       	movw	r30, r12
     a36:	e0 50       	subi	r30, 0x00	; 0
     a38:	fc 4f       	sbci	r31, 0xFC	; 252
     a3a:	10 82       	st	Z, r1
     a3c:	b8 01       	movw	r22, r16
     a3e:	7d 5f       	subi	r23, 0xFD	; 253
     a40:	07 2e       	mov	r0, r23
     a42:	00 0c       	add	r0, r0
     a44:	88 0b       	sbc	r24, r24
     a46:	99 0b       	sbc	r25, r25
     a48:	ce d5       	rcall	.+2972   	; 0x15e6 <WIZCHIP_READ>
     a4a:	88 23       	and	r24, r24
     a4c:	b9 f3       	breq	.-18     	; 0xa3c <socket+0x1a8>
     a4e:	8f 2d       	mov	r24, r15
     a50:	0b c0       	rjmp	.+22     	; 0xa68 <socket+0x1d4>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	09 c0       	rjmp	.+18     	; 0xa68 <socket+0x1d4>
     a56:	8b ef       	ldi	r24, 0xFB	; 251
     a58:	07 c0       	rjmp	.+14     	; 0xa68 <socket+0x1d4>
     a5a:	8a ef       	ldi	r24, 0xFA	; 250
     a5c:	05 c0       	rjmp	.+10     	; 0xa68 <socket+0x1d4>
     a5e:	8a ef       	ldi	r24, 0xFA	; 250
     a60:	03 c0       	rjmp	.+6      	; 0xa68 <socket+0x1d4>
     a62:	8a ef       	ldi	r24, 0xFA	; 250
     a64:	01 c0       	rjmp	.+2      	; 0xa68 <socket+0x1d4>
     a66:	8a ef       	ldi	r24, 0xFA	; 250
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	bf 90       	pop	r11
     a82:	af 90       	pop	r10
     a84:	7f 90       	pop	r7
     a86:	6f 90       	pop	r6
     a88:	5f 90       	pop	r5
     a8a:	4f 90       	pop	r4
     a8c:	08 95       	ret

00000a8e <listen>:
     a8e:	8f 92       	push	r8
     a90:	9f 92       	push	r9
     a92:	af 92       	push	r10
     a94:	bf 92       	push	r11
     a96:	cf 92       	push	r12
     a98:	df 92       	push	r13
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	cf 93       	push	r28
     aa0:	89 30       	cpi	r24, 0x09	; 9
     aa2:	08 f0       	brcs	.+2      	; 0xaa6 <listen+0x18>
     aa4:	3f c0       	rjmp	.+126    	; 0xb24 <listen+0x96>
     aa6:	c8 2f       	mov	r28, r24
     aa8:	c8 2e       	mov	r12, r24
     aaa:	d1 2c       	mov	r13, r1
     aac:	cc 0c       	add	r12, r12
     aae:	dd 1c       	adc	r13, r13
     ab0:	cc 0c       	add	r12, r12
     ab2:	dd 1c       	adc	r13, r13
     ab4:	8f ef       	ldi	r24, 0xFF	; 255
     ab6:	c8 1a       	sub	r12, r24
     ab8:	d8 0a       	sbc	r13, r24
     aba:	cc 0c       	add	r12, r12
     abc:	dd 1c       	adc	r13, r13
     abe:	cc 0c       	add	r12, r12
     ac0:	dd 1c       	adc	r13, r13
     ac2:	cc 0c       	add	r12, r12
     ac4:	dd 1c       	adc	r13, r13
     ac6:	b6 01       	movw	r22, r12
     ac8:	0d 2c       	mov	r0, r13
     aca:	00 0c       	add	r0, r0
     acc:	88 0b       	sbc	r24, r24
     ace:	99 0b       	sbc	r25, r25
     ad0:	8a d5       	rcall	.+2836   	; 0x15e6 <WIZCHIP_READ>
     ad2:	8f 70       	andi	r24, 0x0F	; 15
     ad4:	81 30       	cpi	r24, 0x01	; 1
     ad6:	41 f5       	brne	.+80     	; 0xb28 <listen+0x9a>
     ad8:	46 01       	movw	r8, r12
     ada:	8d ef       	ldi	r24, 0xFD	; 253
     adc:	98 1a       	sub	r9, r24
     ade:	09 2c       	mov	r0, r9
     ae0:	00 0c       	add	r0, r0
     ae2:	aa 08       	sbc	r10, r10
     ae4:	bb 08       	sbc	r11, r11
     ae6:	c5 01       	movw	r24, r10
     ae8:	b4 01       	movw	r22, r8
     aea:	7d d5       	rcall	.+2810   	; 0x15e6 <WIZCHIP_READ>
     aec:	83 31       	cpi	r24, 0x13	; 19
     aee:	f1 f4       	brne	.+60     	; 0xb2c <listen+0x9e>
     af0:	d3 94       	inc	r13
     af2:	0d 2c       	mov	r0, r13
     af4:	00 0c       	add	r0, r0
     af6:	ee 08       	sbc	r14, r14
     af8:	ff 08       	sbc	r15, r15
     afa:	42 e0       	ldi	r20, 0x02	; 2
     afc:	c7 01       	movw	r24, r14
     afe:	b6 01       	movw	r22, r12
     b00:	d9 d5       	rcall	.+2994   	; 0x16b4 <WIZCHIP_WRITE>
     b02:	c7 01       	movw	r24, r14
     b04:	b6 01       	movw	r22, r12
     b06:	6f d5       	rcall	.+2782   	; 0x15e6 <WIZCHIP_READ>
     b08:	81 11       	cpse	r24, r1
     b0a:	fb cf       	rjmp	.-10     	; 0xb02 <listen+0x74>
     b0c:	04 c0       	rjmp	.+8      	; 0xb16 <listen+0x88>
     b0e:	8c 2f       	mov	r24, r28
     b10:	51 de       	rcall	.-862    	; 0x7b4 <close>
     b12:	8c ef       	ldi	r24, 0xFC	; 252
     b14:	0c c0       	rjmp	.+24     	; 0xb2e <listen+0xa0>
     b16:	c5 01       	movw	r24, r10
     b18:	b4 01       	movw	r22, r8
     b1a:	65 d5       	rcall	.+2762   	; 0x15e6 <WIZCHIP_READ>
     b1c:	84 31       	cpi	r24, 0x14	; 20
     b1e:	b9 f7       	brne	.-18     	; 0xb0e <listen+0x80>
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	05 c0       	rjmp	.+10     	; 0xb2e <listen+0xa0>
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	03 c0       	rjmp	.+6      	; 0xb2e <listen+0xa0>
     b28:	8b ef       	ldi	r24, 0xFB	; 251
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <listen+0xa0>
     b2c:	8d ef       	ldi	r24, 0xFD	; 253
     b2e:	cf 91       	pop	r28
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	bf 90       	pop	r11
     b3a:	af 90       	pop	r10
     b3c:	9f 90       	pop	r9
     b3e:	8f 90       	pop	r8
     b40:	08 95       	ret

00000b42 <disconnect>:

int8_t disconnect(uint8_t sn)
{
     b42:	cf 92       	push	r12
     b44:	df 92       	push	r13
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
   CHECK_SOCKNUM();
     b50:	89 30       	cpi	r24, 0x09	; 9
     b52:	08 f0       	brcs	.+2      	; 0xb56 <disconnect+0x14>
     b54:	5d c0       	rjmp	.+186    	; 0xc10 <disconnect+0xce>
     b56:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     b58:	c8 2f       	mov	r28, r24
     b5a:	d0 e0       	ldi	r29, 0x00	; 0
     b5c:	cc 0f       	add	r28, r28
     b5e:	dd 1f       	adc	r29, r29
     b60:	cc 0f       	add	r28, r28
     b62:	dd 1f       	adc	r29, r29
     b64:	21 96       	adiw	r28, 0x01	; 1
     b66:	cc 0f       	add	r28, r28
     b68:	dd 1f       	adc	r29, r29
     b6a:	cc 0f       	add	r28, r28
     b6c:	dd 1f       	adc	r29, r29
     b6e:	cc 0f       	add	r28, r28
     b70:	dd 1f       	adc	r29, r29
     b72:	be 01       	movw	r22, r28
     b74:	0d 2e       	mov	r0, r29
     b76:	00 0c       	add	r0, r0
     b78:	88 0b       	sbc	r24, r24
     b7a:	99 0b       	sbc	r25, r25
     b7c:	34 d5       	rcall	.+2664   	; 0x15e6 <WIZCHIP_READ>
     b7e:	8f 70       	andi	r24, 0x0F	; 15
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	09 f0       	breq	.+2      	; 0xb86 <disconnect+0x44>
     b84:	47 c0       	rjmp	.+142    	; 0xc14 <disconnect+0xd2>
	setSn_CR(sn,Sn_CR_DISCON);
     b86:	6e 01       	movw	r12, r28
     b88:	d3 94       	inc	r13
     b8a:	0d 2c       	mov	r0, r13
     b8c:	00 0c       	add	r0, r0
     b8e:	ee 08       	sbc	r14, r14
     b90:	ff 08       	sbc	r15, r15
     b92:	48 e0       	ldi	r20, 0x08	; 8
     b94:	c7 01       	movw	r24, r14
     b96:	b6 01       	movw	r22, r12
     b98:	8d d5       	rcall	.+2842   	; 0x16b4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
     b9a:	c7 01       	movw	r24, r14
     b9c:	b6 01       	movw	r22, r12
     b9e:	23 d5       	rcall	.+2630   	; 0x15e6 <WIZCHIP_READ>
     ba0:	81 11       	cpse	r24, r1
     ba2:	fb cf       	rjmp	.-10     	; 0xb9a <disconnect+0x58>
	sock_is_sending &= ~(1<<sn);
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	01 2e       	mov	r0, r17
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <disconnect+0x6e>
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	0a 94       	dec	r0
     bb2:	e2 f7       	brpl	.-8      	; 0xbac <disconnect+0x6a>
     bb4:	9c 01       	movw	r18, r24
     bb6:	20 95       	com	r18
     bb8:	30 95       	com	r19
     bba:	40 91 18 04 	lds	r20, 0x0418	; 0x800418 <sock_is_sending>
     bbe:	50 91 19 04 	lds	r21, 0x0419	; 0x800419 <sock_is_sending+0x1>
     bc2:	24 23       	and	r18, r20
     bc4:	35 23       	and	r19, r21
     bc6:	30 93 19 04 	sts	0x0419, r19	; 0x800419 <sock_is_sending+0x1>
     bca:	20 93 18 04 	sts	0x0418, r18	; 0x800418 <sock_is_sending>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     bce:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <sock_io_mode>
     bd2:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <sock_io_mode+0x1>
     bd6:	82 23       	and	r24, r18
     bd8:	93 23       	and	r25, r19
     bda:	89 2b       	or	r24, r25
     bdc:	71 f0       	breq	.+28     	; 0xbfa <disconnect+0xb8>
     bde:	1c c0       	rjmp	.+56     	; 0xc18 <disconnect+0xd6>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
     be0:	be 01       	movw	r22, r28
     be2:	7e 5f       	subi	r23, 0xFE	; 254
     be4:	07 2e       	mov	r0, r23
     be6:	00 0c       	add	r0, r0
     be8:	88 0b       	sbc	r24, r24
     bea:	99 0b       	sbc	r25, r25
     bec:	fc d4       	rcall	.+2552   	; 0x15e6 <WIZCHIP_READ>
     bee:	83 ff       	sbrs	r24, 3
	   {
	      close(sn);
     bf0:	04 c0       	rjmp	.+8      	; 0xbfa <disconnect+0xb8>
     bf2:	81 2f       	mov	r24, r17
     bf4:	df dd       	rcall	.-1090   	; 0x7b4 <close>
	      return SOCKERR_TIMEOUT;
     bf6:	83 ef       	ldi	r24, 0xF3	; 243
     bf8:	10 c0       	rjmp	.+32     	; 0xc1a <disconnect+0xd8>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
	while(getSn_SR(sn) != SOCK_CLOSED)
     bfa:	be 01       	movw	r22, r28
     bfc:	7d 5f       	subi	r23, 0xFD	; 253
     bfe:	07 2e       	mov	r0, r23
     c00:	00 0c       	add	r0, r0
     c02:	88 0b       	sbc	r24, r24
     c04:	99 0b       	sbc	r25, r25
     c06:	ef d4       	rcall	.+2526   	; 0x15e6 <WIZCHIP_READ>
     c08:	81 11       	cpse	r24, r1
     c0a:	ea cf       	rjmp	.-44     	; 0xbe0 <disconnect+0x9e>
	   {
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	05 c0       	rjmp	.+10     	; 0xc1a <disconnect+0xd8>
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
     c10:	8f ef       	ldi	r24, 0xFF	; 255
     c12:	03 c0       	rjmp	.+6      	; 0xc1a <disconnect+0xd8>
   CHECK_SOCKMODE(Sn_MR_TCP);
     c14:	8b ef       	ldi	r24, 0xFB	; 251
     c16:	01 c0       	rjmp	.+2      	; 0xc1a <disconnect+0xd8>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     c18:	80 e0       	ldi	r24, 0x00	; 0
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
}
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	df 90       	pop	r13
     c26:	cf 90       	pop	r12
     c28:	08 95       	ret

00000c2a <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
     c2a:	2f 92       	push	r2
     c2c:	3f 92       	push	r3
     c2e:	4f 92       	push	r4
     c30:	5f 92       	push	r5
     c32:	6f 92       	push	r6
     c34:	7f 92       	push	r7
     c36:	8f 92       	push	r8
     c38:	9f 92       	push	r9
     c3a:	af 92       	push	r10
     c3c:	bf 92       	push	r11
     c3e:	cf 92       	push	r12
     c40:	df 92       	push	r13
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <send+0x26>
     c50:	00 d0       	rcall	.+0      	; 0xc52 <send+0x28>
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     c56:	89 30       	cpi	r24, 0x09	; 9
     c58:	08 f0       	brcs	.+2      	; 0xc5c <send+0x32>
     c5a:	c7 c0       	rjmp	.+398    	; 0xdea <send+0x1c0>
     c5c:	5e 83       	std	Y+6, r21	; 0x06
     c5e:	4d 83       	std	Y+5, r20	; 0x05
     c60:	1b 01       	movw	r2, r22
     c62:	f8 2e       	mov	r15, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     c64:	c8 2e       	mov	r12, r24
     c66:	d1 2c       	mov	r13, r1
     c68:	cc 0c       	add	r12, r12
     c6a:	dd 1c       	adc	r13, r13
     c6c:	cc 0c       	add	r12, r12
     c6e:	dd 1c       	adc	r13, r13
     c70:	2f ef       	ldi	r18, 0xFF	; 255
     c72:	c2 1a       	sub	r12, r18
     c74:	d2 0a       	sbc	r13, r18
     c76:	cc 0c       	add	r12, r12
     c78:	dd 1c       	adc	r13, r13
     c7a:	cc 0c       	add	r12, r12
     c7c:	dd 1c       	adc	r13, r13
     c7e:	cc 0c       	add	r12, r12
     c80:	dd 1c       	adc	r13, r13
     c82:	b6 01       	movw	r22, r12
     c84:	0d 2c       	mov	r0, r13
     c86:	00 0c       	add	r0, r0
     c88:	88 0b       	sbc	r24, r24
     c8a:	99 0b       	sbc	r25, r25
     c8c:	ac d4       	rcall	.+2392   	; 0x15e6 <WIZCHIP_READ>
     c8e:	8f 70       	andi	r24, 0x0F	; 15
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	09 f0       	breq	.+2      	; 0xc96 <send+0x6c>
     c94:	ae c0       	rjmp	.+348    	; 0xdf2 <send+0x1c8>
   CHECK_SOCKDATA();
     c96:	4d 81       	ldd	r20, Y+5	; 0x05
     c98:	5e 81       	ldd	r21, Y+6	; 0x06
     c9a:	45 2b       	or	r20, r21
     c9c:	09 f4       	brne	.+2      	; 0xca0 <send+0x76>
     c9e:	ae c0       	rjmp	.+348    	; 0xdfc <send+0x1d2>
   tmp = getSn_SR(sn);
     ca0:	26 01       	movw	r4, r12
     ca2:	5d ef       	ldi	r21, 0xFD	; 253
     ca4:	55 1a       	sub	r5, r21
     ca6:	05 2c       	mov	r0, r5
     ca8:	00 0c       	add	r0, r0
     caa:	66 08       	sbc	r6, r6
     cac:	77 08       	sbc	r7, r7
     cae:	c3 01       	movw	r24, r6
     cb0:	b2 01       	movw	r22, r4
     cb2:	99 d4       	rcall	.+2354   	; 0x15e6 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     cb4:	87 31       	cpi	r24, 0x17	; 23
     cb6:	19 f0       	breq	.+6      	; 0xcbe <send+0x94>
     cb8:	8c 31       	cpi	r24, 0x1C	; 28
     cba:	09 f0       	breq	.+2      	; 0xcbe <send+0x94>
     cbc:	a4 c0       	rjmp	.+328    	; 0xe06 <send+0x1dc>
   if( sock_is_sending & (1<<sn) )
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	4c 01       	movw	r8, r24
     cc4:	0f 2c       	mov	r0, r15
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <send+0xa2>
     cc8:	88 0c       	add	r8, r8
     cca:	99 1c       	adc	r9, r9
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <send+0x9e>
     cd0:	54 01       	movw	r10, r8
     cd2:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <sock_is_sending>
     cd6:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <sock_is_sending+0x1>
     cda:	88 21       	and	r24, r8
     cdc:	99 21       	and	r25, r9
     cde:	89 2b       	or	r24, r25
     ce0:	61 f1       	breq	.+88     	; 0xd3a <send+0x110>
   {
      tmp = getSn_IR(sn);
     ce2:	c6 01       	movw	r24, r12
     ce4:	9e 5f       	subi	r25, 0xFE	; 254
     ce6:	9c 01       	movw	r18, r24
     ce8:	99 0f       	add	r25, r25
     cea:	44 0b       	sbc	r20, r20
     cec:	55 0b       	sbc	r21, r21
     cee:	29 83       	std	Y+1, r18	; 0x01
     cf0:	3a 83       	std	Y+2, r19	; 0x02
     cf2:	4b 83       	std	Y+3, r20	; 0x03
     cf4:	5c 83       	std	Y+4, r21	; 0x04
     cf6:	ca 01       	movw	r24, r20
     cf8:	b9 01       	movw	r22, r18
     cfa:	75 d4       	rcall	.+2282   	; 0x15e6 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
     cfc:	84 ff       	sbrs	r24, 4
     cfe:	14 c0       	rjmp	.+40     	; 0xd28 <send+0xfe>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
     d00:	40 e1       	ldi	r20, 0x10	; 16
     d02:	69 81       	ldd	r22, Y+1	; 0x01
     d04:	7a 81       	ldd	r23, Y+2	; 0x02
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	d4 d4       	rcall	.+2472   	; 0x16b4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
     d0c:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <sock_is_sending>
     d10:	30 91 19 04 	lds	r19, 0x0419	; 0x800419 <sock_is_sending+0x1>
     d14:	c4 01       	movw	r24, r8
     d16:	80 95       	com	r24
     d18:	90 95       	com	r25
     d1a:	82 23       	and	r24, r18
     d1c:	93 23       	and	r25, r19
     d1e:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <sock_is_sending+0x1>
     d22:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <sock_is_sending>
      }
      else if(tmp & Sn_IR_TIMEOUT)
     d26:	09 c0       	rjmp	.+18     	; 0xd3a <send+0x110>
     d28:	83 ff       	sbrs	r24, 3
      {
         close(sn);
     d2a:	72 c0       	rjmp	.+228    	; 0xe10 <send+0x1e6>
     d2c:	8f 2d       	mov	r24, r15
     d2e:	42 dd       	rcall	.-1404   	; 0x7b4 <close>
         return SOCKERR_TIMEOUT;
     d30:	63 ef       	ldi	r22, 0xF3	; 243
     d32:	7f ef       	ldi	r23, 0xFF	; 255
     d34:	8f ef       	ldi	r24, 0xFF	; 255
     d36:	9f ef       	ldi	r25, 0xFF	; 255
     d38:	72 c0       	rjmp	.+228    	; 0xe1e <send+0x1f4>
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
     d3a:	b6 01       	movw	r22, r12
     d3c:	71 5e       	subi	r23, 0xE1	; 225
     d3e:	07 2e       	mov	r0, r23
     d40:	00 0c       	add	r0, r0
     d42:	88 0b       	sbc	r24, r24
     d44:	99 0b       	sbc	r25, r25
     d46:	4f d4       	rcall	.+2206   	; 0x15e6 <WIZCHIP_READ>
     d48:	08 2f       	mov	r16, r24
     d4a:	10 e0       	ldi	r17, 0x00	; 0
     d4c:	10 2f       	mov	r17, r16
     d4e:	00 27       	eor	r16, r16
     d50:	11 0f       	add	r17, r17
     d52:	11 0f       	add	r17, r17
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
     d54:	4d 81       	ldd	r20, Y+5	; 0x05
     d56:	5e 81       	ldd	r21, Y+6	; 0x06
     d58:	04 17       	cp	r16, r20
     d5a:	15 07       	cpc	r17, r21
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <send+0x136>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
     d5e:	8a 01       	movw	r16, r20
     d60:	8f 2d       	mov	r24, r15
     d62:	23 d6       	rcall	.+3142   	; 0x19aa <getSn_TX_FSR>
     d64:	9a 83       	std	Y+2, r25	; 0x02
      tmp = getSn_SR(sn);
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	c3 01       	movw	r24, r6
     d6a:	b2 01       	movw	r22, r4
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
     d6c:	3c d4       	rcall	.+2168   	; 0x15e6 <WIZCHIP_READ>
     d6e:	87 31       	cpi	r24, 0x17	; 23
     d70:	49 f0       	breq	.+18     	; 0xd84 <send+0x15a>
     d72:	8c 31       	cpi	r24, 0x1C	; 28
      {
         close(sn);
     d74:	39 f0       	breq	.+14     	; 0xd84 <send+0x15a>
     d76:	8f 2d       	mov	r24, r15
     d78:	1d dd       	rcall	.-1478   	; 0x7b4 <close>
         return SOCKERR_SOCKSTATUS;
     d7a:	69 ef       	ldi	r22, 0xF9	; 249
     d7c:	7f ef       	ldi	r23, 0xFF	; 255
     d7e:	8f ef       	ldi	r24, 0xFF	; 255
     d80:	9f ef       	ldi	r25, 0xFF	; 255
     d82:	4d c0       	rjmp	.+154    	; 0xe1e <send+0x1f4>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     d84:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <sock_io_mode>
     d88:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <sock_io_mode+0x1>
     d8c:	8a 21       	and	r24, r10
     d8e:	9b 21       	and	r25, r11
     d90:	89 2b       	or	r24, r25
     d92:	31 f0       	breq	.+12     	; 0xda0 <send+0x176>
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	80 17       	cp	r24, r16
     d9a:	91 07       	cpc	r25, r17
     d9c:	08 f4       	brcc	.+2      	; 0xda0 <send+0x176>
      if(len <= freesize) break;
     d9e:	3c c0       	rjmp	.+120    	; 0xe18 <send+0x1ee>
     da0:	29 81       	ldd	r18, Y+1	; 0x01
     da2:	3a 81       	ldd	r19, Y+2	; 0x02
     da4:	20 17       	cp	r18, r16
     da6:	31 07       	cpc	r19, r17
   }
   wiz_send_data(sn, buf, len);
     da8:	d8 f2       	brcs	.-74     	; 0xd60 <send+0x136>
     daa:	a8 01       	movw	r20, r16
     dac:	b1 01       	movw	r22, r2
     dae:	8f 2d       	mov	r24, r15

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
     db0:	ac d6       	rcall	.+3416   	; 0x1b0a <wiz_send_data>
     db2:	d3 94       	inc	r13
     db4:	0d 2c       	mov	r0, r13
     db6:	00 0c       	add	r0, r0
     db8:	ee 08       	sbc	r14, r14
     dba:	ff 08       	sbc	r15, r15
     dbc:	40 e2       	ldi	r20, 0x20	; 32
     dbe:	c7 01       	movw	r24, r14
     dc0:	b6 01       	movw	r22, r12
   /* wait to process the command... */
   while(getSn_CR(sn));
     dc2:	78 d4       	rcall	.+2288   	; 0x16b4 <WIZCHIP_WRITE>
     dc4:	c7 01       	movw	r24, r14
     dc6:	b6 01       	movw	r22, r12
     dc8:	0e d4       	rcall	.+2076   	; 0x15e6 <WIZCHIP_READ>
     dca:	81 11       	cpse	r24, r1
     dcc:	fb cf       	rjmp	.-10     	; 0xdc4 <send+0x19a>
   sock_is_sending |= (1 << sn);
     dce:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <sock_is_sending>
     dd2:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <sock_is_sending+0x1>
     dd6:	88 2a       	or	r8, r24
     dd8:	99 2a       	or	r9, r25
     dda:	90 92 19 04 	sts	0x0419, r9	; 0x800419 <sock_is_sending+0x1>
     dde:	80 92 18 04 	sts	0x0418, r8	; 0x800418 <sock_is_sending>
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     de2:	b8 01       	movw	r22, r16
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	1a c0       	rjmp	.+52     	; 0xe1e <send+0x1f4>
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     dea:	6f ef       	ldi	r22, 0xFF	; 255
     dec:	7f ef       	ldi	r23, 0xFF	; 255
     dee:	cb 01       	movw	r24, r22
     df0:	16 c0       	rjmp	.+44     	; 0xe1e <send+0x1f4>
   CHECK_SOCKMODE(Sn_MR_TCP);
     df2:	6b ef       	ldi	r22, 0xFB	; 251
     df4:	7f ef       	ldi	r23, 0xFF	; 255
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	9f ef       	ldi	r25, 0xFF	; 255
     dfa:	11 c0       	rjmp	.+34     	; 0xe1e <send+0x1f4>
   CHECK_SOCKDATA();
     dfc:	62 ef       	ldi	r22, 0xF2	; 242
     dfe:	7f ef       	ldi	r23, 0xFF	; 255
     e00:	8f ef       	ldi	r24, 0xFF	; 255
     e02:	9f ef       	ldi	r25, 0xFF	; 255
     e04:	0c c0       	rjmp	.+24     	; 0xe1e <send+0x1f4>
   tmp = getSn_SR(sn);
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     e06:	69 ef       	ldi	r22, 0xF9	; 249
     e08:	7f ef       	ldi	r23, 0xFF	; 255
     e0a:	8f ef       	ldi	r24, 0xFF	; 255
     e0c:	9f ef       	ldi	r25, 0xFF	; 255
     e0e:	07 c0       	rjmp	.+14     	; 0xe1e <send+0x1f4>
      else if(tmp & Sn_IR_TIMEOUT)
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	cb 01       	movw	r24, r22
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <send+0x1f4>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	cb 01       	movw	r24, r22
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     e1e:	26 96       	adiw	r28, 0x06	; 6
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	1f 91       	pop	r17
     e30:	0f 91       	pop	r16
     e32:	ff 90       	pop	r15
     e34:	ef 90       	pop	r14
     e36:	df 90       	pop	r13
     e38:	cf 90       	pop	r12
     e3a:	bf 90       	pop	r11
     e3c:	af 90       	pop	r10
     e3e:	9f 90       	pop	r9
     e40:	8f 90       	pop	r8
     e42:	7f 90       	pop	r7
     e44:	6f 90       	pop	r6
     e46:	5f 90       	pop	r5
     e48:	4f 90       	pop	r4
     e4a:	3f 90       	pop	r3
     e4c:	2f 90       	pop	r2
     e4e:	08 95       	ret

00000e50 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
     e50:	7f 92       	push	r7
     e52:	8f 92       	push	r8
     e54:	9f 92       	push	r9
     e56:	af 92       	push	r10
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
     e6a:	89 30       	cpi	r24, 0x09	; 9
     e6c:	08 f0       	brcs	.+2      	; 0xe70 <recv+0x20>
     e6e:	90 c0       	rjmp	.+288    	; 0xf90 <recv+0x140>
     e70:	ea 01       	movw	r28, r20
     e72:	4b 01       	movw	r8, r22
     e74:	78 2e       	mov	r7, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     e76:	c8 2e       	mov	r12, r24
     e78:	d1 2c       	mov	r13, r1
     e7a:	86 01       	movw	r16, r12
     e7c:	00 0f       	add	r16, r16
     e7e:	11 1f       	adc	r17, r17
     e80:	00 0f       	add	r16, r16
     e82:	11 1f       	adc	r17, r17
     e84:	0f 5f       	subi	r16, 0xFF	; 255
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
     e88:	00 0f       	add	r16, r16
     e8a:	11 1f       	adc	r17, r17
     e8c:	00 0f       	add	r16, r16
     e8e:	11 1f       	adc	r17, r17
     e90:	00 0f       	add	r16, r16
     e92:	11 1f       	adc	r17, r17
     e94:	b8 01       	movw	r22, r16
     e96:	01 2e       	mov	r0, r17
     e98:	00 0c       	add	r0, r0
     e9a:	88 0b       	sbc	r24, r24
     e9c:	99 0b       	sbc	r25, r25
     e9e:	a3 d3       	rcall	.+1862   	; 0x15e6 <WIZCHIP_READ>
     ea0:	8f 70       	andi	r24, 0x0F	; 15
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	09 f0       	breq	.+2      	; 0xea8 <recv+0x58>
     ea6:	78 c0       	rjmp	.+240    	; 0xf98 <recv+0x148>
   CHECK_SOCKDATA();
     ea8:	20 97       	sbiw	r28, 0x00	; 0
     eaa:	09 f4       	brne	.+2      	; 0xeae <recv+0x5e>
     eac:	7a c0       	rjmp	.+244    	; 0xfa2 <recv+0x152>
   
   recvsize = getSn_RxMAX(sn);
     eae:	b8 01       	movw	r22, r16
     eb0:	72 5e       	subi	r23, 0xE2	; 226
     eb2:	07 2e       	mov	r0, r23
     eb4:	00 0c       	add	r0, r0
     eb6:	88 0b       	sbc	r24, r24
     eb8:	99 0b       	sbc	r25, r25
     eba:	95 d3       	rcall	.+1834   	; 0x15e6 <WIZCHIP_READ>
     ebc:	a8 2e       	mov	r10, r24
     ebe:	b1 2c       	mov	r11, r1
     ec0:	ba 2c       	mov	r11, r10
     ec2:	aa 24       	eor	r10, r10
     ec4:	bb 0c       	add	r11, r11
     ec6:	bb 0c       	add	r11, r11
   if(recvsize < len) len = recvsize;
     ec8:	ac 16       	cp	r10, r28
     eca:	bd 06       	cpc	r11, r29
     ecc:	08 f0       	brcs	.+2      	; 0xed0 <recv+0x80>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
     ece:	5e 01       	movw	r10, r28
     ed0:	87 2d       	mov	r24, r7
     ed2:	c3 d5       	rcall	.+2950   	; 0x1a5a <getSn_RX_RSR>
     ed4:	ec 01       	movw	r28, r24
         tmp = getSn_SR(sn);
     ed6:	b8 01       	movw	r22, r16
     ed8:	7d 5f       	subi	r23, 0xFD	; 253
     eda:	07 2e       	mov	r0, r23
     edc:	00 0c       	add	r0, r0
     ede:	88 0b       	sbc	r24, r24
     ee0:	99 0b       	sbc	r25, r25
     ee2:	81 d3       	rcall	.+1794   	; 0x15e6 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
     ee4:	87 31       	cpi	r24, 0x17	; 23
     ee6:	21 f1       	breq	.+72     	; 0xf30 <recv+0xe0>
         {
            if(tmp == SOCK_CLOSE_WAIT)
     ee8:	8c 31       	cpi	r24, 0x1C	; 28
            {
               if(recvsize != 0) break;
     eea:	d9 f4       	brne	.+54     	; 0xf22 <recv+0xd2>
     eec:	20 97       	sbiw	r28, 0x00	; 0
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
     eee:	a9 f5       	brne	.+106    	; 0xf5a <recv+0x10a>
     ef0:	87 2d       	mov	r24, r7
     ef2:	5b d5       	rcall	.+2742   	; 0x19aa <getSn_TX_FSR>
     ef4:	7c 01       	movw	r14, r24
     ef6:	b8 01       	movw	r22, r16
     ef8:	71 5e       	subi	r23, 0xE1	; 225
     efa:	07 2e       	mov	r0, r23
     efc:	00 0c       	add	r0, r0
     efe:	88 0b       	sbc	r24, r24
     f00:	99 0b       	sbc	r25, r25
     f02:	71 d3       	rcall	.+1762   	; 0x15e6 <WIZCHIP_READ>
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	98 2f       	mov	r25, r24
     f08:	88 27       	eor	r24, r24
     f0a:	99 0f       	add	r25, r25
     f0c:	99 0f       	add	r25, r25
     f0e:	e8 16       	cp	r14, r24
     f10:	f9 06       	cpc	r15, r25
               {
                  close(sn);
     f12:	71 f4       	brne	.+28     	; 0xf30 <recv+0xe0>
     f14:	87 2d       	mov	r24, r7
                  return SOCKERR_SOCKSTATUS;
     f16:	4e dc       	rcall	.-1892   	; 0x7b4 <close>
     f18:	69 ef       	ldi	r22, 0xF9	; 249
     f1a:	7f ef       	ldi	r23, 0xFF	; 255
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	9f ef       	ldi	r25, 0xFF	; 255
               }
            }
            else
            {
               close(sn);
     f20:	48 c0       	rjmp	.+144    	; 0xfb2 <recv+0x162>
     f22:	87 2d       	mov	r24, r7
     f24:	47 dc       	rcall	.-1906   	; 0x7b4 <close>
               return SOCKERR_SOCKSTATUS;
     f26:	69 ef       	ldi	r22, 0xF9	; 249
     f28:	7f ef       	ldi	r23, 0xFF	; 255
     f2a:	8f ef       	ldi	r24, 0xFF	; 255
     f2c:	9f ef       	ldi	r25, 0xFF	; 255
     f2e:	41 c0       	rjmp	.+130    	; 0xfb2 <recv+0x162>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0c 2c       	mov	r0, r12
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <recv+0xec>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <recv+0xe8>
     f40:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <sock_io_mode>
     f44:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <sock_io_mode+0x1>
     f48:	82 23       	and	r24, r18
     f4a:	93 23       	and	r25, r19
     f4c:	89 2b       	or	r24, r25
     f4e:	11 f0       	breq	.+4      	; 0xf54 <recv+0x104>
     f50:	20 97       	sbiw	r28, 0x00	; 0
     f52:	61 f1       	breq	.+88     	; 0xfac <recv+0x15c>
         if(recvsize != 0) break;
     f54:	20 97       	sbiw	r28, 0x00	; 0
     f56:	09 f4       	brne	.+2      	; 0xf5a <recv+0x10a>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
     f58:	bb cf       	rjmp	.-138    	; 0xed0 <recv+0x80>
     f5a:	ca 15       	cp	r28, r10
     f5c:	db 05       	cpc	r29, r11
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <recv+0x112>
   wiz_recv_data(sn, buf, len);
     f60:	e5 01       	movw	r28, r10
     f62:	ae 01       	movw	r20, r28
     f64:	b4 01       	movw	r22, r8
     f66:	87 2d       	mov	r24, r7
     f68:	57 d6       	rcall	.+3246   	; 0x1c18 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
     f6a:	68 01       	movw	r12, r16
     f6c:	d3 94       	inc	r13
     f6e:	0d 2c       	mov	r0, r13
     f70:	00 0c       	add	r0, r0
     f72:	ee 08       	sbc	r14, r14
     f74:	ff 08       	sbc	r15, r15
     f76:	40 e4       	ldi	r20, 0x40	; 64
     f78:	c7 01       	movw	r24, r14
     f7a:	b6 01       	movw	r22, r12
   while(getSn_CR(sn));
     f7c:	9b d3       	rcall	.+1846   	; 0x16b4 <WIZCHIP_WRITE>
     f7e:	c7 01       	movw	r24, r14
     f80:	b6 01       	movw	r22, r12
     f82:	31 d3       	rcall	.+1634   	; 0x15e6 <WIZCHIP_READ>
     f84:	81 11       	cpse	r24, r1
     f86:	fb cf       	rjmp	.-10     	; 0xf7e <recv+0x12e>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     f88:	be 01       	movw	r22, r28
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	11 c0       	rjmp	.+34     	; 0xfb2 <recv+0x162>
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
     f90:	6f ef       	ldi	r22, 0xFF	; 255
     f92:	7f ef       	ldi	r23, 0xFF	; 255
     f94:	cb 01       	movw	r24, r22
     f96:	0d c0       	rjmp	.+26     	; 0xfb2 <recv+0x162>
   CHECK_SOCKMODE(Sn_MR_TCP);
     f98:	6b ef       	ldi	r22, 0xFB	; 251
     f9a:	7f ef       	ldi	r23, 0xFF	; 255
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	9f ef       	ldi	r25, 0xFF	; 255
     fa0:	08 c0       	rjmp	.+16     	; 0xfb2 <recv+0x162>
   CHECK_SOCKDATA();
     fa2:	62 ef       	ldi	r22, 0xF2	; 242
     fa4:	7f ef       	ldi	r23, 0xFF	; 255
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	9f ef       	ldi	r25, 0xFF	; 255
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <recv+0x162>
            {
               close(sn);
               return SOCKERR_SOCKSTATUS;
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	cb 01       	movw	r24, r22
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	df 90       	pop	r13
     fc0:	cf 90       	pop	r12
     fc2:	bf 90       	pop	r11
     fc4:	af 90       	pop	r10
     fc6:	9f 90       	pop	r9
     fc8:	8f 90       	pop	r8
     fca:	7f 90       	pop	r7
     fcc:	08 95       	ret

00000fce <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
     fce:	2f 92       	push	r2
     fd0:	3f 92       	push	r3
     fd2:	5f 92       	push	r5
     fd4:	6f 92       	push	r6
     fd6:	7f 92       	push	r7
     fd8:	8f 92       	push	r8
     fda:	9f 92       	push	r9
     fdc:	af 92       	push	r10
     fde:	bf 92       	push	r11
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
     ff0:	89 30       	cpi	r24, 0x09	; 9
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <sendto+0x28>
     ff4:	e3 c0       	rjmp	.+454    	; 0x11bc <sendto+0x1ee>
     ff6:	e9 01       	movw	r28, r18
     ff8:	3a 01       	movw	r6, r20
     ffa:	1b 01       	movw	r2, r22
     ffc:	58 2e       	mov	r5, r24
   switch(getSn_MR(sn) & 0x0F)
     ffe:	c8 2e       	mov	r12, r24
    1000:	d1 2c       	mov	r13, r1
    1002:	76 01       	movw	r14, r12
    1004:	ee 0c       	add	r14, r14
    1006:	ff 1c       	adc	r15, r15
    1008:	ee 0c       	add	r14, r14
    100a:	ff 1c       	adc	r15, r15
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	e8 1a       	sub	r14, r24
    1010:	f8 0a       	sbc	r15, r24
    1012:	ee 0c       	add	r14, r14
    1014:	ff 1c       	adc	r15, r15
    1016:	ee 0c       	add	r14, r14
    1018:	ff 1c       	adc	r15, r15
    101a:	ee 0c       	add	r14, r14
    101c:	ff 1c       	adc	r15, r15
    101e:	47 01       	movw	r8, r14
    1020:	0f 2c       	mov	r0, r15
    1022:	00 0c       	add	r0, r0
    1024:	aa 08       	sbc	r10, r10
    1026:	bb 08       	sbc	r11, r11
    1028:	c5 01       	movw	r24, r10
    102a:	b4 01       	movw	r22, r8
    102c:	dc d2       	rcall	.+1464   	; 0x15e6 <WIZCHIP_READ>
    102e:	8f 70       	andi	r24, 0x0F	; 15
    1030:	82 50       	subi	r24, 0x02	; 2
    1032:	83 30       	cpi	r24, 0x03	; 3
    1034:	08 f0       	brcs	.+2      	; 0x1038 <sendto+0x6a>
    1036:	c6 c0       	rjmp	.+396    	; 0x11c4 <sendto+0x1f6>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    1038:	61 14       	cp	r6, r1
    103a:	71 04       	cpc	r7, r1
    103c:	09 f4       	brne	.+2      	; 0x1040 <sendto+0x72>
    103e:	c7 c0       	rjmp	.+398    	; 0x11ce <sendto+0x200>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
    1040:	88 81       	ld	r24, Y
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a0 e0       	ldi	r26, 0x00	; 0
    1046:	b0 e0       	ldi	r27, 0x00	; 0
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
    1048:	ba 2f       	mov	r27, r26
    104a:	a9 2f       	mov	r26, r25
    104c:	98 2f       	mov	r25, r24
    104e:	88 27       	eor	r24, r24
    1050:	29 81       	ldd	r18, Y+1	; 0x01
    1052:	82 0f       	add	r24, r18
    1054:	91 1d       	adc	r25, r1
    1056:	a1 1d       	adc	r26, r1
    1058:	b1 1d       	adc	r27, r1
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
    105a:	ba 2f       	mov	r27, r26
    105c:	a9 2f       	mov	r26, r25
    105e:	98 2f       	mov	r25, r24
    1060:	88 27       	eor	r24, r24
    1062:	2a 81       	ldd	r18, Y+2	; 0x02
    1064:	82 0f       	add	r24, r18
    1066:	91 1d       	adc	r25, r1
    1068:	a1 1d       	adc	r26, r1
    106a:	b1 1d       	adc	r27, r1
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
    106c:	ba 2f       	mov	r27, r26
    106e:	a9 2f       	mov	r26, r25
    1070:	98 2f       	mov	r25, r24
    1072:	88 27       	eor	r24, r24
    1074:	2b 81       	ldd	r18, Y+3	; 0x03
    1076:	82 0f       	add	r24, r18
    1078:	91 1d       	adc	r25, r1
    107a:	a1 1d       	adc	r26, r1
    107c:	b1 1d       	adc	r27, r1
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    107e:	89 2b       	or	r24, r25
    1080:	8a 2b       	or	r24, r26
    1082:	8b 2b       	or	r24, r27
    1084:	29 f4       	brne	.+10     	; 0x1090 <sendto+0xc2>
    1086:	c5 01       	movw	r24, r10
    1088:	b4 01       	movw	r22, r8
    108a:	ad d2       	rcall	.+1370   	; 0x15e6 <WIZCHIP_READ>
    108c:	82 ff       	sbrs	r24, 2
    108e:	a4 c0       	rjmp	.+328    	; 0x11d8 <sendto+0x20a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    1090:	01 15       	cp	r16, r1
    1092:	11 05       	cpc	r17, r1
    1094:	29 f4       	brne	.+10     	; 0x10a0 <sendto+0xd2>
    1096:	c5 01       	movw	r24, r10
    1098:	b4 01       	movw	r22, r8
    109a:	a5 d2       	rcall	.+1354   	; 0x15e6 <WIZCHIP_READ>
    109c:	82 ff       	sbrs	r24, 2
    109e:	a1 c0       	rjmp	.+322    	; 0x11e2 <sendto+0x214>
   tmp = getSn_SR(sn);
    10a0:	47 01       	movw	r8, r14
    10a2:	8d ef       	ldi	r24, 0xFD	; 253
    10a4:	98 1a       	sub	r9, r24
    10a6:	09 2c       	mov	r0, r9
    10a8:	00 0c       	add	r0, r0
    10aa:	aa 08       	sbc	r10, r10
    10ac:	bb 08       	sbc	r11, r11
    10ae:	c5 01       	movw	r24, r10
    10b0:	b4 01       	movw	r22, r8
    10b2:	99 d2       	rcall	.+1330   	; 0x15e6 <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    10b4:	82 34       	cpi	r24, 0x42	; 66
    10b6:	29 f0       	breq	.+10     	; 0x10c2 <sendto+0xf4>
    10b8:	82 32       	cpi	r24, 0x22	; 34
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <sendto+0xf4>
    10bc:	82 33       	cpi	r24, 0x32	; 50
    10be:	09 f0       	breq	.+2      	; 0x10c2 <sendto+0xf4>
    10c0:	95 c0       	rjmp	.+298    	; 0x11ec <sendto+0x21e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
    10c2:	b7 01       	movw	r22, r14
    10c4:	74 5f       	subi	r23, 0xF4	; 244
    10c6:	07 2e       	mov	r0, r23
    10c8:	00 0c       	add	r0, r0
    10ca:	88 0b       	sbc	r24, r24
    10cc:	99 0b       	sbc	r25, r25
    10ce:	24 e0       	ldi	r18, 0x04	; 4
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	ae 01       	movw	r20, r28
    10d4:	e3 d3       	rcall	.+1990   	; 0x189c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
    10d6:	b7 01       	movw	r22, r14
    10d8:	70 5f       	subi	r23, 0xF0	; 240
    10da:	07 2e       	mov	r0, r23
    10dc:	00 0c       	add	r0, r0
    10de:	88 0b       	sbc	r24, r24
    10e0:	99 0b       	sbc	r25, r25
    10e2:	41 2f       	mov	r20, r17
    10e4:	e7 d2       	rcall	.+1486   	; 0x16b4 <WIZCHIP_WRITE>
    10e6:	b7 01       	movw	r22, r14
    10e8:	7f 5e       	subi	r23, 0xEF	; 239
    10ea:	07 2e       	mov	r0, r23
    10ec:	00 0c       	add	r0, r0
    10ee:	88 0b       	sbc	r24, r24
    10f0:	99 0b       	sbc	r25, r25
    10f2:	40 2f       	mov	r20, r16
    10f4:	df d2       	rcall	.+1470   	; 0x16b4 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
    10f6:	b7 01       	movw	r22, r14
    10f8:	71 5e       	subi	r23, 0xE1	; 225
    10fa:	07 2e       	mov	r0, r23
    10fc:	00 0c       	add	r0, r0
    10fe:	88 0b       	sbc	r24, r24
    1100:	99 0b       	sbc	r25, r25
    1102:	71 d2       	rcall	.+1250   	; 0x15e6 <WIZCHIP_READ>
    1104:	08 2f       	mov	r16, r24
    1106:	10 e0       	ldi	r17, 0x00	; 0
    1108:	10 2f       	mov	r17, r16
    110a:	00 27       	eor	r16, r16
    110c:	11 0f       	add	r17, r17
    110e:	11 0f       	add	r17, r17
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
    1110:	06 15       	cp	r16, r6
    1112:	17 05       	cpc	r17, r7
    1114:	08 f0       	brcs	.+2      	; 0x1118 <sendto+0x14a>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
    1116:	83 01       	movw	r16, r6
    1118:	85 2d       	mov	r24, r5
    111a:	47 d4       	rcall	.+2190   	; 0x19aa <getSn_TX_FSR>
    111c:	ec 01       	movw	r28, r24
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    111e:	c5 01       	movw	r24, r10
    1120:	b4 01       	movw	r22, r8
    1122:	61 d2       	rcall	.+1218   	; 0x15e6 <WIZCHIP_READ>
    1124:	88 23       	and	r24, r24
    1126:	09 f4       	brne	.+2      	; 0x112a <sendto+0x15c>
    1128:	66 c0       	rjmp	.+204    	; 0x11f6 <sendto+0x228>
    112a:	81 e0       	ldi	r24, 0x01	; 1
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0c 2c       	mov	r0, r12
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <sendto+0x168>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <sendto+0x164>
    113a:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <sock_io_mode>
    113e:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <sock_io_mode+0x1>
    1142:	82 23       	and	r24, r18
    1144:	93 23       	and	r25, r19
    1146:	89 2b       	or	r24, r25
    1148:	21 f0       	breq	.+8      	; 0x1152 <sendto+0x184>
    114a:	c0 17       	cp	r28, r16
    114c:	d1 07       	cpc	r29, r17
    114e:	08 f4       	brcc	.+2      	; 0x1152 <sendto+0x184>
    1150:	57 c0       	rjmp	.+174    	; 0x1200 <sendto+0x232>
      if(len <= freesize) break;
    1152:	c0 17       	cp	r28, r16
    1154:	d1 07       	cpc	r29, r17
    1156:	00 f3       	brcs	.-64     	; 0x1118 <sendto+0x14a>
   };
	wiz_send_data(sn, buf, len);
    1158:	a8 01       	movw	r20, r16
    115a:	b1 01       	movw	r22, r2
    115c:	85 2d       	mov	r24, r5
    115e:	d5 d4       	rcall	.+2474   	; 0x1b0a <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
    1160:	47 01       	movw	r8, r14
    1162:	93 94       	inc	r9
    1164:	09 2c       	mov	r0, r9
    1166:	00 0c       	add	r0, r0
    1168:	aa 08       	sbc	r10, r10
    116a:	bb 08       	sbc	r11, r11
    116c:	40 e2       	ldi	r20, 0x20	; 32
    116e:	c5 01       	movw	r24, r10
    1170:	b4 01       	movw	r22, r8
    1172:	a0 d2       	rcall	.+1344   	; 0x16b4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
    1174:	c5 01       	movw	r24, r10
    1176:	b4 01       	movw	r22, r8
    1178:	36 d2       	rcall	.+1132   	; 0x15e6 <WIZCHIP_READ>
    117a:	81 11       	cpse	r24, r1
    117c:	fb cf       	rjmp	.-10     	; 0x1174 <sendto+0x1a6>
   while(1)
   {
      tmp = getSn_IR(sn);
    117e:	47 01       	movw	r8, r14
    1180:	8e ef       	ldi	r24, 0xFE	; 254
    1182:	98 1a       	sub	r9, r24
    1184:	09 2c       	mov	r0, r9
    1186:	00 0c       	add	r0, r0
    1188:	aa 08       	sbc	r10, r10
    118a:	bb 08       	sbc	r11, r11
    118c:	c5 01       	movw	r24, r10
    118e:	b4 01       	movw	r22, r8
    1190:	2a d2       	rcall	.+1108   	; 0x15e6 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
    1192:	84 ff       	sbrs	r24, 4
      {
         setSn_IR(sn, Sn_IR_SENDOK);
    1194:	08 c0       	rjmp	.+16     	; 0x11a6 <sendto+0x1d8>
    1196:	40 e1       	ldi	r20, 0x10	; 16
    1198:	c5 01       	movw	r24, r10
    119a:	b4 01       	movw	r22, r8
    119c:	8b d2       	rcall	.+1302   	; 0x16b4 <WIZCHIP_WRITE>
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    119e:	b8 01       	movw	r22, r16
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	30 c0       	rjmp	.+96     	; 0x1206 <sendto+0x238>
         setSn_IR(sn, Sn_IR_SENDOK);
         break;
      }
      //M:20131104
      //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
      else if(tmp & Sn_IR_TIMEOUT)
    11a6:	83 ff       	sbrs	r24, 3
    11a8:	ea cf       	rjmp	.-44     	; 0x117e <sendto+0x1b0>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
    11aa:	48 e0       	ldi	r20, 0x08	; 8
    11ac:	c5 01       	movw	r24, r10
    11ae:	b4 01       	movw	r22, r8
    11b0:	81 d2       	rcall	.+1282   	; 0x16b4 <WIZCHIP_WRITE>
    11b2:	63 ef       	ldi	r22, 0xF3	; 243
         //len = (uint16_t)SOCKERR_TIMEOUT;
         //break;
         #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
            if(taddr) setSUBR((uint8_t*)&taddr);
         #endif
         return SOCKERR_TIMEOUT;
    11b4:	7f ef       	ldi	r23, 0xFF	; 255
    11b6:	8f ef       	ldi	r24, 0xFF	; 255
    11b8:	9f ef       	ldi	r25, 0xFF	; 255
    11ba:	25 c0       	rjmp	.+74     	; 0x1206 <sendto+0x238>
    11bc:	6f ef       	ldi	r22, 0xFF	; 255
{
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
    11be:	7f ef       	ldi	r23, 0xFF	; 255
    11c0:	cb 01       	movw	r24, r22
    11c2:	21 c0       	rjmp	.+66     	; 0x1206 <sendto+0x238>
    11c4:	6b ef       	ldi	r22, 0xFB	; 251
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
    11c6:	7f ef       	ldi	r23, 0xFF	; 255
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	9f ef       	ldi	r25, 0xFF	; 255
    11cc:	1c c0       	rjmp	.+56     	; 0x1206 <sendto+0x238>
    11ce:	62 ef       	ldi	r22, 0xF2	; 242
   }
   CHECK_SOCKDATA();
    11d0:	7f ef       	ldi	r23, 0xFF	; 255
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	9f ef       	ldi	r25, 0xFF	; 255
    11d6:	17 c0       	rjmp	.+46     	; 0x1206 <sendto+0x238>
    11d8:	64 ef       	ldi	r22, 0xF4	; 244
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    11da:	7f ef       	ldi	r23, 0xFF	; 255
    11dc:	8f ef       	ldi	r24, 0xFF	; 255
    11de:	9f ef       	ldi	r25, 0xFF	; 255
    11e0:	12 c0       	rjmp	.+36     	; 0x1206 <sendto+0x238>
    11e2:	65 ef       	ldi	r22, 0xF5	; 245
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    11e4:	7f ef       	ldi	r23, 0xFF	; 255
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	9f ef       	ldi	r25, 0xFF	; 255
    11ea:	0d c0       	rjmp	.+26     	; 0x1206 <sendto+0x238>
    11ec:	69 ef       	ldi	r22, 0xF9	; 249
   tmp = getSn_SR(sn);
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    11ee:	7f ef       	ldi	r23, 0xFF	; 255
    11f0:	8f ef       	ldi	r24, 0xFF	; 255
    11f2:	9f ef       	ldi	r25, 0xFF	; 255
    11f4:	08 c0       	rjmp	.+16     	; 0x1206 <sendto+0x238>
    11f6:	6c ef       	ldi	r22, 0xFC	; 252
   freesize = getSn_TxMAX(sn);
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    11f8:	7f ef       	ldi	r23, 0xFF	; 255
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	9f ef       	ldi	r25, 0xFF	; 255
    11fe:	03 c0       	rjmp	.+6      	; 0x1206 <sendto+0x238>
    1200:	60 e0       	ldi	r22, 0x00	; 0
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	cb 01       	movw	r24, r22
    1206:	df 91       	pop	r29
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
    1212:	df 90       	pop	r13
    1214:	cf 90       	pop	r12
    1216:	bf 90       	pop	r11
    1218:	af 90       	pop	r10
    121a:	9f 90       	pop	r9
    121c:	8f 90       	pop	r8
    121e:	7f 90       	pop	r7
    1220:	6f 90       	pop	r6
    1222:	5f 90       	pop	r5
    1224:	3f 90       	pop	r3
    1226:	2f 90       	pop	r2
    1228:	08 95       	ret

0000122a <recvfrom>:
    122a:	2f 92       	push	r2



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
    122c:	3f 92       	push	r3
    122e:	4f 92       	push	r4
    1230:	5f 92       	push	r5
    1232:	6f 92       	push	r6
    1234:	7f 92       	push	r7
    1236:	8f 92       	push	r8
    1238:	9f 92       	push	r9
    123a:	af 92       	push	r10
    123c:	bf 92       	push	r11
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	2c 97       	sbiw	r28, 0x0c	; 12
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
    125e:	89 30       	cpi	r24, 0x09	; 9
    1260:	08 f0       	brcs	.+2      	; 0x1264 <recvfrom+0x3a>
    1262:	92 c1       	rjmp	.+804    	; 0x1588 <recvfrom+0x35e>
    1264:	28 01       	movw	r4, r16
    1266:	39 01       	movw	r6, r18
    1268:	5a 01       	movw	r10, r20
    126a:	4b 01       	movw	r8, r22
    126c:	38 2e       	mov	r3, r24
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
    126e:	c8 2e       	mov	r12, r24
    1270:	d1 2c       	mov	r13, r1
    1272:	86 01       	movw	r16, r12
    1274:	00 0f       	add	r16, r16
    1276:	11 1f       	adc	r17, r17
    1278:	00 0f       	add	r16, r16
    127a:	11 1f       	adc	r17, r17
    127c:	0f 5f       	subi	r16, 0xFF	; 255
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	00 0f       	add	r16, r16
    1282:	11 1f       	adc	r17, r17
    1284:	00 0f       	add	r16, r16
    1286:	11 1f       	adc	r17, r17
    1288:	00 0f       	add	r16, r16
    128a:	11 1f       	adc	r17, r17
    128c:	b8 01       	movw	r22, r16
    128e:	01 2e       	mov	r0, r17
    1290:	00 0c       	add	r0, r0
    1292:	88 0b       	sbc	r24, r24
    1294:	99 0b       	sbc	r25, r25
    1296:	a7 d1       	rcall	.+846    	; 0x15e6 <WIZCHIP_READ>
    1298:	28 2e       	mov	r2, r24
    129a:	8f 70       	andi	r24, 0x0F	; 15
    129c:	82 50       	subi	r24, 0x02	; 2
    129e:	83 30       	cpi	r24, 0x03	; 3
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <recvfrom+0x7a>
    12a2:	76 c1       	rjmp	.+748    	; 0x1590 <recvfrom+0x366>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    12a4:	a1 14       	cp	r10, r1
    12a6:	b1 04       	cpc	r11, r1
    12a8:	09 f4       	brne	.+2      	; 0x12ac <recvfrom+0x82>
    12aa:	77 c1       	rjmp	.+750    	; 0x159a <recvfrom+0x370>
   if(sock_remained_size[sn] == 0)
    12ac:	f6 01       	movw	r30, r12
    12ae:	ee 0f       	add	r30, r30
    12b0:	ff 1f       	adc	r31, r31
    12b2:	e8 5f       	subi	r30, 0xF8	; 248
    12b4:	fb 4f       	sbci	r31, 0xFB	; 251
    12b6:	80 81       	ld	r24, Z
    12b8:	91 81       	ldd	r25, Z+1	; 0x01
    12ba:	89 2b       	or	r24, r25
    12bc:	29 f5       	brne	.+74     	; 0x1308 <recvfrom+0xde>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
    12be:	83 2d       	mov	r24, r3
    12c0:	cc d3       	rcall	.+1944   	; 0x1a5a <getSn_RX_RSR>
    12c2:	7c 01       	movw	r14, r24
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    12c4:	b8 01       	movw	r22, r16
    12c6:	7d 5f       	subi	r23, 0xFD	; 253
    12c8:	07 2e       	mov	r0, r23
    12ca:	00 0c       	add	r0, r0
    12cc:	88 0b       	sbc	r24, r24
    12ce:	99 0b       	sbc	r25, r25
    12d0:	8a d1       	rcall	.+788    	; 0x15e6 <WIZCHIP_READ>
    12d2:	88 23       	and	r24, r24
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <recvfrom+0xae>
    12d6:	66 c1       	rjmp	.+716    	; 0x15a4 <recvfrom+0x37a>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0c 2c       	mov	r0, r12
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <recvfrom+0xba>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <recvfrom+0xb6>
    12e8:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <sock_io_mode>
    12ec:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <sock_io_mode+0x1>
    12f0:	82 23       	and	r24, r18
    12f2:	93 23       	and	r25, r19
    12f4:	89 2b       	or	r24, r25
    12f6:	21 f0       	breq	.+8      	; 0x1300 <recvfrom+0xd6>
    12f8:	e1 14       	cp	r14, r1
    12fa:	f1 04       	cpc	r15, r1
    12fc:	09 f4       	brne	.+2      	; 0x1300 <recvfrom+0xd6>
    12fe:	57 c1       	rjmp	.+686    	; 0x15ae <recvfrom+0x384>
         if(pack_len != 0) break;
    1300:	e1 14       	cp	r14, r1
    1302:	f1 04       	cpc	r15, r1
    1304:	e1 f2       	breq	.-72     	; 0x12be <recvfrom+0x94>
    1306:	02 c0       	rjmp	.+4      	; 0x130c <recvfrom+0xe2>
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
    1308:	e1 2c       	mov	r14, r1
    130a:	f1 2c       	mov	r15, r1
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
    130c:	82 2d       	mov	r24, r2
    130e:	87 70       	andi	r24, 0x07	; 7
    1310:	83 30       	cpi	r24, 0x03	; 3
    1312:	09 f4       	brne	.+2      	; 0x1316 <recvfrom+0xec>
    1314:	b1 c0       	rjmp	.+354    	; 0x1478 <recvfrom+0x24e>
    1316:	84 30       	cpi	r24, 0x04	; 4
    1318:	09 f4       	brne	.+2      	; 0x131c <recvfrom+0xf2>
    131a:	61 c0       	rjmp	.+194    	; 0x13de <recvfrom+0x1b4>
    131c:	82 30       	cpi	r24, 0x02	; 2
    131e:	09 f0       	breq	.+2      	; 0x1322 <recvfrom+0xf8>
    1320:	fe c0       	rjmp	.+508    	; 0x151e <recvfrom+0x2f4>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
    1322:	f6 01       	movw	r30, r12
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	e8 5f       	subi	r30, 0xF8	; 248
    132a:	fb 4f       	sbci	r31, 0xFB	; 251
    132c:	80 81       	ld	r24, Z
    132e:	91 81       	ldd	r25, Z+1	; 0x01
    1330:	89 2b       	or	r24, r25
    1332:	09 f0       	breq	.+2      	; 0x1336 <recvfrom+0x10c>
    1334:	44 c0       	rjmp	.+136    	; 0x13be <recvfrom+0x194>
	      {
   			wiz_recv_data(sn, head, 8);
    1336:	48 e0       	ldi	r20, 0x08	; 8
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	be 01       	movw	r22, r28
    133c:	6f 5f       	subi	r22, 0xFF	; 255
    133e:	7f 4f       	sbci	r23, 0xFF	; 255
    1340:	83 2d       	mov	r24, r3
    1342:	6a d4       	rcall	.+2260   	; 0x1c18 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
    1344:	c8 01       	movw	r24, r16
    1346:	93 95       	inc	r25
    1348:	9c 01       	movw	r18, r24
    134a:	99 0f       	add	r25, r25
    134c:	44 0b       	sbc	r20, r20
    134e:	55 0b       	sbc	r21, r21
    1350:	29 87       	std	Y+9, r18	; 0x09
    1352:	3a 87       	std	Y+10, r19	; 0x0a
    1354:	4b 87       	std	Y+11, r20	; 0x0b
    1356:	5c 87       	std	Y+12, r21	; 0x0c
    1358:	40 e4       	ldi	r20, 0x40	; 64
    135a:	69 85       	ldd	r22, Y+9	; 0x09
    135c:	7a 85       	ldd	r23, Y+10	; 0x0a
    135e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1360:	9c 85       	ldd	r25, Y+12	; 0x0c
    1362:	a8 d1       	rcall	.+848    	; 0x16b4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    1364:	69 85       	ldd	r22, Y+9	; 0x09
    1366:	7a 85       	ldd	r23, Y+10	; 0x0a
    1368:	8b 85       	ldd	r24, Y+11	; 0x0b
    136a:	9c 85       	ldd	r25, Y+12	; 0x0c
    136c:	3c d1       	rcall	.+632    	; 0x15e6 <WIZCHIP_READ>
    136e:	81 11       	cpse	r24, r1
    1370:	f9 cf       	rjmp	.-14     	; 0x1364 <recvfrom+0x13a>
    1372:	89 81       	ldd	r24, Y+1	; 0x01
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
    1374:	f3 01       	movw	r30, r6
    1376:	80 83       	st	Z, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
      			addr[1] = head[1];
    137a:	81 83       	std	Z+1, r24	; 0x01
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
      			addr[2] = head[2];
    137e:	82 83       	std	Z+2, r24	; 0x02
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
      			addr[3] = head[3];
    1382:	83 83       	std	Z+3, r24	; 0x03
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
      			*port = head[4];
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	98 2f       	mov	r25, r24
      			*port = (*port << 8) + head[5];
    138a:	88 27       	eor	r24, r24
    138c:	2e 81       	ldd	r18, Y+6	; 0x06
    138e:	82 0f       	add	r24, r18
    1390:	91 1d       	adc	r25, r1
    1392:	f2 01       	movw	r30, r4
    1394:	91 83       	std	Z+1, r25	; 0x01
    1396:	80 83       	st	Z, r24
    1398:	8f 81       	ldd	r24, Y+7	; 0x07
      			sock_remained_size[sn] = head[6];
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	f6 01       	movw	r30, r12
    139e:	ee 0f       	add	r30, r30
    13a0:	ff 1f       	adc	r31, r31
    13a2:	e8 5f       	subi	r30, 0xF8	; 248
    13a4:	fb 4f       	sbci	r31, 0xFB	; 251
    13a6:	98 2f       	mov	r25, r24
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
    13a8:	88 27       	eor	r24, r24
    13aa:	28 85       	ldd	r18, Y+8	; 0x08
    13ac:	82 0f       	add	r24, r18
    13ae:	91 1d       	adc	r25, r1
    13b0:	91 83       	std	Z+1, r25	; 0x01
    13b2:	80 83       	st	Z, r24
    13b4:	80 e8       	ldi	r24, 0x80	; 128
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
    13b6:	f6 01       	movw	r30, r12
    13b8:	e0 50       	subi	r30, 0x00	; 0
    13ba:	fc 4f       	sbci	r31, 0xFC	; 252
    13bc:	80 83       	st	Z, r24
    13be:	f6 01       	movw	r30, r12
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
    13c0:	ee 0f       	add	r30, r30
    13c2:	ff 1f       	adc	r31, r31
    13c4:	e8 5f       	subi	r30, 0xF8	; 248
    13c6:	fb 4f       	sbci	r31, 0xFB	; 251
    13c8:	e0 80       	ld	r14, Z
    13ca:	f1 80       	ldd	r15, Z+1	; 0x01
    13cc:	ae 14       	cp	r10, r14
    13ce:	bf 04       	cpc	r11, r15
    13d0:	08 f4       	brcc	.+2      	; 0x13d4 <recvfrom+0x1aa>
    13d2:	75 01       	movw	r14, r10
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    13d4:	a7 01       	movw	r20, r14
    13d6:	b4 01       	movw	r22, r8
    13d8:	83 2d       	mov	r24, r3
    13da:	1e d4       	rcall	.+2108   	; 0x1c18 <wiz_recv_data>
    13dc:	aa c0       	rjmp	.+340    	; 0x1532 <recvfrom+0x308>
			break;
    13de:	f6 01       	movw	r30, r12
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	e8 5f       	subi	r30, 0xF8	; 248
    13e6:	fb 4f       	sbci	r31, 0xFB	; 251
    13e8:	80 81       	ld	r24, Z
    13ea:	91 81       	ldd	r25, Z+1	; 0x01
    13ec:	89 2b       	or	r24, r25
    13ee:	a1 f5       	brne	.+104    	; 0x1458 <recvfrom+0x22e>
	      {
   			wiz_recv_data(sn, head, 2);
    13f0:	42 e0       	ldi	r20, 0x02	; 2
    13f2:	50 e0       	ldi	r21, 0x00	; 0
    13f4:	be 01       	movw	r22, r28
    13f6:	6f 5f       	subi	r22, 0xFF	; 255
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	83 2d       	mov	r24, r3
    13fc:	0d d4       	rcall	.+2074   	; 0x1c18 <wiz_recv_data>
    13fe:	28 01       	movw	r4, r16
   			setSn_CR(sn,Sn_CR_RECV);
    1400:	53 94       	inc	r5
    1402:	05 2c       	mov	r0, r5
    1404:	00 0c       	add	r0, r0
    1406:	66 08       	sbc	r6, r6
    1408:	77 08       	sbc	r7, r7
    140a:	40 e4       	ldi	r20, 0x40	; 64
    140c:	c3 01       	movw	r24, r6
    140e:	b2 01       	movw	r22, r4
    1410:	51 d1       	rcall	.+674    	; 0x16b4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    1412:	c3 01       	movw	r24, r6
    1414:	b2 01       	movw	r22, r4
    1416:	e7 d0       	rcall	.+462    	; 0x15e6 <WIZCHIP_READ>
    1418:	81 11       	cpse	r24, r1
    141a:	fb cf       	rjmp	.-10     	; 0x1412 <recvfrom+0x1e8>
    141c:	89 81       	ldd	r24, Y+1	; 0x01
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	f6 01       	movw	r30, r12
    1422:	ee 0f       	add	r30, r30
    1424:	ff 1f       	adc	r31, r31
    1426:	e8 5f       	subi	r30, 0xF8	; 248
    1428:	fb 4f       	sbci	r31, 0xFB	; 251
    142a:	98 2f       	mov	r25, r24
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
    142c:	88 27       	eor	r24, r24
    142e:	2a 81       	ldd	r18, Y+2	; 0x02
    1430:	82 0f       	add	r24, r18
    1432:	91 1d       	adc	r25, r1
    1434:	02 97       	sbiw	r24, 0x02	; 2
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	80 83       	st	Z, r24
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
    143a:	8b 3e       	cpi	r24, 0xEB	; 235
    143c:	95 40       	sbci	r25, 0x05	; 5
    143e:	38 f0       	brcs	.+14     	; 0x144e <recvfrom+0x224>
   			{
   			   close(sn);
    1440:	83 2d       	mov	r24, r3
    1442:	b8 d9       	rcall	.-3216   	; 0x7b4 <close>
    1444:	67 e1       	ldi	r22, 0x17	; 23
   			   return SOCKFATAL_PACKLEN;
    1446:	7c ef       	ldi	r23, 0xFC	; 252
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	9f ef       	ldi	r25, 0xFF	; 255
    144c:	b3 c0       	rjmp	.+358    	; 0x15b4 <recvfrom+0x38a>
    144e:	80 e8       	ldi	r24, 0x80	; 128
   			}
   			sock_pack_info[sn] = PACK_FIRST;
    1450:	f6 01       	movw	r30, r12
    1452:	e0 50       	subi	r30, 0x00	; 0
    1454:	fc 4f       	sbci	r31, 0xFC	; 252
    1456:	80 83       	st	Z, r24
    1458:	f6 01       	movw	r30, r12
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
    145a:	ee 0f       	add	r30, r30
    145c:	ff 1f       	adc	r31, r31
    145e:	e8 5f       	subi	r30, 0xF8	; 248
    1460:	fb 4f       	sbci	r31, 0xFB	; 251
    1462:	e0 80       	ld	r14, Z
    1464:	f1 80       	ldd	r15, Z+1	; 0x01
    1466:	ae 14       	cp	r10, r14
    1468:	bf 04       	cpc	r11, r15
    146a:	08 f4       	brcc	.+2      	; 0x146e <recvfrom+0x244>
    146c:	75 01       	movw	r14, r10
			else pack_len = sock_remained_size[sn];
			wiz_recv_data(sn,buf,pack_len);
    146e:	a7 01       	movw	r20, r14
    1470:	b4 01       	movw	r22, r8
    1472:	83 2d       	mov	r24, r3
    1474:	d1 d3       	rcall	.+1954   	; 0x1c18 <wiz_recv_data>
    1476:	5d c0       	rjmp	.+186    	; 0x1532 <recvfrom+0x308>
		   break;
    1478:	f6 01       	movw	r30, r12
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	e8 5f       	subi	r30, 0xF8	; 248
    1480:	fb 4f       	sbci	r31, 0xFB	; 251
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	89 2b       	or	r24, r25
    1488:	d1 f5       	brne	.+116    	; 0x14fe <recvfrom+0x2d4>
		   {
   			wiz_recv_data(sn, head, 6);
    148a:	46 e0       	ldi	r20, 0x06	; 6
    148c:	50 e0       	ldi	r21, 0x00	; 0
    148e:	be 01       	movw	r22, r28
    1490:	6f 5f       	subi	r22, 0xFF	; 255
    1492:	7f 4f       	sbci	r23, 0xFF	; 255
    1494:	83 2d       	mov	r24, r3
    1496:	c0 d3       	rcall	.+1920   	; 0x1c18 <wiz_recv_data>
    1498:	c8 01       	movw	r24, r16
   			setSn_CR(sn,Sn_CR_RECV);
    149a:	93 95       	inc	r25
    149c:	9c 01       	movw	r18, r24
    149e:	99 0f       	add	r25, r25
    14a0:	44 0b       	sbc	r20, r20
    14a2:	55 0b       	sbc	r21, r21
    14a4:	29 87       	std	Y+9, r18	; 0x09
    14a6:	3a 87       	std	Y+10, r19	; 0x0a
    14a8:	4b 87       	std	Y+11, r20	; 0x0b
    14aa:	5c 87       	std	Y+12, r21	; 0x0c
    14ac:	40 e4       	ldi	r20, 0x40	; 64
    14ae:	69 85       	ldd	r22, Y+9	; 0x09
    14b0:	7a 85       	ldd	r23, Y+10	; 0x0a
    14b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    14b6:	fe d0       	rcall	.+508    	; 0x16b4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    14b8:	69 85       	ldd	r22, Y+9	; 0x09
    14ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    14bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    14be:	9c 85       	ldd	r25, Y+12	; 0x0c
    14c0:	92 d0       	rcall	.+292    	; 0x15e6 <WIZCHIP_READ>
    14c2:	81 11       	cpse	r24, r1
    14c4:	f9 cf       	rjmp	.-14     	; 0x14b8 <recvfrom+0x28e>
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
   			addr[0] = head[0];
    14c8:	f3 01       	movw	r30, r6
    14ca:	80 83       	st	Z, r24
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
   			addr[1] = head[1];
    14ce:	81 83       	std	Z+1, r24	; 0x01
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
   			addr[2] = head[2];
    14d2:	82 83       	std	Z+2, r24	; 0x02
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
   			addr[3] = head[3];
    14d6:	83 83       	std	Z+3, r24	; 0x03
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
   			sock_remained_size[sn] = head[4];
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	f6 01       	movw	r30, r12
    14de:	ee 0f       	add	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	e8 5f       	subi	r30, 0xF8	; 248
    14e4:	fb 4f       	sbci	r31, 0xFB	; 251
    14e6:	98 2f       	mov	r25, r24
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
    14e8:	88 27       	eor	r24, r24
    14ea:	2e 81       	ldd	r18, Y+6	; 0x06
    14ec:	82 0f       	add	r24, r18
    14ee:	91 1d       	adc	r25, r1
    14f0:	91 83       	std	Z+1, r25	; 0x01
    14f2:	80 83       	st	Z, r24
    14f4:	80 e8       	ldi	r24, 0x80	; 128
   			sock_pack_info[sn] = PACK_FIRST;
    14f6:	f6 01       	movw	r30, r12
    14f8:	e0 50       	subi	r30, 0x00	; 0
    14fa:	fc 4f       	sbci	r31, 0xFC	; 252
    14fc:	80 83       	st	Z, r24
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
    14fe:	f6 01       	movw	r30, r12
    1500:	ee 0f       	add	r30, r30
    1502:	ff 1f       	adc	r31, r31
    1504:	e8 5f       	subi	r30, 0xF8	; 248
    1506:	fb 4f       	sbci	r31, 0xFB	; 251
    1508:	e0 80       	ld	r14, Z
    150a:	f1 80       	ldd	r15, Z+1	; 0x01
    150c:	ae 14       	cp	r10, r14
    150e:	bf 04       	cpc	r11, r15
    1510:	08 f4       	brcc	.+2      	; 0x1514 <recvfrom+0x2ea>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    1512:	75 01       	movw	r14, r10
    1514:	a7 01       	movw	r20, r14
    1516:	b4 01       	movw	r22, r8
    1518:	83 2d       	mov	r24, r3
    151a:	7e d3       	rcall	.+1788   	; 0x1c18 <wiz_recv_data>
			break;
    151c:	0a c0       	rjmp	.+20     	; 0x1532 <recvfrom+0x308>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
    151e:	b7 01       	movw	r22, r14
    1520:	83 2d       	mov	r24, r3
    1522:	01 d4       	rcall	.+2050   	; 0x1d26 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
    1524:	f6 01       	movw	r30, r12
    1526:	ee 0f       	add	r30, r30
    1528:	ff 1f       	adc	r31, r31
    152a:	e8 5f       	subi	r30, 0xF8	; 248
    152c:	fb 4f       	sbci	r31, 0xFB	; 251
    152e:	f1 82       	std	Z+1, r15	; 0x01
         break;
   }
	setSn_CR(sn,Sn_CR_RECV);
    1530:	e0 82       	st	Z, r14
    1532:	48 01       	movw	r8, r16
    1534:	93 94       	inc	r9
    1536:	09 2c       	mov	r0, r9
    1538:	00 0c       	add	r0, r0
    153a:	aa 08       	sbc	r10, r10
    153c:	bb 08       	sbc	r11, r11
    153e:	40 e4       	ldi	r20, 0x40	; 64
    1540:	c5 01       	movw	r24, r10
    1542:	b4 01       	movw	r22, r8
    1544:	b7 d0       	rcall	.+366    	; 0x16b4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
    1546:	c5 01       	movw	r24, r10
    1548:	b4 01       	movw	r22, r8
    154a:	4d d0       	rcall	.+154    	; 0x15e6 <WIZCHIP_READ>
    154c:	81 11       	cpse	r24, r1
    154e:	fb cf       	rjmp	.-10     	; 0x1546 <recvfrom+0x31c>
    1550:	f6 01       	movw	r30, r12
	sock_remained_size[sn] -= pack_len;
    1552:	ee 0f       	add	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	e8 5f       	subi	r30, 0xF8	; 248
    1558:	fb 4f       	sbci	r31, 0xFB	; 251
    155a:	80 81       	ld	r24, Z
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	8e 19       	sub	r24, r14
    1560:	9f 09       	sbc	r25, r15
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
    1566:	89 2b       	or	r24, r25
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
    1568:	39 f0       	breq	.+14     	; 0x1578 <recvfrom+0x34e>
    156a:	f6 01       	movw	r30, r12
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
    156c:	e0 50       	subi	r30, 0x00	; 0
    156e:	fc 4f       	sbci	r31, 0xFC	; 252
    1570:	80 81       	ld	r24, Z
    1572:	81 60       	ori	r24, 0x01	; 1
    1574:	80 83       	st	Z, r24
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <recvfrom+0x356>
    1578:	f6 01       	movw	r30, r12
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
    157a:	e0 50       	subi	r30, 0x00	; 0
    157c:	fc 4f       	sbci	r31, 0xFC	; 252
    157e:	10 82       	st	Z, r1
    1580:	b7 01       	movw	r22, r14
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	16 c0       	rjmp	.+44     	; 0x15b4 <recvfrom+0x38a>
    1588:	6f ef       	ldi	r22, 0xFF	; 255
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
    158a:	7f ef       	ldi	r23, 0xFF	; 255
    158c:	cb 01       	movw	r24, r22
    158e:	12 c0       	rjmp	.+36     	; 0x15b4 <recvfrom+0x38a>
    1590:	6b ef       	ldi	r22, 0xFB	; 251
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
    1592:	7f ef       	ldi	r23, 0xFF	; 255
    1594:	8f ef       	ldi	r24, 0xFF	; 255
    1596:	9f ef       	ldi	r25, 0xFF	; 255
    1598:	0d c0       	rjmp	.+26     	; 0x15b4 <recvfrom+0x38a>
    159a:	62 ef       	ldi	r22, 0xF2	; 242
   }
   CHECK_SOCKDATA();
    159c:	7f ef       	ldi	r23, 0xFF	; 255
    159e:	8f ef       	ldi	r24, 0xFF	; 255
    15a0:	9f ef       	ldi	r25, 0xFF	; 255
    15a2:	08 c0       	rjmp	.+16     	; 0x15b4 <recvfrom+0x38a>
    15a4:	6c ef       	ldi	r22, 0xFC	; 252
   if(sock_remained_size[sn] == 0)
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    15a6:	7f ef       	ldi	r23, 0xFF	; 255
    15a8:	8f ef       	ldi	r24, 0xFF	; 255
    15aa:	9f ef       	ldi	r25, 0xFF	; 255
    15ac:	03 c0       	rjmp	.+6      	; 0x15b4 <recvfrom+0x38a>
    15ae:	60 e0       	ldi	r22, 0x00	; 0
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	cb 01       	movw	r24, r22
    15b4:	2c 96       	adiw	r28, 0x0c	; 12
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
}
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	df 90       	pop	r13
    15ce:	cf 90       	pop	r12
    15d0:	bf 90       	pop	r11
    15d2:	af 90       	pop	r10
    15d4:	9f 90       	pop	r9
    15d6:	8f 90       	pop	r8
    15d8:	7f 90       	pop	r7
    15da:	6f 90       	pop	r6
    15dc:	5f 90       	pop	r5
    15de:	4f 90       	pop	r4
    15e0:	3f 90       	pop	r3
    15e2:	2f 90       	pop	r2
    15e4:	08 95       	ret

000015e6 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
    15e6:	df 92       	push	r13
    15e8:	ef 92       	push	r14
    15ea:	ff 92       	push	r15
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <WIZCHIP_READ+0x10>
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	f6 2e       	mov	r15, r22
    15fc:	e7 2e       	mov	r14, r23
    15fe:	d8 2e       	mov	r13, r24
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
    1600:	06 e0       	ldi	r16, 0x06	; 6
    1602:	12 e0       	ldi	r17, 0x02	; 2
    1604:	d8 01       	movw	r26, r16
    1606:	18 96       	adiw	r26, 0x08	; 8
    1608:	ed 91       	ld	r30, X+
    160a:	fc 91       	ld	r31, X
    160c:	19 97       	sbiw	r26, 0x09	; 9
    160e:	19 95       	eicall
   WIZCHIP.CS._select();
    1610:	d8 01       	movw	r26, r16
    1612:	1c 96       	adiw	r26, 0x0c	; 12
    1614:	ed 91       	ld	r30, X+
    1616:	fc 91       	ld	r31, X
    1618:	1d 97       	sbiw	r26, 0x0d	; 13
    161a:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    161c:	f8 01       	movw	r30, r16
    161e:	84 89       	ldd	r24, Z+20	; 0x14
    1620:	95 89       	ldd	r25, Z+21	; 0x15
    1622:	89 2b       	or	r24, r25
    1624:	31 f0       	breq	.+12     	; 0x1632 <WIZCHIP_READ+0x4c>
    1626:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    162a:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    162e:	30 97       	sbiw	r30, 0x00	; 0
    1630:	c1 f4       	brne	.+48     	; 0x1662 <WIZCHIP_READ+0x7c>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1632:	06 e0       	ldi	r16, 0x06	; 6
    1634:	12 e0       	ldi	r17, 0x02	; 2
    1636:	d8 01       	movw	r26, r16
    1638:	52 96       	adiw	r26, 0x12	; 18
    163a:	ed 91       	ld	r30, X+
    163c:	fc 91       	ld	r31, X
    163e:	53 97       	sbiw	r26, 0x13	; 19
    1640:	8d 2d       	mov	r24, r13
    1642:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1644:	d8 01       	movw	r26, r16
    1646:	52 96       	adiw	r26, 0x12	; 18
    1648:	ed 91       	ld	r30, X+
    164a:	fc 91       	ld	r31, X
    164c:	53 97       	sbiw	r26, 0x13	; 19
    164e:	8e 2d       	mov	r24, r14
    1650:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1652:	d8 01       	movw	r26, r16
    1654:	52 96       	adiw	r26, 0x12	; 18
    1656:	ed 91       	ld	r30, X+
    1658:	fc 91       	ld	r31, X
    165a:	53 97       	sbiw	r26, 0x13	; 19
    165c:	8f 2d       	mov	r24, r15
    165e:	19 95       	eicall
    1660:	08 c0       	rjmp	.+16     	; 0x1672 <WIZCHIP_READ+0x8c>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    1662:	d9 82       	std	Y+1, r13	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    1664:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    1666:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    1668:	63 e0       	ldi	r22, 0x03	; 3
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	ce 01       	movw	r24, r28
    166e:	01 96       	adiw	r24, 0x01	; 1
    1670:	19 95       	eicall
   }
   ret = WIZCHIP.IF.SPI._read_byte();
    1672:	06 e0       	ldi	r16, 0x06	; 6
    1674:	12 e0       	ldi	r17, 0x02	; 2
    1676:	d8 01       	movw	r26, r16
    1678:	50 96       	adiw	r26, 0x10	; 16
    167a:	ed 91       	ld	r30, X+
    167c:	fc 91       	ld	r31, X
    167e:	51 97       	sbiw	r26, 0x11	; 17
    1680:	19 95       	eicall
    1682:	f8 2e       	mov	r15, r24

   WIZCHIP.CS._deselect();
    1684:	d8 01       	movw	r26, r16
    1686:	1e 96       	adiw	r26, 0x0e	; 14
    1688:	ed 91       	ld	r30, X+
    168a:	fc 91       	ld	r31, X
    168c:	1f 97       	sbiw	r26, 0x0f	; 15
    168e:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    1690:	d8 01       	movw	r26, r16
    1692:	1a 96       	adiw	r26, 0x0a	; 10
    1694:	ed 91       	ld	r30, X+
    1696:	fc 91       	ld	r31, X
    1698:	1b 97       	sbiw	r26, 0x0b	; 11
    169a:	19 95       	eicall
   return ret;
}
    169c:	8f 2d       	mov	r24, r15
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	ff 90       	pop	r15
    16ae:	ef 90       	pop	r14
    16b0:	df 90       	pop	r13
    16b2:	08 95       	ret

000016b4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
    16b4:	4f 92       	push	r4
    16b6:	5f 92       	push	r5
    16b8:	6f 92       	push	r6
    16ba:	7f 92       	push	r7
    16bc:	bf 92       	push	r11
    16be:	cf 92       	push	r12
    16c0:	df 92       	push	r13
    16c2:	ef 92       	push	r14
    16c4:	ff 92       	push	r15
    16c6:	0f 93       	push	r16
    16c8:	1f 93       	push	r17
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <WIZCHIP_WRITE+0x1c>
    16d0:	1f 92       	push	r1
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	6b 01       	movw	r12, r22
    16d8:	7c 01       	movw	r14, r24
    16da:	b4 2e       	mov	r11, r20
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
    16dc:	06 e0       	ldi	r16, 0x06	; 6
    16de:	12 e0       	ldi	r17, 0x02	; 2
    16e0:	d8 01       	movw	r26, r16
    16e2:	18 96       	adiw	r26, 0x08	; 8
    16e4:	ed 91       	ld	r30, X+
    16e6:	fc 91       	ld	r31, X
    16e8:	19 97       	sbiw	r26, 0x09	; 9
    16ea:	19 95       	eicall
   WIZCHIP.CS._select();
    16ec:	d8 01       	movw	r26, r16
    16ee:	1c 96       	adiw	r26, 0x0c	; 12
    16f0:	ed 91       	ld	r30, X+
    16f2:	fc 91       	ld	r31, X
    16f4:	1d 97       	sbiw	r26, 0x0d	; 13
    16f6:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    16f8:	26 01       	movw	r4, r12
    16fa:	37 01       	movw	r6, r14
    16fc:	68 94       	set
    16fe:	42 f8       	bld	r4, 2

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    1700:	d8 01       	movw	r26, r16
    1702:	56 96       	adiw	r26, 0x16	; 22
    1704:	ed 91       	ld	r30, X+
    1706:	fc 91       	ld	r31, X
    1708:	57 97       	sbiw	r26, 0x17	; 23
    170a:	30 97       	sbiw	r30, 0x00	; 0
    170c:	e1 f4       	brne	.+56     	; 0x1746 <WIZCHIP_WRITE+0x92>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    170e:	52 96       	adiw	r26, 0x12	; 18
    1710:	ed 91       	ld	r30, X+
    1712:	fc 91       	ld	r31, X
    1714:	53 97       	sbiw	r26, 0x13	; 19
    1716:	8e 2d       	mov	r24, r14
    1718:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    171a:	d8 01       	movw	r26, r16
    171c:	52 96       	adiw	r26, 0x12	; 18
    171e:	ed 91       	ld	r30, X+
    1720:	fc 91       	ld	r31, X
    1722:	53 97       	sbiw	r26, 0x13	; 19
    1724:	8d 2d       	mov	r24, r13
    1726:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1728:	d8 01       	movw	r26, r16
    172a:	52 96       	adiw	r26, 0x12	; 18
    172c:	ed 91       	ld	r30, X+
    172e:	fc 91       	ld	r31, X
    1730:	53 97       	sbiw	r26, 0x13	; 19
    1732:	84 2d       	mov	r24, r4
    1734:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte(wb);
    1736:	d8 01       	movw	r26, r16
    1738:	52 96       	adiw	r26, 0x12	; 18
    173a:	ed 91       	ld	r30, X+
    173c:	fc 91       	ld	r31, X
    173e:	53 97       	sbiw	r26, 0x13	; 19
    1740:	8b 2d       	mov	r24, r11
    1742:	19 95       	eicall
    1744:	09 c0       	rjmp	.+18     	; 0x1758 <WIZCHIP_WRITE+0xa4>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    1746:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    1748:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    174a:	4b 82       	std	Y+3, r4	; 0x03
		spi_data[3] = wb;
    174c:	bc 82       	std	Y+4, r11	; 0x04
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
    174e:	64 e0       	ldi	r22, 0x04	; 4
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	ce 01       	movw	r24, r28
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    1758:	06 e0       	ldi	r16, 0x06	; 6
    175a:	12 e0       	ldi	r17, 0x02	; 2
    175c:	d8 01       	movw	r26, r16
    175e:	1e 96       	adiw	r26, 0x0e	; 14
    1760:	ed 91       	ld	r30, X+
    1762:	fc 91       	ld	r31, X
    1764:	1f 97       	sbiw	r26, 0x0f	; 15
    1766:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    1768:	d8 01       	movw	r26, r16
    176a:	1a 96       	adiw	r26, 0x0a	; 10
    176c:	ed 91       	ld	r30, X+
    176e:	fc 91       	ld	r31, X
    1770:	1b 97       	sbiw	r26, 0x0b	; 11
    1772:	19 95       	eicall
}
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	df 90       	pop	r13
    178a:	cf 90       	pop	r12
    178c:	bf 90       	pop	r11
    178e:	7f 90       	pop	r7
    1790:	6f 90       	pop	r6
    1792:	5f 90       	pop	r5
    1794:	4f 90       	pop	r4
    1796:	08 95       	ret

00001798 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    1798:	9f 92       	push	r9
    179a:	af 92       	push	r10
    179c:	bf 92       	push	r11
    179e:	cf 92       	push	r12
    17a0:	df 92       	push	r13
    17a2:	ef 92       	push	r14
    17a4:	ff 92       	push	r15
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <WIZCHIP_READ_BUF+0x18>
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	f6 2e       	mov	r15, r22
    17b6:	e7 2e       	mov	r14, r23
    17b8:	98 2e       	mov	r9, r24
    17ba:	5a 01       	movw	r10, r20
    17bc:	69 01       	movw	r12, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    17be:	06 e0       	ldi	r16, 0x06	; 6
    17c0:	12 e0       	ldi	r17, 0x02	; 2
    17c2:	d8 01       	movw	r26, r16
    17c4:	18 96       	adiw	r26, 0x08	; 8
    17c6:	ed 91       	ld	r30, X+
    17c8:	fc 91       	ld	r31, X
    17ca:	19 97       	sbiw	r26, 0x09	; 9
    17cc:	19 95       	eicall
   WIZCHIP.CS._select();
    17ce:	d8 01       	movw	r26, r16
    17d0:	1c 96       	adiw	r26, 0x0c	; 12
    17d2:	ed 91       	ld	r30, X+
    17d4:	fc 91       	ld	r31, X
    17d6:	1d 97       	sbiw	r26, 0x0d	; 13
    17d8:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    17da:	f8 01       	movw	r30, r16
    17dc:	84 89       	ldd	r24, Z+20	; 0x14
    17de:	95 89       	ldd	r25, Z+21	; 0x15
    17e0:	89 2b       	or	r24, r25
    17e2:	31 f0       	breq	.+12     	; 0x17f0 <WIZCHIP_READ_BUF+0x58>
    17e4:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    17e8:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    17ec:	30 97       	sbiw	r30, 0x00	; 0
    17ee:	51 f5       	brne	.+84     	; 0x1844 <WIZCHIP_READ_BUF+0xac>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    17f0:	06 e0       	ldi	r16, 0x06	; 6
    17f2:	12 e0       	ldi	r17, 0x02	; 2
    17f4:	d8 01       	movw	r26, r16
    17f6:	52 96       	adiw	r26, 0x12	; 18
    17f8:	ed 91       	ld	r30, X+
    17fa:	fc 91       	ld	r31, X
    17fc:	53 97       	sbiw	r26, 0x13	; 19
    17fe:	89 2d       	mov	r24, r9
    1800:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1802:	d8 01       	movw	r26, r16
    1804:	52 96       	adiw	r26, 0x12	; 18
    1806:	ed 91       	ld	r30, X+
    1808:	fc 91       	ld	r31, X
    180a:	53 97       	sbiw	r26, 0x13	; 19
    180c:	8e 2d       	mov	r24, r14
    180e:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1810:	d8 01       	movw	r26, r16
    1812:	52 96       	adiw	r26, 0x12	; 18
    1814:	ed 91       	ld	r30, X+
    1816:	fc 91       	ld	r31, X
    1818:	53 97       	sbiw	r26, 0x13	; 19
    181a:	8f 2d       	mov	r24, r15
    181c:	19 95       	eicall
		for(i = 0; i < len; i++)
    181e:	00 e0       	ldi	r16, 0x00	; 0
    1820:	10 e0       	ldi	r17, 0x00	; 0
    1822:	0c c0       	rjmp	.+24     	; 0x183c <WIZCHIP_READ_BUF+0xa4>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
    1824:	75 01       	movw	r14, r10
    1826:	e0 0e       	add	r14, r16
    1828:	f1 1e       	adc	r15, r17
    182a:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <WIZCHIP+0x10>
    182e:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <WIZCHIP+0x11>
    1832:	19 95       	eicall
    1834:	f7 01       	movw	r30, r14
    1836:	80 83       	st	Z, r24
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    1838:	0f 5f       	subi	r16, 0xFF	; 255
    183a:	1f 4f       	sbci	r17, 0xFF	; 255
    183c:	0c 15       	cp	r16, r12
    183e:	1d 05       	cpc	r17, r13
    1840:	88 f3       	brcs	.-30     	; 0x1824 <WIZCHIP_READ_BUF+0x8c>
    1842:	0f c0       	rjmp	.+30     	; 0x1862 <WIZCHIP_READ_BUF+0xca>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    1844:	99 82       	std	Y+1, r9	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    1846:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    1848:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    184a:	63 e0       	ldi	r22, 0x03	; 3
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	ce 01       	movw	r24, r28
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	19 95       	eicall
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
    1854:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <WIZCHIP+0x14>
    1858:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <WIZCHIP+0x15>
    185c:	b6 01       	movw	r22, r12
    185e:	c5 01       	movw	r24, r10
    1860:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    1862:	06 e0       	ldi	r16, 0x06	; 6
    1864:	12 e0       	ldi	r17, 0x02	; 2
    1866:	d8 01       	movw	r26, r16
    1868:	1e 96       	adiw	r26, 0x0e	; 14
    186a:	ed 91       	ld	r30, X+
    186c:	fc 91       	ld	r31, X
    186e:	1f 97       	sbiw	r26, 0x0f	; 15
    1870:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    1872:	d8 01       	movw	r26, r16
    1874:	1a 96       	adiw	r26, 0x0a	; 10
    1876:	ed 91       	ld	r30, X+
    1878:	fc 91       	ld	r31, X
    187a:	1b 97       	sbiw	r26, 0x0b	; 11
    187c:	19 95       	eicall
}
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	ff 90       	pop	r15
    188e:	ef 90       	pop	r14
    1890:	df 90       	pop	r13
    1892:	cf 90       	pop	r12
    1894:	bf 90       	pop	r11
    1896:	af 90       	pop	r10
    1898:	9f 90       	pop	r9
    189a:	08 95       	ret

0000189c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    189c:	4f 92       	push	r4
    189e:	5f 92       	push	r5
    18a0:	6f 92       	push	r6
    18a2:	7f 92       	push	r7
    18a4:	8f 92       	push	r8
    18a6:	9f 92       	push	r9
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	00 d0       	rcall	.+0      	; 0x18be <WIZCHIP_WRITE_BUF+0x22>
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	6b 01       	movw	r12, r22
    18c4:	7c 01       	movw	r14, r24
    18c6:	4a 01       	movw	r8, r20
    18c8:	59 01       	movw	r10, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    18ca:	06 e0       	ldi	r16, 0x06	; 6
    18cc:	12 e0       	ldi	r17, 0x02	; 2
    18ce:	d8 01       	movw	r26, r16
    18d0:	18 96       	adiw	r26, 0x08	; 8
    18d2:	ed 91       	ld	r30, X+
    18d4:	fc 91       	ld	r31, X
    18d6:	19 97       	sbiw	r26, 0x09	; 9
    18d8:	19 95       	eicall
   WIZCHIP.CS._select();
    18da:	d8 01       	movw	r26, r16
    18dc:	1c 96       	adiw	r26, 0x0c	; 12
    18de:	ed 91       	ld	r30, X+
    18e0:	fc 91       	ld	r31, X
    18e2:	1d 97       	sbiw	r26, 0x0d	; 13
    18e4:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    18e6:	26 01       	movw	r4, r12
    18e8:	37 01       	movw	r6, r14
    18ea:	68 94       	set
    18ec:	42 f8       	bld	r4, 2

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    18ee:	d8 01       	movw	r26, r16
    18f0:	56 96       	adiw	r26, 0x16	; 22
    18f2:	ed 91       	ld	r30, X+
    18f4:	fc 91       	ld	r31, X
    18f6:	57 97       	sbiw	r26, 0x17	; 23
    18f8:	30 97       	sbiw	r30, 0x00	; 0
    18fa:	31 f5       	brne	.+76     	; 0x1948 <WIZCHIP_WRITE_BUF+0xac>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    18fc:	52 96       	adiw	r26, 0x12	; 18
    18fe:	ed 91       	ld	r30, X+
    1900:	fc 91       	ld	r31, X
    1902:	53 97       	sbiw	r26, 0x13	; 19
    1904:	8e 2d       	mov	r24, r14
    1906:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1908:	d8 01       	movw	r26, r16
    190a:	52 96       	adiw	r26, 0x12	; 18
    190c:	ed 91       	ld	r30, X+
    190e:	fc 91       	ld	r31, X
    1910:	53 97       	sbiw	r26, 0x13	; 19
    1912:	8d 2d       	mov	r24, r13
    1914:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1916:	d8 01       	movw	r26, r16
    1918:	52 96       	adiw	r26, 0x12	; 18
    191a:	ed 91       	ld	r30, X+
    191c:	fc 91       	ld	r31, X
    191e:	53 97       	sbiw	r26, 0x13	; 19
    1920:	84 2d       	mov	r24, r4
    1922:	19 95       	eicall
		for(i = 0; i < len; i++)
    1924:	00 e0       	ldi	r16, 0x00	; 0
    1926:	10 e0       	ldi	r17, 0x00	; 0
    1928:	0b c0       	rjmp	.+22     	; 0x1940 <WIZCHIP_WRITE_BUF+0xa4>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    192a:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <WIZCHIP+0x12>
    192e:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <WIZCHIP+0x13>
    1932:	d4 01       	movw	r26, r8
    1934:	a0 0f       	add	r26, r16
    1936:	b1 1f       	adc	r27, r17
    1938:	8c 91       	ld	r24, X
    193a:	19 95       	eicall
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    193c:	0f 5f       	subi	r16, 0xFF	; 255
    193e:	1f 4f       	sbci	r17, 0xFF	; 255
    1940:	0a 15       	cp	r16, r10
    1942:	1b 05       	cpc	r17, r11
    1944:	90 f3       	brcs	.-28     	; 0x192a <WIZCHIP_WRITE_BUF+0x8e>
    1946:	0f c0       	rjmp	.+30     	; 0x1966 <WIZCHIP_WRITE_BUF+0xca>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    1948:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    194a:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    194c:	4b 82       	std	Y+3, r4	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    194e:	63 e0       	ldi	r22, 0x03	; 3
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	ce 01       	movw	r24, r28
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	19 95       	eicall
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    1958:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    195c:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    1960:	b5 01       	movw	r22, r10
    1962:	c4 01       	movw	r24, r8
    1964:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    1966:	06 e0       	ldi	r16, 0x06	; 6
    1968:	12 e0       	ldi	r17, 0x02	; 2
    196a:	d8 01       	movw	r26, r16
    196c:	1e 96       	adiw	r26, 0x0e	; 14
    196e:	ed 91       	ld	r30, X+
    1970:	fc 91       	ld	r31, X
    1972:	1f 97       	sbiw	r26, 0x0f	; 15
    1974:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    1976:	d8 01       	movw	r26, r16
    1978:	1a 96       	adiw	r26, 0x0a	; 10
    197a:	ed 91       	ld	r30, X+
    197c:	fc 91       	ld	r31, X
    197e:	1b 97       	sbiw	r26, 0x0b	; 11
    1980:	19 95       	eicall
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	ff 90       	pop	r15
    1992:	ef 90       	pop	r14
    1994:	df 90       	pop	r13
    1996:	cf 90       	pop	r12
    1998:	bf 90       	pop	r11
    199a:	af 90       	pop	r10
    199c:	9f 90       	pop	r9
    199e:	8f 90       	pop	r8
    19a0:	7f 90       	pop	r7
    19a2:	6f 90       	pop	r6
    19a4:	5f 90       	pop	r5
    19a6:	4f 90       	pop	r4
    19a8:	08 95       	ret

000019aa <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
    19aa:	7f 92       	push	r7
    19ac:	8f 92       	push	r8
    19ae:	9f 92       	push	r9
    19b0:	af 92       	push	r10
    19b2:	bf 92       	push	r11
    19b4:	cf 92       	push	r12
    19b6:	df 92       	push	r13
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	78 2e       	mov	r7, r24
   uint16_t val=0,val1=0;
    19c6:	00 e0       	ldi	r16, 0x00	; 0
    19c8:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    19ca:	c7 2c       	mov	r12, r7
    19cc:	d1 2c       	mov	r13, r1
    19ce:	cc 0c       	add	r12, r12
    19d0:	dd 1c       	adc	r13, r13
    19d2:	cc 0c       	add	r12, r12
    19d4:	dd 1c       	adc	r13, r13
    19d6:	8f ef       	ldi	r24, 0xFF	; 255
    19d8:	c8 1a       	sub	r12, r24
    19da:	d8 0a       	sbc	r13, r24
    19dc:	cc 0c       	add	r12, r12
    19de:	dd 1c       	adc	r13, r13
    19e0:	cc 0c       	add	r12, r12
    19e2:	dd 1c       	adc	r13, r13
    19e4:	cc 0c       	add	r12, r12
    19e6:	dd 1c       	adc	r13, r13
    19e8:	46 01       	movw	r8, r12
    19ea:	80 ee       	ldi	r24, 0xE0	; 224
    19ec:	98 1a       	sub	r9, r24
    19ee:	09 2c       	mov	r0, r9
    19f0:	00 0c       	add	r0, r0
    19f2:	aa 08       	sbc	r10, r10
    19f4:	bb 08       	sbc	r11, r11
    19f6:	c5 01       	movw	r24, r10
    19f8:	b4 01       	movw	r22, r8
    19fa:	f5 dd       	rcall	.-1046   	; 0x15e6 <WIZCHIP_READ>
    19fc:	c8 2f       	mov	r28, r24
    19fe:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    1a00:	dc 2f       	mov	r29, r28
    1a02:	cc 27       	eor	r28, r28
    1a04:	8f ed       	ldi	r24, 0xDF	; 223
    1a06:	d8 1a       	sub	r13, r24
    1a08:	0d 2c       	mov	r0, r13
    1a0a:	00 0c       	add	r0, r0
    1a0c:	ee 08       	sbc	r14, r14
    1a0e:	ff 08       	sbc	r15, r15
    1a10:	c7 01       	movw	r24, r14
    1a12:	b6 01       	movw	r22, r12
    1a14:	e8 dd       	rcall	.-1072   	; 0x15e6 <WIZCHIP_READ>
    1a16:	c8 0f       	add	r28, r24
    1a18:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    1a1a:	20 97       	sbiw	r28, 0x00	; 0
    1a1c:	61 f0       	breq	.+24     	; 0x1a36 <getSn_TX_FSR+0x8c>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    1a1e:	c5 01       	movw	r24, r10
    1a20:	b4 01       	movw	r22, r8
    1a22:	e1 dd       	rcall	.-1086   	; 0x15e6 <WIZCHIP_READ>
    1a24:	08 2f       	mov	r16, r24
    1a26:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    1a28:	10 2f       	mov	r17, r16
    1a2a:	00 27       	eor	r16, r16
    1a2c:	c7 01       	movw	r24, r14
    1a2e:	b6 01       	movw	r22, r12
    1a30:	da dd       	rcall	.-1100   	; 0x15e6 <WIZCHIP_READ>
    1a32:	08 0f       	add	r16, r24
    1a34:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    1a36:	0c 17       	cp	r16, r28
    1a38:	1d 07       	cpc	r17, r29
    1a3a:	39 f6       	brne	.-114    	; 0x19ca <getSn_TX_FSR+0x20>
   return val;
}
    1a3c:	c8 01       	movw	r24, r16
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	1f 91       	pop	r17
    1a44:	0f 91       	pop	r16
    1a46:	ff 90       	pop	r15
    1a48:	ef 90       	pop	r14
    1a4a:	df 90       	pop	r13
    1a4c:	cf 90       	pop	r12
    1a4e:	bf 90       	pop	r11
    1a50:	af 90       	pop	r10
    1a52:	9f 90       	pop	r9
    1a54:	8f 90       	pop	r8
    1a56:	7f 90       	pop	r7
    1a58:	08 95       	ret

00001a5a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    1a5a:	7f 92       	push	r7
    1a5c:	8f 92       	push	r8
    1a5e:	9f 92       	push	r9
    1a60:	af 92       	push	r10
    1a62:	bf 92       	push	r11
    1a64:	cf 92       	push	r12
    1a66:	df 92       	push	r13
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	78 2e       	mov	r7, r24
   uint16_t val=0,val1=0;
    1a76:	00 e0       	ldi	r16, 0x00	; 0
    1a78:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    1a7a:	c7 2c       	mov	r12, r7
    1a7c:	d1 2c       	mov	r13, r1
    1a7e:	cc 0c       	add	r12, r12
    1a80:	dd 1c       	adc	r13, r13
    1a82:	cc 0c       	add	r12, r12
    1a84:	dd 1c       	adc	r13, r13
    1a86:	8f ef       	ldi	r24, 0xFF	; 255
    1a88:	c8 1a       	sub	r12, r24
    1a8a:	d8 0a       	sbc	r13, r24
    1a8c:	cc 0c       	add	r12, r12
    1a8e:	dd 1c       	adc	r13, r13
    1a90:	cc 0c       	add	r12, r12
    1a92:	dd 1c       	adc	r13, r13
    1a94:	cc 0c       	add	r12, r12
    1a96:	dd 1c       	adc	r13, r13
    1a98:	46 01       	movw	r8, r12
    1a9a:	8a ed       	ldi	r24, 0xDA	; 218
    1a9c:	98 1a       	sub	r9, r24
    1a9e:	09 2c       	mov	r0, r9
    1aa0:	00 0c       	add	r0, r0
    1aa2:	aa 08       	sbc	r10, r10
    1aa4:	bb 08       	sbc	r11, r11
    1aa6:	c5 01       	movw	r24, r10
    1aa8:	b4 01       	movw	r22, r8
    1aaa:	9d dd       	rcall	.-1222   	; 0x15e6 <WIZCHIP_READ>
    1aac:	c8 2f       	mov	r28, r24
    1aae:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    1ab0:	dc 2f       	mov	r29, r28
    1ab2:	cc 27       	eor	r28, r28
    1ab4:	89 ed       	ldi	r24, 0xD9	; 217
    1ab6:	d8 1a       	sub	r13, r24
    1ab8:	0d 2c       	mov	r0, r13
    1aba:	00 0c       	add	r0, r0
    1abc:	ee 08       	sbc	r14, r14
    1abe:	ff 08       	sbc	r15, r15
    1ac0:	c7 01       	movw	r24, r14
    1ac2:	b6 01       	movw	r22, r12
    1ac4:	90 dd       	rcall	.-1248   	; 0x15e6 <WIZCHIP_READ>
    1ac6:	c8 0f       	add	r28, r24
    1ac8:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    1aca:	20 97       	sbiw	r28, 0x00	; 0
    1acc:	61 f0       	breq	.+24     	; 0x1ae6 <getSn_RX_RSR+0x8c>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    1ace:	c5 01       	movw	r24, r10
    1ad0:	b4 01       	movw	r22, r8
    1ad2:	89 dd       	rcall	.-1262   	; 0x15e6 <WIZCHIP_READ>
    1ad4:	08 2f       	mov	r16, r24
    1ad6:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    1ad8:	10 2f       	mov	r17, r16
    1ada:	00 27       	eor	r16, r16
    1adc:	c7 01       	movw	r24, r14
    1ade:	b6 01       	movw	r22, r12
    1ae0:	82 dd       	rcall	.-1276   	; 0x15e6 <WIZCHIP_READ>
    1ae2:	08 0f       	add	r16, r24
    1ae4:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    1ae6:	0c 17       	cp	r16, r28
    1ae8:	1d 07       	cpc	r17, r29
    1aea:	39 f6       	brne	.-114    	; 0x1a7a <getSn_RX_RSR+0x20>
   return val;
}
    1aec:	c8 01       	movw	r24, r16
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	1f 91       	pop	r17
    1af4:	0f 91       	pop	r16
    1af6:	ff 90       	pop	r15
    1af8:	ef 90       	pop	r14
    1afa:	df 90       	pop	r13
    1afc:	cf 90       	pop	r12
    1afe:	bf 90       	pop	r11
    1b00:	af 90       	pop	r10
    1b02:	9f 90       	pop	r9
    1b04:	8f 90       	pop	r8
    1b06:	7f 90       	pop	r7
    1b08:	08 95       	ret

00001b0a <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    1b0a:	2f 92       	push	r2
    1b0c:	3f 92       	push	r3
    1b0e:	4f 92       	push	r4
    1b10:	5f 92       	push	r5
    1b12:	6f 92       	push	r6
    1b14:	7f 92       	push	r7
    1b16:	8f 92       	push	r8
    1b18:	9f 92       	push	r9
    1b1a:	af 92       	push	r10
    1b1c:	bf 92       	push	r11
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <wiz_send_data+0x26>
    1b30:	1f 92       	push	r1
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
    1b36:	41 15       	cp	r20, r1
    1b38:	51 05       	cpc	r21, r1
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <wiz_send_data+0x34>
    1b3c:	56 c0       	rjmp	.+172    	; 0x1bea <wiz_send_data+0xe0>
    1b3e:	3a 01       	movw	r6, r20
    1b40:	7a 83       	std	Y+2, r23	; 0x02
    1b42:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_TX_WR(sn);
    1b44:	28 2e       	mov	r2, r24
    1b46:	31 2c       	mov	r3, r1
    1b48:	22 0c       	add	r2, r2
    1b4a:	33 1c       	adc	r3, r3
    1b4c:	22 0c       	add	r2, r2
    1b4e:	33 1c       	adc	r3, r3
    1b50:	61 01       	movw	r12, r2
    1b52:	2f ef       	ldi	r18, 0xFF	; 255
    1b54:	c2 1a       	sub	r12, r18
    1b56:	d2 0a       	sbc	r13, r18
    1b58:	cc 0c       	add	r12, r12
    1b5a:	dd 1c       	adc	r13, r13
    1b5c:	cc 0c       	add	r12, r12
    1b5e:	dd 1c       	adc	r13, r13
    1b60:	cc 0c       	add	r12, r12
    1b62:	dd 1c       	adc	r13, r13
    1b64:	46 01       	movw	r8, r12
    1b66:	3c ed       	ldi	r19, 0xDC	; 220
    1b68:	93 1a       	sub	r9, r19
    1b6a:	09 2c       	mov	r0, r9
    1b6c:	00 0c       	add	r0, r0
    1b6e:	aa 08       	sbc	r10, r10
    1b70:	bb 08       	sbc	r11, r11
    1b72:	c5 01       	movw	r24, r10
    1b74:	b4 01       	movw	r22, r8
    1b76:	37 dd       	rcall	.-1426   	; 0x15e6 <WIZCHIP_READ>
    1b78:	08 2f       	mov	r16, r24
    1b7a:	10 e0       	ldi	r17, 0x00	; 0
    1b7c:	10 2f       	mov	r17, r16
    1b7e:	00 27       	eor	r16, r16
    1b80:	8b ed       	ldi	r24, 0xDB	; 219
    1b82:	d8 1a       	sub	r13, r24
    1b84:	0d 2c       	mov	r0, r13
    1b86:	00 0c       	add	r0, r0
    1b88:	ee 08       	sbc	r14, r14
    1b8a:	ff 08       	sbc	r15, r15
    1b8c:	c7 01       	movw	r24, r14
    1b8e:	b6 01       	movw	r22, r12
    1b90:	2a dd       	rcall	.-1452   	; 0x15e6 <WIZCHIP_READ>
    1b92:	08 0f       	add	r16, r24
    1b94:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
    1b96:	c8 01       	movw	r24, r16
    1b98:	a0 e0       	ldi	r26, 0x00	; 0
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	44 27       	eor	r20, r20
    1b9e:	58 2f       	mov	r21, r24
    1ba0:	69 2f       	mov	r22, r25
    1ba2:	7a 2f       	mov	r23, r26
    1ba4:	c1 01       	movw	r24, r2
    1ba6:	02 96       	adiw	r24, 0x02	; 2
    1ba8:	1c 01       	movw	r2, r24
    1baa:	22 0c       	add	r2, r2
    1bac:	33 1c       	adc	r3, r3
    1bae:	22 0c       	add	r2, r2
    1bb0:	33 1c       	adc	r3, r3
    1bb2:	22 0c       	add	r2, r2
    1bb4:	33 1c       	adc	r3, r3
    1bb6:	c1 01       	movw	r24, r2
    1bb8:	33 0c       	add	r3, r3
    1bba:	aa 0b       	sbc	r26, r26
    1bbc:	bb 0b       	sbc	r27, r27
    1bbe:	1a 01       	movw	r2, r20
    1bc0:	2b 01       	movw	r4, r22
    1bc2:	28 0e       	add	r2, r24
    1bc4:	39 1e       	adc	r3, r25
    1bc6:	4a 1e       	adc	r4, r26
    1bc8:	5b 1e       	adc	r5, r27
    1bca:	c2 01       	movw	r24, r4
    1bcc:	b1 01       	movw	r22, r2
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    1bce:	93 01       	movw	r18, r6
    1bd0:	49 81       	ldd	r20, Y+1	; 0x01
    1bd2:	5a 81       	ldd	r21, Y+2	; 0x02
    1bd4:	63 de       	rcall	.-826    	; 0x189c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
    1bd6:	06 0d       	add	r16, r6
    1bd8:	17 1d       	adc	r17, r7
   setSn_TX_WR(sn,ptr);
    1bda:	41 2f       	mov	r20, r17
    1bdc:	c5 01       	movw	r24, r10
    1bde:	b4 01       	movw	r22, r8
    1be0:	69 dd       	rcall	.-1326   	; 0x16b4 <WIZCHIP_WRITE>
    1be2:	40 2f       	mov	r20, r16
    1be4:	c7 01       	movw	r24, r14
    1be6:	b6 01       	movw	r22, r12
    1be8:	65 dd       	rcall	.-1334   	; 0x16b4 <WIZCHIP_WRITE>
}
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	bf 90       	pop	r11
    1c04:	af 90       	pop	r10
    1c06:	9f 90       	pop	r9
    1c08:	8f 90       	pop	r8
    1c0a:	7f 90       	pop	r7
    1c0c:	6f 90       	pop	r6
    1c0e:	5f 90       	pop	r5
    1c10:	4f 90       	pop	r4
    1c12:	3f 90       	pop	r3
    1c14:	2f 90       	pop	r2
    1c16:	08 95       	ret

00001c18 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    1c18:	2f 92       	push	r2
    1c1a:	3f 92       	push	r3
    1c1c:	4f 92       	push	r4
    1c1e:	5f 92       	push	r5
    1c20:	6f 92       	push	r6
    1c22:	7f 92       	push	r7
    1c24:	8f 92       	push	r8
    1c26:	9f 92       	push	r9
    1c28:	af 92       	push	r10
    1c2a:	bf 92       	push	r11
    1c2c:	cf 92       	push	r12
    1c2e:	df 92       	push	r13
    1c30:	ef 92       	push	r14
    1c32:	ff 92       	push	r15
    1c34:	0f 93       	push	r16
    1c36:	1f 93       	push	r17
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <wiz_recv_data+0x26>
    1c3e:	1f 92       	push	r1
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
    1c44:	41 15       	cp	r20, r1
    1c46:	51 05       	cpc	r21, r1
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <wiz_recv_data+0x34>
    1c4a:	56 c0       	rjmp	.+172    	; 0x1cf8 <wiz_recv_data+0xe0>
    1c4c:	3a 01       	movw	r6, r20
    1c4e:	7a 83       	std	Y+2, r23	; 0x02
    1c50:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_RX_RD(sn);
    1c52:	28 2e       	mov	r2, r24
    1c54:	31 2c       	mov	r3, r1
    1c56:	22 0c       	add	r2, r2
    1c58:	33 1c       	adc	r3, r3
    1c5a:	22 0c       	add	r2, r2
    1c5c:	33 1c       	adc	r3, r3
    1c5e:	61 01       	movw	r12, r2
    1c60:	2f ef       	ldi	r18, 0xFF	; 255
    1c62:	c2 1a       	sub	r12, r18
    1c64:	d2 0a       	sbc	r13, r18
    1c66:	cc 0c       	add	r12, r12
    1c68:	dd 1c       	adc	r13, r13
    1c6a:	cc 0c       	add	r12, r12
    1c6c:	dd 1c       	adc	r13, r13
    1c6e:	cc 0c       	add	r12, r12
    1c70:	dd 1c       	adc	r13, r13
    1c72:	46 01       	movw	r8, r12
    1c74:	38 ed       	ldi	r19, 0xD8	; 216
    1c76:	93 1a       	sub	r9, r19
    1c78:	09 2c       	mov	r0, r9
    1c7a:	00 0c       	add	r0, r0
    1c7c:	aa 08       	sbc	r10, r10
    1c7e:	bb 08       	sbc	r11, r11
    1c80:	c5 01       	movw	r24, r10
    1c82:	b4 01       	movw	r22, r8
    1c84:	b0 dc       	rcall	.-1696   	; 0x15e6 <WIZCHIP_READ>
    1c86:	08 2f       	mov	r16, r24
    1c88:	10 e0       	ldi	r17, 0x00	; 0
    1c8a:	10 2f       	mov	r17, r16
    1c8c:	00 27       	eor	r16, r16
    1c8e:	87 ed       	ldi	r24, 0xD7	; 215
    1c90:	d8 1a       	sub	r13, r24
    1c92:	0d 2c       	mov	r0, r13
    1c94:	00 0c       	add	r0, r0
    1c96:	ee 08       	sbc	r14, r14
    1c98:	ff 08       	sbc	r15, r15
    1c9a:	c7 01       	movw	r24, r14
    1c9c:	b6 01       	movw	r22, r12
    1c9e:	a3 dc       	rcall	.-1722   	; 0x15e6 <WIZCHIP_READ>
    1ca0:	08 0f       	add	r16, r24
    1ca2:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
    1ca4:	c8 01       	movw	r24, r16
    1ca6:	a0 e0       	ldi	r26, 0x00	; 0
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	44 27       	eor	r20, r20
    1cac:	58 2f       	mov	r21, r24
    1cae:	69 2f       	mov	r22, r25
    1cb0:	7a 2f       	mov	r23, r26
    1cb2:	c1 01       	movw	r24, r2
    1cb4:	03 96       	adiw	r24, 0x03	; 3
    1cb6:	1c 01       	movw	r2, r24
    1cb8:	22 0c       	add	r2, r2
    1cba:	33 1c       	adc	r3, r3
    1cbc:	22 0c       	add	r2, r2
    1cbe:	33 1c       	adc	r3, r3
    1cc0:	22 0c       	add	r2, r2
    1cc2:	33 1c       	adc	r3, r3
    1cc4:	c1 01       	movw	r24, r2
    1cc6:	33 0c       	add	r3, r3
    1cc8:	aa 0b       	sbc	r26, r26
    1cca:	bb 0b       	sbc	r27, r27
    1ccc:	1a 01       	movw	r2, r20
    1cce:	2b 01       	movw	r4, r22
    1cd0:	28 0e       	add	r2, r24
    1cd2:	39 1e       	adc	r3, r25
    1cd4:	4a 1e       	adc	r4, r26
    1cd6:	5b 1e       	adc	r5, r27
    1cd8:	c2 01       	movw	r24, r4
    1cda:	b1 01       	movw	r22, r2
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    1cdc:	93 01       	movw	r18, r6
    1cde:	49 81       	ldd	r20, Y+1	; 0x01
    1ce0:	5a 81       	ldd	r21, Y+2	; 0x02
    1ce2:	5a dd       	rcall	.-1356   	; 0x1798 <WIZCHIP_READ_BUF>
   ptr += len;
    1ce4:	06 0d       	add	r16, r6
    1ce6:	17 1d       	adc	r17, r7
   
   setSn_RX_RD(sn,ptr);
    1ce8:	41 2f       	mov	r20, r17
    1cea:	c5 01       	movw	r24, r10
    1cec:	b4 01       	movw	r22, r8
    1cee:	e2 dc       	rcall	.-1596   	; 0x16b4 <WIZCHIP_WRITE>
    1cf0:	40 2f       	mov	r20, r16
    1cf2:	c7 01       	movw	r24, r14
    1cf4:	b6 01       	movw	r22, r12
    1cf6:	de dc       	rcall	.-1604   	; 0x16b4 <WIZCHIP_WRITE>
}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	bf 90       	pop	r11
    1d12:	af 90       	pop	r10
    1d14:	9f 90       	pop	r9
    1d16:	8f 90       	pop	r8
    1d18:	7f 90       	pop	r7
    1d1a:	6f 90       	pop	r6
    1d1c:	5f 90       	pop	r5
    1d1e:	4f 90       	pop	r4
    1d20:	3f 90       	pop	r3
    1d22:	2f 90       	pop	r2
    1d24:	08 95       	ret

00001d26 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
    1d26:	8f 92       	push	r8
    1d28:	9f 92       	push	r9
    1d2a:	af 92       	push	r10
    1d2c:	bf 92       	push	r11
    1d2e:	cf 92       	push	r12
    1d30:	df 92       	push	r13
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	eb 01       	movw	r28, r22
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
    1d40:	c8 2e       	mov	r12, r24
    1d42:	d1 2c       	mov	r13, r1
    1d44:	cc 0c       	add	r12, r12
    1d46:	dd 1c       	adc	r13, r13
    1d48:	cc 0c       	add	r12, r12
    1d4a:	dd 1c       	adc	r13, r13
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	c8 1a       	sub	r12, r24
    1d50:	d8 0a       	sbc	r13, r24
    1d52:	cc 0c       	add	r12, r12
    1d54:	dd 1c       	adc	r13, r13
    1d56:	cc 0c       	add	r12, r12
    1d58:	dd 1c       	adc	r13, r13
    1d5a:	cc 0c       	add	r12, r12
    1d5c:	dd 1c       	adc	r13, r13
    1d5e:	46 01       	movw	r8, r12
    1d60:	88 ed       	ldi	r24, 0xD8	; 216
    1d62:	98 1a       	sub	r9, r24
    1d64:	09 2c       	mov	r0, r9
    1d66:	00 0c       	add	r0, r0
    1d68:	aa 08       	sbc	r10, r10
    1d6a:	bb 08       	sbc	r11, r11
    1d6c:	c5 01       	movw	r24, r10
    1d6e:	b4 01       	movw	r22, r8
    1d70:	3a dc       	rcall	.-1932   	; 0x15e6 <WIZCHIP_READ>
    1d72:	08 2f       	mov	r16, r24
    1d74:	10 e0       	ldi	r17, 0x00	; 0
    1d76:	10 2f       	mov	r17, r16
    1d78:	00 27       	eor	r16, r16
    1d7a:	87 ed       	ldi	r24, 0xD7	; 215
    1d7c:	d8 1a       	sub	r13, r24
    1d7e:	0d 2c       	mov	r0, r13
    1d80:	00 0c       	add	r0, r0
    1d82:	ee 08       	sbc	r14, r14
    1d84:	ff 08       	sbc	r15, r15
    1d86:	c7 01       	movw	r24, r14
    1d88:	b6 01       	movw	r22, r12
    1d8a:	2d dc       	rcall	.-1958   	; 0x15e6 <WIZCHIP_READ>
    1d8c:	08 0f       	add	r16, r24
    1d8e:	11 1d       	adc	r17, r1
   ptr += len;
    1d90:	c0 0f       	add	r28, r16
    1d92:	d1 1f       	adc	r29, r17
   setSn_RX_RD(sn,ptr);
    1d94:	4d 2f       	mov	r20, r29
    1d96:	c5 01       	movw	r24, r10
    1d98:	b4 01       	movw	r22, r8
    1d9a:	8c dc       	rcall	.-1768   	; 0x16b4 <WIZCHIP_WRITE>
    1d9c:	4c 2f       	mov	r20, r28
    1d9e:	c7 01       	movw	r24, r14
    1da0:	b6 01       	movw	r22, r12
    1da2:	88 dc       	rcall	.-1776   	; 0x16b4 <WIZCHIP_WRITE>
}
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	df 90       	pop	r13
    1db2:	cf 90       	pop	r12
    1db4:	bf 90       	pop	r11
    1db6:	af 90       	pop	r10
    1db8:	9f 90       	pop	r9
    1dba:	8f 90       	pop	r8
    1dbc:	08 95       	ret

00001dbe <wizchip_cris_enter>:
void wizphy_getphystat(wiz_PhyConf* phyconf)
{
   uint8_t tmp = getPHYCFGR();
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}
    1dbe:	08 95       	ret

00001dc0 <wizchip_cris_exit>:
    1dc0:	08 95       	ret

00001dc2 <wizchip_cs_select>:
    1dc2:	08 95       	ret

00001dc4 <wizchip_cs_deselect>:
    1dc4:	08 95       	ret

00001dc6 <wizchip_bus_readdata>:
    1dc6:	fb 01       	movw	r30, r22
    1dc8:	80 81       	ld	r24, Z
    1dca:	08 95       	ret

00001dcc <wizchip_bus_writedata>:
    1dcc:	fb 01       	movw	r30, r22
    1dce:	40 83       	st	Z, r20
    1dd0:	08 95       	ret

00001dd2 <wizchip_spi_readbyte>:
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	08 95       	ret

00001dd6 <wizchip_spi_writebyte>:
    1dd6:	08 95       	ret

00001dd8 <wizchip_spi_readburst>:
    1dd8:	08 95       	ret

00001dda <wizchip_spi_writeburst>:
    1dda:	08 95       	ret

00001ddc <reg_wizchip_cs_cbfunc>:
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	19 f0       	breq	.+6      	; 0x1de6 <reg_wizchip_cs_cbfunc+0xa>
    1de0:	61 15       	cp	r22, r1
    1de2:	71 05       	cpc	r23, r1
    1de4:	59 f4       	brne	.+22     	; 0x1dfc <reg_wizchip_cs_cbfunc+0x20>
    1de6:	e6 e0       	ldi	r30, 0x06	; 6
    1de8:	f2 e0       	ldi	r31, 0x02	; 2
    1dea:	81 ee       	ldi	r24, 0xE1	; 225
    1dec:	9e e0       	ldi	r25, 0x0E	; 14
    1dee:	95 87       	std	Z+13, r25	; 0x0d
    1df0:	84 87       	std	Z+12, r24	; 0x0c
    1df2:	82 ee       	ldi	r24, 0xE2	; 226
    1df4:	9e e0       	ldi	r25, 0x0E	; 14
    1df6:	97 87       	std	Z+15, r25	; 0x0f
    1df8:	86 87       	std	Z+14, r24	; 0x0e
    1dfa:	08 95       	ret
    1dfc:	e6 e0       	ldi	r30, 0x06	; 6
    1dfe:	f2 e0       	ldi	r31, 0x02	; 2
    1e00:	95 87       	std	Z+13, r25	; 0x0d
    1e02:	84 87       	std	Z+12, r24	; 0x0c
    1e04:	77 87       	std	Z+15, r23	; 0x0f
    1e06:	66 87       	std	Z+14, r22	; 0x0e
    1e08:	08 95       	ret

00001e0a <reg_wizchip_spi_cbfunc>:
    1e0a:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <WIZCHIP>
    1e0e:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <WIZCHIP+0x1>
    1e12:	31 ff       	sbrs	r19, 1
    1e14:	fa cf       	rjmp	.-12     	; 0x1e0a <reg_wizchip_spi_cbfunc>
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	19 f0       	breq	.+6      	; 0x1e20 <reg_wizchip_spi_cbfunc+0x16>
    1e1a:	61 15       	cp	r22, r1
    1e1c:	71 05       	cpc	r23, r1
    1e1e:	59 f4       	brne	.+22     	; 0x1e36 <reg_wizchip_spi_cbfunc+0x2c>
    1e20:	e6 e0       	ldi	r30, 0x06	; 6
    1e22:	f2 e0       	ldi	r31, 0x02	; 2
    1e24:	89 ee       	ldi	r24, 0xE9	; 233
    1e26:	9e e0       	ldi	r25, 0x0E	; 14
    1e28:	91 8b       	std	Z+17, r25	; 0x11
    1e2a:	80 8b       	std	Z+16, r24	; 0x10
    1e2c:	8b ee       	ldi	r24, 0xEB	; 235
    1e2e:	9e e0       	ldi	r25, 0x0E	; 14
    1e30:	93 8b       	std	Z+19, r25	; 0x13
    1e32:	82 8b       	std	Z+18, r24	; 0x12
    1e34:	08 95       	ret
    1e36:	e6 e0       	ldi	r30, 0x06	; 6
    1e38:	f2 e0       	ldi	r31, 0x02	; 2
    1e3a:	91 8b       	std	Z+17, r25	; 0x11
    1e3c:	80 8b       	std	Z+16, r24	; 0x10
    1e3e:	73 8b       	std	Z+19, r23	; 0x13
    1e40:	62 8b       	std	Z+18, r22	; 0x12
    1e42:	08 95       	ret

00001e44 <reg_wizchip_spiburst_cbfunc>:
    1e44:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <WIZCHIP>
    1e48:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <WIZCHIP+0x1>
    1e4c:	31 ff       	sbrs	r19, 1
    1e4e:	fa cf       	rjmp	.-12     	; 0x1e44 <reg_wizchip_spiburst_cbfunc>
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	19 f0       	breq	.+6      	; 0x1e5a <reg_wizchip_spiburst_cbfunc+0x16>
    1e54:	61 15       	cp	r22, r1
    1e56:	71 05       	cpc	r23, r1
    1e58:	59 f4       	brne	.+22     	; 0x1e70 <reg_wizchip_spiburst_cbfunc+0x2c>
    1e5a:	e6 e0       	ldi	r30, 0x06	; 6
    1e5c:	f2 e0       	ldi	r31, 0x02	; 2
    1e5e:	8c ee       	ldi	r24, 0xEC	; 236
    1e60:	9e e0       	ldi	r25, 0x0E	; 14
    1e62:	95 8b       	std	Z+21, r25	; 0x15
    1e64:	84 8b       	std	Z+20, r24	; 0x14
    1e66:	8d ee       	ldi	r24, 0xED	; 237
    1e68:	9e e0       	ldi	r25, 0x0E	; 14
    1e6a:	97 8b       	std	Z+23, r25	; 0x17
    1e6c:	86 8b       	std	Z+22, r24	; 0x16
    1e6e:	08 95       	ret
    1e70:	e6 e0       	ldi	r30, 0x06	; 6
    1e72:	f2 e0       	ldi	r31, 0x02	; 2
    1e74:	95 8b       	std	Z+21, r25	; 0x15
    1e76:	84 8b       	std	Z+20, r24	; 0x14
    1e78:	77 8b       	std	Z+23, r23	; 0x17
    1e7a:	66 8b       	std	Z+22, r22	; 0x16
    1e7c:	08 95       	ret

00001e7e <wizchip_sw_reset>:
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	62 97       	sbiw	r28, 0x12	; 18
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	26 e0       	ldi	r18, 0x06	; 6
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	ae 01       	movw	r20, r28
    1e98:	43 5f       	subi	r20, 0xF3	; 243
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	79 e0       	ldi	r23, 0x09	; 9
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	79 dc       	rcall	.-1806   	; 0x1798 <WIZCHIP_READ_BUF>
    1ea6:	24 e0       	ldi	r18, 0x04	; 4
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	ae 01       	movw	r20, r28
    1eac:	4f 5f       	subi	r20, 0xFF	; 255
    1eae:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	71 e0       	ldi	r23, 0x01	; 1
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	6f dc       	rcall	.-1826   	; 0x1798 <WIZCHIP_READ_BUF>
    1eba:	24 e0       	ldi	r18, 0x04	; 4
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	ae 01       	movw	r20, r28
    1ec0:	4b 5f       	subi	r20, 0xFB	; 251
    1ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	75 e0       	ldi	r23, 0x05	; 5
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	65 dc       	rcall	.-1846   	; 0x1798 <WIZCHIP_READ_BUF>
    1ece:	24 e0       	ldi	r18, 0x04	; 4
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	ae 01       	movw	r20, r28
    1ed4:	47 5f       	subi	r20, 0xF7	; 247
    1ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	7f e0       	ldi	r23, 0x0F	; 15
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	5b dc       	rcall	.-1866   	; 0x1798 <WIZCHIP_READ_BUF>
    1ee2:	40 e8       	ldi	r20, 0x80	; 128
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	70 e0       	ldi	r23, 0x00	; 0
    1ee8:	cb 01       	movw	r24, r22
    1eea:	e4 db       	rcall	.-2104   	; 0x16b4 <WIZCHIP_WRITE>
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	70 e0       	ldi	r23, 0x00	; 0
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	79 db       	rcall	.-2318   	; 0x15e6 <WIZCHIP_READ>
    1ef4:	26 e0       	ldi	r18, 0x06	; 6
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	ae 01       	movw	r20, r28
    1efa:	43 5f       	subi	r20, 0xF3	; 243
    1efc:	5f 4f       	sbci	r21, 0xFF	; 255
    1efe:	60 e0       	ldi	r22, 0x00	; 0
    1f00:	79 e0       	ldi	r23, 0x09	; 9
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	ca dc       	rcall	.-1644   	; 0x189c <WIZCHIP_WRITE_BUF>
    1f08:	24 e0       	ldi	r18, 0x04	; 4
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	ae 01       	movw	r20, r28
    1f0e:	4f 5f       	subi	r20, 0xFF	; 255
    1f10:	5f 4f       	sbci	r21, 0xFF	; 255
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	71 e0       	ldi	r23, 0x01	; 1
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	c0 dc       	rcall	.-1664   	; 0x189c <WIZCHIP_WRITE_BUF>
    1f1c:	24 e0       	ldi	r18, 0x04	; 4
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	ae 01       	movw	r20, r28
    1f22:	4b 5f       	subi	r20, 0xFB	; 251
    1f24:	5f 4f       	sbci	r21, 0xFF	; 255
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	75 e0       	ldi	r23, 0x05	; 5
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	b6 dc       	rcall	.-1684   	; 0x189c <WIZCHIP_WRITE_BUF>
    1f30:	24 e0       	ldi	r18, 0x04	; 4
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	ae 01       	movw	r20, r28
    1f36:	47 5f       	subi	r20, 0xF7	; 247
    1f38:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3a:	60 e0       	ldi	r22, 0x00	; 0
    1f3c:	7f e0       	ldi	r23, 0x0F	; 15
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	ac dc       	rcall	.-1704   	; 0x189c <WIZCHIP_WRITE_BUF>
    1f44:	62 96       	adiw	r28, 0x12	; 18
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	08 95       	ret

00001f56 <wizchip_init>:
    1f56:	ff 92       	push	r15
    1f58:	0f 93       	push	r16
    1f5a:	1f 93       	push	r17
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	ec 01       	movw	r28, r24
    1f62:	8b 01       	movw	r16, r22
    1f64:	8c df       	rcall	.-232    	; 0x1e7e <wizchip_sw_reset>
    1f66:	20 97       	sbiw	r28, 0x00	; 0
    1f68:	69 f4       	brne	.+26     	; 0x1f84 <wizchip_init+0x2e>
    1f6a:	30 c0       	rjmp	.+96     	; 0x1fcc <wizchip_init+0x76>
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e8 0f       	add	r30, r24
    1f70:	f1 1d       	adc	r31, r1
    1f72:	87 fd       	sbrc	r24, 7
    1f74:	fa 95       	dec	r31
    1f76:	20 81       	ld	r18, Z
    1f78:	92 0f       	add	r25, r18
    1f7a:	91 31       	cpi	r25, 0x11	; 17
    1f7c:	0c f0       	brlt	.+2      	; 0x1f80 <wizchip_init+0x2a>
    1f7e:	5b c0       	rjmp	.+182    	; 0x2036 <__EEPROM_REGION_LENGTH__+0x36>
    1f80:	8f 5f       	subi	r24, 0xFF	; 255
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <wizchip_init+0x32>
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	88 30       	cpi	r24, 0x08	; 8
    1f8a:	84 f3       	brlt	.-32     	; 0x1f6c <wizchip_init+0x16>
    1f8c:	f1 2c       	mov	r15, r1
    1f8e:	1b c0       	rjmp	.+54     	; 0x1fc6 <wizchip_init+0x70>
    1f90:	6f 2d       	mov	r22, r15
    1f92:	0f 2c       	mov	r0, r15
    1f94:	00 0c       	add	r0, r0
    1f96:	77 0b       	sbc	r23, r23
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e6 0f       	add	r30, r22
    1f9c:	f7 1f       	adc	r31, r23
    1f9e:	66 0f       	add	r22, r22
    1fa0:	77 1f       	adc	r23, r23
    1fa2:	66 0f       	add	r22, r22
    1fa4:	77 1f       	adc	r23, r23
    1fa6:	6f 5f       	subi	r22, 0xFF	; 255
    1fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1faa:	66 0f       	add	r22, r22
    1fac:	77 1f       	adc	r23, r23
    1fae:	66 0f       	add	r22, r22
    1fb0:	77 1f       	adc	r23, r23
    1fb2:	66 0f       	add	r22, r22
    1fb4:	77 1f       	adc	r23, r23
    1fb6:	71 5e       	subi	r23, 0xE1	; 225
    1fb8:	07 2e       	mov	r0, r23
    1fba:	00 0c       	add	r0, r0
    1fbc:	88 0b       	sbc	r24, r24
    1fbe:	99 0b       	sbc	r25, r25
    1fc0:	40 81       	ld	r20, Z
    1fc2:	78 db       	rcall	.-2320   	; 0x16b4 <WIZCHIP_WRITE>
    1fc4:	f3 94       	inc	r15
    1fc6:	87 e0       	ldi	r24, 0x07	; 7
    1fc8:	8f 15       	cp	r24, r15
    1fca:	14 f7       	brge	.-60     	; 0x1f90 <wizchip_init+0x3a>
    1fcc:	01 15       	cp	r16, r1
    1fce:	11 05       	cpc	r17, r1
    1fd0:	69 f4       	brne	.+26     	; 0x1fec <wizchip_init+0x96>
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	33 c0       	rjmp	.+102    	; 0x203c <__EEPROM_REGION_LENGTH__+0x3c>
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	e8 0f       	add	r30, r24
    1fda:	f1 1d       	adc	r31, r1
    1fdc:	87 fd       	sbrc	r24, 7
    1fde:	fa 95       	dec	r31
    1fe0:	20 81       	ld	r18, Z
    1fe2:	92 0f       	add	r25, r18
    1fe4:	91 31       	cpi	r25, 0x11	; 17
    1fe6:	4c f5       	brge	.+82     	; 0x203a <__EEPROM_REGION_LENGTH__+0x3a>
    1fe8:	8f 5f       	subi	r24, 0xFF	; 255
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <wizchip_init+0x9a>
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	88 30       	cpi	r24, 0x08	; 8
    1ff2:	8c f3       	brlt	.-30     	; 0x1fd6 <wizchip_init+0x80>
    1ff4:	c0 e0       	ldi	r28, 0x00	; 0
    1ff6:	1b c0       	rjmp	.+54     	; 0x202e <__EEPROM_REGION_LENGTH__+0x2e>
    1ff8:	6c 2f       	mov	r22, r28
    1ffa:	0c 2e       	mov	r0, r28
    1ffc:	00 0c       	add	r0, r0
    1ffe:	77 0b       	sbc	r23, r23
    2000:	f8 01       	movw	r30, r16
    2002:	e6 0f       	add	r30, r22
    2004:	f7 1f       	adc	r31, r23
    2006:	66 0f       	add	r22, r22
    2008:	77 1f       	adc	r23, r23
    200a:	66 0f       	add	r22, r22
    200c:	77 1f       	adc	r23, r23
    200e:	6f 5f       	subi	r22, 0xFF	; 255
    2010:	7f 4f       	sbci	r23, 0xFF	; 255
    2012:	66 0f       	add	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	66 0f       	add	r22, r22
    2018:	77 1f       	adc	r23, r23
    201a:	66 0f       	add	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	72 5e       	subi	r23, 0xE2	; 226
    2020:	07 2e       	mov	r0, r23
    2022:	00 0c       	add	r0, r0
    2024:	88 0b       	sbc	r24, r24
    2026:	99 0b       	sbc	r25, r25
    2028:	40 81       	ld	r20, Z
    202a:	44 db       	rcall	.-2424   	; 0x16b4 <WIZCHIP_WRITE>
    202c:	cf 5f       	subi	r28, 0xFF	; 255
    202e:	c8 30       	cpi	r28, 0x08	; 8
    2030:	1c f3       	brlt	.-58     	; 0x1ff8 <wizchip_init+0xa2>
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	03 c0       	rjmp	.+6      	; 0x203c <__EEPROM_REGION_LENGTH__+0x3c>
    2036:	8f ef       	ldi	r24, 0xFF	; 255
    2038:	01 c0       	rjmp	.+2      	; 0x203c <__EEPROM_REGION_LENGTH__+0x3c>
    203a:	8f ef       	ldi	r24, 0xFF	; 255
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	ff 90       	pop	r15
    2046:	08 95       	ret

00002048 <wizchip_clrinterrupt>:
    2048:	cf 93       	push	r28
    204a:	c9 2f       	mov	r28, r25
    204c:	48 2f       	mov	r20, r24
    204e:	40 7f       	andi	r20, 0xF0	; 240
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	75 e1       	ldi	r23, 0x15	; 21
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	2d db       	rcall	.-2470   	; 0x16b4 <WIZCHIP_WRITE>
    205a:	4c 2f       	mov	r20, r28
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	77 e1       	ldi	r23, 0x17	; 23
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	27 db       	rcall	.-2482   	; 0x16b4 <WIZCHIP_WRITE>
    2066:	cf 91       	pop	r28
    2068:	08 95       	ret

0000206a <wizchip_getinterrupt>:
    206a:	cf 93       	push	r28
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	75 e1       	ldi	r23, 0x15	; 21
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	b8 da       	rcall	.-2704   	; 0x15e6 <WIZCHIP_READ>
    2076:	c8 2f       	mov	r28, r24
    2078:	c0 7f       	andi	r28, 0xF0	; 240
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	77 e1       	ldi	r23, 0x17	; 23
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	b1 da       	rcall	.-2718   	; 0x15e6 <WIZCHIP_READ>
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	98 2f       	mov	r25, r24
    2088:	88 27       	eor	r24, r24
    208a:	8c 0f       	add	r24, r28
    208c:	91 1d       	adc	r25, r1
    208e:	cf 91       	pop	r28
    2090:	08 95       	ret

00002092 <wizchip_setinterruptmask>:
    2092:	cf 93       	push	r28
    2094:	c9 2f       	mov	r28, r25
    2096:	48 2f       	mov	r20, r24
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	76 e1       	ldi	r23, 0x16	; 22
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	09 db       	rcall	.-2542   	; 0x16b4 <WIZCHIP_WRITE>
    20a2:	4c 2f       	mov	r20, r28
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	78 e1       	ldi	r23, 0x18	; 24
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	03 db       	rcall	.-2554   	; 0x16b4 <WIZCHIP_WRITE>
    20ae:	cf 91       	pop	r28
    20b0:	08 95       	ret

000020b2 <wizchip_getinterruptmask>:
    20b2:	cf 93       	push	r28
    20b4:	60 e0       	ldi	r22, 0x00	; 0
    20b6:	76 e1       	ldi	r23, 0x16	; 22
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	94 da       	rcall	.-2776   	; 0x15e6 <WIZCHIP_READ>
    20be:	c8 2f       	mov	r28, r24
    20c0:	60 e0       	ldi	r22, 0x00	; 0
    20c2:	78 e1       	ldi	r23, 0x18	; 24
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	8e da       	rcall	.-2788   	; 0x15e6 <WIZCHIP_READ>
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	98 2f       	mov	r25, r24
    20ce:	88 27       	eor	r24, r24
    20d0:	8c 0f       	add	r24, r28
    20d2:	91 1d       	adc	r25, r1
    20d4:	cf 91       	pop	r28
    20d6:	08 95       	ret

000020d8 <wizphy_getphylink>:
    20d8:	60 e0       	ldi	r22, 0x00	; 0
    20da:	7e e2       	ldi	r23, 0x2E	; 46
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	82 da       	rcall	.-2812   	; 0x15e6 <WIZCHIP_READ>
    20e2:	80 fd       	sbrc	r24, 0
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <wizphy_getphylink+0x12>
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	08 95       	ret
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	08 95       	ret

000020ee <wizphy_getphypmode>:
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	7e e2       	ldi	r23, 0x2E	; 46
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	77 da       	rcall	.-2834   	; 0x15e6 <WIZCHIP_READ>
    20f8:	88 73       	andi	r24, 0x38	; 56
    20fa:	80 33       	cpi	r24, 0x30	; 48
    20fc:	11 f4       	brne	.+4      	; 0x2102 <wizphy_getphypmode+0x14>
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	08 95       	ret
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	08 95       	ret

00002106 <wizphy_reset>:
    2106:	60 e0       	ldi	r22, 0x00	; 0
    2108:	7e e2       	ldi	r23, 0x2E	; 46
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	6b da       	rcall	.-2858   	; 0x15e6 <WIZCHIP_READ>
    2110:	48 2f       	mov	r20, r24
    2112:	4f 77       	andi	r20, 0x7F	; 127
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	7e e2       	ldi	r23, 0x2E	; 46
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	cb da       	rcall	.-2666   	; 0x16b4 <WIZCHIP_WRITE>
    211e:	60 e0       	ldi	r22, 0x00	; 0
    2120:	7e e2       	ldi	r23, 0x2E	; 46
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	5f da       	rcall	.-2882   	; 0x15e6 <WIZCHIP_READ>
    2128:	48 2f       	mov	r20, r24
    212a:	40 68       	ori	r20, 0x80	; 128
    212c:	60 e0       	ldi	r22, 0x00	; 0
    212e:	7e e2       	ldi	r23, 0x2E	; 46
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	bf ca       	rjmp	.-2690   	; 0x16b4 <WIZCHIP_WRITE>
    2136:	08 95       	ret

00002138 <wizphy_setphyconf>:
    2138:	fc 01       	movw	r30, r24
    213a:	80 81       	ld	r24, Z
    213c:	81 30       	cpi	r24, 0x01	; 1
    213e:	11 f4       	brne	.+4      	; 0x2144 <wizphy_setphyconf+0xc>
    2140:	40 e4       	ldi	r20, 0x40	; 64
    2142:	01 c0       	rjmp	.+2      	; 0x2146 <wizphy_setphyconf+0xe>
    2144:	40 e0       	ldi	r20, 0x00	; 0
    2146:	81 81       	ldd	r24, Z+1	; 0x01
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	11 f4       	brne	.+4      	; 0x2150 <wizphy_setphyconf+0x18>
    214c:	48 63       	ori	r20, 0x38	; 56
    214e:	0e c0       	rjmp	.+28     	; 0x216c <wizphy_setphyconf+0x34>
    2150:	83 81       	ldd	r24, Z+3	; 0x03
    2152:	81 30       	cpi	r24, 0x01	; 1
    2154:	39 f4       	brne	.+14     	; 0x2164 <wizphy_setphyconf+0x2c>
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	81 30       	cpi	r24, 0x01	; 1
    215a:	11 f4       	brne	.+4      	; 0x2160 <wizphy_setphyconf+0x28>
    215c:	48 61       	ori	r20, 0x18	; 24
    215e:	06 c0       	rjmp	.+12     	; 0x216c <wizphy_setphyconf+0x34>
    2160:	48 60       	ori	r20, 0x08	; 8
    2162:	04 c0       	rjmp	.+8      	; 0x216c <wizphy_setphyconf+0x34>
    2164:	82 81       	ldd	r24, Z+2	; 0x02
    2166:	81 30       	cpi	r24, 0x01	; 1
    2168:	09 f4       	brne	.+2      	; 0x216c <wizphy_setphyconf+0x34>
    216a:	40 61       	ori	r20, 0x10	; 16
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	7e e2       	ldi	r23, 0x2E	; 46
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9f da       	rcall	.-2754   	; 0x16b4 <WIZCHIP_WRITE>
    2176:	c7 cf       	rjmp	.-114    	; 0x2106 <wizphy_reset>
    2178:	08 95       	ret

0000217a <wizphy_getphyconf>:
    217a:	cf 93       	push	r28
    217c:	df 93       	push	r29
    217e:	ec 01       	movw	r28, r24
    2180:	60 e0       	ldi	r22, 0x00	; 0
    2182:	7e e2       	ldi	r23, 0x2E	; 46
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	2e da       	rcall	.-2980   	; 0x15e6 <WIZCHIP_READ>
    218a:	86 fb       	bst	r24, 6
    218c:	99 27       	eor	r25, r25
    218e:	90 f9       	bld	r25, 0
    2190:	98 83       	st	Y, r25
    2192:	88 73       	andi	r24, 0x38	; 56
    2194:	80 32       	cpi	r24, 0x20	; 32
    2196:	11 f0       	breq	.+4      	; 0x219c <wizphy_getphyconf+0x22>
    2198:	88 33       	cpi	r24, 0x38	; 56
    219a:	19 f4       	brne	.+6      	; 0x21a2 <wizphy_getphyconf+0x28>
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	99 83       	std	Y+1, r25	; 0x01
    21a0:	01 c0       	rjmp	.+2      	; 0x21a4 <wizphy_getphyconf+0x2a>
    21a2:	19 82       	std	Y+1, r1	; 0x01
    21a4:	88 31       	cpi	r24, 0x18	; 24
    21a6:	21 f0       	breq	.+8      	; 0x21b0 <wizphy_getphyconf+0x36>
    21a8:	80 32       	cpi	r24, 0x20	; 32
    21aa:	11 f0       	breq	.+4      	; 0x21b0 <wizphy_getphyconf+0x36>
    21ac:	80 31       	cpi	r24, 0x10	; 16
    21ae:	19 f4       	brne	.+6      	; 0x21b6 <wizphy_getphyconf+0x3c>
    21b0:	91 e0       	ldi	r25, 0x01	; 1
    21b2:	9a 83       	std	Y+2, r25	; 0x02
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <wizphy_getphyconf+0x3e>
    21b6:	1a 82       	std	Y+2, r1	; 0x02
    21b8:	88 31       	cpi	r24, 0x18	; 24
    21ba:	21 f0       	breq	.+8      	; 0x21c4 <wizphy_getphyconf+0x4a>
    21bc:	80 32       	cpi	r24, 0x20	; 32
    21be:	11 f0       	breq	.+4      	; 0x21c4 <wizphy_getphyconf+0x4a>
    21c0:	88 30       	cpi	r24, 0x08	; 8
    21c2:	19 f4       	brne	.+6      	; 0x21ca <wizphy_getphyconf+0x50>
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	8b 83       	std	Y+3, r24	; 0x03
    21c8:	01 c0       	rjmp	.+2      	; 0x21cc <wizphy_getphyconf+0x52>
    21ca:	1b 82       	std	Y+3, r1	; 0x03
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	08 95       	ret

000021d2 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
    21d2:	cf 93       	push	r28
    21d4:	c8 2f       	mov	r28, r24
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	7e e2       	ldi	r23, 0x2E	; 46
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	03 da       	rcall	.-3066   	; 0x15e6 <WIZCHIP_READ>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    21e0:	86 ff       	sbrs	r24, 6
    21e2:	1d c0       	rjmp	.+58     	; 0x221e <wizphy_setphypmode+0x4c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
    21e4:	87 7c       	andi	r24, 0xC7	; 199
   if( pmode == PHY_POWER_DOWN)
    21e6:	c1 30       	cpi	r28, 0x01	; 1
    21e8:	19 f4       	brne	.+6      	; 0x21f0 <wizphy_setphypmode+0x1e>
      tmp |= PHYCFGR_OPMDC_PDOWN;
    21ea:	48 2f       	mov	r20, r24
    21ec:	40 63       	ori	r20, 0x30	; 48
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <wizphy_setphypmode+0x22>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
    21f0:	48 2f       	mov	r20, r24
    21f2:	48 63       	ori	r20, 0x38	; 56
   setPHYCFGR(tmp);
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	7e e2       	ldi	r23, 0x2E	; 46
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
   wizphy_reset();
    21fc:	5b da       	rcall	.-2890   	; 0x16b4 <WIZCHIP_WRITE>
    21fe:	83 df       	rcall	.-250    	; 0x2106 <wizphy_reset>
   tmp = getPHYCFGR();
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	7e e2       	ldi	r23, 0x2E	; 46
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	ee d9       	rcall	.-3108   	; 0x15e6 <WIZCHIP_READ>
   if( pmode == PHY_POWER_DOWN)
    220a:	c1 30       	cpi	r28, 0x01	; 1
    220c:	21 f4       	brne	.+8      	; 0x2216 <wizphy_setphypmode+0x44>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    220e:	80 73       	andi	r24, 0x30	; 48
    2210:	41 f4       	brne	.+16     	; 0x2222 <wizphy_setphypmode+0x50>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
   }
   return -1;
    2212:	8f ef       	ldi	r24, 0xFF	; 255
    2214:	09 c0       	rjmp	.+18     	; 0x2228 <wizphy_setphypmode+0x56>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    2216:	88 73       	andi	r24, 0x38	; 56
    2218:	31 f4       	brne	.+12     	; 0x2226 <wizphy_setphypmode+0x54>
   }
   return -1;
    221a:	8f ef       	ldi	r24, 0xFF	; 255
    221c:	05 c0       	rjmp	.+10     	; 0x2228 <wizphy_setphypmode+0x56>

int8_t wizphy_setphypmode(uint8_t pmode)
{
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    221e:	8f ef       	ldi	r24, 0xFF	; 255
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <wizphy_setphypmode+0x56>
   setPHYCFGR(tmp);
   wizphy_reset();
   tmp = getPHYCFGR();
   if( pmode == PHY_POWER_DOWN)
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	01 c0       	rjmp	.+2      	; 0x2228 <wizphy_setphypmode+0x56>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    2226:	80 e0       	ldi	r24, 0x00	; 0
   }
   return -1;
}
    2228:	cf 91       	pop	r28
    222a:	08 95       	ret

0000222c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
    222c:	0f 93       	push	r16
    222e:	1f 93       	push	r17
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
    2234:	00 e0       	ldi	r16, 0x00	; 0
    2236:	10 e0       	ldi	r17, 0x00	; 0
    2238:	98 01       	movw	r18, r16
   switch(cwtype)
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	80 31       	cpi	r24, 0x10	; 16
    223e:	91 05       	cpc	r25, r1
    2240:	40 f4       	brcc	.+16     	; 0x2252 <ctlwizchip+0x26>
    2242:	eb 01       	movw	r28, r22
    2244:	fc 01       	movw	r30, r24
    2246:	88 27       	eor	r24, r24
    2248:	e6 56       	subi	r30, 0x66	; 102
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	8f 4f       	sbci	r24, 0xFF	; 255
    224e:	0c 94 57 24 	jmp	0x48ae	; 0x48ae <__tablejump2__>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
    2252:	8f ef       	ldi	r24, 0xFF	; 255
    2254:	71 c0       	rjmp	.+226    	; 0x2338 <ctlwizchip+0x10c>
#endif
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
    2256:	13 de       	rcall	.-986    	; 0x1e7e <wizchip_sw_reset>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    2258:	80 e0       	ldi	r24, 0x00	; 0
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
         break;
    225a:	6e c0       	rjmp	.+220    	; 0x2338 <ctlwizchip+0x10c>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
    225c:	cd 2b       	or	r28, r29
    225e:	21 f0       	breq	.+8      	; 0x2268 <ctlwizchip+0x3c>
         {
            ptmp[0] = (uint8_t*)arg;
    2260:	8b 01       	movw	r16, r22
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
    2262:	9b 01       	movw	r18, r22
    2264:	28 5f       	subi	r18, 0xF8	; 248
    2266:	3f 4f       	sbci	r19, 0xFF	; 255
         }
         return wizchip_init(ptmp[0], ptmp[1]);
    2268:	b9 01       	movw	r22, r18
    226a:	c8 01       	movw	r24, r16
    226c:	74 de       	rcall	.-792    	; 0x1f56 <wizchip_init>
    226e:	64 c0       	rjmp	.+200    	; 0x2338 <ctlwizchip+0x10c>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
    2270:	88 81       	ld	r24, Y
    2272:	99 81       	ldd	r25, Y+1	; 0x01
    2274:	e9 de       	rcall	.-558    	; 0x2048 <wizchip_clrinterrupt>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    2276:	80 e0       	ldi	r24, 0x00	; 0
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
         }
         return wizchip_init(ptmp[0], ptmp[1]);
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
         break;
    2278:	5f c0       	rjmp	.+190    	; 0x2338 <ctlwizchip+0x10c>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
    227a:	f7 de       	rcall	.-530    	; 0x206a <wizchip_getinterrupt>
    227c:	99 83       	std	Y+1, r25	; 0x01
    227e:	88 83       	st	Y, r24
    2280:	80 e0       	ldi	r24, 0x00	; 0
         break;
    2282:	5a c0       	rjmp	.+180    	; 0x2338 <ctlwizchip+0x10c>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
    2284:	88 81       	ld	r24, Y
    2286:	99 81       	ldd	r25, Y+1	; 0x01
    2288:	04 df       	rcall	.-504    	; 0x2092 <wizchip_setinterruptmask>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    228a:	80 e0       	ldi	r24, 0x00	; 0
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
         break;
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
         break;         
    228c:	55 c0       	rjmp	.+170    	; 0x2338 <ctlwizchip+0x10c>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
    228e:	11 df       	rcall	.-478    	; 0x20b2 <wizchip_getinterruptmask>
    2290:	99 83       	std	Y+1, r25	; 0x01
    2292:	88 83       	st	Y, r24
    2294:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    2296:	50 c0       	rjmp	.+160    	; 0x2338 <ctlwizchip+0x10c>
         break;
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
    2298:	49 81       	ldd	r20, Y+1	; 0x01
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	73 e1       	ldi	r23, 0x13	; 19
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	08 da       	rcall	.-3056   	; 0x16b4 <WIZCHIP_WRITE>
    22a4:	48 81       	ld	r20, Y
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	74 e1       	ldi	r23, 0x14	; 20
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	02 da       	rcall	.-3068   	; 0x16b4 <WIZCHIP_WRITE>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    22b0:	80 e0       	ldi	r24, 0x00	; 0
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
         break;
    22b2:	42 c0       	rjmp	.+132    	; 0x2338 <ctlwizchip+0x10c>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	73 e1       	ldi	r23, 0x13	; 19
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	94 d9       	rcall	.-3288   	; 0x15e6 <WIZCHIP_READ>
    22be:	08 2f       	mov	r16, r24
    22c0:	10 e0       	ldi	r17, 0x00	; 0
    22c2:	10 2f       	mov	r17, r16
    22c4:	00 27       	eor	r16, r16
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	74 e1       	ldi	r23, 0x14	; 20
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	8b d9       	rcall	.-3306   	; 0x15e6 <WIZCHIP_READ>
    22d0:	08 0f       	add	r16, r24
    22d2:	11 1d       	adc	r17, r1
    22d4:	19 83       	std	Y+1, r17	; 0x01
    22d6:	08 83       	st	Y, r16
    22d8:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    22da:	2e c0       	rjmp	.+92     	; 0x2338 <ctlwizchip+0x10c>
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
         break;
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
    22dc:	e6 e0       	ldi	r30, 0x06	; 6
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
    22de:	f2 e0       	ldi	r31, 0x02	; 2
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	88 83       	st	Y, r24
    22e4:	83 81       	ldd	r24, Z+3	; 0x03
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
    22e6:	89 83       	std	Y+1, r24	; 0x01
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
    22e8:	84 81       	ldd	r24, Z+4	; 0x04
    22ea:	8a 83       	std	Y+2, r24	; 0x02
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
    22ec:	85 81       	ldd	r24, Z+5	; 0x05
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
    22ee:	8b 83       	std	Y+3, r24	; 0x03
    22f0:	86 81       	ldd	r24, Z+6	; 0x06
         ((uint8_t*)arg)[5] = 0;
    22f2:	8c 83       	std	Y+4, r24	; 0x04
         break;
    22f4:	1d 82       	std	Y+5, r1	; 0x05
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	1f c0       	rjmp	.+62     	; 0x2338 <ctlwizchip+0x10c>
         break;
    22fa:	05 df       	rcall	.-502    	; 0x2106 <wizphy_reset>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	1c c0       	rjmp	.+56     	; 0x2338 <ctlwizchip+0x10c>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    2300:	cb 01       	movw	r24, r22
      case CW_RESET_PHY:
         wizphy_reset();
         break;
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
         break;
    2302:	1a df       	rcall	.-460    	; 0x2138 <wizphy_setphyconf>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	18 c0       	rjmp	.+48     	; 0x2338 <ctlwizchip+0x10c>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    2308:	cb 01       	movw	r24, r22
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
         break;
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
         break;
    230a:	37 df       	rcall	.-402    	; 0x217a <wizphy_getphyconf>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	14 c0       	rjmp	.+40     	; 0x2338 <ctlwizchip+0x10c>
    2310:	88 81       	ld	r24, Y
    2312:	5f df       	rcall	.-322    	; 0x21d2 <wizphy_setphypmode>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
    2314:	11 c0       	rjmp	.+34     	; 0x2338 <ctlwizchip+0x10c>
    2316:	eb de       	rcall	.-554    	; 0x20ee <wizphy_getphypmode>
         if((int8_t)tmp == -1) return -1;
    2318:	8f 3f       	cpi	r24, 0xFF	; 255
    231a:	59 f0       	breq	.+22     	; 0x2332 <ctlwizchip+0x106>
         *(uint8_t*)arg = tmp;
    231c:	88 83       	st	Y, r24
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    231e:	80 e0       	ldi	r24, 0x00	; 0
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
    2320:	0b c0       	rjmp	.+22     	; 0x2338 <ctlwizchip+0x10c>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
    2322:	da de       	rcall	.-588    	; 0x20d8 <wizphy_getphylink>
    2324:	8f 3f       	cpi	r24, 0xFF	; 255
         if((int8_t)tmp == -1) return -1;
    2326:	39 f0       	breq	.+14     	; 0x2336 <ctlwizchip+0x10a>
    2328:	88 83       	st	Y, r24
         *(uint8_t*)arg = tmp;
    232a:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    232c:	05 c0       	rjmp	.+10     	; 0x2338 <ctlwizchip+0x10c>
         break;
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
    232e:	80 e0       	ldi	r24, 0x00	; 0
   #endif      
      default:
         return -1;
   }
   return 0;
    2330:	03 c0       	rjmp	.+6      	; 0x2338 <ctlwizchip+0x10c>
    2332:	8f ef       	ldi	r24, 0xFF	; 255
         return wizphy_setphypmode(*(uint8_t*)arg);
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
         if((int8_t)tmp == -1) return -1;
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <ctlwizchip+0x10c>
    2336:	8f ef       	ldi	r24, 0xFF	; 255
         *(uint8_t*)arg = tmp;
         break;
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
         if((int8_t)tmp == -1) return -1;
    2338:	df 91       	pop	r29
   #endif      
      default:
         return -1;
   }
   return 0;
}
    233a:	cf 91       	pop	r28
    233c:	1f 91       	pop	r17
    233e:	0f 91       	pop	r16
    2340:	08 95       	ret

00002342 <wizchip_setnetinfo>:
    2342:	cf 93       	push	r28
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    2344:	df 93       	push	r29
    2346:	ec 01       	movw	r28, r24
   setSHAR(pnetinfo->mac);
    2348:	26 e0       	ldi	r18, 0x06	; 6
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	ac 01       	movw	r20, r24
    234e:	60 e0       	ldi	r22, 0x00	; 0
    2350:	79 e0       	ldi	r23, 0x09	; 9
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a2 da       	rcall	.-2748   	; 0x189c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
    2358:	ae 01       	movw	r20, r28
    235a:	42 5f       	subi	r20, 0xF2	; 242
    235c:	5f 4f       	sbci	r21, 0xFF	; 255
    235e:	24 e0       	ldi	r18, 0x04	; 4
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	71 e0       	ldi	r23, 0x01	; 1
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	98 da       	rcall	.-2768   	; 0x189c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
    236c:	ae 01       	movw	r20, r28
    236e:	46 5f       	subi	r20, 0xF6	; 246
    2370:	5f 4f       	sbci	r21, 0xFF	; 255
    2372:	24 e0       	ldi	r18, 0x04	; 4
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	60 e0       	ldi	r22, 0x00	; 0
    2378:	75 e0       	ldi	r23, 0x05	; 5
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	8e da       	rcall	.-2788   	; 0x189c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
    2380:	ae 01       	movw	r20, r28
    2382:	4a 5f       	subi	r20, 0xFA	; 250
    2384:	5f 4f       	sbci	r21, 0xFF	; 255
    2386:	24 e0       	ldi	r18, 0x04	; 4
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	60 e0       	ldi	r22, 0x00	; 0
    238c:	7f e0       	ldi	r23, 0x0F	; 15
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	84 da       	rcall	.-2808   	; 0x189c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
    2394:	8a 89       	ldd	r24, Y+18	; 0x12
    2396:	ed e1       	ldi	r30, 0x1D	; 29
    2398:	f4 e0       	ldi	r31, 0x04	; 4
    239a:	80 83       	st	Z, r24
   _DNS_[1] = pnetinfo->dns[1];
    239c:	8b 89       	ldd	r24, Y+19	; 0x13
    239e:	81 83       	std	Z+1, r24	; 0x01
   _DNS_[2] = pnetinfo->dns[2];
    23a0:	8c 89       	ldd	r24, Y+20	; 0x14
    23a2:	82 83       	std	Z+2, r24	; 0x02
   _DNS_[3] = pnetinfo->dns[3];
    23a4:	8d 89       	ldd	r24, Y+21	; 0x15
    23a6:	83 83       	std	Z+3, r24	; 0x03
   _DHCP_   = pnetinfo->dhcp;
    23a8:	8e 89       	ldd	r24, Y+22	; 0x16
    23aa:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <_DHCP_>
}
    23ae:	df 91       	pop	r29
    23b0:	cf 91       	pop	r28
    23b2:	08 95       	ret

000023b4 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
    23b4:	cf 93       	push	r28
    23b6:	df 93       	push	r29
    23b8:	ec 01       	movw	r28, r24
   getSHAR(pnetinfo->mac);
    23ba:	26 e0       	ldi	r18, 0x06	; 6
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	ac 01       	movw	r20, r24
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	79 e0       	ldi	r23, 0x09	; 9
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	e7 d9       	rcall	.-3122   	; 0x1798 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
    23ca:	ae 01       	movw	r20, r28
    23cc:	42 5f       	subi	r20, 0xF2	; 242
    23ce:	5f 4f       	sbci	r21, 0xFF	; 255
    23d0:	24 e0       	ldi	r18, 0x04	; 4
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	71 e0       	ldi	r23, 0x01	; 1
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	dd d9       	rcall	.-3142   	; 0x1798 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
    23de:	ae 01       	movw	r20, r28
    23e0:	46 5f       	subi	r20, 0xF6	; 246
    23e2:	5f 4f       	sbci	r21, 0xFF	; 255
    23e4:	24 e0       	ldi	r18, 0x04	; 4
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	60 e0       	ldi	r22, 0x00	; 0
    23ea:	75 e0       	ldi	r23, 0x05	; 5
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	d3 d9       	rcall	.-3162   	; 0x1798 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
    23f2:	ae 01       	movw	r20, r28
    23f4:	4a 5f       	subi	r20, 0xFA	; 250
    23f6:	5f 4f       	sbci	r21, 0xFF	; 255
    23f8:	24 e0       	ldi	r18, 0x04	; 4
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	60 e0       	ldi	r22, 0x00	; 0
    23fe:	7f e0       	ldi	r23, 0x0F	; 15
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	c9 d9       	rcall	.-3182   	; 0x1798 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
    2406:	ed e1       	ldi	r30, 0x1D	; 29
    2408:	f4 e0       	ldi	r31, 0x04	; 4
    240a:	80 81       	ld	r24, Z
    240c:	8a 8b       	std	Y+18, r24	; 0x12
   pnetinfo->dns[1]= _DNS_[1];
    240e:	81 81       	ldd	r24, Z+1	; 0x01
    2410:	8b 8b       	std	Y+19, r24	; 0x13
   pnetinfo->dns[2]= _DNS_[2];
    2412:	82 81       	ldd	r24, Z+2	; 0x02
    2414:	8c 8b       	std	Y+20, r24	; 0x14
   pnetinfo->dns[3]= _DNS_[3];
    2416:	83 81       	ldd	r24, Z+3	; 0x03
    2418:	8d 8b       	std	Y+21, r24	; 0x15
   pnetinfo->dhcp  = _DHCP_;
    241a:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <_DHCP_>
    241e:	8e 8b       	std	Y+22, r24	; 0x16
}
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	08 95       	ret

00002426 <appDataConf>:
	//appUartBufferPtr = 0;
	appDataReqBusy = true;
}
void appDataConf(NWK_DataReq_t *req){
		
		appDataReqBusy = false;
    2426:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <appDataReqBusy>
    242a:	08 95       	ret

0000242c <appTimerHandler>:
	}

	SYS_TimerStop(&appTimer);
	SYS_TimerStart(&appTimer);
}
void appTimerHandler(SYS_Timer_t *timer){
    242c:	08 95       	ret

0000242e <appDataInd_ACK>:
	
	
	return true;
}
bool appDataInd_ACK(NWK_DataInd_t *ind)
{
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; i < ind->size; i++)
    2436:	c0 e0       	ldi	r28, 0x00	; 0
    2438:	0a c0       	rjmp	.+20     	; 0x244e <appDataInd_ACK+0x20>
		HAL_UartWriteByte(ind->data[i]);
    243a:	d8 01       	movw	r26, r16
    243c:	17 96       	adiw	r26, 0x07	; 7
    243e:	ed 91       	ld	r30, X+
    2440:	fc 91       	ld	r31, X
    2442:	18 97       	sbiw	r26, 0x08	; 8
    2444:	ec 0f       	add	r30, r28
    2446:	f1 1d       	adc	r31, r1
    2448:	80 81       	ld	r24, Z
    244a:	16 d3       	rcall	.+1580   	; 0x2a78 <HAL_UartWriteByte>
	
	return true;
}
bool appDataInd_ACK(NWK_DataInd_t *ind)
{
	for (uint8_t i = 0; i < ind->size; i++)
    244c:	cf 5f       	subi	r28, 0xFF	; 255
    244e:	f8 01       	movw	r30, r16
    2450:	81 85       	ldd	r24, Z+9	; 0x09
    2452:	c8 17       	cp	r28, r24
    2454:	90 f3       	brcs	.-28     	; 0x243a <appDataInd_ACK+0xc>
		HAL_UartWriteByte(ind->data[i]);

	return true;
}
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	cf 91       	pop	r28
    245a:	1f 91       	pop	r17
    245c:	0f 91       	pop	r16
    245e:	08 95       	ret

00002460 <sendOK>:
static uint8_t appDataReqBuffer[APP_BUFFER_SIZE];
static uint8_t appUartBuffer[APP_BUFFER_SIZE];
static uint8_t appUartBufferPtr = 0;

void sendOK(int16_t odesilatel){
	if (appDataReqBusy)
    2460:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <appDataReqBusy>
    2464:	21 11       	cpse	r18, r1
    2466:	20 c0       	rjmp	.+64     	; 0x24a8 <sendOK+0x48>
	return;
	static char text[]="OK\n\r";
	
	memcpy(appDataReqBuffer, text,sizeof(appDataReqBuffer)-1);
    2468:	2c e6       	ldi	r18, 0x6C	; 108
    246a:	ee e1       	ldi	r30, 0x1E	; 30
    246c:	f2 e0       	ldi	r31, 0x02	; 2
    246e:	a2 e2       	ldi	r26, 0x22	; 34
    2470:	b4 e0       	ldi	r27, 0x04	; 4
    2472:	01 90       	ld	r0, Z+
    2474:	0d 92       	st	X+, r0
    2476:	2a 95       	dec	r18
    2478:	e1 f7       	brne	.-8      	; 0x2472 <sendOK+0x12>
	

	appDataReq.dstAddr = odesilatel;
    247a:	e0 e9       	ldi	r30, 0x90	; 144
    247c:	f4 e0       	ldi	r31, 0x04	; 4
    247e:	96 83       	std	Z+6, r25	; 0x06
    2480:	85 83       	std	Z+5, r24	; 0x05
	appDataReq.dstEndpoint = APP_ENDPOINT_ACK;
    2482:	82 e0       	ldi	r24, 0x02	; 2
    2484:	87 83       	std	Z+7, r24	; 0x07
	appDataReq.srcEndpoint = APP_ENDPOINT_ACK;
    2486:	80 87       	std	Z+8, r24	; 0x08
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    2488:	81 87       	std	Z+9, r24	; 0x09
	appDataReq.data = appDataReqBuffer;
    248a:	82 e2       	ldi	r24, 0x22	; 34
    248c:	94 e0       	ldi	r25, 0x04	; 4
    248e:	93 87       	std	Z+11, r25	; 0x0b
    2490:	82 87       	std	Z+10, r24	; 0x0a
	appDataReq.size = sizeof(text)-1;
    2492:	84 e0       	ldi	r24, 0x04	; 4
    2494:	84 87       	std	Z+12, r24	; 0x0c
	appDataReq.confirm = appDataConf;
    2496:	83 e1       	ldi	r24, 0x13	; 19
    2498:	92 e1       	ldi	r25, 0x12	; 18
    249a:	96 87       	std	Z+14, r25	; 0x0e
    249c:	85 87       	std	Z+13, r24	; 0x0d
	NWK_DataReq(&appDataReq);
    249e:	cf 01       	movw	r24, r30
    24a0:	d2 d4       	rcall	.+2468   	; 0x2e46 <NWK_DataReq>

	//appUartBufferPtr = 0;
	appDataReqBusy = true;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <appDataReqBusy>
    24a8:	08 95       	ret

000024aa <appDataInd>:
}
void appTimerHandler(SYS_Timer_t *timer){

	(void)timer;
}
bool appDataInd(NWK_DataInd_t *ind){
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	8c 01       	movw	r16, r24
	//char* temp;
	for (uint8_t i = 0; i < ind->size; i++){
    24b2:	c0 e0       	ldi	r28, 0x00	; 0
    24b4:	0c c0       	rjmp	.+24     	; 0x24ce <appDataInd+0x24>
		printf("%c",ind->data[i]);
    24b6:	d8 01       	movw	r26, r16
    24b8:	17 96       	adiw	r26, 0x07	; 7
    24ba:	ed 91       	ld	r30, X+
    24bc:	fc 91       	ld	r31, X
    24be:	18 97       	sbiw	r26, 0x08	; 8
    24c0:	ec 0f       	add	r30, r28
    24c2:	f1 1d       	adc	r31, r1
    24c4:	80 81       	ld	r24, Z
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	0e 94 21 26 	call	0x4c42	; 0x4c42 <putchar>

	(void)timer;
}
bool appDataInd(NWK_DataInd_t *ind){
	//char* temp;
	for (uint8_t i = 0; i < ind->size; i++){
    24cc:	cf 5f       	subi	r28, 0xFF	; 255
    24ce:	f8 01       	movw	r30, r16
    24d0:	81 85       	ldd	r24, Z+9	; 0x09
    24d2:	c8 17       	cp	r28, r24
    24d4:	80 f3       	brcs	.-32     	; 0x24b6 <appDataInd+0xc>
		printf("%c",ind->data[i]);
		
	}
	//printf(temp);
	sendOK(ind->srcAddr);
    24d6:	80 81       	ld	r24, Z
    24d8:	91 81       	ldd	r25, Z+1	; 0x01
    24da:	c2 df       	rcall	.-124    	; 0x2460 <sendOK>
	
	
	return true;
}
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	cf 91       	pop	r28
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	08 95       	ret

000024e6 <HAL_UartBytesReceived>:
void appDataConf(NWK_DataReq_t *req){
		
		appDataReqBusy = false;
		(void)req;
}
void HAL_UartBytesReceived(uint16_t bytes){
    24e6:	0f 93       	push	r16
    24e8:	1f 93       	push	r17
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	8c 01       	movw	r16, r24
	for (uint16_t i = 0; i < bytes; i++)
    24f0:	c0 e0       	ldi	r28, 0x00	; 0
    24f2:	d0 e0       	ldi	r29, 0x00	; 0
    24f4:	10 c0       	rjmp	.+32     	; 0x2516 <HAL_UartBytesReceived+0x30>
	{
		uint8_t byte = HAL_UartReadByte();
    24f6:	e7 d2       	rcall	.+1486   	; 0x2ac6 <HAL_UartReadByte>

		if (appUartBufferPtr == sizeof(appUartBuffer)){
    24f8:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <appUartBufferPtr>
    24fc:	8d 36       	cpi	r24, 0x6D	; 109
    24fe:	19 f4       	brne	.+6      	; 0x2506 <HAL_UartBytesReceived+0x20>
			//appSendData();
			sendOK(1); // zadat adresu
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	ad df       	rcall	.-166    	; 0x2460 <sendOK>
		}
		if (appUartBufferPtr < sizeof(appUartBuffer))
    2506:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <appUartBufferPtr>
    250a:	8d 36       	cpi	r24, 0x6D	; 109
    250c:	18 f4       	brcc	.+6      	; 0x2514 <HAL_UartBytesReceived+0x2e>
		appUartBuffer[appUartBufferPtr++] = byte;
    250e:	8f 5f       	subi	r24, 0xFF	; 255
    2510:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <appUartBufferPtr>
		
		appDataReqBusy = false;
		(void)req;
}
void HAL_UartBytesReceived(uint16_t bytes){
	for (uint16_t i = 0; i < bytes; i++)
    2514:	21 96       	adiw	r28, 0x01	; 1
    2516:	c0 17       	cp	r28, r16
    2518:	d1 07       	cpc	r29, r17
    251a:	68 f3       	brcs	.-38     	; 0x24f6 <HAL_UartBytesReceived+0x10>
		}
		if (appUartBufferPtr < sizeof(appUartBuffer))
		appUartBuffer[appUartBufferPtr++] = byte;
	}

	SYS_TimerStop(&appTimer);
    251c:	81 ea       	ldi	r24, 0xA1	; 161
    251e:	94 e0       	ldi	r25, 0x04	; 4
    2520:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <SYS_TimerStop>
	SYS_TimerStart(&appTimer);
    2524:	81 ea       	ldi	r24, 0xA1	; 161
    2526:	94 e0       	ldi	r25, 0x04	; 4
    2528:	0e 94 05 20 	call	0x400a	; 0x400a <SYS_TimerStart>
}
    252c:	df 91       	pop	r29
    252e:	cf 91       	pop	r28
    2530:	1f 91       	pop	r17
    2532:	0f 91       	pop	r16
    2534:	08 95       	ret

00002536 <appInit>:

	return true;
}

void appInit(void){
	NWK_SetAddr(APP_ADDR);
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	bd d3       	rcall	.+1914   	; 0x2cb6 <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
    253c:	86 e9       	ldi	r24, 0x96	; 150
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	c1 d3       	rcall	.+1922   	; 0x2cc4 <NWK_SetPanId>
	PHY_SetChannel(APP_CHANNEL);
    2542:	8f e0       	ldi	r24, 0x0F	; 15
    2544:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <PHY_SetChannel>
	#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
	#endif
	PHY_SetRxState(true);
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <PHY_SetRxState>

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    254e:	65 e5       	ldi	r22, 0x55	; 85
    2550:	72 e1       	ldi	r23, 0x12	; 18
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	be d3       	rcall	.+1916   	; 0x2cd2 <NWK_OpenEndpoint>
	NWK_OpenEndpoint(APP_ENDPOINT_ACK, appDataInd_ACK);
    2556:	67 e1       	ldi	r22, 0x17	; 23
    2558:	72 e1       	ldi	r23, 0x12	; 18
    255a:	82 e0       	ldi	r24, 0x02	; 2
    255c:	ba d3       	rcall	.+1908   	; 0x2cd2 <NWK_OpenEndpoint>

	HAL_BoardInit();

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    255e:	e1 ea       	ldi	r30, 0xA1	; 161
    2560:	f4 e0       	ldi	r31, 0x04	; 4
    2562:	84 e1       	ldi	r24, 0x14	; 20
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	a0 e0       	ldi	r26, 0x00	; 0
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	86 83       	std	Z+6, r24	; 0x06
    256c:	97 83       	std	Z+7, r25	; 0x07
    256e:	a0 87       	std	Z+8, r26	; 0x08
    2570:	b1 87       	std	Z+9, r27	; 0x09
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2572:	12 86       	std	Z+10, r1	; 0x0a
	appTimer.handler = appTimerHandler;
    2574:	86 e1       	ldi	r24, 0x16	; 22
    2576:	92 e1       	ldi	r25, 0x12	; 18
    2578:	94 87       	std	Z+12, r25	; 0x0c
    257a:	83 87       	std	Z+11, r24	; 0x0b
    257c:	08 95       	ret

0000257e <APP_TaskHandler>:
}
void APP_TaskHandler(void){
	switch(appState){
    257e:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <appState>
    2582:	81 11       	cpse	r24, r1
    2584:	04 c0       	rjmp	.+8      	; 0x258e <APP_TaskHandler+0x10>
	case APP_STATE_INITIAL:
	{
		appInit();
    2586:	d7 df       	rcall	.-82     	; 0x2536 <appInit>
		appState = APP_STATE_IDLE;
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <appState>
    258e:	08 95       	ret

00002590 <freeRam>:
    2590:	cf 93       	push	r28
    2592:	df 93       	push	r29
    2594:	1f 92       	push	r1
    2596:	1f 92       	push	r1
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	80 91 a1 1a 	lds	r24, 0x1AA1	; 0x801aa1 <__brkval>
    25a0:	90 91 a2 1a 	lds	r25, 0x1AA2	; 0x801aa2 <__brkval+0x1>
    25a4:	00 97       	sbiw	r24, 0x00	; 0
    25a6:	11 f0       	breq	.+4      	; 0x25ac <freeRam+0x1c>
    25a8:	9c 01       	movw	r18, r24
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <freeRam+0x20>
    25ac:	2c ea       	ldi	r18, 0xAC	; 172
    25ae:	3a e1       	ldi	r19, 0x1A	; 26
    25b0:	ce 01       	movw	r24, r28
    25b2:	01 96       	adiw	r24, 0x01	; 1
    25b4:	82 1b       	sub	r24, r18
    25b6:	93 0b       	sbc	r25, r19
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	08 95       	ret

000025c2 <cs_sel>:
    25c2:	8b b1       	in	r24, 0x0b	; 11
    25c4:	8f 7e       	andi	r24, 0xEF	; 239
    25c6:	8b b9       	out	0x0b, r24	; 11
    25c8:	08 95       	ret

000025ca <cs_desel>:
    25ca:	8b b1       	in	r24, 0x0b	; 11
    25cc:	80 61       	ori	r24, 0x10	; 16
    25ce:	8b b9       	out	0x0b, r24	; 11
    25d0:	08 95       	ret

000025d2 <spi_rb>:
    25d2:	1e bc       	out	0x2e, r1	; 46
    25d4:	0d b4       	in	r0, 0x2d	; 45
    25d6:	07 fe       	sbrs	r0, 7
    25d8:	fd cf       	rjmp	.-6      	; 0x25d4 <spi_rb+0x2>
    25da:	8e b5       	in	r24, 0x2e	; 46
    25dc:	08 95       	ret

000025de <spi_wb>:
    25de:	8e bd       	out	0x2e, r24	; 46
    25e0:	0d b4       	in	r0, 0x2d	; 45
    25e2:	07 fe       	sbrs	r0, 7
    25e4:	fd cf       	rjmp	.-6      	; 0x25e0 <spi_wb+0x2>
    25e6:	08 95       	ret

000025e8 <spi_rb_burst>:
    25e8:	fc 01       	movw	r30, r24
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	09 c0       	rjmp	.+18     	; 0x2602 <spi_rb_burst+0x1a>
    25f0:	1e bc       	out	0x2e, r1	; 46
    25f2:	0d b4       	in	r0, 0x2d	; 45
    25f4:	07 fe       	sbrs	r0, 7
    25f6:	fd cf       	rjmp	.-6      	; 0x25f2 <spi_rb_burst+0xa>
    25f8:	8e b5       	in	r24, 0x2e	; 46
    25fa:	80 83       	st	Z, r24
    25fc:	2f 5f       	subi	r18, 0xFF	; 255
    25fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2600:	31 96       	adiw	r30, 0x01	; 1
    2602:	26 17       	cp	r18, r22
    2604:	37 07       	cpc	r19, r23
    2606:	a0 f3       	brcs	.-24     	; 0x25f0 <spi_rb_burst+0x8>
    2608:	08 95       	ret

0000260a <spi_wb_burst>:
    260a:	fc 01       	movw	r30, r24
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	0a c0       	rjmp	.+20     	; 0x2626 <spi_wb_burst+0x1c>
    2612:	cf 01       	movw	r24, r30
    2614:	01 96       	adiw	r24, 0x01	; 1
    2616:	40 81       	ld	r20, Z
    2618:	4e bd       	out	0x2e, r20	; 46
    261a:	0d b4       	in	r0, 0x2d	; 45
    261c:	07 fe       	sbrs	r0, 7
    261e:	fd cf       	rjmp	.-6      	; 0x261a <spi_wb_burst+0x10>
    2620:	2f 5f       	subi	r18, 0xFF	; 255
    2622:	3f 4f       	sbci	r19, 0xFF	; 255
    2624:	fc 01       	movw	r30, r24
    2626:	26 17       	cp	r18, r22
    2628:	37 07       	cpc	r19, r23
    262a:	98 f3       	brcs	.-26     	; 0x2612 <spi_wb_burst+0x8>
    262c:	08 95       	ret

0000262e <__vector_21>:
    262e:	1f 92       	push	r1
    2630:	0f 92       	push	r0
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	0f 92       	push	r0
    2636:	11 24       	eor	r1, r1
    2638:	8f 93       	push	r24
    263a:	9f 93       	push	r25
    263c:	af 93       	push	r26
    263e:	bf 93       	push	r27
    2640:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <_millis>
    2644:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <_millis+0x1>
    2648:	a0 91 76 19 	lds	r26, 0x1976	; 0x801976 <_millis+0x2>
    264c:	b0 91 77 19 	lds	r27, 0x1977	; 0x801977 <_millis+0x3>
    2650:	01 96       	adiw	r24, 0x01	; 1
    2652:	a1 1d       	adc	r26, r1
    2654:	b1 1d       	adc	r27, r1
    2656:	80 93 74 19 	sts	0x1974, r24	; 0x801974 <_millis>
    265a:	90 93 75 19 	sts	0x1975, r25	; 0x801975 <_millis+0x1>
    265e:	a0 93 76 19 	sts	0x1976, r26	; 0x801976 <_millis+0x2>
    2662:	b0 93 77 19 	sts	0x1977, r27	; 0x801977 <_millis+0x3>
    2666:	bf 91       	pop	r27
    2668:	af 91       	pop	r26
    266a:	9f 91       	pop	r25
    266c:	8f 91       	pop	r24
    266e:	0f 90       	pop	r0
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	0f 90       	pop	r0
    2674:	1f 90       	pop	r1
    2676:	18 95       	reti

00002678 <IO_LIBRARY_Init>:
    2678:	cf 93       	push	r28
    267a:	df 93       	push	r29
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	28 97       	sbiw	r28, 0x08	; 8
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
    268c:	88 e0       	ldi	r24, 0x08	; 8
    268e:	e8 e4       	ldi	r30, 0x48	; 72
    2690:	f2 e0       	ldi	r31, 0x02	; 2
    2692:	de 01       	movw	r26, r28
    2694:	11 96       	adiw	r26, 0x01	; 1
    2696:	01 90       	ld	r0, Z+
    2698:	0d 92       	st	X+, r0
    269a:	8a 95       	dec	r24
    269c:	e1 f7       	brne	.-8      	; 0x2696 <IO_LIBRARY_Init+0x1e>
    269e:	65 ee       	ldi	r22, 0xE5	; 229
    26a0:	72 e1       	ldi	r23, 0x12	; 18
    26a2:	81 ee       	ldi	r24, 0xE1	; 225
    26a4:	92 e1       	ldi	r25, 0x12	; 18
    26a6:	9a db       	rcall	.-2252   	; 0x1ddc <reg_wizchip_cs_cbfunc>
    26a8:	6f ee       	ldi	r22, 0xEF	; 239
    26aa:	72 e1       	ldi	r23, 0x12	; 18
    26ac:	89 ee       	ldi	r24, 0xE9	; 233
    26ae:	92 e1       	ldi	r25, 0x12	; 18
    26b0:	ac db       	rcall	.-2216   	; 0x1e0a <reg_wizchip_spi_cbfunc>
    26b2:	65 e0       	ldi	r22, 0x05	; 5
    26b4:	73 e1       	ldi	r23, 0x13	; 19
    26b6:	84 ef       	ldi	r24, 0xF4	; 244
    26b8:	92 e1       	ldi	r25, 0x12	; 18
    26ba:	c4 db       	rcall	.-2168   	; 0x1e44 <reg_wizchip_spiburst_cbfunc>
    26bc:	be 01       	movw	r22, r28
    26be:	6f 5f       	subi	r22, 0xFF	; 255
    26c0:	7f 4f       	sbci	r23, 0xFF	; 255
    26c2:	cb 01       	movw	r24, r22
    26c4:	48 dc       	rcall	.-1904   	; 0x1f56 <wizchip_init>
    26c6:	81 e3       	ldi	r24, 0x31	; 49
    26c8:	92 e0       	ldi	r25, 0x02	; 2
    26ca:	3b de       	rcall	.-906    	; 0x2342 <wizchip_setnetinfo>
    26cc:	28 96       	adiw	r28, 0x08	; 8
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	08 95       	ret

000026de <timer0_init>:
	TCCR0 = (1<<CS02)|(1<<WGM01); //TIMER0 SET-UP: CTC MODE & PS 1:64
	OCR0 = 249; // 1ms reach for clear (16mz:64=>250kHz:250-=>1kHz)
	TIMSK |= 1<<OCIE0;	 //IRQ on TIMER0 output compare
	 */
	//For M664p
	cli();
    26de:	f8 94       	cli
	TCCR0A = 0; TCCR0B = 0; TIMSK0 =  0;
    26e0:	14 bc       	out	0x24, r1	; 36
    26e2:	15 bc       	out	0x25, r1	; 37
    26e4:	ee e6       	ldi	r30, 0x6E	; 110
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	10 82       	st	Z, r1
	
	TCCR0A = (1<<WGM01); //TIMER0 SET-UP: CTC MODE
    26ea:	82 e0       	ldi	r24, 0x02	; 2
    26ec:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00); // PS 1:64
    26ee:	83 e0       	ldi	r24, 0x03	; 3
    26f0:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249; // 1ms reach for clear (16mz:64=>250kHz:250-=>1kHz)
    26f2:	89 ef       	ldi	r24, 0xF9	; 249
    26f4:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= 1<<OCIE0A;	 //IRQ on TIMER0 output compareA
    26f6:	80 81       	ld	r24, Z
    26f8:	82 60       	ori	r24, 0x02	; 2
    26fa:	80 83       	st	Z, r24
	sei();
    26fc:	78 94       	sei
    26fe:	08 95       	ret

00002700 <avr_init>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    2700:	99 e2       	ldi	r25, 0x29	; 41
    2702:	88 e1       	ldi	r24, 0x18	; 24
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	a8 95       	wdr
    270a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
static void avr_init(void)
{
	// Initialize device here.
	// WatchDog INIT
	wdt_enable(WDTO_8S);  // set up wdt reset interval 2 second
	wdt_reset(); // wdt reset ~ every <2000ms
    2714:	a8 95       	wdr

	timer0_init();// Timer0 millis engine init
    2716:	e3 df       	rcall	.-58     	; 0x26de <timer0_init>
	 *  uart1_BAUD_SELECT() (normal speed mode )
	 *  or
	 *  uart1_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
	 */

	UART_init( UART_BAUD_RATE );
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	96 e9       	ldi	r25, 0x96	; 150
    271c:	0e 94 6f 20 	call	0x40de	; 0x40de <UART_init>
	// Define Output/Input Stream
	stdout = &uart_str;
    2720:	83 e2       	ldi	r24, 0x23	; 35
    2722:	92 e0       	ldi	r25, 0x02	; 2
    2724:	90 93 a8 1a 	sts	0x1AA8, r25	; 0x801aa8 <__iob+0x3>
    2728:	80 93 a7 1a 	sts	0x1AA7, r24	; 0x801aa7 <__iob+0x2>
	sei(); //re-enable global interrupts
    272c:	78 94       	sei
    272e:	08 95       	ret

00002730 <print_network_information>:

	return;
}

void print_network_information(void)
{
    2730:	0f 93       	push	r16
    2732:	1f 93       	push	r17
    2734:	cf 93       	push	r28
    2736:	df 93       	push	r29
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	6d 97       	sbiw	r28, 0x1d	; 29
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61

	uint8_t tmpstr[6] = {0,};
    2748:	8e 01       	movw	r16, r28
    274a:	0f 5f       	subi	r16, 0xFF	; 255
    274c:	1f 4f       	sbci	r17, 0xFF	; 255
    274e:	86 e0       	ldi	r24, 0x06	; 6
    2750:	f8 01       	movw	r30, r16
    2752:	11 92       	st	Z+, r1
    2754:	8a 95       	dec	r24
    2756:	e9 f7       	brne	.-6      	; 0x2752 <print_network_information+0x22>
	ctlwizchip(CW_GET_ID,(void*)tmpstr); // Get WIZCHIP name
    2758:	b8 01       	movw	r22, r16
    275a:	88 e0       	ldi	r24, 0x08	; 8
    275c:	67 dd       	rcall	.-1330   	; 0x222c <ctlwizchip>
    PRINTF("\r\n=======================================\r\n");
    275e:	8b ea       	ldi	r24, 0xAB	; 171
    2760:	92 e0       	ldi	r25, 0x02	; 2
    2762:	9f 93       	push	r25
    2764:	8f 93       	push	r24
    2766:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <printf_P>
    PRINTF(" WIZnet chip:  %s \r\n", tmpstr);
    276a:	1f 93       	push	r17
    276c:	0f 93       	push	r16
    276e:	86 e9       	ldi	r24, 0x96	; 150
    2770:	92 e0       	ldi	r25, 0x02	; 2
    2772:	9f 93       	push	r25
    2774:	8f 93       	push	r24
    2776:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <printf_P>
    PRINTF("=======================================\r\n");
    277a:	8c e6       	ldi	r24, 0x6C	; 108
    277c:	92 e0       	ldi	r25, 0x02	; 2
    277e:	9f 93       	push	r25
    2780:	8f 93       	push	r24
    2782:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <printf_P>

	wiz_NetInfo gWIZNETINFO;
	wizchip_getnetinfo(&gWIZNETINFO);
    2786:	ce 01       	movw	r24, r28
    2788:	07 96       	adiw	r24, 0x07	; 7
    278a:	14 de       	rcall	.-984    	; 0x23b4 <wizchip_getnetinfo>
	if (gWIZNETINFO.dhcp == NETINFO_STATIC)
    278c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	81 30       	cpi	r24, 0x01	; 1
    279a:	49 f4       	brne	.+18     	; 0x27ae <print_network_information+0x7e>
		PRINTF("STATIC IP\r\n");
    279c:	80 e6       	ldi	r24, 0x60	; 96
    279e:	92 e0       	ldi	r25, 0x02	; 2
    27a0:	9f 93       	push	r25
    27a2:	8f 93       	push	r24
    27a4:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <printf_P>
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	08 c0       	rjmp	.+16     	; 0x27be <print_network_information+0x8e>
	else
		PRINTF("DHCP IP\r\n");
    27ae:	86 e5       	ldi	r24, 0x56	; 86
    27b0:	92 e0       	ldi	r25, 0x02	; 2
    27b2:	9f 93       	push	r25
    27b4:	8f 93       	push	r24
    27b6:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <printf_P>
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
    27be:	5c 85       	ldd	r21, Y+12	; 0x0c
    27c0:	4b 85       	ldd	r20, Y+11	; 0x0b
    27c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    27c4:	29 85       	ldd	r18, Y+9	; 0x09
    27c6:	98 85       	ldd	r25, Y+8	; 0x08
    27c8:	8f 81       	ldd	r24, Y+7	; 0x07
    27ca:	1f 92       	push	r1
    27cc:	5f 93       	push	r21
    27ce:	1f 92       	push	r1
    27d0:	4f 93       	push	r20
    27d2:	1f 92       	push	r1
    27d4:	3f 93       	push	r19
    27d6:	1f 92       	push	r1
    27d8:	2f 93       	push	r18
    27da:	1f 92       	push	r1
    27dc:	9f 93       	push	r25
    27de:	1f 92       	push	r1
    27e0:	8f 93       	push	r24
    27e2:	87 e6       	ldi	r24, 0x67	; 103
    27e4:	93 e0       	ldi	r25, 0x03	; 3
    27e6:	9f 93       	push	r25
    27e8:	8f 93       	push	r24
    27ea:	0e 94 e7 25 	call	0x4bce	; 0x4bce <printf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
    27ee:	38 89       	ldd	r19, Y+16	; 0x10
    27f0:	2f 85       	ldd	r18, Y+15	; 0x0f
    27f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f6:	1f 92       	push	r1
    27f8:	3f 93       	push	r19
    27fa:	1f 92       	push	r1
    27fc:	2f 93       	push	r18
    27fe:	1f 92       	push	r1
    2800:	9f 93       	push	r25
    2802:	1f 92       	push	r1
    2804:	8f 93       	push	r24
    2806:	84 e9       	ldi	r24, 0x94	; 148
    2808:	93 e0       	ldi	r25, 0x03	; 3
    280a:	9f 93       	push	r25
    280c:	8f 93       	push	r24
    280e:	0e 94 e7 25 	call	0x4bce	; 0x4bce <printf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
    2812:	3c 89       	ldd	r19, Y+20	; 0x14
    2814:	2b 89       	ldd	r18, Y+19	; 0x13
    2816:	9a 89       	ldd	r25, Y+18	; 0x12
    2818:	89 89       	ldd	r24, Y+17	; 0x11
    281a:	1f 92       	push	r1
    281c:	3f 93       	push	r19
    281e:	1f 92       	push	r1
    2820:	2f 93       	push	r18
    2822:	1f 92       	push	r1
    2824:	9f 93       	push	r25
    2826:	1f 92       	push	r1
    2828:	8f 93       	push	r24
    282a:	8f ea       	ldi	r24, 0xAF	; 175
    282c:	93 e0       	ldi	r25, 0x03	; 3
    282e:	9f 93       	push	r25
    2830:	8f 93       	push	r24
    2832:	0e 94 e7 25 	call	0x4bce	; 0x4bce <printf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
    2836:	38 8d       	ldd	r19, Y+24	; 0x18
    2838:	2f 89       	ldd	r18, Y+23	; 0x17
    283a:	9e 89       	ldd	r25, Y+22	; 0x16
    283c:	8d 89       	ldd	r24, Y+21	; 0x15
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	1f 92       	push	r1
    284a:	3f 93       	push	r19
    284c:	1f 92       	push	r1
    284e:	2f 93       	push	r18
    2850:	1f 92       	push	r1
    2852:	9f 93       	push	r25
    2854:	1f 92       	push	r1
    2856:	8f 93       	push	r24
    2858:	8a ec       	ldi	r24, 0xCA	; 202
    285a:	93 e0       	ldi	r25, 0x03	; 3
    285c:	9f 93       	push	r25
    285e:	8f 93       	push	r24
    2860:	0e 94 e7 25 	call	0x4bce	; 0x4bce <printf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
    2864:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2866:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2868:	9a 8d       	ldd	r25, Y+26	; 0x1a
    286a:	89 8d       	ldd	r24, Y+25	; 0x19
    286c:	1f 92       	push	r1
    286e:	3f 93       	push	r19
    2870:	1f 92       	push	r1
    2872:	2f 93       	push	r18
    2874:	1f 92       	push	r1
    2876:	9f 93       	push	r25
    2878:	1f 92       	push	r1
    287a:	8f 93       	push	r24
    287c:	85 ee       	ldi	r24, 0xE5	; 229
    287e:	93 e0       	ldi	r25, 0x03	; 3
    2880:	9f 93       	push	r25
    2882:	8f 93       	push	r24
    2884:	0e 94 e7 25 	call	0x4bce	; 0x4bce <printf>
}
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	6d 96       	adiw	r28, 0x1d	; 29
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	df 91       	pop	r29
    28a0:	cf 91       	pop	r28
    28a2:	1f 91       	pop	r17
    28a4:	0f 91       	pop	r16
    28a6:	08 95       	ret

000028a8 <main>:
}

int main()
{
	//uint8_t prev_sw1 = 1; // VAR for sw1 pressing detect
	SYS_Init();
    28a8:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <SYS_Init>
	// INIT MCU
	avr_init();
    28ac:	29 df       	rcall	.-430    	; 0x2700 <avr_init>
	spi_init(); //SPI Master, MODE0, 4Mhz(DIV4), CS_PB.3=HIGH - suitable for WIZNET 5x00(1/2/5)
    28ae:	88 d0       	rcall	.+272    	; 0x29c0 <spi_init>

	// Print program metrics
	//PRINTF("%S", str_prog_name);// ???????? ?????????
	//PRINTF("Compiled at: %S %S\r\n", compile_time, compile_date);// ????? ???? ??????????
	//PRINTF(">> MCU is: %S; CLK is: %luHz\r\n", str_mcu, F_CPU);// MCU Name && FREQ
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());
    28b0:	6f de       	rcall	.-802    	; 0x2590 <freeRam>
    28b2:	9f 93       	push	r25
    28b4:	8f 93       	push	r24
    28b6:	87 ed       	ldi	r24, 0xD7	; 215
    28b8:	92 e0       	ldi	r25, 0x02	; 2
    28ba:	9f 93       	push	r25
    28bc:	8f 93       	push	r24
    28be:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <printf_P>
    28c2:	0f 90       	pop	r0

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
	while(i--)
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	83 e0       	ldi	r24, 0x03	; 3
	//PRINTF("Compiled at: %S %S\r\n", compile_time, compile_date);// ????? ???? ??????????
	//PRINTF(">> MCU is: %S; CLK is: %luHz\r\n", str_mcu, F_CPU);// MCU Name && FREQ
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
    28cc:	1a c0       	rjmp	.+52     	; 0x2902 <main+0x5a>
	while(i--)
    28ce:	85 b1       	in	r24, 0x05	; 5
	{
		LED0ON;
    28d0:	8f 7e       	andi	r24, 0xEF	; 239
    28d2:	85 b9       	out	0x05, r24	; 5
    28d4:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    28d6:	30 e7       	ldi	r19, 0x70	; 112
    28d8:	82 e0       	ldi	r24, 0x02	; 2
    28da:	21 50       	subi	r18, 0x01	; 1
    28dc:	30 40       	sbci	r19, 0x00	; 0
    28de:	80 40       	sbci	r24, 0x00	; 0
    28e0:	e1 f7       	brne	.-8      	; 0x28da <main+0x32>
    28e2:	00 c0       	rjmp	.+0      	; 0x28e4 <main+0x3c>
    28e4:	00 00       	nop
    28e6:	85 b1       	in	r24, 0x05	; 5
		_delay_ms(100);
		LED0OFF;
    28e8:	80 61       	ori	r24, 0x10	; 16
    28ea:	85 b9       	out	0x05, r24	; 5
    28ec:	2f ef       	ldi	r18, 0xFF	; 255
    28ee:	33 ec       	ldi	r19, 0xC3	; 195
    28f0:	89 e0       	ldi	r24, 0x09	; 9
    28f2:	21 50       	subi	r18, 0x01	; 1
    28f4:	30 40       	sbci	r19, 0x00	; 0
    28f6:	80 40       	sbci	r24, 0x00	; 0
    28f8:	e1 f7       	brne	.-8      	; 0x28f2 <main+0x4a>
    28fa:	00 c0       	rjmp	.+0      	; 0x28fc <main+0x54>
    28fc:	00 00       	nop
    28fe:	a8 95       	wdr
		_delay_ms(400);
		wdt_reset();
    2900:	89 2f       	mov	r24, r25
	//PRINTF(">> MCU is: %S; CLK is: %luHz\r\n", str_mcu, F_CPU);// MCU Name && FREQ
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());

	//Short Blink LED 3 times on startup
	unsigned char i = 3;
	while(i--)
    2902:	9f ef       	ldi	r25, 0xFF	; 255
    2904:	98 0f       	add	r25, r24
    2906:	81 11       	cpse	r24, r1
		_delay_ms(400);
		wdt_reset();
	}

	//Wizchip WIZ5500 Ethernet initialize
	IO_LIBRARY_Init(); //After that ping must working
    2908:	e2 cf       	rjmp	.-60     	; 0x28ce <main+0x26>
    290a:	b6 de       	rcall	.-660    	; 0x2678 <IO_LIBRARY_Init>
	print_network_information();
    290c:	11 df       	rcall	.-478    	; 0x2730 <print_network_information>
    290e:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2910:	c0 90 74 19 	lds	r12, 0x1974	; 0x801974 <_millis>
	// Atomic tick reading
	i = _millis;
    2914:	d0 90 75 19 	lds	r13, 0x1975	; 0x801975 <_millis+0x1>
    2918:	e0 90 76 19 	lds	r14, 0x1976	; 0x801976 <_millis+0x2>
    291c:	f0 90 77 19 	lds	r15, 0x1977	; 0x801977 <_millis+0x3>
    2920:	78 94       	sei
	sei();
    2922:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2924:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <_millis>
	// Atomic tick reading
	i = _millis;
    2928:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <_millis+0x1>
    292c:	a0 91 76 19 	lds	r26, 0x1976	; 0x801976 <_millis+0x2>
    2930:	b0 91 77 19 	lds	r27, 0x1977	; 0x801977 <_millis+0x3>
    2934:	78 94       	sei
	sei();
    2936:	f8 94       	cli
}

static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
    2938:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <_millis>
	// Atomic tick reading
	i = _millis;
    293c:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <_millis+0x1>
    2940:	a0 91 76 19 	lds	r26, 0x1976	; 0x801976 <_millis+0x2>
    2944:	b0 91 77 19 	lds	r27, 0x1977	; 0x801977 <_millis+0x3>
	sei();
    2948:	78 94       	sei
	{	
// 		appTimer.interval = 1000;
// 		appTimer.mode = SYS_TIMER_PERIODIC_MODE;
// 		appTimer.handler = appTimerHandler;
// 		SYS_TimerStart(&appTimer);
		SYS_TaskHandler();
    294a:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <SYS_TaskHandler>
		HAL_UartTaskHandler();
    294e:	54 d1       	rcall	.+680    	; 0x2bf8 <HAL_UartTaskHandler>
    2950:	16 de       	rcall	.-980    	; 0x257e <APP_TaskHandler>
		APP_TaskHandler();
    2952:	a8 95       	wdr
    2954:	48 e8       	ldi	r20, 0x88	; 136
		//Here at least every 1sec
		wdt_reset(); // WDT reset at least every sec
    2956:	53 e1       	ldi	r21, 0x13	; 19

		//Use Hercules Terminal to check loopback tcp:5000 and udp:3000
		/*
		 * https://www.hw-group.com/software/hercules-setup-utility
		 * */
		loopback_tcps(0,ethBuf0,5000);
    2958:	68 e7       	ldi	r22, 0x78	; 120
    295a:	79 e1       	ldi	r23, 0x19	; 25
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	0e 94 aa 01 	call	0x354	; 0x354 <loopback_tcps>
    2962:	48 eb       	ldi	r20, 0xB8	; 184
    2964:	5b e0       	ldi	r21, 0x0B	; 11
		loopback_udps(1, ethBuf0, 3000);
    2966:	68 e7       	ldi	r22, 0x78	; 120
    2968:	79 e1       	ldi	r23, 0x19	; 25
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <loopback_udps>
    2970:	f8 94       	cli
    2972:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <_millis>
static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
	// Atomic tick reading
	i = _millis;
    2976:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <_millis+0x1>
    297a:	a0 91 76 19 	lds	r26, 0x1976	; 0x801976 <_millis+0x2>
    297e:	b0 91 77 19 	lds	r27, 0x1977	; 0x801977 <_millis+0x3>
    2982:	78 94       	sei
    2984:	8c 19       	sub	r24, r12
	sei();
    2986:	9d 09       	sbc	r25, r13
// 		}
// 
// 		//loopback_ret = loopback_tcpc(SOCK_TCPS, gDATABUF, destip, destport);
// 		//if(loopback_ret < 0) printf("loopback ret: %ld\r\n", loopback_ret); // TCP Socket Error code

		if((millis()-timer_link_1sec)> 1000)
    2988:	ae 09       	sbc	r26, r14
    298a:	bf 09       	sbc	r27, r15
    298c:	89 3e       	cpi	r24, 0xE9	; 233
    298e:	93 40       	sbci	r25, 0x03	; 3
    2990:	a1 05       	cpc	r26, r1
    2992:	b1 05       	cpc	r27, r1
    2994:	d0 f2       	brcs	.-76     	; 0x294a <main+0xa2>
    2996:	f8 94       	cli
    2998:	c0 90 74 19 	lds	r12, 0x1974	; 0x801974 <_millis>
static inline unsigned long millis(void)
{
	unsigned long i;
	cli();
	// Atomic tick reading
	i = _millis;
    299c:	d0 90 75 19 	lds	r13, 0x1975	; 0x801975 <_millis+0x1>
    29a0:	e0 90 76 19 	lds	r14, 0x1976	; 0x801976 <_millis+0x2>
    29a4:	f0 90 77 19 	lds	r15, 0x1977	; 0x801977 <_millis+0x3>
    29a8:	78 94       	sei
	sei();
    29aa:	96 db       	rcall	.-2260   	; 0x20d8 <wizphy_getphylink>

		if((millis()-timer_link_1sec)> 1000)
		{
			//here every 1 sec
			timer_link_1sec = millis();
			if(wizphy_getphylink() == PHY_LINK_ON)
    29ac:	81 30       	cpi	r24, 0x01	; 1
    29ae:	21 f4       	brne	.+8      	; 0x29b8 <main+0x110>
    29b0:	85 b1       	in	r24, 0x05	; 5
    29b2:	8f 7e       	andi	r24, 0xEF	; 239
			{
				LED0ON;
    29b4:	85 b9       	out	0x05, r24	; 5
    29b6:	c9 cf       	rjmp	.-110    	; 0x294a <main+0xa2>
    29b8:	85 b1       	in	r24, 0x05	; 5
    29ba:	80 61       	ori	r24, 0x10	; 16
			}
			else
			{
				LED0OFF;
    29bc:	85 b9       	out	0x05, r24	; 5
    29be:	c5 cf       	rjmp	.-118    	; 0x294a <main+0xa2>

000029c0 <spi_init>:

void
spi_init(void)
{
  // CS PIN for FLASH
  DDRD	|= BV(WIZNET_CS); // CS to OUT && Disable
    29c0:	8a b1       	in	r24, 0x0a	; 10
    29c2:	80 61       	ori	r24, 0x10	; 16
    29c4:	8a b9       	out	0x0a, r24	; 10
  SPI_WIZNET_DISABLE();
    29c6:	8b b1       	in	r24, 0x0b	; 11
    29c8:	80 61       	ori	r24, 0x10	; 16
    29ca:	8b b9       	out	0x0b, r24	; 11
  
  /* Initalize ports for communication with SPI units. */
  /* CSN=SS and must be output when master! */
  DDRB  |= BV(MOSI) | BV(SCK);
    29cc:	84 b1       	in	r24, 0x04	; 4
    29ce:	86 60       	ori	r24, 0x06	; 6
    29d0:	84 b9       	out	0x04, r24	; 4
  PORTB |= BV(MOSI) | BV(SCK);
    29d2:	85 b1       	in	r24, 0x05	; 5
    29d4:	86 60       	ori	r24, 0x06	; 6
    29d6:	85 b9       	out	0x05, r24	; 5
  DDRD |= BV(CSN);
    29d8:	8a b1       	in	r24, 0x0a	; 10
    29da:	80 64       	ori	r24, 0x40	; 64
    29dc:	8a b9       	out	0x0a, r24	; 10
 
  /* Enables SPI, selects "master", clock rate FCK / 4 - 4Mhz, and SPI mode 0 */
  SPCR = BV(SPE) | BV(MSTR);
    29de:	80 e5       	ldi	r24, 0x50	; 80
    29e0:	8c bd       	out	0x2c, r24	; 44
#if defined(SPI_8_MHZ)
  SPSR = BV(SPI2X); //FCK / 2 - 8Mhz
#elif defined (SPI_4_MHZ)
  SPSR = 0x0; //FCK / 4 - 4Mhz
#else
  SPSR = 0x0; //FCK / 4 - 4Mhz
    29e2:	1d bc       	out	0x2d, r1	; 45
    29e4:	08 95       	ret

000029e6 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    29e6:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	f8 94       	cli
    29ec:	a8 95       	wdr
    29ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    29f2:	88 61       	ori	r24, 0x18	; 24
    29f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    29f8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    29fc:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    29fe:	e1 e6       	ldi	r30, 0x61	; 97
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 e8       	ldi	r24, 0x80	; 128
    2a04:	80 83       	st	Z, r24
  CLKPR = 0;
    2a06:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    2a08:	78 94       	sei

  HAL_TimerInit();
    2a0a:	01 c0       	rjmp	.+2      	; 0x2a0e <HAL_TimerInit>
    2a0c:	08 95       	ret

00002a0e <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
    2a0e:	10 92 78 1a 	sts	0x1A78, r1	; 0x801a78 <halTimerIrqCount>
    2a12:	80 e1       	ldi	r24, 0x10	; 16
    2a14:	97 e2       	ldi	r25, 0x27	; 39
    2a16:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    2a1a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    2a1e:	e1 ea       	ldi	r30, 0xA1	; 161
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	88 e0       	ldi	r24, 0x08	; 8
    2a24:	80 83       	st	Z, r24
    2a26:	80 81       	ld	r24, Z
    2a28:	82 60       	ori	r24, 0x02	; 2
    2a2a:	80 83       	st	Z, r24
    2a2c:	e2 e7       	ldi	r30, 0x72	; 114
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	82 60       	ori	r24, 0x02	; 2
    2a34:	80 83       	st	Z, r24
    2a36:	08 95       	ret

00002a38 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    2a38:	1f 92       	push	r1
    2a3a:	0f 92       	push	r0
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	0f 92       	push	r0
    2a40:	11 24       	eor	r1, r1
    2a42:	8f 93       	push	r24
  halTimerIrqCount++;
    2a44:	80 91 78 1a 	lds	r24, 0x1A78	; 0x801a78 <halTimerIrqCount>
    2a48:	8f 5f       	subi	r24, 0xFF	; 255
    2a4a:	80 93 78 1a 	sts	0x1A78, r24	; 0x801a78 <halTimerIrqCount>
}
    2a4e:	8f 91       	pop	r24
    2a50:	0f 90       	pop	r0
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	0f 90       	pop	r0
    2a56:	1f 90       	pop	r1
    2a58:	18 95       	reti

00002a5a <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
    2a5a:	1f 92       	push	r1
    2a5c:	0f 92       	push	r0
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	0f 92       	push	r0
    2a62:	11 24       	eor	r1, r1
    2a64:	8f 93       	push	r24
  halSleepTimerEvent = true;
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <halSleepTimerEvent>
}
    2a6c:	8f 91       	pop	r24
    2a6e:	0f 90       	pop	r0
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	0f 90       	pop	r0
    2a74:	1f 90       	pop	r1
    2a76:	18 95       	reti

00002a78 <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
    2a78:	cf 93       	push	r28
    2a7a:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
    2a7c:	ec eb       	ldi	r30, 0xBC	; 188
    2a7e:	f4 e0       	ldi	r31, 0x04	; 4
    2a80:	26 81       	ldd	r18, Z+6	; 0x06
    2a82:	37 81       	ldd	r19, Z+7	; 0x07
    2a84:	64 81       	ldd	r22, Z+4	; 0x04
    2a86:	75 81       	ldd	r23, Z+5	; 0x05
    2a88:	26 17       	cp	r18, r22
    2a8a:	37 07       	cpc	r19, r23
    2a8c:	c9 f0       	breq	.+50     	; 0x2ac0 <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
    2a8e:	c0 85       	ldd	r28, Z+8	; 0x08
    2a90:	d1 85       	ldd	r29, Z+9	; 0x09
    2a92:	42 81       	ldd	r20, Z+2	; 0x02
    2a94:	53 81       	ldd	r21, Z+3	; 0x03
    2a96:	da 01       	movw	r26, r20
    2a98:	11 96       	adiw	r26, 0x01	; 1
    2a9a:	b3 83       	std	Z+3, r27	; 0x03
    2a9c:	a2 83       	std	Z+2, r26	; 0x02
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	e4 0f       	add	r30, r20
    2aa2:	f5 1f       	adc	r31, r21
    2aa4:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
    2aa6:	6a 17       	cp	r22, r26
    2aa8:	7b 07       	cpc	r23, r27
    2aaa:	21 f4       	brne	.+8      	; 0x2ab4 <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
    2aac:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <txFifo+0x3>
    2ab0:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <txFifo+0x2>
  txFifo.bytes++;
    2ab4:	2f 5f       	subi	r18, 0xFF	; 255
    2ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab8:	30 93 c3 04 	sts	0x04C3, r19	; 0x8004c3 <txFifo+0x7>
    2abc:	20 93 c2 04 	sts	0x04C2, r18	; 0x8004c2 <txFifo+0x6>
}
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	08 95       	ret

00002ac6 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
    2ac6:	4f b7       	in	r20, 0x3f	; 63
    2ac8:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
    2aca:	e2 eb       	ldi	r30, 0xB2	; 178
    2acc:	f4 e0       	ldi	r31, 0x04	; 4
    2ace:	20 85       	ldd	r18, Z+8	; 0x08
    2ad0:	31 85       	ldd	r19, Z+9	; 0x09
    2ad2:	80 81       	ld	r24, Z
    2ad4:	91 81       	ldd	r25, Z+1	; 0x01
    2ad6:	bc 01       	movw	r22, r24
    2ad8:	6f 5f       	subi	r22, 0xFF	; 255
    2ada:	7f 4f       	sbci	r23, 0xFF	; 255
    2adc:	71 83       	std	Z+1, r23	; 0x01
    2ade:	60 83       	st	Z, r22
    2ae0:	d9 01       	movw	r26, r18
    2ae2:	a8 0f       	add	r26, r24
    2ae4:	b9 1f       	adc	r27, r25
    2ae6:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
    2ae8:	60 81       	ld	r22, Z
    2aea:	71 81       	ldd	r23, Z+1	; 0x01
    2aec:	24 81       	ldd	r18, Z+4	; 0x04
    2aee:	35 81       	ldd	r19, Z+5	; 0x05
    2af0:	62 17       	cp	r22, r18
    2af2:	73 07       	cpc	r23, r19
    2af4:	21 f4       	brne	.+8      	; 0x2afe <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
    2af6:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <rxFifo+0x1>
    2afa:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <rxFifo>
    rxFifo.bytes--;
    2afe:	e2 eb       	ldi	r30, 0xB2	; 178
    2b00:	f4 e0       	ldi	r31, 0x04	; 4
    2b02:	26 81       	ldd	r18, Z+6	; 0x06
    2b04:	37 81       	ldd	r19, Z+7	; 0x07
    2b06:	21 50       	subi	r18, 0x01	; 1
    2b08:	31 09       	sbc	r19, r1
    2b0a:	37 83       	std	Z+7, r19	; 0x07
    2b0c:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
    2b0e:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
    2b10:	08 95       	ret

00002b12 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
    2b12:	1f 92       	push	r1
    2b14:	0f 92       	push	r0
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	0f 92       	push	r0
    2b1a:	11 24       	eor	r1, r1
    2b1c:	0b b6       	in	r0, 0x3b	; 59
    2b1e:	0f 92       	push	r0
    2b20:	8f 93       	push	r24
    2b22:	ef 93       	push	r30
    2b24:	ff 93       	push	r31
  udrEmpty = true;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
    2b2c:	e9 ec       	ldi	r30, 0xC9	; 201
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	8f 7d       	andi	r24, 0xDF	; 223
    2b34:	80 83       	st	Z, r24
}
    2b36:	ff 91       	pop	r31
    2b38:	ef 91       	pop	r30
    2b3a:	8f 91       	pop	r24
    2b3c:	0f 90       	pop	r0
    2b3e:	0b be       	out	0x3b, r0	; 59
    2b40:	0f 90       	pop	r0
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	0f 90       	pop	r0
    2b46:	1f 90       	pop	r1
    2b48:	18 95       	reti

00002b4a <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
    2b4a:	1f 92       	push	r1
    2b4c:	0f 92       	push	r0
    2b4e:	0f b6       	in	r0, 0x3f	; 63
    2b50:	0f 92       	push	r0
    2b52:	11 24       	eor	r1, r1
    2b54:	0b b6       	in	r0, 0x3b	; 59
    2b56:	0f 92       	push	r0
    2b58:	2f 93       	push	r18
    2b5a:	3f 93       	push	r19
    2b5c:	4f 93       	push	r20
    2b5e:	5f 93       	push	r21
    2b60:	6f 93       	push	r22
    2b62:	7f 93       	push	r23
    2b64:	8f 93       	push	r24
    2b66:	9f 93       	push	r25
    2b68:	af 93       	push	r26
    2b6a:	bf 93       	push	r27
    2b6c:	ef 93       	push	r30
    2b6e:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
    2b70:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
    2b74:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
    2b78:	8c 71       	andi	r24, 0x1C	; 28
    2b7a:	59 f5       	brne	.+86     	; 0x2bd2 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
    2b7c:	e2 eb       	ldi	r30, 0xB2	; 178
    2b7e:	f4 e0       	ldi	r31, 0x04	; 4
    2b80:	46 81       	ldd	r20, Z+6	; 0x06
    2b82:	57 81       	ldd	r21, Z+7	; 0x07
    2b84:	84 81       	ldd	r24, Z+4	; 0x04
    2b86:	95 81       	ldd	r25, Z+5	; 0x05
    2b88:	48 17       	cp	r20, r24
    2b8a:	59 07       	cpc	r21, r25
    2b8c:	11 f1       	breq	.+68     	; 0x2bd2 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
    2b8e:	40 85       	ldd	r20, Z+8	; 0x08
    2b90:	51 85       	ldd	r21, Z+9	; 0x09
    2b92:	82 81       	ldd	r24, Z+2	; 0x02
    2b94:	93 81       	ldd	r25, Z+3	; 0x03
    2b96:	bc 01       	movw	r22, r24
    2b98:	6f 5f       	subi	r22, 0xFF	; 255
    2b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b9c:	73 83       	std	Z+3, r23	; 0x03
    2b9e:	62 83       	std	Z+2, r22	; 0x02
    2ba0:	da 01       	movw	r26, r20
    2ba2:	a8 0f       	add	r26, r24
    2ba4:	b9 1f       	adc	r27, r25
    2ba6:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
    2ba8:	22 81       	ldd	r18, Z+2	; 0x02
    2baa:	33 81       	ldd	r19, Z+3	; 0x03
    2bac:	84 81       	ldd	r24, Z+4	; 0x04
    2bae:	95 81       	ldd	r25, Z+5	; 0x05
    2bb0:	28 17       	cp	r18, r24
    2bb2:	39 07       	cpc	r19, r25
    2bb4:	21 f4       	brne	.+8      	; 0x2bbe <__vector_36+0x74>
      rxFifo.tail = 0;
    2bb6:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <rxFifo+0x3>
    2bba:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <rxFifo+0x2>
    rxFifo.bytes++;
    2bbe:	e2 eb       	ldi	r30, 0xB2	; 178
    2bc0:	f4 e0       	ldi	r31, 0x04	; 4
    2bc2:	86 81       	ldd	r24, Z+6	; 0x06
    2bc4:	97 81       	ldd	r25, Z+7	; 0x07
    2bc6:	01 96       	adiw	r24, 0x01	; 1
    2bc8:	97 83       	std	Z+7, r25	; 0x07
    2bca:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
    2bd2:	ff 91       	pop	r31
    2bd4:	ef 91       	pop	r30
    2bd6:	bf 91       	pop	r27
    2bd8:	af 91       	pop	r26
    2bda:	9f 91       	pop	r25
    2bdc:	8f 91       	pop	r24
    2bde:	7f 91       	pop	r23
    2be0:	6f 91       	pop	r22
    2be2:	5f 91       	pop	r21
    2be4:	4f 91       	pop	r20
    2be6:	3f 91       	pop	r19
    2be8:	2f 91       	pop	r18
    2bea:	0f 90       	pop	r0
    2bec:	0b be       	out	0x3b, r0	; 59
    2bee:	0f 90       	pop	r0
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	0f 90       	pop	r0
    2bf4:	1f 90       	pop	r1
    2bf6:	18 95       	reti

00002bf8 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
    2bf8:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <txFifo+0x6>
    2bfc:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <txFifo+0x7>
    2c00:	00 97       	sbiw	r24, 0x00	; 0
    2c02:	69 f1       	breq	.+90     	; 0x2c5e <HAL_UartTaskHandler+0x66>
    2c04:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <udrEmpty>
    2c08:	22 23       	and	r18, r18
    2c0a:	49 f1       	breq	.+82     	; 0x2c5e <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
    2c0c:	ec eb       	ldi	r30, 0xBC	; 188
    2c0e:	f4 e0       	ldi	r31, 0x04	; 4
    2c10:	60 85       	ldd	r22, Z+8	; 0x08
    2c12:	71 85       	ldd	r23, Z+9	; 0x09
    2c14:	20 81       	ld	r18, Z
    2c16:	31 81       	ldd	r19, Z+1	; 0x01
    2c18:	a9 01       	movw	r20, r18
    2c1a:	4f 5f       	subi	r20, 0xFF	; 255
    2c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c1e:	51 83       	std	Z+1, r21	; 0x01
    2c20:	40 83       	st	Z, r20
    2c22:	db 01       	movw	r26, r22
    2c24:	a2 0f       	add	r26, r18
    2c26:	b3 1f       	adc	r27, r19
    2c28:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
    2c2a:	64 81       	ldd	r22, Z+4	; 0x04
    2c2c:	75 81       	ldd	r23, Z+5	; 0x05
    2c2e:	46 17       	cp	r20, r22
    2c30:	57 07       	cpc	r21, r23
    2c32:	21 f4       	brne	.+8      	; 0x2c3c <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
    2c34:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <txFifo+0x1>
    2c38:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <txFifo>
    txFifo.bytes--;
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <txFifo+0x7>
    2c42:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
    2c46:	9f b7       	in	r25, 0x3f	; 63
    2c48:	f8 94       	cli
      UDRx = byte;
    2c4a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
    2c4e:	e9 ec       	ldi	r30, 0xC9	; 201
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	80 62       	ori	r24, 0x20	; 32
    2c56:	80 83       	st	Z, r24
      udrEmpty = false;
    2c58:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <udrEmpty>
    ATOMIC_SECTION_LEAVE
    2c5c:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
    2c5e:	2f b7       	in	r18, 0x3f	; 63
    2c60:	f8 94       	cli
      new = newData;
    2c62:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <newData>
      newData = false;
    2c66:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <newData>
      bytes = rxFifo.bytes;
    2c6a:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <rxFifo+0x6>
    2c6e:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
    2c72:	2f bf       	out	0x3f, r18	; 63

    if (new)
    2c74:	99 23       	and	r25, r25
    2c76:	11 f0       	breq	.+4      	; 0x2c7c <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
    2c78:	ca 01       	movw	r24, r20
    2c7a:	35 cc       	rjmp	.-1942   	; 0x24e6 <HAL_UartBytesReceived>
    2c7c:	08 95       	ret

00002c7e <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    2c7e:	e9 e7       	ldi	r30, 0x79	; 121
    2c80:	fa e1       	ldi	r31, 0x1A	; 26
    2c82:	14 82       	std	Z+4, r1	; 0x04
    2c84:	15 82       	std	Z+5, r1	; 0x05
    2c86:	11 82       	std	Z+1, r1	; 0x01
    2c88:	10 82       	st	Z, r1
    2c8a:	17 a2       	std	Z+39, r1	; 0x27
    2c8c:	16 a2       	std	Z+38, r1	; 0x26
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	0a c0       	rjmp	.+20     	; 0x2ca6 <NWK_Init+0x28>
    2c92:	e8 2f       	mov	r30, r24
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	33 96       	adiw	r30, 0x03	; 3
    2c98:	ee 0f       	add	r30, r30
    2c9a:	ff 1f       	adc	r31, r31
    2c9c:	e7 58       	subi	r30, 0x87	; 135
    2c9e:	f5 4e       	sbci	r31, 0xE5	; 229
    2ca0:	11 82       	std	Z+1, r1	; 0x01
    2ca2:	10 82       	st	Z, r1
    2ca4:	8f 5f       	subi	r24, 0xFF	; 255
    2ca6:	80 31       	cpi	r24, 0x10	; 16
    2ca8:	a0 f3       	brcs	.-24     	; 0x2c92 <NWK_Init+0x14>
    2caa:	3a d6       	rcall	.+3188   	; 0x3920 <nwkTxInit>
    2cac:	8d d5       	rcall	.+2842   	; 0x37c8 <nwkRxInit>
    2cae:	06 d1       	rcall	.+524    	; 0x2ebc <nwkFrameInit>
    2cb0:	c5 d0       	rcall	.+394    	; 0x2e3c <nwkDataReqInit>
    2cb2:	bd c1       	rjmp	.+890    	; 0x302e <nwkRouteInit>
    2cb4:	08 95       	ret

00002cb6 <NWK_SetAddr>:
    2cb6:	90 93 7a 1a 	sts	0x1A7A, r25	; 0x801a7a <nwkIb+0x1>
    2cba:	80 93 79 1a 	sts	0x1A79, r24	; 0x801a79 <nwkIb>
    2cbe:	0c 94 9c 1e 	jmp	0x3d38	; 0x3d38 <PHY_SetShortAddr>
    2cc2:	08 95       	ret

00002cc4 <NWK_SetPanId>:
    2cc4:	90 93 7c 1a 	sts	0x1A7C, r25	; 0x801a7c <nwkIb+0x3>
    2cc8:	80 93 7b 1a 	sts	0x1A7B, r24	; 0x801a7b <nwkIb+0x2>
    2ccc:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <PHY_SetPanId>
    2cd0:	08 95       	ret

00002cd2 <NWK_OpenEndpoint>:
    2cd2:	e8 2f       	mov	r30, r24
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	33 96       	adiw	r30, 0x03	; 3
    2cd8:	ee 0f       	add	r30, r30
    2cda:	ff 1f       	adc	r31, r31
    2cdc:	e7 58       	subi	r30, 0x87	; 135
    2cde:	f5 4e       	sbci	r31, 0xE5	; 229
    2ce0:	71 83       	std	Z+1, r23	; 0x01
    2ce2:	60 83       	st	Z, r22
    2ce4:	08 95       	ret

00002ce6 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    2ce6:	c3 d5       	rcall	.+2950   	; 0x386e <nwkRxTaskHandler>
  nwkTxTaskHandler();
    2ce8:	46 d7       	rcall	.+3724   	; 0x3b76 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    2cea:	d1 c0       	rjmp	.+418    	; 0x2e8e <nwkDataReqTaskHandler>
    2cec:	08 95       	ret

00002cee <nwkDataReqConfirm>:
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    2cee:	a0 91 c6 04 	lds	r26, 0x04C6	; 0x8004c6 <nwkDataReqQueue>
    2cf2:	b0 91 c7 04 	lds	r27, 0x04C7	; 0x8004c7 <nwkDataReqQueue+0x1>
    2cf6:	a8 17       	cp	r26, r24
    2cf8:	b9 07       	cpc	r27, r25
    2cfa:	41 f4       	brne	.+16     	; 0x2d0c <nwkDataReqConfirm+0x1e>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    2cfc:	2d 91       	ld	r18, X+
    2cfe:	3c 91       	ld	r19, X
    2d00:	30 93 c7 04 	sts	0x04C7, r19	; 0x8004c7 <nwkDataReqQueue+0x1>
    2d04:	20 93 c6 04 	sts	0x04C6, r18	; 0x8004c6 <nwkDataReqQueue>
    2d08:	0b c0       	rjmp	.+22     	; 0x2d20 <nwkDataReqConfirm+0x32>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    2d0a:	df 01       	movw	r26, r30
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    2d0c:	ed 91       	ld	r30, X+
    2d0e:	fc 91       	ld	r31, X
    2d10:	11 97       	sbiw	r26, 0x01	; 1
    2d12:	8e 17       	cp	r24, r30
    2d14:	9f 07       	cpc	r25, r31
    2d16:	c9 f7       	brne	.-14     	; 0x2d0a <nwkDataReqConfirm+0x1c>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    2d18:	20 81       	ld	r18, Z
    2d1a:	31 81       	ldd	r19, Z+1	; 0x01
    2d1c:	2d 93       	st	X+, r18
    2d1e:	3c 93       	st	X, r19
  }

  nwkIb.lock--;
    2d20:	e9 e7       	ldi	r30, 0x79	; 121
    2d22:	fa e1       	ldi	r31, 0x1A	; 26
    2d24:	26 a1       	ldd	r18, Z+38	; 0x26
    2d26:	37 a1       	ldd	r19, Z+39	; 0x27
    2d28:	21 50       	subi	r18, 0x01	; 1
    2d2a:	31 09       	sbc	r19, r1
    2d2c:	37 a3       	std	Z+39, r19	; 0x27
    2d2e:	26 a3       	std	Z+38, r18	; 0x26
  req->confirm(req);
    2d30:	dc 01       	movw	r26, r24
    2d32:	1d 96       	adiw	r26, 0x0d	; 13
    2d34:	ed 91       	ld	r30, X+
    2d36:	fc 91       	ld	r31, X
    2d38:	1e 97       	sbiw	r26, 0x0e	; 14
    2d3a:	19 95       	eicall
    2d3c:	08 95       	ret

00002d3e <nwkDataReqSendFrame>:
/*************************************************************************//**
  @brief Prepares and send outgoing frame based on the request @a req parameters
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	cf 93       	push	r28
    2d44:	df 93       	push	r29
    2d46:	8c 01       	movw	r16, r24
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    2d48:	c6 d0       	rcall	.+396    	; 0x2ed6 <nwkFrameAlloc>
    2d4a:	ec 01       	movw	r28, r24
    2d4c:	00 97       	sbiw	r24, 0x00	; 0
    2d4e:	29 f4       	brne	.+10     	; 0x2d5a <nwkDataReqSendFrame+0x1c>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2d50:	82 e0       	ldi	r24, 0x02	; 2
    2d52:	f8 01       	movw	r30, r16
    2d54:	84 83       	std	Z+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    2d56:	87 87       	std	Z+15, r24	; 0x0f
    return;
    2d58:	50 c0       	rjmp	.+160    	; 0x2dfa <nwkDataReqSendFrame+0xbc>
  }

  req->frame = frame;
    2d5a:	f8 01       	movw	r30, r16
    2d5c:	93 83       	std	Z+3, r25	; 0x03
    2d5e:	82 83       	std	Z+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	84 83       	std	Z+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    2d64:	fe 01       	movw	r30, r28
    2d66:	e9 57       	subi	r30, 0x79	; 121
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	82 e0       	ldi	r24, 0x02	; 2
    2d6c:	97 e1       	ldi	r25, 0x17	; 23
    2d6e:	91 83       	std	Z+1, r25	; 0x01
    2d70:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    2d72:	f8 01       	movw	r30, r16
    2d74:	81 85       	ldd	r24, Z+9	; 0x09
    2d76:	82 fb       	bst	r24, 2
    2d78:	88 27       	eor	r24, r24
    2d7a:	80 f9       	bld	r24, 0
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	ea 57       	subi	r30, 0x7A	; 122
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    2d84:	f8 01       	movw	r30, r16
    2d86:	91 85       	ldd	r25, Z+9	; 0x09
    2d88:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d8a:	90 fb       	bst	r25, 0
    2d8c:	80 f9       	bld	r24, 0
    2d8e:	8b 87       	std	Y+11, r24	; 0x0b
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    2d90:	91 85       	ldd	r25, Z+9	; 0x09
    2d92:	93 fb       	bst	r25, 3
    2d94:	99 27       	eor	r25, r25
    2d96:	90 f9       	bld	r25, 0
    2d98:	90 fb       	bst	r25, 0
    2d9a:	82 f9       	bld	r24, 2
    2d9c:	8b 87       	std	Y+11, r24	; 0x0b
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    2d9e:	e9 e7       	ldi	r30, 0x79	; 121
    2da0:	fa e1       	ldi	r31, 0x1A	; 26
    2da2:	84 81       	ldd	r24, Z+4	; 0x04
    2da4:	8f 5f       	subi	r24, 0xFF	; 255
    2da6:	84 83       	std	Z+4, r24	; 0x04
    2da8:	8c 87       	std	Y+12, r24	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    2daa:	80 81       	ld	r24, Z
    2dac:	91 81       	ldd	r25, Z+1	; 0x01
    2dae:	9e 87       	std	Y+14, r25	; 0x0e
    2db0:	8d 87       	std	Y+13, r24	; 0x0d
  frame->header.nwkDstAddr = req->dstAddr;
    2db2:	f8 01       	movw	r30, r16
    2db4:	85 81       	ldd	r24, Z+5	; 0x05
    2db6:	96 81       	ldd	r25, Z+6	; 0x06
    2db8:	98 8b       	std	Y+16, r25	; 0x10
    2dba:	8f 87       	std	Y+15, r24	; 0x0f
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    2dbc:	80 85       	ldd	r24, Z+8	; 0x08
    2dbe:	98 2f       	mov	r25, r24
    2dc0:	9f 70       	andi	r25, 0x0F	; 15
    2dc2:	89 89       	ldd	r24, Y+17	; 0x11
    2dc4:	80 7f       	andi	r24, 0xF0	; 240
    2dc6:	89 2b       	or	r24, r25
    2dc8:	89 8b       	std	Y+17, r24	; 0x11
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    2dca:	97 81       	ldd	r25, Z+7	; 0x07
    2dcc:	92 95       	swap	r25
    2dce:	90 7f       	andi	r25, 0xF0	; 240
    2dd0:	8f 70       	andi	r24, 0x0F	; 15
    2dd2:	89 2b       	or	r24, r25
    2dd4:	89 8b       	std	Y+17, r24	; 0x11

  memcpy(frame->payload, req->data, req->size);
    2dd6:	44 85       	ldd	r20, Z+12	; 0x0c
    2dd8:	62 85       	ldd	r22, Z+10	; 0x0a
    2dda:	73 85       	ldd	r23, Z+11	; 0x0b
    2ddc:	fe 01       	movw	r30, r28
    2dde:	ef 57       	subi	r30, 0x7F	; 127
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	50 e0       	ldi	r21, 0x00	; 0
    2de4:	80 81       	ld	r24, Z
    2de6:	91 81       	ldd	r25, Z+1	; 0x01
    2de8:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <memcpy>
  frame->size += req->size;
    2dec:	f8 01       	movw	r30, r16
    2dee:	84 85       	ldd	r24, Z+12	; 0x0c
    2df0:	99 81       	ldd	r25, Y+1	; 0x01
    2df2:	89 0f       	add	r24, r25
    2df4:	89 83       	std	Y+1, r24	; 0x01

  nwkTxFrame(frame);
    2df6:	ce 01       	movw	r24, r28
    2df8:	b6 d5       	rcall	.+2924   	; 0x3966 <nwkTxFrame>
}
    2dfa:	df 91       	pop	r29
    2dfc:	cf 91       	pop	r28
    2dfe:	1f 91       	pop	r17
    2e00:	0f 91       	pop	r16
    2e02:	08 95       	ret

00002e04 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    2e04:	e0 91 c6 04 	lds	r30, 0x04C6	; 0x8004c6 <nwkDataReqQueue>
    2e08:	f0 91 c7 04 	lds	r31, 0x04C7	; 0x8004c7 <nwkDataReqQueue+0x1>
    2e0c:	13 c0       	rjmp	.+38     	; 0x2e34 <nwkDataReqTxConf+0x30>
  {
    if (req->frame == frame)
    2e0e:	22 81       	ldd	r18, Z+2	; 0x02
    2e10:	33 81       	ldd	r19, Z+3	; 0x03
    2e12:	28 17       	cp	r18, r24
    2e14:	39 07       	cpc	r19, r25
    2e16:	59 f4       	brne	.+22     	; 0x2e2e <nwkDataReqTxConf+0x2a>
    {
      req->status = frame->tx.status;
    2e18:	dc 01       	movw	r26, r24
    2e1a:	ad 57       	subi	r26, 0x7D	; 125
    2e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e1e:	2c 91       	ld	r18, X
    2e20:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    2e22:	13 96       	adiw	r26, 0x03	; 3
    2e24:	2c 91       	ld	r18, X
    2e26:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2e28:	22 e0       	ldi	r18, 0x02	; 2
    2e2a:	24 83       	std	Z+4, r18	; 0x04
      break;
    2e2c:	05 c0       	rjmp	.+10     	; 0x2e38 <nwkDataReqTxConf+0x34>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    2e2e:	01 90       	ld	r0, Z+
    2e30:	f0 81       	ld	r31, Z
    2e32:	e0 2d       	mov	r30, r0
    2e34:	30 97       	sbiw	r30, 0x00	; 0
    2e36:	59 f7       	brne	.-42     	; 0x2e0e <nwkDataReqTxConf+0xa>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    2e38:	7f c0       	rjmp	.+254    	; 0x2f38 <nwkFrameFree>
    2e3a:	08 95       	ret

00002e3c <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    2e3c:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <nwkDataReqQueue+0x1>
    2e40:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <nwkDataReqQueue>
    2e44:	08 95       	ret

00002e46 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    2e46:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    2e48:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    2e4a:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    2e4c:	13 82       	std	Z+3, r1	; 0x03
    2e4e:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    2e50:	a9 e7       	ldi	r26, 0x79	; 121
    2e52:	ba e1       	ldi	r27, 0x1A	; 26
    2e54:	96 96       	adiw	r26, 0x26	; 38
    2e56:	8d 91       	ld	r24, X+
    2e58:	9c 91       	ld	r25, X
    2e5a:	97 97       	sbiw	r26, 0x27	; 39
    2e5c:	01 96       	adiw	r24, 0x01	; 1
    2e5e:	97 96       	adiw	r26, 0x27	; 39
    2e60:	9c 93       	st	X, r25
    2e62:	8e 93       	st	-X, r24
    2e64:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
    2e66:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <nwkDataReqQueue>
    2e6a:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <nwkDataReqQueue+0x1>
    2e6e:	00 97       	sbiw	r24, 0x00	; 0
    2e70:	39 f4       	brne	.+14     	; 0x2e80 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    2e72:	11 82       	std	Z+1, r1	; 0x01
    2e74:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    2e76:	f0 93 c7 04 	sts	0x04C7, r31	; 0x8004c7 <nwkDataReqQueue+0x1>
    2e7a:	e0 93 c6 04 	sts	0x04C6, r30	; 0x8004c6 <nwkDataReqQueue>
    2e7e:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    2e80:	91 83       	std	Z+1, r25	; 0x01
    2e82:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    2e84:	f0 93 c7 04 	sts	0x04C7, r31	; 0x8004c7 <nwkDataReqQueue+0x1>
    2e88:	e0 93 c6 04 	sts	0x04C6, r30	; 0x8004c6 <nwkDataReqQueue>
    2e8c:	08 95       	ret

00002e8e <nwkDataReqTaskHandler>:
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    2e8e:	e0 91 c6 04 	lds	r30, 0x04C6	; 0x8004c6 <nwkDataReqQueue>
    2e92:	f0 91 c7 04 	lds	r31, 0x04C7	; 0x8004c7 <nwkDataReqQueue+0x1>
    2e96:	0f c0       	rjmp	.+30     	; 0x2eb6 <nwkDataReqTaskHandler+0x28>
  {
    switch (req->state)
    2e98:	84 81       	ldd	r24, Z+4	; 0x04
    2e9a:	88 23       	and	r24, r24
    2e9c:	19 f0       	breq	.+6      	; 0x2ea4 <nwkDataReqTaskHandler+0x16>
    2e9e:	82 30       	cpi	r24, 0x02	; 2
    2ea0:	21 f0       	breq	.+8      	; 0x2eaa <nwkDataReqTaskHandler+0x1c>
    2ea2:	06 c0       	rjmp	.+12     	; 0x2eb0 <nwkDataReqTaskHandler+0x22>
    {
      case NWK_DATA_REQ_STATE_INITIAL:
      {
        nwkDataReqSendFrame(req);
    2ea4:	cf 01       	movw	r24, r30
    2ea6:	4b cf       	rjmp	.-362    	; 0x2d3e <nwkDataReqSendFrame>
        return;
    2ea8:	08 95       	ret
      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;

      case NWK_DATA_REQ_STATE_CONFIRM:
      {
        nwkDataReqConfirm(req);
    2eaa:	cf 01       	movw	r24, r30
    2eac:	20 cf       	rjmp	.-448    	; 0x2cee <nwkDataReqConfirm>
        return;
    2eae:	08 95       	ret
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    2eb0:	01 90       	ld	r0, Z+
    2eb2:	f0 81       	ld	r31, Z
    2eb4:	e0 2d       	mov	r30, r0
    2eb6:	30 97       	sbiw	r30, 0x00	; 0
    2eb8:	79 f7       	brne	.-34     	; 0x2e98 <nwkDataReqTaskHandler+0xa>
    2eba:	08 95       	ret

00002ebc <nwkFrameInit>:
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	08 c0       	rjmp	.+16     	; 0x2ed0 <nwkFrameInit+0x14>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    2ec0:	99 e8       	ldi	r25, 0x89	; 137
    2ec2:	89 9f       	mul	r24, r25
    2ec4:	f0 01       	movw	r30, r0
    2ec6:	11 24       	eor	r1, r1
    2ec8:	e8 53       	subi	r30, 0x38	; 56
    2eca:	fb 4f       	sbci	r31, 0xFB	; 251
    2ecc:	10 82       	st	Z, r1
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    2ece:	8f 5f       	subi	r24, 0xFF	; 255
    2ed0:	8e 31       	cpi	r24, 0x1E	; 30
    2ed2:	b0 f3       	brcs	.-20     	; 0x2ec0 <nwkFrameInit+0x4>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    2ed4:	08 95       	ret

00002ed6 <nwkFrameAlloc>:
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	2a c0       	rjmp	.+84     	; 0x2f2e <nwkFrameAlloc+0x58>
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    2eda:	28 2f       	mov	r18, r24
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	99 e8       	ldi	r25, 0x89	; 137
    2ee0:	92 9f       	mul	r25, r18
    2ee2:	f0 01       	movw	r30, r0
    2ee4:	93 9f       	mul	r25, r19
    2ee6:	f0 0d       	add	r31, r0
    2ee8:	11 24       	eor	r1, r1
    2eea:	e8 53       	subi	r30, 0x38	; 56
    2eec:	fb 4f       	sbci	r31, 0xFB	; 251
    2eee:	90 81       	ld	r25, Z
    2ef0:	91 11       	cpse	r25, r1
    2ef2:	1c c0       	rjmp	.+56     	; 0x2f2c <nwkFrameAlloc+0x56>
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    2ef4:	69 e8       	ldi	r22, 0x89	; 137
    2ef6:	62 9f       	mul	r22, r18
    2ef8:	a0 01       	movw	r20, r0
    2efa:	63 9f       	mul	r22, r19
    2efc:	50 0d       	add	r21, r0
    2efe:	11 24       	eor	r1, r1
    2f00:	cf 01       	movw	r24, r30
    2f02:	11 92       	st	Z+, r1
    2f04:	6a 95       	dec	r22
    2f06:	e9 f7       	brne	.-6      	; 0x2f02 <nwkFrameAlloc+0x2c>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    2f08:	20 e1       	ldi	r18, 0x10	; 16
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	21 83       	std	Z+1, r18	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    2f0e:	46 52       	subi	r20, 0x26	; 38
    2f10:	5b 4f       	sbci	r21, 0xFB	; 251
    2f12:	ef 57       	subi	r30, 0x7F	; 127
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	51 83       	std	Z+1, r21	; 0x01
    2f18:	40 83       	st	Z, r20
      nwkIb.lock++;
    2f1a:	e9 e7       	ldi	r30, 0x79	; 121
    2f1c:	fa e1       	ldi	r31, 0x1A	; 26
    2f1e:	26 a1       	ldd	r18, Z+38	; 0x26
    2f20:	37 a1       	ldd	r19, Z+39	; 0x27
    2f22:	2f 5f       	subi	r18, 0xFF	; 255
    2f24:	3f 4f       	sbci	r19, 0xFF	; 255
    2f26:	37 a3       	std	Z+39, r19	; 0x27
    2f28:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    2f2a:	08 95       	ret
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    2f2c:	8f 5f       	subi	r24, 0xFF	; 255
    2f2e:	8e 31       	cpi	r24, 0x1E	; 30
    2f30:	a0 f2       	brcs	.-88     	; 0x2eda <nwkFrameAlloc+0x4>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	90 e0       	ldi	r25, 0x00	; 0
}
    2f36:	08 95       	ret

00002f38 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    2f38:	fc 01       	movw	r30, r24
    2f3a:	10 82       	st	Z, r1
  nwkIb.lock--;
    2f3c:	e9 e7       	ldi	r30, 0x79	; 121
    2f3e:	fa e1       	ldi	r31, 0x1A	; 26
    2f40:	86 a1       	ldd	r24, Z+38	; 0x26
    2f42:	97 a1       	ldd	r25, Z+39	; 0x27
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	97 a3       	std	Z+39, r25	; 0x27
    2f48:	86 a3       	std	Z+38, r24	; 0x26
    2f4a:	08 95       	ret

00002f4c <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    2f4c:	00 97       	sbiw	r24, 0x00	; 0
    2f4e:	21 f0       	breq	.+8      	; 0x2f58 <nwkFrameNext+0xc>
    frame = nwkFrameFrames;
  else
    frame++;
    2f50:	fc 01       	movw	r30, r24
    2f52:	e7 57       	subi	r30, 0x77	; 119
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	08 c0       	rjmp	.+16     	; 0x2f68 <nwkFrameNext+0x1c>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    2f58:	e8 ec       	ldi	r30, 0xC8	; 200
    2f5a:	f4 e0       	ldi	r31, 0x04	; 4
    2f5c:	05 c0       	rjmp	.+10     	; 0x2f68 <nwkFrameNext+0x1c>
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    2f5e:	80 81       	ld	r24, Z
    2f60:	81 11       	cpse	r24, r1
    2f62:	09 c0       	rjmp	.+18     	; 0x2f76 <nwkFrameNext+0x2a>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    2f64:	e7 57       	subi	r30, 0x77	; 119
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	84 e1       	ldi	r24, 0x14	; 20
    2f6a:	e6 3d       	cpi	r30, 0xD6	; 214
    2f6c:	f8 07       	cpc	r31, r24
    2f6e:	b8 f3       	brcs	.-18     	; 0x2f5e <nwkFrameNext+0x12>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	08 95       	ret
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
    2f76:	8e 2f       	mov	r24, r30
    2f78:	9f 2f       	mov	r25, r31
  }

  return NULL;
}
    2f7a:	08 95       	ret

00002f7c <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    2f7c:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    2f7e:	dc 01       	movw	r26, r24
    2f80:	ad 57       	subi	r26, 0x7D	; 125
    2f82:	bf 4f       	sbci	r27, 0xFF	; 255
    2f84:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    2f86:	a9 e7       	ldi	r26, 0x79	; 121
    2f88:	ba e1       	ldi	r27, 0x1A	; 26
    2f8a:	14 96       	adiw	r26, 0x04	; 4
    2f8c:	9c 91       	ld	r25, X
    2f8e:	14 97       	sbiw	r26, 0x04	; 4
    2f90:	9f 5f       	subi	r25, 0xFF	; 255
    2f92:	14 96       	adiw	r26, 0x04	; 4
    2f94:	9c 93       	st	X, r25
    2f96:	14 97       	sbiw	r26, 0x04	; 4
    2f98:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    2f9a:	8d 91       	ld	r24, X+
    2f9c:	9c 91       	ld	r25, X
    2f9e:	96 87       	std	Z+14, r25	; 0x0e
    2fa0:	85 87       	std	Z+13, r24	; 0x0d
    2fa2:	08 95       	ret

00002fa4 <nwkRouteNormalizeRanks>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	12 c0       	rjmp	.+36     	; 0x2fcc <nwkRouteNormalizeRanks+0x28>
    2fa8:	29 2f       	mov	r18, r25
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	f9 01       	movw	r30, r18
    2fae:	ee 0f       	add	r30, r30
    2fb0:	ff 1f       	adc	r31, r31
    2fb2:	ee 0f       	add	r30, r30
    2fb4:	ff 1f       	adc	r31, r31
    2fb6:	ee 0f       	add	r30, r30
    2fb8:	ff 1f       	adc	r31, r31
    2fba:	e2 1b       	sub	r30, r18
    2fbc:	f3 0b       	sbc	r31, r19
    2fbe:	ea 52       	subi	r30, 0x2A	; 42
    2fc0:	fb 4e       	sbci	r31, 0xEB	; 235
    2fc2:	85 81       	ldd	r24, Z+5	; 0x05
    2fc4:	86 95       	lsr	r24
    2fc6:	8f 5f       	subi	r24, 0xFF	; 255
    2fc8:	85 83       	std	Z+5, r24	; 0x05
    2fca:	9f 5f       	subi	r25, 0xFF	; 255
    2fcc:	94 36       	cpi	r25, 0x64	; 100
    2fce:	60 f3       	brcs	.-40     	; 0x2fa8 <nwkRouteNormalizeRanks+0x4>
    2fd0:	08 95       	ret

00002fd2 <nwkRouteSendRouteError>:
    2fd2:	df 92       	push	r13
    2fd4:	ef 92       	push	r14
    2fd6:	ff 92       	push	r15
    2fd8:	0f 93       	push	r16
    2fda:	1f 93       	push	r17
    2fdc:	cf 93       	push	r28
    2fde:	df 93       	push	r29
    2fe0:	8c 01       	movw	r16, r24
    2fe2:	7b 01       	movw	r14, r22
    2fe4:	d4 2e       	mov	r13, r20
    2fe6:	77 df       	rcall	.-274    	; 0x2ed6 <nwkFrameAlloc>
    2fe8:	ec 01       	movw	r28, r24
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	c1 f0       	breq	.+48     	; 0x301e <nwkRouteSendRouteError+0x4c>
    2fee:	c6 df       	rcall	.-116    	; 0x2f7c <nwkFrameCommandInit>
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	8a 5f       	subi	r24, 0xFA	; 250
    2ff4:	89 83       	std	Y+1, r24	; 0x01
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e9 57       	subi	r30, 0x79	; 121
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	11 82       	std	Z+1, r1	; 0x01
    2ffe:	10 82       	st	Z, r1
    3000:	18 8b       	std	Y+16, r17	; 0x10
    3002:	0f 87       	std	Y+15, r16	; 0x0f
    3004:	36 97       	sbiw	r30, 0x06	; 6
    3006:	01 90       	ld	r0, Z+
    3008:	f0 81       	ld	r31, Z
    300a:	e0 2d       	mov	r30, r0
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	80 83       	st	Z, r24
    3010:	12 83       	std	Z+2, r17	; 0x02
    3012:	01 83       	std	Z+1, r16	; 0x01
    3014:	f4 82       	std	Z+4, r15	; 0x04
    3016:	e3 82       	std	Z+3, r14	; 0x03
    3018:	d5 82       	std	Z+5, r13	; 0x05
    301a:	ce 01       	movw	r24, r28
    301c:	a4 d4       	rcall	.+2376   	; 0x3966 <nwkTxFrame>
    301e:	df 91       	pop	r29
    3020:	cf 91       	pop	r28
    3022:	1f 91       	pop	r17
    3024:	0f 91       	pop	r16
    3026:	ff 90       	pop	r15
    3028:	ef 90       	pop	r14
    302a:	df 90       	pop	r13
    302c:	08 95       	ret

0000302e <nwkRouteInit>:
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	16 c0       	rjmp	.+44     	; 0x305e <nwkRouteInit+0x30>
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	f9 01       	movw	r30, r18
    3038:	ee 0f       	add	r30, r30
    303a:	ff 1f       	adc	r31, r31
    303c:	ee 0f       	add	r30, r30
    303e:	ff 1f       	adc	r31, r31
    3040:	ee 0f       	add	r30, r30
    3042:	ff 1f       	adc	r31, r31
    3044:	e2 1b       	sub	r30, r18
    3046:	f3 0b       	sbc	r31, r19
    3048:	ea 52       	subi	r30, 0x2A	; 42
    304a:	fb 4e       	sbci	r31, 0xEB	; 235
    304c:	2f ef       	ldi	r18, 0xFF	; 255
    304e:	3f ef       	ldi	r19, 0xFF	; 255
    3050:	32 83       	std	Z+2, r19	; 0x02
    3052:	21 83       	std	Z+1, r18	; 0x01
    3054:	90 81       	ld	r25, Z
    3056:	9e 7f       	andi	r25, 0xFE	; 254
    3058:	90 83       	st	Z, r25
    305a:	15 82       	std	Z+5, r1	; 0x05
    305c:	8f 5f       	subi	r24, 0xFF	; 255
    305e:	84 36       	cpi	r24, 0x64	; 100
    3060:	40 f3       	brcs	.-48     	; 0x3032 <nwkRouteInit+0x4>
    3062:	08 95       	ret

00003064 <NWK_RouteFindEntry>:
    3064:	cf 93       	push	r28
    3066:	df 93       	push	r29
    3068:	ec 01       	movw	r28, r24
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	2a c0       	rjmp	.+84     	; 0x30c2 <NWK_RouteFindEntry+0x5e>
    306e:	29 2f       	mov	r18, r25
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	f9 01       	movw	r30, r18
    3074:	ee 0f       	add	r30, r30
    3076:	ff 1f       	adc	r31, r31
    3078:	ee 0f       	add	r30, r30
    307a:	ff 1f       	adc	r31, r31
    307c:	ee 0f       	add	r30, r30
    307e:	ff 1f       	adc	r31, r31
    3080:	e2 1b       	sub	r30, r18
    3082:	f3 0b       	sbc	r31, r19
    3084:	ea 52       	subi	r30, 0x2A	; 42
    3086:	fb 4e       	sbci	r31, 0xEB	; 235
    3088:	41 81       	ldd	r20, Z+1	; 0x01
    308a:	52 81       	ldd	r21, Z+2	; 0x02
    308c:	4c 17       	cp	r20, r28
    308e:	5d 07       	cpc	r21, r29
    3090:	b9 f4       	brne	.+46     	; 0x30c0 <NWK_RouteFindEntry+0x5c>
    3092:	f9 01       	movw	r30, r18
    3094:	ee 0f       	add	r30, r30
    3096:	ff 1f       	adc	r31, r31
    3098:	ee 0f       	add	r30, r30
    309a:	ff 1f       	adc	r31, r31
    309c:	ee 0f       	add	r30, r30
    309e:	ff 1f       	adc	r31, r31
    30a0:	e2 1b       	sub	r30, r18
    30a2:	f3 0b       	sbc	r31, r19
    30a4:	ea 52       	subi	r30, 0x2A	; 42
    30a6:	fb 4e       	sbci	r31, 0xEB	; 235
    30a8:	80 81       	ld	r24, Z
    30aa:	81 fb       	bst	r24, 1
    30ac:	aa 27       	eor	r26, r26
    30ae:	a0 f9       	bld	r26, 0
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	46 2f       	mov	r20, r22
    30b4:	50 e0       	ldi	r21, 0x00	; 0
    30b6:	a4 17       	cp	r26, r20
    30b8:	b5 07       	cpc	r27, r21
    30ba:	11 f4       	brne	.+4      	; 0x30c0 <NWK_RouteFindEntry+0x5c>
    30bc:	cf 01       	movw	r24, r30
    30be:	05 c0       	rjmp	.+10     	; 0x30ca <NWK_RouteFindEntry+0x66>
    30c0:	9f 5f       	subi	r25, 0xFF	; 255
    30c2:	94 36       	cpi	r25, 0x64	; 100
    30c4:	a0 f2       	brcs	.-88     	; 0x306e <NWK_RouteFindEntry+0xa>
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	08 95       	ret

000030d0 <NWK_RouteNewEntry>:
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	a0 e0       	ldi	r26, 0x00	; 0
    30d4:	b0 e0       	ldi	r27, 0x00	; 0
    30d6:	e6 ed       	ldi	r30, 0xD6	; 214
    30d8:	f4 e1       	ldi	r31, 0x14	; 20
    30da:	13 c0       	rjmp	.+38     	; 0x3102 <NWK_RouteNewEntry+0x32>
    30dc:	90 81       	ld	r25, Z
    30de:	90 fd       	sbrc	r25, 0
    30e0:	0e c0       	rjmp	.+28     	; 0x30fe <NWK_RouteNewEntry+0x2e>
    30e2:	95 81       	ldd	r25, Z+5	; 0x05
    30e4:	99 23       	and	r25, r25
    30e6:	81 f0       	breq	.+32     	; 0x3108 <NWK_RouteNewEntry+0x38>
    30e8:	10 97       	sbiw	r26, 0x00	; 0
    30ea:	31 f0       	breq	.+12     	; 0x30f8 <NWK_RouteNewEntry+0x28>
    30ec:	15 96       	adiw	r26, 0x05	; 5
    30ee:	2c 91       	ld	r18, X
    30f0:	15 97       	sbiw	r26, 0x05	; 5
    30f2:	92 17       	cp	r25, r18
    30f4:	18 f0       	brcs	.+6      	; 0x30fc <NWK_RouteNewEntry+0x2c>
    30f6:	03 c0       	rjmp	.+6      	; 0x30fe <NWK_RouteNewEntry+0x2e>
    30f8:	df 01       	movw	r26, r30
    30fa:	01 c0       	rjmp	.+2      	; 0x30fe <NWK_RouteNewEntry+0x2e>
    30fc:	df 01       	movw	r26, r30
    30fe:	8f 5f       	subi	r24, 0xFF	; 255
    3100:	37 96       	adiw	r30, 0x07	; 7
    3102:	84 36       	cpi	r24, 0x64	; 100
    3104:	58 f3       	brcs	.-42     	; 0x30dc <NWK_RouteNewEntry+0xc>
    3106:	fd 01       	movw	r30, r26
    3108:	80 81       	ld	r24, Z
    310a:	8d 70       	andi	r24, 0x0D	; 13
    310c:	80 63       	ori	r24, 0x30	; 48
    310e:	80 83       	st	Z, r24
    3110:	80 e8       	ldi	r24, 0x80	; 128
    3112:	85 83       	std	Z+5, r24	; 0x05
    3114:	cf 01       	movw	r24, r30
    3116:	08 95       	ret

00003118 <NWK_RouteFreeEntry>:
    3118:	fc 01       	movw	r30, r24
    311a:	80 81       	ld	r24, Z
    311c:	80 fd       	sbrc	r24, 0
    311e:	05 c0       	rjmp	.+10     	; 0x312a <NWK_RouteFreeEntry+0x12>
    3120:	8f ef       	ldi	r24, 0xFF	; 255
    3122:	9f ef       	ldi	r25, 0xFF	; 255
    3124:	92 83       	std	Z+2, r25	; 0x02
    3126:	81 83       	std	Z+1, r24	; 0x01
    3128:	15 82       	std	Z+5, r1	; 0x05
    312a:	08 95       	ret

0000312c <NWK_RouteNextHop>:
    312c:	9b df       	rcall	.-202    	; 0x3064 <NWK_RouteFindEntry>
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	21 f0       	breq	.+8      	; 0x313a <NWK_RouteNextHop+0xe>
    3132:	fc 01       	movw	r30, r24
    3134:	83 81       	ldd	r24, Z+3	; 0x03
    3136:	94 81       	ldd	r25, Z+4	; 0x04
    3138:	08 95       	ret
    313a:	8f ef       	ldi	r24, 0xFF	; 255
    313c:	9f ef       	ldi	r25, 0xFF	; 255
    313e:	08 95       	ret

00003140 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    3140:	91 df       	rcall	.-222    	; 0x3064 <NWK_RouteFindEntry>
  if (entry)
    3142:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
    3144:	09 f0       	breq	.+2      	; 0x3148 <nwkRouteRemove+0x8>
    3146:	e8 cf       	rjmp	.-48     	; 0x3118 <NWK_RouteFreeEntry>
    3148:	08 95       	ret

0000314a <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    314a:	0f 93       	push	r16
    314c:	1f 93       	push	r17
    314e:	cf 93       	push	r28
    3150:	df 93       	push	r29
    3152:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    3154:	01 85       	ldd	r16, Z+9	; 0x09
    3156:	12 85       	ldd	r17, Z+10	; 0x0a
    3158:	11 23       	and	r17, r17
    315a:	34 f4       	brge	.+12     	; 0x3168 <nwkRouteFrameReceived+0x1e>
      (header->macSrcAddr != header->nwkSrcAddr))
    315c:	85 85       	ldd	r24, Z+13	; 0x0d
    315e:	96 85       	ldd	r25, Z+14	; 0x0e
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    3160:	08 17       	cp	r16, r24
    3162:	19 07       	cpc	r17, r25
    3164:	09 f0       	breq	.+2      	; 0x3168 <nwkRouteFrameReceived+0x1e>
    3166:	50 c0       	rjmp	.+160    	; 0x3208 <nwkRouteFrameReceived+0xbe>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    3168:	85 81       	ldd	r24, Z+5	; 0x05
    316a:	96 81       	ldd	r25, Z+6	; 0x06
    316c:	01 96       	adiw	r24, 0x01	; 1
    316e:	09 f4       	brne	.+2      	; 0x3172 <nwkRouteFrameReceived+0x28>
    3170:	4b c0       	rjmp	.+150    	; 0x3208 <nwkRouteFrameReceived+0xbe>
    3172:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    3174:	60 e0       	ldi	r22, 0x00	; 0
    3176:	85 85       	ldd	r24, Z+13	; 0x0d
    3178:	96 85       	ldd	r25, Z+14	; 0x0e
    317a:	74 df       	rcall	.-280    	; 0x3064 <NWK_RouteFindEntry>
    317c:	dc 01       	movw	r26, r24

  if (entry)
    317e:	89 2b       	or	r24, r25
    3180:	79 f1       	breq	.+94     	; 0x31e0 <nwkRouteFrameReceived+0x96>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    3182:	8f 81       	ldd	r24, Y+7	; 0x07
    3184:	98 85       	ldd	r25, Y+8	; 0x08
    3186:	01 96       	adiw	r24, 0x01	; 1
    3188:	59 f4       	brne	.+22     	; 0x31a0 <nwkRouteFrameReceived+0x56>
        nwkIb.addr == header->nwkDstAddr);
    318a:	20 91 79 1a 	lds	r18, 0x1A79	; 0x801a79 <nwkIb>
    318e:	30 91 7a 1a 	lds	r19, 0x1A7A	; 0x801a7a <nwkIb+0x1>
    3192:	8f 85       	ldd	r24, Y+15	; 0x0f
    3194:	98 89       	ldd	r25, Y+16	; 0x10

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    3196:	28 17       	cp	r18, r24
    3198:	39 07       	cpc	r19, r25
    319a:	21 f0       	breq	.+8      	; 0x31a4 <nwkRouteFrameReceived+0x5a>
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	03 c0       	rjmp	.+6      	; 0x31a6 <nwkRouteFrameReceived+0x5c>
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	01 c0       	rjmp	.+2      	; 0x31a6 <nwkRouteFrameReceived+0x5c>
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	98 2f       	mov	r25, r24
    31a8:	91 70       	andi	r25, 0x01	; 1
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    31aa:	13 96       	adiw	r26, 0x03	; 3
    31ac:	2d 91       	ld	r18, X+
    31ae:	3c 91       	ld	r19, X
    31b0:	14 97       	sbiw	r26, 0x04	; 4
    31b2:	02 17       	cp	r16, r18
    31b4:	13 07       	cpc	r17, r19
    31b6:	49 f0       	breq	.+18     	; 0x31ca <nwkRouteFrameReceived+0x80>
    31b8:	fe 01       	movw	r30, r28
    31ba:	ed 57       	subi	r30, 0x7D	; 125
    31bc:	ff 4f       	sbci	r31, 0xFF	; 255
    31be:	20 81       	ld	r18, Z
    31c0:	16 96       	adiw	r26, 0x06	; 6
    31c2:	8c 91       	ld	r24, X
    31c4:	16 97       	sbiw	r26, 0x06	; 6
    31c6:	82 17       	cp	r24, r18
    31c8:	10 f0       	brcs	.+4      	; 0x31ce <nwkRouteFrameReceived+0x84>
    31ca:	99 23       	and	r25, r25
    31cc:	b9 f0       	breq	.+46     	; 0x31fc <nwkRouteFrameReceived+0xb2>
    {
      entry->nextHopAddr = header->macSrcAddr;
    31ce:	14 96       	adiw	r26, 0x04	; 4
    31d0:	1c 93       	st	X, r17
    31d2:	0e 93       	st	-X, r16
    31d4:	13 97       	sbiw	r26, 0x03	; 3
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    31d6:	8c 91       	ld	r24, X
    31d8:	8f 70       	andi	r24, 0x0F	; 15
    31da:	80 63       	ori	r24, 0x30	; 48
    31dc:	8c 93       	st	X, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    31de:	0e c0       	rjmp	.+28     	; 0x31fc <nwkRouteFrameReceived+0xb2>
    31e0:	77 df       	rcall	.-274    	; 0x30d0 <NWK_RouteNewEntry>
    31e2:	dc 01       	movw	r26, r24

    entry->dstAddr = header->nwkSrcAddr;
    31e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e8:	12 96       	adiw	r26, 0x02	; 2
    31ea:	9c 93       	st	X, r25
    31ec:	8e 93       	st	-X, r24
    31ee:	11 97       	sbiw	r26, 0x01	; 1
    entry->nextHopAddr = header->macSrcAddr;
    31f0:	89 85       	ldd	r24, Y+9	; 0x09
    31f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f4:	14 96       	adiw	r26, 0x04	; 4
    31f6:	9c 93       	st	X, r25
    31f8:	8e 93       	st	-X, r24
    31fa:	13 97       	sbiw	r26, 0x03	; 3
  }

  entry->lqi = frame->rx.lqi;
    31fc:	fe 01       	movw	r30, r28
    31fe:	ed 57       	subi	r30, 0x7D	; 125
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	80 81       	ld	r24, Z
    3204:	16 96       	adiw	r26, 0x06	; 6
    3206:	8c 93       	st	X, r24
#else
  (void)frame;
#endif
}
    3208:	df 91       	pop	r29
    320a:	cf 91       	pop	r28
    320c:	1f 91       	pop	r17
    320e:	0f 91       	pop	r16
    3210:	08 95       	ret

00003212 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    3216:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    3218:	87 85       	ldd	r24, Z+15	; 0x0f
    321a:	90 89       	ldd	r25, Z+16	; 0x10
    321c:	8f 3f       	cpi	r24, 0xFF	; 255
    321e:	2f ef       	ldi	r18, 0xFF	; 255
    3220:	92 07       	cpc	r25, r18
    3222:	81 f1       	breq	.+96     	; 0x3284 <nwkRouteFrameSent+0x72>
    3224:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    3226:	63 85       	ldd	r22, Z+11	; 0x0b
    3228:	63 fb       	bst	r22, 3
    322a:	66 27       	eor	r22, r22
    322c:	60 f9       	bld	r22, 0
    322e:	1a df       	rcall	.-460    	; 0x3064 <NWK_RouteFindEntry>
    3230:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
    3232:	89 2b       	or	r24, r25
    3234:	39 f1       	breq	.+78     	; 0x3284 <nwkRouteFrameSent+0x72>
    3236:	8c 91       	ld	r24, X
    3238:	80 fd       	sbrc	r24, 0
    323a:	24 c0       	rjmp	.+72     	; 0x3284 <nwkRouteFrameSent+0x72>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    323c:	fe 01       	movw	r30, r28
    323e:	ed 57       	subi	r30, 0x7D	; 125
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	80 81       	ld	r24, Z
    3244:	81 11       	cpse	r24, r1
    3246:	0e c0       	rjmp	.+28     	; 0x3264 <nwkRouteFrameSent+0x52>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    3248:	8c 91       	ld	r24, X
    324a:	8f 70       	andi	r24, 0x0F	; 15
    324c:	80 63       	ori	r24, 0x30	; 48
    324e:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    3250:	15 96       	adiw	r26, 0x05	; 5
    3252:	8c 91       	ld	r24, X
    3254:	15 97       	sbiw	r26, 0x05	; 5
    3256:	8f 5f       	subi	r24, 0xFF	; 255
    3258:	15 96       	adiw	r26, 0x05	; 5
    325a:	8c 93       	st	X, r24
    325c:	8f 3f       	cpi	r24, 0xFF	; 255
      nwkRouteNormalizeRanks();
    325e:	91 f4       	brne	.+36     	; 0x3284 <nwkRouteFrameSent+0x72>
    3260:	a1 de       	rcall	.-702    	; 0x2fa4 <nwkRouteNormalizeRanks>
    3262:	10 c0       	rjmp	.+32     	; 0x3284 <nwkRouteFrameSent+0x72>
  }
  else
  {
    if (0 == --entry->score)
    3264:	9c 91       	ld	r25, X
    3266:	89 2f       	mov	r24, r25
    3268:	82 95       	swap	r24
    326a:	8f 70       	andi	r24, 0x0F	; 15
    326c:	81 5f       	subi	r24, 0xF1	; 241
    326e:	8f 70       	andi	r24, 0x0F	; 15
    3270:	28 2f       	mov	r18, r24
    3272:	22 95       	swap	r18
    3274:	20 7f       	andi	r18, 0xF0	; 240
    3276:	9f 70       	andi	r25, 0x0F	; 15
    3278:	92 2b       	or	r25, r18
    327a:	9c 93       	st	X, r25
    327c:	81 11       	cpse	r24, r1
      NWK_RouteFreeEntry(entry);
    327e:	02 c0       	rjmp	.+4      	; 0x3284 <nwkRouteFrameSent+0x72>
    3280:	cd 01       	movw	r24, r26
    3282:	4a df       	rcall	.-364    	; 0x3118 <NWK_RouteFreeEntry>
  }
}
    3284:	df 91       	pop	r29
    3286:	cf 91       	pop	r28
    3288:	08 95       	ret

0000328a <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    3290:	87 85       	ldd	r24, Z+15	; 0x0f
    3292:	90 89       	ldd	r25, Z+16	; 0x10
    3294:	8f 3f       	cpi	r24, 0xFF	; 255
    3296:	2f ef       	ldi	r18, 0xFF	; 255
    3298:	92 07       	cpc	r25, r18
    329a:	29 f4       	brne	.+10     	; 0x32a6 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    329c:	8f ef       	ldi	r24, 0xFF	; 255
    329e:	9f ef       	ldi	r25, 0xFF	; 255
    32a0:	90 87       	std	Z+8, r25	; 0x08
    32a2:	87 83       	std	Z+7, r24	; 0x07
    32a4:	0e c0       	rjmp	.+28     	; 0x32c2 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
    32a6:	23 85       	ldd	r18, Z+11	; 0x0b
    32a8:	22 ff       	sbrs	r18, 2
    32aa:	03 c0       	rjmp	.+6      	; 0x32b2 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
    32ac:	90 87       	std	Z+8, r25	; 0x08
    32ae:	87 83       	std	Z+7, r24	; 0x07
    32b0:	08 c0       	rjmp	.+16     	; 0x32c2 <nwkRoutePrepareTx+0x38>
    32b2:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    32b4:	63 85       	ldd	r22, Z+11	; 0x0b
    32b6:	63 fb       	bst	r22, 3
    32b8:	66 27       	eor	r22, r22
    32ba:	60 f9       	bld	r22, 0
    32bc:	37 df       	rcall	.-402    	; 0x312c <NWK_RouteNextHop>
    32be:	98 87       	std	Y+8, r25	; 0x08
    32c0:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    32c2:	df 91       	pop	r29
    32c4:	cf 91       	pop	r28
    32c6:	08 95       	ret

000032c8 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    32c8:	ef 92       	push	r14
    32ca:	ff 92       	push	r15
    32cc:	1f 93       	push	r17
    32ce:	cf 93       	push	r28
    32d0:	df 93       	push	r29
    32d2:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    32d4:	1b 85       	ldd	r17, Y+11	; 0x0b
    32d6:	13 fb       	bst	r17, 3
    32d8:	11 27       	eor	r17, r17
    32da:	10 f9       	bld	r17, 0
    32dc:	ef 84       	ldd	r14, Y+15	; 0x0f
    32de:	f8 88       	ldd	r15, Y+16	; 0x10
    32e0:	61 2f       	mov	r22, r17
    32e2:	c7 01       	movw	r24, r14
    32e4:	23 df       	rcall	.-442    	; 0x312c <NWK_RouteNextHop>
    32e6:	01 96       	adiw	r24, 0x01	; 1
    32e8:	59 f0       	breq	.+22     	; 0x3300 <nwkRouteFrame+0x38>
  {
    frame->tx.confirm = NULL;
    32ea:	fe 01       	movw	r30, r28
    32ec:	e9 57       	subi	r30, 0x79	; 121
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	11 82       	std	Z+1, r1	; 0x01
    32f2:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    32f4:	31 97       	sbiw	r30, 0x01	; 1
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    32fa:	ce 01       	movw	r24, r28
    32fc:	34 d3       	rcall	.+1640   	; 0x3966 <nwkTxFrame>
    32fe:	07 c0       	rjmp	.+14     	; 0x330e <nwkRouteFrame+0x46>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    3300:	41 2f       	mov	r20, r17
    3302:	b7 01       	movw	r22, r14
    3304:	8d 85       	ldd	r24, Y+13	; 0x0d
    3306:	9e 85       	ldd	r25, Y+14	; 0x0e
    nwkFrameFree(frame);
    3308:	64 de       	rcall	.-824    	; 0x2fd2 <nwkRouteSendRouteError>
    330a:	ce 01       	movw	r24, r28
    330c:	15 de       	rcall	.-982    	; 0x2f38 <nwkFrameFree>
  }
}
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	1f 91       	pop	r17
    3314:	ff 90       	pop	r15
    3316:	ef 90       	pop	r14
    3318:	08 95       	ret

0000331a <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    331a:	dc 01       	movw	r26, r24
    331c:	17 96       	adiw	r26, 0x07	; 7
    331e:	ed 91       	ld	r30, X+
    3320:	fc 91       	ld	r31, X
    3322:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    3324:	19 96       	adiw	r26, 0x09	; 9
    3326:	8c 91       	ld	r24, X
    3328:	86 30       	cpi	r24, 0x06	; 6
    332a:	31 f4       	brne	.+12     	; 0x3338 <nwkRouteErrorReceived+0x1e>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    332c:	65 81       	ldd	r22, Z+5	; 0x05
    332e:	83 81       	ldd	r24, Z+3	; 0x03
    3330:	94 81       	ldd	r25, Z+4	; 0x04
    3332:	06 df       	rcall	.-500    	; 0x3140 <nwkRouteRemove>

  return true;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    3338:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    333a:	08 95       	ret

0000333c <nwkRxIndicateFrame>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    333c:	ef 92       	push	r14
    333e:	ff 92       	push	r15
    3340:	0f 93       	push	r16
    3342:	1f 93       	push	r17
    3344:	cf 93       	push	r28
    3346:	df 93       	push	r29
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    334c:	2c 97       	sbiw	r28, 0x0c	; 12
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	de bf       	out	0x3e, r29	; 62
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	cd bf       	out	0x3d, r28	; 61
    3358:	dc 01       	movw	r26, r24
    335a:	51 96       	adiw	r26, 0x11	; 17
    335c:	8c 91       	ld	r24, X
    335e:	51 97       	sbiw	r26, 0x11	; 17
    3360:	82 95       	swap	r24
    3362:	8f 70       	andi	r24, 0x0F	; 15
    3364:	e8 2f       	mov	r30, r24
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	33 96       	adiw	r30, 0x03	; 3
    336a:	ee 0f       	add	r30, r30
    336c:	ff 1f       	adc	r31, r31
    336e:	e7 58       	subi	r30, 0x87	; 135
    3370:	f5 4e       	sbci	r31, 0xE5	; 229
    3372:	e0 80       	ld	r14, Z
    3374:	f1 80       	ldd	r15, Z+1	; 0x01
    3376:	e1 14       	cp	r14, r1
    3378:	f1 04       	cpc	r15, r1
    337a:	09 f4       	brne	.+2      	; 0x337e <nwkRxIndicateFrame+0x42>
    337c:	67 c0       	rjmp	.+206    	; 0x344c <nwkRxIndicateFrame+0x110>
    337e:	1d 96       	adiw	r26, 0x0d	; 13
    3380:	4d 91       	ld	r20, X+
    3382:	5c 91       	ld	r21, X
    3384:	1e 97       	sbiw	r26, 0x0e	; 14
    3386:	5a 83       	std	Y+2, r21	; 0x02
    3388:	49 83       	std	Y+1, r20	; 0x01
    338a:	1f 96       	adiw	r26, 0x0f	; 15
    338c:	6d 91       	ld	r22, X+
    338e:	7c 91       	ld	r23, X
    3390:	50 97       	sbiw	r26, 0x10	; 16
    3392:	7c 83       	std	Y+4, r23	; 0x04
    3394:	6b 83       	std	Y+3, r22	; 0x03
    3396:	51 96       	adiw	r26, 0x11	; 17
    3398:	9c 91       	ld	r25, X
    339a:	51 97       	sbiw	r26, 0x11	; 17
    339c:	9f 70       	andi	r25, 0x0F	; 15
    339e:	9d 83       	std	Y+5, r25	; 0x05
    33a0:	8e 83       	std	Y+6, r24	; 0x06
    33a2:	cd 01       	movw	r24, r26
    33a4:	8f 57       	subi	r24, 0x7F	; 127
    33a6:	9f 4f       	sbci	r25, 0xFF	; 255
    33a8:	fc 01       	movw	r30, r24
    33aa:	80 81       	ld	r24, Z
    33ac:	91 81       	ldd	r25, Z+1	; 0x01
    33ae:	99 87       	std	Y+9, r25	; 0x09
    33b0:	88 87       	std	Y+8, r24	; 0x08
    33b2:	11 96       	adiw	r26, 0x01	; 1
    33b4:	2c 91       	ld	r18, X
    33b6:	11 97       	sbiw	r26, 0x01	; 1
    33b8:	8d 01       	movw	r16, r26
    33ba:	0e 5f       	subi	r16, 0xFE	; 254
    33bc:	1f 4f       	sbci	r17, 0xFF	; 255
    33be:	80 1b       	sub	r24, r16
    33c0:	91 0b       	sbc	r25, r17
    33c2:	28 1b       	sub	r18, r24
    33c4:	2a 87       	std	Y+10, r18	; 0x0a
    33c6:	cd 01       	movw	r24, r26
    33c8:	8d 57       	subi	r24, 0x7D	; 125
    33ca:	9f 4f       	sbci	r25, 0xFF	; 255
    33cc:	fc 01       	movw	r30, r24
    33ce:	80 81       	ld	r24, Z
    33d0:	8b 87       	std	Y+11, r24	; 0x0b
    33d2:	cd 01       	movw	r24, r26
    33d4:	8c 57       	subi	r24, 0x7C	; 124
    33d6:	9f 4f       	sbci	r25, 0xFF	; 255
    33d8:	fc 01       	movw	r30, r24
    33da:	80 81       	ld	r24, Z
    33dc:	8c 87       	std	Y+12, r24	; 0x0c
    33de:	1b 96       	adiw	r26, 0x0b	; 11
    33e0:	2c 91       	ld	r18, X
    33e2:	1b 97       	sbiw	r26, 0x0b	; 11
    33e4:	92 2f       	mov	r25, r18
    33e6:	91 70       	andi	r25, 0x01	; 1
    33e8:	82 2f       	mov	r24, r18
    33ea:	82 70       	andi	r24, 0x02	; 2
    33ec:	98 2b       	or	r25, r24
    33ee:	22 ff       	sbrs	r18, 2
    33f0:	02 c0       	rjmp	.+4      	; 0x33f6 <nwkRxIndicateFrame+0xba>
    33f2:	80 e2       	ldi	r24, 0x20	; 32
    33f4:	01 c0       	rjmp	.+2      	; 0x33f8 <nwkRxIndicateFrame+0xbc>
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	98 2b       	or	r25, r24
    33fa:	23 ff       	sbrs	r18, 3
    33fc:	02 c0       	rjmp	.+4      	; 0x3402 <nwkRxIndicateFrame+0xc6>
    33fe:	80 e4       	ldi	r24, 0x40	; 64
    3400:	01 c0       	rjmp	.+2      	; 0x3404 <nwkRxIndicateFrame+0xc8>
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	98 2b       	or	r25, r24
    3406:	6f 3f       	cpi	r22, 0xFF	; 255
    3408:	7f 4f       	sbci	r23, 0xFF	; 255
    340a:	11 f4       	brne	.+4      	; 0x3410 <nwkRxIndicateFrame+0xd4>
    340c:	84 e0       	ldi	r24, 0x04	; 4
    340e:	01 c0       	rjmp	.+2      	; 0x3412 <nwkRxIndicateFrame+0xd6>
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	98 2b       	or	r25, r24
    3414:	19 96       	adiw	r26, 0x09	; 9
    3416:	2d 91       	ld	r18, X+
    3418:	3c 91       	ld	r19, X
    341a:	1a 97       	sbiw	r26, 0x0a	; 10
    341c:	42 17       	cp	r20, r18
    341e:	53 07       	cpc	r21, r19
    3420:	11 f4       	brne	.+4      	; 0x3426 <nwkRxIndicateFrame+0xea>
    3422:	88 e0       	ldi	r24, 0x08	; 8
    3424:	01 c0       	rjmp	.+2      	; 0x3428 <nwkRxIndicateFrame+0xec>
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	98 2b       	or	r25, r24
    342a:	15 96       	adiw	r26, 0x05	; 5
    342c:	2d 91       	ld	r18, X+
    342e:	3c 91       	ld	r19, X
    3430:	16 97       	sbiw	r26, 0x06	; 6
    3432:	2f 3f       	cpi	r18, 0xFF	; 255
    3434:	3f 4f       	sbci	r19, 0xFF	; 255
    3436:	11 f4       	brne	.+4      	; 0x343c <nwkRxIndicateFrame+0x100>
    3438:	80 e1       	ldi	r24, 0x10	; 16
    343a:	01 c0       	rjmp	.+2      	; 0x343e <nwkRxIndicateFrame+0x102>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	89 2b       	or	r24, r25
    3440:	8f 83       	std	Y+7, r24	; 0x07
    3442:	ce 01       	movw	r24, r28
    3444:	01 96       	adiw	r24, 0x01	; 1
    3446:	f7 01       	movw	r30, r14
    3448:	19 95       	eicall
    344a:	01 c0       	rjmp	.+2      	; 0x344e <nwkRxIndicateFrame+0x112>
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	2c 96       	adiw	r28, 0x0c	; 12
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	f8 94       	cli
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	cd bf       	out	0x3d, r28	; 61
    345a:	df 91       	pop	r29
    345c:	cf 91       	pop	r28
    345e:	1f 91       	pop	r17
    3460:	0f 91       	pop	r16
    3462:	ff 90       	pop	r15
    3464:	ef 90       	pop	r14
    3466:	08 95       	ret

00003468 <nwkRxServiceDataInd>:
    3468:	dc 01       	movw	r26, r24
    346a:	19 96       	adiw	r26, 0x09	; 9
    346c:	2c 91       	ld	r18, X
    346e:	19 97       	sbiw	r26, 0x09	; 9
    3470:	22 23       	and	r18, r18
    3472:	71 f0       	breq	.+28     	; 0x3490 <nwkRxServiceDataInd+0x28>
    3474:	17 96       	adiw	r26, 0x07	; 7
    3476:	ed 91       	ld	r30, X+
    3478:	fc 91       	ld	r31, X
    347a:	18 97       	sbiw	r26, 0x08	; 8
    347c:	20 81       	ld	r18, Z
    347e:	22 23       	and	r18, r18
    3480:	19 f0       	breq	.+6      	; 0x3488 <nwkRxServiceDataInd+0x20>
    3482:	21 30       	cpi	r18, 0x01	; 1
    3484:	19 f0       	breq	.+6      	; 0x348c <nwkRxServiceDataInd+0x24>
    3486:	06 c0       	rjmp	.+12     	; 0x3494 <nwkRxServiceDataInd+0x2c>
    3488:	04 c3       	rjmp	.+1544   	; 0x3a92 <nwkTxAckReceived>
    348a:	08 95       	ret
    348c:	46 cf       	rjmp	.-372    	; 0x331a <nwkRouteErrorReceived>
    348e:	08 95       	ret
    3490:	80 e0       	ldi	r24, 0x00	; 0
    3492:	08 95       	ret
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	08 95       	ret

00003498 <nwkRxDuplicateRejectionTimerHandler>:
    3498:	bc 01       	movw	r22, r24
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	1c c0       	rjmp	.+56     	; 0x34d8 <nwkRxDuplicateRejectionTimerHandler+0x40>
    34a0:	29 2f       	mov	r18, r25
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	f9 01       	movw	r30, r18
    34a6:	ee 0f       	add	r30, r30
    34a8:	ff 1f       	adc	r31, r31
    34aa:	ee 0f       	add	r30, r30
    34ac:	ff 1f       	adc	r31, r31
    34ae:	e2 0f       	add	r30, r18
    34b0:	f3 1f       	adc	r31, r19
    34b2:	e0 56       	subi	r30, 0x60	; 96
    34b4:	f8 4e       	sbci	r31, 0xE8	; 232
    34b6:	44 81       	ldd	r20, Z+4	; 0x04
    34b8:	44 23       	and	r20, r20
    34ba:	69 f0       	breq	.+26     	; 0x34d6 <nwkRxDuplicateRejectionTimerHandler+0x3e>
    34bc:	f9 01       	movw	r30, r18
    34be:	ee 0f       	add	r30, r30
    34c0:	ff 1f       	adc	r31, r31
    34c2:	ee 0f       	add	r30, r30
    34c4:	ff 1f       	adc	r31, r31
    34c6:	2e 0f       	add	r18, r30
    34c8:	3f 1f       	adc	r19, r31
    34ca:	f9 01       	movw	r30, r18
    34cc:	e0 56       	subi	r30, 0x60	; 96
    34ce:	f8 4e       	sbci	r31, 0xE8	; 232
    34d0:	41 50       	subi	r20, 0x01	; 1
    34d2:	44 83       	std	Z+4, r20	; 0x04
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	9f 5f       	subi	r25, 0xFF	; 255
    34d8:	9a 30       	cpi	r25, 0x0A	; 10
    34da:	10 f3       	brcs	.-60     	; 0x34a0 <nwkRxDuplicateRejectionTimerHandler+0x8>
    34dc:	88 23       	and	r24, r24
    34de:	11 f0       	breq	.+4      	; 0x34e4 <nwkRxDuplicateRejectionTimerHandler+0x4c>
    34e0:	cb 01       	movw	r24, r22
    34e2:	93 c5       	rjmp	.+2854   	; 0x400a <SYS_TimerStart>
    34e4:	08 95       	ret

000034e6 <nwkRxRejectDuplicate>:
    34e6:	0f 93       	push	r16
    34e8:	1f 93       	push	r17
    34ea:	cf 93       	push	r28
    34ec:	df 93       	push	r29
    34ee:	ec 01       	movw	r28, r24
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	70 e0       	ldi	r23, 0x00	; 0
    34f6:	80 c0       	rjmp	.+256    	; 0x35f8 <nwkRxRejectDuplicate+0x112>
    34f8:	29 2f       	mov	r18, r25
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	f9 01       	movw	r30, r18
    34fe:	ee 0f       	add	r30, r30
    3500:	ff 1f       	adc	r31, r31
    3502:	ee 0f       	add	r30, r30
    3504:	ff 1f       	adc	r31, r31
    3506:	e2 0f       	add	r30, r18
    3508:	f3 1f       	adc	r31, r19
    350a:	e0 56       	subi	r30, 0x60	; 96
    350c:	f8 4e       	sbci	r31, 0xE8	; 232
    350e:	44 81       	ldd	r20, Z+4	; 0x04
    3510:	44 23       	and	r20, r20
    3512:	09 f4       	brne	.+2      	; 0x3516 <nwkRxRejectDuplicate+0x30>
    3514:	6d c0       	rjmp	.+218    	; 0x35f0 <nwkRxRejectDuplicate+0x10a>
    3516:	0b 85       	ldd	r16, Y+11	; 0x0b
    3518:	1c 85       	ldd	r17, Y+12	; 0x0c
    351a:	a0 81       	ld	r26, Z
    351c:	b1 81       	ldd	r27, Z+1	; 0x01
    351e:	0a 17       	cp	r16, r26
    3520:	1b 07       	cpc	r17, r27
    3522:	09 f0       	breq	.+2      	; 0x3526 <nwkRxRejectDuplicate+0x40>
    3524:	65 c0       	rjmp	.+202    	; 0x35f0 <nwkRxRejectDuplicate+0x10a>
    3526:	f9 01       	movw	r30, r18
    3528:	ee 0f       	add	r30, r30
    352a:	ff 1f       	adc	r31, r31
    352c:	ee 0f       	add	r30, r30
    352e:	ff 1f       	adc	r31, r31
    3530:	e2 0f       	add	r30, r18
    3532:	f3 1f       	adc	r31, r19
    3534:	e0 56       	subi	r30, 0x60	; 96
    3536:	f8 4e       	sbci	r31, 0xE8	; 232
    3538:	82 81       	ldd	r24, Z+2	; 0x02
    353a:	9a 85       	ldd	r25, Y+10	; 0x0a
    353c:	89 1b       	sub	r24, r25
    353e:	88 30       	cpi	r24, 0x08	; 8
    3540:	e0 f5       	brcc	.+120    	; 0x35ba <nwkRxRejectDuplicate+0xd4>
    3542:	f9 01       	movw	r30, r18
    3544:	ee 0f       	add	r30, r30
    3546:	ff 1f       	adc	r31, r31
    3548:	ee 0f       	add	r30, r30
    354a:	ff 1f       	adc	r31, r31
    354c:	e2 0f       	add	r30, r18
    354e:	f3 1f       	adc	r31, r19
    3550:	e0 56       	subi	r30, 0x60	; 96
    3552:	f8 4e       	sbci	r31, 0xE8	; 232
    3554:	93 81       	ldd	r25, Z+3	; 0x03
    3556:	49 2f       	mov	r20, r25
    3558:	50 e0       	ldi	r21, 0x00	; 0
    355a:	08 2e       	mov	r0, r24
    355c:	02 c0       	rjmp	.+4      	; 0x3562 <nwkRxRejectDuplicate+0x7c>
    355e:	55 95       	asr	r21
    3560:	47 95       	ror	r20
    3562:	0a 94       	dec	r0
    3564:	e2 f7       	brpl	.-8      	; 0x355e <nwkRxRejectDuplicate+0x78>
    3566:	40 ff       	sbrs	r20, 0
    3568:	13 c0       	rjmp	.+38     	; 0x3590 <nwkRxRejectDuplicate+0xaa>
    356a:	20 91 79 1a 	lds	r18, 0x1A79	; 0x801a79 <nwkIb>
    356e:	30 91 7a 1a 	lds	r19, 0x1A7A	; 0x801a7a <nwkIb+0x1>
    3572:	8d 81       	ldd	r24, Y+5	; 0x05
    3574:	9e 81       	ldd	r25, Y+6	; 0x06
    3576:	28 17       	cp	r18, r24
    3578:	39 07       	cpc	r19, r25
    357a:	09 f0       	breq	.+2      	; 0x357e <nwkRxRejectDuplicate+0x98>
    357c:	53 c0       	rjmp	.+166    	; 0x3624 <nwkRxRejectDuplicate+0x13e>
    357e:	69 85       	ldd	r22, Y+9	; 0x09
    3580:	63 fb       	bst	r22, 3
    3582:	66 27       	eor	r22, r22
    3584:	60 f9       	bld	r22, 0
    3586:	8d 85       	ldd	r24, Y+13	; 0x0d
    3588:	9e 85       	ldd	r25, Y+14	; 0x0e
    358a:	da dd       	rcall	.-1100   	; 0x3140 <nwkRouteRemove>
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	4d c0       	rjmp	.+154    	; 0x362a <nwkRxRejectDuplicate+0x144>
    3590:	41 e0       	ldi	r20, 0x01	; 1
    3592:	50 e0       	ldi	r21, 0x00	; 0
    3594:	02 c0       	rjmp	.+4      	; 0x359a <nwkRxRejectDuplicate+0xb4>
    3596:	44 0f       	add	r20, r20
    3598:	55 1f       	adc	r21, r21
    359a:	8a 95       	dec	r24
    359c:	e2 f7       	brpl	.-8      	; 0x3596 <nwkRxRejectDuplicate+0xb0>
    359e:	f9 01       	movw	r30, r18
    35a0:	ee 0f       	add	r30, r30
    35a2:	ff 1f       	adc	r31, r31
    35a4:	ee 0f       	add	r30, r30
    35a6:	ff 1f       	adc	r31, r31
    35a8:	2e 0f       	add	r18, r30
    35aa:	3f 1f       	adc	r19, r31
    35ac:	f9 01       	movw	r30, r18
    35ae:	e0 56       	subi	r30, 0x60	; 96
    35b0:	f8 4e       	sbci	r31, 0xE8	; 232
    35b2:	94 2b       	or	r25, r20
    35b4:	93 83       	std	Z+3, r25	; 0x03
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	38 c0       	rjmp	.+112    	; 0x362a <nwkRxRejectDuplicate+0x144>
    35ba:	81 95       	neg	r24
    35bc:	f9 01       	movw	r30, r18
    35be:	ee 0f       	add	r30, r30
    35c0:	ff 1f       	adc	r31, r31
    35c2:	ee 0f       	add	r30, r30
    35c4:	ff 1f       	adc	r31, r31
    35c6:	2e 0f       	add	r18, r30
    35c8:	3f 1f       	adc	r19, r31
    35ca:	f9 01       	movw	r30, r18
    35cc:	e0 56       	subi	r30, 0x60	; 96
    35ce:	f8 4e       	sbci	r31, 0xE8	; 232
    35d0:	92 83       	std	Z+2, r25	; 0x02
    35d2:	23 81       	ldd	r18, Z+3	; 0x03
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	a9 01       	movw	r20, r18
    35d8:	02 c0       	rjmp	.+4      	; 0x35de <nwkRxRejectDuplicate+0xf8>
    35da:	44 0f       	add	r20, r20
    35dc:	55 1f       	adc	r21, r21
    35de:	8a 95       	dec	r24
    35e0:	e2 f7       	brpl	.-8      	; 0x35da <nwkRxRejectDuplicate+0xf4>
    35e2:	ca 01       	movw	r24, r20
    35e4:	81 60       	ori	r24, 0x01	; 1
    35e6:	83 83       	std	Z+3, r24	; 0x03
    35e8:	8f e1       	ldi	r24, 0x1F	; 31
    35ea:	84 83       	std	Z+4, r24	; 0x04
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	1d c0       	rjmp	.+58     	; 0x362a <nwkRxRejectDuplicate+0x144>
    35f0:	41 11       	cpse	r20, r1
    35f2:	01 c0       	rjmp	.+2      	; 0x35f6 <nwkRxRejectDuplicate+0x110>
    35f4:	bf 01       	movw	r22, r30
    35f6:	9f 5f       	subi	r25, 0xFF	; 255
    35f8:	9a 30       	cpi	r25, 0x0A	; 10
    35fa:	08 f4       	brcc	.+2      	; 0x35fe <nwkRxRejectDuplicate+0x118>
    35fc:	7d cf       	rjmp	.-262    	; 0x34f8 <nwkRxRejectDuplicate+0x12>
    35fe:	61 15       	cp	r22, r1
    3600:	71 05       	cpc	r23, r1
    3602:	91 f0       	breq	.+36     	; 0x3628 <nwkRxRejectDuplicate+0x142>
    3604:	8b 85       	ldd	r24, Y+11	; 0x0b
    3606:	9c 85       	ldd	r25, Y+12	; 0x0c
    3608:	fb 01       	movw	r30, r22
    360a:	91 83       	std	Z+1, r25	; 0x01
    360c:	80 83       	st	Z, r24
    360e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3610:	82 83       	std	Z+2, r24	; 0x02
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	83 83       	std	Z+3, r24	; 0x03
    3616:	8f e1       	ldi	r24, 0x1F	; 31
    3618:	84 83       	std	Z+4, r24	; 0x04
    361a:	82 e9       	ldi	r24, 0x92	; 146
    361c:	97 e1       	ldi	r25, 0x17	; 23
    361e:	f5 d4       	rcall	.+2538   	; 0x400a <SYS_TimerStart>
    3620:	80 e0       	ldi	r24, 0x00	; 0
    3622:	03 c0       	rjmp	.+6      	; 0x362a <nwkRxRejectDuplicate+0x144>
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	01 c0       	rjmp	.+2      	; 0x362a <nwkRxRejectDuplicate+0x144>
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	df 91       	pop	r29
    362c:	cf 91       	pop	r28
    362e:	1f 91       	pop	r17
    3630:	0f 91       	pop	r16
    3632:	08 95       	ret

00003634 <nwkRxHandleReceivedFrame>:
    3634:	0f 93       	push	r16
    3636:	1f 93       	push	r17
    3638:	cf 93       	push	r28
    363a:	df 93       	push	r29
    363c:	fc 01       	movw	r30, r24
    363e:	8c 01       	movw	r16, r24
    3640:	0e 5f       	subi	r16, 0xFE	; 254
    3642:	1f 4f       	sbci	r17, 0xFF	; 255
    3644:	84 e2       	ldi	r24, 0x24	; 36
    3646:	80 83       	st	Z, r24
    3648:	83 85       	ldd	r24, Z+11	; 0x0b
    364a:	81 fd       	sbrc	r24, 1
    364c:	54 c0       	rjmp	.+168    	; 0x36f6 <nwkRxHandleReceivedFrame+0xc2>
    364e:	83 fd       	sbrc	r24, 3
    3650:	52 c0       	rjmp	.+164    	; 0x36f6 <nwkRxHandleReceivedFrame+0xc2>
    3652:	25 81       	ldd	r18, Z+5	; 0x05
    3654:	36 81       	ldd	r19, Z+6	; 0x06
    3656:	2f 3f       	cpi	r18, 0xFF	; 255
    3658:	3f 4f       	sbci	r19, 0xFF	; 255
    365a:	79 f4       	brne	.+30     	; 0x367a <nwkRxHandleReceivedFrame+0x46>
    365c:	20 91 79 1a 	lds	r18, 0x1A79	; 0x801a79 <nwkIb>
    3660:	30 91 7a 1a 	lds	r19, 0x1A7A	; 0x801a7a <nwkIb+0x1>
    3664:	87 85       	ldd	r24, Z+15	; 0x0f
    3666:	90 89       	ldd	r25, Z+16	; 0x10
    3668:	28 17       	cp	r18, r24
    366a:	39 07       	cpc	r19, r25
    366c:	19 f0       	breq	.+6      	; 0x3674 <nwkRxHandleReceivedFrame+0x40>
    366e:	01 96       	adiw	r24, 0x01	; 1
    3670:	09 f0       	breq	.+2      	; 0x3674 <nwkRxHandleReceivedFrame+0x40>
    3672:	41 c0       	rjmp	.+130    	; 0x36f6 <nwkRxHandleReceivedFrame+0xc2>
    3674:	82 e2       	ldi	r24, 0x22	; 34
    3676:	80 83       	st	Z, r24
    3678:	3e c0       	rjmp	.+124    	; 0x36f6 <nwkRxHandleReceivedFrame+0xc2>
    367a:	27 85       	ldd	r18, Z+15	; 0x0f
    367c:	30 89       	ldd	r19, Z+16	; 0x10
    367e:	2f 3f       	cpi	r18, 0xFF	; 255
    3680:	3f 4f       	sbci	r19, 0xFF	; 255
    3682:	11 f4       	brne	.+4      	; 0x3688 <nwkRxHandleReceivedFrame+0x54>
    3684:	80 fd       	sbrc	r24, 0
    3686:	37 c0       	rjmp	.+110    	; 0x36f6 <nwkRxHandleReceivedFrame+0xc2>
    3688:	20 91 79 1a 	lds	r18, 0x1A79	; 0x801a79 <nwkIb>
    368c:	30 91 7a 1a 	lds	r19, 0x1A7A	; 0x801a7a <nwkIb+0x1>
    3690:	85 85       	ldd	r24, Z+13	; 0x0d
    3692:	96 85       	ldd	r25, Z+14	; 0x0e
    3694:	28 17       	cp	r18, r24
    3696:	39 07       	cpc	r19, r25
    3698:	71 f1       	breq	.+92     	; 0x36f6 <nwkRxHandleReceivedFrame+0xc2>
    369a:	ef 01       	movw	r28, r30
    369c:	cf 01       	movw	r24, r30
    369e:	55 dd       	rcall	.-1366   	; 0x314a <nwkRouteFrameReceived>
    36a0:	c8 01       	movw	r24, r16
    36a2:	21 df       	rcall	.-446    	; 0x34e6 <nwkRxRejectDuplicate>
    36a4:	81 11       	cpse	r24, r1
    36a6:	27 c0       	rjmp	.+78     	; 0x36f6 <nwkRxHandleReceivedFrame+0xc2>
    36a8:	8f 81       	ldd	r24, Y+7	; 0x07
    36aa:	98 85       	ldd	r25, Y+8	; 0x08
    36ac:	01 96       	adiw	r24, 0x01	; 1
    36ae:	71 f4       	brne	.+28     	; 0x36cc <nwkRxHandleReceivedFrame+0x98>
    36b0:	20 91 79 1a 	lds	r18, 0x1A79	; 0x801a79 <nwkIb>
    36b4:	30 91 7a 1a 	lds	r19, 0x1A7A	; 0x801a7a <nwkIb+0x1>
    36b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ba:	98 89       	ldd	r25, Y+16	; 0x10
    36bc:	28 17       	cp	r18, r24
    36be:	39 07       	cpc	r19, r25
    36c0:	29 f0       	breq	.+10     	; 0x36cc <nwkRxHandleReceivedFrame+0x98>
    36c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    36c4:	82 fd       	sbrc	r24, 2
    36c6:	02 c0       	rjmp	.+4      	; 0x36cc <nwkRxHandleReceivedFrame+0x98>
    36c8:	ce 01       	movw	r24, r28
    36ca:	9f d1       	rcall	.+830    	; 0x3a0a <nwkTxBroadcastFrame>
    36cc:	20 91 79 1a 	lds	r18, 0x1A79	; 0x801a79 <nwkIb>
    36d0:	30 91 7a 1a 	lds	r19, 0x1A7A	; 0x801a7a <nwkIb+0x1>
    36d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d6:	98 89       	ldd	r25, Y+16	; 0x10
    36d8:	28 17       	cp	r18, r24
    36da:	39 07       	cpc	r19, r25
    36dc:	11 f0       	breq	.+4      	; 0x36e2 <nwkRxHandleReceivedFrame+0xae>
    36de:	01 96       	adiw	r24, 0x01	; 1
    36e0:	19 f4       	brne	.+6      	; 0x36e8 <nwkRxHandleReceivedFrame+0xb4>
    36e2:	82 e2       	ldi	r24, 0x22	; 34
    36e4:	88 83       	st	Y, r24
    36e6:	07 c0       	rjmp	.+14     	; 0x36f6 <nwkRxHandleReceivedFrame+0xc2>
    36e8:	8f 81       	ldd	r24, Y+7	; 0x07
    36ea:	98 85       	ldd	r25, Y+8	; 0x08
    36ec:	28 17       	cp	r18, r24
    36ee:	39 07       	cpc	r19, r25
    36f0:	11 f4       	brne	.+4      	; 0x36f6 <nwkRxHandleReceivedFrame+0xc2>
    36f2:	83 e2       	ldi	r24, 0x23	; 35
    36f4:	88 83       	st	Y, r24
    36f6:	df 91       	pop	r29
    36f8:	cf 91       	pop	r28
    36fa:	1f 91       	pop	r17
    36fc:	0f 91       	pop	r16
    36fe:	08 95       	ret

00003700 <nwkRxSendAck>:
    3700:	0f 93       	push	r16
    3702:	1f 93       	push	r17
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	8c 01       	movw	r16, r24
    370a:	e5 db       	rcall	.-2102   	; 0x2ed6 <nwkFrameAlloc>
    370c:	ec 01       	movw	r28, r24
    370e:	00 97       	sbiw	r24, 0x00	; 0
    3710:	31 f1       	breq	.+76     	; 0x375e <nwkRxSendAck+0x5e>
    3712:	34 dc       	rcall	.-1944   	; 0x2f7c <nwkFrameCommandInit>
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	8d 5f       	subi	r24, 0xFD	; 253
    3718:	89 83       	std	Y+1, r24	; 0x01
    371a:	fe 01       	movw	r30, r28
    371c:	e9 57       	subi	r30, 0x79	; 121
    371e:	ff 4f       	sbci	r31, 0xFF	; 255
    3720:	11 82       	std	Z+1, r1	; 0x01
    3722:	10 82       	st	Z, r1
    3724:	d8 01       	movw	r26, r16
    3726:	1b 96       	adiw	r26, 0x0b	; 11
    3728:	8c 91       	ld	r24, X
    372a:	1b 97       	sbiw	r26, 0x0b	; 11
    372c:	86 95       	lsr	r24
    372e:	81 70       	andi	r24, 0x01	; 1
    3730:	9b 85       	ldd	r25, Y+11	; 0x0b
    3732:	80 fb       	bst	r24, 0
    3734:	91 f9       	bld	r25, 1
    3736:	9b 87       	std	Y+11, r25	; 0x0b
    3738:	1d 96       	adiw	r26, 0x0d	; 13
    373a:	8d 91       	ld	r24, X+
    373c:	9c 91       	ld	r25, X
    373e:	1e 97       	sbiw	r26, 0x0e	; 14
    3740:	98 8b       	std	Y+16, r25	; 0x10
    3742:	8f 87       	std	Y+15, r24	; 0x0f
    3744:	36 97       	sbiw	r30, 0x06	; 6
    3746:	01 90       	ld	r0, Z+
    3748:	f0 81       	ld	r31, Z
    374a:	e0 2d       	mov	r30, r0
    374c:	10 82       	st	Z, r1
    374e:	80 91 9f 17 	lds	r24, 0x179F	; 0x80179f <nwkRxAckControl>
    3752:	82 83       	std	Z+2, r24	; 0x02
    3754:	1c 96       	adiw	r26, 0x0c	; 12
    3756:	8c 91       	ld	r24, X
    3758:	81 83       	std	Z+1, r24	; 0x01
    375a:	ce 01       	movw	r24, r28
    375c:	04 d1       	rcall	.+520    	; 0x3966 <nwkTxFrame>
    375e:	df 91       	pop	r29
    3760:	cf 91       	pop	r28
    3762:	1f 91       	pop	r17
    3764:	0f 91       	pop	r16
    3766:	08 95       	ret

00003768 <nwkRxHandleIndication>:
    3768:	cf 93       	push	r28
    376a:	df 93       	push	r29
    376c:	ec 01       	movw	r28, r24
    376e:	10 92 9f 17 	sts	0x179F, r1	; 0x80179f <nwkRxAckControl>
    3772:	e4 dd       	rcall	.-1080   	; 0x333c <nwkRxIndicateFrame>
    3774:	9b 85       	ldd	r25, Y+11	; 0x0b
    3776:	90 ff       	sbrs	r25, 0
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	2f 81       	ldd	r18, Y+7	; 0x07
    377c:	38 85       	ldd	r19, Y+8	; 0x08
    377e:	2f 3f       	cpi	r18, 0xFF	; 255
    3780:	3f 4f       	sbci	r19, 0xFF	; 255
    3782:	59 f4       	brne	.+22     	; 0x379a <nwkRxHandleIndication+0x32>
    3784:	40 91 79 1a 	lds	r20, 0x1A79	; 0x801a79 <nwkIb>
    3788:	50 91 7a 1a 	lds	r21, 0x1A7A	; 0x801a7a <nwkIb+0x1>
    378c:	2f 85       	ldd	r18, Y+15	; 0x0f
    378e:	38 89       	ldd	r19, Y+16	; 0x10
    3790:	42 17       	cp	r20, r18
    3792:	53 07       	cpc	r21, r19
    3794:	11 f4       	brne	.+4      	; 0x379a <nwkRxHandleIndication+0x32>
    3796:	93 ff       	sbrs	r25, 3
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	2d 81       	ldd	r18, Y+5	; 0x05
    379c:	3e 81       	ldd	r19, Y+6	; 0x06
    379e:	2f 3f       	cpi	r18, 0xFF	; 255
    37a0:	3f 4f       	sbci	r19, 0xFF	; 255
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <nwkRxHandleIndication+0x3e>
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	20 91 79 1a 	lds	r18, 0x1A79	; 0x801a79 <nwkIb>
    37aa:	30 91 7a 1a 	lds	r19, 0x1A7A	; 0x801a7a <nwkIb+0x1>
    37ae:	2f 3f       	cpi	r18, 0xFF	; 255
    37b0:	3f 4f       	sbci	r19, 0xFF	; 255
    37b2:	09 f4       	brne	.+2      	; 0x37b6 <nwkRxHandleIndication+0x4e>
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	88 23       	and	r24, r24
    37b8:	11 f0       	breq	.+4      	; 0x37be <nwkRxHandleIndication+0x56>
    37ba:	ce 01       	movw	r24, r28
    37bc:	a1 df       	rcall	.-190    	; 0x3700 <nwkRxSendAck>
    37be:	84 e2       	ldi	r24, 0x24	; 36
    37c0:	88 83       	st	Y, r24
    37c2:	df 91       	pop	r29
    37c4:	cf 91       	pop	r28
    37c6:	08 95       	ret

000037c8 <nwkRxInit>:
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	0e c0       	rjmp	.+28     	; 0x37e8 <nwkRxInit+0x20>
    37cc:	82 2f       	mov	r24, r18
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	fc 01       	movw	r30, r24
    37d2:	ee 0f       	add	r30, r30
    37d4:	ff 1f       	adc	r31, r31
    37d6:	ee 0f       	add	r30, r30
    37d8:	ff 1f       	adc	r31, r31
    37da:	8e 0f       	add	r24, r30
    37dc:	9f 1f       	adc	r25, r31
    37de:	fc 01       	movw	r30, r24
    37e0:	e0 56       	subi	r30, 0x60	; 96
    37e2:	f8 4e       	sbci	r31, 0xE8	; 232
    37e4:	14 82       	std	Z+4, r1	; 0x04
    37e6:	2f 5f       	subi	r18, 0xFF	; 255
    37e8:	2a 30       	cpi	r18, 0x0A	; 10
    37ea:	80 f3       	brcs	.-32     	; 0x37cc <nwkRxInit+0x4>
    37ec:	e2 e9       	ldi	r30, 0x92	; 146
    37ee:	f7 e1       	ldi	r31, 0x17	; 23
    37f0:	84 e6       	ldi	r24, 0x64	; 100
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	a0 e0       	ldi	r26, 0x00	; 0
    37f6:	b0 e0       	ldi	r27, 0x00	; 0
    37f8:	86 83       	std	Z+6, r24	; 0x06
    37fa:	97 83       	std	Z+7, r25	; 0x07
    37fc:	a0 87       	std	Z+8, r26	; 0x08
    37fe:	b1 87       	std	Z+9, r27	; 0x09
    3800:	12 86       	std	Z+10, r1	; 0x0a
    3802:	8c e4       	ldi	r24, 0x4C	; 76
    3804:	9a e1       	ldi	r25, 0x1A	; 26
    3806:	94 87       	std	Z+12, r25	; 0x0c
    3808:	83 87       	std	Z+11, r24	; 0x0b
    380a:	64 e3       	ldi	r22, 0x34	; 52
    380c:	7a e1       	ldi	r23, 0x1A	; 26
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	60 ca       	rjmp	.-2880   	; 0x2cd2 <NWK_OpenEndpoint>
    3812:	08 95       	ret

00003814 <PHY_DataInd>:
    3814:	cf 93       	push	r28
    3816:	df 93       	push	r29
    3818:	dc 01       	movw	r26, r24
    381a:	ed 91       	ld	r30, X+
    381c:	fc 91       	ld	r31, X
    381e:	21 81       	ldd	r18, Z+1	; 0x01
    3820:	28 38       	cpi	r18, 0x88	; 136
    3822:	11 f5       	brne	.+68     	; 0x3868 <PHY_DataInd+0x54>
    3824:	20 81       	ld	r18, Z
    3826:	21 36       	cpi	r18, 0x61	; 97
    3828:	11 f0       	breq	.+4      	; 0x382e <PHY_DataInd+0x1a>
    382a:	21 34       	cpi	r18, 0x41	; 65
    382c:	e9 f4       	brne	.+58     	; 0x3868 <PHY_DataInd+0x54>
    382e:	fc 01       	movw	r30, r24
    3830:	22 81       	ldd	r18, Z+2	; 0x02
    3832:	20 31       	cpi	r18, 0x10	; 16
    3834:	c8 f0       	brcs	.+50     	; 0x3868 <PHY_DataInd+0x54>
    3836:	ec 01       	movw	r28, r24
    3838:	4e db       	rcall	.-2404   	; 0x2ed6 <nwkFrameAlloc>
    383a:	00 97       	sbiw	r24, 0x00	; 0
    383c:	a9 f0       	breq	.+42     	; 0x3868 <PHY_DataInd+0x54>
    383e:	20 e2       	ldi	r18, 0x20	; 32
    3840:	dc 01       	movw	r26, r24
    3842:	2c 93       	st	X, r18
    3844:	2a 81       	ldd	r18, Y+2	; 0x02
    3846:	11 96       	adiw	r26, 0x01	; 1
    3848:	2c 93       	st	X, r18
    384a:	2b 81       	ldd	r18, Y+3	; 0x03
    384c:	fc 01       	movw	r30, r24
    384e:	ed 57       	subi	r30, 0x7D	; 125
    3850:	ff 4f       	sbci	r31, 0xFF	; 255
    3852:	20 83       	st	Z, r18
    3854:	2c 81       	ldd	r18, Y+4	; 0x04
    3856:	31 96       	adiw	r30, 0x01	; 1
    3858:	20 83       	st	Z, r18
    385a:	4a 81       	ldd	r20, Y+2	; 0x02
    385c:	68 81       	ld	r22, Y
    385e:	79 81       	ldd	r23, Y+1	; 0x01
    3860:	50 e0       	ldi	r21, 0x00	; 0
    3862:	02 96       	adiw	r24, 0x02	; 2
    3864:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <memcpy>
    3868:	df 91       	pop	r29
    386a:	cf 91       	pop	r28
    386c:	08 95       	ret

0000386e <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    386e:	cf 93       	push	r28
    3870:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    3872:	c0 e0       	ldi	r28, 0x00	; 0
    3874:	d0 e0       	ldi	r29, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
    3876:	17 c0       	rjmp	.+46     	; 0x38a6 <nwkRxTaskHandler+0x38>
  {
    switch (frame->state)
    3878:	88 81       	ld	r24, Y
    387a:	82 32       	cpi	r24, 0x22	; 34
    387c:	61 f0       	breq	.+24     	; 0x3896 <nwkRxTaskHandler+0x28>
    387e:	18 f4       	brcc	.+6      	; 0x3886 <nwkRxTaskHandler+0x18>
    3880:	80 32       	cpi	r24, 0x20	; 32
    3882:	31 f0       	breq	.+12     	; 0x3890 <nwkRxTaskHandler+0x22>
    3884:	10 c0       	rjmp	.+32     	; 0x38a6 <nwkRxTaskHandler+0x38>
    3886:	83 32       	cpi	r24, 0x23	; 35
    3888:	49 f0       	breq	.+18     	; 0x389c <nwkRxTaskHandler+0x2e>
    388a:	84 32       	cpi	r24, 0x24	; 36
    388c:	51 f0       	breq	.+20     	; 0x38a2 <nwkRxTaskHandler+0x34>
    388e:	0b c0       	rjmp	.+22     	; 0x38a6 <nwkRxTaskHandler+0x38>
    {
      case NWK_RX_STATE_RECEIVED:
      {
        nwkRxHandleReceivedFrame(frame);
    3890:	ce 01       	movw	r24, r28
    3892:	d0 de       	rcall	.-608    	; 0x3634 <nwkRxHandleReceivedFrame>
      } break;
    3894:	08 c0       	rjmp	.+16     	; 0x38a6 <nwkRxTaskHandler+0x38>
      } break;
#endif

      case NWK_RX_STATE_INDICATE:
      {
        nwkRxHandleIndication(frame);
    3896:	ce 01       	movw	r24, r28
    3898:	67 df       	rcall	.-306    	; 0x3768 <nwkRxHandleIndication>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    389a:	05 c0       	rjmp	.+10     	; 0x38a6 <nwkRxTaskHandler+0x38>
    389c:	ce 01       	movw	r24, r28
      } break;
    389e:	14 dd       	rcall	.-1496   	; 0x32c8 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    38a0:	02 c0       	rjmp	.+4      	; 0x38a6 <nwkRxTaskHandler+0x38>
    38a2:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    38a4:	49 db       	rcall	.-2414   	; 0x2f38 <nwkFrameFree>
    38a6:	ce 01       	movw	r24, r28
    38a8:	51 db       	rcall	.-2398   	; 0x2f4c <nwkFrameNext>
    38aa:	ec 01       	movw	r28, r24
    38ac:	89 2b       	or	r24, r25
    38ae:	21 f7       	brne	.-56     	; 0x3878 <nwkRxTaskHandler+0xa>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    38b0:	df 91       	pop	r29
    38b2:	cf 91       	pop	r28
    38b4:	08 95       	ret

000038b6 <nwkTxConvertPhyStatus>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    38b6:	81 30       	cpi	r24, 0x01	; 1
    38b8:	51 f0       	breq	.+20     	; 0x38ce <nwkTxConvertPhyStatus+0x18>
    38ba:	18 f0       	brcs	.+6      	; 0x38c2 <nwkTxConvertPhyStatus+0xc>
    38bc:	82 30       	cpi	r24, 0x02	; 2
    38be:	19 f0       	breq	.+6      	; 0x38c6 <nwkTxConvertPhyStatus+0x10>
    38c0:	04 c0       	rjmp	.+8      	; 0x38ca <nwkTxConvertPhyStatus+0x14>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	08 95       	ret

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    38c6:	81 e2       	ldi	r24, 0x21	; 33
    38c8:	08 95       	ret

    default:
      return NWK_ERROR_STATUS;
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	08 95       	ret
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    38ce:	80 e2       	ldi	r24, 0x20	; 32
      return NWK_PHY_NO_ACK_STATUS;

    default:
      return NWK_ERROR_STATUS;
  }
}
    38d0:	08 95       	ret

000038d2 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    38d2:	1f 93       	push	r17
    38d4:	cf 93       	push	r28
    38d6:	df 93       	push	r29
    38d8:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    38da:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	90 e0       	ldi	r25, 0x00	; 0
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    38e0:	14 c0       	rjmp	.+40     	; 0x390a <nwkTxDelayTimerHandler+0x38>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    38e2:	fc 01       	movw	r30, r24
    38e4:	20 81       	ld	r18, Z
    38e6:	21 31       	cpi	r18, 0x11	; 17
    38e8:	81 f4       	brne	.+32     	; 0x390a <nwkTxDelayTimerHandler+0x38>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    38ea:	ec 57       	subi	r30, 0x7C	; 124
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	20 81       	ld	r18, Z
    38f0:	31 81       	ldd	r19, Z+1	; 0x01
    38f2:	21 50       	subi	r18, 0x01	; 1
    38f4:	31 09       	sbc	r19, r1
    38f6:	31 83       	std	Z+1, r19	; 0x01
    38f8:	20 83       	st	Z, r18
    38fa:	23 2b       	or	r18, r19
    38fc:	29 f4       	brne	.+10     	; 0x3908 <nwkTxDelayTimerHandler+0x36>
        frame->state = NWK_TX_STATE_SEND;
    38fe:	23 e1       	ldi	r18, 0x13	; 19
    3900:	fc 01       	movw	r30, r24
    3902:	20 83       	st	Z, r18

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    3904:	11 e0       	ldi	r17, 0x01	; 1
    3906:	01 c0       	rjmp	.+2      	; 0x390a <nwkTxDelayTimerHandler+0x38>
    3908:	11 e0       	ldi	r17, 0x01	; 1
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    390a:	20 db       	rcall	.-2496   	; 0x2f4c <nwkFrameNext>
    390c:	00 97       	sbiw	r24, 0x00	; 0
    390e:	49 f7       	brne	.-46     	; 0x38e2 <nwkTxDelayTimerHandler+0x10>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    3910:	11 23       	and	r17, r17
    3912:	11 f0       	breq	.+4      	; 0x3918 <nwkTxDelayTimerHandler+0x46>
    SYS_TimerStart(timer);
    3914:	ce 01       	movw	r24, r28
    3916:	79 d3       	rcall	.+1778   	; 0x400a <SYS_TimerStart>
}
    3918:	df 91       	pop	r29
    391a:	cf 91       	pop	r28
    391c:	1f 91       	pop	r17
    391e:	08 95       	ret

00003920 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    3920:	10 92 ed 17 	sts	0x17ED, r1	; 0x8017ed <nwkTxPhyActiveFrame+0x1>
    3924:	10 92 ec 17 	sts	0x17EC, r1	; 0x8017ec <nwkTxPhyActiveFrame>

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    3928:	ef ed       	ldi	r30, 0xDF	; 223
    392a:	f7 e1       	ldi	r31, 0x17	; 23
    392c:	82 e3       	ldi	r24, 0x32	; 50
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	a0 e0       	ldi	r26, 0x00	; 0
    3932:	b0 e0       	ldi	r27, 0x00	; 0
    3934:	86 83       	std	Z+6, r24	; 0x06
    3936:	97 83       	std	Z+7, r25	; 0x07
    3938:	a0 87       	std	Z+8, r26	; 0x08
    393a:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    393c:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    393e:	84 e7       	ldi	r24, 0x74	; 116
    3940:	9d e1       	ldi	r25, 0x1D	; 29
    3942:	94 87       	std	Z+12, r25	; 0x0c
    3944:	83 87       	std	Z+11, r24	; 0x0b

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    3946:	e2 ed       	ldi	r30, 0xD2	; 210
    3948:	f7 e1       	ldi	r31, 0x17	; 23
    394a:	8a e0       	ldi	r24, 0x0A	; 10
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	a0 e0       	ldi	r26, 0x00	; 0
    3950:	b0 e0       	ldi	r27, 0x00	; 0
    3952:	86 83       	std	Z+6, r24	; 0x06
    3954:	97 83       	std	Z+7, r25	; 0x07
    3956:	a0 87       	std	Z+8, r26	; 0x08
    3958:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    395a:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    395c:	89 e6       	ldi	r24, 0x69	; 105
    395e:	9c e1       	ldi	r25, 0x1C	; 28
    3960:	94 87       	std	Z+12, r25	; 0x0c
    3962:	83 87       	std	Z+11, r24	; 0x0b
    3964:	08 95       	ret

00003966 <nwkTxFrame>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    3966:	cf 93       	push	r28
    3968:	df 93       	push	r29
    396a:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    396c:	fc 01       	movw	r30, r24
    396e:	ea 57       	subi	r30, 0x7A	; 122
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	80 81       	ld	r24, Z
    3974:	81 ff       	sbrs	r24, 1
    3976:	03 c0       	rjmp	.+6      	; 0x397e <nwkTxFrame+0x18>
  {
    frame->state = NWK_TX_STATE_DELAY;
    3978:	92 e1       	ldi	r25, 0x12	; 18
    397a:	98 83       	st	Y, r25
    397c:	02 c0       	rjmp	.+4      	; 0x3982 <nwkTxFrame+0x1c>
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
    397e:	92 e1       	ldi	r25, 0x12	; 18
    3980:	98 83       	st	Y, r25
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    3982:	fe 01       	movw	r30, r28
    3984:	ed 57       	subi	r30, 0x7D	; 125
    3986:	ff 4f       	sbci	r31, 0xFF	; 255
    3988:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    398a:	98 2f       	mov	r25, r24
    398c:	91 70       	andi	r25, 0x01	; 1
    398e:	80 ff       	sbrs	r24, 0
    3990:	05 c0       	rjmp	.+10     	; 0x399c <nwkTxFrame+0x36>
    header->macDstPanId = NWK_BROADCAST_PANID;
    3992:	2f ef       	ldi	r18, 0xFF	; 255
    3994:	3f ef       	ldi	r19, 0xFF	; 255
    3996:	3e 83       	std	Y+6, r19	; 0x06
    3998:	2d 83       	std	Y+5, r18	; 0x05
    399a:	06 c0       	rjmp	.+12     	; 0x39a8 <nwkTxFrame+0x42>
  else
    header->macDstPanId = nwkIb.panId;
    399c:	20 91 7b 1a 	lds	r18, 0x1A7B	; 0x801a7b <nwkIb+0x2>
    39a0:	30 91 7c 1a 	lds	r19, 0x1A7C	; 0x801a7c <nwkIb+0x3>
    39a4:	3e 83       	std	Y+6, r19	; 0x06
    39a6:	2d 83       	std	Y+5, r18	; 0x05

#ifdef NWK_ENABLE_ROUTING
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
    39a8:	82 fd       	sbrc	r24, 2
    39aa:	05 c0       	rjmp	.+10     	; 0x39b6 <nwkTxFrame+0x50>
    39ac:	91 11       	cpse	r25, r1
    39ae:	03 c0       	rjmp	.+6      	; 0x39b6 <nwkTxFrame+0x50>
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
    39b0:	ce 01       	movw	r24, r28
    39b2:	6b dc       	rcall	.-1834   	; 0x328a <nwkRoutePrepareTx>
    39b4:	04 c0       	rjmp	.+8      	; 0x39be <nwkTxFrame+0x58>
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
    39b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    39b8:	98 89       	ldd	r25, Y+16	; 0x10
    39ba:	98 87       	std	Y+8, r25	; 0x08
    39bc:	8f 83       	std	Y+7, r24	; 0x07

  header->macSrcAddr = nwkIb.addr;
    39be:	e9 e7       	ldi	r30, 0x79	; 121
    39c0:	fa e1       	ldi	r31, 0x1A	; 26
    39c2:	80 81       	ld	r24, Z
    39c4:	91 81       	ldd	r25, Z+1	; 0x01
    39c6:	9a 87       	std	Y+10, r25	; 0x0a
    39c8:	89 87       	std	Y+9, r24	; 0x09
  header->macSeq = ++nwkIb.macSeqNum;
    39ca:	85 81       	ldd	r24, Z+5	; 0x05
    39cc:	8f 5f       	subi	r24, 0xFF	; 255
    39ce:	85 83       	std	Z+5, r24	; 0x05
    39d0:	8c 83       	std	Y+4, r24	; 0x04

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
    39d2:	8f 81       	ldd	r24, Y+7	; 0x07
    39d4:	98 85       	ldd	r25, Y+8	; 0x08
    39d6:	01 96       	adiw	r24, 0x01	; 1
    39d8:	69 f4       	brne	.+26     	; 0x39f4 <nwkTxFrame+0x8e>
  {
    header->macFcf = 0x8841;
    39da:	81 e4       	ldi	r24, 0x41	; 65
    39dc:	98 e8       	ldi	r25, 0x88	; 136
    39de:	9b 83       	std	Y+3, r25	; 0x03
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    39e0:	8a 83       	std	Y+2, r24	; 0x02
    39e2:	b4 d7       	rcall	.+3944   	; 0x494c <rand>
    39e4:	87 70       	andi	r24, 0x07	; 7
    39e6:	99 27       	eor	r25, r25
    39e8:	01 96       	adiw	r24, 0x01	; 1
    39ea:	cc 57       	subi	r28, 0x7C	; 124
    39ec:	df 4f       	sbci	r29, 0xFF	; 255
    39ee:	99 83       	std	Y+1, r25	; 0x01
    39f0:	88 83       	st	Y, r24
    39f2:	08 c0       	rjmp	.+16     	; 0x3a04 <nwkTxFrame+0x9e>
  }
  else
  {
    header->macFcf = 0x8861;
    39f4:	81 e6       	ldi	r24, 0x61	; 97
    39f6:	98 e8       	ldi	r25, 0x88	; 136
    39f8:	9b 83       	std	Y+3, r25	; 0x03
    39fa:	8a 83       	std	Y+2, r24	; 0x02
    frame->tx.timeout = 0;
    39fc:	cc 57       	subi	r28, 0x7C	; 124
    39fe:	df 4f       	sbci	r29, 0xFF	; 255
    3a00:	19 82       	std	Y+1, r1	; 0x01
    3a02:	18 82       	st	Y, r1
  }
}
    3a04:	df 91       	pop	r29
    3a06:	cf 91       	pop	r28
    3a08:	08 95       	ret

00003a0a <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    3a0a:	0f 93       	push	r16
    3a0c:	1f 93       	push	r17
    3a0e:	cf 93       	push	r28
    3a10:	df 93       	push	r29
    3a12:	8c 01       	movw	r16, r24
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    3a14:	60 da       	rcall	.-2880   	; 0x2ed6 <nwkFrameAlloc>
    3a16:	ec 01       	movw	r28, r24
    3a18:	89 2b       	or	r24, r25
    3a1a:	b1 f1       	breq	.+108    	; 0x3a88 <nwkTxBroadcastFrame+0x7e>
    return;

  newFrame->state = NWK_TX_STATE_DELAY;
    3a1c:	82 e1       	ldi	r24, 0x12	; 18
    3a1e:	88 83       	st	Y, r24
  newFrame->size = frame->size;
    3a20:	f8 01       	movw	r30, r16
    3a22:	81 81       	ldd	r24, Z+1	; 0x01
    3a24:	89 83       	std	Y+1, r24	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    3a26:	fe 01       	movw	r30, r28
    3a28:	ed 57       	subi	r30, 0x7D	; 125
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    3a2c:	10 82       	st	Z, r1
    3a2e:	8e d7       	rcall	.+3868   	; 0x494c <rand>
    3a30:	87 70       	andi	r24, 0x07	; 7
    3a32:	99 27       	eor	r25, r25
    3a34:	01 96       	adiw	r24, 0x01	; 1
    3a36:	fe 01       	movw	r30, r28
    3a38:	ec 57       	subi	r30, 0x7C	; 124
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	91 83       	std	Z+1, r25	; 0x01
    3a3e:	80 83       	st	Z, r24
  newFrame->tx.confirm = NULL;
    3a40:	33 96       	adiw	r30, 0x03	; 3
    3a42:	11 82       	std	Z+1, r1	; 0x01
    3a44:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    3a46:	f8 01       	movw	r30, r16
    3a48:	41 81       	ldd	r20, Z+1	; 0x01
    3a4a:	b8 01       	movw	r22, r16
    3a4c:	6e 5f       	subi	r22, 0xFE	; 254
    3a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a50:	50 e0       	ldi	r21, 0x00	; 0
    3a52:	ce 01       	movw	r24, r28
    3a54:	02 96       	adiw	r24, 0x02	; 2
    3a56:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <memcpy>

  newFrame->header.macFcf = 0x8841;
    3a5a:	81 e4       	ldi	r24, 0x41	; 65
    3a5c:	98 e8       	ldi	r25, 0x88	; 136
    3a5e:	9b 83       	std	Y+3, r25	; 0x03
    3a60:	8a 83       	std	Y+2, r24	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    3a62:	8f ef       	ldi	r24, 0xFF	; 255
    3a64:	9f ef       	ldi	r25, 0xFF	; 255
    3a66:	98 87       	std	Y+8, r25	; 0x08
    3a68:	8f 83       	std	Y+7, r24	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    3a6a:	f8 01       	movw	r30, r16
    3a6c:	85 81       	ldd	r24, Z+5	; 0x05
    3a6e:	96 81       	ldd	r25, Z+6	; 0x06
    3a70:	9e 83       	std	Y+6, r25	; 0x06
    3a72:	8d 83       	std	Y+5, r24	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    3a74:	e9 e7       	ldi	r30, 0x79	; 121
    3a76:	fa e1       	ldi	r31, 0x1A	; 26
    3a78:	80 81       	ld	r24, Z
    3a7a:	91 81       	ldd	r25, Z+1	; 0x01
    3a7c:	9a 87       	std	Y+10, r25	; 0x0a
    3a7e:	89 87       	std	Y+9, r24	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    3a80:	85 81       	ldd	r24, Z+5	; 0x05
    3a82:	8f 5f       	subi	r24, 0xFF	; 255
    3a84:	85 83       	std	Z+5, r24	; 0x05
    3a86:	8c 83       	std	Y+4, r24	; 0x04
}
    3a88:	df 91       	pop	r29
    3a8a:	cf 91       	pop	r28
    3a8c:	1f 91       	pop	r17
    3a8e:	0f 91       	pop	r16
    3a90:	08 95       	ret

00003a92 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    3a92:	cf 93       	push	r28
    3a94:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    3a96:	fc 01       	movw	r30, r24
    3a98:	c7 81       	ldd	r28, Z+7	; 0x07
    3a9a:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    3a9c:	81 85       	ldd	r24, Z+9	; 0x09
    3a9e:	83 30       	cpi	r24, 0x03	; 3
    3aa0:	c1 f4       	brne	.+48     	; 0x3ad2 <nwkTxAckReceived+0x40>
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	10 c0       	rjmp	.+32     	; 0x3ac8 <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	20 81       	ld	r18, Z
    3aac:	26 31       	cpi	r18, 0x16	; 22
    3aae:	61 f4       	brne	.+24     	; 0x3ac8 <nwkTxAckReceived+0x36>
    3ab0:	34 85       	ldd	r19, Z+12	; 0x0c
    3ab2:	29 81       	ldd	r18, Y+1	; 0x01
    3ab4:	32 13       	cpse	r19, r18
    3ab6:	08 c0       	rjmp	.+16     	; 0x3ac8 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    3ab8:	27 e1       	ldi	r18, 0x17	; 23
    3aba:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    3abc:	2a 81       	ldd	r18, Y+2	; 0x02
    3abe:	ea 57       	subi	r30, 0x7A	; 122
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	20 83       	st	Z, r18
      return true;
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	06 c0       	rjmp	.+12     	; 0x3ad4 <nwkTxAckReceived+0x42>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    3ac8:	41 da       	rcall	.-2942   	; 0x2f4c <nwkFrameNext>
    3aca:	00 97       	sbiw	r24, 0x00	; 0
    3acc:	69 f7       	brne	.-38     	; 0x3aa8 <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	01 c0       	rjmp	.+2      	; 0x3ad4 <nwkTxAckReceived+0x42>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    3ad4:	df 91       	pop	r29
    3ad6:	cf 91       	pop	r28
    3ad8:	08 95       	ret

00003ada <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    3ada:	27 e1       	ldi	r18, 0x17	; 23
    3adc:	fc 01       	movw	r30, r24
    3ade:	20 83       	st	Z, r18
  frame->tx.status = status;
    3ae0:	ed 57       	subi	r30, 0x7D	; 125
    3ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae4:	60 83       	st	Z, r22
    3ae6:	08 95       	ret

00003ae8 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    3ae8:	ef 92       	push	r14
    3aea:	ff 92       	push	r15
    3aec:	1f 93       	push	r17
    3aee:	cf 93       	push	r28
    3af0:	df 93       	push	r29
    3af2:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    3af4:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    3af6:	c0 e0       	ldi	r28, 0x00	; 0
    3af8:	d0 e0       	ldi	r29, 0x00	; 0
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    3afa:	13 c0       	rjmp	.+38     	; 0x3b22 <nwkTxAckWaitTimerHandler+0x3a>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    3afc:	88 81       	ld	r24, Y
    3afe:	86 31       	cpi	r24, 0x16	; 22
    3b00:	81 f4       	brne	.+32     	; 0x3b22 <nwkTxAckWaitTimerHandler+0x3a>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    3b02:	fe 01       	movw	r30, r28
    3b04:	ec 57       	subi	r30, 0x7C	; 124
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	80 81       	ld	r24, Z
    3b0a:	91 81       	ldd	r25, Z+1	; 0x01
    3b0c:	01 97       	sbiw	r24, 0x01	; 1
    3b0e:	91 83       	std	Z+1, r25	; 0x01
    3b10:	80 83       	st	Z, r24
    3b12:	89 2b       	or	r24, r25
    3b14:	29 f4       	brne	.+10     	; 0x3b20 <nwkTxAckWaitTimerHandler+0x38>
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    3b16:	60 e1       	ldi	r22, 0x10	; 16
    3b18:	ce 01       	movw	r24, r28
    3b1a:	df df       	rcall	.-66     	; 0x3ada <nwkTxConfirm>

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    3b1c:	11 e0       	ldi	r17, 0x01	; 1
    3b1e:	01 c0       	rjmp	.+2      	; 0x3b22 <nwkTxAckWaitTimerHandler+0x3a>
    3b20:	11 e0       	ldi	r17, 0x01	; 1
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    3b22:	ce 01       	movw	r24, r28
    3b24:	13 da       	rcall	.-3034   	; 0x2f4c <nwkFrameNext>
    3b26:	ec 01       	movw	r28, r24
    3b28:	89 2b       	or	r24, r25
    3b2a:	41 f7       	brne	.-48     	; 0x3afc <nwkTxAckWaitTimerHandler+0x14>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    3b2c:	11 23       	and	r17, r17
    SYS_TimerStart(timer);
    3b2e:	11 f0       	breq	.+4      	; 0x3b34 <nwkTxAckWaitTimerHandler+0x4c>
    3b30:	c7 01       	movw	r24, r14
    3b32:	6b d2       	rcall	.+1238   	; 0x400a <SYS_TimerStart>
}
    3b34:	df 91       	pop	r29
    3b36:	cf 91       	pop	r28
    3b38:	1f 91       	pop	r17
    3b3a:	ff 90       	pop	r15
    3b3c:	ef 90       	pop	r14
    3b3e:	08 95       	ret

00003b40 <PHY_DataConf>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
    3b40:	cf 93       	push	r28
    3b42:	df 93       	push	r29
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    3b44:	c0 91 ec 17 	lds	r28, 0x17EC	; 0x8017ec <nwkTxPhyActiveFrame>
    3b48:	d0 91 ed 17 	lds	r29, 0x17ED	; 0x8017ed <nwkTxPhyActiveFrame+0x1>
    3b4c:	b4 de       	rcall	.-664    	; 0x38b6 <nwkTxConvertPhyStatus>
    3b4e:	fe 01       	movw	r30, r28
    3b50:	ed 57       	subi	r30, 0x7D	; 125
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    3b56:	85 e1       	ldi	r24, 0x15	; 21
    3b58:	88 83       	st	Y, r24
  nwkTxPhyActiveFrame = NULL;
    3b5a:	10 92 ed 17 	sts	0x17ED, r1	; 0x8017ed <nwkTxPhyActiveFrame+0x1>
    3b5e:	10 92 ec 17 	sts	0x17EC, r1	; 0x8017ec <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    3b62:	e9 e7       	ldi	r30, 0x79	; 121
    3b64:	fa e1       	ldi	r31, 0x1A	; 26
    3b66:	86 a1       	ldd	r24, Z+38	; 0x26
    3b68:	97 a1       	ldd	r25, Z+39	; 0x27
    3b6a:	01 97       	sbiw	r24, 0x01	; 1
    3b6c:	97 a3       	std	Z+39, r25	; 0x27
    3b6e:	86 a3       	std	Z+38, r24	; 0x26
}
    3b70:	df 91       	pop	r29
    3b72:	cf 91       	pop	r28
    3b74:	08 95       	ret

00003b76 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    3b76:	cf 93       	push	r28
    3b78:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    3b7a:	c0 e0       	ldi	r28, 0x00	; 0
    3b7c:	d0 e0       	ldi	r29, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
    3b7e:	68 c0       	rjmp	.+208    	; 0x3c50 <nwkTxTaskHandler+0xda>
  {
    switch (frame->state)
    3b80:	88 81       	ld	r24, Y
    3b82:	83 31       	cpi	r24, 0x13	; 19
    3b84:	d1 f0       	breq	.+52     	; 0x3bba <nwkTxTaskHandler+0x44>
    3b86:	18 f4       	brcc	.+6      	; 0x3b8e <nwkTxTaskHandler+0x18>
    3b88:	82 31       	cpi	r24, 0x12	; 18
    3b8a:	39 f0       	breq	.+14     	; 0x3b9a <nwkTxTaskHandler+0x24>
    3b8c:	61 c0       	rjmp	.+194    	; 0x3c50 <nwkTxTaskHandler+0xda>
    3b8e:	85 31       	cpi	r24, 0x15	; 21
    3b90:	69 f1       	breq	.+90     	; 0x3bec <nwkTxTaskHandler+0x76>
    3b92:	87 31       	cpi	r24, 0x17	; 23
    3b94:	09 f4       	brne	.+2      	; 0x3b98 <nwkTxTaskHandler+0x22>
    3b96:	4d c0       	rjmp	.+154    	; 0x3c32 <nwkTxTaskHandler+0xbc>
    3b98:	5b c0       	rjmp	.+182    	; 0x3c50 <nwkTxTaskHandler+0xda>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	ec 57       	subi	r30, 0x7C	; 124
    3b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba0:	80 81       	ld	r24, Z
    3ba2:	91 81       	ldd	r25, Z+1	; 0x01
    3ba4:	89 2b       	or	r24, r25
    3ba6:	31 f0       	breq	.+12     	; 0x3bb4 <nwkTxTaskHandler+0x3e>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    3ba8:	81 e1       	ldi	r24, 0x11	; 17
    3baa:	88 83       	st	Y, r24
          SYS_TimerStart(&nwkTxDelayTimer);
    3bac:	82 ed       	ldi	r24, 0xD2	; 210
    3bae:	97 e1       	ldi	r25, 0x17	; 23
    3bb0:	2c d2       	rcall	.+1112   	; 0x400a <SYS_TimerStart>
    3bb2:	4e c0       	rjmp	.+156    	; 0x3c50 <nwkTxTaskHandler+0xda>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    3bb4:	83 e1       	ldi	r24, 0x13	; 19
    3bb6:	88 83       	st	Y, r24
    3bb8:	4b c0       	rjmp	.+150    	; 0x3c50 <nwkTxTaskHandler+0xda>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    3bba:	80 91 ec 17 	lds	r24, 0x17EC	; 0x8017ec <nwkTxPhyActiveFrame>
    3bbe:	90 91 ed 17 	lds	r25, 0x17ED	; 0x8017ed <nwkTxPhyActiveFrame+0x1>
    3bc2:	89 2b       	or	r24, r25
    3bc4:	09 f0       	breq	.+2      	; 0x3bc8 <nwkTxTaskHandler+0x52>
    3bc6:	44 c0       	rjmp	.+136    	; 0x3c50 <nwkTxTaskHandler+0xda>
        {
          nwkTxPhyActiveFrame = frame;
    3bc8:	d0 93 ed 17 	sts	0x17ED, r29	; 0x8017ed <nwkTxPhyActiveFrame+0x1>
    3bcc:	c0 93 ec 17 	sts	0x17EC, r28	; 0x8017ec <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    3bd0:	84 e1       	ldi	r24, 0x14	; 20
    3bd2:	88 83       	st	Y, r24
          PHY_DataReq(frame->data, frame->size);
    3bd4:	69 81       	ldd	r22, Y+1	; 0x01
    3bd6:	ce 01       	movw	r24, r28
    3bd8:	02 96       	adiw	r24, 0x02	; 2
    3bda:	c5 d0       	rcall	.+394    	; 0x3d66 <PHY_DataReq>
          nwkIb.lock++;
    3bdc:	e9 e7       	ldi	r30, 0x79	; 121
    3bde:	fa e1       	ldi	r31, 0x1A	; 26
    3be0:	86 a1       	ldd	r24, Z+38	; 0x26
    3be2:	97 a1       	ldd	r25, Z+39	; 0x27
    3be4:	01 96       	adiw	r24, 0x01	; 1
    3be6:	97 a3       	std	Z+39, r25	; 0x27
    3be8:	86 a3       	std	Z+38, r24	; 0x26
    3bea:	32 c0       	rjmp	.+100    	; 0x3c50 <nwkTxTaskHandler+0xda>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    3bec:	fe 01       	movw	r30, r28
    3bee:	ed 57       	subi	r30, 0x7D	; 125
    3bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf2:	80 81       	ld	r24, Z
    3bf4:	81 11       	cpse	r24, r1
    3bf6:	1a c0       	rjmp	.+52     	; 0x3c2c <nwkTxTaskHandler+0xb6>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    3bf8:	2d 85       	ldd	r18, Y+13	; 0x0d
    3bfa:	3e 85       	ldd	r19, Y+14	; 0x0e
    3bfc:	80 91 79 1a 	lds	r24, 0x1A79	; 0x801a79 <nwkIb>
    3c00:	90 91 7a 1a 	lds	r25, 0x1A7A	; 0x801a7a <nwkIb+0x1>
    3c04:	28 17       	cp	r18, r24
    3c06:	39 07       	cpc	r19, r25
    3c08:	71 f4       	brne	.+28     	; 0x3c26 <nwkTxTaskHandler+0xb0>
    3c0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c0c:	80 ff       	sbrs	r24, 0
    3c0e:	0b c0       	rjmp	.+22     	; 0x3c26 <nwkTxTaskHandler+0xb0>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    3c10:	86 e1       	ldi	r24, 0x16	; 22
    3c12:	88 83       	st	Y, r24
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    3c14:	89 e2       	ldi	r24, 0x29	; 41
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	31 96       	adiw	r30, 0x01	; 1
    3c1a:	91 83       	std	Z+1, r25	; 0x01
    3c1c:	80 83       	st	Z, r24
            SYS_TimerStart(&nwkTxAckWaitTimer);
    3c1e:	8f ed       	ldi	r24, 0xDF	; 223
    3c20:	97 e1       	ldi	r25, 0x17	; 23
    3c22:	f3 d1       	rcall	.+998    	; 0x400a <SYS_TimerStart>
    3c24:	15 c0       	rjmp	.+42     	; 0x3c50 <nwkTxTaskHandler+0xda>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    3c26:	87 e1       	ldi	r24, 0x17	; 23
    3c28:	88 83       	st	Y, r24
    3c2a:	12 c0       	rjmp	.+36     	; 0x3c50 <nwkTxTaskHandler+0xda>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    3c2c:	87 e1       	ldi	r24, 0x17	; 23
    3c2e:	88 83       	st	Y, r24
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    3c30:	0f c0       	rjmp	.+30     	; 0x3c50 <nwkTxTaskHandler+0xda>
    3c32:	ce 01       	movw	r24, r28
    3c34:	ee da       	rcall	.-2596   	; 0x3212 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    3c36:	fe 01       	movw	r30, r28
    3c38:	e9 57       	subi	r30, 0x79	; 121
    3c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3c:	01 90       	ld	r0, Z+
    3c3e:	f0 81       	ld	r31, Z
    3c40:	e0 2d       	mov	r30, r0
    3c42:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    3c44:	19 f4       	brne	.+6      	; 0x3c4c <nwkTxTaskHandler+0xd6>
    3c46:	ce 01       	movw	r24, r28
    3c48:	77 d9       	rcall	.-3346   	; 0x2f38 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    3c4a:	02 c0       	rjmp	.+4      	; 0x3c50 <nwkTxTaskHandler+0xda>
    3c4c:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    3c4e:	19 95       	eicall
    3c50:	ce 01       	movw	r24, r28
    3c52:	7c d9       	rcall	.-3336   	; 0x2f4c <nwkFrameNext>
    3c54:	ec 01       	movw	r28, r24
    3c56:	89 2b       	or	r24, r25
    3c58:	09 f0       	breq	.+2      	; 0x3c5c <nwkTxTaskHandler+0xe6>
    3c5a:	92 cf       	rjmp	.-220    	; 0x3b80 <nwkTxTaskHandler+0xa>

      default:
        break;
    };
  }
}
    3c5c:	df 91       	pop	r29
    3c5e:	cf 91       	pop	r28
    3c60:	08 95       	ret

00003c62 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    3c62:	80 91 ee 17 	lds	r24, 0x17EE	; 0x8017ee <phyBand>
    3c66:	98 2f       	mov	r25, r24
    3c68:	9f 70       	andi	r25, 0x0F	; 15
    3c6a:	e4 e5       	ldi	r30, 0x54	; 84
    3c6c:	f1 e0       	ldi	r31, 0x01	; 1
    3c6e:	80 81       	ld	r24, Z
    3c70:	80 7f       	andi	r24, 0xF0	; 240
    3c72:	89 2b       	or	r24, r25
    3c74:	80 83       	st	Z, r24
    3c76:	80 91 ee 17 	lds	r24, 0x17EE	; 0x8017ee <phyBand>
    3c7a:	88 23       	and	r24, r24
    3c7c:	29 f0       	breq	.+10     	; 0x3c88 <phySetChannel+0x26>
    3c7e:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <phyChannel>
    3c82:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    3c86:	08 95       	ret
    3c88:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <phyChannel>
    3c8c:	98 2f       	mov	r25, r24
    3c8e:	9f 71       	andi	r25, 0x1F	; 31
    3c90:	e8 e4       	ldi	r30, 0x48	; 72
    3c92:	f1 e0       	ldi	r31, 0x01	; 1
    3c94:	80 81       	ld	r24, Z
    3c96:	80 7e       	andi	r24, 0xE0	; 224
    3c98:	89 2b       	or	r24, r25
    3c9a:	80 83       	st	Z, r24
    3c9c:	08 95       	ret

00003c9e <phyTrxSetState>:
    3c9e:	93 e0       	ldi	r25, 0x03	; 3
    3ca0:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    3ca4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    3ca8:	9f 71       	andi	r25, 0x1F	; 31
    3caa:	98 30       	cpi	r25, 0x08	; 8
    3cac:	d9 f7       	brne	.-10     	; 0x3ca4 <phyTrxSetState+0x6>
    3cae:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    3cb2:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    3cb6:	9f 71       	andi	r25, 0x1F	; 31
    3cb8:	89 13       	cpse	r24, r25
    3cba:	fb cf       	rjmp	.-10     	; 0x3cb2 <phyTrxSetState+0x14>
    3cbc:	08 95       	ret

00003cbe <phySetRxState>:
    3cbe:	88 e0       	ldi	r24, 0x08	; 8
    3cc0:	ee df       	rcall	.-36     	; 0x3c9e <phyTrxSetState>
    3cc2:	8f ef       	ldi	r24, 0xFF	; 255
    3cc4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    3cc8:	80 91 f0 17 	lds	r24, 0x17F0	; 0x8017f0 <phyRxState>
    3ccc:	88 23       	and	r24, r24
    3cce:	11 f0       	breq	.+4      	; 0x3cd4 <phySetRxState+0x16>
    3cd0:	86 e1       	ldi	r24, 0x16	; 22
    3cd2:	e5 cf       	rjmp	.-54     	; 0x3c9e <phyTrxSetState>
    3cd4:	08 95       	ret

00003cd6 <PHY_Init>:
    3cd6:	e9 e3       	ldi	r30, 0x39	; 57
    3cd8:	f1 e0       	ldi	r31, 0x01	; 1
    3cda:	80 81       	ld	r24, Z
    3cdc:	81 60       	ori	r24, 0x01	; 1
    3cde:	80 83       	st	Z, r24
    3ce0:	10 92 f0 17 	sts	0x17F0, r1	; 0x8017f0 <phyRxState>
    3ce4:	10 92 ee 17 	sts	0x17EE, r1	; 0x8017ee <phyBand>
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <phyState>
    3cee:	88 e0       	ldi	r24, 0x08	; 8
    3cf0:	d6 df       	rcall	.-84     	; 0x3c9e <phyTrxSetState>
    3cf2:	8b ee       	ldi	r24, 0xEB	; 235
    3cf4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    3cf8:	ec e4       	ldi	r30, 0x4C	; 76
    3cfa:	f1 e0       	ldi	r31, 0x01	; 1
    3cfc:	80 81       	ld	r24, Z
    3cfe:	80 68       	ori	r24, 0x80	; 128
    3d00:	80 83       	st	Z, r24
    3d02:	08 95       	ret

00003d04 <PHY_SetRxState>:
    3d04:	80 93 f0 17 	sts	0x17F0, r24	; 0x8017f0 <phyRxState>
    3d08:	da cf       	rjmp	.-76     	; 0x3cbe <phySetRxState>
    3d0a:	08 95       	ret

00003d0c <PHY_SetChannel>:
    3d0c:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <phyChannel>
    3d10:	a8 cf       	rjmp	.-176    	; 0x3c62 <phySetChannel>
    3d12:	08 95       	ret

00003d14 <PHY_SetPanId>:
    3d14:	cf 93       	push	r28
    3d16:	df 93       	push	r29
    3d18:	1f 92       	push	r1
    3d1a:	1f 92       	push	r1
    3d1c:	cd b7       	in	r28, 0x3d	; 61
    3d1e:	de b7       	in	r29, 0x3e	; 62
    3d20:	9a 83       	std	Y+2, r25	; 0x02
    3d22:	89 83       	std	Y+1, r24	; 0x01
    3d24:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    3d28:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    3d2e:	0f 90       	pop	r0
    3d30:	0f 90       	pop	r0
    3d32:	df 91       	pop	r29
    3d34:	cf 91       	pop	r28
    3d36:	08 95       	ret

00003d38 <PHY_SetShortAddr>:
    3d38:	cf 93       	push	r28
    3d3a:	df 93       	push	r29
    3d3c:	1f 92       	push	r1
    3d3e:	1f 92       	push	r1
    3d40:	cd b7       	in	r28, 0x3d	; 61
    3d42:	de b7       	in	r29, 0x3e	; 62
    3d44:	9a 83       	std	Y+2, r25	; 0x02
    3d46:	89 83       	std	Y+1, r24	; 0x01
    3d48:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    3d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    3d52:	99 81       	ldd	r25, Y+1	; 0x01
    3d54:	8a 81       	ldd	r24, Y+2	; 0x02
    3d56:	89 0f       	add	r24, r25
    3d58:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	df 91       	pop	r29
    3d62:	cf 91       	pop	r28
    3d64:	08 95       	ret

00003d66 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    3d66:	0f 93       	push	r16
    3d68:	1f 93       	push	r17
    3d6a:	cf 93       	push	r28
    3d6c:	8c 01       	movw	r16, r24
    3d6e:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    3d70:	89 e1       	ldi	r24, 0x19	; 25
    3d72:	95 df       	rcall	.-214    	; 0x3c9e <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    3d74:	8f ef       	ldi	r24, 0xFF	; 255
    3d76:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    3d7a:	82 e0       	ldi	r24, 0x02	; 2
    3d7c:	8c 0f       	add	r24, r28
    3d7e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    3d82:	20 e0       	ldi	r18, 0x00	; 0
    3d84:	0b c0       	rjmp	.+22     	; 0x3d9c <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];
    3d86:	82 2f       	mov	r24, r18
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	ef 57       	subi	r30, 0x7F	; 127
    3d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d90:	d8 01       	movw	r26, r16
    3d92:	a8 0f       	add	r26, r24
    3d94:	b9 1f       	adc	r27, r25
    3d96:	8c 91       	ld	r24, X
    3d98:	80 83       	st	Z, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    3d9a:	2f 5f       	subi	r18, 0xFF	; 255
    3d9c:	2c 17       	cp	r18, r28
    3d9e:	98 f3       	brcs	.-26     	; 0x3d86 <PHY_DataReq+0x20>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    3da0:	83 e0       	ldi	r24, 0x03	; 3
    3da2:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    3da6:	82 e0       	ldi	r24, 0x02	; 2
    3da8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    3dac:	cf 91       	pop	r28
    3dae:	1f 91       	pop	r17
    3db0:	0f 91       	pop	r16
    3db2:	08 95       	ret

00003db4 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    3db4:	1f 93       	push	r17
    3db6:	cf 93       	push	r28
    3db8:	df 93       	push	r29
    3dba:	00 d0       	rcall	.+0      	; 0x3dbc <PHY_TaskHandler+0x8>
    3dbc:	1f 92       	push	r1
    3dbe:	1f 92       	push	r1
    3dc0:	cd b7       	in	r28, 0x3d	; 61
    3dc2:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    3dc4:	80 91 71 18 	lds	r24, 0x1871	; 0x801871 <phyState>
    3dc8:	82 30       	cpi	r24, 0x02	; 2
    3dca:	09 f4       	brne	.+2      	; 0x3dce <PHY_TaskHandler+0x1a>
    3dcc:	63 c0       	rjmp	.+198    	; 0x3e94 <PHY_TaskHandler+0xe0>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    3dce:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    3dd2:	83 ff       	sbrs	r24, 3
    3dd4:	3c c0       	rjmp	.+120    	; 0x3e4e <PHY_TaskHandler+0x9a>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    3dd6:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	09 c0       	rjmp	.+18     	; 0x3df0 <PHY_TaskHandler+0x3c>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    3dde:	fc 01       	movw	r30, r24
    3de0:	e0 58       	subi	r30, 0x80	; 128
    3de2:	fe 4f       	sbci	r31, 0xFE	; 254
    3de4:	30 81       	ld	r19, Z
    3de6:	fc 01       	movw	r30, r24
    3de8:	ef 50       	subi	r30, 0x0F	; 15
    3dea:	f8 4e       	sbci	r31, 0xE8	; 232
    3dec:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    3dee:	2f 5f       	subi	r18, 0xFF	; 255
    3df0:	82 2f       	mov	r24, r18
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	4a 2f       	mov	r20, r26
    3df6:	50 e0       	ldi	r21, 0x00	; 0
    3df8:	ba 01       	movw	r22, r20
    3dfa:	6f 5f       	subi	r22, 0xFF	; 255
    3dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    3dfe:	86 17       	cp	r24, r22
    3e00:	97 07       	cpc	r25, r23
    3e02:	6c f3       	brlt	.-38     	; 0x3dde <PHY_TaskHandler+0x2a>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    3e04:	81 ef       	ldi	r24, 0xF1	; 241
    3e06:	97 e1       	ldi	r25, 0x17	; 23
    3e08:	9a 83       	std	Y+2, r25	; 0x02
    3e0a:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    3e0c:	a2 50       	subi	r26, 0x02	; 2
    3e0e:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    3e10:	fa 01       	movw	r30, r20
    3e12:	ef 50       	subi	r30, 0x0F	; 15
    3e14:	f8 4e       	sbci	r31, 0xE8	; 232
    3e16:	80 81       	ld	r24, Z
    3e18:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    3e1a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    3e1e:	8a 55       	subi	r24, 0x5A	; 90
    3e20:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    3e22:	ce 01       	movw	r24, r28
    3e24:	01 96       	adiw	r24, 0x01	; 1
    3e26:	f6 dc       	rcall	.-1556   	; 0x3814 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    3e28:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    3e2c:	8f 71       	andi	r24, 0x1F	; 31
    3e2e:	86 31       	cpi	r24, 0x16	; 22
    3e30:	d9 f7       	brne	.-10     	; 0x3e28 <PHY_TaskHandler+0x74>

    IRQ_STATUS_REG_s.rxEnd = 1;
    3e32:	ef e4       	ldi	r30, 0x4F	; 79
    3e34:	f1 e0       	ldi	r31, 0x01	; 1
    3e36:	80 81       	ld	r24, Z
    3e38:	88 60       	ori	r24, 0x08	; 8
    3e3a:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    3e3c:	ec e4       	ldi	r30, 0x4C	; 76
    3e3e:	f1 e0       	ldi	r31, 0x01	; 1
    3e40:	80 81       	ld	r24, Z
    3e42:	8f 77       	andi	r24, 0x7F	; 127
    3e44:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    3e46:	80 81       	ld	r24, Z
    3e48:	80 68       	ori	r24, 0x80	; 128
    3e4a:	80 83       	st	Z, r24
    3e4c:	23 c0       	rjmp	.+70     	; 0x3e94 <PHY_TaskHandler+0xe0>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    3e4e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    3e52:	86 ff       	sbrs	r24, 6
    3e54:	1f c0       	rjmp	.+62     	; 0x3e94 <PHY_TaskHandler+0xe0>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    3e56:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    3e5a:	8f 71       	andi	r24, 0x1F	; 31
    3e5c:	89 31       	cpi	r24, 0x19	; 25
    3e5e:	a9 f4       	brne	.+42     	; 0x3e8a <PHY_TaskHandler+0xd6>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    3e60:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    3e64:	12 95       	swap	r17
    3e66:	16 95       	lsr	r17
    3e68:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    3e6a:	49 f0       	breq	.+18     	; 0x3e7e <PHY_TaskHandler+0xca>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    3e6c:	13 30       	cpi	r17, 0x03	; 3
    3e6e:	21 f0       	breq	.+8      	; 0x3e78 <PHY_TaskHandler+0xc4>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    3e70:	15 30       	cpi	r17, 0x05	; 5
    3e72:	21 f4       	brne	.+8      	; 0x3e7c <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_NO_ACK;
    3e74:	12 e0       	ldi	r17, 0x02	; 2
    3e76:	03 c0       	rjmp	.+6      	; 0x3e7e <PHY_TaskHandler+0xca>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    3e78:	11 e0       	ldi	r17, 0x01	; 1
    3e7a:	01 c0       	rjmp	.+2      	; 0x3e7e <PHY_TaskHandler+0xca>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    3e7c:	13 e0       	ldi	r17, 0x03	; 3
    3e7e:	1f df       	rcall	.-450    	; 0x3cbe <phySetRxState>
      phyState = PHY_STATE_IDLE;
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <phyState>

      PHY_DataConf(status);
    3e86:	81 2f       	mov	r24, r17
    3e88:	5b de       	rcall	.-842    	; 0x3b40 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    3e8a:	ef e4       	ldi	r30, 0x4F	; 79
    3e8c:	f1 e0       	ldi	r31, 0x01	; 1
    3e8e:	80 81       	ld	r24, Z
    3e90:	80 64       	ori	r24, 0x40	; 64
    3e92:	80 83       	st	Z, r24
  }
}
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	0f 90       	pop	r0
    3e9a:	0f 90       	pop	r0
    3e9c:	0f 90       	pop	r0
    3e9e:	df 91       	pop	r29
    3ea0:	cf 91       	pop	r28
    3ea2:	1f 91       	pop	r17
    3ea4:	08 95       	ret

00003ea6 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    3ea6:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <HAL_Init>
  SYS_TimerInit();
    3eaa:	60 d0       	rcall	.+192    	; 0x3f6c <SYS_TimerInit>
  PHY_Init();
    3eac:	14 df       	rcall	.-472    	; 0x3cd6 <PHY_Init>
    3eae:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <NWK_Init>
  NWK_Init();
    3eb2:	08 95       	ret

00003eb4 <SYS_TaskHandler>:
    3eb4:	7f df       	rcall	.-258    	; 0x3db4 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    3eb6:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    3eba:	b2 c0       	rjmp	.+356    	; 0x4020 <SYS_TimerTaskHandler>
    3ebc:	08 95       	ret

00003ebe <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    3ebe:	0f 93       	push	r16
    3ec0:	1f 93       	push	r17
    3ec2:	cf 93       	push	r28
    3ec4:	df 93       	push	r29
    3ec6:	ec 01       	movw	r28, r24
  if (timers)
    3ec8:	80 91 72 18 	lds	r24, 0x1872	; 0x801872 <timers>
    3ecc:	90 91 73 18 	lds	r25, 0x1873	; 0x801873 <timers+0x1>
    3ed0:	00 97       	sbiw	r24, 0x00	; 0
    3ed2:	c9 f1       	breq	.+114    	; 0x3f46 <placeTimer+0x88>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    3ed4:	4e 81       	ldd	r20, Y+6	; 0x06
    3ed6:	5f 81       	ldd	r21, Y+7	; 0x07
    3ed8:	68 85       	ldd	r22, Y+8	; 0x08
    3eda:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    3edc:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    3ede:	a0 e0       	ldi	r26, 0x00	; 0
    3ee0:	b0 e0       	ldi	r27, 0x00	; 0
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    3ee2:	1a c0       	rjmp	.+52     	; 0x3f18 <placeTimer+0x5a>
    {
      if (timeout < t->timeout)
    3ee4:	02 81       	ldd	r16, Z+2	; 0x02
    3ee6:	13 81       	ldd	r17, Z+3	; 0x03
    3ee8:	24 81       	ldd	r18, Z+4	; 0x04
    3eea:	35 81       	ldd	r19, Z+5	; 0x05
    3eec:	40 17       	cp	r20, r16
    3eee:	51 07       	cpc	r21, r17
    3ef0:	62 07       	cpc	r22, r18
    3ef2:	73 07       	cpc	r23, r19
    3ef4:	48 f4       	brcc	.+18     	; 0x3f08 <placeTimer+0x4a>
      {
         t->timeout -= timeout;
    3ef6:	04 1b       	sub	r16, r20
    3ef8:	15 0b       	sbc	r17, r21
    3efa:	26 0b       	sbc	r18, r22
    3efc:	37 0b       	sbc	r19, r23
    3efe:	02 83       	std	Z+2, r16	; 0x02
    3f00:	13 83       	std	Z+3, r17	; 0x03
    3f02:	24 83       	std	Z+4, r18	; 0x04
    3f04:	35 83       	std	Z+5, r19	; 0x05
         break;
    3f06:	0a c0       	rjmp	.+20     	; 0x3f1c <placeTimer+0x5e>
      }
      else
        timeout -= t->timeout;
    3f08:	40 1b       	sub	r20, r16
    3f0a:	51 0b       	sbc	r21, r17
    3f0c:	62 0b       	sbc	r22, r18
    3f0e:	73 0b       	sbc	r23, r19

      prev = t;
    3f10:	df 01       	movw	r26, r30
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    3f12:	01 90       	ld	r0, Z+
    3f14:	f0 81       	ld	r31, Z
    3f16:	e0 2d       	mov	r30, r0
    3f18:	30 97       	sbiw	r30, 0x00	; 0
    3f1a:	21 f7       	brne	.-56     	; 0x3ee4 <placeTimer+0x26>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    3f1c:	4a 83       	std	Y+2, r20	; 0x02
    3f1e:	5b 83       	std	Y+3, r21	; 0x03
    3f20:	6c 83       	std	Y+4, r22	; 0x04
    3f22:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    3f24:	10 97       	sbiw	r26, 0x00	; 0
    3f26:	41 f0       	breq	.+16     	; 0x3f38 <placeTimer+0x7a>
    {
      timer->next = prev->next;
    3f28:	8d 91       	ld	r24, X+
    3f2a:	9c 91       	ld	r25, X
    3f2c:	11 97       	sbiw	r26, 0x01	; 1
    3f2e:	99 83       	std	Y+1, r25	; 0x01
    3f30:	88 83       	st	Y, r24
      prev->next = timer;
    3f32:	cd 93       	st	X+, r28
    3f34:	dc 93       	st	X, r29
    3f36:	15 c0       	rjmp	.+42     	; 0x3f62 <placeTimer+0xa4>
    }
    else
    {
      timer->next = timers;
    3f38:	99 83       	std	Y+1, r25	; 0x01
    3f3a:	88 83       	st	Y, r24
      timers = timer;
    3f3c:	d0 93 73 18 	sts	0x1873, r29	; 0x801873 <timers+0x1>
    3f40:	c0 93 72 18 	sts	0x1872, r28	; 0x801872 <timers>
    3f44:	0e c0       	rjmp	.+28     	; 0x3f62 <placeTimer+0xa4>
    }
  }
  else
  {
    timer->next = NULL;
    3f46:	19 82       	std	Y+1, r1	; 0x01
    3f48:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    3f4a:	8e 81       	ldd	r24, Y+6	; 0x06
    3f4c:	9f 81       	ldd	r25, Y+7	; 0x07
    3f4e:	a8 85       	ldd	r26, Y+8	; 0x08
    3f50:	b9 85       	ldd	r27, Y+9	; 0x09
    3f52:	8a 83       	std	Y+2, r24	; 0x02
    3f54:	9b 83       	std	Y+3, r25	; 0x03
    3f56:	ac 83       	std	Y+4, r26	; 0x04
    3f58:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    3f5a:	d0 93 73 18 	sts	0x1873, r29	; 0x801873 <timers+0x1>
    3f5e:	c0 93 72 18 	sts	0x1872, r28	; 0x801872 <timers>
  }
}
    3f62:	df 91       	pop	r29
    3f64:	cf 91       	pop	r28
    3f66:	1f 91       	pop	r17
    3f68:	0f 91       	pop	r16
    3f6a:	08 95       	ret

00003f6c <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    3f6c:	10 92 73 18 	sts	0x1873, r1	; 0x801873 <timers+0x1>
    3f70:	10 92 72 18 	sts	0x1872, r1	; 0x801872 <timers>
    3f74:	08 95       	ret

00003f76 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    3f76:	cf 93       	push	r28
    3f78:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    3f7a:	e0 91 72 18 	lds	r30, 0x1872	; 0x801872 <timers>
    3f7e:	f0 91 73 18 	lds	r31, 0x1873	; 0x801873 <timers+0x1>

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;
    3f82:	a0 e0       	ldi	r26, 0x00	; 0
    3f84:	b0 e0       	ldi	r27, 0x00	; 0

  for (SYS_Timer_t *t = timers; t; t = t->next)
    3f86:	2b c0       	rjmp	.+86     	; 0x3fde <SYS_TimerStop+0x68>
  {
    if (t == timer)
    3f88:	e8 17       	cp	r30, r24
    3f8a:	f9 07       	cpc	r31, r25
    3f8c:	21 f5       	brne	.+72     	; 0x3fd6 <SYS_TimerStop+0x60>
    {
      if (prev)
    3f8e:	10 97       	sbiw	r26, 0x00	; 0
    3f90:	29 f0       	breq	.+10     	; 0x3f9c <SYS_TimerStop+0x26>
        prev->next = t->next;
    3f92:	20 81       	ld	r18, Z
    3f94:	31 81       	ldd	r19, Z+1	; 0x01
    3f96:	2d 93       	st	X+, r18
    3f98:	3c 93       	st	X, r19
    3f9a:	06 c0       	rjmp	.+12     	; 0x3fa8 <SYS_TimerStop+0x32>
      else
        timers = t->next;
    3f9c:	20 81       	ld	r18, Z
    3f9e:	31 81       	ldd	r19, Z+1	; 0x01
    3fa0:	30 93 73 18 	sts	0x1873, r19	; 0x801873 <timers+0x1>
    3fa4:	20 93 72 18 	sts	0x1872, r18	; 0x801872 <timers>

      if (t->next)
    3fa8:	01 90       	ld	r0, Z+
    3faa:	f0 81       	ld	r31, Z
    3fac:	e0 2d       	mov	r30, r0
    3fae:	30 97       	sbiw	r30, 0x00	; 0
    3fb0:	c1 f0       	breq	.+48     	; 0x3fe2 <SYS_TimerStop+0x6c>
        t->next->timeout += timer->timeout;
    3fb2:	ec 01       	movw	r28, r24
    3fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    3fb8:	ac 81       	ldd	r26, Y+4	; 0x04
    3fba:	bd 81       	ldd	r27, Y+5	; 0x05
    3fbc:	42 81       	ldd	r20, Z+2	; 0x02
    3fbe:	53 81       	ldd	r21, Z+3	; 0x03
    3fc0:	64 81       	ldd	r22, Z+4	; 0x04
    3fc2:	75 81       	ldd	r23, Z+5	; 0x05
    3fc4:	84 0f       	add	r24, r20
    3fc6:	95 1f       	adc	r25, r21
    3fc8:	a6 1f       	adc	r26, r22
    3fca:	b7 1f       	adc	r27, r23
    3fcc:	82 83       	std	Z+2, r24	; 0x02
    3fce:	93 83       	std	Z+3, r25	; 0x03
    3fd0:	a4 83       	std	Z+4, r26	; 0x04
    3fd2:	b5 83       	std	Z+5, r27	; 0x05
    3fd4:	06 c0       	rjmp	.+12     	; 0x3fe2 <SYS_TimerStop+0x6c>

      break;
    }
    prev = t;
    3fd6:	df 01       	movw	r26, r30
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    3fd8:	01 90       	ld	r0, Z+
    3fda:	f0 81       	ld	r31, Z
    3fdc:	e0 2d       	mov	r30, r0
    3fde:	30 97       	sbiw	r30, 0x00	; 0
    3fe0:	99 f6       	brne	.-90     	; 0x3f88 <SYS_TimerStop+0x12>

      break;
    }
    prev = t;
  }
}
    3fe2:	df 91       	pop	r29
    3fe4:	cf 91       	pop	r28
    3fe6:	08 95       	ret

00003fe8 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    3fe8:	e0 91 72 18 	lds	r30, 0x1872	; 0x801872 <timers>
    3fec:	f0 91 73 18 	lds	r31, 0x1873	; 0x801873 <timers+0x1>
    3ff0:	06 c0       	rjmp	.+12     	; 0x3ffe <SYS_TimerStarted+0x16>
    if (t == timer)
    3ff2:	e8 17       	cp	r30, r24
    3ff4:	f9 07       	cpc	r31, r25
    3ff6:	39 f0       	breq	.+14     	; 0x4006 <SYS_TimerStarted+0x1e>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    3ff8:	01 90       	ld	r0, Z+
    3ffa:	f0 81       	ld	r31, Z
    3ffc:	e0 2d       	mov	r30, r0
    3ffe:	30 97       	sbiw	r30, 0x00	; 0
    4000:	c1 f7       	brne	.-16     	; 0x3ff2 <SYS_TimerStarted+0xa>
    if (t == timer)
      return true;
  return false;
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    4006:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    4008:	08 95       	ret

0000400a <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    400a:	cf 93       	push	r28
    400c:	df 93       	push	r29
    400e:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    4010:	eb df       	rcall	.-42     	; 0x3fe8 <SYS_TimerStarted>
    4012:	81 11       	cpse	r24, r1
    4014:	02 c0       	rjmp	.+4      	; 0x401a <SYS_TimerStart+0x10>
    placeTimer(timer);
    4016:	ce 01       	movw	r24, r28
    4018:	52 df       	rcall	.-348    	; 0x3ebe <placeTimer>
}
    401a:	df 91       	pop	r29
    401c:	cf 91       	pop	r28
    401e:	08 95       	ret

00004020 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    4020:	cf 92       	push	r12
    4022:	df 92       	push	r13
    4024:	ef 92       	push	r14
    4026:	ff 92       	push	r15
    4028:	cf 93       	push	r28
    402a:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    402c:	80 91 78 1a 	lds	r24, 0x1A78	; 0x801a78 <halTimerIrqCount>
    4030:	88 23       	and	r24, r24
    4032:	09 f4       	brne	.+2      	; 0x4036 <SYS_TimerTaskHandler+0x16>
    4034:	4d c0       	rjmp	.+154    	; 0x40d0 <SYS_TimerTaskHandler+0xb0>
    return;

  ATOMIC_SECTION_ENTER
    4036:	8f b7       	in	r24, 0x3f	; 63
    4038:	f8 94       	cli
    cnt = halTimerIrqCount;
    403a:	c0 90 78 1a 	lds	r12, 0x1A78	; 0x801a78 <halTimerIrqCount>
    halTimerIrqCount = 0;
    403e:	10 92 78 1a 	sts	0x1A78, r1	; 0x801a78 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    4042:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    4044:	d1 2c       	mov	r13, r1
    4046:	e1 2c       	mov	r14, r1
    4048:	f1 2c       	mov	r15, r1
    404a:	cc 0c       	add	r12, r12
    404c:	dd 1c       	adc	r13, r13
    404e:	ee 1c       	adc	r14, r14
    4050:	ff 1c       	adc	r15, r15
    4052:	d7 01       	movw	r26, r14
    4054:	c6 01       	movw	r24, r12
    4056:	88 0f       	add	r24, r24
    4058:	99 1f       	adc	r25, r25
    405a:	aa 1f       	adc	r26, r26
    405c:	bb 1f       	adc	r27, r27
    405e:	88 0f       	add	r24, r24
    4060:	99 1f       	adc	r25, r25
    4062:	aa 1f       	adc	r26, r26
    4064:	bb 1f       	adc	r27, r27
    4066:	c8 0e       	add	r12, r24
    4068:	d9 1e       	adc	r13, r25
    406a:	ea 1e       	adc	r14, r26
    406c:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    406e:	13 c0       	rjmp	.+38     	; 0x4096 <SYS_TimerTaskHandler+0x76>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    4070:	c8 1a       	sub	r12, r24
    4072:	d9 0a       	sbc	r13, r25
    4074:	ea 0a       	sbc	r14, r26
    4076:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    4078:	88 81       	ld	r24, Y
    407a:	99 81       	ldd	r25, Y+1	; 0x01
    407c:	90 93 73 18 	sts	0x1873, r25	; 0x801873 <timers+0x1>
    4080:	80 93 72 18 	sts	0x1872, r24	; 0x801872 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    4084:	8a 85       	ldd	r24, Y+10	; 0x0a
    4086:	81 30       	cpi	r24, 0x01	; 1
    4088:	11 f4       	brne	.+4      	; 0x408e <SYS_TimerTaskHandler+0x6e>
      placeTimer(timer);
    408a:	ce 01       	movw	r24, r28
    408c:	18 df       	rcall	.-464    	; 0x3ebe <placeTimer>
    timer->handler(timer);
    408e:	eb 85       	ldd	r30, Y+11	; 0x0b
    4090:	fc 85       	ldd	r31, Y+12	; 0x0c
    4092:	ce 01       	movw	r24, r28
    4094:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    4096:	c0 91 72 18 	lds	r28, 0x1872	; 0x801872 <timers>
    409a:	d0 91 73 18 	lds	r29, 0x1873	; 0x801873 <timers+0x1>
    409e:	20 97       	sbiw	r28, 0x00	; 0
    40a0:	49 f0       	breq	.+18     	; 0x40b4 <SYS_TimerTaskHandler+0x94>
    40a2:	8a 81       	ldd	r24, Y+2	; 0x02
    40a4:	9b 81       	ldd	r25, Y+3	; 0x03
    40a6:	ac 81       	ldd	r26, Y+4	; 0x04
    40a8:	bd 81       	ldd	r27, Y+5	; 0x05
    40aa:	c8 16       	cp	r12, r24
    40ac:	d9 06       	cpc	r13, r25
    40ae:	ea 06       	cpc	r14, r26
    40b0:	fb 06       	cpc	r15, r27
    40b2:	f0 f6       	brcc	.-68     	; 0x4070 <SYS_TimerTaskHandler+0x50>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    40b4:	20 97       	sbiw	r28, 0x00	; 0
    40b6:	61 f0       	breq	.+24     	; 0x40d0 <SYS_TimerTaskHandler+0xb0>
    timers->timeout -= elapsed;
    40b8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ba:	9b 81       	ldd	r25, Y+3	; 0x03
    40bc:	ac 81       	ldd	r26, Y+4	; 0x04
    40be:	bd 81       	ldd	r27, Y+5	; 0x05
    40c0:	8c 19       	sub	r24, r12
    40c2:	9d 09       	sbc	r25, r13
    40c4:	ae 09       	sbc	r26, r14
    40c6:	bf 09       	sbc	r27, r15
    40c8:	8a 83       	std	Y+2, r24	; 0x02
    40ca:	9b 83       	std	Y+3, r25	; 0x03
    40cc:	ac 83       	std	Y+4, r26	; 0x04
    40ce:	bd 83       	std	Y+5, r27	; 0x05
}
    40d0:	df 91       	pop	r29
    40d2:	cf 91       	pop	r28
    40d4:	ff 90       	pop	r15
    40d6:	ef 90       	pop	r14
    40d8:	df 90       	pop	r13
    40da:	cf 90       	pop	r12
    40dc:	08 95       	ret

000040de <UART_init>:
}

uint8_t UART_GetChar(void){
	while (!tbi_(UCSR1A,RXC1));
	return UDR1;
}
    40de:	9c 01       	movw	r18, r24
    40e0:	40 e0       	ldi	r20, 0x00	; 0
    40e2:	50 e0       	ldi	r21, 0x00	; 0
    40e4:	60 e2       	ldi	r22, 0x20	; 32
    40e6:	71 ea       	ldi	r23, 0xA1	; 161
    40e8:	87 e0       	ldi	r24, 0x07	; 7
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	c4 d3       	rcall	.+1928   	; 0x4876 <__divmodsi4>
    40ee:	21 50       	subi	r18, 0x01	; 1
    40f0:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
    40f4:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    40f8:	e9 ec       	ldi	r30, 0xC9	; 201
    40fa:	f0 e0       	ldi	r31, 0x00	; 0
    40fc:	88 e1       	ldi	r24, 0x18	; 24
    40fe:	80 83       	st	Z, r24
    4100:	86 e0       	ldi	r24, 0x06	; 6
    4102:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
    4106:	80 81       	ld	r24, Z
    4108:	80 68       	ori	r24, 0x80	; 128
    410a:	80 83       	st	Z, r24
    410c:	08 95       	ret

0000410e <printCHAR>:
int printCHAR(char character, FILE *stream)
{
	while ((UCSR1A & (1 << UDRE1)) == 0) {};
    410e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    4112:	95 ff       	sbrs	r25, 5
    4114:	fc cf       	rjmp	.-8      	; 0x410e <printCHAR>

	UDR1 = character;
    4116:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

	return 0;
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	08 95       	ret

00004120 <vfprintf>:
    4120:	2f 92       	push	r2
    4122:	3f 92       	push	r3
    4124:	4f 92       	push	r4
    4126:	5f 92       	push	r5
    4128:	6f 92       	push	r6
    412a:	7f 92       	push	r7
    412c:	8f 92       	push	r8
    412e:	9f 92       	push	r9
    4130:	af 92       	push	r10
    4132:	bf 92       	push	r11
    4134:	cf 92       	push	r12
    4136:	df 92       	push	r13
    4138:	ef 92       	push	r14
    413a:	ff 92       	push	r15
    413c:	0f 93       	push	r16
    413e:	1f 93       	push	r17
    4140:	cf 93       	push	r28
    4142:	df 93       	push	r29
    4144:	cd b7       	in	r28, 0x3d	; 61
    4146:	de b7       	in	r29, 0x3e	; 62
    4148:	60 97       	sbiw	r28, 0x10	; 16
    414a:	0f b6       	in	r0, 0x3f	; 63
    414c:	f8 94       	cli
    414e:	de bf       	out	0x3e, r29	; 62
    4150:	0f be       	out	0x3f, r0	; 63
    4152:	cd bf       	out	0x3d, r28	; 61
    4154:	7c 01       	movw	r14, r24
    4156:	1b 01       	movw	r2, r22
    4158:	6a 01       	movw	r12, r20
    415a:	fc 01       	movw	r30, r24
    415c:	17 82       	std	Z+7, r1	; 0x07
    415e:	16 82       	std	Z+6, r1	; 0x06
    4160:	83 81       	ldd	r24, Z+3	; 0x03
    4162:	81 ff       	sbrs	r24, 1
    4164:	2a c3       	rjmp	.+1620   	; 0x47ba <vfprintf+0x69a>
    4166:	9e 01       	movw	r18, r28
    4168:	2f 5f       	subi	r18, 0xFF	; 255
    416a:	3f 4f       	sbci	r19, 0xFF	; 255
    416c:	39 01       	movw	r6, r18
    416e:	f7 01       	movw	r30, r14
    4170:	93 81       	ldd	r25, Z+3	; 0x03
    4172:	f1 01       	movw	r30, r2
    4174:	93 fd       	sbrc	r25, 3
    4176:	85 91       	lpm	r24, Z+
    4178:	93 ff       	sbrs	r25, 3
    417a:	81 91       	ld	r24, Z+
    417c:	1f 01       	movw	r2, r30
    417e:	88 23       	and	r24, r24
    4180:	09 f4       	brne	.+2      	; 0x4184 <vfprintf+0x64>
    4182:	17 c3       	rjmp	.+1582   	; 0x47b2 <vfprintf+0x692>
    4184:	85 32       	cpi	r24, 0x25	; 37
    4186:	39 f4       	brne	.+14     	; 0x4196 <vfprintf+0x76>
    4188:	93 fd       	sbrc	r25, 3
    418a:	85 91       	lpm	r24, Z+
    418c:	93 ff       	sbrs	r25, 3
    418e:	81 91       	ld	r24, Z+
    4190:	1f 01       	movw	r2, r30
    4192:	85 32       	cpi	r24, 0x25	; 37
    4194:	31 f4       	brne	.+12     	; 0x41a2 <vfprintf+0x82>
    4196:	b7 01       	movw	r22, r14
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	dd d4       	rcall	.+2490   	; 0x4b56 <fputc>
    419c:	56 01       	movw	r10, r12
    419e:	65 01       	movw	r12, r10
    41a0:	e6 cf       	rjmp	.-52     	; 0x416e <vfprintf+0x4e>
    41a2:	10 e0       	ldi	r17, 0x00	; 0
    41a4:	51 2c       	mov	r5, r1
    41a6:	91 2c       	mov	r9, r1
    41a8:	ff e1       	ldi	r31, 0x1F	; 31
    41aa:	f9 15       	cp	r31, r9
    41ac:	d8 f0       	brcs	.+54     	; 0x41e4 <vfprintf+0xc4>
    41ae:	8b 32       	cpi	r24, 0x2B	; 43
    41b0:	79 f0       	breq	.+30     	; 0x41d0 <vfprintf+0xb0>
    41b2:	38 f4       	brcc	.+14     	; 0x41c2 <vfprintf+0xa2>
    41b4:	80 32       	cpi	r24, 0x20	; 32
    41b6:	79 f0       	breq	.+30     	; 0x41d6 <vfprintf+0xb6>
    41b8:	83 32       	cpi	r24, 0x23	; 35
    41ba:	a1 f4       	brne	.+40     	; 0x41e4 <vfprintf+0xc4>
    41bc:	f9 2d       	mov	r31, r9
    41be:	f0 61       	ori	r31, 0x10	; 16
    41c0:	2e c0       	rjmp	.+92     	; 0x421e <vfprintf+0xfe>
    41c2:	8d 32       	cpi	r24, 0x2D	; 45
    41c4:	61 f0       	breq	.+24     	; 0x41de <vfprintf+0xbe>
    41c6:	80 33       	cpi	r24, 0x30	; 48
    41c8:	69 f4       	brne	.+26     	; 0x41e4 <vfprintf+0xc4>
    41ca:	29 2d       	mov	r18, r9
    41cc:	21 60       	ori	r18, 0x01	; 1
    41ce:	2d c0       	rjmp	.+90     	; 0x422a <vfprintf+0x10a>
    41d0:	39 2d       	mov	r19, r9
    41d2:	32 60       	ori	r19, 0x02	; 2
    41d4:	93 2e       	mov	r9, r19
    41d6:	89 2d       	mov	r24, r9
    41d8:	84 60       	ori	r24, 0x04	; 4
    41da:	98 2e       	mov	r9, r24
    41dc:	2a c0       	rjmp	.+84     	; 0x4232 <vfprintf+0x112>
    41de:	e9 2d       	mov	r30, r9
    41e0:	e8 60       	ori	r30, 0x08	; 8
    41e2:	15 c0       	rjmp	.+42     	; 0x420e <vfprintf+0xee>
    41e4:	97 fc       	sbrc	r9, 7
    41e6:	2d c0       	rjmp	.+90     	; 0x4242 <vfprintf+0x122>
    41e8:	20 ed       	ldi	r18, 0xD0	; 208
    41ea:	28 0f       	add	r18, r24
    41ec:	2a 30       	cpi	r18, 0x0A	; 10
    41ee:	88 f4       	brcc	.+34     	; 0x4212 <vfprintf+0xf2>
    41f0:	96 fe       	sbrs	r9, 6
    41f2:	06 c0       	rjmp	.+12     	; 0x4200 <vfprintf+0xe0>
    41f4:	3a e0       	ldi	r19, 0x0A	; 10
    41f6:	13 9f       	mul	r17, r19
    41f8:	20 0d       	add	r18, r0
    41fa:	11 24       	eor	r1, r1
    41fc:	12 2f       	mov	r17, r18
    41fe:	19 c0       	rjmp	.+50     	; 0x4232 <vfprintf+0x112>
    4200:	8a e0       	ldi	r24, 0x0A	; 10
    4202:	58 9e       	mul	r5, r24
    4204:	20 0d       	add	r18, r0
    4206:	11 24       	eor	r1, r1
    4208:	52 2e       	mov	r5, r18
    420a:	e9 2d       	mov	r30, r9
    420c:	e0 62       	ori	r30, 0x20	; 32
    420e:	9e 2e       	mov	r9, r30
    4210:	10 c0       	rjmp	.+32     	; 0x4232 <vfprintf+0x112>
    4212:	8e 32       	cpi	r24, 0x2E	; 46
    4214:	31 f4       	brne	.+12     	; 0x4222 <vfprintf+0x102>
    4216:	96 fc       	sbrc	r9, 6
    4218:	cc c2       	rjmp	.+1432   	; 0x47b2 <vfprintf+0x692>
    421a:	f9 2d       	mov	r31, r9
    421c:	f0 64       	ori	r31, 0x40	; 64
    421e:	9f 2e       	mov	r9, r31
    4220:	08 c0       	rjmp	.+16     	; 0x4232 <vfprintf+0x112>
    4222:	8c 36       	cpi	r24, 0x6C	; 108
    4224:	21 f4       	brne	.+8      	; 0x422e <vfprintf+0x10e>
    4226:	29 2d       	mov	r18, r9
    4228:	20 68       	ori	r18, 0x80	; 128
    422a:	92 2e       	mov	r9, r18
    422c:	02 c0       	rjmp	.+4      	; 0x4232 <vfprintf+0x112>
    422e:	88 36       	cpi	r24, 0x68	; 104
    4230:	41 f4       	brne	.+16     	; 0x4242 <vfprintf+0x122>
    4232:	f1 01       	movw	r30, r2
    4234:	93 fd       	sbrc	r25, 3
    4236:	85 91       	lpm	r24, Z+
    4238:	93 ff       	sbrs	r25, 3
    423a:	81 91       	ld	r24, Z+
    423c:	1f 01       	movw	r2, r30
    423e:	81 11       	cpse	r24, r1
    4240:	b3 cf       	rjmp	.-154    	; 0x41a8 <vfprintf+0x88>
    4242:	9b eb       	ldi	r25, 0xBB	; 187
    4244:	98 0f       	add	r25, r24
    4246:	93 30       	cpi	r25, 0x03	; 3
    4248:	20 f4       	brcc	.+8      	; 0x4252 <vfprintf+0x132>
    424a:	99 2d       	mov	r25, r9
    424c:	90 61       	ori	r25, 0x10	; 16
    424e:	80 5e       	subi	r24, 0xE0	; 224
    4250:	07 c0       	rjmp	.+14     	; 0x4260 <vfprintf+0x140>
    4252:	9b e9       	ldi	r25, 0x9B	; 155
    4254:	98 0f       	add	r25, r24
    4256:	93 30       	cpi	r25, 0x03	; 3
    4258:	08 f0       	brcs	.+2      	; 0x425c <vfprintf+0x13c>
    425a:	59 c1       	rjmp	.+690    	; 0x450e <vfprintf+0x3ee>
    425c:	99 2d       	mov	r25, r9
    425e:	9f 7e       	andi	r25, 0xEF	; 239
    4260:	96 ff       	sbrs	r25, 6
    4262:	16 e0       	ldi	r17, 0x06	; 6
    4264:	9f 73       	andi	r25, 0x3F	; 63
    4266:	99 2e       	mov	r9, r25
    4268:	85 36       	cpi	r24, 0x65	; 101
    426a:	19 f4       	brne	.+6      	; 0x4272 <vfprintf+0x152>
    426c:	90 64       	ori	r25, 0x40	; 64
    426e:	99 2e       	mov	r9, r25
    4270:	08 c0       	rjmp	.+16     	; 0x4282 <vfprintf+0x162>
    4272:	86 36       	cpi	r24, 0x66	; 102
    4274:	21 f4       	brne	.+8      	; 0x427e <vfprintf+0x15e>
    4276:	39 2f       	mov	r19, r25
    4278:	30 68       	ori	r19, 0x80	; 128
    427a:	93 2e       	mov	r9, r19
    427c:	02 c0       	rjmp	.+4      	; 0x4282 <vfprintf+0x162>
    427e:	11 11       	cpse	r17, r1
    4280:	11 50       	subi	r17, 0x01	; 1
    4282:	97 fe       	sbrs	r9, 7
    4284:	07 c0       	rjmp	.+14     	; 0x4294 <vfprintf+0x174>
    4286:	1c 33       	cpi	r17, 0x3C	; 60
    4288:	50 f4       	brcc	.+20     	; 0x429e <vfprintf+0x17e>
    428a:	44 24       	eor	r4, r4
    428c:	43 94       	inc	r4
    428e:	41 0e       	add	r4, r17
    4290:	27 e0       	ldi	r18, 0x07	; 7
    4292:	0b c0       	rjmp	.+22     	; 0x42aa <vfprintf+0x18a>
    4294:	18 30       	cpi	r17, 0x08	; 8
    4296:	38 f0       	brcs	.+14     	; 0x42a6 <vfprintf+0x186>
    4298:	27 e0       	ldi	r18, 0x07	; 7
    429a:	17 e0       	ldi	r17, 0x07	; 7
    429c:	05 c0       	rjmp	.+10     	; 0x42a8 <vfprintf+0x188>
    429e:	27 e0       	ldi	r18, 0x07	; 7
    42a0:	9c e3       	ldi	r25, 0x3C	; 60
    42a2:	49 2e       	mov	r4, r25
    42a4:	02 c0       	rjmp	.+4      	; 0x42aa <vfprintf+0x18a>
    42a6:	21 2f       	mov	r18, r17
    42a8:	41 2c       	mov	r4, r1
    42aa:	56 01       	movw	r10, r12
    42ac:	84 e0       	ldi	r24, 0x04	; 4
    42ae:	a8 0e       	add	r10, r24
    42b0:	b1 1c       	adc	r11, r1
    42b2:	f6 01       	movw	r30, r12
    42b4:	60 81       	ld	r22, Z
    42b6:	71 81       	ldd	r23, Z+1	; 0x01
    42b8:	82 81       	ldd	r24, Z+2	; 0x02
    42ba:	93 81       	ldd	r25, Z+3	; 0x03
    42bc:	04 2d       	mov	r16, r4
    42be:	a3 01       	movw	r20, r6
    42c0:	53 d3       	rcall	.+1702   	; 0x4968 <__ftoa_engine>
    42c2:	6c 01       	movw	r12, r24
    42c4:	f9 81       	ldd	r31, Y+1	; 0x01
    42c6:	fc 87       	std	Y+12, r31	; 0x0c
    42c8:	f0 ff       	sbrs	r31, 0
    42ca:	02 c0       	rjmp	.+4      	; 0x42d0 <vfprintf+0x1b0>
    42cc:	f3 ff       	sbrs	r31, 3
    42ce:	06 c0       	rjmp	.+12     	; 0x42dc <vfprintf+0x1bc>
    42d0:	91 fc       	sbrc	r9, 1
    42d2:	06 c0       	rjmp	.+12     	; 0x42e0 <vfprintf+0x1c0>
    42d4:	92 fe       	sbrs	r9, 2
    42d6:	06 c0       	rjmp	.+12     	; 0x42e4 <vfprintf+0x1c4>
    42d8:	00 e2       	ldi	r16, 0x20	; 32
    42da:	05 c0       	rjmp	.+10     	; 0x42e6 <vfprintf+0x1c6>
    42dc:	0d e2       	ldi	r16, 0x2D	; 45
    42de:	03 c0       	rjmp	.+6      	; 0x42e6 <vfprintf+0x1c6>
    42e0:	0b e2       	ldi	r16, 0x2B	; 43
    42e2:	01 c0       	rjmp	.+2      	; 0x42e6 <vfprintf+0x1c6>
    42e4:	00 e0       	ldi	r16, 0x00	; 0
    42e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    42e8:	8c 70       	andi	r24, 0x0C	; 12
    42ea:	19 f0       	breq	.+6      	; 0x42f2 <vfprintf+0x1d2>
    42ec:	01 11       	cpse	r16, r1
    42ee:	43 c2       	rjmp	.+1158   	; 0x4776 <vfprintf+0x656>
    42f0:	80 c2       	rjmp	.+1280   	; 0x47f2 <vfprintf+0x6d2>
    42f2:	97 fe       	sbrs	r9, 7
    42f4:	10 c0       	rjmp	.+32     	; 0x4316 <vfprintf+0x1f6>
    42f6:	4c 0c       	add	r4, r12
    42f8:	fc 85       	ldd	r31, Y+12	; 0x0c
    42fa:	f4 ff       	sbrs	r31, 4
    42fc:	04 c0       	rjmp	.+8      	; 0x4306 <vfprintf+0x1e6>
    42fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4300:	81 33       	cpi	r24, 0x31	; 49
    4302:	09 f4       	brne	.+2      	; 0x4306 <vfprintf+0x1e6>
    4304:	4a 94       	dec	r4
    4306:	14 14       	cp	r1, r4
    4308:	74 f5       	brge	.+92     	; 0x4366 <vfprintf+0x246>
    430a:	28 e0       	ldi	r18, 0x08	; 8
    430c:	24 15       	cp	r18, r4
    430e:	78 f5       	brcc	.+94     	; 0x436e <vfprintf+0x24e>
    4310:	88 e0       	ldi	r24, 0x08	; 8
    4312:	48 2e       	mov	r4, r24
    4314:	2c c0       	rjmp	.+88     	; 0x436e <vfprintf+0x24e>
    4316:	96 fc       	sbrc	r9, 6
    4318:	2a c0       	rjmp	.+84     	; 0x436e <vfprintf+0x24e>
    431a:	81 2f       	mov	r24, r17
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	8c 15       	cp	r24, r12
    4320:	9d 05       	cpc	r25, r13
    4322:	9c f0       	brlt	.+38     	; 0x434a <vfprintf+0x22a>
    4324:	3c ef       	ldi	r19, 0xFC	; 252
    4326:	c3 16       	cp	r12, r19
    4328:	3f ef       	ldi	r19, 0xFF	; 255
    432a:	d3 06       	cpc	r13, r19
    432c:	74 f0       	brlt	.+28     	; 0x434a <vfprintf+0x22a>
    432e:	89 2d       	mov	r24, r9
    4330:	80 68       	ori	r24, 0x80	; 128
    4332:	98 2e       	mov	r9, r24
    4334:	0a c0       	rjmp	.+20     	; 0x434a <vfprintf+0x22a>
    4336:	e2 e0       	ldi	r30, 0x02	; 2
    4338:	f0 e0       	ldi	r31, 0x00	; 0
    433a:	ec 0f       	add	r30, r28
    433c:	fd 1f       	adc	r31, r29
    433e:	e1 0f       	add	r30, r17
    4340:	f1 1d       	adc	r31, r1
    4342:	80 81       	ld	r24, Z
    4344:	80 33       	cpi	r24, 0x30	; 48
    4346:	19 f4       	brne	.+6      	; 0x434e <vfprintf+0x22e>
    4348:	11 50       	subi	r17, 0x01	; 1
    434a:	11 11       	cpse	r17, r1
    434c:	f4 cf       	rjmp	.-24     	; 0x4336 <vfprintf+0x216>
    434e:	97 fe       	sbrs	r9, 7
    4350:	0e c0       	rjmp	.+28     	; 0x436e <vfprintf+0x24e>
    4352:	44 24       	eor	r4, r4
    4354:	43 94       	inc	r4
    4356:	41 0e       	add	r4, r17
    4358:	81 2f       	mov	r24, r17
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	c8 16       	cp	r12, r24
    435e:	d9 06       	cpc	r13, r25
    4360:	2c f4       	brge	.+10     	; 0x436c <vfprintf+0x24c>
    4362:	1c 19       	sub	r17, r12
    4364:	04 c0       	rjmp	.+8      	; 0x436e <vfprintf+0x24e>
    4366:	44 24       	eor	r4, r4
    4368:	43 94       	inc	r4
    436a:	01 c0       	rjmp	.+2      	; 0x436e <vfprintf+0x24e>
    436c:	10 e0       	ldi	r17, 0x00	; 0
    436e:	97 fe       	sbrs	r9, 7
    4370:	06 c0       	rjmp	.+12     	; 0x437e <vfprintf+0x25e>
    4372:	1c 14       	cp	r1, r12
    4374:	1d 04       	cpc	r1, r13
    4376:	34 f4       	brge	.+12     	; 0x4384 <vfprintf+0x264>
    4378:	c6 01       	movw	r24, r12
    437a:	01 96       	adiw	r24, 0x01	; 1
    437c:	05 c0       	rjmp	.+10     	; 0x4388 <vfprintf+0x268>
    437e:	85 e0       	ldi	r24, 0x05	; 5
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	02 c0       	rjmp	.+4      	; 0x4388 <vfprintf+0x268>
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	01 11       	cpse	r16, r1
    438a:	01 96       	adiw	r24, 0x01	; 1
    438c:	11 23       	and	r17, r17
    438e:	31 f0       	breq	.+12     	; 0x439c <vfprintf+0x27c>
    4390:	21 2f       	mov	r18, r17
    4392:	30 e0       	ldi	r19, 0x00	; 0
    4394:	2f 5f       	subi	r18, 0xFF	; 255
    4396:	3f 4f       	sbci	r19, 0xFF	; 255
    4398:	82 0f       	add	r24, r18
    439a:	93 1f       	adc	r25, r19
    439c:	25 2d       	mov	r18, r5
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	82 17       	cp	r24, r18
    43a2:	93 07       	cpc	r25, r19
    43a4:	14 f4       	brge	.+4      	; 0x43aa <vfprintf+0x28a>
    43a6:	58 1a       	sub	r5, r24
    43a8:	01 c0       	rjmp	.+2      	; 0x43ac <vfprintf+0x28c>
    43aa:	51 2c       	mov	r5, r1
    43ac:	89 2d       	mov	r24, r9
    43ae:	89 70       	andi	r24, 0x09	; 9
    43b0:	41 f4       	brne	.+16     	; 0x43c2 <vfprintf+0x2a2>
    43b2:	55 20       	and	r5, r5
    43b4:	31 f0       	breq	.+12     	; 0x43c2 <vfprintf+0x2a2>
    43b6:	b7 01       	movw	r22, r14
    43b8:	80 e2       	ldi	r24, 0x20	; 32
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	cc d3       	rcall	.+1944   	; 0x4b56 <fputc>
    43be:	5a 94       	dec	r5
    43c0:	f8 cf       	rjmp	.-16     	; 0x43b2 <vfprintf+0x292>
    43c2:	00 23       	and	r16, r16
    43c4:	21 f0       	breq	.+8      	; 0x43ce <vfprintf+0x2ae>
    43c6:	b7 01       	movw	r22, r14
    43c8:	80 2f       	mov	r24, r16
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	c4 d3       	rcall	.+1928   	; 0x4b56 <fputc>
    43ce:	93 fc       	sbrc	r9, 3
    43d0:	08 c0       	rjmp	.+16     	; 0x43e2 <vfprintf+0x2c2>
    43d2:	55 20       	and	r5, r5
    43d4:	31 f0       	breq	.+12     	; 0x43e2 <vfprintf+0x2c2>
    43d6:	b7 01       	movw	r22, r14
    43d8:	80 e3       	ldi	r24, 0x30	; 48
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	bc d3       	rcall	.+1912   	; 0x4b56 <fputc>
    43de:	5a 94       	dec	r5
    43e0:	f8 cf       	rjmp	.-16     	; 0x43d2 <vfprintf+0x2b2>
    43e2:	97 fe       	sbrs	r9, 7
    43e4:	4a c0       	rjmp	.+148    	; 0x447a <vfprintf+0x35a>
    43e6:	46 01       	movw	r8, r12
    43e8:	d7 fe       	sbrs	r13, 7
    43ea:	02 c0       	rjmp	.+4      	; 0x43f0 <vfprintf+0x2d0>
    43ec:	81 2c       	mov	r8, r1
    43ee:	91 2c       	mov	r9, r1
    43f0:	c6 01       	movw	r24, r12
    43f2:	88 19       	sub	r24, r8
    43f4:	99 09       	sbc	r25, r9
    43f6:	f3 01       	movw	r30, r6
    43f8:	e8 0f       	add	r30, r24
    43fa:	f9 1f       	adc	r31, r25
    43fc:	fe 87       	std	Y+14, r31	; 0x0e
    43fe:	ed 87       	std	Y+13, r30	; 0x0d
    4400:	96 01       	movw	r18, r12
    4402:	24 19       	sub	r18, r4
    4404:	31 09       	sbc	r19, r1
    4406:	38 8b       	std	Y+16, r19	; 0x10
    4408:	2f 87       	std	Y+15, r18	; 0x0f
    440a:	01 2f       	mov	r16, r17
    440c:	10 e0       	ldi	r17, 0x00	; 0
    440e:	11 95       	neg	r17
    4410:	01 95       	neg	r16
    4412:	11 09       	sbc	r17, r1
    4414:	3f ef       	ldi	r19, 0xFF	; 255
    4416:	83 16       	cp	r8, r19
    4418:	93 06       	cpc	r9, r19
    441a:	21 f4       	brne	.+8      	; 0x4424 <vfprintf+0x304>
    441c:	b7 01       	movw	r22, r14
    441e:	8e e2       	ldi	r24, 0x2E	; 46
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	99 d3       	rcall	.+1842   	; 0x4b56 <fputc>
    4424:	c8 14       	cp	r12, r8
    4426:	d9 04       	cpc	r13, r9
    4428:	4c f0       	brlt	.+18     	; 0x443c <vfprintf+0x31c>
    442a:	8f 85       	ldd	r24, Y+15	; 0x0f
    442c:	98 89       	ldd	r25, Y+16	; 0x10
    442e:	88 15       	cp	r24, r8
    4430:	99 05       	cpc	r25, r9
    4432:	24 f4       	brge	.+8      	; 0x443c <vfprintf+0x31c>
    4434:	ed 85       	ldd	r30, Y+13	; 0x0d
    4436:	fe 85       	ldd	r31, Y+14	; 0x0e
    4438:	81 81       	ldd	r24, Z+1	; 0x01
    443a:	01 c0       	rjmp	.+2      	; 0x443e <vfprintf+0x31e>
    443c:	80 e3       	ldi	r24, 0x30	; 48
    443e:	f1 e0       	ldi	r31, 0x01	; 1
    4440:	8f 1a       	sub	r8, r31
    4442:	91 08       	sbc	r9, r1
    4444:	2d 85       	ldd	r18, Y+13	; 0x0d
    4446:	3e 85       	ldd	r19, Y+14	; 0x0e
    4448:	2f 5f       	subi	r18, 0xFF	; 255
    444a:	3f 4f       	sbci	r19, 0xFF	; 255
    444c:	3e 87       	std	Y+14, r19	; 0x0e
    444e:	2d 87       	std	Y+13, r18	; 0x0d
    4450:	80 16       	cp	r8, r16
    4452:	91 06       	cpc	r9, r17
    4454:	24 f0       	brlt	.+8      	; 0x445e <vfprintf+0x33e>
    4456:	b7 01       	movw	r22, r14
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	7d d3       	rcall	.+1786   	; 0x4b56 <fputc>
    445c:	db cf       	rjmp	.-74     	; 0x4414 <vfprintf+0x2f4>
    445e:	c8 14       	cp	r12, r8
    4460:	d9 04       	cpc	r13, r9
    4462:	41 f4       	brne	.+16     	; 0x4474 <vfprintf+0x354>
    4464:	9a 81       	ldd	r25, Y+2	; 0x02
    4466:	96 33       	cpi	r25, 0x36	; 54
    4468:	20 f4       	brcc	.+8      	; 0x4472 <vfprintf+0x352>
    446a:	95 33       	cpi	r25, 0x35	; 53
    446c:	19 f4       	brne	.+6      	; 0x4474 <vfprintf+0x354>
    446e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4470:	34 ff       	sbrs	r19, 4
    4472:	81 e3       	ldi	r24, 0x31	; 49
    4474:	b7 01       	movw	r22, r14
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	48 c0       	rjmp	.+144    	; 0x450a <vfprintf+0x3ea>
    447a:	8a 81       	ldd	r24, Y+2	; 0x02
    447c:	81 33       	cpi	r24, 0x31	; 49
    447e:	19 f0       	breq	.+6      	; 0x4486 <vfprintf+0x366>
    4480:	9c 85       	ldd	r25, Y+12	; 0x0c
    4482:	9f 7e       	andi	r25, 0xEF	; 239
    4484:	9c 87       	std	Y+12, r25	; 0x0c
    4486:	b7 01       	movw	r22, r14
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	65 d3       	rcall	.+1738   	; 0x4b56 <fputc>
    448c:	11 11       	cpse	r17, r1
    448e:	05 c0       	rjmp	.+10     	; 0x449a <vfprintf+0x37a>
    4490:	94 fc       	sbrc	r9, 4
    4492:	16 c0       	rjmp	.+44     	; 0x44c0 <vfprintf+0x3a0>
    4494:	85 e6       	ldi	r24, 0x65	; 101
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	15 c0       	rjmp	.+42     	; 0x44c4 <vfprintf+0x3a4>
    449a:	b7 01       	movw	r22, r14
    449c:	8e e2       	ldi	r24, 0x2E	; 46
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	5a d3       	rcall	.+1716   	; 0x4b56 <fputc>
    44a2:	1e 5f       	subi	r17, 0xFE	; 254
    44a4:	82 e0       	ldi	r24, 0x02	; 2
    44a6:	01 e0       	ldi	r16, 0x01	; 1
    44a8:	08 0f       	add	r16, r24
    44aa:	f3 01       	movw	r30, r6
    44ac:	e8 0f       	add	r30, r24
    44ae:	f1 1d       	adc	r31, r1
    44b0:	80 81       	ld	r24, Z
    44b2:	b7 01       	movw	r22, r14
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	4f d3       	rcall	.+1694   	; 0x4b56 <fputc>
    44b8:	80 2f       	mov	r24, r16
    44ba:	01 13       	cpse	r16, r17
    44bc:	f4 cf       	rjmp	.-24     	; 0x44a6 <vfprintf+0x386>
    44be:	e8 cf       	rjmp	.-48     	; 0x4490 <vfprintf+0x370>
    44c0:	85 e4       	ldi	r24, 0x45	; 69
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	b7 01       	movw	r22, r14
    44c6:	47 d3       	rcall	.+1678   	; 0x4b56 <fputc>
    44c8:	d7 fc       	sbrc	r13, 7
    44ca:	06 c0       	rjmp	.+12     	; 0x44d8 <vfprintf+0x3b8>
    44cc:	c1 14       	cp	r12, r1
    44ce:	d1 04       	cpc	r13, r1
    44d0:	41 f4       	brne	.+16     	; 0x44e2 <vfprintf+0x3c2>
    44d2:	ec 85       	ldd	r30, Y+12	; 0x0c
    44d4:	e4 ff       	sbrs	r30, 4
    44d6:	05 c0       	rjmp	.+10     	; 0x44e2 <vfprintf+0x3c2>
    44d8:	d1 94       	neg	r13
    44da:	c1 94       	neg	r12
    44dc:	d1 08       	sbc	r13, r1
    44de:	8d e2       	ldi	r24, 0x2D	; 45
    44e0:	01 c0       	rjmp	.+2      	; 0x44e4 <vfprintf+0x3c4>
    44e2:	8b e2       	ldi	r24, 0x2B	; 43
    44e4:	b7 01       	movw	r22, r14
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	36 d3       	rcall	.+1644   	; 0x4b56 <fputc>
    44ea:	80 e3       	ldi	r24, 0x30	; 48
    44ec:	2a e0       	ldi	r18, 0x0A	; 10
    44ee:	c2 16       	cp	r12, r18
    44f0:	d1 04       	cpc	r13, r1
    44f2:	2c f0       	brlt	.+10     	; 0x44fe <vfprintf+0x3de>
    44f4:	8f 5f       	subi	r24, 0xFF	; 255
    44f6:	fa e0       	ldi	r31, 0x0A	; 10
    44f8:	cf 1a       	sub	r12, r31
    44fa:	d1 08       	sbc	r13, r1
    44fc:	f7 cf       	rjmp	.-18     	; 0x44ec <vfprintf+0x3cc>
    44fe:	b7 01       	movw	r22, r14
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	29 d3       	rcall	.+1618   	; 0x4b56 <fputc>
    4504:	b7 01       	movw	r22, r14
    4506:	c6 01       	movw	r24, r12
    4508:	c0 96       	adiw	r24, 0x30	; 48
    450a:	25 d3       	rcall	.+1610   	; 0x4b56 <fputc>
    450c:	49 c1       	rjmp	.+658    	; 0x47a0 <vfprintf+0x680>
    450e:	83 36       	cpi	r24, 0x63	; 99
    4510:	31 f0       	breq	.+12     	; 0x451e <vfprintf+0x3fe>
    4512:	83 37       	cpi	r24, 0x73	; 115
    4514:	79 f0       	breq	.+30     	; 0x4534 <vfprintf+0x414>
    4516:	83 35       	cpi	r24, 0x53	; 83
    4518:	09 f0       	breq	.+2      	; 0x451c <vfprintf+0x3fc>
    451a:	52 c0       	rjmp	.+164    	; 0x45c0 <vfprintf+0x4a0>
    451c:	1f c0       	rjmp	.+62     	; 0x455c <vfprintf+0x43c>
    451e:	56 01       	movw	r10, r12
    4520:	32 e0       	ldi	r19, 0x02	; 2
    4522:	a3 0e       	add	r10, r19
    4524:	b1 1c       	adc	r11, r1
    4526:	f6 01       	movw	r30, r12
    4528:	80 81       	ld	r24, Z
    452a:	89 83       	std	Y+1, r24	; 0x01
    452c:	01 e0       	ldi	r16, 0x01	; 1
    452e:	10 e0       	ldi	r17, 0x00	; 0
    4530:	63 01       	movw	r12, r6
    4532:	11 c0       	rjmp	.+34     	; 0x4556 <vfprintf+0x436>
    4534:	56 01       	movw	r10, r12
    4536:	f2 e0       	ldi	r31, 0x02	; 2
    4538:	af 0e       	add	r10, r31
    453a:	b1 1c       	adc	r11, r1
    453c:	f6 01       	movw	r30, r12
    453e:	c0 80       	ld	r12, Z
    4540:	d1 80       	ldd	r13, Z+1	; 0x01
    4542:	96 fe       	sbrs	r9, 6
    4544:	03 c0       	rjmp	.+6      	; 0x454c <vfprintf+0x42c>
    4546:	61 2f       	mov	r22, r17
    4548:	70 e0       	ldi	r23, 0x00	; 0
    454a:	02 c0       	rjmp	.+4      	; 0x4550 <vfprintf+0x430>
    454c:	6f ef       	ldi	r22, 0xFF	; 255
    454e:	7f ef       	ldi	r23, 0xFF	; 255
    4550:	c6 01       	movw	r24, r12
    4552:	f6 d2       	rcall	.+1516   	; 0x4b40 <strnlen>
    4554:	8c 01       	movw	r16, r24
    4556:	f9 2d       	mov	r31, r9
    4558:	ff 77       	andi	r31, 0x7F	; 127
    455a:	13 c0       	rjmp	.+38     	; 0x4582 <vfprintf+0x462>
    455c:	56 01       	movw	r10, r12
    455e:	22 e0       	ldi	r18, 0x02	; 2
    4560:	a2 0e       	add	r10, r18
    4562:	b1 1c       	adc	r11, r1
    4564:	f6 01       	movw	r30, r12
    4566:	c0 80       	ld	r12, Z
    4568:	d1 80       	ldd	r13, Z+1	; 0x01
    456a:	96 fe       	sbrs	r9, 6
    456c:	03 c0       	rjmp	.+6      	; 0x4574 <vfprintf+0x454>
    456e:	61 2f       	mov	r22, r17
    4570:	70 e0       	ldi	r23, 0x00	; 0
    4572:	02 c0       	rjmp	.+4      	; 0x4578 <vfprintf+0x458>
    4574:	6f ef       	ldi	r22, 0xFF	; 255
    4576:	7f ef       	ldi	r23, 0xFF	; 255
    4578:	c6 01       	movw	r24, r12
    457a:	ce d2       	rcall	.+1436   	; 0x4b18 <strnlen_P>
    457c:	8c 01       	movw	r16, r24
    457e:	f9 2d       	mov	r31, r9
    4580:	f0 68       	ori	r31, 0x80	; 128
    4582:	9f 2e       	mov	r9, r31
    4584:	f3 fd       	sbrc	r31, 3
    4586:	18 c0       	rjmp	.+48     	; 0x45b8 <vfprintf+0x498>
    4588:	85 2d       	mov	r24, r5
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	08 17       	cp	r16, r24
    458e:	19 07       	cpc	r17, r25
    4590:	98 f4       	brcc	.+38     	; 0x45b8 <vfprintf+0x498>
    4592:	b7 01       	movw	r22, r14
    4594:	80 e2       	ldi	r24, 0x20	; 32
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	de d2       	rcall	.+1468   	; 0x4b56 <fputc>
    459a:	5a 94       	dec	r5
    459c:	f5 cf       	rjmp	.-22     	; 0x4588 <vfprintf+0x468>
    459e:	f6 01       	movw	r30, r12
    45a0:	97 fc       	sbrc	r9, 7
    45a2:	85 91       	lpm	r24, Z+
    45a4:	97 fe       	sbrs	r9, 7
    45a6:	81 91       	ld	r24, Z+
    45a8:	6f 01       	movw	r12, r30
    45aa:	b7 01       	movw	r22, r14
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	d3 d2       	rcall	.+1446   	; 0x4b56 <fputc>
    45b0:	51 10       	cpse	r5, r1
    45b2:	5a 94       	dec	r5
    45b4:	01 50       	subi	r16, 0x01	; 1
    45b6:	11 09       	sbc	r17, r1
    45b8:	01 15       	cp	r16, r1
    45ba:	11 05       	cpc	r17, r1
    45bc:	81 f7       	brne	.-32     	; 0x459e <vfprintf+0x47e>
    45be:	f0 c0       	rjmp	.+480    	; 0x47a0 <vfprintf+0x680>
    45c0:	84 36       	cpi	r24, 0x64	; 100
    45c2:	11 f0       	breq	.+4      	; 0x45c8 <vfprintf+0x4a8>
    45c4:	89 36       	cpi	r24, 0x69	; 105
    45c6:	59 f5       	brne	.+86     	; 0x461e <vfprintf+0x4fe>
    45c8:	56 01       	movw	r10, r12
    45ca:	97 fe       	sbrs	r9, 7
    45cc:	09 c0       	rjmp	.+18     	; 0x45e0 <vfprintf+0x4c0>
    45ce:	24 e0       	ldi	r18, 0x04	; 4
    45d0:	a2 0e       	add	r10, r18
    45d2:	b1 1c       	adc	r11, r1
    45d4:	f6 01       	movw	r30, r12
    45d6:	60 81       	ld	r22, Z
    45d8:	71 81       	ldd	r23, Z+1	; 0x01
    45da:	82 81       	ldd	r24, Z+2	; 0x02
    45dc:	93 81       	ldd	r25, Z+3	; 0x03
    45de:	0a c0       	rjmp	.+20     	; 0x45f4 <vfprintf+0x4d4>
    45e0:	f2 e0       	ldi	r31, 0x02	; 2
    45e2:	af 0e       	add	r10, r31
    45e4:	b1 1c       	adc	r11, r1
    45e6:	f6 01       	movw	r30, r12
    45e8:	60 81       	ld	r22, Z
    45ea:	71 81       	ldd	r23, Z+1	; 0x01
    45ec:	07 2e       	mov	r0, r23
    45ee:	00 0c       	add	r0, r0
    45f0:	88 0b       	sbc	r24, r24
    45f2:	99 0b       	sbc	r25, r25
    45f4:	f9 2d       	mov	r31, r9
    45f6:	ff 76       	andi	r31, 0x6F	; 111
    45f8:	9f 2e       	mov	r9, r31
    45fa:	97 ff       	sbrs	r25, 7
    45fc:	09 c0       	rjmp	.+18     	; 0x4610 <vfprintf+0x4f0>
    45fe:	90 95       	com	r25
    4600:	80 95       	com	r24
    4602:	70 95       	com	r23
    4604:	61 95       	neg	r22
    4606:	7f 4f       	sbci	r23, 0xFF	; 255
    4608:	8f 4f       	sbci	r24, 0xFF	; 255
    460a:	9f 4f       	sbci	r25, 0xFF	; 255
    460c:	f0 68       	ori	r31, 0x80	; 128
    460e:	9f 2e       	mov	r9, r31
    4610:	2a e0       	ldi	r18, 0x0A	; 10
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	a3 01       	movw	r20, r6
    4616:	1a d3       	rcall	.+1588   	; 0x4c4c <__ultoa_invert>
    4618:	c8 2e       	mov	r12, r24
    461a:	c6 18       	sub	r12, r6
    461c:	3e c0       	rjmp	.+124    	; 0x469a <vfprintf+0x57a>
    461e:	09 2d       	mov	r16, r9
    4620:	85 37       	cpi	r24, 0x75	; 117
    4622:	21 f4       	brne	.+8      	; 0x462c <vfprintf+0x50c>
    4624:	0f 7e       	andi	r16, 0xEF	; 239
    4626:	2a e0       	ldi	r18, 0x0A	; 10
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	1d c0       	rjmp	.+58     	; 0x4666 <vfprintf+0x546>
    462c:	09 7f       	andi	r16, 0xF9	; 249
    462e:	8f 36       	cpi	r24, 0x6F	; 111
    4630:	91 f0       	breq	.+36     	; 0x4656 <vfprintf+0x536>
    4632:	18 f4       	brcc	.+6      	; 0x463a <vfprintf+0x51a>
    4634:	88 35       	cpi	r24, 0x58	; 88
    4636:	59 f0       	breq	.+22     	; 0x464e <vfprintf+0x52e>
    4638:	bc c0       	rjmp	.+376    	; 0x47b2 <vfprintf+0x692>
    463a:	80 37       	cpi	r24, 0x70	; 112
    463c:	19 f0       	breq	.+6      	; 0x4644 <vfprintf+0x524>
    463e:	88 37       	cpi	r24, 0x78	; 120
    4640:	11 f0       	breq	.+4      	; 0x4646 <vfprintf+0x526>
    4642:	b7 c0       	rjmp	.+366    	; 0x47b2 <vfprintf+0x692>
    4644:	00 61       	ori	r16, 0x10	; 16
    4646:	04 ff       	sbrs	r16, 4
    4648:	09 c0       	rjmp	.+18     	; 0x465c <vfprintf+0x53c>
    464a:	04 60       	ori	r16, 0x04	; 4
    464c:	07 c0       	rjmp	.+14     	; 0x465c <vfprintf+0x53c>
    464e:	94 fe       	sbrs	r9, 4
    4650:	08 c0       	rjmp	.+16     	; 0x4662 <vfprintf+0x542>
    4652:	06 60       	ori	r16, 0x06	; 6
    4654:	06 c0       	rjmp	.+12     	; 0x4662 <vfprintf+0x542>
    4656:	28 e0       	ldi	r18, 0x08	; 8
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	05 c0       	rjmp	.+10     	; 0x4666 <vfprintf+0x546>
    465c:	20 e1       	ldi	r18, 0x10	; 16
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	02 c0       	rjmp	.+4      	; 0x4666 <vfprintf+0x546>
    4662:	20 e1       	ldi	r18, 0x10	; 16
    4664:	32 e0       	ldi	r19, 0x02	; 2
    4666:	56 01       	movw	r10, r12
    4668:	07 ff       	sbrs	r16, 7
    466a:	09 c0       	rjmp	.+18     	; 0x467e <vfprintf+0x55e>
    466c:	84 e0       	ldi	r24, 0x04	; 4
    466e:	a8 0e       	add	r10, r24
    4670:	b1 1c       	adc	r11, r1
    4672:	f6 01       	movw	r30, r12
    4674:	60 81       	ld	r22, Z
    4676:	71 81       	ldd	r23, Z+1	; 0x01
    4678:	82 81       	ldd	r24, Z+2	; 0x02
    467a:	93 81       	ldd	r25, Z+3	; 0x03
    467c:	08 c0       	rjmp	.+16     	; 0x468e <vfprintf+0x56e>
    467e:	f2 e0       	ldi	r31, 0x02	; 2
    4680:	af 0e       	add	r10, r31
    4682:	b1 1c       	adc	r11, r1
    4684:	f6 01       	movw	r30, r12
    4686:	60 81       	ld	r22, Z
    4688:	71 81       	ldd	r23, Z+1	; 0x01
    468a:	80 e0       	ldi	r24, 0x00	; 0
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	a3 01       	movw	r20, r6
    4690:	dd d2       	rcall	.+1466   	; 0x4c4c <__ultoa_invert>
    4692:	c8 2e       	mov	r12, r24
    4694:	c6 18       	sub	r12, r6
    4696:	0f 77       	andi	r16, 0x7F	; 127
    4698:	90 2e       	mov	r9, r16
    469a:	96 fe       	sbrs	r9, 6
    469c:	0b c0       	rjmp	.+22     	; 0x46b4 <vfprintf+0x594>
    469e:	09 2d       	mov	r16, r9
    46a0:	0e 7f       	andi	r16, 0xFE	; 254
    46a2:	c1 16       	cp	r12, r17
    46a4:	50 f4       	brcc	.+20     	; 0x46ba <vfprintf+0x59a>
    46a6:	94 fe       	sbrs	r9, 4
    46a8:	0a c0       	rjmp	.+20     	; 0x46be <vfprintf+0x59e>
    46aa:	92 fc       	sbrc	r9, 2
    46ac:	08 c0       	rjmp	.+16     	; 0x46be <vfprintf+0x59e>
    46ae:	09 2d       	mov	r16, r9
    46b0:	0e 7e       	andi	r16, 0xEE	; 238
    46b2:	05 c0       	rjmp	.+10     	; 0x46be <vfprintf+0x59e>
    46b4:	dc 2c       	mov	r13, r12
    46b6:	09 2d       	mov	r16, r9
    46b8:	03 c0       	rjmp	.+6      	; 0x46c0 <vfprintf+0x5a0>
    46ba:	dc 2c       	mov	r13, r12
    46bc:	01 c0       	rjmp	.+2      	; 0x46c0 <vfprintf+0x5a0>
    46be:	d1 2e       	mov	r13, r17
    46c0:	04 ff       	sbrs	r16, 4
    46c2:	0d c0       	rjmp	.+26     	; 0x46de <vfprintf+0x5be>
    46c4:	fe 01       	movw	r30, r28
    46c6:	ec 0d       	add	r30, r12
    46c8:	f1 1d       	adc	r31, r1
    46ca:	80 81       	ld	r24, Z
    46cc:	80 33       	cpi	r24, 0x30	; 48
    46ce:	11 f4       	brne	.+4      	; 0x46d4 <vfprintf+0x5b4>
    46d0:	09 7e       	andi	r16, 0xE9	; 233
    46d2:	09 c0       	rjmp	.+18     	; 0x46e6 <vfprintf+0x5c6>
    46d4:	02 ff       	sbrs	r16, 2
    46d6:	06 c0       	rjmp	.+12     	; 0x46e4 <vfprintf+0x5c4>
    46d8:	d3 94       	inc	r13
    46da:	d3 94       	inc	r13
    46dc:	04 c0       	rjmp	.+8      	; 0x46e6 <vfprintf+0x5c6>
    46de:	80 2f       	mov	r24, r16
    46e0:	86 78       	andi	r24, 0x86	; 134
    46e2:	09 f0       	breq	.+2      	; 0x46e6 <vfprintf+0x5c6>
    46e4:	d3 94       	inc	r13
    46e6:	03 fd       	sbrc	r16, 3
    46e8:	10 c0       	rjmp	.+32     	; 0x470a <vfprintf+0x5ea>
    46ea:	00 ff       	sbrs	r16, 0
    46ec:	06 c0       	rjmp	.+12     	; 0x46fa <vfprintf+0x5da>
    46ee:	1c 2d       	mov	r17, r12
    46f0:	d5 14       	cp	r13, r5
    46f2:	78 f4       	brcc	.+30     	; 0x4712 <vfprintf+0x5f2>
    46f4:	15 0d       	add	r17, r5
    46f6:	1d 19       	sub	r17, r13
    46f8:	0c c0       	rjmp	.+24     	; 0x4712 <vfprintf+0x5f2>
    46fa:	d5 14       	cp	r13, r5
    46fc:	50 f4       	brcc	.+20     	; 0x4712 <vfprintf+0x5f2>
    46fe:	b7 01       	movw	r22, r14
    4700:	80 e2       	ldi	r24, 0x20	; 32
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	28 d2       	rcall	.+1104   	; 0x4b56 <fputc>
    4706:	d3 94       	inc	r13
    4708:	f8 cf       	rjmp	.-16     	; 0x46fa <vfprintf+0x5da>
    470a:	d5 14       	cp	r13, r5
    470c:	10 f4       	brcc	.+4      	; 0x4712 <vfprintf+0x5f2>
    470e:	5d 18       	sub	r5, r13
    4710:	01 c0       	rjmp	.+2      	; 0x4714 <vfprintf+0x5f4>
    4712:	51 2c       	mov	r5, r1
    4714:	04 ff       	sbrs	r16, 4
    4716:	0f c0       	rjmp	.+30     	; 0x4736 <vfprintf+0x616>
    4718:	b7 01       	movw	r22, r14
    471a:	80 e3       	ldi	r24, 0x30	; 48
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	1b d2       	rcall	.+1078   	; 0x4b56 <fputc>
    4720:	02 ff       	sbrs	r16, 2
    4722:	16 c0       	rjmp	.+44     	; 0x4750 <vfprintf+0x630>
    4724:	01 fd       	sbrc	r16, 1
    4726:	03 c0       	rjmp	.+6      	; 0x472e <vfprintf+0x60e>
    4728:	88 e7       	ldi	r24, 0x78	; 120
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	02 c0       	rjmp	.+4      	; 0x4732 <vfprintf+0x612>
    472e:	88 e5       	ldi	r24, 0x58	; 88
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	b7 01       	movw	r22, r14
    4734:	0c c0       	rjmp	.+24     	; 0x474e <vfprintf+0x62e>
    4736:	80 2f       	mov	r24, r16
    4738:	86 78       	andi	r24, 0x86	; 134
    473a:	51 f0       	breq	.+20     	; 0x4750 <vfprintf+0x630>
    473c:	01 ff       	sbrs	r16, 1
    473e:	02 c0       	rjmp	.+4      	; 0x4744 <vfprintf+0x624>
    4740:	8b e2       	ldi	r24, 0x2B	; 43
    4742:	01 c0       	rjmp	.+2      	; 0x4746 <vfprintf+0x626>
    4744:	80 e2       	ldi	r24, 0x20	; 32
    4746:	07 fd       	sbrc	r16, 7
    4748:	8d e2       	ldi	r24, 0x2D	; 45
    474a:	b7 01       	movw	r22, r14
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	03 d2       	rcall	.+1030   	; 0x4b56 <fputc>
    4750:	c1 16       	cp	r12, r17
    4752:	30 f4       	brcc	.+12     	; 0x4760 <vfprintf+0x640>
    4754:	b7 01       	movw	r22, r14
    4756:	80 e3       	ldi	r24, 0x30	; 48
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	fd d1       	rcall	.+1018   	; 0x4b56 <fputc>
    475c:	11 50       	subi	r17, 0x01	; 1
    475e:	f8 cf       	rjmp	.-16     	; 0x4750 <vfprintf+0x630>
    4760:	ca 94       	dec	r12
    4762:	f3 01       	movw	r30, r6
    4764:	ec 0d       	add	r30, r12
    4766:	f1 1d       	adc	r31, r1
    4768:	80 81       	ld	r24, Z
    476a:	b7 01       	movw	r22, r14
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	f3 d1       	rcall	.+998    	; 0x4b56 <fputc>
    4770:	c1 10       	cpse	r12, r1
    4772:	f6 cf       	rjmp	.-20     	; 0x4760 <vfprintf+0x640>
    4774:	15 c0       	rjmp	.+42     	; 0x47a0 <vfprintf+0x680>
    4776:	f4 e0       	ldi	r31, 0x04	; 4
    4778:	f5 15       	cp	r31, r5
    477a:	50 f5       	brcc	.+84     	; 0x47d0 <vfprintf+0x6b0>
    477c:	84 e0       	ldi	r24, 0x04	; 4
    477e:	58 1a       	sub	r5, r24
    4780:	93 fe       	sbrs	r9, 3
    4782:	1e c0       	rjmp	.+60     	; 0x47c0 <vfprintf+0x6a0>
    4784:	01 11       	cpse	r16, r1
    4786:	25 c0       	rjmp	.+74     	; 0x47d2 <vfprintf+0x6b2>
    4788:	2c 85       	ldd	r18, Y+12	; 0x0c
    478a:	23 ff       	sbrs	r18, 3
    478c:	27 c0       	rjmp	.+78     	; 0x47dc <vfprintf+0x6bc>
    478e:	04 e5       	ldi	r16, 0x54	; 84
    4790:	11 e0       	ldi	r17, 0x01	; 1
    4792:	39 2d       	mov	r19, r9
    4794:	30 71       	andi	r19, 0x10	; 16
    4796:	93 2e       	mov	r9, r19
    4798:	f8 01       	movw	r30, r16
    479a:	84 91       	lpm	r24, Z
    479c:	81 11       	cpse	r24, r1
    479e:	21 c0       	rjmp	.+66     	; 0x47e2 <vfprintf+0x6c2>
    47a0:	55 20       	and	r5, r5
    47a2:	09 f4       	brne	.+2      	; 0x47a6 <vfprintf+0x686>
    47a4:	fc cc       	rjmp	.-1544   	; 0x419e <vfprintf+0x7e>
    47a6:	b7 01       	movw	r22, r14
    47a8:	80 e2       	ldi	r24, 0x20	; 32
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	d4 d1       	rcall	.+936    	; 0x4b56 <fputc>
    47ae:	5a 94       	dec	r5
    47b0:	f7 cf       	rjmp	.-18     	; 0x47a0 <vfprintf+0x680>
    47b2:	f7 01       	movw	r30, r14
    47b4:	86 81       	ldd	r24, Z+6	; 0x06
    47b6:	97 81       	ldd	r25, Z+7	; 0x07
    47b8:	23 c0       	rjmp	.+70     	; 0x4800 <vfprintf+0x6e0>
    47ba:	8f ef       	ldi	r24, 0xFF	; 255
    47bc:	9f ef       	ldi	r25, 0xFF	; 255
    47be:	20 c0       	rjmp	.+64     	; 0x4800 <vfprintf+0x6e0>
    47c0:	b7 01       	movw	r22, r14
    47c2:	80 e2       	ldi	r24, 0x20	; 32
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	c7 d1       	rcall	.+910    	; 0x4b56 <fputc>
    47c8:	5a 94       	dec	r5
    47ca:	51 10       	cpse	r5, r1
    47cc:	f9 cf       	rjmp	.-14     	; 0x47c0 <vfprintf+0x6a0>
    47ce:	da cf       	rjmp	.-76     	; 0x4784 <vfprintf+0x664>
    47d0:	51 2c       	mov	r5, r1
    47d2:	b7 01       	movw	r22, r14
    47d4:	80 2f       	mov	r24, r16
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	be d1       	rcall	.+892    	; 0x4b56 <fputc>
    47da:	d6 cf       	rjmp	.-84     	; 0x4788 <vfprintf+0x668>
    47dc:	08 e5       	ldi	r16, 0x58	; 88
    47de:	11 e0       	ldi	r17, 0x01	; 1
    47e0:	d8 cf       	rjmp	.-80     	; 0x4792 <vfprintf+0x672>
    47e2:	91 10       	cpse	r9, r1
    47e4:	80 52       	subi	r24, 0x20	; 32
    47e6:	b7 01       	movw	r22, r14
    47e8:	90 e0       	ldi	r25, 0x00	; 0
    47ea:	b5 d1       	rcall	.+874    	; 0x4b56 <fputc>
    47ec:	0f 5f       	subi	r16, 0xFF	; 255
    47ee:	1f 4f       	sbci	r17, 0xFF	; 255
    47f0:	d3 cf       	rjmp	.-90     	; 0x4798 <vfprintf+0x678>
    47f2:	23 e0       	ldi	r18, 0x03	; 3
    47f4:	25 15       	cp	r18, r5
    47f6:	10 f4       	brcc	.+4      	; 0x47fc <vfprintf+0x6dc>
    47f8:	83 e0       	ldi	r24, 0x03	; 3
    47fa:	c1 cf       	rjmp	.-126    	; 0x477e <vfprintf+0x65e>
    47fc:	51 2c       	mov	r5, r1
    47fe:	c4 cf       	rjmp	.-120    	; 0x4788 <vfprintf+0x668>
    4800:	60 96       	adiw	r28, 0x10	; 16
    4802:	0f b6       	in	r0, 0x3f	; 63
    4804:	f8 94       	cli
    4806:	de bf       	out	0x3e, r29	; 62
    4808:	0f be       	out	0x3f, r0	; 63
    480a:	cd bf       	out	0x3d, r28	; 61
    480c:	df 91       	pop	r29
    480e:	cf 91       	pop	r28
    4810:	1f 91       	pop	r17
    4812:	0f 91       	pop	r16
    4814:	ff 90       	pop	r15
    4816:	ef 90       	pop	r14
    4818:	df 90       	pop	r13
    481a:	cf 90       	pop	r12
    481c:	bf 90       	pop	r11
    481e:	af 90       	pop	r10
    4820:	9f 90       	pop	r9
    4822:	8f 90       	pop	r8
    4824:	7f 90       	pop	r7
    4826:	6f 90       	pop	r6
    4828:	5f 90       	pop	r5
    482a:	4f 90       	pop	r4
    482c:	3f 90       	pop	r3
    482e:	2f 90       	pop	r2
    4830:	08 95       	ret

00004832 <__udivmodsi4>:
    4832:	a1 e2       	ldi	r26, 0x21	; 33
    4834:	1a 2e       	mov	r1, r26
    4836:	aa 1b       	sub	r26, r26
    4838:	bb 1b       	sub	r27, r27
    483a:	fd 01       	movw	r30, r26
    483c:	0d c0       	rjmp	.+26     	; 0x4858 <__udivmodsi4_ep>

0000483e <__udivmodsi4_loop>:
    483e:	aa 1f       	adc	r26, r26
    4840:	bb 1f       	adc	r27, r27
    4842:	ee 1f       	adc	r30, r30
    4844:	ff 1f       	adc	r31, r31
    4846:	a2 17       	cp	r26, r18
    4848:	b3 07       	cpc	r27, r19
    484a:	e4 07       	cpc	r30, r20
    484c:	f5 07       	cpc	r31, r21
    484e:	20 f0       	brcs	.+8      	; 0x4858 <__udivmodsi4_ep>
    4850:	a2 1b       	sub	r26, r18
    4852:	b3 0b       	sbc	r27, r19
    4854:	e4 0b       	sbc	r30, r20
    4856:	f5 0b       	sbc	r31, r21

00004858 <__udivmodsi4_ep>:
    4858:	66 1f       	adc	r22, r22
    485a:	77 1f       	adc	r23, r23
    485c:	88 1f       	adc	r24, r24
    485e:	99 1f       	adc	r25, r25
    4860:	1a 94       	dec	r1
    4862:	69 f7       	brne	.-38     	; 0x483e <__udivmodsi4_loop>
    4864:	60 95       	com	r22
    4866:	70 95       	com	r23
    4868:	80 95       	com	r24
    486a:	90 95       	com	r25
    486c:	9b 01       	movw	r18, r22
    486e:	ac 01       	movw	r20, r24
    4870:	bd 01       	movw	r22, r26
    4872:	cf 01       	movw	r24, r30
    4874:	08 95       	ret

00004876 <__divmodsi4>:
    4876:	05 2e       	mov	r0, r21
    4878:	97 fb       	bst	r25, 7
    487a:	16 f4       	brtc	.+4      	; 0x4880 <__divmodsi4+0xa>
    487c:	00 94       	com	r0
    487e:	0f d0       	rcall	.+30     	; 0x489e <__negsi2>
    4880:	57 fd       	sbrc	r21, 7
    4882:	05 d0       	rcall	.+10     	; 0x488e <__divmodsi4_neg2>
    4884:	d6 df       	rcall	.-84     	; 0x4832 <__udivmodsi4>
    4886:	07 fc       	sbrc	r0, 7
    4888:	02 d0       	rcall	.+4      	; 0x488e <__divmodsi4_neg2>
    488a:	46 f4       	brtc	.+16     	; 0x489c <__divmodsi4_exit>
    488c:	08 c0       	rjmp	.+16     	; 0x489e <__negsi2>

0000488e <__divmodsi4_neg2>:
    488e:	50 95       	com	r21
    4890:	40 95       	com	r20
    4892:	30 95       	com	r19
    4894:	21 95       	neg	r18
    4896:	3f 4f       	sbci	r19, 0xFF	; 255
    4898:	4f 4f       	sbci	r20, 0xFF	; 255
    489a:	5f 4f       	sbci	r21, 0xFF	; 255

0000489c <__divmodsi4_exit>:
    489c:	08 95       	ret

0000489e <__negsi2>:
    489e:	90 95       	com	r25
    48a0:	80 95       	com	r24
    48a2:	70 95       	com	r23
    48a4:	61 95       	neg	r22
    48a6:	7f 4f       	sbci	r23, 0xFF	; 255
    48a8:	8f 4f       	sbci	r24, 0xFF	; 255
    48aa:	9f 4f       	sbci	r25, 0xFF	; 255
    48ac:	08 95       	ret

000048ae <__tablejump2__>:
    48ae:	ee 0f       	add	r30, r30
    48b0:	ff 1f       	adc	r31, r31
    48b2:	88 1f       	adc	r24, r24
    48b4:	8b bf       	out	0x3b, r24	; 59
    48b6:	07 90       	elpm	r0, Z+
    48b8:	f6 91       	elpm	r31, Z
    48ba:	e0 2d       	mov	r30, r0
    48bc:	19 94       	eijmp

000048be <do_rand>:
    48be:	8f 92       	push	r8
    48c0:	9f 92       	push	r9
    48c2:	af 92       	push	r10
    48c4:	bf 92       	push	r11
    48c6:	cf 92       	push	r12
    48c8:	df 92       	push	r13
    48ca:	ef 92       	push	r14
    48cc:	ff 92       	push	r15
    48ce:	cf 93       	push	r28
    48d0:	df 93       	push	r29
    48d2:	ec 01       	movw	r28, r24
    48d4:	68 81       	ld	r22, Y
    48d6:	79 81       	ldd	r23, Y+1	; 0x01
    48d8:	8a 81       	ldd	r24, Y+2	; 0x02
    48da:	9b 81       	ldd	r25, Y+3	; 0x03
    48dc:	61 15       	cp	r22, r1
    48de:	71 05       	cpc	r23, r1
    48e0:	81 05       	cpc	r24, r1
    48e2:	91 05       	cpc	r25, r1
    48e4:	21 f4       	brne	.+8      	; 0x48ee <do_rand+0x30>
    48e6:	64 e2       	ldi	r22, 0x24	; 36
    48e8:	79 ed       	ldi	r23, 0xD9	; 217
    48ea:	8b e5       	ldi	r24, 0x5B	; 91
    48ec:	97 e0       	ldi	r25, 0x07	; 7
    48ee:	2d e1       	ldi	r18, 0x1D	; 29
    48f0:	33 ef       	ldi	r19, 0xF3	; 243
    48f2:	41 e0       	ldi	r20, 0x01	; 1
    48f4:	50 e0       	ldi	r21, 0x00	; 0
    48f6:	bf df       	rcall	.-130    	; 0x4876 <__divmodsi4>
    48f8:	49 01       	movw	r8, r18
    48fa:	5a 01       	movw	r10, r20
    48fc:	9b 01       	movw	r18, r22
    48fe:	ac 01       	movw	r20, r24
    4900:	a7 ea       	ldi	r26, 0xA7	; 167
    4902:	b1 e4       	ldi	r27, 0x41	; 65
    4904:	01 d2       	rcall	.+1026   	; 0x4d08 <__muluhisi3>
    4906:	6b 01       	movw	r12, r22
    4908:	7c 01       	movw	r14, r24
    490a:	ac ee       	ldi	r26, 0xEC	; 236
    490c:	b4 ef       	ldi	r27, 0xF4	; 244
    490e:	a5 01       	movw	r20, r10
    4910:	94 01       	movw	r18, r8
    4912:	06 d2       	rcall	.+1036   	; 0x4d20 <__mulohisi3>
    4914:	dc 01       	movw	r26, r24
    4916:	cb 01       	movw	r24, r22
    4918:	8c 0d       	add	r24, r12
    491a:	9d 1d       	adc	r25, r13
    491c:	ae 1d       	adc	r26, r14
    491e:	bf 1d       	adc	r27, r15
    4920:	b7 ff       	sbrs	r27, 7
    4922:	03 c0       	rjmp	.+6      	; 0x492a <do_rand+0x6c>
    4924:	01 97       	sbiw	r24, 0x01	; 1
    4926:	a1 09       	sbc	r26, r1
    4928:	b0 48       	sbci	r27, 0x80	; 128
    492a:	88 83       	st	Y, r24
    492c:	99 83       	std	Y+1, r25	; 0x01
    492e:	aa 83       	std	Y+2, r26	; 0x02
    4930:	bb 83       	std	Y+3, r27	; 0x03
    4932:	9f 77       	andi	r25, 0x7F	; 127
    4934:	df 91       	pop	r29
    4936:	cf 91       	pop	r28
    4938:	ff 90       	pop	r15
    493a:	ef 90       	pop	r14
    493c:	df 90       	pop	r13
    493e:	cf 90       	pop	r12
    4940:	bf 90       	pop	r11
    4942:	af 90       	pop	r10
    4944:	9f 90       	pop	r9
    4946:	8f 90       	pop	r8
    4948:	08 95       	ret

0000494a <rand_r>:
    494a:	b9 cf       	rjmp	.-142    	; 0x48be <do_rand>

0000494c <rand>:
    494c:	80 e0       	ldi	r24, 0x00	; 0
    494e:	92 e0       	ldi	r25, 0x02	; 2
    4950:	b6 cf       	rjmp	.-148    	; 0x48be <do_rand>

00004952 <srand>:
    4952:	a0 e0       	ldi	r26, 0x00	; 0
    4954:	b0 e0       	ldi	r27, 0x00	; 0
    4956:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    495a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    495e:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    4962:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    4966:	08 95       	ret

00004968 <__ftoa_engine>:
    4968:	28 30       	cpi	r18, 0x08	; 8
    496a:	08 f0       	brcs	.+2      	; 0x496e <__ftoa_engine+0x6>
    496c:	27 e0       	ldi	r18, 0x07	; 7
    496e:	33 27       	eor	r19, r19
    4970:	da 01       	movw	r26, r20
    4972:	99 0f       	add	r25, r25
    4974:	31 1d       	adc	r19, r1
    4976:	87 fd       	sbrc	r24, 7
    4978:	91 60       	ori	r25, 0x01	; 1
    497a:	00 96       	adiw	r24, 0x00	; 0
    497c:	61 05       	cpc	r22, r1
    497e:	71 05       	cpc	r23, r1
    4980:	39 f4       	brne	.+14     	; 0x4990 <__ftoa_engine+0x28>
    4982:	32 60       	ori	r19, 0x02	; 2
    4984:	2e 5f       	subi	r18, 0xFE	; 254
    4986:	3d 93       	st	X+, r19
    4988:	30 e3       	ldi	r19, 0x30	; 48
    498a:	2a 95       	dec	r18
    498c:	e1 f7       	brne	.-8      	; 0x4986 <__ftoa_engine+0x1e>
    498e:	08 95       	ret
    4990:	9f 3f       	cpi	r25, 0xFF	; 255
    4992:	30 f0       	brcs	.+12     	; 0x49a0 <__ftoa_engine+0x38>
    4994:	80 38       	cpi	r24, 0x80	; 128
    4996:	71 05       	cpc	r23, r1
    4998:	61 05       	cpc	r22, r1
    499a:	09 f0       	breq	.+2      	; 0x499e <__ftoa_engine+0x36>
    499c:	3c 5f       	subi	r19, 0xFC	; 252
    499e:	3c 5f       	subi	r19, 0xFC	; 252
    49a0:	3d 93       	st	X+, r19
    49a2:	91 30       	cpi	r25, 0x01	; 1
    49a4:	08 f0       	brcs	.+2      	; 0x49a8 <__ftoa_engine+0x40>
    49a6:	80 68       	ori	r24, 0x80	; 128
    49a8:	91 1d       	adc	r25, r1
    49aa:	df 93       	push	r29
    49ac:	cf 93       	push	r28
    49ae:	1f 93       	push	r17
    49b0:	0f 93       	push	r16
    49b2:	ff 92       	push	r15
    49b4:	ef 92       	push	r14
    49b6:	19 2f       	mov	r17, r25
    49b8:	98 7f       	andi	r25, 0xF8	; 248
    49ba:	96 95       	lsr	r25
    49bc:	e9 2f       	mov	r30, r25
    49be:	96 95       	lsr	r25
    49c0:	96 95       	lsr	r25
    49c2:	e9 0f       	add	r30, r25
    49c4:	ff 27       	eor	r31, r31
    49c6:	ea 54       	subi	r30, 0x4A	; 74
    49c8:	fe 4f       	sbci	r31, 0xFE	; 254
    49ca:	99 27       	eor	r25, r25
    49cc:	33 27       	eor	r19, r19
    49ce:	ee 24       	eor	r14, r14
    49d0:	ff 24       	eor	r15, r15
    49d2:	a7 01       	movw	r20, r14
    49d4:	e7 01       	movw	r28, r14
    49d6:	05 90       	lpm	r0, Z+
    49d8:	08 94       	sec
    49da:	07 94       	ror	r0
    49dc:	28 f4       	brcc	.+10     	; 0x49e8 <__ftoa_engine+0x80>
    49de:	36 0f       	add	r19, r22
    49e0:	e7 1e       	adc	r14, r23
    49e2:	f8 1e       	adc	r15, r24
    49e4:	49 1f       	adc	r20, r25
    49e6:	51 1d       	adc	r21, r1
    49e8:	66 0f       	add	r22, r22
    49ea:	77 1f       	adc	r23, r23
    49ec:	88 1f       	adc	r24, r24
    49ee:	99 1f       	adc	r25, r25
    49f0:	06 94       	lsr	r0
    49f2:	a1 f7       	brne	.-24     	; 0x49dc <__ftoa_engine+0x74>
    49f4:	05 90       	lpm	r0, Z+
    49f6:	07 94       	ror	r0
    49f8:	28 f4       	brcc	.+10     	; 0x4a04 <__ftoa_engine+0x9c>
    49fa:	e7 0e       	add	r14, r23
    49fc:	f8 1e       	adc	r15, r24
    49fe:	49 1f       	adc	r20, r25
    4a00:	56 1f       	adc	r21, r22
    4a02:	c1 1d       	adc	r28, r1
    4a04:	77 0f       	add	r23, r23
    4a06:	88 1f       	adc	r24, r24
    4a08:	99 1f       	adc	r25, r25
    4a0a:	66 1f       	adc	r22, r22
    4a0c:	06 94       	lsr	r0
    4a0e:	a1 f7       	brne	.-24     	; 0x49f8 <__ftoa_engine+0x90>
    4a10:	05 90       	lpm	r0, Z+
    4a12:	07 94       	ror	r0
    4a14:	28 f4       	brcc	.+10     	; 0x4a20 <__ftoa_engine+0xb8>
    4a16:	f8 0e       	add	r15, r24
    4a18:	49 1f       	adc	r20, r25
    4a1a:	56 1f       	adc	r21, r22
    4a1c:	c7 1f       	adc	r28, r23
    4a1e:	d1 1d       	adc	r29, r1
    4a20:	88 0f       	add	r24, r24
    4a22:	99 1f       	adc	r25, r25
    4a24:	66 1f       	adc	r22, r22
    4a26:	77 1f       	adc	r23, r23
    4a28:	06 94       	lsr	r0
    4a2a:	a1 f7       	brne	.-24     	; 0x4a14 <__ftoa_engine+0xac>
    4a2c:	05 90       	lpm	r0, Z+
    4a2e:	07 94       	ror	r0
    4a30:	20 f4       	brcc	.+8      	; 0x4a3a <__ftoa_engine+0xd2>
    4a32:	49 0f       	add	r20, r25
    4a34:	56 1f       	adc	r21, r22
    4a36:	c7 1f       	adc	r28, r23
    4a38:	d8 1f       	adc	r29, r24
    4a3a:	99 0f       	add	r25, r25
    4a3c:	66 1f       	adc	r22, r22
    4a3e:	77 1f       	adc	r23, r23
    4a40:	88 1f       	adc	r24, r24
    4a42:	06 94       	lsr	r0
    4a44:	a9 f7       	brne	.-22     	; 0x4a30 <__ftoa_engine+0xc8>
    4a46:	84 91       	lpm	r24, Z
    4a48:	10 95       	com	r17
    4a4a:	17 70       	andi	r17, 0x07	; 7
    4a4c:	41 f0       	breq	.+16     	; 0x4a5e <__ftoa_engine+0xf6>
    4a4e:	d6 95       	lsr	r29
    4a50:	c7 95       	ror	r28
    4a52:	57 95       	ror	r21
    4a54:	47 95       	ror	r20
    4a56:	f7 94       	ror	r15
    4a58:	e7 94       	ror	r14
    4a5a:	1a 95       	dec	r17
    4a5c:	c1 f7       	brne	.-16     	; 0x4a4e <__ftoa_engine+0xe6>
    4a5e:	ec e5       	ldi	r30, 0x5C	; 92
    4a60:	f1 e0       	ldi	r31, 0x01	; 1
    4a62:	68 94       	set
    4a64:	15 90       	lpm	r1, Z+
    4a66:	15 91       	lpm	r17, Z+
    4a68:	35 91       	lpm	r19, Z+
    4a6a:	65 91       	lpm	r22, Z+
    4a6c:	95 91       	lpm	r25, Z+
    4a6e:	05 90       	lpm	r0, Z+
    4a70:	7f e2       	ldi	r23, 0x2F	; 47
    4a72:	73 95       	inc	r23
    4a74:	e1 18       	sub	r14, r1
    4a76:	f1 0a       	sbc	r15, r17
    4a78:	43 0b       	sbc	r20, r19
    4a7a:	56 0b       	sbc	r21, r22
    4a7c:	c9 0b       	sbc	r28, r25
    4a7e:	d0 09       	sbc	r29, r0
    4a80:	c0 f7       	brcc	.-16     	; 0x4a72 <__ftoa_engine+0x10a>
    4a82:	e1 0c       	add	r14, r1
    4a84:	f1 1e       	adc	r15, r17
    4a86:	43 1f       	adc	r20, r19
    4a88:	56 1f       	adc	r21, r22
    4a8a:	c9 1f       	adc	r28, r25
    4a8c:	d0 1d       	adc	r29, r0
    4a8e:	7e f4       	brtc	.+30     	; 0x4aae <__ftoa_engine+0x146>
    4a90:	70 33       	cpi	r23, 0x30	; 48
    4a92:	11 f4       	brne	.+4      	; 0x4a98 <__ftoa_engine+0x130>
    4a94:	8a 95       	dec	r24
    4a96:	e6 cf       	rjmp	.-52     	; 0x4a64 <__ftoa_engine+0xfc>
    4a98:	e8 94       	clt
    4a9a:	01 50       	subi	r16, 0x01	; 1
    4a9c:	30 f0       	brcs	.+12     	; 0x4aaa <__ftoa_engine+0x142>
    4a9e:	08 0f       	add	r16, r24
    4aa0:	0a f4       	brpl	.+2      	; 0x4aa4 <__ftoa_engine+0x13c>
    4aa2:	00 27       	eor	r16, r16
    4aa4:	02 17       	cp	r16, r18
    4aa6:	08 f4       	brcc	.+2      	; 0x4aaa <__ftoa_engine+0x142>
    4aa8:	20 2f       	mov	r18, r16
    4aaa:	23 95       	inc	r18
    4aac:	02 2f       	mov	r16, r18
    4aae:	7a 33       	cpi	r23, 0x3A	; 58
    4ab0:	28 f0       	brcs	.+10     	; 0x4abc <__ftoa_engine+0x154>
    4ab2:	79 e3       	ldi	r23, 0x39	; 57
    4ab4:	7d 93       	st	X+, r23
    4ab6:	2a 95       	dec	r18
    4ab8:	e9 f7       	brne	.-6      	; 0x4ab4 <__ftoa_engine+0x14c>
    4aba:	10 c0       	rjmp	.+32     	; 0x4adc <__ftoa_engine+0x174>
    4abc:	7d 93       	st	X+, r23
    4abe:	2a 95       	dec	r18
    4ac0:	89 f6       	brne	.-94     	; 0x4a64 <__ftoa_engine+0xfc>
    4ac2:	06 94       	lsr	r0
    4ac4:	97 95       	ror	r25
    4ac6:	67 95       	ror	r22
    4ac8:	37 95       	ror	r19
    4aca:	17 95       	ror	r17
    4acc:	17 94       	ror	r1
    4ace:	e1 18       	sub	r14, r1
    4ad0:	f1 0a       	sbc	r15, r17
    4ad2:	43 0b       	sbc	r20, r19
    4ad4:	56 0b       	sbc	r21, r22
    4ad6:	c9 0b       	sbc	r28, r25
    4ad8:	d0 09       	sbc	r29, r0
    4ada:	98 f0       	brcs	.+38     	; 0x4b02 <__ftoa_engine+0x19a>
    4adc:	23 95       	inc	r18
    4ade:	7e 91       	ld	r23, -X
    4ae0:	73 95       	inc	r23
    4ae2:	7a 33       	cpi	r23, 0x3A	; 58
    4ae4:	08 f0       	brcs	.+2      	; 0x4ae8 <__ftoa_engine+0x180>
    4ae6:	70 e3       	ldi	r23, 0x30	; 48
    4ae8:	7c 93       	st	X, r23
    4aea:	20 13       	cpse	r18, r16
    4aec:	b8 f7       	brcc	.-18     	; 0x4adc <__ftoa_engine+0x174>
    4aee:	7e 91       	ld	r23, -X
    4af0:	70 61       	ori	r23, 0x10	; 16
    4af2:	7d 93       	st	X+, r23
    4af4:	30 f0       	brcs	.+12     	; 0x4b02 <__ftoa_engine+0x19a>
    4af6:	83 95       	inc	r24
    4af8:	71 e3       	ldi	r23, 0x31	; 49
    4afa:	7d 93       	st	X+, r23
    4afc:	70 e3       	ldi	r23, 0x30	; 48
    4afe:	2a 95       	dec	r18
    4b00:	e1 f7       	brne	.-8      	; 0x4afa <__ftoa_engine+0x192>
    4b02:	11 24       	eor	r1, r1
    4b04:	ef 90       	pop	r14
    4b06:	ff 90       	pop	r15
    4b08:	0f 91       	pop	r16
    4b0a:	1f 91       	pop	r17
    4b0c:	cf 91       	pop	r28
    4b0e:	df 91       	pop	r29
    4b10:	99 27       	eor	r25, r25
    4b12:	87 fd       	sbrc	r24, 7
    4b14:	90 95       	com	r25
    4b16:	08 95       	ret

00004b18 <strnlen_P>:
    4b18:	fc 01       	movw	r30, r24
    4b1a:	05 90       	lpm	r0, Z+
    4b1c:	61 50       	subi	r22, 0x01	; 1
    4b1e:	70 40       	sbci	r23, 0x00	; 0
    4b20:	01 10       	cpse	r0, r1
    4b22:	d8 f7       	brcc	.-10     	; 0x4b1a <strnlen_P+0x2>
    4b24:	80 95       	com	r24
    4b26:	90 95       	com	r25
    4b28:	8e 0f       	add	r24, r30
    4b2a:	9f 1f       	adc	r25, r31
    4b2c:	08 95       	ret

00004b2e <memcpy>:
    4b2e:	fb 01       	movw	r30, r22
    4b30:	dc 01       	movw	r26, r24
    4b32:	02 c0       	rjmp	.+4      	; 0x4b38 <memcpy+0xa>
    4b34:	01 90       	ld	r0, Z+
    4b36:	0d 92       	st	X+, r0
    4b38:	41 50       	subi	r20, 0x01	; 1
    4b3a:	50 40       	sbci	r21, 0x00	; 0
    4b3c:	d8 f7       	brcc	.-10     	; 0x4b34 <memcpy+0x6>
    4b3e:	08 95       	ret

00004b40 <strnlen>:
    4b40:	fc 01       	movw	r30, r24
    4b42:	61 50       	subi	r22, 0x01	; 1
    4b44:	70 40       	sbci	r23, 0x00	; 0
    4b46:	01 90       	ld	r0, Z+
    4b48:	01 10       	cpse	r0, r1
    4b4a:	d8 f7       	brcc	.-10     	; 0x4b42 <strnlen+0x2>
    4b4c:	80 95       	com	r24
    4b4e:	90 95       	com	r25
    4b50:	8e 0f       	add	r24, r30
    4b52:	9f 1f       	adc	r25, r31
    4b54:	08 95       	ret

00004b56 <fputc>:
    4b56:	0f 93       	push	r16
    4b58:	1f 93       	push	r17
    4b5a:	cf 93       	push	r28
    4b5c:	df 93       	push	r29
    4b5e:	fb 01       	movw	r30, r22
    4b60:	23 81       	ldd	r18, Z+3	; 0x03
    4b62:	21 fd       	sbrc	r18, 1
    4b64:	03 c0       	rjmp	.+6      	; 0x4b6c <fputc+0x16>
    4b66:	8f ef       	ldi	r24, 0xFF	; 255
    4b68:	9f ef       	ldi	r25, 0xFF	; 255
    4b6a:	2c c0       	rjmp	.+88     	; 0x4bc4 <fputc+0x6e>
    4b6c:	22 ff       	sbrs	r18, 2
    4b6e:	16 c0       	rjmp	.+44     	; 0x4b9c <fputc+0x46>
    4b70:	46 81       	ldd	r20, Z+6	; 0x06
    4b72:	57 81       	ldd	r21, Z+7	; 0x07
    4b74:	24 81       	ldd	r18, Z+4	; 0x04
    4b76:	35 81       	ldd	r19, Z+5	; 0x05
    4b78:	42 17       	cp	r20, r18
    4b7a:	53 07       	cpc	r21, r19
    4b7c:	44 f4       	brge	.+16     	; 0x4b8e <fputc+0x38>
    4b7e:	a0 81       	ld	r26, Z
    4b80:	b1 81       	ldd	r27, Z+1	; 0x01
    4b82:	9d 01       	movw	r18, r26
    4b84:	2f 5f       	subi	r18, 0xFF	; 255
    4b86:	3f 4f       	sbci	r19, 0xFF	; 255
    4b88:	31 83       	std	Z+1, r19	; 0x01
    4b8a:	20 83       	st	Z, r18
    4b8c:	8c 93       	st	X, r24
    4b8e:	26 81       	ldd	r18, Z+6	; 0x06
    4b90:	37 81       	ldd	r19, Z+7	; 0x07
    4b92:	2f 5f       	subi	r18, 0xFF	; 255
    4b94:	3f 4f       	sbci	r19, 0xFF	; 255
    4b96:	37 83       	std	Z+7, r19	; 0x07
    4b98:	26 83       	std	Z+6, r18	; 0x06
    4b9a:	14 c0       	rjmp	.+40     	; 0x4bc4 <fputc+0x6e>
    4b9c:	8b 01       	movw	r16, r22
    4b9e:	ec 01       	movw	r28, r24
    4ba0:	fb 01       	movw	r30, r22
    4ba2:	00 84       	ldd	r0, Z+8	; 0x08
    4ba4:	f1 85       	ldd	r31, Z+9	; 0x09
    4ba6:	e0 2d       	mov	r30, r0
    4ba8:	19 95       	eicall
    4baa:	89 2b       	or	r24, r25
    4bac:	e1 f6       	brne	.-72     	; 0x4b66 <fputc+0x10>
    4bae:	d8 01       	movw	r26, r16
    4bb0:	16 96       	adiw	r26, 0x06	; 6
    4bb2:	8d 91       	ld	r24, X+
    4bb4:	9c 91       	ld	r25, X
    4bb6:	17 97       	sbiw	r26, 0x07	; 7
    4bb8:	01 96       	adiw	r24, 0x01	; 1
    4bba:	17 96       	adiw	r26, 0x07	; 7
    4bbc:	9c 93       	st	X, r25
    4bbe:	8e 93       	st	-X, r24
    4bc0:	16 97       	sbiw	r26, 0x06	; 6
    4bc2:	ce 01       	movw	r24, r28
    4bc4:	df 91       	pop	r29
    4bc6:	cf 91       	pop	r28
    4bc8:	1f 91       	pop	r17
    4bca:	0f 91       	pop	r16
    4bcc:	08 95       	ret

00004bce <printf>:
    4bce:	cf 93       	push	r28
    4bd0:	df 93       	push	r29
    4bd2:	cd b7       	in	r28, 0x3d	; 61
    4bd4:	de b7       	in	r29, 0x3e	; 62
    4bd6:	ae 01       	movw	r20, r28
    4bd8:	4a 5f       	subi	r20, 0xFA	; 250
    4bda:	5f 4f       	sbci	r21, 0xFF	; 255
    4bdc:	fa 01       	movw	r30, r20
    4bde:	61 91       	ld	r22, Z+
    4be0:	71 91       	ld	r23, Z+
    4be2:	af 01       	movw	r20, r30
    4be4:	80 91 a7 1a 	lds	r24, 0x1AA7	; 0x801aa7 <__iob+0x2>
    4be8:	90 91 a8 1a 	lds	r25, 0x1AA8	; 0x801aa8 <__iob+0x3>
    4bec:	99 da       	rcall	.-2766   	; 0x4120 <vfprintf>
    4bee:	df 91       	pop	r29
    4bf0:	cf 91       	pop	r28
    4bf2:	08 95       	ret

00004bf4 <printf_P>:
    4bf4:	0f 93       	push	r16
    4bf6:	1f 93       	push	r17
    4bf8:	cf 93       	push	r28
    4bfa:	df 93       	push	r29
    4bfc:	cd b7       	in	r28, 0x3d	; 61
    4bfe:	de b7       	in	r29, 0x3e	; 62
    4c00:	ae 01       	movw	r20, r28
    4c02:	48 5f       	subi	r20, 0xF8	; 248
    4c04:	5f 4f       	sbci	r21, 0xFF	; 255
    4c06:	da 01       	movw	r26, r20
    4c08:	6d 91       	ld	r22, X+
    4c0a:	7d 91       	ld	r23, X+
    4c0c:	ad 01       	movw	r20, r26
    4c0e:	05 ea       	ldi	r16, 0xA5	; 165
    4c10:	1a e1       	ldi	r17, 0x1A	; 26
    4c12:	f8 01       	movw	r30, r16
    4c14:	82 81       	ldd	r24, Z+2	; 0x02
    4c16:	93 81       	ldd	r25, Z+3	; 0x03
    4c18:	dc 01       	movw	r26, r24
    4c1a:	13 96       	adiw	r26, 0x03	; 3
    4c1c:	2c 91       	ld	r18, X
    4c1e:	13 97       	sbiw	r26, 0x03	; 3
    4c20:	28 60       	ori	r18, 0x08	; 8
    4c22:	13 96       	adiw	r26, 0x03	; 3
    4c24:	2c 93       	st	X, r18
    4c26:	7c da       	rcall	.-2824   	; 0x4120 <vfprintf>
    4c28:	d8 01       	movw	r26, r16
    4c2a:	12 96       	adiw	r26, 0x02	; 2
    4c2c:	ed 91       	ld	r30, X+
    4c2e:	fc 91       	ld	r31, X
    4c30:	13 97       	sbiw	r26, 0x03	; 3
    4c32:	23 81       	ldd	r18, Z+3	; 0x03
    4c34:	27 7f       	andi	r18, 0xF7	; 247
    4c36:	23 83       	std	Z+3, r18	; 0x03
    4c38:	df 91       	pop	r29
    4c3a:	cf 91       	pop	r28
    4c3c:	1f 91       	pop	r17
    4c3e:	0f 91       	pop	r16
    4c40:	08 95       	ret

00004c42 <putchar>:
    4c42:	60 91 a7 1a 	lds	r22, 0x1AA7	; 0x801aa7 <__iob+0x2>
    4c46:	70 91 a8 1a 	lds	r23, 0x1AA8	; 0x801aa8 <__iob+0x3>
    4c4a:	85 cf       	rjmp	.-246    	; 0x4b56 <fputc>

00004c4c <__ultoa_invert>:
    4c4c:	fa 01       	movw	r30, r20
    4c4e:	aa 27       	eor	r26, r26
    4c50:	28 30       	cpi	r18, 0x08	; 8
    4c52:	51 f1       	breq	.+84     	; 0x4ca8 <__ultoa_invert+0x5c>
    4c54:	20 31       	cpi	r18, 0x10	; 16
    4c56:	81 f1       	breq	.+96     	; 0x4cb8 <__ultoa_invert+0x6c>
    4c58:	e8 94       	clt
    4c5a:	6f 93       	push	r22
    4c5c:	6e 7f       	andi	r22, 0xFE	; 254
    4c5e:	6e 5f       	subi	r22, 0xFE	; 254
    4c60:	7f 4f       	sbci	r23, 0xFF	; 255
    4c62:	8f 4f       	sbci	r24, 0xFF	; 255
    4c64:	9f 4f       	sbci	r25, 0xFF	; 255
    4c66:	af 4f       	sbci	r26, 0xFF	; 255
    4c68:	b1 e0       	ldi	r27, 0x01	; 1
    4c6a:	3e d0       	rcall	.+124    	; 0x4ce8 <__ultoa_invert+0x9c>
    4c6c:	b4 e0       	ldi	r27, 0x04	; 4
    4c6e:	3c d0       	rcall	.+120    	; 0x4ce8 <__ultoa_invert+0x9c>
    4c70:	67 0f       	add	r22, r23
    4c72:	78 1f       	adc	r23, r24
    4c74:	89 1f       	adc	r24, r25
    4c76:	9a 1f       	adc	r25, r26
    4c78:	a1 1d       	adc	r26, r1
    4c7a:	68 0f       	add	r22, r24
    4c7c:	79 1f       	adc	r23, r25
    4c7e:	8a 1f       	adc	r24, r26
    4c80:	91 1d       	adc	r25, r1
    4c82:	a1 1d       	adc	r26, r1
    4c84:	6a 0f       	add	r22, r26
    4c86:	71 1d       	adc	r23, r1
    4c88:	81 1d       	adc	r24, r1
    4c8a:	91 1d       	adc	r25, r1
    4c8c:	a1 1d       	adc	r26, r1
    4c8e:	20 d0       	rcall	.+64     	; 0x4cd0 <__ultoa_invert+0x84>
    4c90:	09 f4       	brne	.+2      	; 0x4c94 <__ultoa_invert+0x48>
    4c92:	68 94       	set
    4c94:	3f 91       	pop	r19
    4c96:	2a e0       	ldi	r18, 0x0A	; 10
    4c98:	26 9f       	mul	r18, r22
    4c9a:	11 24       	eor	r1, r1
    4c9c:	30 19       	sub	r19, r0
    4c9e:	30 5d       	subi	r19, 0xD0	; 208
    4ca0:	31 93       	st	Z+, r19
    4ca2:	de f6       	brtc	.-74     	; 0x4c5a <__ultoa_invert+0xe>
    4ca4:	cf 01       	movw	r24, r30
    4ca6:	08 95       	ret
    4ca8:	46 2f       	mov	r20, r22
    4caa:	47 70       	andi	r20, 0x07	; 7
    4cac:	40 5d       	subi	r20, 0xD0	; 208
    4cae:	41 93       	st	Z+, r20
    4cb0:	b3 e0       	ldi	r27, 0x03	; 3
    4cb2:	0f d0       	rcall	.+30     	; 0x4cd2 <__ultoa_invert+0x86>
    4cb4:	c9 f7       	brne	.-14     	; 0x4ca8 <__ultoa_invert+0x5c>
    4cb6:	f6 cf       	rjmp	.-20     	; 0x4ca4 <__ultoa_invert+0x58>
    4cb8:	46 2f       	mov	r20, r22
    4cba:	4f 70       	andi	r20, 0x0F	; 15
    4cbc:	40 5d       	subi	r20, 0xD0	; 208
    4cbe:	4a 33       	cpi	r20, 0x3A	; 58
    4cc0:	18 f0       	brcs	.+6      	; 0x4cc8 <__ultoa_invert+0x7c>
    4cc2:	49 5d       	subi	r20, 0xD9	; 217
    4cc4:	31 fd       	sbrc	r19, 1
    4cc6:	40 52       	subi	r20, 0x20	; 32
    4cc8:	41 93       	st	Z+, r20
    4cca:	02 d0       	rcall	.+4      	; 0x4cd0 <__ultoa_invert+0x84>
    4ccc:	a9 f7       	brne	.-22     	; 0x4cb8 <__ultoa_invert+0x6c>
    4cce:	ea cf       	rjmp	.-44     	; 0x4ca4 <__ultoa_invert+0x58>
    4cd0:	b4 e0       	ldi	r27, 0x04	; 4
    4cd2:	a6 95       	lsr	r26
    4cd4:	97 95       	ror	r25
    4cd6:	87 95       	ror	r24
    4cd8:	77 95       	ror	r23
    4cda:	67 95       	ror	r22
    4cdc:	ba 95       	dec	r27
    4cde:	c9 f7       	brne	.-14     	; 0x4cd2 <__ultoa_invert+0x86>
    4ce0:	00 97       	sbiw	r24, 0x00	; 0
    4ce2:	61 05       	cpc	r22, r1
    4ce4:	71 05       	cpc	r23, r1
    4ce6:	08 95       	ret
    4ce8:	9b 01       	movw	r18, r22
    4cea:	ac 01       	movw	r20, r24
    4cec:	0a 2e       	mov	r0, r26
    4cee:	06 94       	lsr	r0
    4cf0:	57 95       	ror	r21
    4cf2:	47 95       	ror	r20
    4cf4:	37 95       	ror	r19
    4cf6:	27 95       	ror	r18
    4cf8:	ba 95       	dec	r27
    4cfa:	c9 f7       	brne	.-14     	; 0x4cee <__ultoa_invert+0xa2>
    4cfc:	62 0f       	add	r22, r18
    4cfe:	73 1f       	adc	r23, r19
    4d00:	84 1f       	adc	r24, r20
    4d02:	95 1f       	adc	r25, r21
    4d04:	a0 1d       	adc	r26, r0
    4d06:	08 95       	ret

00004d08 <__muluhisi3>:
    4d08:	0f d0       	rcall	.+30     	; 0x4d28 <__umulhisi3>
    4d0a:	a5 9f       	mul	r26, r21
    4d0c:	90 0d       	add	r25, r0
    4d0e:	b4 9f       	mul	r27, r20
    4d10:	90 0d       	add	r25, r0
    4d12:	a4 9f       	mul	r26, r20
    4d14:	80 0d       	add	r24, r0
    4d16:	91 1d       	adc	r25, r1
    4d18:	11 24       	eor	r1, r1
    4d1a:	08 95       	ret

00004d1c <__mulshisi3>:
    4d1c:	b7 ff       	sbrs	r27, 7
    4d1e:	f4 cf       	rjmp	.-24     	; 0x4d08 <__muluhisi3>

00004d20 <__mulohisi3>:
    4d20:	f3 df       	rcall	.-26     	; 0x4d08 <__muluhisi3>
    4d22:	82 1b       	sub	r24, r18
    4d24:	93 0b       	sbc	r25, r19
    4d26:	08 95       	ret

00004d28 <__umulhisi3>:
    4d28:	a2 9f       	mul	r26, r18
    4d2a:	b0 01       	movw	r22, r0
    4d2c:	b3 9f       	mul	r27, r19
    4d2e:	c0 01       	movw	r24, r0
    4d30:	a3 9f       	mul	r26, r19
    4d32:	70 0d       	add	r23, r0
    4d34:	81 1d       	adc	r24, r1
    4d36:	11 24       	eor	r1, r1
    4d38:	91 1d       	adc	r25, r1
    4d3a:	b2 9f       	mul	r27, r18
    4d3c:	70 0d       	add	r23, r0
    4d3e:	81 1d       	adc	r24, r1
    4d40:	11 24       	eor	r1, r1
    4d42:	91 1d       	adc	r25, r1
    4d44:	08 95       	ret

00004d46 <_exit>:
    4d46:	f8 94       	cli

00004d48 <__stop_program>:
    4d48:	ff cf       	rjmp	.-2      	; 0x4d48 <__stop_program>
